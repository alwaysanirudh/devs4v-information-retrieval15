#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/InvalidTokenOffsetsException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *InvalidTokenOffsetsException::class$ = NULL;
          jmethodID *InvalidTokenOffsetsException::mids$ = NULL;
          bool InvalidTokenOffsetsException::live$ = false;

          jclass InvalidTokenOffsetsException::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/InvalidTokenOffsetsException");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          InvalidTokenOffsetsException::InvalidTokenOffsetsException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_InvalidTokenOffsetsException_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_InvalidTokenOffsetsException_instance_(PyTypeObject *type, PyObject *arg);
          static int t_InvalidTokenOffsetsException_init_(t_InvalidTokenOffsetsException *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_InvalidTokenOffsetsException__methods_[] = {
            DECLARE_METHOD(t_InvalidTokenOffsetsException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InvalidTokenOffsetsException, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(InvalidTokenOffsetsException, t_InvalidTokenOffsetsException, ::java::lang::Exception, InvalidTokenOffsetsException, t_InvalidTokenOffsetsException_init_, 0, 0, 0, 0, 0);

          void t_InvalidTokenOffsetsException::install(PyObject *module)
          {
            installType(&PY_TYPE(InvalidTokenOffsetsException), module, "InvalidTokenOffsetsException", 0);
          }

          void t_InvalidTokenOffsetsException::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(InvalidTokenOffsetsException).tp_dict, "class_", make_descriptor(InvalidTokenOffsetsException::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(InvalidTokenOffsetsException).tp_dict, "wrapfn_", make_descriptor(t_InvalidTokenOffsetsException::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(InvalidTokenOffsetsException).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_InvalidTokenOffsetsException_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, InvalidTokenOffsetsException::initializeClass, 1)))
              return NULL;
            return t_InvalidTokenOffsetsException::wrap_Object(InvalidTokenOffsetsException(((t_InvalidTokenOffsetsException *) arg)->object.this$));
          }
          static PyObject *t_InvalidTokenOffsetsException_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, InvalidTokenOffsetsException::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_InvalidTokenOffsetsException_init_(t_InvalidTokenOffsetsException *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            InvalidTokenOffsetsException object((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              INT_CALL(object = InvalidTokenOffsetsException(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/QueryParserTokenManager.h"
#include "java/io/PrintStream.h"
#include "org/apache/lucene/queryparser/classic/Token.h"
#include "org/apache/lucene/queryparser/classic/QueryParserConstants.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *QueryParserTokenManager::class$ = NULL;
          jmethodID *QueryParserTokenManager::mids$ = NULL;
          jfieldID *QueryParserTokenManager::fids$ = NULL;
          bool QueryParserTokenManager::live$ = false;
          JArray< jint > *QueryParserTokenManager::jjnewLexState = NULL;
          JArray< ::java::lang::String > *QueryParserTokenManager::jjstrLiteralImages = NULL;
          JArray< ::java::lang::String > *QueryParserTokenManager::lexStateNames = NULL;

          jclass QueryParserTokenManager::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/QueryParserTokenManager");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_24bde9d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/CharStream;)V");
              mids$[mid_init$_27f0394b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/CharStream;I)V");
              mids$[mid_ReInit_24bde9d3] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/classic/CharStream;)V");
              mids$[mid_ReInit_27f0394b] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/classic/CharStream;I)V");
              mids$[mid_SwitchTo_39c7bd3c] = env->getMethodID(cls, "SwitchTo", "(I)V");
              mids$[mid_getNextToken_1983cf96] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/classic/Token;");
              mids$[mid_setDebugStream_1b7c898b] = env->getMethodID(cls, "setDebugStream", "(Ljava/io/PrintStream;)V");
              mids$[mid_jjFillToken_1983cf96] = env->getMethodID(cls, "jjFillToken", "()Lorg/apache/lucene/queryparser/classic/Token;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_debugStream] = env->getFieldID(cls, "debugStream", "Ljava/io/PrintStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              jjnewLexState = new JArray< jint >(env->getStaticObjectField(cls, "jjnewLexState", "[I"));
              jjstrLiteralImages = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "jjstrLiteralImages", "[Ljava/lang/String;"));
              lexStateNames = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "lexStateNames", "[Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryParserTokenManager::QueryParserTokenManager(const ::org::apache::lucene::queryparser::classic::CharStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_24bde9d3, a0.this$)) {}

          QueryParserTokenManager::QueryParserTokenManager(const ::org::apache::lucene::queryparser::classic::CharStream & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_27f0394b, a0.this$, a1)) {}

          void QueryParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::classic::CharStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_ReInit_24bde9d3], a0.this$);
          }

          void QueryParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::classic::CharStream & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_ReInit_27f0394b], a0.this$, a1);
          }

          void QueryParserTokenManager::SwitchTo(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_SwitchTo_39c7bd3c], a0);
          }

          ::org::apache::lucene::queryparser::classic::Token QueryParserTokenManager::getNextToken() const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_1983cf96]));
          }

          void QueryParserTokenManager::setDebugStream(const ::java::io::PrintStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDebugStream_1b7c898b], a0.this$);
          }

          ::java::io::PrintStream QueryParserTokenManager::_get_debugStream() const
          {
            return ::java::io::PrintStream(env->getObjectField(this$, fids$[fid_debugStream]));
          }

          void QueryParserTokenManager::_set_debugStream(const ::java::io::PrintStream & a0) const
          {
            env->setObjectField(this$, fids$[fid_debugStream], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_QueryParserTokenManager_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParserTokenManager_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryParserTokenManager_init_(t_QueryParserTokenManager *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryParserTokenManager_ReInit(t_QueryParserTokenManager *self, PyObject *args);
          static PyObject *t_QueryParserTokenManager_SwitchTo(t_QueryParserTokenManager *self, PyObject *arg);
          static PyObject *t_QueryParserTokenManager_getNextToken(t_QueryParserTokenManager *self);
          static PyObject *t_QueryParserTokenManager_setDebugStream(t_QueryParserTokenManager *self, PyObject *arg);

          static int t_QueryParserTokenManager_set__debugStream(t_QueryParserTokenManager *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserTokenManager_get__nextToken(t_QueryParserTokenManager *self, void *data);
          static PyGetSetDef t_QueryParserTokenManager__fields_[] = {
            DECLARE_SET_FIELD(t_QueryParserTokenManager, debugStream),
            DECLARE_GET_FIELD(t_QueryParserTokenManager, nextToken),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryParserTokenManager__methods_[] = {
            DECLARE_METHOD(t_QueryParserTokenManager, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserTokenManager, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserTokenManager, ReInit, METH_VARARGS),
            DECLARE_METHOD(t_QueryParserTokenManager, SwitchTo, METH_O),
            DECLARE_METHOD(t_QueryParserTokenManager, getNextToken, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserTokenManager, setDebugStream, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryParserTokenManager, t_QueryParserTokenManager, ::java::lang::Object, QueryParserTokenManager, t_QueryParserTokenManager_init_, 0, 0, t_QueryParserTokenManager__fields_, 0, 0);

          void t_QueryParserTokenManager::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryParserTokenManager), module, "QueryParserTokenManager", 0);
          }

          void t_QueryParserTokenManager::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "class_", make_descriptor(QueryParserTokenManager::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "wrapfn_", make_descriptor(t_QueryParserTokenManager::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(QueryParserTokenManager::initializeClass);
            PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "jjnewLexState", make_descriptor(QueryParserTokenManager::jjnewLexState->wrap()));
            PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "jjstrLiteralImages", make_descriptor(JArray<jstring>(QueryParserTokenManager::jjstrLiteralImages->this$).wrap()));
            PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "lexStateNames", make_descriptor(JArray<jstring>(QueryParserTokenManager::lexStateNames->this$).wrap()));
          }

          static PyObject *t_QueryParserTokenManager_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryParserTokenManager::initializeClass, 1)))
              return NULL;
            return t_QueryParserTokenManager::wrap_Object(QueryParserTokenManager(((t_QueryParserTokenManager *) arg)->object.this$));
          }
          static PyObject *t_QueryParserTokenManager_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryParserTokenManager::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryParserTokenManager_init_(t_QueryParserTokenManager *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);
                QueryParserTokenManager object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0))
                {
                  INT_CALL(object = QueryParserTokenManager(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);
                jint a1;
                QueryParserTokenManager object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = QueryParserTokenManager(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryParserTokenManager_ReInit(t_QueryParserTokenManager *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.ReInit(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);
                jint a1;

                if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(self->object.ReInit(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "ReInit", args);
            return NULL;
          }

          static PyObject *t_QueryParserTokenManager_SwitchTo(t_QueryParserTokenManager *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.SwitchTo(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "SwitchTo", arg);
            return NULL;
          }

          static PyObject *t_QueryParserTokenManager_getNextToken(t_QueryParserTokenManager *self)
          {
            ::org::apache::lucene::queryparser::classic::Token result((jobject) NULL);
            OBJ_CALL(result = self->object.getNextToken());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(result);
          }

          static PyObject *t_QueryParserTokenManager_setDebugStream(t_QueryParserTokenManager *self, PyObject *arg)
          {
            ::java::io::PrintStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setDebugStream(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDebugStream", arg);
            return NULL;
          }

          static int t_QueryParserTokenManager_set__debugStream(t_QueryParserTokenManager *self, PyObject *arg, void *data)
          {
            {
              ::java::io::PrintStream value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
              {
                INT_CALL(self->object.setDebugStream(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "debugStream", arg);
            return -1;
          }

          static PyObject *t_QueryParserTokenManager_get__nextToken(t_QueryParserTokenManager *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            OBJ_CALL(value = self->object.getNextToken());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/CollectedSearchGroup.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *CollectedSearchGroup::class$ = NULL;
          jmethodID *CollectedSearchGroup::mids$ = NULL;
          bool CollectedSearchGroup::live$ = false;

          jclass CollectedSearchGroup::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/CollectedSearchGroup");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CollectedSearchGroup::CollectedSearchGroup() : ::org::apache::lucene::search::grouping::SearchGroup(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_CollectedSearchGroup_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CollectedSearchGroup_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CollectedSearchGroup_of_(t_CollectedSearchGroup *self, PyObject *args);
          static int t_CollectedSearchGroup_init_(t_CollectedSearchGroup *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CollectedSearchGroup_get__parameters_(t_CollectedSearchGroup *self, void *data);
          static PyGetSetDef t_CollectedSearchGroup__fields_[] = {
            DECLARE_GET_FIELD(t_CollectedSearchGroup, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CollectedSearchGroup__methods_[] = {
            DECLARE_METHOD(t_CollectedSearchGroup, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CollectedSearchGroup, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CollectedSearchGroup, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CollectedSearchGroup, t_CollectedSearchGroup, ::org::apache::lucene::search::grouping::SearchGroup, CollectedSearchGroup, t_CollectedSearchGroup_init_, 0, 0, t_CollectedSearchGroup__fields_, 0, 0);
          PyObject *t_CollectedSearchGroup::wrap_Object(const CollectedSearchGroup& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CollectedSearchGroup::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CollectedSearchGroup *self = (t_CollectedSearchGroup *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CollectedSearchGroup::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CollectedSearchGroup::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CollectedSearchGroup *self = (t_CollectedSearchGroup *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CollectedSearchGroup::install(PyObject *module)
          {
            installType(&PY_TYPE(CollectedSearchGroup), module, "CollectedSearchGroup", 0);
          }

          void t_CollectedSearchGroup::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CollectedSearchGroup).tp_dict, "class_", make_descriptor(CollectedSearchGroup::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CollectedSearchGroup).tp_dict, "wrapfn_", make_descriptor(t_CollectedSearchGroup::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CollectedSearchGroup).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CollectedSearchGroup_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CollectedSearchGroup::initializeClass, 1)))
              return NULL;
            return t_CollectedSearchGroup::wrap_Object(CollectedSearchGroup(((t_CollectedSearchGroup *) arg)->object.this$));
          }
          static PyObject *t_CollectedSearchGroup_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CollectedSearchGroup::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CollectedSearchGroup_of_(t_CollectedSearchGroup *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_CollectedSearchGroup_init_(t_CollectedSearchGroup *self, PyObject *args, PyObject *kwds)
          {
            CollectedSearchGroup object((jobject) NULL);

            INT_CALL(object = CollectedSearchGroup());
            self->object = object;

            return 0;
          }
          static PyObject *t_CollectedSearchGroup_get__parameters_(t_CollectedSearchGroup *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {

              ::java::lang::Class *QueryConfigHandler::class$ = NULL;
              jmethodID *QueryConfigHandler::mids$ = NULL;
              bool QueryConfigHandler::live$ = false;

              jclass QueryConfigHandler::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_addFieldConfigListener_cafa3927] = env->getMethodID(cls, "addFieldConfigListener", "(Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfigListener;)V");
                  mids$[mid_getFieldConfig_081010e4] = env->getMethodID(cls, "getFieldConfig", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfig;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QueryConfigHandler::QueryConfigHandler() : ::org::apache::lucene::queryparser::flexible::core::config::AbstractQueryConfig(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              void QueryConfigHandler::addFieldConfigListener(const ::org::apache::lucene::queryparser::flexible::core::config::FieldConfigListener & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_addFieldConfigListener_cafa3927], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig QueryConfigHandler::getFieldConfig(const ::java::lang::String & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig(env->callObjectMethod(this$, mids$[mid_getFieldConfig_081010e4], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {
              static PyObject *t_QueryConfigHandler_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryConfigHandler_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QueryConfigHandler_init_(t_QueryConfigHandler *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QueryConfigHandler_addFieldConfigListener(t_QueryConfigHandler *self, PyObject *arg);
              static PyObject *t_QueryConfigHandler_getFieldConfig(t_QueryConfigHandler *self, PyObject *arg);

              static PyMethodDef t_QueryConfigHandler__methods_[] = {
                DECLARE_METHOD(t_QueryConfigHandler, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryConfigHandler, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryConfigHandler, addFieldConfigListener, METH_O),
                DECLARE_METHOD(t_QueryConfigHandler, getFieldConfig, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryConfigHandler, t_QueryConfigHandler, ::org::apache::lucene::queryparser::flexible::core::config::AbstractQueryConfig, QueryConfigHandler, t_QueryConfigHandler_init_, 0, 0, 0, 0, 0);

              void t_QueryConfigHandler::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryConfigHandler), module, "QueryConfigHandler", 0);
              }

              void t_QueryConfigHandler::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryConfigHandler).tp_dict, "class_", make_descriptor(QueryConfigHandler::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryConfigHandler).tp_dict, "wrapfn_", make_descriptor(t_QueryConfigHandler::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryConfigHandler).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryConfigHandler_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryConfigHandler::initializeClass, 1)))
                  return NULL;
                return t_QueryConfigHandler::wrap_Object(QueryConfigHandler(((t_QueryConfigHandler *) arg)->object.this$));
              }
              static PyObject *t_QueryConfigHandler_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryConfigHandler::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QueryConfigHandler_init_(t_QueryConfigHandler *self, PyObject *args, PyObject *kwds)
              {
                QueryConfigHandler object((jobject) NULL);

                INT_CALL(object = QueryConfigHandler());
                self->object = object;

                return 0;
              }

              static PyObject *t_QueryConfigHandler_addFieldConfigListener(t_QueryConfigHandler *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfigListener a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::FieldConfigListener::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.addFieldConfigListener(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "addFieldConfigListener", arg);
                return NULL;
              }

              static PyObject *t_QueryConfigHandler_getFieldConfig(t_QueryConfigHandler *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig result((jobject) NULL);

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(result = self->object.getFieldConfig(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::config::t_FieldConfig::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "getFieldConfig", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocsEnum.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MultiDocsEnum$EnumWithSlice.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MultiTermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocsEnum::class$ = NULL;
        jmethodID *MultiDocsEnum::mids$ = NULL;
        bool MultiDocsEnum::live$ = false;

        jclass MultiDocsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7d44bb06] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/MultiTermsEnum;I)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_canReuse_4fe73d2c] = env->getMethodID(cls, "canReuse", "(Lorg/apache/lucene/index/MultiTermsEnum;)Z");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_getNumSubs_54c6a179] = env->getMethodID(cls, "getNumSubs", "()I");
            mids$[mid_getSubs_1bdfab69] = env->getMethodID(cls, "getSubs", "()[Lorg/apache/lucene/index/MultiDocsEnum$EnumWithSlice;");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiDocsEnum::MultiDocsEnum(const ::org::apache::lucene::index::MultiTermsEnum & a0, jint a1) : ::org::apache::lucene::index::DocsEnum(env->newObject(initializeClass, &mids$, mid_init$_7d44bb06, a0.this$, a1)) {}

        jint MultiDocsEnum::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jboolean MultiDocsEnum::canReuse(const ::org::apache::lucene::index::MultiTermsEnum & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_canReuse_4fe73d2c], a0.this$);
        }

        jlong MultiDocsEnum::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint MultiDocsEnum::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint MultiDocsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }

        jint MultiDocsEnum::getNumSubs() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumSubs_54c6a179]);
        }

        JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice > MultiDocsEnum::getSubs() const
        {
          return JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice >(env->callObjectMethod(this$, mids$[mid_getSubs_1bdfab69]));
        }

        jint MultiDocsEnum::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }

        ::java::lang::String MultiDocsEnum::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiDocsEnum_init_(t_MultiDocsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiDocsEnum_advance(t_MultiDocsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsEnum_canReuse(t_MultiDocsEnum *self, PyObject *arg);
        static PyObject *t_MultiDocsEnum_cost(t_MultiDocsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsEnum_docID(t_MultiDocsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsEnum_freq(t_MultiDocsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsEnum_getNumSubs(t_MultiDocsEnum *self);
        static PyObject *t_MultiDocsEnum_getSubs(t_MultiDocsEnum *self);
        static PyObject *t_MultiDocsEnum_nextDoc(t_MultiDocsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsEnum_toString(t_MultiDocsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsEnum_get__numSubs(t_MultiDocsEnum *self, void *data);
        static PyObject *t_MultiDocsEnum_get__subs(t_MultiDocsEnum *self, void *data);
        static PyGetSetDef t_MultiDocsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_MultiDocsEnum, numSubs),
          DECLARE_GET_FIELD(t_MultiDocsEnum, subs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocsEnum__methods_[] = {
          DECLARE_METHOD(t_MultiDocsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsEnum, advance, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsEnum, canReuse, METH_O),
          DECLARE_METHOD(t_MultiDocsEnum, cost, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsEnum, docID, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsEnum, freq, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsEnum, getNumSubs, METH_NOARGS),
          DECLARE_METHOD(t_MultiDocsEnum, getSubs, METH_NOARGS),
          DECLARE_METHOD(t_MultiDocsEnum, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsEnum, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocsEnum, t_MultiDocsEnum, ::org::apache::lucene::index::DocsEnum, MultiDocsEnum, t_MultiDocsEnum_init_, 0, 0, t_MultiDocsEnum__fields_, 0, 0);

        void t_MultiDocsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocsEnum), module, "MultiDocsEnum", 0);
          PyDict_SetItemString(PY_TYPE(MultiDocsEnum).tp_dict, "EnumWithSlice", make_descriptor(&PY_TYPE(MultiDocsEnum$EnumWithSlice)));
        }

        void t_MultiDocsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocsEnum).tp_dict, "class_", make_descriptor(MultiDocsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocsEnum).tp_dict, "wrapfn_", make_descriptor(t_MultiDocsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocsEnum::initializeClass, 1)))
            return NULL;
          return t_MultiDocsEnum::wrap_Object(MultiDocsEnum(((t_MultiDocsEnum *) arg)->object.this$));
        }
        static PyObject *t_MultiDocsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiDocsEnum_init_(t_MultiDocsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::MultiTermsEnum a0((jobject) NULL);
          jint a1;
          MultiDocsEnum object((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::MultiTermsEnum::initializeClass, &a0, &a1))
          {
            INT_CALL(object = MultiDocsEnum(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiDocsEnum_advance(t_MultiDocsEnum *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsEnum), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_MultiDocsEnum_canReuse(t_MultiDocsEnum *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MultiTermsEnum a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MultiTermsEnum::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.canReuse(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "canReuse", arg);
          return NULL;
        }

        static PyObject *t_MultiDocsEnum_cost(t_MultiDocsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiDocsEnum), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_MultiDocsEnum_docID(t_MultiDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsEnum), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_MultiDocsEnum_freq(t_MultiDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsEnum), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_MultiDocsEnum_getNumSubs(t_MultiDocsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumSubs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MultiDocsEnum_getSubs(t_MultiDocsEnum *self)
        {
          JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubs());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_MultiDocsEnum$EnumWithSlice::wrap_jobject);
        }

        static PyObject *t_MultiDocsEnum_nextDoc(t_MultiDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsEnum), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_MultiDocsEnum_toString(t_MultiDocsEnum *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MultiDocsEnum), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MultiDocsEnum_get__numSubs(t_MultiDocsEnum *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumSubs());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_MultiDocsEnum_get__subs(t_MultiDocsEnum *self, void *data)
        {
          JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubs());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_MultiDocsEnum$EnumWithSlice::wrap_jobject);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/EnumFieldSource.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/Integer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/FieldCache$IntParser.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *EnumFieldSource::class$ = NULL;
            jmethodID *EnumFieldSource::mids$ = NULL;
            bool EnumFieldSource::live$ = false;

            jclass EnumFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/EnumFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_c567ecd0] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$IntParser;Ljava/util/Map;Ljava/util/Map;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            EnumFieldSource::EnumFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$IntParser & a1, const ::java::util::Map & a2, const ::java::util::Map & a3) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_c567ecd0, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            ::java::lang::String EnumFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean EnumFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues EnumFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint EnumFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_EnumFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_EnumFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_EnumFieldSource_init_(t_EnumFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_EnumFieldSource_description(t_EnumFieldSource *self, PyObject *args);
            static PyObject *t_EnumFieldSource_equals(t_EnumFieldSource *self, PyObject *args);
            static PyObject *t_EnumFieldSource_getValues(t_EnumFieldSource *self, PyObject *args);
            static PyObject *t_EnumFieldSource_hashCode(t_EnumFieldSource *self, PyObject *args);

            static PyMethodDef t_EnumFieldSource__methods_[] = {
              DECLARE_METHOD(t_EnumFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_EnumFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_EnumFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_EnumFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_EnumFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_EnumFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(EnumFieldSource, t_EnumFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, EnumFieldSource, t_EnumFieldSource_init_, 0, 0, 0, 0, 0);

            void t_EnumFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(EnumFieldSource), module, "EnumFieldSource", 0);
            }

            void t_EnumFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(EnumFieldSource).tp_dict, "class_", make_descriptor(EnumFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(EnumFieldSource).tp_dict, "wrapfn_", make_descriptor(t_EnumFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(EnumFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_EnumFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, EnumFieldSource::initializeClass, 1)))
                return NULL;
              return t_EnumFieldSource::wrap_Object(EnumFieldSource(((t_EnumFieldSource *) arg)->object.this$));
            }
            static PyObject *t_EnumFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, EnumFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_EnumFieldSource_init_(t_EnumFieldSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$IntParser a1((jobject) NULL);
              ::java::util::Map a2((jobject) NULL);
              PyTypeObject **p2;
              ::java::util::Map a3((jobject) NULL);
              PyTypeObject **p3;
              EnumFieldSource object((jobject) NULL);

              if (!parseArgs(args, "skKK", ::org::apache::lucene::search::FieldCache$IntParser::initializeClass, ::java::util::Map::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3, &p3, ::java::util::t_Map::parameters_))
              {
                INT_CALL(object = EnumFieldSource(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_EnumFieldSource_description(t_EnumFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(EnumFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_EnumFieldSource_equals(t_EnumFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(EnumFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_EnumFieldSource_getValues(t_EnumFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(EnumFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_EnumFieldSource_hashCode(t_EnumFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(EnumFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiAnalyzer::class$ = NULL;
          jmethodID *HindiAnalyzer::mids$ = NULL;
          bool HindiAnalyzer::live$ = false;
          ::java::lang::String *HindiAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass HindiAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiAnalyzer::HindiAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          HindiAnalyzer::HindiAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          HindiAnalyzer::HindiAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet HindiAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiAnalyzer_init_(t_HindiAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_HindiAnalyzer_get__defaultStopSet(t_HindiAnalyzer *self, void *data);
          static PyGetSetDef t_HindiAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_HindiAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_HindiAnalyzer__methods_[] = {
            DECLARE_METHOD(t_HindiAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HindiAnalyzer, t_HindiAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, HindiAnalyzer, t_HindiAnalyzer_init_, 0, 0, t_HindiAnalyzer__fields_, 0, 0);

          void t_HindiAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiAnalyzer), module, "HindiAnalyzer", 0);
          }

          void t_HindiAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HindiAnalyzer).tp_dict, "class_", make_descriptor(HindiAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HindiAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_HindiAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HindiAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(HindiAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(HindiAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*HindiAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_HindiAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiAnalyzer::initializeClass, 1)))
              return NULL;
            return t_HindiAnalyzer::wrap_Object(HindiAnalyzer(((t_HindiAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_HindiAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiAnalyzer_init_(t_HindiAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                HindiAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = HindiAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                HindiAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HindiAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                HindiAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HindiAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HindiAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::hi::HindiAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_HindiAnalyzer_get__defaultStopSet(t_HindiAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeSource$State.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeSource$State::class$ = NULL;
        jmethodID *AttributeSource$State::mids$ = NULL;
        bool AttributeSource$State::live$ = false;

        jclass AttributeSource$State::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeSource$State");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clone_0f9ed4d4] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/AttributeSource$State;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AttributeSource$State::AttributeSource$State() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        AttributeSource$State AttributeSource$State::clone() const
        {
          return AttributeSource$State(env->callObjectMethod(this$, mids$[mid_clone_0f9ed4d4]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeSource$State_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeSource$State_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AttributeSource$State_init_(t_AttributeSource$State *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AttributeSource$State_clone(t_AttributeSource$State *self);

        static PyMethodDef t_AttributeSource$State__methods_[] = {
          DECLARE_METHOD(t_AttributeSource$State, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeSource$State, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeSource$State, clone, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AttributeSource$State, t_AttributeSource$State, ::java::lang::Object, AttributeSource$State, t_AttributeSource$State_init_, 0, 0, 0, 0, 0);

        void t_AttributeSource$State::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeSource$State), module, "AttributeSource$State", 0);
        }

        void t_AttributeSource$State::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AttributeSource$State).tp_dict, "class_", make_descriptor(AttributeSource$State::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AttributeSource$State).tp_dict, "wrapfn_", make_descriptor(t_AttributeSource$State::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AttributeSource$State).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AttributeSource$State_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeSource$State::initializeClass, 1)))
            return NULL;
          return t_AttributeSource$State::wrap_Object(AttributeSource$State(((t_AttributeSource$State *) arg)->object.this$));
        }
        static PyObject *t_AttributeSource$State_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeSource$State::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AttributeSource$State_init_(t_AttributeSource$State *self, PyObject *args, PyObject *kwds)
        {
          AttributeSource$State object((jobject) NULL);

          INT_CALL(object = AttributeSource$State());
          self->object = object;

          return 0;
        }

        static PyObject *t_AttributeSource$State_clone(t_AttributeSource$State *self)
        {
          AttributeSource$State result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_AttributeSource$State::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$FieldNormStatus.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$FieldNormStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$FieldNormStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$FieldNormStatus::fids$ = NULL;
        bool CheckIndex$Status$FieldNormStatus::live$ = false;

        jclass CheckIndex$Status$FieldNormStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$FieldNormStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_error] = env->getFieldID(cls, "error", "Ljava/lang/Throwable;");
            fids$[fid_totFields] = env->getFieldID(cls, "totFields", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Throwable CheckIndex$Status$FieldNormStatus::_get_error() const
        {
          return ::java::lang::Throwable(env->getObjectField(this$, fids$[fid_error]));
        }

        void CheckIndex$Status$FieldNormStatus::_set_error(const ::java::lang::Throwable & a0) const
        {
          env->setObjectField(this$, fids$[fid_error], a0.this$);
        }

        jlong CheckIndex$Status$FieldNormStatus::_get_totFields() const
        {
          return env->getLongField(this$, fids$[fid_totFields]);
        }

        void CheckIndex$Status$FieldNormStatus::_set_totFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totFields], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$FieldNormStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$FieldNormStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$FieldNormStatus_get__error(t_CheckIndex$Status$FieldNormStatus *self, void *data);
        static int t_CheckIndex$Status$FieldNormStatus_set__error(t_CheckIndex$Status$FieldNormStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$FieldNormStatus_get__totFields(t_CheckIndex$Status$FieldNormStatus *self, void *data);
        static int t_CheckIndex$Status$FieldNormStatus_set__totFields(t_CheckIndex$Status$FieldNormStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$FieldNormStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$FieldNormStatus, error),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$FieldNormStatus, totFields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$FieldNormStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$FieldNormStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$FieldNormStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex$Status$FieldNormStatus, t_CheckIndex$Status$FieldNormStatus, ::java::lang::Object, CheckIndex$Status$FieldNormStatus, abstract_init, 0, 0, t_CheckIndex$Status$FieldNormStatus__fields_, 0, 0);

        void t_CheckIndex$Status$FieldNormStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$FieldNormStatus), module, "CheckIndex$Status$FieldNormStatus", 0);
        }

        void t_CheckIndex$Status$FieldNormStatus::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$FieldNormStatus).tp_dict, "class_", make_descriptor(CheckIndex$Status$FieldNormStatus::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$FieldNormStatus).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex$Status$FieldNormStatus::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$FieldNormStatus).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$FieldNormStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$FieldNormStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$FieldNormStatus::wrap_Object(CheckIndex$Status$FieldNormStatus(((t_CheckIndex$Status$FieldNormStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$FieldNormStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$FieldNormStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$FieldNormStatus_get__error(t_CheckIndex$Status$FieldNormStatus *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_error());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
        static int t_CheckIndex$Status$FieldNormStatus_set__error(t_CheckIndex$Status$FieldNormStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &value))
          {
            INT_CALL(self->object._set_error(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "error", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$FieldNormStatus_get__totFields(t_CheckIndex$Status$FieldNormStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$FieldNormStatus_set__totFields(t_CheckIndex$Status$FieldNormStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totFields", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hu/HungarianLightStemFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {

          ::java::lang::Class *HungarianLightStemFilterFactory::class$ = NULL;
          jmethodID *HungarianLightStemFilterFactory::mids$ = NULL;
          bool HungarianLightStemFilterFactory::live$ = false;

          jclass HungarianLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hu/HungarianLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HungarianLightStemFilterFactory::HungarianLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream HungarianLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {
          static PyObject *t_HungarianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HungarianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HungarianLightStemFilterFactory_init_(t_HungarianLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HungarianLightStemFilterFactory_create(t_HungarianLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_HungarianLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HungarianLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HungarianLightStemFilterFactory, t_HungarianLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, HungarianLightStemFilterFactory, t_HungarianLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_HungarianLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HungarianLightStemFilterFactory), module, "HungarianLightStemFilterFactory", 0);
          }

          void t_HungarianLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HungarianLightStemFilterFactory).tp_dict, "class_", make_descriptor(HungarianLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HungarianLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_HungarianLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HungarianLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HungarianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HungarianLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HungarianLightStemFilterFactory::wrap_Object(HungarianLightStemFilterFactory(((t_HungarianLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HungarianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HungarianLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HungarianLightStemFilterFactory_init_(t_HungarianLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HungarianLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HungarianLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HungarianLightStemFilterFactory_create(t_HungarianLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(HungarianLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40TermVectorsFormat.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/codecs/TermVectorsWriter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40TermVectorsFormat::class$ = NULL;
          jmethodID *Lucene40TermVectorsFormat::mids$ = NULL;
          bool Lucene40TermVectorsFormat::live$ = false;

          jclass Lucene40TermVectorsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40TermVectorsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_vectorsReader_9c23221f] = env->getMethodID(cls, "vectorsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsReader;");
              mids$[mid_vectorsWriter_0c8458c9] = env->getMethodID(cls, "vectorsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40TermVectorsFormat::Lucene40TermVectorsFormat() : ::org::apache::lucene::codecs::TermVectorsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::TermVectorsReader Lucene40TermVectorsFormat::vectorsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_vectorsReader_9c23221f], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::codecs::TermVectorsWriter Lucene40TermVectorsFormat::vectorsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::codecs::TermVectorsWriter(env->callObjectMethod(this$, mids$[mid_vectorsWriter_0c8458c9], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40TermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40TermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40TermVectorsFormat_init_(t_Lucene40TermVectorsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40TermVectorsFormat_vectorsReader(t_Lucene40TermVectorsFormat *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsFormat_vectorsWriter(t_Lucene40TermVectorsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene40TermVectorsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40TermVectorsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40TermVectorsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40TermVectorsFormat, vectorsReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsFormat, vectorsWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40TermVectorsFormat, t_Lucene40TermVectorsFormat, ::org::apache::lucene::codecs::TermVectorsFormat, Lucene40TermVectorsFormat, t_Lucene40TermVectorsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene40TermVectorsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40TermVectorsFormat), module, "Lucene40TermVectorsFormat", 0);
          }

          void t_Lucene40TermVectorsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsFormat).tp_dict, "class_", make_descriptor(Lucene40TermVectorsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40TermVectorsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40TermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40TermVectorsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40TermVectorsFormat::wrap_Object(Lucene40TermVectorsFormat(((t_Lucene40TermVectorsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40TermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40TermVectorsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40TermVectorsFormat_init_(t_Lucene40TermVectorsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40TermVectorsFormat object((jobject) NULL);

            INT_CALL(object = Lucene40TermVectorsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40TermVectorsFormat_vectorsReader(t_Lucene40TermVectorsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.vectorsReader(a0, a1, a2, a3));
              return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsFormat), (PyObject *) self, "vectorsReader", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsFormat_vectorsWriter(t_Lucene40TermVectorsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::codecs::TermVectorsWriter result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.vectorsWriter(a0, a1, a2));
              return ::org::apache::lucene::codecs::t_TermVectorsWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsFormat), (PyObject *) self, "vectorsWriter", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/AtomicReader$CoreClosedListener.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *AtomicReader::class$ = NULL;
        jmethodID *AtomicReader::mids$ = NULL;
        bool AtomicReader::live$ = false;

        jclass AtomicReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/AtomicReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addCoreClosedListener_cbc2818f] = env->getMethodID(cls, "addCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_docFreq_7eca6a9e] = env->getMethodID(cls, "docFreq", "(Lorg/apache/lucene/index/Term;)I");
            mids$[mid_fields_77db581d] = env->getMethodID(cls, "fields", "()Lorg/apache/lucene/index/Fields;");
            mids$[mid_getBinaryDocValues_ecab96be] = env->getMethodID(cls, "getBinaryDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getContext_c2ef2576] = env->getMethodID(cls, "getContext", "()Lorg/apache/lucene/index/AtomicReaderContext;");
            mids$[mid_getDocCount_5fdc3f57] = env->getMethodID(cls, "getDocCount", "(Ljava/lang/String;)I");
            mids$[mid_getDocsWithField_e1c6a7db] = env->getMethodID(cls, "getDocsWithField", "(Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getFieldInfos_9ba20825] = env->getMethodID(cls, "getFieldInfos", "()Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getLiveDocs_03c2457d] = env->getMethodID(cls, "getLiveDocs", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNormValues_d2b19f49] = env->getMethodID(cls, "getNormValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getNumericDocValues_d2b19f49] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSortedDocValues_7b8b1a0a] = env->getMethodID(cls, "getSortedDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumericDocValues_37cd1812] = env->getMethodID(cls, "getSortedNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetDocValues_43e0e807] = env->getMethodID(cls, "getSortedSetDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getSumDocFreq_5fdc3f54] = env->getMethodID(cls, "getSumDocFreq", "(Ljava/lang/String;)J");
            mids$[mid_getSumTotalTermFreq_5fdc3f54] = env->getMethodID(cls, "getSumTotalTermFreq", "(Ljava/lang/String;)J");
            mids$[mid_hasNorms_5fdc3f44] = env->getMethodID(cls, "hasNorms", "(Ljava/lang/String;)Z");
            mids$[mid_removeCoreClosedListener_cbc2818f] = env->getMethodID(cls, "removeCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_termDocsEnum_d9acd275] = env->getMethodID(cls, "termDocsEnum", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_termPositionsEnum_bf42c6a6] = env->getMethodID(cls, "termPositionsEnum", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_terms_ee262ab4] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");
            mids$[mid_totalTermFreq_7eca6a9d] = env->getMethodID(cls, "totalTermFreq", "(Lorg/apache/lucene/index/Term;)J");
            mids$[mid_addCoreClosedListenerAsReaderClosedListener_36772e26] = env->getStaticMethodID(cls, "addCoreClosedListenerAsReaderClosedListener", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_removeCoreClosedListenerAsReaderClosedListener_36772e26] = env->getStaticMethodID(cls, "removeCoreClosedListenerAsReaderClosedListener", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void AtomicReader::addCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addCoreClosedListener_cbc2818f], a0.this$);
        }

        void AtomicReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        jint AtomicReader::docFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_7eca6a9e], a0.this$);
        }

        ::org::apache::lucene::index::Fields AtomicReader::fields() const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_fields_77db581d]));
        }

        ::org::apache::lucene::index::BinaryDocValues AtomicReader::getBinaryDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinaryDocValues_ecab96be], a0.this$));
        }

        ::org::apache::lucene::index::AtomicReaderContext AtomicReader::getContext() const
        {
          return ::org::apache::lucene::index::AtomicReaderContext(env->callObjectMethod(this$, mids$[mid_getContext_c2ef2576]));
        }

        jint AtomicReader::getDocCount(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_5fdc3f57], a0.this$);
        }

        ::org::apache::lucene::util::Bits AtomicReader::getDocsWithField(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getDocsWithField_e1c6a7db], a0.this$));
        }

        ::org::apache::lucene::index::FieldInfos AtomicReader::getFieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_getFieldInfos_9ba20825]));
        }

        ::org::apache::lucene::util::Bits AtomicReader::getLiveDocs() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getLiveDocs_03c2457d]));
        }

        ::org::apache::lucene::index::NumericDocValues AtomicReader::getNormValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNormValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues AtomicReader::getNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumericDocValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::SortedDocValues AtomicReader::getSortedDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSortedDocValues_7b8b1a0a], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues AtomicReader::getSortedNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumericDocValues_37cd1812], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues AtomicReader::getSortedSetDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSetDocValues_43e0e807], a0.this$));
        }

        jlong AtomicReader::getSumDocFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_5fdc3f54], a0.this$);
        }

        jlong AtomicReader::getSumTotalTermFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_5fdc3f54], a0.this$);
        }

        jboolean AtomicReader::hasNorms(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNorms_5fdc3f44], a0.this$);
        }

        void AtomicReader::removeCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeCoreClosedListener_cbc2818f], a0.this$);
        }

        ::org::apache::lucene::index::DocsEnum AtomicReader::termDocsEnum(const ::org::apache::lucene::index::Term & a0) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_termDocsEnum_d9acd275], a0.this$));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum AtomicReader::termPositionsEnum(const ::org::apache::lucene::index::Term & a0) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_termPositionsEnum_bf42c6a6], a0.this$));
        }

        ::org::apache::lucene::index::Terms AtomicReader::terms(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_ee262ab4], a0.this$));
        }

        jlong AtomicReader::totalTermFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_7eca6a9d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_AtomicReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AtomicReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AtomicReader_addCoreClosedListener(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_checkIntegrity(t_AtomicReader *self);
        static PyObject *t_AtomicReader_docFreq(t_AtomicReader *self, PyObject *args);
        static PyObject *t_AtomicReader_fields(t_AtomicReader *self);
        static PyObject *t_AtomicReader_getBinaryDocValues(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_getContext(t_AtomicReader *self, PyObject *args);
        static PyObject *t_AtomicReader_getDocCount(t_AtomicReader *self, PyObject *args);
        static PyObject *t_AtomicReader_getDocsWithField(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_getFieldInfos(t_AtomicReader *self);
        static PyObject *t_AtomicReader_getLiveDocs(t_AtomicReader *self);
        static PyObject *t_AtomicReader_getNormValues(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_getNumericDocValues(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_getSortedDocValues(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_getSortedNumericDocValues(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_getSortedSetDocValues(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_getSumDocFreq(t_AtomicReader *self, PyObject *args);
        static PyObject *t_AtomicReader_getSumTotalTermFreq(t_AtomicReader *self, PyObject *args);
        static PyObject *t_AtomicReader_hasNorms(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_removeCoreClosedListener(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_termDocsEnum(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_termPositionsEnum(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_terms(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_totalTermFreq(t_AtomicReader *self, PyObject *args);
        static PyObject *t_AtomicReader_get__context(t_AtomicReader *self, void *data);
        static PyObject *t_AtomicReader_get__fieldInfos(t_AtomicReader *self, void *data);
        static PyObject *t_AtomicReader_get__liveDocs(t_AtomicReader *self, void *data);
        static PyGetSetDef t_AtomicReader__fields_[] = {
          DECLARE_GET_FIELD(t_AtomicReader, context),
          DECLARE_GET_FIELD(t_AtomicReader, fieldInfos),
          DECLARE_GET_FIELD(t_AtomicReader, liveDocs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_AtomicReader__methods_[] = {
          DECLARE_METHOD(t_AtomicReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AtomicReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AtomicReader, addCoreClosedListener, METH_O),
          DECLARE_METHOD(t_AtomicReader, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_AtomicReader, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_AtomicReader, fields, METH_NOARGS),
          DECLARE_METHOD(t_AtomicReader, getBinaryDocValues, METH_O),
          DECLARE_METHOD(t_AtomicReader, getContext, METH_VARARGS),
          DECLARE_METHOD(t_AtomicReader, getDocCount, METH_VARARGS),
          DECLARE_METHOD(t_AtomicReader, getDocsWithField, METH_O),
          DECLARE_METHOD(t_AtomicReader, getFieldInfos, METH_NOARGS),
          DECLARE_METHOD(t_AtomicReader, getLiveDocs, METH_NOARGS),
          DECLARE_METHOD(t_AtomicReader, getNormValues, METH_O),
          DECLARE_METHOD(t_AtomicReader, getNumericDocValues, METH_O),
          DECLARE_METHOD(t_AtomicReader, getSortedDocValues, METH_O),
          DECLARE_METHOD(t_AtomicReader, getSortedNumericDocValues, METH_O),
          DECLARE_METHOD(t_AtomicReader, getSortedSetDocValues, METH_O),
          DECLARE_METHOD(t_AtomicReader, getSumDocFreq, METH_VARARGS),
          DECLARE_METHOD(t_AtomicReader, getSumTotalTermFreq, METH_VARARGS),
          DECLARE_METHOD(t_AtomicReader, hasNorms, METH_O),
          DECLARE_METHOD(t_AtomicReader, removeCoreClosedListener, METH_O),
          DECLARE_METHOD(t_AtomicReader, termDocsEnum, METH_O),
          DECLARE_METHOD(t_AtomicReader, termPositionsEnum, METH_O),
          DECLARE_METHOD(t_AtomicReader, terms, METH_O),
          DECLARE_METHOD(t_AtomicReader, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AtomicReader, t_AtomicReader, ::org::apache::lucene::index::IndexReader, AtomicReader, abstract_init, 0, 0, t_AtomicReader__fields_, 0, 0);

        void t_AtomicReader::install(PyObject *module)
        {
          installType(&PY_TYPE(AtomicReader), module, "AtomicReader", 0);
          PyDict_SetItemString(PY_TYPE(AtomicReader).tp_dict, "CoreClosedListener", make_descriptor(&PY_TYPE(AtomicReader$CoreClosedListener)));
        }

        void t_AtomicReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AtomicReader).tp_dict, "class_", make_descriptor(AtomicReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AtomicReader).tp_dict, "wrapfn_", make_descriptor(t_AtomicReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AtomicReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AtomicReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AtomicReader::initializeClass, 1)))
            return NULL;
          return t_AtomicReader::wrap_Object(AtomicReader(((t_AtomicReader *) arg)->object.this$));
        }
        static PyObject *t_AtomicReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AtomicReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_AtomicReader_addCoreClosedListener(t_AtomicReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addCoreClosedListener", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_checkIntegrity(t_AtomicReader *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_AtomicReader_docFreq(t_AtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.docFreq(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(AtomicReader), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_AtomicReader_fields(t_AtomicReader *self)
        {
          ::org::apache::lucene::index::Fields result((jobject) NULL);
          OBJ_CALL(result = self->object.fields());
          return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
        }

        static PyObject *t_AtomicReader_getBinaryDocValues(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryDocValues(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getBinaryDocValues", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_getContext(t_AtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getContext());
            return ::org::apache::lucene::index::t_AtomicReaderContext::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(AtomicReader), (PyObject *) self, "getContext", args, 2);
        }

        static PyObject *t_AtomicReader_getDocCount(t_AtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocCount(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(AtomicReader), (PyObject *) self, "getDocCount", args, 2);
        }

        static PyObject *t_AtomicReader_getDocsWithField(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocsWithField(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocsWithField", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_getFieldInfos(t_AtomicReader *self)
        {
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
        }

        static PyObject *t_AtomicReader_getLiveDocs(t_AtomicReader *self)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);
          OBJ_CALL(result = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
        }

        static PyObject *t_AtomicReader_getNormValues(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNormValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getNormValues", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_getNumericDocValues(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNumericDocValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getNumericDocValues", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_getSortedDocValues(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedDocValues(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortedDocValues", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_getSortedNumericDocValues(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumericDocValues(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortedNumericDocValues", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_getSortedSetDocValues(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedSetDocValues(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortedSetDocValues", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_getSumDocFreq(t_AtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumDocFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(AtomicReader), (PyObject *) self, "getSumDocFreq", args, 2);
        }

        static PyObject *t_AtomicReader_getSumTotalTermFreq(t_AtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumTotalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(AtomicReader), (PyObject *) self, "getSumTotalTermFreq", args, 2);
        }

        static PyObject *t_AtomicReader_hasNorms(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.hasNorms(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "hasNorms", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_removeCoreClosedListener(t_AtomicReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.removeCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "removeCoreClosedListener", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_termDocsEnum(t_AtomicReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.termDocsEnum(a0));
            return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "termDocsEnum", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_termPositionsEnum(t_AtomicReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.termPositionsEnum(a0));
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "termPositionsEnum", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_terms(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.terms(a0));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "terms", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_totalTermFreq(t_AtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.totalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(AtomicReader), (PyObject *) self, "totalTermFreq", args, 2);
        }

        static PyObject *t_AtomicReader_get__context(t_AtomicReader *self, void *data)
        {
          ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object.getContext());
          return ::org::apache::lucene::index::t_AtomicReaderContext::wrap_Object(value);
        }

        static PyObject *t_AtomicReader_get__fieldInfos(t_AtomicReader *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_AtomicReader_get__liveDocs(t_AtomicReader *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DoubleField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DoubleField::class$ = NULL;
        jmethodID *DoubleField::mids$ = NULL;
        bool DoubleField::live$ = false;
        ::org::apache::lucene::document::FieldType *DoubleField::TYPE_NOT_STORED = NULL;
        ::org::apache::lucene::document::FieldType *DoubleField::TYPE_STORED = NULL;

        jclass DoubleField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DoubleField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d4f106f2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;DLorg/apache/lucene/document/Field$Store;)V");
            mids$[mid_init$_1922fa29] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;DLorg/apache/lucene/document/FieldType;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_NOT_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_NOT_STORED", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_STORED", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DoubleField::DoubleField(const ::java::lang::String & a0, jdouble a1, const ::org::apache::lucene::document::Field$Store & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_d4f106f2, a0.this$, a1, a2.this$)) {}

        DoubleField::DoubleField(const ::java::lang::String & a0, jdouble a1, const ::org::apache::lucene::document::FieldType & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_1922fa29, a0.this$, a1, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DoubleField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DoubleField_init_(t_DoubleField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_DoubleField__methods_[] = {
          DECLARE_METHOD(t_DoubleField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DoubleField, t_DoubleField, ::org::apache::lucene::document::Field, DoubleField, t_DoubleField_init_, 0, 0, 0, 0, 0);

        void t_DoubleField::install(PyObject *module)
        {
          installType(&PY_TYPE(DoubleField), module, "DoubleField", 0);
        }

        void t_DoubleField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DoubleField).tp_dict, "class_", make_descriptor(DoubleField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DoubleField).tp_dict, "wrapfn_", make_descriptor(t_DoubleField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DoubleField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DoubleField::initializeClass);
          PyDict_SetItemString(PY_TYPE(DoubleField).tp_dict, "TYPE_NOT_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*DoubleField::TYPE_NOT_STORED)));
          PyDict_SetItemString(PY_TYPE(DoubleField).tp_dict, "TYPE_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*DoubleField::TYPE_STORED)));
        }

        static PyObject *t_DoubleField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DoubleField::initializeClass, 1)))
            return NULL;
          return t_DoubleField::wrap_Object(DoubleField(((t_DoubleField *) arg)->object.this$));
        }
        static PyObject *t_DoubleField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DoubleField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DoubleField_init_(t_DoubleField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              jdouble a1;
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              DoubleField object((jobject) NULL);

              if (!parseArgs(args, "sDK", ::org::apache::lucene::document::Field$Store::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_))
              {
                INT_CALL(object = DoubleField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jdouble a1;
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              DoubleField object((jobject) NULL);

              if (!parseArgs(args, "sDk", ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = DoubleField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCacheDocIdSet.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCacheDocIdSet::class$ = NULL;
        jmethodID *FieldCacheDocIdSet::mids$ = NULL;
        bool FieldCacheDocIdSet::live$ = false;

        jclass FieldCacheDocIdSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCacheDocIdSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c0d572fa] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/util/Bits;)V");
            mids$[mid_bits_03c2457d] = env->getMethodID(cls, "bits", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_matchDoc_39c7bd30] = env->getMethodID(cls, "matchDoc", "(I)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCacheDocIdSet::FieldCacheDocIdSet(jint a0, const ::org::apache::lucene::util::Bits & a1) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_c0d572fa, a0, a1.this$)) {}

        ::org::apache::lucene::util::Bits FieldCacheDocIdSet::bits() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_bits_03c2457d]));
        }

        jboolean FieldCacheDocIdSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        ::org::apache::lucene::search::DocIdSetIterator FieldCacheDocIdSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCacheDocIdSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheDocIdSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCacheDocIdSet_init_(t_FieldCacheDocIdSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCacheDocIdSet_bits(t_FieldCacheDocIdSet *self, PyObject *args);
        static PyObject *t_FieldCacheDocIdSet_isCacheable(t_FieldCacheDocIdSet *self, PyObject *args);
        static PyObject *t_FieldCacheDocIdSet_iterator(t_FieldCacheDocIdSet *self, PyObject *args);
        static PyObject *t_FieldCacheDocIdSet_get__cacheable(t_FieldCacheDocIdSet *self, void *data);
        static PyGetSetDef t_FieldCacheDocIdSet__fields_[] = {
          DECLARE_GET_FIELD(t_FieldCacheDocIdSet, cacheable),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldCacheDocIdSet__methods_[] = {
          DECLARE_METHOD(t_FieldCacheDocIdSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheDocIdSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheDocIdSet, bits, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheDocIdSet, isCacheable, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheDocIdSet, iterator, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheDocIdSet, t_FieldCacheDocIdSet, ::org::apache::lucene::search::DocIdSet, FieldCacheDocIdSet, t_FieldCacheDocIdSet_init_, 0, 0, t_FieldCacheDocIdSet__fields_, 0, 0);

        void t_FieldCacheDocIdSet::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheDocIdSet), module, "FieldCacheDocIdSet", 0);
        }

        void t_FieldCacheDocIdSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheDocIdSet).tp_dict, "class_", make_descriptor(FieldCacheDocIdSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheDocIdSet).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheDocIdSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheDocIdSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCacheDocIdSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheDocIdSet::initializeClass, 1)))
            return NULL;
          return t_FieldCacheDocIdSet::wrap_Object(FieldCacheDocIdSet(((t_FieldCacheDocIdSet *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheDocIdSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheDocIdSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCacheDocIdSet_init_(t_FieldCacheDocIdSet *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          FieldCacheDocIdSet object((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            INT_CALL(object = FieldCacheDocIdSet(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldCacheDocIdSet_bits(t_FieldCacheDocIdSet *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.bits());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldCacheDocIdSet), (PyObject *) self, "bits", args, 2);
        }

        static PyObject *t_FieldCacheDocIdSet_isCacheable(t_FieldCacheDocIdSet *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCacheable());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FieldCacheDocIdSet), (PyObject *) self, "isCacheable", args, 2);
        }

        static PyObject *t_FieldCacheDocIdSet_iterator(t_FieldCacheDocIdSet *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldCacheDocIdSet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_FieldCacheDocIdSet_get__cacheable(t_FieldCacheDocIdSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/DoubleBarrelLRUCache$CloneableKey.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *DoubleBarrelLRUCache$CloneableKey::class$ = NULL;
        jmethodID *DoubleBarrelLRUCache$CloneableKey::mids$ = NULL;
        bool DoubleBarrelLRUCache$CloneableKey::live$ = false;

        jclass DoubleBarrelLRUCache$CloneableKey::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/DoubleBarrelLRUCache$CloneableKey");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clone_233cec6c] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/DoubleBarrelLRUCache$CloneableKey;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DoubleBarrelLRUCache$CloneableKey::DoubleBarrelLRUCache$CloneableKey() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        DoubleBarrelLRUCache$CloneableKey DoubleBarrelLRUCache$CloneableKey::clone() const
        {
          return DoubleBarrelLRUCache$CloneableKey(env->callObjectMethod(this$, mids$[mid_clone_233cec6c]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_of_(t_DoubleBarrelLRUCache$CloneableKey *self, PyObject *args);
        static int t_DoubleBarrelLRUCache$CloneableKey_init_(t_DoubleBarrelLRUCache$CloneableKey *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_clone(t_DoubleBarrelLRUCache$CloneableKey *self);
        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_get__parameters_(t_DoubleBarrelLRUCache$CloneableKey *self, void *data);
        static PyGetSetDef t_DoubleBarrelLRUCache$CloneableKey__fields_[] = {
          DECLARE_GET_FIELD(t_DoubleBarrelLRUCache$CloneableKey, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DoubleBarrelLRUCache$CloneableKey__methods_[] = {
          DECLARE_METHOD(t_DoubleBarrelLRUCache$CloneableKey, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleBarrelLRUCache$CloneableKey, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleBarrelLRUCache$CloneableKey, of_, METH_VARARGS),
          DECLARE_METHOD(t_DoubleBarrelLRUCache$CloneableKey, clone, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DoubleBarrelLRUCache$CloneableKey, t_DoubleBarrelLRUCache$CloneableKey, ::java::lang::Object, DoubleBarrelLRUCache$CloneableKey, t_DoubleBarrelLRUCache$CloneableKey_init_, 0, 0, t_DoubleBarrelLRUCache$CloneableKey__fields_, 0, 0);
        PyObject *t_DoubleBarrelLRUCache$CloneableKey::wrap_Object(const DoubleBarrelLRUCache$CloneableKey& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_DoubleBarrelLRUCache$CloneableKey::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DoubleBarrelLRUCache$CloneableKey *self = (t_DoubleBarrelLRUCache$CloneableKey *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        PyObject *t_DoubleBarrelLRUCache$CloneableKey::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_DoubleBarrelLRUCache$CloneableKey::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DoubleBarrelLRUCache$CloneableKey *self = (t_DoubleBarrelLRUCache$CloneableKey *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        void t_DoubleBarrelLRUCache$CloneableKey::install(PyObject *module)
        {
          installType(&PY_TYPE(DoubleBarrelLRUCache$CloneableKey), module, "DoubleBarrelLRUCache$CloneableKey", 0);
        }

        void t_DoubleBarrelLRUCache$CloneableKey::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DoubleBarrelLRUCache$CloneableKey).tp_dict, "class_", make_descriptor(DoubleBarrelLRUCache$CloneableKey::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DoubleBarrelLRUCache$CloneableKey).tp_dict, "wrapfn_", make_descriptor(t_DoubleBarrelLRUCache$CloneableKey::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DoubleBarrelLRUCache$CloneableKey).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DoubleBarrelLRUCache$CloneableKey::initializeClass, 1)))
            return NULL;
          return t_DoubleBarrelLRUCache$CloneableKey::wrap_Object(DoubleBarrelLRUCache$CloneableKey(((t_DoubleBarrelLRUCache$CloneableKey *) arg)->object.this$));
        }
        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DoubleBarrelLRUCache$CloneableKey::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_of_(t_DoubleBarrelLRUCache$CloneableKey *self, PyObject *args)
        {
          if (!parseArg(args, "T", 2, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_DoubleBarrelLRUCache$CloneableKey_init_(t_DoubleBarrelLRUCache$CloneableKey *self, PyObject *args, PyObject *kwds)
        {
          DoubleBarrelLRUCache$CloneableKey object((jobject) NULL);

          INT_CALL(object = DoubleBarrelLRUCache$CloneableKey());
          self->object = object;

          return 0;
        }

        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_clone(t_DoubleBarrelLRUCache$CloneableKey *self)
        {
          DoubleBarrelLRUCache$CloneableKey result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_DoubleBarrelLRUCache$CloneableKey::wrap_Object(result);
        }
        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_get__parameters_(t_DoubleBarrelLRUCache$CloneableKey *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/StoredField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *StoredField::class$ = NULL;
        jmethodID *StoredField::mids$ = NULL;
        bool StoredField::live$ = false;
        ::org::apache::lucene::document::FieldType *StoredField::TYPE = NULL;

        jclass StoredField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/StoredField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
            mids$[mid_init$_f0649ce1] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;F)V");
            mids$[mid_init$_4372eed5] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;J)V");
            mids$[mid_init$_493fce5f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;D)V");
            mids$[mid_init$_97e62b21] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[B)V");
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_init$_eab5cd19] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        StoredField::StoredField(const ::java::lang::String & a0, jint a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

        StoredField::StoredField(const ::java::lang::String & a0, jfloat a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_f0649ce1, a0.this$, a1)) {}

        StoredField::StoredField(const ::java::lang::String & a0, jlong a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_4372eed5, a0.this$, a1)) {}

        StoredField::StoredField(const ::java::lang::String & a0, jdouble a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_493fce5f, a0.this$, a1)) {}

        StoredField::StoredField(const ::java::lang::String & a0, const JArray< jbyte > & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_97e62b21, a0.this$, a1.this$)) {}

        StoredField::StoredField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}

        StoredField::StoredField(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

        StoredField::StoredField(const ::java::lang::String & a0, const JArray< jbyte > & a1, jint a2, jint a3) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_eab5cd19, a0.this$, a1.this$, a2, a3)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_StoredField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_StoredField_init_(t_StoredField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_StoredField__methods_[] = {
          DECLARE_METHOD(t_StoredField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StoredField, t_StoredField, ::org::apache::lucene::document::Field, StoredField, t_StoredField_init_, 0, 0, 0, 0, 0);

        void t_StoredField::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredField), module, "StoredField", 0);
        }

        void t_StoredField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StoredField).tp_dict, "class_", make_descriptor(StoredField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StoredField).tp_dict, "wrapfn_", make_descriptor(t_StoredField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StoredField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(StoredField::initializeClass);
          PyDict_SetItemString(PY_TYPE(StoredField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*StoredField::TYPE)));
        }

        static PyObject *t_StoredField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredField::initializeClass, 1)))
            return NULL;
          return t_StoredField::wrap_Object(StoredField(((t_StoredField *) arg)->object.this$));
        }
        static PyObject *t_StoredField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_StoredField_init_(t_StoredField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "sI", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jfloat a1;
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "sF", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jlong a1;
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "sJ", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jdouble a1;
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "sD", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "s[B", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              jint a2;
              jint a3;
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "s[BII", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = StoredField(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/AveragePayloadFunction.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *AveragePayloadFunction::class$ = NULL;
          jmethodID *AveragePayloadFunction::mids$ = NULL;
          bool AveragePayloadFunction::live$ = false;

          jclass AveragePayloadFunction::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/AveragePayloadFunction");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_currentScore_9fe8c3f6] = env->getMethodID(cls, "currentScore", "(ILjava/lang/String;IIIFF)F");
              mids$[mid_docScore_08788a8d] = env->getMethodID(cls, "docScore", "(ILjava/lang/String;IF)F");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AveragePayloadFunction::AveragePayloadFunction() : ::org::apache::lucene::search::payloads::PayloadFunction(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat AveragePayloadFunction::currentScore(jint a0, const ::java::lang::String & a1, jint a2, jint a3, jint a4, jfloat a5, jfloat a6) const
          {
            return env->callFloatMethod(this$, mids$[mid_currentScore_9fe8c3f6], a0, a1.this$, a2, a3, a4, a5, a6);
          }

          jfloat AveragePayloadFunction::docScore(jint a0, const ::java::lang::String & a1, jint a2, jfloat a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_docScore_08788a8d], a0, a1.this$, a2, a3);
          }

          jboolean AveragePayloadFunction::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint AveragePayloadFunction::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_AveragePayloadFunction_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AveragePayloadFunction_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AveragePayloadFunction_init_(t_AveragePayloadFunction *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AveragePayloadFunction_currentScore(t_AveragePayloadFunction *self, PyObject *args);
          static PyObject *t_AveragePayloadFunction_docScore(t_AveragePayloadFunction *self, PyObject *args);
          static PyObject *t_AveragePayloadFunction_equals(t_AveragePayloadFunction *self, PyObject *args);
          static PyObject *t_AveragePayloadFunction_hashCode(t_AveragePayloadFunction *self, PyObject *args);

          static PyMethodDef t_AveragePayloadFunction__methods_[] = {
            DECLARE_METHOD(t_AveragePayloadFunction, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AveragePayloadFunction, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AveragePayloadFunction, currentScore, METH_VARARGS),
            DECLARE_METHOD(t_AveragePayloadFunction, docScore, METH_VARARGS),
            DECLARE_METHOD(t_AveragePayloadFunction, equals, METH_VARARGS),
            DECLARE_METHOD(t_AveragePayloadFunction, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AveragePayloadFunction, t_AveragePayloadFunction, ::org::apache::lucene::search::payloads::PayloadFunction, AveragePayloadFunction, t_AveragePayloadFunction_init_, 0, 0, 0, 0, 0);

          void t_AveragePayloadFunction::install(PyObject *module)
          {
            installType(&PY_TYPE(AveragePayloadFunction), module, "AveragePayloadFunction", 0);
          }

          void t_AveragePayloadFunction::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AveragePayloadFunction).tp_dict, "class_", make_descriptor(AveragePayloadFunction::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AveragePayloadFunction).tp_dict, "wrapfn_", make_descriptor(t_AveragePayloadFunction::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AveragePayloadFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AveragePayloadFunction_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AveragePayloadFunction::initializeClass, 1)))
              return NULL;
            return t_AveragePayloadFunction::wrap_Object(AveragePayloadFunction(((t_AveragePayloadFunction *) arg)->object.this$));
          }
          static PyObject *t_AveragePayloadFunction_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AveragePayloadFunction::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AveragePayloadFunction_init_(t_AveragePayloadFunction *self, PyObject *args, PyObject *kwds)
          {
            AveragePayloadFunction object((jobject) NULL);

            INT_CALL(object = AveragePayloadFunction());
            self->object = object;

            return 0;
          }

          static PyObject *t_AveragePayloadFunction_currentScore(t_AveragePayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jint a3;
            jint a4;
            jfloat a5;
            jfloat a6;
            jfloat result;

            if (!parseArgs(args, "IsIIIFF", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              OBJ_CALL(result = self->object.currentScore(a0, a1, a2, a3, a4, a5, a6));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(AveragePayloadFunction), (PyObject *) self, "currentScore", args, 2);
          }

          static PyObject *t_AveragePayloadFunction_docScore(t_AveragePayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jfloat a3;
            jfloat result;

            if (!parseArgs(args, "IsIF", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.docScore(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(AveragePayloadFunction), (PyObject *) self, "docScore", args, 2);
          }

          static PyObject *t_AveragePayloadFunction_equals(t_AveragePayloadFunction *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AveragePayloadFunction), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_AveragePayloadFunction_hashCode(t_AveragePayloadFunction *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(AveragePayloadFunction), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$CollectionModel.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMSimilarity$CollectionModel::class$ = NULL;
          jmethodID *LMSimilarity$CollectionModel::mids$ = NULL;
          bool LMSimilarity$CollectionModel::live$ = false;

          jclass LMSimilarity$CollectionModel::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMSimilarity$CollectionModel");

              mids$ = new jmethodID[max_mid];
              mids$[mid_computeProbability_cb225ea0] = env->getMethodID(cls, "computeProbability", "(Lorg/apache/lucene/search/similarities/BasicStats;)F");
              mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jfloat LMSimilarity$CollectionModel::computeProbability(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_computeProbability_cb225ea0], a0.this$);
          }

          ::java::lang::String LMSimilarity$CollectionModel::getName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMSimilarity$CollectionModel_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMSimilarity$CollectionModel_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMSimilarity$CollectionModel_computeProbability(t_LMSimilarity$CollectionModel *self, PyObject *arg);
          static PyObject *t_LMSimilarity$CollectionModel_getName(t_LMSimilarity$CollectionModel *self);
          static PyObject *t_LMSimilarity$CollectionModel_get__name(t_LMSimilarity$CollectionModel *self, void *data);
          static PyGetSetDef t_LMSimilarity$CollectionModel__fields_[] = {
            DECLARE_GET_FIELD(t_LMSimilarity$CollectionModel, name),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMSimilarity$CollectionModel__methods_[] = {
            DECLARE_METHOD(t_LMSimilarity$CollectionModel, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$CollectionModel, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$CollectionModel, computeProbability, METH_O),
            DECLARE_METHOD(t_LMSimilarity$CollectionModel, getName, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LMSimilarity$CollectionModel, t_LMSimilarity$CollectionModel, ::java::lang::Object, LMSimilarity$CollectionModel, abstract_init, 0, 0, t_LMSimilarity$CollectionModel__fields_, 0, 0);

          void t_LMSimilarity$CollectionModel::install(PyObject *module)
          {
            installType(&PY_TYPE(LMSimilarity$CollectionModel), module, "LMSimilarity$CollectionModel", 0);
          }

          void t_LMSimilarity$CollectionModel::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LMSimilarity$CollectionModel).tp_dict, "class_", make_descriptor(LMSimilarity$CollectionModel::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LMSimilarity$CollectionModel).tp_dict, "wrapfn_", make_descriptor(t_LMSimilarity$CollectionModel::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LMSimilarity$CollectionModel).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMSimilarity$CollectionModel_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMSimilarity$CollectionModel::initializeClass, 1)))
              return NULL;
            return t_LMSimilarity$CollectionModel::wrap_Object(LMSimilarity$CollectionModel(((t_LMSimilarity$CollectionModel *) arg)->object.this$));
          }
          static PyObject *t_LMSimilarity$CollectionModel_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMSimilarity$CollectionModel::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_LMSimilarity$CollectionModel_computeProbability(t_LMSimilarity$CollectionModel *self, PyObject *arg)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat result;

            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeProbability(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "computeProbability", arg);
            return NULL;
          }

          static PyObject *t_LMSimilarity$CollectionModel_getName(t_LMSimilarity$CollectionModel *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getName());
            return j2p(result);
          }

          static PyObject *t_LMSimilarity$CollectionModel_get__name(t_LMSimilarity$CollectionModel *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/SimpleFragmenter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *SimpleFragmenter::class$ = NULL;
          jmethodID *SimpleFragmenter::mids$ = NULL;
          bool SimpleFragmenter::live$ = false;

          jclass SimpleFragmenter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/SimpleFragmenter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_getFragmentSize_54c6a179] = env->getMethodID(cls, "getFragmentSize", "()I");
              mids$[mid_isNewFragment_54c6a16a] = env->getMethodID(cls, "isNewFragment", "()Z");
              mids$[mid_setFragmentSize_39c7bd3c] = env->getMethodID(cls, "setFragmentSize", "(I)V");
              mids$[mid_start_7d0c5392] = env->getMethodID(cls, "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleFragmenter::SimpleFragmenter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          SimpleFragmenter::SimpleFragmenter(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          jint SimpleFragmenter::getFragmentSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getFragmentSize_54c6a179]);
          }

          jboolean SimpleFragmenter::isNewFragment() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNewFragment_54c6a16a]);
          }

          void SimpleFragmenter::setFragmentSize(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFragmentSize_39c7bd3c], a0);
          }

          void SimpleFragmenter::start(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_start_7d0c5392], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_SimpleFragmenter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleFragmenter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleFragmenter_init_(t_SimpleFragmenter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleFragmenter_getFragmentSize(t_SimpleFragmenter *self);
          static PyObject *t_SimpleFragmenter_isNewFragment(t_SimpleFragmenter *self);
          static PyObject *t_SimpleFragmenter_setFragmentSize(t_SimpleFragmenter *self, PyObject *arg);
          static PyObject *t_SimpleFragmenter_start(t_SimpleFragmenter *self, PyObject *args);
          static PyObject *t_SimpleFragmenter_get__fragmentSize(t_SimpleFragmenter *self, void *data);
          static int t_SimpleFragmenter_set__fragmentSize(t_SimpleFragmenter *self, PyObject *arg, void *data);
          static PyObject *t_SimpleFragmenter_get__newFragment(t_SimpleFragmenter *self, void *data);
          static PyGetSetDef t_SimpleFragmenter__fields_[] = {
            DECLARE_GETSET_FIELD(t_SimpleFragmenter, fragmentSize),
            DECLARE_GET_FIELD(t_SimpleFragmenter, newFragment),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SimpleFragmenter__methods_[] = {
            DECLARE_METHOD(t_SimpleFragmenter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragmenter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragmenter, getFragmentSize, METH_NOARGS),
            DECLARE_METHOD(t_SimpleFragmenter, isNewFragment, METH_NOARGS),
            DECLARE_METHOD(t_SimpleFragmenter, setFragmentSize, METH_O),
            DECLARE_METHOD(t_SimpleFragmenter, start, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleFragmenter, t_SimpleFragmenter, ::java::lang::Object, SimpleFragmenter, t_SimpleFragmenter_init_, 0, 0, t_SimpleFragmenter__fields_, 0, 0);

          void t_SimpleFragmenter::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleFragmenter), module, "SimpleFragmenter", 0);
          }

          void t_SimpleFragmenter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleFragmenter).tp_dict, "class_", make_descriptor(SimpleFragmenter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleFragmenter).tp_dict, "wrapfn_", make_descriptor(t_SimpleFragmenter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleFragmenter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleFragmenter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleFragmenter::initializeClass, 1)))
              return NULL;
            return t_SimpleFragmenter::wrap_Object(SimpleFragmenter(((t_SimpleFragmenter *) arg)->object.this$));
          }
          static PyObject *t_SimpleFragmenter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleFragmenter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleFragmenter_init_(t_SimpleFragmenter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SimpleFragmenter object((jobject) NULL);

                INT_CALL(object = SimpleFragmenter());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                SimpleFragmenter object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = SimpleFragmenter(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleFragmenter_getFragmentSize(t_SimpleFragmenter *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getFragmentSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_SimpleFragmenter_isNewFragment(t_SimpleFragmenter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isNewFragment());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SimpleFragmenter_setFragmentSize(t_SimpleFragmenter *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setFragmentSize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFragmentSize", arg);
            return NULL;
          }

          static PyObject *t_SimpleFragmenter_start(t_SimpleFragmenter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.start(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "start", args);
            return NULL;
          }

          static PyObject *t_SimpleFragmenter_get__fragmentSize(t_SimpleFragmenter *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getFragmentSize());
            return PyInt_FromLong((long) value);
          }
          static int t_SimpleFragmenter_set__fragmentSize(t_SimpleFragmenter *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setFragmentSize(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fragmentSize", arg);
            return -1;
          }

          static PyObject *t_SimpleFragmenter_get__newFragment(t_SimpleFragmenter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isNewFragment());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetField::class$ = NULL;
        jmethodID *FacetField::mids$ = NULL;
        jfieldID *FacetField::fids$ = NULL;
        bool FacetField::live$ = false;

        jclass FacetField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_ba45d66a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/String;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_verifyLabel_5fdc3f48] = env->getStaticMethodID(cls, "verifyLabel", "(Ljava/lang/String;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_dim] = env->getFieldID(cls, "dim", "Ljava/lang/String;");
            fids$[fid_path] = env->getFieldID(cls, "path", "[Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetField::FacetField(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_ba45d66a, a0.this$, a1.this$)) {}

        ::java::lang::String FacetField::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        void FacetField::verifyLabel(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_verifyLabel_5fdc3f48], a0.this$);
        }

        ::java::lang::String FacetField::_get_dim() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_dim]));
        }

        JArray< ::java::lang::String > FacetField::_get_path() const
        {
          return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_path]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetField_init_(t_FacetField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetField_toString(t_FacetField *self, PyObject *args);
        static PyObject *t_FacetField_verifyLabel(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetField_get__dim(t_FacetField *self, void *data);
        static PyObject *t_FacetField_get__path(t_FacetField *self, void *data);

        static PyGetSetDef t_FacetField__fields_[] = {
          DECLARE_GET_FIELD(t_FacetField, dim),
          DECLARE_GET_FIELD(t_FacetField, path),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetField__methods_[] = {
          DECLARE_METHOD(t_FacetField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetField, toString, METH_VARARGS),
          DECLARE_METHOD(t_FacetField, verifyLabel, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FacetField, t_FacetField, ::org::apache::lucene::document::Field, FacetField, t_FacetField_init_, 0, 0, t_FacetField__fields_, 0, 0);

        void t_FacetField::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetField), module, "FacetField", 0);
        }

        void t_FacetField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FacetField).tp_dict, "class_", make_descriptor(FacetField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FacetField).tp_dict, "wrapfn_", make_descriptor(t_FacetField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FacetField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FacetField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetField::initializeClass, 1)))
            return NULL;
          return t_FacetField::wrap_Object(FacetField(((t_FacetField *) arg)->object.this$));
        }
        static PyObject *t_FacetField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetField_init_(t_FacetField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          FacetField object((jobject) NULL);

          if (!parseArgs(args, "s[s", &a0, &a1))
          {
            INT_CALL(object = FacetField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FacetField_toString(t_FacetField *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FacetField), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FacetField_verifyLabel(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::facet::FacetField::verifyLabel(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "verifyLabel", arg);
          return NULL;
        }

        static PyObject *t_FacetField_get__dim(t_FacetField *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_dim());
          return j2p(value);
        }

        static PyObject *t_FacetField_get__path(t_FacetField *self, void *data)
        {
          JArray< ::java::lang::String > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_path());
          return JArray<jstring>(value.this$).wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TermState.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TermState::class$ = NULL;
        jmethodID *TermState::mids$ = NULL;
        bool TermState::live$ = false;

        jclass TermState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TermState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clone_3e41fede] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/index/TermState;");
            mids$[mid_copyFrom_d506ca07] = env->getMethodID(cls, "copyFrom", "(Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermState TermState::clone() const
        {
          return TermState(env->callObjectMethod(this$, mids$[mid_clone_3e41fede]));
        }

        void TermState::copyFrom(const TermState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyFrom_d506ca07], a0.this$);
        }

        ::java::lang::String TermState::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TermState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermState_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermState_clone(t_TermState *self);
        static PyObject *t_TermState_copyFrom(t_TermState *self, PyObject *arg);
        static PyObject *t_TermState_toString(t_TermState *self, PyObject *args);

        static PyMethodDef t_TermState__methods_[] = {
          DECLARE_METHOD(t_TermState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermState, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermState, clone, METH_NOARGS),
          DECLARE_METHOD(t_TermState, copyFrom, METH_O),
          DECLARE_METHOD(t_TermState, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermState, t_TermState, ::java::lang::Object, TermState, abstract_init, 0, 0, 0, 0, 0);

        void t_TermState::install(PyObject *module)
        {
          installType(&PY_TYPE(TermState), module, "TermState", 0);
        }

        void t_TermState::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermState).tp_dict, "class_", make_descriptor(TermState::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermState).tp_dict, "wrapfn_", make_descriptor(t_TermState::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermState).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermState::initializeClass, 1)))
            return NULL;
          return t_TermState::wrap_Object(TermState(((t_TermState *) arg)->object.this$));
        }
        static PyObject *t_TermState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermState_clone(t_TermState *self)
        {
          TermState result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_TermState::wrap_Object(result);
        }

        static PyObject *t_TermState_copyFrom(t_TermState *self, PyObject *arg)
        {
          TermState a0((jobject) NULL);

          if (!parseArg(arg, "k", TermState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyFrom(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyFrom", arg);
          return NULL;
        }

        static PyObject *t_TermState_toString(t_TermState *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(TermState), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector$GroupHead.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {

            ::java::lang::Class *FunctionAllGroupHeadsCollector$GroupHead::class$ = NULL;
            jmethodID *FunctionAllGroupHeadsCollector$GroupHead::mids$ = NULL;
            bool FunctionAllGroupHeadsCollector$GroupHead::live$ = false;

            jclass FunctionAllGroupHeadsCollector$GroupHead::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector$GroupHead");

                mids$ = new jmethodID[max_mid];
                mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
                mids$[mid_updateDocHead_39c7bd3c] = env->getMethodID(cls, "updateDocHead", "(I)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jint FunctionAllGroupHeadsCollector$GroupHead::compare(jint a0, jint a1) const
            {
              return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
            }

            void FunctionAllGroupHeadsCollector$GroupHead::updateDocHead(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_updateDocHead_39c7bd3c], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_of_(t_FunctionAllGroupHeadsCollector$GroupHead *self, PyObject *args);
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_compare(t_FunctionAllGroupHeadsCollector$GroupHead *self, PyObject *args);
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_updateDocHead(t_FunctionAllGroupHeadsCollector$GroupHead *self, PyObject *arg);
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_get__parameters_(t_FunctionAllGroupHeadsCollector$GroupHead *self, void *data);
            static PyGetSetDef t_FunctionAllGroupHeadsCollector$GroupHead__fields_[] = {
              DECLARE_GET_FIELD(t_FunctionAllGroupHeadsCollector$GroupHead, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FunctionAllGroupHeadsCollector$GroupHead__methods_[] = {
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector$GroupHead, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector$GroupHead, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector$GroupHead, of_, METH_VARARGS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector$GroupHead, compare, METH_VARARGS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector$GroupHead, updateDocHead, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FunctionAllGroupHeadsCollector$GroupHead, t_FunctionAllGroupHeadsCollector$GroupHead, ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector$GroupHead, FunctionAllGroupHeadsCollector$GroupHead, abstract_init, 0, 0, t_FunctionAllGroupHeadsCollector$GroupHead__fields_, 0, 0);
            PyObject *t_FunctionAllGroupHeadsCollector$GroupHead::wrap_Object(const FunctionAllGroupHeadsCollector$GroupHead& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionAllGroupHeadsCollector$GroupHead::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionAllGroupHeadsCollector$GroupHead *self = (t_FunctionAllGroupHeadsCollector$GroupHead *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FunctionAllGroupHeadsCollector$GroupHead::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionAllGroupHeadsCollector$GroupHead::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionAllGroupHeadsCollector$GroupHead *self = (t_FunctionAllGroupHeadsCollector$GroupHead *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FunctionAllGroupHeadsCollector$GroupHead::install(PyObject *module)
            {
              installType(&PY_TYPE(FunctionAllGroupHeadsCollector$GroupHead), module, "FunctionAllGroupHeadsCollector$GroupHead", 0);
            }

            void t_FunctionAllGroupHeadsCollector$GroupHead::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupHeadsCollector$GroupHead).tp_dict, "class_", make_descriptor(FunctionAllGroupHeadsCollector$GroupHead::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupHeadsCollector$GroupHead).tp_dict, "wrapfn_", make_descriptor(t_FunctionAllGroupHeadsCollector$GroupHead::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupHeadsCollector$GroupHead).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FunctionAllGroupHeadsCollector$GroupHead::initializeClass, 1)))
                return NULL;
              return t_FunctionAllGroupHeadsCollector$GroupHead::wrap_Object(FunctionAllGroupHeadsCollector$GroupHead(((t_FunctionAllGroupHeadsCollector$GroupHead *) arg)->object.this$));
            }
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FunctionAllGroupHeadsCollector$GroupHead::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_of_(t_FunctionAllGroupHeadsCollector$GroupHead *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_compare(t_FunctionAllGroupHeadsCollector$GroupHead *self, PyObject *args)
            {
              jint a0;
              jint a1;
              jint result;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(result = self->object.compare(a0, a1));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "compare", args);
              return NULL;
            }

            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_updateDocHead(t_FunctionAllGroupHeadsCollector$GroupHead *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.updateDocHead(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "updateDocHead", arg);
              return NULL;
            }
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_get__parameters_(t_FunctionAllGroupHeadsCollector$GroupHead *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/IntField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *IntField::class$ = NULL;
        jmethodID *IntField::mids$ = NULL;
        bool IntField::live$ = false;
        ::org::apache::lucene::document::FieldType *IntField::TYPE_NOT_STORED = NULL;
        ::org::apache::lucene::document::FieldType *IntField::TYPE_STORED = NULL;

        jclass IntField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/IntField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_80deeaab] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ILorg/apache/lucene/document/Field$Store;)V");
            mids$[mid_init$_919d88bc] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ILorg/apache/lucene/document/FieldType;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_NOT_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_NOT_STORED", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_STORED", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntField::IntField(const ::java::lang::String & a0, jint a1, const ::org::apache::lucene::document::Field$Store & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_80deeaab, a0.this$, a1, a2.this$)) {}

        IntField::IntField(const ::java::lang::String & a0, jint a1, const ::org::apache::lucene::document::FieldType & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_919d88bc, a0.this$, a1, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_IntField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntField_init_(t_IntField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_IntField__methods_[] = {
          DECLARE_METHOD(t_IntField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntField, t_IntField, ::org::apache::lucene::document::Field, IntField, t_IntField_init_, 0, 0, 0, 0, 0);

        void t_IntField::install(PyObject *module)
        {
          installType(&PY_TYPE(IntField), module, "IntField", 0);
        }

        void t_IntField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntField).tp_dict, "class_", make_descriptor(IntField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntField).tp_dict, "wrapfn_", make_descriptor(t_IntField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IntField::initializeClass);
          PyDict_SetItemString(PY_TYPE(IntField).tp_dict, "TYPE_NOT_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*IntField::TYPE_NOT_STORED)));
          PyDict_SetItemString(PY_TYPE(IntField).tp_dict, "TYPE_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*IntField::TYPE_STORED)));
        }

        static PyObject *t_IntField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntField::initializeClass, 1)))
            return NULL;
          return t_IntField::wrap_Object(IntField(((t_IntField *) arg)->object.this$));
        }
        static PyObject *t_IntField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntField_init_(t_IntField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              IntField object((jobject) NULL);

              if (!parseArgs(args, "sIK", ::org::apache::lucene::document::Field$Store::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_))
              {
                INT_CALL(object = IntField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              IntField object((jobject) NULL);

              if (!parseArgs(args, "sIk", ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = IntField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *Encoder::class$ = NULL;
          jmethodID *Encoder::mids$ = NULL;
          bool Encoder::live$ = false;

          jclass Encoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/Encoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_encodeText_97a5258f] = env->getMethodID(cls, "encodeText", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String Encoder::encodeText(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_encodeText_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_Encoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Encoder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Encoder_encodeText(t_Encoder *self, PyObject *arg);

          static PyMethodDef t_Encoder__methods_[] = {
            DECLARE_METHOD(t_Encoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Encoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Encoder, encodeText, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Encoder, t_Encoder, ::java::lang::Object, Encoder, abstract_init, 0, 0, 0, 0, 0);

          void t_Encoder::install(PyObject *module)
          {
            installType(&PY_TYPE(Encoder), module, "Encoder", 0);
          }

          void t_Encoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Encoder).tp_dict, "class_", make_descriptor(Encoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Encoder).tp_dict, "wrapfn_", make_descriptor(t_Encoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Encoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Encoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Encoder::initializeClass, 1)))
              return NULL;
            return t_Encoder::wrap_Object(Encoder(((t_Encoder *) arg)->object.this$));
          }
          static PyObject *t_Encoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Encoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Encoder_encodeText(t_Encoder *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.encodeText(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "encodeText", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *RemoveDuplicatesTokenFilter::class$ = NULL;
          jmethodID *RemoveDuplicatesTokenFilter::mids$ = NULL;
          bool RemoveDuplicatesTokenFilter::live$ = false;

          jclass RemoveDuplicatesTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RemoveDuplicatesTokenFilter::RemoveDuplicatesTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean RemoveDuplicatesTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void RemoveDuplicatesTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_RemoveDuplicatesTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RemoveDuplicatesTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RemoveDuplicatesTokenFilter_init_(t_RemoveDuplicatesTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RemoveDuplicatesTokenFilter_incrementToken(t_RemoveDuplicatesTokenFilter *self, PyObject *args);
          static PyObject *t_RemoveDuplicatesTokenFilter_reset(t_RemoveDuplicatesTokenFilter *self, PyObject *args);

          static PyMethodDef t_RemoveDuplicatesTokenFilter__methods_[] = {
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RemoveDuplicatesTokenFilter, t_RemoveDuplicatesTokenFilter, ::org::apache::lucene::analysis::TokenFilter, RemoveDuplicatesTokenFilter, t_RemoveDuplicatesTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_RemoveDuplicatesTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(RemoveDuplicatesTokenFilter), module, "RemoveDuplicatesTokenFilter", 0);
          }

          void t_RemoveDuplicatesTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RemoveDuplicatesTokenFilter).tp_dict, "class_", make_descriptor(RemoveDuplicatesTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RemoveDuplicatesTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_RemoveDuplicatesTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RemoveDuplicatesTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RemoveDuplicatesTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RemoveDuplicatesTokenFilter::initializeClass, 1)))
              return NULL;
            return t_RemoveDuplicatesTokenFilter::wrap_Object(RemoveDuplicatesTokenFilter(((t_RemoveDuplicatesTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_RemoveDuplicatesTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RemoveDuplicatesTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RemoveDuplicatesTokenFilter_init_(t_RemoveDuplicatesTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            RemoveDuplicatesTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = RemoveDuplicatesTokenFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RemoveDuplicatesTokenFilter_incrementToken(t_RemoveDuplicatesTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(RemoveDuplicatesTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_RemoveDuplicatesTokenFilter_reset(t_RemoveDuplicatesTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(RemoveDuplicatesTokenFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/GroupQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *GroupQueryNode::class$ = NULL;
              jmethodID *GroupQueryNode::mids$ = NULL;
              bool GroupQueryNode::live$ = false;

              jclass GroupQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/GroupQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_cc04aeef] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getChild_b387c5e6] = env->getMethodID(cls, "getChild", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChild_cc04aeef] = env->getMethodID(cls, "setChild", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              GroupQueryNode::GroupQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_cc04aeef, a0.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode GroupQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode GroupQueryNode::getChild() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getChild_b387c5e6]));
              }

              void GroupQueryNode::setChild(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setChild_cc04aeef], a0.this$);
              }

              ::java::lang::CharSequence GroupQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String GroupQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_GroupQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_GroupQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_GroupQueryNode_init_(t_GroupQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_GroupQueryNode_cloneTree(t_GroupQueryNode *self, PyObject *args);
              static PyObject *t_GroupQueryNode_getChild(t_GroupQueryNode *self);
              static PyObject *t_GroupQueryNode_setChild(t_GroupQueryNode *self, PyObject *arg);
              static PyObject *t_GroupQueryNode_toQueryString(t_GroupQueryNode *self, PyObject *args);
              static PyObject *t_GroupQueryNode_toString(t_GroupQueryNode *self, PyObject *args);
              static PyObject *t_GroupQueryNode_get__child(t_GroupQueryNode *self, void *data);
              static int t_GroupQueryNode_set__child(t_GroupQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_GroupQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_GroupQueryNode, child),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_GroupQueryNode__methods_[] = {
                DECLARE_METHOD(t_GroupQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_GroupQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_GroupQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_GroupQueryNode, getChild, METH_NOARGS),
                DECLARE_METHOD(t_GroupQueryNode, setChild, METH_O),
                DECLARE_METHOD(t_GroupQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_GroupQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(GroupQueryNode, t_GroupQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, GroupQueryNode, t_GroupQueryNode_init_, 0, 0, t_GroupQueryNode__fields_, 0, 0);

              void t_GroupQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(GroupQueryNode), module, "GroupQueryNode", 0);
              }

              void t_GroupQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(GroupQueryNode).tp_dict, "class_", make_descriptor(GroupQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(GroupQueryNode).tp_dict, "wrapfn_", make_descriptor(t_GroupQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(GroupQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_GroupQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, GroupQueryNode::initializeClass, 1)))
                  return NULL;
                return t_GroupQueryNode::wrap_Object(GroupQueryNode(((t_GroupQueryNode *) arg)->object.this$));
              }
              static PyObject *t_GroupQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, GroupQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_GroupQueryNode_init_(t_GroupQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                GroupQueryNode object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  INT_CALL(object = GroupQueryNode(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_GroupQueryNode_cloneTree(t_GroupQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(GroupQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_GroupQueryNode_getChild(t_GroupQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_GroupQueryNode_setChild(t_GroupQueryNode *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setChild(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setChild", arg);
                return NULL;
              }

              static PyObject *t_GroupQueryNode_toQueryString(t_GroupQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(GroupQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_GroupQueryNode_toString(t_GroupQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(GroupQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_GroupQueryNode_get__child(t_GroupQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }
              static int t_GroupQueryNode_set__child(t_GroupQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &value))
                  {
                    INT_CALL(self->object.setChild(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "child", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {

              ::java::lang::Class *QueryNodeProcessor::class$ = NULL;
              jmethodID *QueryNodeProcessor::mids$ = NULL;
              bool QueryNodeProcessor::live$ = false;

              jclass QueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getQueryConfigHandler_3636d8c3] = env->getMethodID(cls, "getQueryConfigHandler", "()Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setQueryConfigHandler_0b1f7132] = env->getMethodID(cls, "setQueryConfigHandler", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler QueryNodeProcessor::getQueryConfigHandler() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->callObjectMethod(this$, mids$[mid_getQueryConfigHandler_3636d8c3]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }

              void QueryNodeProcessor::setQueryConfigHandler(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setQueryConfigHandler_0b1f7132], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {
              static PyObject *t_QueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeProcessor_getQueryConfigHandler(t_QueryNodeProcessor *self);
              static PyObject *t_QueryNodeProcessor_process(t_QueryNodeProcessor *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessor_setQueryConfigHandler(t_QueryNodeProcessor *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessor_get__queryConfigHandler(t_QueryNodeProcessor *self, void *data);
              static int t_QueryNodeProcessor_set__queryConfigHandler(t_QueryNodeProcessor *self, PyObject *arg, void *data);
              static PyGetSetDef t_QueryNodeProcessor__fields_[] = {
                DECLARE_GETSET_FIELD(t_QueryNodeProcessor, queryConfigHandler),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_QueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_QueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessor, getQueryConfigHandler, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessor, process, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessor, setQueryConfigHandler, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryNodeProcessor, t_QueryNodeProcessor, ::java::lang::Object, QueryNodeProcessor, abstract_init, 0, 0, t_QueryNodeProcessor__fields_, 0, 0);

              void t_QueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNodeProcessor), module, "QueryNodeProcessor", 0);
              }

              void t_QueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessor).tp_dict, "class_", make_descriptor(QueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_QueryNodeProcessor::wrap_Object(QueryNodeProcessor(((t_QueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_QueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_QueryNodeProcessor_getQueryConfigHandler(t_QueryNodeProcessor *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler result((jobject) NULL);
                OBJ_CALL(result = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(result);
              }

              static PyObject *t_QueryNodeProcessor_process(t_QueryNodeProcessor *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "process", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessor_setQueryConfigHandler(t_QueryNodeProcessor *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setQueryConfigHandler(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setQueryConfigHandler", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessor_get__queryConfigHandler(t_QueryNodeProcessor *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                OBJ_CALL(value = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(value);
              }
              static int t_QueryNodeProcessor_set__queryConfigHandler(t_QueryNodeProcessor *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &value))
                  {
                    INT_CALL(self->object.setQueryConfigHandler(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "queryConfigHandler", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$expression_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$expression_return::class$ = NULL;
          jmethodID *JavascriptParser$expression_return::mids$ = NULL;
          bool JavascriptParser$expression_return::live$ = false;

          jclass JavascriptParser$expression_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$expression_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$expression_return::JavascriptParser$expression_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$expression_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$expression_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$expression_return_init_(t_JavascriptParser$expression_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$expression_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$expression_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$expression_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$expression_return, t_JavascriptParser$expression_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$expression_return, t_JavascriptParser$expression_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$expression_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$expression_return), module, "JavascriptParser$expression_return", 0);
          }

          void t_JavascriptParser$expression_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$expression_return).tp_dict, "class_", make_descriptor(JavascriptParser$expression_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$expression_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$expression_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$expression_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$expression_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$expression_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$expression_return::wrap_Object(JavascriptParser$expression_return(((t_JavascriptParser$expression_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$expression_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$expression_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$expression_return_init_(t_JavascriptParser$expression_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$expression_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$expression_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/Lucene47WordDelimiterFilter.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *Lucene47WordDelimiterFilter::class$ = NULL;
          jmethodID *Lucene47WordDelimiterFilter::mids$ = NULL;
          bool Lucene47WordDelimiterFilter::live$ = false;
          jint Lucene47WordDelimiterFilter::ALPHA = (jint) 0;
          jint Lucene47WordDelimiterFilter::ALPHANUM = (jint) 0;
          jint Lucene47WordDelimiterFilter::CATENATE_ALL = (jint) 0;
          jint Lucene47WordDelimiterFilter::CATENATE_NUMBERS = (jint) 0;
          jint Lucene47WordDelimiterFilter::CATENATE_WORDS = (jint) 0;
          jint Lucene47WordDelimiterFilter::DIGIT = (jint) 0;
          jint Lucene47WordDelimiterFilter::GENERATE_NUMBER_PARTS = (jint) 0;
          jint Lucene47WordDelimiterFilter::GENERATE_WORD_PARTS = (jint) 0;
          jint Lucene47WordDelimiterFilter::LOWER = (jint) 0;
          jint Lucene47WordDelimiterFilter::PRESERVE_ORIGINAL = (jint) 0;
          jint Lucene47WordDelimiterFilter::SPLIT_ON_CASE_CHANGE = (jint) 0;
          jint Lucene47WordDelimiterFilter::SPLIT_ON_NUMERICS = (jint) 0;
          jint Lucene47WordDelimiterFilter::STEM_ENGLISH_POSSESSIVE = (jint) 0;
          jint Lucene47WordDelimiterFilter::SUBWORD_DELIM = (jint) 0;
          jint Lucene47WordDelimiterFilter::UPPER = (jint) 0;

          jclass Lucene47WordDelimiterFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/Lucene47WordDelimiterFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_70257dbd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;ILorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_06e41d2a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;[BILorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ALPHA = env->getStaticIntField(cls, "ALPHA");
              ALPHANUM = env->getStaticIntField(cls, "ALPHANUM");
              CATENATE_ALL = env->getStaticIntField(cls, "CATENATE_ALL");
              CATENATE_NUMBERS = env->getStaticIntField(cls, "CATENATE_NUMBERS");
              CATENATE_WORDS = env->getStaticIntField(cls, "CATENATE_WORDS");
              DIGIT = env->getStaticIntField(cls, "DIGIT");
              GENERATE_NUMBER_PARTS = env->getStaticIntField(cls, "GENERATE_NUMBER_PARTS");
              GENERATE_WORD_PARTS = env->getStaticIntField(cls, "GENERATE_WORD_PARTS");
              LOWER = env->getStaticIntField(cls, "LOWER");
              PRESERVE_ORIGINAL = env->getStaticIntField(cls, "PRESERVE_ORIGINAL");
              SPLIT_ON_CASE_CHANGE = env->getStaticIntField(cls, "SPLIT_ON_CASE_CHANGE");
              SPLIT_ON_NUMERICS = env->getStaticIntField(cls, "SPLIT_ON_NUMERICS");
              STEM_ENGLISH_POSSESSIVE = env->getStaticIntField(cls, "STEM_ENGLISH_POSSESSIVE");
              SUBWORD_DELIM = env->getStaticIntField(cls, "SUBWORD_DELIM");
              UPPER = env->getStaticIntField(cls, "UPPER");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene47WordDelimiterFilter::Lucene47WordDelimiterFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_70257dbd, a0.this$, a1, a2.this$)) {}

          Lucene47WordDelimiterFilter::Lucene47WordDelimiterFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const JArray< jbyte > & a1, jint a2, const ::org::apache::lucene::analysis::util::CharArraySet & a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_06e41d2a, a0.this$, a1.this$, a2, a3.this$)) {}

          jboolean Lucene47WordDelimiterFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void Lucene47WordDelimiterFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_Lucene47WordDelimiterFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene47WordDelimiterFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene47WordDelimiterFilter_init_(t_Lucene47WordDelimiterFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene47WordDelimiterFilter_incrementToken(t_Lucene47WordDelimiterFilter *self, PyObject *args);
          static PyObject *t_Lucene47WordDelimiterFilter_reset(t_Lucene47WordDelimiterFilter *self, PyObject *args);

          static PyMethodDef t_Lucene47WordDelimiterFilter__methods_[] = {
            DECLARE_METHOD(t_Lucene47WordDelimiterFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene47WordDelimiterFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene47WordDelimiterFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_Lucene47WordDelimiterFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene47WordDelimiterFilter, t_Lucene47WordDelimiterFilter, ::org::apache::lucene::analysis::TokenFilter, Lucene47WordDelimiterFilter, t_Lucene47WordDelimiterFilter_init_, 0, 0, 0, 0, 0);

          void t_Lucene47WordDelimiterFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene47WordDelimiterFilter), module, "Lucene47WordDelimiterFilter", 0);
          }

          void t_Lucene47WordDelimiterFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "class_", make_descriptor(Lucene47WordDelimiterFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "wrapfn_", make_descriptor(t_Lucene47WordDelimiterFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene47WordDelimiterFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "ALPHA", make_descriptor(Lucene47WordDelimiterFilter::ALPHA));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "ALPHANUM", make_descriptor(Lucene47WordDelimiterFilter::ALPHANUM));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "CATENATE_ALL", make_descriptor(Lucene47WordDelimiterFilter::CATENATE_ALL));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "CATENATE_NUMBERS", make_descriptor(Lucene47WordDelimiterFilter::CATENATE_NUMBERS));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "CATENATE_WORDS", make_descriptor(Lucene47WordDelimiterFilter::CATENATE_WORDS));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "DIGIT", make_descriptor(Lucene47WordDelimiterFilter::DIGIT));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "GENERATE_NUMBER_PARTS", make_descriptor(Lucene47WordDelimiterFilter::GENERATE_NUMBER_PARTS));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "GENERATE_WORD_PARTS", make_descriptor(Lucene47WordDelimiterFilter::GENERATE_WORD_PARTS));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "LOWER", make_descriptor(Lucene47WordDelimiterFilter::LOWER));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "PRESERVE_ORIGINAL", make_descriptor(Lucene47WordDelimiterFilter::PRESERVE_ORIGINAL));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "SPLIT_ON_CASE_CHANGE", make_descriptor(Lucene47WordDelimiterFilter::SPLIT_ON_CASE_CHANGE));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "SPLIT_ON_NUMERICS", make_descriptor(Lucene47WordDelimiterFilter::SPLIT_ON_NUMERICS));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "STEM_ENGLISH_POSSESSIVE", make_descriptor(Lucene47WordDelimiterFilter::STEM_ENGLISH_POSSESSIVE));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "SUBWORD_DELIM", make_descriptor(Lucene47WordDelimiterFilter::SUBWORD_DELIM));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "UPPER", make_descriptor(Lucene47WordDelimiterFilter::UPPER));
          }

          static PyObject *t_Lucene47WordDelimiterFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene47WordDelimiterFilter::initializeClass, 1)))
              return NULL;
            return t_Lucene47WordDelimiterFilter::wrap_Object(Lucene47WordDelimiterFilter(((t_Lucene47WordDelimiterFilter *) arg)->object.this$));
          }
          static PyObject *t_Lucene47WordDelimiterFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene47WordDelimiterFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene47WordDelimiterFilter_init_(t_Lucene47WordDelimiterFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                Lucene47WordDelimiterFilter object((jobject) NULL);

                if (!parseArgs(args, "kIK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = Lucene47WordDelimiterFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                JArray< jbyte > a1((jobject) NULL);
                jint a2;
                ::org::apache::lucene::analysis::util::CharArraySet a3((jobject) NULL);
                PyTypeObject **p3;
                Lucene47WordDelimiterFilter object((jobject) NULL);

                if (!parseArgs(args, "k[BIK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = Lucene47WordDelimiterFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene47WordDelimiterFilter_incrementToken(t_Lucene47WordDelimiterFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Lucene47WordDelimiterFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_Lucene47WordDelimiterFilter_reset(t_Lucene47WordDelimiterFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene47WordDelimiterFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator::class$ = NULL;
        jmethodID *FieldComparator::mids$ = NULL;
        bool FieldComparator::live$ = false;

        jclass FieldComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_compareValues_466982ed] = env->getMethodID(cls, "compareValues", "(Ljava/lang/Object;Ljava/lang/Object;)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_setTopValue_290588ee] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Object;)V");
            mids$[mid_value_29be6a55] = env->getMethodID(cls, "value", "(I)Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator::FieldComparator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint FieldComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        jint FieldComparator::compareValues(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compareValues_466982ed], a0.this$, a1.this$);
        }

        void FieldComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        FieldComparator FieldComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }

        void FieldComparator::setTopValue(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_290588ee], a0.this$);
        }

        ::java::lang::Object FieldComparator::value(jint a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_value_29be6a55], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/FieldComparator$TermValComparator.h"
#include "org/apache/lucene/search/FieldComparator$TermOrdValComparator.h"
#include "org/apache/lucene/search/FieldComparator$DocComparator.h"
#include "org/apache/lucene/search/FieldComparator$RelevanceComparator.h"
#include "org/apache/lucene/search/FieldComparator$LongComparator.h"
#include "org/apache/lucene/search/FieldComparator$IntComparator.h"
#include "org/apache/lucene/search/FieldComparator$ShortComparator.h"
#include "org/apache/lucene/search/FieldComparator$FloatComparator.h"
#include "org/apache/lucene/search/FieldComparator$DoubleComparator.h"
#include "org/apache/lucene/search/FieldComparator$ByteComparator.h"
#include "org/apache/lucene/search/FieldComparator$NumericComparator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator_of_(t_FieldComparator *self, PyObject *args);
        static int t_FieldComparator_init_(t_FieldComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator_compare(t_FieldComparator *self, PyObject *args);
        static PyObject *t_FieldComparator_compareBottom(t_FieldComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator_compareTop(t_FieldComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator_compareValues(t_FieldComparator *self, PyObject *args);
        static PyObject *t_FieldComparator_copy(t_FieldComparator *self, PyObject *args);
        static PyObject *t_FieldComparator_setBottom(t_FieldComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator_setNextReader(t_FieldComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator_setScorer(t_FieldComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator_setTopValue(t_FieldComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator_value(t_FieldComparator *self, PyObject *arg);
        static int t_FieldComparator_set__bottom(t_FieldComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator_set__nextReader(t_FieldComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator_set__scorer(t_FieldComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator_set__topValue(t_FieldComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator_get__parameters_(t_FieldComparator *self, void *data);
        static PyGetSetDef t_FieldComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator, scorer),
          DECLARE_SET_FIELD(t_FieldComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator, compareBottom, METH_O),
          DECLARE_METHOD(t_FieldComparator, compareTop, METH_O),
          DECLARE_METHOD(t_FieldComparator, compareValues, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator, setBottom, METH_O),
          DECLARE_METHOD(t_FieldComparator, setNextReader, METH_O),
          DECLARE_METHOD(t_FieldComparator, setScorer, METH_O),
          DECLARE_METHOD(t_FieldComparator, setTopValue, METH_O),
          DECLARE_METHOD(t_FieldComparator, value, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator, t_FieldComparator, ::java::lang::Object, FieldComparator, t_FieldComparator_init_, 0, 0, t_FieldComparator__fields_, 0, 0);
        PyObject *t_FieldComparator::wrap_Object(const FieldComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator *self = (t_FieldComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator *self = (t_FieldComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator), module, "FieldComparator", 0);
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "TermValComparator", make_descriptor(&PY_TYPE(FieldComparator$TermValComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "TermOrdValComparator", make_descriptor(&PY_TYPE(FieldComparator$TermOrdValComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "DocComparator", make_descriptor(&PY_TYPE(FieldComparator$DocComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "RelevanceComparator", make_descriptor(&PY_TYPE(FieldComparator$RelevanceComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "LongComparator", make_descriptor(&PY_TYPE(FieldComparator$LongComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "IntComparator", make_descriptor(&PY_TYPE(FieldComparator$IntComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "ShortComparator", make_descriptor(&PY_TYPE(FieldComparator$ShortComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "FloatComparator", make_descriptor(&PY_TYPE(FieldComparator$FloatComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "DoubleComparator", make_descriptor(&PY_TYPE(FieldComparator$DoubleComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "ByteComparator", make_descriptor(&PY_TYPE(FieldComparator$ByteComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "NumericComparator", make_descriptor(&PY_TYPE(FieldComparator$NumericComparator)));
        }

        void t_FieldComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "class_", make_descriptor(FieldComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator::wrap_Object(FieldComparator(((t_FieldComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator_of_(t_FieldComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator_init_(t_FieldComparator *self, PyObject *args, PyObject *kwds)
        {
          FieldComparator object((jobject) NULL);

          INT_CALL(object = FieldComparator());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldComparator_compare(t_FieldComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compare", args);
          return NULL;
        }

        static PyObject *t_FieldComparator_compareBottom(t_FieldComparator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareBottom", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator_compareTop(t_FieldComparator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTop", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator_compareValues(t_FieldComparator *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
          {
            OBJ_CALL(result = self->object.compareValues(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareValues", args);
          return NULL;
        }

        static PyObject *t_FieldComparator_copy(t_FieldComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copy", args);
          return NULL;
        }

        static PyObject *t_FieldComparator_setBottom(t_FieldComparator *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBottom", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator_setNextReader(t_FieldComparator *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          FieldComparator result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return t_FieldComparator::wrap_Object(result, self->parameters[0]);
          }

          PyErr_SetArgsError((PyObject *) self, "setNextReader", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator_setScorer(t_FieldComparator *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setScorer", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator_setTopValue(t_FieldComparator *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setTopValue", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator_value(t_FieldComparator *self, PyObject *arg)
        {
          jint a0;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "value", arg);
          return NULL;
        }
        static PyObject *t_FieldComparator_get__parameters_(t_FieldComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator_set__bottom(t_FieldComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator_set__nextReader(t_FieldComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator_set__scorer(t_FieldComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }

        static int t_FieldComparator_set__topValue(t_FieldComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedDataInput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedDataInput::class$ = NULL;
          jmethodID *PackedDataInput::mids$ = NULL;
          bool PackedDataInput::live$ = false;

          jclass PackedDataInput::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedDataInput");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f5d6a551] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_readLong_39c7bd20] = env->getMethodID(cls, "readLong", "(I)J");
              mids$[mid_skipToNextByte_54c6a166] = env->getMethodID(cls, "skipToNextByte", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedDataInput::PackedDataInput(const ::org::apache::lucene::store::DataInput & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f5d6a551, a0.this$)) {}

          jlong PackedDataInput::readLong(jint a0) const
          {
            return env->callLongMethod(this$, mids$[mid_readLong_39c7bd20], a0);
          }

          void PackedDataInput::skipToNextByte() const
          {
            env->callVoidMethod(this$, mids$[mid_skipToNextByte_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedDataInput_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedDataInput_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedDataInput_init_(t_PackedDataInput *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedDataInput_readLong(t_PackedDataInput *self, PyObject *arg);
          static PyObject *t_PackedDataInput_skipToNextByte(t_PackedDataInput *self);

          static PyMethodDef t_PackedDataInput__methods_[] = {
            DECLARE_METHOD(t_PackedDataInput, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedDataInput, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedDataInput, readLong, METH_O),
            DECLARE_METHOD(t_PackedDataInput, skipToNextByte, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedDataInput, t_PackedDataInput, ::java::lang::Object, PackedDataInput, t_PackedDataInput_init_, 0, 0, 0, 0, 0);

          void t_PackedDataInput::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedDataInput), module, "PackedDataInput", 0);
          }

          void t_PackedDataInput::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedDataInput).tp_dict, "class_", make_descriptor(PackedDataInput::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedDataInput).tp_dict, "wrapfn_", make_descriptor(t_PackedDataInput::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedDataInput).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedDataInput_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedDataInput::initializeClass, 1)))
              return NULL;
            return t_PackedDataInput::wrap_Object(PackedDataInput(((t_PackedDataInput *) arg)->object.this$));
          }
          static PyObject *t_PackedDataInput_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedDataInput::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedDataInput_init_(t_PackedDataInput *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            PackedDataInput object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              INT_CALL(object = PackedDataInput(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PackedDataInput_readLong(t_PackedDataInput *self, PyObject *arg)
          {
            jint a0;
            jlong result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.readLong(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "readLong", arg);
            return NULL;
          }

          static PyObject *t_PackedDataInput_skipToNextByte(t_PackedDataInput *self)
          {
            OBJ_CALL(self->object.skipToNextByte());
            Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Exception.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Exception::class$ = NULL;
    jmethodID *Exception::mids$ = NULL;
    bool Exception::live$ = false;

    jclass Exception::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Exception");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Exception::Exception() : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    Exception::Exception(const ::java::lang::Throwable & a0) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

    Exception::Exception(const ::java::lang::String & a0) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    Exception::Exception(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Exception_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Exception_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Exception_init_(t_Exception *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_Exception__methods_[] = {
      DECLARE_METHOD(t_Exception, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Exception, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Exception, t_Exception, ::java::lang::Throwable, Exception, t_Exception_init_, 0, 0, 0, 0, 0);

    void t_Exception::install(PyObject *module)
    {
      installType(&PY_TYPE(Exception), module, "Exception", 0);
    }

    void t_Exception::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Exception).tp_dict, "class_", make_descriptor(Exception::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Exception).tp_dict, "wrapfn_", make_descriptor(t_Exception::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Exception).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Exception_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Exception::initializeClass, 1)))
        return NULL;
      return t_Exception::wrap_Object(Exception(((t_Exception *) arg)->object.this$));
    }
    static PyObject *t_Exception_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Exception::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Exception_init_(t_Exception *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          Exception object((jobject) NULL);

          INT_CALL(object = Exception());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::Throwable a0((jobject) NULL);
          Exception object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            INT_CALL(object = Exception(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Exception object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Exception(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Throwable a1((jobject) NULL);
          Exception object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Exception(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$postfix_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$postfix_return::class$ = NULL;
          jmethodID *JavascriptParser$postfix_return::mids$ = NULL;
          bool JavascriptParser$postfix_return::live$ = false;

          jclass JavascriptParser$postfix_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$postfix_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$postfix_return::JavascriptParser$postfix_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$postfix_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$postfix_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$postfix_return_init_(t_JavascriptParser$postfix_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$postfix_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$postfix_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$postfix_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$postfix_return, t_JavascriptParser$postfix_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$postfix_return, t_JavascriptParser$postfix_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$postfix_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$postfix_return), module, "JavascriptParser$postfix_return", 0);
          }

          void t_JavascriptParser$postfix_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$postfix_return).tp_dict, "class_", make_descriptor(JavascriptParser$postfix_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$postfix_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$postfix_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$postfix_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$postfix_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$postfix_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$postfix_return::wrap_Object(JavascriptParser$postfix_return(((t_JavascriptParser$postfix_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$postfix_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$postfix_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$postfix_return_init_(t_JavascriptParser$postfix_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$postfix_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$postfix_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/BoolDocValues.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *BoolDocValues::class$ = NULL;
            jmethodID *BoolDocValues::mids$ = NULL;
            bool BoolDocValues::live$ = false;

            jclass BoolDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/BoolDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_boolVal_39c7bd30] = env->getMethodID(cls, "boolVal", "(I)Z");
                mids$[mid_byteVal_39c7bd28] = env->getMethodID(cls, "byteVal", "(I)B");
                mids$[mid_doubleVal_39c7bd2e] = env->getMethodID(cls, "doubleVal", "(I)D");
                mids$[mid_floatVal_39c7bd2c] = env->getMethodID(cls, "floatVal", "(I)F");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_intVal_39c7bd23] = env->getMethodID(cls, "intVal", "(I)I");
                mids$[mid_longVal_39c7bd20] = env->getMethodID(cls, "longVal", "(I)J");
                mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_shortVal_39c7bd39] = env->getMethodID(cls, "shortVal", "(I)S");
                mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BoolDocValues::BoolDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            jboolean BoolDocValues::boolVal(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_boolVal_39c7bd30], a0);
            }

            jbyte BoolDocValues::byteVal(jint a0) const
            {
              return env->callByteMethod(this$, mids$[mid_byteVal_39c7bd28], a0);
            }

            jdouble BoolDocValues::doubleVal(jint a0) const
            {
              return env->callDoubleMethod(this$, mids$[mid_doubleVal_39c7bd2e], a0);
            }

            jfloat BoolDocValues::floatVal(jint a0) const
            {
              return env->callFloatMethod(this$, mids$[mid_floatVal_39c7bd2c], a0);
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller BoolDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            jint BoolDocValues::intVal(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_intVal_39c7bd23], a0);
            }

            jlong BoolDocValues::longVal(jint a0) const
            {
              return env->callLongMethod(this$, mids$[mid_longVal_39c7bd20], a0);
            }

            ::java::lang::Object BoolDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
            }

            jshort BoolDocValues::shortVal(jint a0) const
            {
              return env->callShortMethod(this$, mids$[mid_shortVal_39c7bd39], a0);
            }

            ::java::lang::String BoolDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
            }

            ::java::lang::String BoolDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_BoolDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BoolDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BoolDocValues_init_(t_BoolDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_BoolDocValues_boolVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_byteVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_doubleVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_floatVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_getValueFiller(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_intVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_longVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_objectVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_shortVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_strVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_toString(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_get__valueFiller(t_BoolDocValues *self, void *data);
            static PyGetSetDef t_BoolDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_BoolDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_BoolDocValues__methods_[] = {
              DECLARE_METHOD(t_BoolDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BoolDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BoolDocValues, boolVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, byteVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, doubleVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, floatVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, intVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, longVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, shortVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BoolDocValues, t_BoolDocValues, ::org::apache::lucene::queries::function::FunctionValues, BoolDocValues, t_BoolDocValues_init_, 0, 0, t_BoolDocValues__fields_, 0, 0);

            void t_BoolDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(BoolDocValues), module, "BoolDocValues", 0);
            }

            void t_BoolDocValues::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BoolDocValues).tp_dict, "class_", make_descriptor(BoolDocValues::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BoolDocValues).tp_dict, "wrapfn_", make_descriptor(t_BoolDocValues::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BoolDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BoolDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BoolDocValues::initializeClass, 1)))
                return NULL;
              return t_BoolDocValues::wrap_Object(BoolDocValues(((t_BoolDocValues *) arg)->object.this$));
            }
            static PyObject *t_BoolDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BoolDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BoolDocValues_init_(t_BoolDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              BoolDocValues object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = BoolDocValues(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_BoolDocValues_boolVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.boolVal(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "boolVal", args, 2);
            }

            static PyObject *t_BoolDocValues_byteVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jbyte result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.byteVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "byteVal", args, 2);
            }

            static PyObject *t_BoolDocValues_doubleVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jdouble result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.doubleVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "doubleVal", args, 2);
            }

            static PyObject *t_BoolDocValues_floatVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.floatVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "floatVal", args, 2);
            }

            static PyObject *t_BoolDocValues_getValueFiller(t_BoolDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_BoolDocValues_intVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.intVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "intVal", args, 2);
            }

            static PyObject *t_BoolDocValues_longVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jlong result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.longVal(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "longVal", args, 2);
            }

            static PyObject *t_BoolDocValues_objectVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_BoolDocValues_shortVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jshort result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.shortVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "shortVal", args, 2);
            }

            static PyObject *t_BoolDocValues_strVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_BoolDocValues_toString(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_BoolDocValues_get__valueFiller(t_BoolDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CompositeReaderContext.h"
#include "java/util/List.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/CompositeReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CompositeReaderContext::class$ = NULL;
        jmethodID *CompositeReaderContext::mids$ = NULL;
        bool CompositeReaderContext::live$ = false;

        jclass CompositeReaderContext::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CompositeReaderContext");

            mids$ = new jmethodID[max_mid];
            mids$[mid_children_87851566] = env->getMethodID(cls, "children", "()Ljava/util/List;");
            mids$[mid_leaves_87851566] = env->getMethodID(cls, "leaves", "()Ljava/util/List;");
            mids$[mid_reader_d29e58f7] = env->getMethodID(cls, "reader", "()Lorg/apache/lucene/index/CompositeReader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::List CompositeReaderContext::children() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_children_87851566]));
        }

        ::java::util::List CompositeReaderContext::leaves() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_leaves_87851566]));
        }

        ::org::apache::lucene::index::CompositeReader CompositeReaderContext::reader() const
        {
          return ::org::apache::lucene::index::CompositeReader(env->callObjectMethod(this$, mids$[mid_reader_d29e58f7]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CompositeReaderContext_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompositeReaderContext_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompositeReaderContext_children(t_CompositeReaderContext *self, PyObject *args);
        static PyObject *t_CompositeReaderContext_leaves(t_CompositeReaderContext *self, PyObject *args);
        static PyObject *t_CompositeReaderContext_reader(t_CompositeReaderContext *self, PyObject *args);

        static PyMethodDef t_CompositeReaderContext__methods_[] = {
          DECLARE_METHOD(t_CompositeReaderContext, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompositeReaderContext, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompositeReaderContext, children, METH_VARARGS),
          DECLARE_METHOD(t_CompositeReaderContext, leaves, METH_VARARGS),
          DECLARE_METHOD(t_CompositeReaderContext, reader, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CompositeReaderContext, t_CompositeReaderContext, ::org::apache::lucene::index::IndexReaderContext, CompositeReaderContext, abstract_init, 0, 0, 0, 0, 0);

        void t_CompositeReaderContext::install(PyObject *module)
        {
          installType(&PY_TYPE(CompositeReaderContext), module, "CompositeReaderContext", 0);
        }

        void t_CompositeReaderContext::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CompositeReaderContext).tp_dict, "class_", make_descriptor(CompositeReaderContext::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CompositeReaderContext).tp_dict, "wrapfn_", make_descriptor(t_CompositeReaderContext::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CompositeReaderContext).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CompositeReaderContext_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CompositeReaderContext::initializeClass, 1)))
            return NULL;
          return t_CompositeReaderContext::wrap_Object(CompositeReaderContext(((t_CompositeReaderContext *) arg)->object.this$));
        }
        static PyObject *t_CompositeReaderContext_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CompositeReaderContext::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CompositeReaderContext_children(t_CompositeReaderContext *self, PyObject *args)
        {
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.children());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(IndexReaderContext));
          }

          return callSuper(&PY_TYPE(CompositeReaderContext), (PyObject *) self, "children", args, 2);
        }

        static PyObject *t_CompositeReaderContext_leaves(t_CompositeReaderContext *self, PyObject *args)
        {
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.leaves());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(AtomicReaderContext));
          }

          return callSuper(&PY_TYPE(CompositeReaderContext), (PyObject *) self, "leaves", args, 2);
        }

        static PyObject *t_CompositeReaderContext_reader(t_CompositeReaderContext *self, PyObject *args)
        {
          ::org::apache::lucene::index::CompositeReader result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.reader());
            return ::org::apache::lucene::index::t_CompositeReader::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CompositeReaderContext), (PyObject *) self, "reader", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/index/TermState.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *BlockTermState::class$ = NULL;
        jmethodID *BlockTermState::mids$ = NULL;
        jfieldID *BlockTermState::fids$ = NULL;
        bool BlockTermState::live$ = false;

        jclass BlockTermState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/BlockTermState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_copyFrom_d506ca07] = env->getMethodID(cls, "copyFrom", "(Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_blockFilePointer] = env->getFieldID(cls, "blockFilePointer", "J");
            fids$[fid_docFreq] = env->getFieldID(cls, "docFreq", "I");
            fids$[fid_termBlockOrd] = env->getFieldID(cls, "termBlockOrd", "I");
            fids$[fid_totalTermFreq] = env->getFieldID(cls, "totalTermFreq", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void BlockTermState::copyFrom(const ::org::apache::lucene::index::TermState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyFrom_d506ca07], a0.this$);
        }

        ::java::lang::String BlockTermState::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jlong BlockTermState::_get_blockFilePointer() const
        {
          return env->getLongField(this$, fids$[fid_blockFilePointer]);
        }

        void BlockTermState::_set_blockFilePointer(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_blockFilePointer], a0);
        }

        jint BlockTermState::_get_docFreq() const
        {
          return env->getIntField(this$, fids$[fid_docFreq]);
        }

        void BlockTermState::_set_docFreq(jint a0) const
        {
          env->setIntField(this$, fids$[fid_docFreq], a0);
        }

        jint BlockTermState::_get_termBlockOrd() const
        {
          return env->getIntField(this$, fids$[fid_termBlockOrd]);
        }

        void BlockTermState::_set_termBlockOrd(jint a0) const
        {
          env->setIntField(this$, fids$[fid_termBlockOrd], a0);
        }

        jlong BlockTermState::_get_totalTermFreq() const
        {
          return env->getLongField(this$, fids$[fid_totalTermFreq]);
        }

        void BlockTermState::_set_totalTermFreq(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalTermFreq], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_BlockTermState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BlockTermState_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BlockTermState_copyFrom(t_BlockTermState *self, PyObject *args);
        static PyObject *t_BlockTermState_toString(t_BlockTermState *self, PyObject *args);
        static PyObject *t_BlockTermState_get__blockFilePointer(t_BlockTermState *self, void *data);
        static int t_BlockTermState_set__blockFilePointer(t_BlockTermState *self, PyObject *arg, void *data);
        static PyObject *t_BlockTermState_get__docFreq(t_BlockTermState *self, void *data);
        static int t_BlockTermState_set__docFreq(t_BlockTermState *self, PyObject *arg, void *data);
        static PyObject *t_BlockTermState_get__termBlockOrd(t_BlockTermState *self, void *data);
        static int t_BlockTermState_set__termBlockOrd(t_BlockTermState *self, PyObject *arg, void *data);
        static PyObject *t_BlockTermState_get__totalTermFreq(t_BlockTermState *self, void *data);
        static int t_BlockTermState_set__totalTermFreq(t_BlockTermState *self, PyObject *arg, void *data);

        static PyGetSetDef t_BlockTermState__fields_[] = {
          DECLARE_GETSET_FIELD(t_BlockTermState, blockFilePointer),
          DECLARE_GETSET_FIELD(t_BlockTermState, docFreq),
          DECLARE_GETSET_FIELD(t_BlockTermState, termBlockOrd),
          DECLARE_GETSET_FIELD(t_BlockTermState, totalTermFreq),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BlockTermState__methods_[] = {
          DECLARE_METHOD(t_BlockTermState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BlockTermState, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BlockTermState, copyFrom, METH_VARARGS),
          DECLARE_METHOD(t_BlockTermState, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BlockTermState, t_BlockTermState, ::org::apache::lucene::index::OrdTermState, BlockTermState, abstract_init, 0, 0, t_BlockTermState__fields_, 0, 0);

        void t_BlockTermState::install(PyObject *module)
        {
          installType(&PY_TYPE(BlockTermState), module, "BlockTermState", 0);
        }

        void t_BlockTermState::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BlockTermState).tp_dict, "class_", make_descriptor(BlockTermState::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BlockTermState).tp_dict, "wrapfn_", make_descriptor(t_BlockTermState::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BlockTermState).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BlockTermState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BlockTermState::initializeClass, 1)))
            return NULL;
          return t_BlockTermState::wrap_Object(BlockTermState(((t_BlockTermState *) arg)->object.this$));
        }
        static PyObject *t_BlockTermState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BlockTermState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BlockTermState_copyFrom(t_BlockTermState *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermState a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::TermState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyFrom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BlockTermState), (PyObject *) self, "copyFrom", args, 2);
        }

        static PyObject *t_BlockTermState_toString(t_BlockTermState *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(BlockTermState), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_BlockTermState_get__blockFilePointer(t_BlockTermState *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_blockFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_BlockTermState_set__blockFilePointer(t_BlockTermState *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_blockFilePointer(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "blockFilePointer", arg);
          return -1;
        }

        static PyObject *t_BlockTermState_get__docFreq(t_BlockTermState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docFreq());
          return PyInt_FromLong((long) value);
        }
        static int t_BlockTermState_set__docFreq(t_BlockTermState *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_docFreq(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docFreq", arg);
          return -1;
        }

        static PyObject *t_BlockTermState_get__termBlockOrd(t_BlockTermState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_termBlockOrd());
          return PyInt_FromLong((long) value);
        }
        static int t_BlockTermState_set__termBlockOrd(t_BlockTermState *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_termBlockOrd(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "termBlockOrd", arg);
          return -1;
        }

        static PyObject *t_BlockTermState_get__totalTermFreq(t_BlockTermState *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_BlockTermState_set__totalTermFreq(t_BlockTermState *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalTermFreq(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalTermFreq", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FragmentsBuilder.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FragmentsBuilder::class$ = NULL;
          jmethodID *FragmentsBuilder::mids$ = NULL;
          bool FragmentsBuilder::live$ = false;

          jclass FragmentsBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FragmentsBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_createFragment_dbdbadf3] = env->getMethodID(cls, "createFragment", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;)Ljava/lang/String;");
              mids$[mid_createFragment_4ae15401] = env->getMethodID(cls, "createFragment", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)Ljava/lang/String;");
              mids$[mid_createFragments_b5534699] = env->getMethodID(cls, "createFragments", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;I)[Ljava/lang/String;");
              mids$[mid_createFragments_a6aed56f] = env->getMethodID(cls, "createFragments", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;I[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)[Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String FragmentsBuilder::createFragment(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_createFragment_dbdbadf3], a0.this$, a1, a2.this$, a3.this$));
          }

          ::java::lang::String FragmentsBuilder::createFragment(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, const JArray< ::java::lang::String > & a4, const JArray< ::java::lang::String > & a5, const ::org::apache::lucene::search::highlight::Encoder & a6) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_createFragment_4ae15401], a0.this$, a1, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$));
          }

          JArray< ::java::lang::String > FragmentsBuilder::createFragments(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, jint a4) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_createFragments_b5534699], a0.this$, a1, a2.this$, a3.this$, a4));
          }

          JArray< ::java::lang::String > FragmentsBuilder::createFragments(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, jint a4, const JArray< ::java::lang::String > & a5, const JArray< ::java::lang::String > & a6, const ::org::apache::lucene::search::highlight::Encoder & a7) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_createFragments_a6aed56f], a0.this$, a1, a2.this$, a3.this$, a4, a5.this$, a6.this$, a7.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FragmentsBuilder_createFragment(t_FragmentsBuilder *self, PyObject *args);
          static PyObject *t_FragmentsBuilder_createFragments(t_FragmentsBuilder *self, PyObject *args);

          static PyMethodDef t_FragmentsBuilder__methods_[] = {
            DECLARE_METHOD(t_FragmentsBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FragmentsBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FragmentsBuilder, createFragment, METH_VARARGS),
            DECLARE_METHOD(t_FragmentsBuilder, createFragments, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FragmentsBuilder, t_FragmentsBuilder, ::java::lang::Object, FragmentsBuilder, abstract_init, 0, 0, 0, 0, 0);

          void t_FragmentsBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(FragmentsBuilder), module, "FragmentsBuilder", 0);
          }

          void t_FragmentsBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FragmentsBuilder).tp_dict, "class_", make_descriptor(FragmentsBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FragmentsBuilder).tp_dict, "wrapfn_", make_descriptor(t_FragmentsBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FragmentsBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FragmentsBuilder::initializeClass, 1)))
              return NULL;
            return t_FragmentsBuilder::wrap_Object(FragmentsBuilder(((t_FragmentsBuilder *) arg)->object.this$));
          }
          static PyObject *t_FragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FragmentsBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FragmentsBuilder_createFragment(t_FragmentsBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kIsk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.createFragment(a0, a1, a2, a3));
                  return j2p(result);
                }
              }
              break;
             case 7:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                JArray< ::java::lang::String > a4((jobject) NULL);
                JArray< ::java::lang::String > a5((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a6((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kIsk[s[sk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                {
                  OBJ_CALL(result = self->object.createFragment(a0, a1, a2, a3, a4, a5, a6));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "createFragment", args);
            return NULL;
          }

          static PyObject *t_FragmentsBuilder_createFragments(t_FragmentsBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                jint a4;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kIskI", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.createFragments(a0, a1, a2, a3, a4));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 8:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                jint a4;
                JArray< ::java::lang::String > a5((jobject) NULL);
                JArray< ::java::lang::String > a6((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a7((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kIskI[s[sk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
                {
                  OBJ_CALL(result = self->object.createFragments(a0, a1, a2, a3, a4, a5, a6, a7));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "createFragments", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/Token.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/Serializable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *Token::class$ = NULL;
          jmethodID *Token::mids$ = NULL;
          jfieldID *Token::fids$ = NULL;
          bool Token::live$ = false;

          jclass Token::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/Token");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_init$_d40a4f2e] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;)V");
              mids$[mid_getValue_846352c3] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
              mids$[mid_newToken_61c98f04] = env->getStaticMethodID(cls, "newToken", "(I)Lorg/apache/lucene/queryparser/classic/Token;");
              mids$[mid_newToken_73220176] = env->getStaticMethodID(cls, "newToken", "(ILjava/lang/String;)Lorg/apache/lucene/queryparser/classic/Token;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_beginColumn] = env->getFieldID(cls, "beginColumn", "I");
              fids$[fid_beginLine] = env->getFieldID(cls, "beginLine", "I");
              fids$[fid_endColumn] = env->getFieldID(cls, "endColumn", "I");
              fids$[fid_endLine] = env->getFieldID(cls, "endLine", "I");
              fids$[fid_image] = env->getFieldID(cls, "image", "Ljava/lang/String;");
              fids$[fid_kind] = env->getFieldID(cls, "kind", "I");
              fids$[fid_next] = env->getFieldID(cls, "next", "Lorg/apache/lucene/queryparser/classic/Token;");
              fids$[fid_specialToken] = env->getFieldID(cls, "specialToken", "Lorg/apache/lucene/queryparser/classic/Token;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Token::Token() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          Token::Token(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          Token::Token(jint a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d40a4f2e, a0, a1.this$)) {}

          ::java::lang::Object Token::getValue() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_846352c3]));
          }

          Token Token::newToken(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_61c98f04], a0));
          }

          Token Token::newToken(jint a0, const ::java::lang::String & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_73220176], a0, a1.this$));
          }

          ::java::lang::String Token::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          jint Token::_get_beginColumn() const
          {
            return env->getIntField(this$, fids$[fid_beginColumn]);
          }

          void Token::_set_beginColumn(jint a0) const
          {
            env->setIntField(this$, fids$[fid_beginColumn], a0);
          }

          jint Token::_get_beginLine() const
          {
            return env->getIntField(this$, fids$[fid_beginLine]);
          }

          void Token::_set_beginLine(jint a0) const
          {
            env->setIntField(this$, fids$[fid_beginLine], a0);
          }

          jint Token::_get_endColumn() const
          {
            return env->getIntField(this$, fids$[fid_endColumn]);
          }

          void Token::_set_endColumn(jint a0) const
          {
            env->setIntField(this$, fids$[fid_endColumn], a0);
          }

          jint Token::_get_endLine() const
          {
            return env->getIntField(this$, fids$[fid_endLine]);
          }

          void Token::_set_endLine(jint a0) const
          {
            env->setIntField(this$, fids$[fid_endLine], a0);
          }

          ::java::lang::String Token::_get_image() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_image]));
          }

          void Token::_set_image(const ::java::lang::String & a0) const
          {
            env->setObjectField(this$, fids$[fid_image], a0.this$);
          }

          jint Token::_get_kind() const
          {
            return env->getIntField(this$, fids$[fid_kind]);
          }

          void Token::_set_kind(jint a0) const
          {
            env->setIntField(this$, fids$[fid_kind], a0);
          }

          Token Token::_get_next() const
          {
            return Token(env->getObjectField(this$, fids$[fid_next]));
          }

          void Token::_set_next(const Token & a0) const
          {
            env->setObjectField(this$, fids$[fid_next], a0.this$);
          }

          Token Token::_get_specialToken() const
          {
            return Token(env->getObjectField(this$, fids$[fid_specialToken]));
          }

          void Token::_set_specialToken(const Token & a0) const
          {
            env->setObjectField(this$, fids$[fid_specialToken], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Token_getValue(t_Token *self);
          static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args);
          static PyObject *t_Token_toString(t_Token *self, PyObject *args);
          static PyObject *t_Token_get__beginColumn(t_Token *self, void *data);
          static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__beginLine(t_Token *self, void *data);
          static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__endColumn(t_Token *self, void *data);
          static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__endLine(t_Token *self, void *data);
          static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__image(t_Token *self, void *data);
          static int t_Token_set__image(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__kind(t_Token *self, void *data);
          static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__next(t_Token *self, void *data);
          static int t_Token_set__next(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__specialToken(t_Token *self, void *data);
          static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data);

          static PyObject *t_Token_get__value(t_Token *self, void *data);
          static PyGetSetDef t_Token__fields_[] = {
            DECLARE_GETSET_FIELD(t_Token, beginColumn),
            DECLARE_GETSET_FIELD(t_Token, beginLine),
            DECLARE_GETSET_FIELD(t_Token, endColumn),
            DECLARE_GETSET_FIELD(t_Token, endLine),
            DECLARE_GETSET_FIELD(t_Token, image),
            DECLARE_GETSET_FIELD(t_Token, kind),
            DECLARE_GETSET_FIELD(t_Token, next),
            DECLARE_GETSET_FIELD(t_Token, specialToken),
            DECLARE_GET_FIELD(t_Token, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Token__methods_[] = {
            DECLARE_METHOD(t_Token, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Token, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Token, getValue, METH_NOARGS),
            DECLARE_METHOD(t_Token, newToken, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Token, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Token, t_Token, ::java::lang::Object, Token, t_Token_init_, 0, 0, t_Token__fields_, 0, 0);

          void t_Token::install(PyObject *module)
          {
            installType(&PY_TYPE(Token), module, "Token", 0);
          }

          void t_Token::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Token).tp_dict, "class_", make_descriptor(Token::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Token).tp_dict, "wrapfn_", make_descriptor(t_Token::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Token).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Token::initializeClass, 1)))
              return NULL;
            return t_Token::wrap_Object(Token(((t_Token *) arg)->object.this$));
          }
          static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Token::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Token object((jobject) NULL);

                INT_CALL(object = Token());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                Token object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = Token(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                jint a0;
                ::java::lang::String a1((jobject) NULL);
                Token object((jobject) NULL);

                if (!parseArgs(args, "Is", &a0, &a1))
                {
                  INT_CALL(object = Token(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Token_getValue(t_Token *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.getValue());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                Token result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::Token::newToken(a0));
                  return t_Token::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                ::java::lang::String a1((jobject) NULL);
                Token result((jobject) NULL);

                if (!parseArgs(args, "Is", &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::Token::newToken(a0, a1));
                  return t_Token::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "newToken", args);
            return NULL;
          }

          static PyObject *t_Token_toString(t_Token *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Token), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Token_get__beginColumn(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_beginColumn());
            return PyInt_FromLong((long) value);
          }
          static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_beginColumn(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "beginColumn", arg);
            return -1;
          }

          static PyObject *t_Token_get__beginLine(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_beginLine());
            return PyInt_FromLong((long) value);
          }
          static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_beginLine(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "beginLine", arg);
            return -1;
          }

          static PyObject *t_Token_get__endColumn(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_endColumn());
            return PyInt_FromLong((long) value);
          }
          static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_endColumn(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "endColumn", arg);
            return -1;
          }

          static PyObject *t_Token_get__endLine(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_endLine());
            return PyInt_FromLong((long) value);
          }
          static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_endLine(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "endLine", arg);
            return -1;
          }

          static PyObject *t_Token_get__image(t_Token *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_image());
            return j2p(value);
          }
          static int t_Token_set__image(t_Token *self, PyObject *arg, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            if (!parseArg(arg, "s", &value))
            {
              INT_CALL(self->object._set_image(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "image", arg);
            return -1;
          }

          static PyObject *t_Token_get__kind(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_kind());
            return PyInt_FromLong((long) value);
          }
          static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_kind(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "kind", arg);
            return -1;
          }

          static PyObject *t_Token_get__next(t_Token *self, void *data)
          {
            Token value((jobject) NULL);
            OBJ_CALL(value = self->object._get_next());
            return t_Token::wrap_Object(value);
          }
          static int t_Token_set__next(t_Token *self, PyObject *arg, void *data)
          {
            Token value((jobject) NULL);
            if (!parseArg(arg, "k", Token::initializeClass, &value))
            {
              INT_CALL(self->object._set_next(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "next", arg);
            return -1;
          }

          static PyObject *t_Token_get__specialToken(t_Token *self, void *data)
          {
            Token value((jobject) NULL);
            OBJ_CALL(value = self->object._get_specialToken());
            return t_Token::wrap_Object(value);
          }
          static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data)
          {
            Token value((jobject) NULL);
            if (!parseArg(arg, "k", Token::initializeClass, &value))
            {
              INT_CALL(self->object._set_specialToken(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "specialToken", arg);
            return -1;
          }

          static PyObject *t_Token_get__value(t_Token *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object.getValue());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoFormat.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/SegmentInfoReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/SegmentInfoWriter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40SegmentInfoFormat::class$ = NULL;
          jmethodID *Lucene40SegmentInfoFormat::mids$ = NULL;
          bool Lucene40SegmentInfoFormat::live$ = false;
          ::java::lang::String *Lucene40SegmentInfoFormat::SI_EXTENSION = NULL;

          jclass Lucene40SegmentInfoFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getSegmentInfoReader_1e88b6e7] = env->getMethodID(cls, "getSegmentInfoReader", "()Lorg/apache/lucene/codecs/SegmentInfoReader;");
              mids$[mid_getSegmentInfoWriter_2d4ab533] = env->getMethodID(cls, "getSegmentInfoWriter", "()Lorg/apache/lucene/codecs/SegmentInfoWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              SI_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "SI_EXTENSION", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40SegmentInfoFormat::Lucene40SegmentInfoFormat() : ::org::apache::lucene::codecs::SegmentInfoFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::SegmentInfoReader Lucene40SegmentInfoFormat::getSegmentInfoReader() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoReader(env->callObjectMethod(this$, mids$[mid_getSegmentInfoReader_1e88b6e7]));
          }

          ::org::apache::lucene::codecs::SegmentInfoWriter Lucene40SegmentInfoFormat::getSegmentInfoWriter() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoWriter(env->callObjectMethod(this$, mids$[mid_getSegmentInfoWriter_2d4ab533]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40SegmentInfoFormat_init_(t_Lucene40SegmentInfoFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40SegmentInfoFormat_getSegmentInfoReader(t_Lucene40SegmentInfoFormat *self, PyObject *args);
          static PyObject *t_Lucene40SegmentInfoFormat_getSegmentInfoWriter(t_Lucene40SegmentInfoFormat *self, PyObject *args);
          static PyObject *t_Lucene40SegmentInfoFormat_get__segmentInfoReader(t_Lucene40SegmentInfoFormat *self, void *data);
          static PyObject *t_Lucene40SegmentInfoFormat_get__segmentInfoWriter(t_Lucene40SegmentInfoFormat *self, void *data);
          static PyGetSetDef t_Lucene40SegmentInfoFormat__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene40SegmentInfoFormat, segmentInfoReader),
            DECLARE_GET_FIELD(t_Lucene40SegmentInfoFormat, segmentInfoWriter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene40SegmentInfoFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40SegmentInfoFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SegmentInfoFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SegmentInfoFormat, getSegmentInfoReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40SegmentInfoFormat, getSegmentInfoWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40SegmentInfoFormat, t_Lucene40SegmentInfoFormat, ::org::apache::lucene::codecs::SegmentInfoFormat, Lucene40SegmentInfoFormat, t_Lucene40SegmentInfoFormat_init_, 0, 0, t_Lucene40SegmentInfoFormat__fields_, 0, 0);

          void t_Lucene40SegmentInfoFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40SegmentInfoFormat), module, "Lucene40SegmentInfoFormat", 0);
          }

          void t_Lucene40SegmentInfoFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoFormat).tp_dict, "class_", make_descriptor(Lucene40SegmentInfoFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40SegmentInfoFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene40SegmentInfoFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoFormat).tp_dict, "SI_EXTENSION", make_descriptor(j2p(*Lucene40SegmentInfoFormat::SI_EXTENSION)));
          }

          static PyObject *t_Lucene40SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40SegmentInfoFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40SegmentInfoFormat::wrap_Object(Lucene40SegmentInfoFormat(((t_Lucene40SegmentInfoFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40SegmentInfoFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40SegmentInfoFormat_init_(t_Lucene40SegmentInfoFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40SegmentInfoFormat object((jobject) NULL);

            INT_CALL(object = Lucene40SegmentInfoFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40SegmentInfoFormat_getSegmentInfoReader(t_Lucene40SegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSegmentInfoReader());
              return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40SegmentInfoFormat), (PyObject *) self, "getSegmentInfoReader", args, 2);
          }

          static PyObject *t_Lucene40SegmentInfoFormat_getSegmentInfoWriter(t_Lucene40SegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoWriter result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSegmentInfoWriter());
              return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40SegmentInfoFormat), (PyObject *) self, "getSegmentInfoWriter", args, 2);
          }

          static PyObject *t_Lucene40SegmentInfoFormat_get__segmentInfoReader(t_Lucene40SegmentInfoFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::SegmentInfoReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getSegmentInfoReader());
            return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(value);
          }

          static PyObject *t_Lucene40SegmentInfoFormat_get__segmentInfoWriter(t_Lucene40SegmentInfoFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::SegmentInfoWriter value((jobject) NULL);
            OBJ_CALL(value = self->object.getSegmentInfoWriter());
            return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SpanNearClauseFactory::class$ = NULL;
            jmethodID *SpanNearClauseFactory::mids$ = NULL;
            bool SpanNearClauseFactory::live$ = false;

            jclass SpanNearClauseFactory::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_e15223d7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)V");
                mids$[mid_addSpanQuery_6e301113] = env->getMethodID(cls, "addSpanQuery", "(Lorg/apache/lucene/search/Query;)V");
                mids$[mid_addTermWeighted_286d05ee] = env->getMethodID(cls, "addTermWeighted", "(Lorg/apache/lucene/index/Term;F)V");
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_getBasicQueryFactory_d652c3af] = env->getMethodID(cls, "getBasicQueryFactory", "()Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;");
                mids$[mid_getFieldName_14c7b5c5] = env->getMethodID(cls, "getFieldName", "()Ljava/lang/String;");
                mids$[mid_getIndexReader_94bbd010] = env->getMethodID(cls, "getIndexReader", "()Lorg/apache/lucene/index/IndexReader;");
                mids$[mid_makeSpanClause_d3aa0332] = env->getMethodID(cls, "makeSpanClause", "()Lorg/apache/lucene/search/spans/SpanQuery;");
                mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
                mids$[mid_addSpanQueryWeighted_3125e560] = env->getMethodID(cls, "addSpanQueryWeighted", "(Lorg/apache/lucene/search/spans/SpanQuery;F)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanNearClauseFactory::SpanNearClauseFactory(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e15223d7, a0.this$, a1.this$, a2.this$)) {}

            void SpanNearClauseFactory::addSpanQuery(const ::org::apache::lucene::search::Query & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addSpanQuery_6e301113], a0.this$);
            }

            void SpanNearClauseFactory::addTermWeighted(const ::org::apache::lucene::index::Term & a0, jfloat a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addTermWeighted_286d05ee], a0.this$, a1);
            }

            void SpanNearClauseFactory::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
            }

            ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory SpanNearClauseFactory::getBasicQueryFactory() const
            {
              return ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory(env->callObjectMethod(this$, mids$[mid_getBasicQueryFactory_d652c3af]));
            }

            ::java::lang::String SpanNearClauseFactory::getFieldName() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldName_14c7b5c5]));
            }

            ::org::apache::lucene::index::IndexReader SpanNearClauseFactory::getIndexReader() const
            {
              return ::org::apache::lucene::index::IndexReader(env->callObjectMethod(this$, mids$[mid_getIndexReader_94bbd010]));
            }

            ::org::apache::lucene::search::spans::SpanQuery SpanNearClauseFactory::makeSpanClause() const
            {
              return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_makeSpanClause_d3aa0332]));
            }

            jint SpanNearClauseFactory::size() const
            {
              return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SpanNearClauseFactory_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanNearClauseFactory_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanNearClauseFactory_init_(t_SpanNearClauseFactory *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SpanNearClauseFactory_addSpanQuery(t_SpanNearClauseFactory *self, PyObject *arg);
            static PyObject *t_SpanNearClauseFactory_addTermWeighted(t_SpanNearClauseFactory *self, PyObject *args);
            static PyObject *t_SpanNearClauseFactory_clear(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_getBasicQueryFactory(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_getFieldName(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_getIndexReader(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_makeSpanClause(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_size(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_get__basicQueryFactory(t_SpanNearClauseFactory *self, void *data);
            static PyObject *t_SpanNearClauseFactory_get__fieldName(t_SpanNearClauseFactory *self, void *data);
            static PyObject *t_SpanNearClauseFactory_get__indexReader(t_SpanNearClauseFactory *self, void *data);
            static PyGetSetDef t_SpanNearClauseFactory__fields_[] = {
              DECLARE_GET_FIELD(t_SpanNearClauseFactory, basicQueryFactory),
              DECLARE_GET_FIELD(t_SpanNearClauseFactory, fieldName),
              DECLARE_GET_FIELD(t_SpanNearClauseFactory, indexReader),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SpanNearClauseFactory__methods_[] = {
              DECLARE_METHOD(t_SpanNearClauseFactory, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanNearClauseFactory, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanNearClauseFactory, addSpanQuery, METH_O),
              DECLARE_METHOD(t_SpanNearClauseFactory, addTermWeighted, METH_VARARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, clear, METH_NOARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, getBasicQueryFactory, METH_NOARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, getFieldName, METH_NOARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, getIndexReader, METH_NOARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, makeSpanClause, METH_NOARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, size, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanNearClauseFactory, t_SpanNearClauseFactory, ::java::lang::Object, SpanNearClauseFactory, t_SpanNearClauseFactory_init_, 0, 0, t_SpanNearClauseFactory__fields_, 0, 0);

            void t_SpanNearClauseFactory::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanNearClauseFactory), module, "SpanNearClauseFactory", 0);
            }

            void t_SpanNearClauseFactory::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanNearClauseFactory).tp_dict, "class_", make_descriptor(SpanNearClauseFactory::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanNearClauseFactory).tp_dict, "wrapfn_", make_descriptor(t_SpanNearClauseFactory::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanNearClauseFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanNearClauseFactory_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanNearClauseFactory::initializeClass, 1)))
                return NULL;
              return t_SpanNearClauseFactory::wrap_Object(SpanNearClauseFactory(((t_SpanNearClauseFactory *) arg)->object.this$));
            }
            static PyObject *t_SpanNearClauseFactory_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanNearClauseFactory::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanNearClauseFactory_init_(t_SpanNearClauseFactory *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a2((jobject) NULL);
              SpanNearClauseFactory object((jobject) NULL);

              if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = SpanNearClauseFactory(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SpanNearClauseFactory_addSpanQuery(t_SpanNearClauseFactory *self, PyObject *arg)
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addSpanQuery(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addSpanQuery", arg);
              return NULL;
            }

            static PyObject *t_SpanNearClauseFactory_addTermWeighted(t_SpanNearClauseFactory *self, PyObject *args)
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jfloat a1;

              if (!parseArgs(args, "kF", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addTermWeighted(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addTermWeighted", args);
              return NULL;
            }

            static PyObject *t_SpanNearClauseFactory_clear(t_SpanNearClauseFactory *self)
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            static PyObject *t_SpanNearClauseFactory_getBasicQueryFactory(t_SpanNearClauseFactory *self)
            {
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory result((jobject) NULL);
              OBJ_CALL(result = self->object.getBasicQueryFactory());
              return ::org::apache::lucene::queryparser::surround::query::t_BasicQueryFactory::wrap_Object(result);
            }

            static PyObject *t_SpanNearClauseFactory_getFieldName(t_SpanNearClauseFactory *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getFieldName());
              return j2p(result);
            }

            static PyObject *t_SpanNearClauseFactory_getIndexReader(t_SpanNearClauseFactory *self)
            {
              ::org::apache::lucene::index::IndexReader result((jobject) NULL);
              OBJ_CALL(result = self->object.getIndexReader());
              return ::org::apache::lucene::index::t_IndexReader::wrap_Object(result);
            }

            static PyObject *t_SpanNearClauseFactory_makeSpanClause(t_SpanNearClauseFactory *self)
            {
              ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.makeSpanClause());
              return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
            }

            static PyObject *t_SpanNearClauseFactory_size(t_SpanNearClauseFactory *self)
            {
              jint result;
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_SpanNearClauseFactory_get__basicQueryFactory(t_SpanNearClauseFactory *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory value((jobject) NULL);
              OBJ_CALL(value = self->object.getBasicQueryFactory());
              return ::org::apache::lucene::queryparser::surround::query::t_BasicQueryFactory::wrap_Object(value);
            }

            static PyObject *t_SpanNearClauseFactory_get__fieldName(t_SpanNearClauseFactory *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getFieldName());
              return j2p(value);
            }

            static PyObject *t_SpanNearClauseFactory_get__indexReader(t_SpanNearClauseFactory *self, void *data)
            {
              ::org::apache::lucene::index::IndexReader value((jobject) NULL);
              OBJ_CALL(value = self->object.getIndexReader());
              return ::org::apache::lucene::index::t_IndexReader::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ThreadInterruptedException.h"
#include "java/lang/Class.h"
#include "java/lang/InterruptedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ThreadInterruptedException::class$ = NULL;
        jmethodID *ThreadInterruptedException::mids$ = NULL;
        bool ThreadInterruptedException::live$ = false;

        jclass ThreadInterruptedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ThreadInterruptedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f201c224] = env->getMethodID(cls, "<init>", "(Ljava/lang/InterruptedException;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ThreadInterruptedException::ThreadInterruptedException(const ::java::lang::InterruptedException & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_f201c224, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ThreadInterruptedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ThreadInterruptedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ThreadInterruptedException_init_(t_ThreadInterruptedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_ThreadInterruptedException__methods_[] = {
          DECLARE_METHOD(t_ThreadInterruptedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ThreadInterruptedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ThreadInterruptedException, t_ThreadInterruptedException, ::java::lang::RuntimeException, ThreadInterruptedException, t_ThreadInterruptedException_init_, 0, 0, 0, 0, 0);

        void t_ThreadInterruptedException::install(PyObject *module)
        {
          installType(&PY_TYPE(ThreadInterruptedException), module, "ThreadInterruptedException", 0);
        }

        void t_ThreadInterruptedException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ThreadInterruptedException).tp_dict, "class_", make_descriptor(ThreadInterruptedException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ThreadInterruptedException).tp_dict, "wrapfn_", make_descriptor(t_ThreadInterruptedException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ThreadInterruptedException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ThreadInterruptedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ThreadInterruptedException::initializeClass, 1)))
            return NULL;
          return t_ThreadInterruptedException::wrap_Object(ThreadInterruptedException(((t_ThreadInterruptedException *) arg)->object.this$));
        }
        static PyObject *t_ThreadInterruptedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ThreadInterruptedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ThreadInterruptedException_init_(t_ThreadInterruptedException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::InterruptedException a0((jobject) NULL);
          ThreadInterruptedException object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::InterruptedException::initializeClass, &a0))
          {
            INT_CALL(object = ThreadInterruptedException(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractAllGroupsCollector.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractAllGroupsCollector::class$ = NULL;
          jmethodID *AbstractAllGroupsCollector::mids$ = NULL;
          bool AbstractAllGroupsCollector::live$ = false;

          jclass AbstractAllGroupsCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractAllGroupsCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_getGroupCount_54c6a179] = env->getMethodID(cls, "getGroupCount", "()I");
              mids$[mid_getGroups_2d2d7de4] = env->getMethodID(cls, "getGroups", "()Ljava/util/Collection;");
              mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractAllGroupsCollector::AbstractAllGroupsCollector() : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean AbstractAllGroupsCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          jint AbstractAllGroupsCollector::getGroupCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getGroupCount_54c6a179]);
          }

          ::java::util::Collection AbstractAllGroupsCollector::getGroups() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getGroups_2d2d7de4]));
          }

          void AbstractAllGroupsCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractAllGroupsCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAllGroupsCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAllGroupsCollector_of_(t_AbstractAllGroupsCollector *self, PyObject *args);
          static int t_AbstractAllGroupsCollector_init_(t_AbstractAllGroupsCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractAllGroupsCollector_acceptsDocsOutOfOrder(t_AbstractAllGroupsCollector *self, PyObject *args);
          static PyObject *t_AbstractAllGroupsCollector_getGroupCount(t_AbstractAllGroupsCollector *self);
          static PyObject *t_AbstractAllGroupsCollector_getGroups(t_AbstractAllGroupsCollector *self);
          static PyObject *t_AbstractAllGroupsCollector_setScorer(t_AbstractAllGroupsCollector *self, PyObject *args);
          static PyObject *t_AbstractAllGroupsCollector_get__groupCount(t_AbstractAllGroupsCollector *self, void *data);
          static PyObject *t_AbstractAllGroupsCollector_get__groups(t_AbstractAllGroupsCollector *self, void *data);
          static int t_AbstractAllGroupsCollector_set__scorer(t_AbstractAllGroupsCollector *self, PyObject *arg, void *data);
          static PyObject *t_AbstractAllGroupsCollector_get__parameters_(t_AbstractAllGroupsCollector *self, void *data);
          static PyGetSetDef t_AbstractAllGroupsCollector__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractAllGroupsCollector, groupCount),
            DECLARE_GET_FIELD(t_AbstractAllGroupsCollector, groups),
            DECLARE_SET_FIELD(t_AbstractAllGroupsCollector, scorer),
            DECLARE_GET_FIELD(t_AbstractAllGroupsCollector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractAllGroupsCollector__methods_[] = {
            DECLARE_METHOD(t_AbstractAllGroupsCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAllGroupsCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAllGroupsCollector, of_, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAllGroupsCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAllGroupsCollector, getGroupCount, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAllGroupsCollector, getGroups, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAllGroupsCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractAllGroupsCollector, t_AbstractAllGroupsCollector, ::org::apache::lucene::search::Collector, AbstractAllGroupsCollector, t_AbstractAllGroupsCollector_init_, 0, 0, t_AbstractAllGroupsCollector__fields_, 0, 0);
          PyObject *t_AbstractAllGroupsCollector::wrap_Object(const AbstractAllGroupsCollector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractAllGroupsCollector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractAllGroupsCollector *self = (t_AbstractAllGroupsCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractAllGroupsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractAllGroupsCollector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractAllGroupsCollector *self = (t_AbstractAllGroupsCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractAllGroupsCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractAllGroupsCollector), module, "AbstractAllGroupsCollector", 0);
          }

          void t_AbstractAllGroupsCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupsCollector).tp_dict, "class_", make_descriptor(AbstractAllGroupsCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupsCollector).tp_dict, "wrapfn_", make_descriptor(t_AbstractAllGroupsCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractAllGroupsCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractAllGroupsCollector::initializeClass, 1)))
              return NULL;
            return t_AbstractAllGroupsCollector::wrap_Object(AbstractAllGroupsCollector(((t_AbstractAllGroupsCollector *) arg)->object.this$));
          }
          static PyObject *t_AbstractAllGroupsCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractAllGroupsCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractAllGroupsCollector_of_(t_AbstractAllGroupsCollector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_AbstractAllGroupsCollector_init_(t_AbstractAllGroupsCollector *self, PyObject *args, PyObject *kwds)
          {
            AbstractAllGroupsCollector object((jobject) NULL);

            INT_CALL(object = AbstractAllGroupsCollector());
            self->object = object;

            return 0;
          }

          static PyObject *t_AbstractAllGroupsCollector_acceptsDocsOutOfOrder(t_AbstractAllGroupsCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractAllGroupsCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_AbstractAllGroupsCollector_getGroupCount(t_AbstractAllGroupsCollector *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getGroupCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_AbstractAllGroupsCollector_getGroups(t_AbstractAllGroupsCollector *self)
          {
            ::java::util::Collection result((jobject) NULL);
            OBJ_CALL(result = self->object.getGroups());
            return ::java::util::t_Collection::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_AbstractAllGroupsCollector_setScorer(t_AbstractAllGroupsCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorer a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractAllGroupsCollector), (PyObject *) self, "setScorer", args, 2);
          }
          static PyObject *t_AbstractAllGroupsCollector_get__parameters_(t_AbstractAllGroupsCollector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_AbstractAllGroupsCollector_get__groupCount(t_AbstractAllGroupsCollector *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getGroupCount());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_AbstractAllGroupsCollector_get__groups(t_AbstractAllGroupsCollector *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getGroups());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static int t_AbstractAllGroupsCollector_set__scorer(t_AbstractAllGroupsCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/SingleTokenTokenStream.h"
#include "org/apache/lucene/analysis/Token.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *SingleTokenTokenStream::class$ = NULL;
          jmethodID *SingleTokenTokenStream::mids$ = NULL;
          bool SingleTokenTokenStream::live$ = false;

          jclass SingleTokenTokenStream::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/SingleTokenTokenStream");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4f6e7002] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Token;)V");
              mids$[mid_getToken_55852c17] = env->getMethodID(cls, "getToken", "()Lorg/apache/lucene/analysis/Token;");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setToken_4f6e7002] = env->getMethodID(cls, "setToken", "(Lorg/apache/lucene/analysis/Token;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SingleTokenTokenStream::SingleTokenTokenStream(const ::org::apache::lucene::analysis::Token & a0) : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_4f6e7002, a0.this$)) {}

          ::org::apache::lucene::analysis::Token SingleTokenTokenStream::getToken() const
          {
            return ::org::apache::lucene::analysis::Token(env->callObjectMethod(this$, mids$[mid_getToken_55852c17]));
          }

          jboolean SingleTokenTokenStream::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void SingleTokenTokenStream::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void SingleTokenTokenStream::setToken(const ::org::apache::lucene::analysis::Token & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setToken_4f6e7002], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_SingleTokenTokenStream_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SingleTokenTokenStream_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SingleTokenTokenStream_init_(t_SingleTokenTokenStream *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SingleTokenTokenStream_getToken(t_SingleTokenTokenStream *self);
          static PyObject *t_SingleTokenTokenStream_incrementToken(t_SingleTokenTokenStream *self, PyObject *args);
          static PyObject *t_SingleTokenTokenStream_reset(t_SingleTokenTokenStream *self, PyObject *args);
          static PyObject *t_SingleTokenTokenStream_setToken(t_SingleTokenTokenStream *self, PyObject *arg);
          static PyObject *t_SingleTokenTokenStream_get__token(t_SingleTokenTokenStream *self, void *data);
          static int t_SingleTokenTokenStream_set__token(t_SingleTokenTokenStream *self, PyObject *arg, void *data);
          static PyGetSetDef t_SingleTokenTokenStream__fields_[] = {
            DECLARE_GETSET_FIELD(t_SingleTokenTokenStream, token),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SingleTokenTokenStream__methods_[] = {
            DECLARE_METHOD(t_SingleTokenTokenStream, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SingleTokenTokenStream, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SingleTokenTokenStream, getToken, METH_NOARGS),
            DECLARE_METHOD(t_SingleTokenTokenStream, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_SingleTokenTokenStream, reset, METH_VARARGS),
            DECLARE_METHOD(t_SingleTokenTokenStream, setToken, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SingleTokenTokenStream, t_SingleTokenTokenStream, ::org::apache::lucene::analysis::TokenStream, SingleTokenTokenStream, t_SingleTokenTokenStream_init_, 0, 0, t_SingleTokenTokenStream__fields_, 0, 0);

          void t_SingleTokenTokenStream::install(PyObject *module)
          {
            installType(&PY_TYPE(SingleTokenTokenStream), module, "SingleTokenTokenStream", 0);
          }

          void t_SingleTokenTokenStream::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SingleTokenTokenStream).tp_dict, "class_", make_descriptor(SingleTokenTokenStream::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SingleTokenTokenStream).tp_dict, "wrapfn_", make_descriptor(t_SingleTokenTokenStream::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SingleTokenTokenStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SingleTokenTokenStream_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SingleTokenTokenStream::initializeClass, 1)))
              return NULL;
            return t_SingleTokenTokenStream::wrap_Object(SingleTokenTokenStream(((t_SingleTokenTokenStream *) arg)->object.this$));
          }
          static PyObject *t_SingleTokenTokenStream_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SingleTokenTokenStream::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SingleTokenTokenStream_init_(t_SingleTokenTokenStream *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::Token a0((jobject) NULL);
            SingleTokenTokenStream object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Token::initializeClass, &a0))
            {
              INT_CALL(object = SingleTokenTokenStream(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SingleTokenTokenStream_getToken(t_SingleTokenTokenStream *self)
          {
            ::org::apache::lucene::analysis::Token result((jobject) NULL);
            OBJ_CALL(result = self->object.getToken());
            return ::org::apache::lucene::analysis::t_Token::wrap_Object(result);
          }

          static PyObject *t_SingleTokenTokenStream_incrementToken(t_SingleTokenTokenStream *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SingleTokenTokenStream), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_SingleTokenTokenStream_reset(t_SingleTokenTokenStream *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SingleTokenTokenStream), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_SingleTokenTokenStream_setToken(t_SingleTokenTokenStream *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::Token a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Token::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setToken(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setToken", arg);
            return NULL;
          }

          static PyObject *t_SingleTokenTokenStream_get__token(t_SingleTokenTokenStream *self, void *data)
          {
            ::org::apache::lucene::analysis::Token value((jobject) NULL);
            OBJ_CALL(value = self->object.getToken());
            return ::org::apache::lucene::analysis::t_Token::wrap_Object(value);
          }
          static int t_SingleTokenTokenStream_set__token(t_SingleTokenTokenStream *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::Token value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Token::initializeClass, &value))
              {
                INT_CALL(self->object.setToken(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "token", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocIdSetIterator::class$ = NULL;
        jmethodID *DocIdSetIterator::mids$ = NULL;
        bool DocIdSetIterator::live$ = false;
        jint DocIdSetIterator::NO_MORE_DOCS = (jint) 0;

        jclass DocIdSetIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocIdSetIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_empty_dc23660c] = env->getStaticMethodID(cls, "empty", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_slowAdvance_39c7bd23] = env->getMethodID(cls, "slowAdvance", "(I)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            NO_MORE_DOCS = env->getStaticIntField(cls, "NO_MORE_DOCS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocIdSetIterator::DocIdSetIterator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint DocIdSetIterator::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jlong DocIdSetIterator::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint DocIdSetIterator::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        DocIdSetIterator DocIdSetIterator::empty()
        {
          jclass cls = env->getClass(initializeClass);
          return DocIdSetIterator(env->callStaticObjectMethod(cls, mids$[mid_empty_dc23660c]));
        }

        jint DocIdSetIterator::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocIdSetIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocIdSetIterator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocIdSetIterator_init_(t_DocIdSetIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocIdSetIterator_advance(t_DocIdSetIterator *self, PyObject *arg);
        static PyObject *t_DocIdSetIterator_cost(t_DocIdSetIterator *self);
        static PyObject *t_DocIdSetIterator_docID(t_DocIdSetIterator *self);
        static PyObject *t_DocIdSetIterator_empty(PyTypeObject *type);
        static PyObject *t_DocIdSetIterator_nextDoc(t_DocIdSetIterator *self);

        static PyMethodDef t_DocIdSetIterator__methods_[] = {
          DECLARE_METHOD(t_DocIdSetIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdSetIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdSetIterator, advance, METH_O),
          DECLARE_METHOD(t_DocIdSetIterator, cost, METH_NOARGS),
          DECLARE_METHOD(t_DocIdSetIterator, docID, METH_NOARGS),
          DECLARE_METHOD(t_DocIdSetIterator, empty, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocIdSetIterator, nextDoc, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocIdSetIterator, t_DocIdSetIterator, ::java::lang::Object, DocIdSetIterator, t_DocIdSetIterator_init_, 0, 0, 0, 0, 0);

        void t_DocIdSetIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(DocIdSetIterator), module, "DocIdSetIterator", 0);
        }

        void t_DocIdSetIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocIdSetIterator).tp_dict, "class_", make_descriptor(DocIdSetIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocIdSetIterator).tp_dict, "wrapfn_", make_descriptor(t_DocIdSetIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocIdSetIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DocIdSetIterator::initializeClass);
          PyDict_SetItemString(PY_TYPE(DocIdSetIterator).tp_dict, "NO_MORE_DOCS", make_descriptor(DocIdSetIterator::NO_MORE_DOCS));
        }

        static PyObject *t_DocIdSetIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocIdSetIterator::initializeClass, 1)))
            return NULL;
          return t_DocIdSetIterator::wrap_Object(DocIdSetIterator(((t_DocIdSetIterator *) arg)->object.this$));
        }
        static PyObject *t_DocIdSetIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocIdSetIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocIdSetIterator_init_(t_DocIdSetIterator *self, PyObject *args, PyObject *kwds)
        {
          DocIdSetIterator object((jobject) NULL);

          INT_CALL(object = DocIdSetIterator());
          self->object = object;

          return 0;
        }

        static PyObject *t_DocIdSetIterator_advance(t_DocIdSetIterator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "advance", arg);
          return NULL;
        }

        static PyObject *t_DocIdSetIterator_cost(t_DocIdSetIterator *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.cost());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DocIdSetIterator_docID(t_DocIdSetIterator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.docID());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DocIdSetIterator_empty(PyTypeObject *type)
        {
          DocIdSetIterator result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::DocIdSetIterator::empty());
          return t_DocIdSetIterator::wrap_Object(result);
        }

        static PyObject *t_DocIdSetIterator_nextDoc(t_DocIdSetIterator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.nextDoc());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/BoundaryScanner.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *ScoreOrderFragmentsBuilder::class$ = NULL;
          jmethodID *ScoreOrderFragmentsBuilder::mids$ = NULL;
          bool ScoreOrderFragmentsBuilder::live$ = false;

          jclass ScoreOrderFragmentsBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_7f580ee7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/vectorhighlight/BoundaryScanner;)V");
              mids$[mid_init$_60fab432] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_init$_b03db8ab] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/vectorhighlight/BoundaryScanner;)V");
              mids$[mid_getWeightedFragInfoList_4f378251] = env->getMethodID(cls, "getWeightedFragInfoList", "(Ljava/util/List;)Ljava/util/List;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScoreOrderFragmentsBuilder::ScoreOrderFragmentsBuilder() : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ScoreOrderFragmentsBuilder::ScoreOrderFragmentsBuilder(const ::org::apache::lucene::search::vectorhighlight::BoundaryScanner & a0) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_7f580ee7, a0.this$)) {}

          ScoreOrderFragmentsBuilder::ScoreOrderFragmentsBuilder(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_60fab432, a0.this$, a1.this$)) {}

          ScoreOrderFragmentsBuilder::ScoreOrderFragmentsBuilder(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::search::vectorhighlight::BoundaryScanner & a2) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_b03db8ab, a0.this$, a1.this$, a2.this$)) {}

          ::java::util::List ScoreOrderFragmentsBuilder::getWeightedFragInfoList(const ::java::util::List & a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getWeightedFragInfoList_4f378251], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder$ScoreComparator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_ScoreOrderFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScoreOrderFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScoreOrderFragmentsBuilder_init_(t_ScoreOrderFragmentsBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScoreOrderFragmentsBuilder_getWeightedFragInfoList(t_ScoreOrderFragmentsBuilder *self, PyObject *args);

          static PyMethodDef t_ScoreOrderFragmentsBuilder__methods_[] = {
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder, getWeightedFragInfoList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ScoreOrderFragmentsBuilder, t_ScoreOrderFragmentsBuilder, ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder, ScoreOrderFragmentsBuilder, t_ScoreOrderFragmentsBuilder_init_, 0, 0, 0, 0, 0);

          void t_ScoreOrderFragmentsBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(ScoreOrderFragmentsBuilder), module, "ScoreOrderFragmentsBuilder", 0);
            PyDict_SetItemString(PY_TYPE(ScoreOrderFragmentsBuilder).tp_dict, "ScoreComparator", make_descriptor(&PY_TYPE(ScoreOrderFragmentsBuilder$ScoreComparator)));
          }

          void t_ScoreOrderFragmentsBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ScoreOrderFragmentsBuilder).tp_dict, "class_", make_descriptor(ScoreOrderFragmentsBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ScoreOrderFragmentsBuilder).tp_dict, "wrapfn_", make_descriptor(t_ScoreOrderFragmentsBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ScoreOrderFragmentsBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ScoreOrderFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScoreOrderFragmentsBuilder::initializeClass, 1)))
              return NULL;
            return t_ScoreOrderFragmentsBuilder::wrap_Object(ScoreOrderFragmentsBuilder(((t_ScoreOrderFragmentsBuilder *) arg)->object.this$));
          }
          static PyObject *t_ScoreOrderFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScoreOrderFragmentsBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScoreOrderFragmentsBuilder_init_(t_ScoreOrderFragmentsBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ScoreOrderFragmentsBuilder object((jobject) NULL);

                INT_CALL(object = ScoreOrderFragmentsBuilder());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::search::vectorhighlight::BoundaryScanner a0((jobject) NULL);
                ScoreOrderFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::vectorhighlight::BoundaryScanner::initializeClass, &a0))
                {
                  INT_CALL(object = ScoreOrderFragmentsBuilder(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                ScoreOrderFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "[s[s", &a0, &a1))
                {
                  INT_CALL(object = ScoreOrderFragmentsBuilder(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::BoundaryScanner a2((jobject) NULL);
                ScoreOrderFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "[s[sk", ::org::apache::lucene::search::vectorhighlight::BoundaryScanner::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ScoreOrderFragmentsBuilder(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ScoreOrderFragmentsBuilder_getWeightedFragInfoList(t_ScoreOrderFragmentsBuilder *self, PyObject *args)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.getWeightedFragInfoList(a0));
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldFragList$WeightedFragInfo));
            }

            return callSuper(&PY_TYPE(ScoreOrderFragmentsBuilder), (PyObject *) self, "getWeightedFragInfoList", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/PhraseQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/PhraseQuery.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *PhraseQueryNodeBuilder::class$ = NULL;
              jmethodID *PhraseQueryNodeBuilder::mids$ = NULL;
              bool PhraseQueryNodeBuilder::live$ = false;

              jclass PhraseQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/PhraseQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_20a87818] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/PhraseQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PhraseQueryNodeBuilder::PhraseQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::PhraseQuery PhraseQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::PhraseQuery(env->callObjectMethod(this$, mids$[mid_build_20a87818], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_PhraseQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PhraseQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PhraseQueryNodeBuilder_init_(t_PhraseQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PhraseQueryNodeBuilder_build(t_PhraseQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_PhraseQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_PhraseQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PhraseQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PhraseQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PhraseQueryNodeBuilder, t_PhraseQueryNodeBuilder, ::java::lang::Object, PhraseQueryNodeBuilder, t_PhraseQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_PhraseQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(PhraseQueryNodeBuilder), module, "PhraseQueryNodeBuilder", 0);
              }

              void t_PhraseQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PhraseQueryNodeBuilder).tp_dict, "class_", make_descriptor(PhraseQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PhraseQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_PhraseQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PhraseQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PhraseQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PhraseQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_PhraseQueryNodeBuilder::wrap_Object(PhraseQueryNodeBuilder(((t_PhraseQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_PhraseQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PhraseQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PhraseQueryNodeBuilder_init_(t_PhraseQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                PhraseQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = PhraseQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_PhraseQueryNodeBuilder_build(t_PhraseQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::PhraseQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_PhraseQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/IrishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *IrishStemmer::class$ = NULL;
        jmethodID *IrishStemmer::mids$ = NULL;
        bool IrishStemmer::live$ = false;

        jclass IrishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/IrishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IrishStemmer::IrishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean IrishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint IrishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean IrishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_IrishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IrishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IrishStemmer_init_(t_IrishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IrishStemmer_equals(t_IrishStemmer *self, PyObject *args);
        static PyObject *t_IrishStemmer_hashCode(t_IrishStemmer *self, PyObject *args);
        static PyObject *t_IrishStemmer_stem(t_IrishStemmer *self, PyObject *args);

        static PyMethodDef t_IrishStemmer__methods_[] = {
          DECLARE_METHOD(t_IrishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IrishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IrishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_IrishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IrishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IrishStemmer, t_IrishStemmer, ::org::tartarus::snowball::SnowballProgram, IrishStemmer, t_IrishStemmer_init_, 0, 0, 0, 0, 0);

        void t_IrishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(IrishStemmer), module, "IrishStemmer", 0);
        }

        void t_IrishStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IrishStemmer).tp_dict, "class_", make_descriptor(IrishStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IrishStemmer).tp_dict, "wrapfn_", make_descriptor(t_IrishStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IrishStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IrishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IrishStemmer::initializeClass, 1)))
            return NULL;
          return t_IrishStemmer::wrap_Object(IrishStemmer(((t_IrishStemmer *) arg)->object.this$));
        }
        static PyObject *t_IrishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IrishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IrishStemmer_init_(t_IrishStemmer *self, PyObject *args, PyObject *kwds)
        {
          IrishStemmer object((jobject) NULL);

          INT_CALL(object = IrishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_IrishStemmer_equals(t_IrishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(IrishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IrishStemmer_hashCode(t_IrishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IrishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IrishStemmer_stem(t_IrishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(IrishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/WildcardQueryNodeBuilder.h"
#include "org/apache/lucene/search/WildcardQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *WildcardQueryNodeBuilder::class$ = NULL;
              jmethodID *WildcardQueryNodeBuilder::mids$ = NULL;
              bool WildcardQueryNodeBuilder::live$ = false;

              jclass WildcardQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/WildcardQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_143b8b5f] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/WildcardQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              WildcardQueryNodeBuilder::WildcardQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::WildcardQuery WildcardQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::WildcardQuery(env->callObjectMethod(this$, mids$[mid_build_143b8b5f], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_WildcardQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_WildcardQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_WildcardQueryNodeBuilder_init_(t_WildcardQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_WildcardQueryNodeBuilder_build(t_WildcardQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_WildcardQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_WildcardQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_WildcardQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_WildcardQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(WildcardQueryNodeBuilder, t_WildcardQueryNodeBuilder, ::java::lang::Object, WildcardQueryNodeBuilder, t_WildcardQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_WildcardQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(WildcardQueryNodeBuilder), module, "WildcardQueryNodeBuilder", 0);
              }

              void t_WildcardQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(WildcardQueryNodeBuilder).tp_dict, "class_", make_descriptor(WildcardQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(WildcardQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_WildcardQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(WildcardQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_WildcardQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, WildcardQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_WildcardQueryNodeBuilder::wrap_Object(WildcardQueryNodeBuilder(((t_WildcardQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_WildcardQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, WildcardQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_WildcardQueryNodeBuilder_init_(t_WildcardQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                WildcardQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = WildcardQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_WildcardQueryNodeBuilder_build(t_WildcardQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::WildcardQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_WildcardQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/AtomicReader$CoreClosedListener.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *AtomicReader$CoreClosedListener::class$ = NULL;
        jmethodID *AtomicReader$CoreClosedListener::mids$ = NULL;
        bool AtomicReader$CoreClosedListener::live$ = false;

        jclass AtomicReader$CoreClosedListener::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/AtomicReader$CoreClosedListener");

            mids$ = new jmethodID[max_mid];
            mids$[mid_onClose_290588ee] = env->getMethodID(cls, "onClose", "(Ljava/lang/Object;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void AtomicReader$CoreClosedListener::onClose(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onClose_290588ee], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_AtomicReader$CoreClosedListener_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AtomicReader$CoreClosedListener_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AtomicReader$CoreClosedListener_onClose(t_AtomicReader$CoreClosedListener *self, PyObject *arg);

        static PyMethodDef t_AtomicReader$CoreClosedListener__methods_[] = {
          DECLARE_METHOD(t_AtomicReader$CoreClosedListener, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AtomicReader$CoreClosedListener, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AtomicReader$CoreClosedListener, onClose, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AtomicReader$CoreClosedListener, t_AtomicReader$CoreClosedListener, ::java::lang::Object, AtomicReader$CoreClosedListener, abstract_init, 0, 0, 0, 0, 0);

        void t_AtomicReader$CoreClosedListener::install(PyObject *module)
        {
          installType(&PY_TYPE(AtomicReader$CoreClosedListener), module, "AtomicReader$CoreClosedListener", 0);
        }

        void t_AtomicReader$CoreClosedListener::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AtomicReader$CoreClosedListener).tp_dict, "class_", make_descriptor(AtomicReader$CoreClosedListener::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AtomicReader$CoreClosedListener).tp_dict, "wrapfn_", make_descriptor(t_AtomicReader$CoreClosedListener::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AtomicReader$CoreClosedListener).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AtomicReader$CoreClosedListener_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AtomicReader$CoreClosedListener::initializeClass, 1)))
            return NULL;
          return t_AtomicReader$CoreClosedListener::wrap_Object(AtomicReader$CoreClosedListener(((t_AtomicReader$CoreClosedListener *) arg)->object.this$));
        }
        static PyObject *t_AtomicReader$CoreClosedListener_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AtomicReader$CoreClosedListener::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_AtomicReader$CoreClosedListener_onClose(t_AtomicReader$CoreClosedListener *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(self->object.onClose(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "onClose", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/br/BrazilianStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {

          ::java::lang::Class *BrazilianStemFilter::class$ = NULL;
          jmethodID *BrazilianStemFilter::mids$ = NULL;
          bool BrazilianStemFilter::live$ = false;

          jclass BrazilianStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/br/BrazilianStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BrazilianStemFilter::BrazilianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean BrazilianStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {
          static PyObject *t_BrazilianStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BrazilianStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BrazilianStemFilter_init_(t_BrazilianStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BrazilianStemFilter_incrementToken(t_BrazilianStemFilter *self, PyObject *args);

          static PyMethodDef t_BrazilianStemFilter__methods_[] = {
            DECLARE_METHOD(t_BrazilianStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BrazilianStemFilter, t_BrazilianStemFilter, ::org::apache::lucene::analysis::TokenFilter, BrazilianStemFilter, t_BrazilianStemFilter_init_, 0, 0, 0, 0, 0);

          void t_BrazilianStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(BrazilianStemFilter), module, "BrazilianStemFilter", 0);
          }

          void t_BrazilianStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BrazilianStemFilter).tp_dict, "class_", make_descriptor(BrazilianStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BrazilianStemFilter).tp_dict, "wrapfn_", make_descriptor(t_BrazilianStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BrazilianStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BrazilianStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BrazilianStemFilter::initializeClass, 1)))
              return NULL;
            return t_BrazilianStemFilter::wrap_Object(BrazilianStemFilter(((t_BrazilianStemFilter *) arg)->object.this$));
          }
          static PyObject *t_BrazilianStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BrazilianStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BrazilianStemFilter_init_(t_BrazilianStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            BrazilianStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = BrazilianStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BrazilianStemFilter_incrementToken(t_BrazilianStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(BrazilianStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *OrdinalsReader$OrdinalsSegmentReader::class$ = NULL;
          jmethodID *OrdinalsReader$OrdinalsSegmentReader::mids$ = NULL;
          bool OrdinalsReader$OrdinalsSegmentReader::live$ = false;

          jclass OrdinalsReader$OrdinalsSegmentReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_get_e6e32052] = env->getMethodID(cls, "get", "(ILorg/apache/lucene/util/IntsRef;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OrdinalsReader$OrdinalsSegmentReader::OrdinalsReader$OrdinalsSegmentReader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void OrdinalsReader$OrdinalsSegmentReader::get(jint a0, const ::org::apache::lucene::util::IntsRef & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_get_e6e32052], a0, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OrdinalsReader$OrdinalsSegmentReader_init_(t_OrdinalsReader$OrdinalsSegmentReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_get(t_OrdinalsReader$OrdinalsSegmentReader *self, PyObject *args);

          static PyMethodDef t_OrdinalsReader$OrdinalsSegmentReader__methods_[] = {
            DECLARE_METHOD(t_OrdinalsReader$OrdinalsSegmentReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdinalsReader$OrdinalsSegmentReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdinalsReader$OrdinalsSegmentReader, get, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(OrdinalsReader$OrdinalsSegmentReader, t_OrdinalsReader$OrdinalsSegmentReader, ::java::lang::Object, OrdinalsReader$OrdinalsSegmentReader, t_OrdinalsReader$OrdinalsSegmentReader_init_, 0, 0, 0, 0, 0);

          void t_OrdinalsReader$OrdinalsSegmentReader::install(PyObject *module)
          {
            installType(&PY_TYPE(OrdinalsReader$OrdinalsSegmentReader), module, "OrdinalsReader$OrdinalsSegmentReader", 0);
          }

          void t_OrdinalsReader$OrdinalsSegmentReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(OrdinalsReader$OrdinalsSegmentReader).tp_dict, "class_", make_descriptor(OrdinalsReader$OrdinalsSegmentReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(OrdinalsReader$OrdinalsSegmentReader).tp_dict, "wrapfn_", make_descriptor(t_OrdinalsReader$OrdinalsSegmentReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(OrdinalsReader$OrdinalsSegmentReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OrdinalsReader$OrdinalsSegmentReader::initializeClass, 1)))
              return NULL;
            return t_OrdinalsReader$OrdinalsSegmentReader::wrap_Object(OrdinalsReader$OrdinalsSegmentReader(((t_OrdinalsReader$OrdinalsSegmentReader *) arg)->object.this$));
          }
          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OrdinalsReader$OrdinalsSegmentReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OrdinalsReader$OrdinalsSegmentReader_init_(t_OrdinalsReader$OrdinalsSegmentReader *self, PyObject *args, PyObject *kwds)
          {
            OrdinalsReader$OrdinalsSegmentReader object((jobject) NULL);

            INT_CALL(object = OrdinalsReader$OrdinalsSegmentReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_get(t_OrdinalsReader$OrdinalsSegmentReader *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::util::IntsRef a1((jobject) NULL);

            if (!parseArgs(args, "Ik", ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.get(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "get", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *IndexOutOfBoundsException::class$ = NULL;
    jmethodID *IndexOutOfBoundsException::mids$ = NULL;
    bool IndexOutOfBoundsException::live$ = false;

    jclass IndexOutOfBoundsException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/IndexOutOfBoundsException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    IndexOutOfBoundsException::IndexOutOfBoundsException() : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    IndexOutOfBoundsException::IndexOutOfBoundsException(const ::java::lang::String & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_IndexOutOfBoundsException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_IndexOutOfBoundsException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_IndexOutOfBoundsException_init_(t_IndexOutOfBoundsException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_IndexOutOfBoundsException__methods_[] = {
      DECLARE_METHOD(t_IndexOutOfBoundsException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_IndexOutOfBoundsException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(IndexOutOfBoundsException, t_IndexOutOfBoundsException, ::java::lang::RuntimeException, IndexOutOfBoundsException, t_IndexOutOfBoundsException_init_, 0, 0, 0, 0, 0);

    void t_IndexOutOfBoundsException::install(PyObject *module)
    {
      installType(&PY_TYPE(IndexOutOfBoundsException), module, "IndexOutOfBoundsException", 0);
    }

    void t_IndexOutOfBoundsException::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(IndexOutOfBoundsException).tp_dict, "class_", make_descriptor(IndexOutOfBoundsException::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(IndexOutOfBoundsException).tp_dict, "wrapfn_", make_descriptor(t_IndexOutOfBoundsException::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(IndexOutOfBoundsException).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_IndexOutOfBoundsException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, IndexOutOfBoundsException::initializeClass, 1)))
        return NULL;
      return t_IndexOutOfBoundsException::wrap_Object(IndexOutOfBoundsException(((t_IndexOutOfBoundsException *) arg)->object.this$));
    }
    static PyObject *t_IndexOutOfBoundsException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, IndexOutOfBoundsException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_IndexOutOfBoundsException_init_(t_IndexOutOfBoundsException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          IndexOutOfBoundsException object((jobject) NULL);

          INT_CALL(object = IndexOutOfBoundsException());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          IndexOutOfBoundsException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = IndexOutOfBoundsException(a0));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/BoostedQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *BoostedQuery::class$ = NULL;
          jmethodID *BoostedQuery::mids$ = NULL;
          bool BoostedQuery::live$ = false;

          jclass BoostedQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/BoostedQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_59d41d93] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/queries/function/ValueSource;)V");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
              mids$[mid_getValueSource_b62b6193] = env->getMethodID(cls, "getValueSource", "()Lorg/apache/lucene/queries/function/ValueSource;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BoostedQuery::BoostedQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_59d41d93, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::Weight BoostedQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          jboolean BoostedQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void BoostedQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          ::org::apache::lucene::search::Query BoostedQuery::getQuery() const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
          }

          ::org::apache::lucene::queries::function::ValueSource BoostedQuery::getValueSource() const
          {
            return ::org::apache::lucene::queries::function::ValueSource(env->callObjectMethod(this$, mids$[mid_getValueSource_b62b6193]));
          }

          jint BoostedQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query BoostedQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String BoostedQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_BoostedQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BoostedQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BoostedQuery_init_(t_BoostedQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BoostedQuery_createWeight(t_BoostedQuery *self, PyObject *args);
          static PyObject *t_BoostedQuery_equals(t_BoostedQuery *self, PyObject *args);
          static PyObject *t_BoostedQuery_extractTerms(t_BoostedQuery *self, PyObject *args);
          static PyObject *t_BoostedQuery_getQuery(t_BoostedQuery *self);
          static PyObject *t_BoostedQuery_getValueSource(t_BoostedQuery *self);
          static PyObject *t_BoostedQuery_hashCode(t_BoostedQuery *self, PyObject *args);
          static PyObject *t_BoostedQuery_rewrite(t_BoostedQuery *self, PyObject *args);
          static PyObject *t_BoostedQuery_toString(t_BoostedQuery *self, PyObject *args);
          static PyObject *t_BoostedQuery_get__query(t_BoostedQuery *self, void *data);
          static PyObject *t_BoostedQuery_get__valueSource(t_BoostedQuery *self, void *data);
          static PyGetSetDef t_BoostedQuery__fields_[] = {
            DECLARE_GET_FIELD(t_BoostedQuery, query),
            DECLARE_GET_FIELD(t_BoostedQuery, valueSource),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BoostedQuery__methods_[] = {
            DECLARE_METHOD(t_BoostedQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BoostedQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BoostedQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_BoostedQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_BoostedQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_BoostedQuery, getQuery, METH_NOARGS),
            DECLARE_METHOD(t_BoostedQuery, getValueSource, METH_NOARGS),
            DECLARE_METHOD(t_BoostedQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_BoostedQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_BoostedQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BoostedQuery, t_BoostedQuery, ::org::apache::lucene::search::Query, BoostedQuery, t_BoostedQuery_init_, 0, 0, t_BoostedQuery__fields_, 0, 0);

          void t_BoostedQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(BoostedQuery), module, "BoostedQuery", 0);
          }

          void t_BoostedQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BoostedQuery).tp_dict, "class_", make_descriptor(BoostedQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BoostedQuery).tp_dict, "wrapfn_", make_descriptor(t_BoostedQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BoostedQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BoostedQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BoostedQuery::initializeClass, 1)))
              return NULL;
            return t_BoostedQuery::wrap_Object(BoostedQuery(((t_BoostedQuery *) arg)->object.this$));
          }
          static PyObject *t_BoostedQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BoostedQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BoostedQuery_init_(t_BoostedQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
            BoostedQuery object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
            {
              INT_CALL(object = BoostedQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BoostedQuery_createWeight(t_BoostedQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BoostedQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_BoostedQuery_equals(t_BoostedQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(BoostedQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_BoostedQuery_extractTerms(t_BoostedQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BoostedQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_BoostedQuery_getQuery(t_BoostedQuery *self)
          {
            ::org::apache::lucene::search::Query result((jobject) NULL);
            OBJ_CALL(result = self->object.getQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          static PyObject *t_BoostedQuery_getValueSource(t_BoostedQuery *self)
          {
            ::org::apache::lucene::queries::function::ValueSource result((jobject) NULL);
            OBJ_CALL(result = self->object.getValueSource());
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(result);
          }

          static PyObject *t_BoostedQuery_hashCode(t_BoostedQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(BoostedQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_BoostedQuery_rewrite(t_BoostedQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BoostedQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_BoostedQuery_toString(t_BoostedQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BoostedQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_BoostedQuery_get__query(t_BoostedQuery *self, void *data)
          {
            ::org::apache::lucene::search::Query value((jobject) NULL);
            OBJ_CALL(value = self->object.getQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(value);
          }

          static PyObject *t_BoostedQuery_get__valueSource(t_BoostedQuery *self, void *data)
          {
            ::org::apache::lucene::queries::function::ValueSource value((jobject) NULL);
            OBJ_CALL(value = self->object.getValueSource());
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OfflineSorter$ByteSequencesWriter.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/DataOutput.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OfflineSorter$ByteSequencesWriter::class$ = NULL;
        jmethodID *OfflineSorter$ByteSequencesWriter::mids$ = NULL;
        bool OfflineSorter$ByteSequencesWriter::live$ = false;

        jclass OfflineSorter$ByteSequencesWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OfflineSorter$ByteSequencesWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
            mids$[mid_init$_cfb051e6] = env->getMethodID(cls, "<init>", "(Ljava/io/DataOutput;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_write_7bc03dc4] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_write_49b4f12b] = env->getMethodID(cls, "write", "([B)V");
            mids$[mid_write_86f4435f] = env->getMethodID(cls, "write", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OfflineSorter$ByteSequencesWriter::OfflineSorter$ByteSequencesWriter(const ::java::io::File & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        OfflineSorter$ByteSequencesWriter::OfflineSorter$ByteSequencesWriter(const ::java::io::DataOutput & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cfb051e6, a0.this$)) {}

        void OfflineSorter$ByteSequencesWriter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void OfflineSorter$ByteSequencesWriter::write(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_write_7bc03dc4], a0.this$);
        }

        void OfflineSorter$ByteSequencesWriter::write(const JArray< jbyte > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_write_49b4f12b], a0.this$);
        }

        void OfflineSorter$ByteSequencesWriter::write(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_write_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OfflineSorter$ByteSequencesWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter$ByteSequencesWriter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OfflineSorter$ByteSequencesWriter_init_(t_OfflineSorter$ByteSequencesWriter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OfflineSorter$ByteSequencesWriter_close(t_OfflineSorter$ByteSequencesWriter *self);
        static PyObject *t_OfflineSorter$ByteSequencesWriter_write(t_OfflineSorter$ByteSequencesWriter *self, PyObject *args);

        static PyMethodDef t_OfflineSorter$ByteSequencesWriter__methods_[] = {
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesWriter, close, METH_NOARGS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesWriter, write, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OfflineSorter$ByteSequencesWriter, t_OfflineSorter$ByteSequencesWriter, ::java::lang::Object, OfflineSorter$ByteSequencesWriter, t_OfflineSorter$ByteSequencesWriter_init_, 0, 0, 0, 0, 0);

        void t_OfflineSorter$ByteSequencesWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(OfflineSorter$ByteSequencesWriter), module, "OfflineSorter$ByteSequencesWriter", 0);
        }

        void t_OfflineSorter$ByteSequencesWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OfflineSorter$ByteSequencesWriter).tp_dict, "class_", make_descriptor(OfflineSorter$ByteSequencesWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$ByteSequencesWriter).tp_dict, "wrapfn_", make_descriptor(t_OfflineSorter$ByteSequencesWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$ByteSequencesWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OfflineSorter$ByteSequencesWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OfflineSorter$ByteSequencesWriter::initializeClass, 1)))
            return NULL;
          return t_OfflineSorter$ByteSequencesWriter::wrap_Object(OfflineSorter$ByteSequencesWriter(((t_OfflineSorter$ByteSequencesWriter *) arg)->object.this$));
        }
        static PyObject *t_OfflineSorter$ByteSequencesWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OfflineSorter$ByteSequencesWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OfflineSorter$ByteSequencesWriter_init_(t_OfflineSorter$ByteSequencesWriter *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::File a0((jobject) NULL);
              OfflineSorter$ByteSequencesWriter object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = OfflineSorter$ByteSequencesWriter(a0));
                self->object = object;
                break;
              }
            }
            {
              ::java::io::DataOutput a0((jobject) NULL);
              OfflineSorter$ByteSequencesWriter object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::DataOutput::initializeClass, &a0))
              {
                INT_CALL(object = OfflineSorter$ByteSequencesWriter(a0));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OfflineSorter$ByteSequencesWriter_close(t_OfflineSorter$ByteSequencesWriter *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_OfflineSorter$ByteSequencesWriter_write(t_OfflineSorter$ByteSequencesWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.write(a0));
                Py_RETURN_NONE;
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(self->object.write(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.write(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "write", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace perfield {

          ::java::lang::Class *PerFieldPostingsFormat::class$ = NULL;
          jmethodID *PerFieldPostingsFormat::mids$ = NULL;
          bool PerFieldPostingsFormat::live$ = false;
          ::java::lang::String *PerFieldPostingsFormat::PER_FIELD_FORMAT_KEY = NULL;
          ::java::lang::String *PerFieldPostingsFormat::PER_FIELD_NAME = NULL;
          ::java::lang::String *PerFieldPostingsFormat::PER_FIELD_SUFFIX_KEY = NULL;

          jclass PerFieldPostingsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/perfield/PerFieldPostingsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_a15793c6] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
              mids$[mid_fieldsProducer_c86c62bc] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
              mids$[mid_getPostingsFormatForField_19d2f1c6] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PER_FIELD_FORMAT_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_FORMAT_KEY", "Ljava/lang/String;"));
              PER_FIELD_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_NAME", "Ljava/lang/String;"));
              PER_FIELD_SUFFIX_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_SUFFIX_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PerFieldPostingsFormat::PerFieldPostingsFormat() : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::FieldsConsumer PerFieldPostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_a15793c6], a0.this$));
          }

          ::org::apache::lucene::codecs::FieldsProducer PerFieldPostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c86c62bc], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsFormat PerFieldPostingsFormat::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_19d2f1c6], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace perfield {
          static PyObject *t_PerFieldPostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PerFieldPostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PerFieldPostingsFormat_init_(t_PerFieldPostingsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PerFieldPostingsFormat_fieldsConsumer(t_PerFieldPostingsFormat *self, PyObject *args);
          static PyObject *t_PerFieldPostingsFormat_fieldsProducer(t_PerFieldPostingsFormat *self, PyObject *args);
          static PyObject *t_PerFieldPostingsFormat_getPostingsFormatForField(t_PerFieldPostingsFormat *self, PyObject *arg);

          static PyMethodDef t_PerFieldPostingsFormat__methods_[] = {
            DECLARE_METHOD(t_PerFieldPostingsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldPostingsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldPostingsFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_PerFieldPostingsFormat, fieldsProducer, METH_VARARGS),
            DECLARE_METHOD(t_PerFieldPostingsFormat, getPostingsFormatForField, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PerFieldPostingsFormat, t_PerFieldPostingsFormat, ::org::apache::lucene::codecs::PostingsFormat, PerFieldPostingsFormat, t_PerFieldPostingsFormat_init_, 0, 0, 0, 0, 0);

          void t_PerFieldPostingsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(PerFieldPostingsFormat), module, "PerFieldPostingsFormat", 0);
          }

          void t_PerFieldPostingsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PerFieldPostingsFormat).tp_dict, "class_", make_descriptor(PerFieldPostingsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PerFieldPostingsFormat).tp_dict, "wrapfn_", make_descriptor(t_PerFieldPostingsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PerFieldPostingsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PerFieldPostingsFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(PerFieldPostingsFormat).tp_dict, "PER_FIELD_FORMAT_KEY", make_descriptor(j2p(*PerFieldPostingsFormat::PER_FIELD_FORMAT_KEY)));
            PyDict_SetItemString(PY_TYPE(PerFieldPostingsFormat).tp_dict, "PER_FIELD_NAME", make_descriptor(j2p(*PerFieldPostingsFormat::PER_FIELD_NAME)));
            PyDict_SetItemString(PY_TYPE(PerFieldPostingsFormat).tp_dict, "PER_FIELD_SUFFIX_KEY", make_descriptor(j2p(*PerFieldPostingsFormat::PER_FIELD_SUFFIX_KEY)));
          }

          static PyObject *t_PerFieldPostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PerFieldPostingsFormat::initializeClass, 1)))
              return NULL;
            return t_PerFieldPostingsFormat::wrap_Object(PerFieldPostingsFormat(((t_PerFieldPostingsFormat *) arg)->object.this$));
          }
          static PyObject *t_PerFieldPostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PerFieldPostingsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PerFieldPostingsFormat_init_(t_PerFieldPostingsFormat *self, PyObject *args, PyObject *kwds)
          {
            PerFieldPostingsFormat object((jobject) NULL);

            INT_CALL(object = PerFieldPostingsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_PerFieldPostingsFormat_fieldsConsumer(t_PerFieldPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PerFieldPostingsFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_PerFieldPostingsFormat_fieldsProducer(t_PerFieldPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PerFieldPostingsFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }

          static PyObject *t_PerFieldPostingsFormat_getPostingsFormatForField(t_PerFieldPostingsFormat *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *TokenFilter::class$ = NULL;
        jmethodID *TokenFilter::mids$ = NULL;
        bool TokenFilter::live$ = false;

        jclass TokenFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/TokenFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TokenFilter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void TokenFilter::end() const
        {
          env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
        }

        void TokenFilter::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_TokenFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TokenFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TokenFilter_close(t_TokenFilter *self, PyObject *args);
        static PyObject *t_TokenFilter_end(t_TokenFilter *self, PyObject *args);
        static PyObject *t_TokenFilter_reset(t_TokenFilter *self, PyObject *args);

        static PyMethodDef t_TokenFilter__methods_[] = {
          DECLARE_METHOD(t_TokenFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenFilter, close, METH_VARARGS),
          DECLARE_METHOD(t_TokenFilter, end, METH_VARARGS),
          DECLARE_METHOD(t_TokenFilter, reset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TokenFilter, t_TokenFilter, ::org::apache::lucene::analysis::TokenStream, TokenFilter, abstract_init, 0, 0, 0, 0, 0);

        void t_TokenFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(TokenFilter), module, "TokenFilter", 0);
        }

        void t_TokenFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TokenFilter).tp_dict, "class_", make_descriptor(TokenFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TokenFilter).tp_dict, "wrapfn_", make_descriptor(t_TokenFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TokenFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TokenFilter::initializeClass, 1)))
            return NULL;
          return t_TokenFilter::wrap_Object(TokenFilter(((t_TokenFilter *) arg)->object.this$));
        }
        static PyObject *t_TokenFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TokenFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TokenFilter_close(t_TokenFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TokenFilter), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_TokenFilter_end(t_TokenFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.end());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TokenFilter), (PyObject *) self, "end", args, 2);
        }

        static PyObject *t_TokenFilter_reset(t_TokenFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TokenFilter), (PyObject *) self, "reset", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanMinimalStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanMinimalStemFilter::class$ = NULL;
          jmethodID *GermanMinimalStemFilter::mids$ = NULL;
          bool GermanMinimalStemFilter::live$ = false;

          jclass GermanMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanMinimalStemFilter::GermanMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean GermanMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanMinimalStemFilter_init_(t_GermanMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanMinimalStemFilter_incrementToken(t_GermanMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_GermanMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_GermanMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanMinimalStemFilter, t_GermanMinimalStemFilter, ::org::apache::lucene::analysis::TokenFilter, GermanMinimalStemFilter, t_GermanMinimalStemFilter_init_, 0, 0, 0, 0, 0);

          void t_GermanMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanMinimalStemFilter), module, "GermanMinimalStemFilter", 0);
          }

          void t_GermanMinimalStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemFilter).tp_dict, "class_", make_descriptor(GermanMinimalStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemFilter).tp_dict, "wrapfn_", make_descriptor(t_GermanMinimalStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_GermanMinimalStemFilter::wrap_Object(GermanMinimalStemFilter(((t_GermanMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GermanMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanMinimalStemFilter_init_(t_GermanMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GermanMinimalStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GermanMinimalStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanMinimalStemFilter_incrementToken(t_GermanMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GermanMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/RunAutomaton.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *RunAutomaton::class$ = NULL;
          jmethodID *RunAutomaton::mids$ = NULL;
          bool RunAutomaton::live$ = false;

          jclass RunAutomaton::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/RunAutomaton");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_930c56a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;IZ)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getCharIntervals_dab10e75] = env->getMethodID(cls, "getCharIntervals", "()[I");
              mids$[mid_getInitialState_54c6a179] = env->getMethodID(cls, "getInitialState", "()I");
              mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isAccept_39c7bd30] = env->getMethodID(cls, "isAccept", "(I)Z");
              mids$[mid_step_d8d154b9] = env->getMethodID(cls, "step", "(II)I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RunAutomaton::RunAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_930c56a3, a0.this$, a1, a2)) {}

          jboolean RunAutomaton::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          JArray< jint > RunAutomaton::getCharIntervals() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getCharIntervals_dab10e75]));
          }

          jint RunAutomaton::getInitialState() const
          {
            return env->callIntMethod(this$, mids$[mid_getInitialState_54c6a179]);
          }

          jint RunAutomaton::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
          }

          jint RunAutomaton::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jboolean RunAutomaton::isAccept(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isAccept_39c7bd30], a0);
          }

          jint RunAutomaton::step(jint a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_step_d8d154b9], a0, a1);
          }

          ::java::lang::String RunAutomaton::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_RunAutomaton_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RunAutomaton_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RunAutomaton_init_(t_RunAutomaton *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RunAutomaton_equals(t_RunAutomaton *self, PyObject *args);
          static PyObject *t_RunAutomaton_getCharIntervals(t_RunAutomaton *self);
          static PyObject *t_RunAutomaton_getInitialState(t_RunAutomaton *self);
          static PyObject *t_RunAutomaton_getSize(t_RunAutomaton *self);
          static PyObject *t_RunAutomaton_hashCode(t_RunAutomaton *self, PyObject *args);
          static PyObject *t_RunAutomaton_isAccept(t_RunAutomaton *self, PyObject *arg);
          static PyObject *t_RunAutomaton_step(t_RunAutomaton *self, PyObject *args);
          static PyObject *t_RunAutomaton_toString(t_RunAutomaton *self, PyObject *args);
          static PyObject *t_RunAutomaton_get__charIntervals(t_RunAutomaton *self, void *data);
          static PyObject *t_RunAutomaton_get__initialState(t_RunAutomaton *self, void *data);
          static PyObject *t_RunAutomaton_get__size(t_RunAutomaton *self, void *data);
          static PyGetSetDef t_RunAutomaton__fields_[] = {
            DECLARE_GET_FIELD(t_RunAutomaton, charIntervals),
            DECLARE_GET_FIELD(t_RunAutomaton, initialState),
            DECLARE_GET_FIELD(t_RunAutomaton, size),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_RunAutomaton__methods_[] = {
            DECLARE_METHOD(t_RunAutomaton, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RunAutomaton, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RunAutomaton, equals, METH_VARARGS),
            DECLARE_METHOD(t_RunAutomaton, getCharIntervals, METH_NOARGS),
            DECLARE_METHOD(t_RunAutomaton, getInitialState, METH_NOARGS),
            DECLARE_METHOD(t_RunAutomaton, getSize, METH_NOARGS),
            DECLARE_METHOD(t_RunAutomaton, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_RunAutomaton, isAccept, METH_O),
            DECLARE_METHOD(t_RunAutomaton, step, METH_VARARGS),
            DECLARE_METHOD(t_RunAutomaton, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RunAutomaton, t_RunAutomaton, ::java::lang::Object, RunAutomaton, t_RunAutomaton_init_, 0, 0, t_RunAutomaton__fields_, 0, 0);

          void t_RunAutomaton::install(PyObject *module)
          {
            installType(&PY_TYPE(RunAutomaton), module, "RunAutomaton", 0);
          }

          void t_RunAutomaton::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RunAutomaton).tp_dict, "class_", make_descriptor(RunAutomaton::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RunAutomaton).tp_dict, "wrapfn_", make_descriptor(t_RunAutomaton::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RunAutomaton).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RunAutomaton_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RunAutomaton::initializeClass, 1)))
              return NULL;
            return t_RunAutomaton::wrap_Object(RunAutomaton(((t_RunAutomaton *) arg)->object.this$));
          }
          static PyObject *t_RunAutomaton_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RunAutomaton::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RunAutomaton_init_(t_RunAutomaton *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jint a1;
            jboolean a2;
            RunAutomaton object((jobject) NULL);

            if (!parseArgs(args, "kIZ", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = RunAutomaton(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RunAutomaton_equals(t_RunAutomaton *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(RunAutomaton), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_RunAutomaton_getCharIntervals(t_RunAutomaton *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.getCharIntervals());
            return result.wrap();
          }

          static PyObject *t_RunAutomaton_getInitialState(t_RunAutomaton *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getInitialState());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_RunAutomaton_getSize(t_RunAutomaton *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_RunAutomaton_hashCode(t_RunAutomaton *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(RunAutomaton), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_RunAutomaton_isAccept(t_RunAutomaton *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.isAccept(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isAccept", arg);
            return NULL;
          }

          static PyObject *t_RunAutomaton_step(t_RunAutomaton *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.step(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "step", args);
            return NULL;
          }

          static PyObject *t_RunAutomaton_toString(t_RunAutomaton *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(RunAutomaton), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_RunAutomaton_get__charIntervals(t_RunAutomaton *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object.getCharIntervals());
            return value.wrap();
          }

          static PyObject *t_RunAutomaton_get__initialState(t_RunAutomaton *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getInitialState());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_RunAutomaton_get__size(t_RunAutomaton *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/search/NumericRangeQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *NumericRangeQueryNodeBuilder::class$ = NULL;
              jmethodID *NumericRangeQueryNodeBuilder::mids$ = NULL;
              bool NumericRangeQueryNodeBuilder::live$ = false;

              jclass NumericRangeQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_ff2bff6d] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/NumericRangeQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumericRangeQueryNodeBuilder::NumericRangeQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::NumericRangeQuery NumericRangeQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::NumericRangeQuery(env->callObjectMethod(this$, mids$[mid_build_ff2bff6d], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_NumericRangeQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericRangeQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NumericRangeQueryNodeBuilder_init_(t_NumericRangeQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_NumericRangeQueryNodeBuilder_build(t_NumericRangeQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_NumericRangeQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_NumericRangeQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericRangeQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericRangeQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumericRangeQueryNodeBuilder, t_NumericRangeQueryNodeBuilder, ::java::lang::Object, NumericRangeQueryNodeBuilder, t_NumericRangeQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_NumericRangeQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(NumericRangeQueryNodeBuilder), module, "NumericRangeQueryNodeBuilder", 0);
              }

              void t_NumericRangeQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNodeBuilder).tp_dict, "class_", make_descriptor(NumericRangeQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_NumericRangeQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumericRangeQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumericRangeQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_NumericRangeQueryNodeBuilder::wrap_Object(NumericRangeQueryNodeBuilder(((t_NumericRangeQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_NumericRangeQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumericRangeQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NumericRangeQueryNodeBuilder_init_(t_NumericRangeQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                NumericRangeQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = NumericRangeQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_NumericRangeQueryNodeBuilder_build(t_NumericRangeQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::NumericRangeQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_NumericRangeQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/QueryParserUtil.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {

            ::java::lang::Class *QueryParserUtil::class$ = NULL;
            jmethodID *QueryParserUtil::mids$ = NULL;
            bool QueryParserUtil::live$ = false;

            jclass QueryParserUtil::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/QueryParserUtil");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_escape_97a5258f] = env->getStaticMethodID(cls, "escape", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_parse_79a3f5c4] = env->getStaticMethodID(cls, "parse", "([Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");
                mids$[mid_parse_084a531a] = env->getStaticMethodID(cls, "parse", "([Ljava/lang/String;[Ljava/lang/String;[Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");
                mids$[mid_parse_046ef74e] = env->getStaticMethodID(cls, "parse", "(Ljava/lang/String;[Ljava/lang/String;[Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryParserUtil::QueryParserUtil() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            ::java::lang::String QueryParserUtil::escape(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_escape_97a5258f], a0.this$));
            }

            ::org::apache::lucene::search::Query QueryParserUtil::parse(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::analysis::Analyzer & a2)
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_79a3f5c4], a0.this$, a1.this$, a2.this$));
            }

            ::org::apache::lucene::search::Query QueryParserUtil::parse(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1, const JArray< ::org::apache::lucene::search::BooleanClause$Occur > & a2, const ::org::apache::lucene::analysis::Analyzer & a3)
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_084a531a], a0.this$, a1.this$, a2.this$, a3.this$));
            }

            ::org::apache::lucene::search::Query QueryParserUtil::parse(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1, const JArray< ::org::apache::lucene::search::BooleanClause$Occur > & a2, const ::org::apache::lucene::analysis::Analyzer & a3)
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_046ef74e], a0.this$, a1.this$, a2.this$, a3.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            static PyObject *t_QueryParserUtil_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParserUtil_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryParserUtil_init_(t_QueryParserUtil *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryParserUtil_escape(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParserUtil_parse(PyTypeObject *type, PyObject *args);

            static PyMethodDef t_QueryParserUtil__methods_[] = {
              DECLARE_METHOD(t_QueryParserUtil, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserUtil, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserUtil, escape, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserUtil, parse, METH_VARARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryParserUtil, t_QueryParserUtil, ::java::lang::Object, QueryParserUtil, t_QueryParserUtil_init_, 0, 0, 0, 0, 0);

            void t_QueryParserUtil::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryParserUtil), module, "QueryParserUtil", 0);
            }

            void t_QueryParserUtil::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryParserUtil).tp_dict, "class_", make_descriptor(QueryParserUtil::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryParserUtil).tp_dict, "wrapfn_", make_descriptor(t_QueryParserUtil::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryParserUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryParserUtil_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryParserUtil::initializeClass, 1)))
                return NULL;
              return t_QueryParserUtil::wrap_Object(QueryParserUtil(((t_QueryParserUtil *) arg)->object.this$));
            }
            static PyObject *t_QueryParserUtil_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryParserUtil::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryParserUtil_init_(t_QueryParserUtil *self, PyObject *args, PyObject *kwds)
            {
              QueryParserUtil object((jobject) NULL);

              INT_CALL(object = QueryParserUtil());
              self->object = object;

              return 0;
            }

            static PyObject *t_QueryParserUtil_escape(PyTypeObject *type, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::QueryParserUtil::escape(a0));
                return j2p(result);
              }

              PyErr_SetArgsError(type, "escape", arg);
              return NULL;
            }

            static PyObject *t_QueryParserUtil_parse(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  JArray< ::java::lang::String > a0((jobject) NULL);
                  JArray< ::java::lang::String > a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  ::org::apache::lucene::search::Query result((jobject) NULL);

                  if (!parseArgs(args, "[s[sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::QueryParserUtil::parse(a0, a1, a2));
                    return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                  }
                }
                break;
               case 4:
                {
                  JArray< ::java::lang::String > a0((jobject) NULL);
                  JArray< ::java::lang::String > a1((jobject) NULL);
                  JArray< ::org::apache::lucene::search::BooleanClause$Occur > a2((jobject) NULL);
                  PyTypeObject **p2;
                  ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                  ::org::apache::lucene::search::Query result((jobject) NULL);

                  if (!parseArgs(args, "[s[s[Kk", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a3))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::QueryParserUtil::parse(a0, a1, a2, a3));
                    return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                  }
                }
                {
                  ::java::lang::String a0((jobject) NULL);
                  JArray< ::java::lang::String > a1((jobject) NULL);
                  JArray< ::org::apache::lucene::search::BooleanClause$Occur > a2((jobject) NULL);
                  PyTypeObject **p2;
                  ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                  ::org::apache::lucene::search::Query result((jobject) NULL);

                  if (!parseArgs(args, "s[s[Kk", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a3))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::QueryParserUtil::parse(a0, a1, a2, a3));
                    return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                  }
                }
              }

              PyErr_SetArgsError(type, "parse", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TimeLimitingCollector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/TimeLimitingCollector$TimerThread.h"
#include "org/apache/lucene/util/Counter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TimeLimitingCollector::class$ = NULL;
        jmethodID *TimeLimitingCollector::mids$ = NULL;
        bool TimeLimitingCollector::live$ = false;

        jclass TimeLimitingCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TimeLimitingCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d1481a7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Collector;Lorg/apache/lucene/util/Counter;J)V");
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_getGlobalCounter_781dd30a] = env->getStaticMethodID(cls, "getGlobalCounter", "()Lorg/apache/lucene/util/Counter;");
            mids$[mid_getGlobalTimerThread_91bdd0a8] = env->getStaticMethodID(cls, "getGlobalTimerThread", "()Lorg/apache/lucene/search/TimeLimitingCollector$TimerThread;");
            mids$[mid_isGreedy_54c6a16a] = env->getMethodID(cls, "isGreedy", "()Z");
            mids$[mid_setBaseline_54c6a166] = env->getMethodID(cls, "setBaseline", "()V");
            mids$[mid_setBaseline_0ee6df2f] = env->getMethodID(cls, "setBaseline", "(J)V");
            mids$[mid_setCollector_77379ce0] = env->getMethodID(cls, "setCollector", "(Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_setGreedy_bb0c767f] = env->getMethodID(cls, "setGreedy", "(Z)V");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TimeLimitingCollector::TimeLimitingCollector(const ::org::apache::lucene::search::Collector & a0, const ::org::apache::lucene::util::Counter & a1, jlong a2) : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_d1481a7a, a0.this$, a1.this$, a2)) {}

        jboolean TimeLimitingCollector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        void TimeLimitingCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
        }

        ::org::apache::lucene::util::Counter TimeLimitingCollector::getGlobalCounter()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Counter(env->callStaticObjectMethod(cls, mids$[mid_getGlobalCounter_781dd30a]));
        }

        ::org::apache::lucene::search::TimeLimitingCollector$TimerThread TimeLimitingCollector::getGlobalTimerThread()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TimeLimitingCollector$TimerThread(env->callStaticObjectMethod(cls, mids$[mid_getGlobalTimerThread_91bdd0a8]));
        }

        jboolean TimeLimitingCollector::isGreedy() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isGreedy_54c6a16a]);
        }

        void TimeLimitingCollector::setBaseline() const
        {
          env->callVoidMethod(this$, mids$[mid_setBaseline_54c6a166]);
        }

        void TimeLimitingCollector::setBaseline(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBaseline_0ee6df2f], a0);
        }

        void TimeLimitingCollector::setCollector(const ::org::apache::lucene::search::Collector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCollector_77379ce0], a0.this$);
        }

        void TimeLimitingCollector::setGreedy(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setGreedy_bb0c767f], a0);
        }

        void TimeLimitingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }

        void TimeLimitingCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/TimeLimitingCollector$TimeExceededException.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TimeLimitingCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimeLimitingCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TimeLimitingCollector_init_(t_TimeLimitingCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TimeLimitingCollector_acceptsDocsOutOfOrder(t_TimeLimitingCollector *self, PyObject *args);
        static PyObject *t_TimeLimitingCollector_collect(t_TimeLimitingCollector *self, PyObject *args);
        static PyObject *t_TimeLimitingCollector_getGlobalCounter(PyTypeObject *type);
        static PyObject *t_TimeLimitingCollector_getGlobalTimerThread(PyTypeObject *type);
        static PyObject *t_TimeLimitingCollector_isGreedy(t_TimeLimitingCollector *self);
        static PyObject *t_TimeLimitingCollector_setBaseline(t_TimeLimitingCollector *self, PyObject *args);
        static PyObject *t_TimeLimitingCollector_setCollector(t_TimeLimitingCollector *self, PyObject *arg);
        static PyObject *t_TimeLimitingCollector_setGreedy(t_TimeLimitingCollector *self, PyObject *arg);
        static PyObject *t_TimeLimitingCollector_setNextReader(t_TimeLimitingCollector *self, PyObject *args);
        static PyObject *t_TimeLimitingCollector_setScorer(t_TimeLimitingCollector *self, PyObject *args);
        static int t_TimeLimitingCollector_set__baseline(t_TimeLimitingCollector *self, PyObject *arg, void *data);
        static int t_TimeLimitingCollector_set__collector(t_TimeLimitingCollector *self, PyObject *arg, void *data);
        static PyObject *t_TimeLimitingCollector_get__globalCounter(t_TimeLimitingCollector *self, void *data);
        static PyObject *t_TimeLimitingCollector_get__globalTimerThread(t_TimeLimitingCollector *self, void *data);
        static PyObject *t_TimeLimitingCollector_get__greedy(t_TimeLimitingCollector *self, void *data);
        static int t_TimeLimitingCollector_set__greedy(t_TimeLimitingCollector *self, PyObject *arg, void *data);
        static int t_TimeLimitingCollector_set__nextReader(t_TimeLimitingCollector *self, PyObject *arg, void *data);
        static int t_TimeLimitingCollector_set__scorer(t_TimeLimitingCollector *self, PyObject *arg, void *data);
        static PyGetSetDef t_TimeLimitingCollector__fields_[] = {
          DECLARE_SET_FIELD(t_TimeLimitingCollector, baseline),
          DECLARE_SET_FIELD(t_TimeLimitingCollector, collector),
          DECLARE_GET_FIELD(t_TimeLimitingCollector, globalCounter),
          DECLARE_GET_FIELD(t_TimeLimitingCollector, globalTimerThread),
          DECLARE_GETSET_FIELD(t_TimeLimitingCollector, greedy),
          DECLARE_SET_FIELD(t_TimeLimitingCollector, nextReader),
          DECLARE_SET_FIELD(t_TimeLimitingCollector, scorer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TimeLimitingCollector__methods_[] = {
          DECLARE_METHOD(t_TimeLimitingCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector, acceptsDocsOutOfOrder, METH_VARARGS),
          DECLARE_METHOD(t_TimeLimitingCollector, collect, METH_VARARGS),
          DECLARE_METHOD(t_TimeLimitingCollector, getGlobalCounter, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector, getGlobalTimerThread, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector, isGreedy, METH_NOARGS),
          DECLARE_METHOD(t_TimeLimitingCollector, setBaseline, METH_VARARGS),
          DECLARE_METHOD(t_TimeLimitingCollector, setCollector, METH_O),
          DECLARE_METHOD(t_TimeLimitingCollector, setGreedy, METH_O),
          DECLARE_METHOD(t_TimeLimitingCollector, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_TimeLimitingCollector, setScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TimeLimitingCollector, t_TimeLimitingCollector, ::org::apache::lucene::search::Collector, TimeLimitingCollector, t_TimeLimitingCollector_init_, 0, 0, t_TimeLimitingCollector__fields_, 0, 0);

        void t_TimeLimitingCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(TimeLimitingCollector), module, "TimeLimitingCollector", 0);
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector).tp_dict, "TimerThread", make_descriptor(&PY_TYPE(TimeLimitingCollector$TimerThread)));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector).tp_dict, "TimeExceededException", make_descriptor(&PY_TYPE(TimeLimitingCollector$TimeExceededException)));
        }

        void t_TimeLimitingCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector).tp_dict, "class_", make_descriptor(TimeLimitingCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector).tp_dict, "wrapfn_", make_descriptor(t_TimeLimitingCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TimeLimitingCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TimeLimitingCollector::initializeClass, 1)))
            return NULL;
          return t_TimeLimitingCollector::wrap_Object(TimeLimitingCollector(((t_TimeLimitingCollector *) arg)->object.this$));
        }
        static PyObject *t_TimeLimitingCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TimeLimitingCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TimeLimitingCollector_init_(t_TimeLimitingCollector *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Collector a0((jobject) NULL);
          ::org::apache::lucene::util::Counter a1((jobject) NULL);
          jlong a2;
          TimeLimitingCollector object((jobject) NULL);

          if (!parseArgs(args, "kkJ", ::org::apache::lucene::search::Collector::initializeClass, ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = TimeLimitingCollector(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TimeLimitingCollector_acceptsDocsOutOfOrder(t_TimeLimitingCollector *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TimeLimitingCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
        }

        static PyObject *t_TimeLimitingCollector_collect(t_TimeLimitingCollector *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TimeLimitingCollector), (PyObject *) self, "collect", args, 2);
        }

        static PyObject *t_TimeLimitingCollector_getGlobalCounter(PyTypeObject *type)
        {
          ::org::apache::lucene::util::Counter result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::TimeLimitingCollector::getGlobalCounter());
          return ::org::apache::lucene::util::t_Counter::wrap_Object(result);
        }

        static PyObject *t_TimeLimitingCollector_getGlobalTimerThread(PyTypeObject *type)
        {
          ::org::apache::lucene::search::TimeLimitingCollector$TimerThread result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::TimeLimitingCollector::getGlobalTimerThread());
          return ::org::apache::lucene::search::t_TimeLimitingCollector$TimerThread::wrap_Object(result);
        }

        static PyObject *t_TimeLimitingCollector_isGreedy(t_TimeLimitingCollector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isGreedy());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TimeLimitingCollector_setBaseline(t_TimeLimitingCollector *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.setBaseline());
              Py_RETURN_NONE;
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.setBaseline(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "setBaseline", args);
          return NULL;
        }

        static PyObject *t_TimeLimitingCollector_setCollector(t_TimeLimitingCollector *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Collector a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Collector::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setCollector(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCollector", arg);
          return NULL;
        }

        static PyObject *t_TimeLimitingCollector_setGreedy(t_TimeLimitingCollector *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setGreedy(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setGreedy", arg);
          return NULL;
        }

        static PyObject *t_TimeLimitingCollector_setNextReader(t_TimeLimitingCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TimeLimitingCollector), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_TimeLimitingCollector_setScorer(t_TimeLimitingCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TimeLimitingCollector), (PyObject *) self, "setScorer", args, 2);
        }

        static int t_TimeLimitingCollector_set__baseline(t_TimeLimitingCollector *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setBaseline(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "baseline", arg);
          return -1;
        }

        static int t_TimeLimitingCollector_set__collector(t_TimeLimitingCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Collector value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Collector::initializeClass, &value))
            {
              INT_CALL(self->object.setCollector(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "collector", arg);
          return -1;
        }

        static PyObject *t_TimeLimitingCollector_get__globalCounter(t_TimeLimitingCollector *self, void *data)
        {
          ::org::apache::lucene::util::Counter value((jobject) NULL);
          OBJ_CALL(value = self->object.getGlobalCounter());
          return ::org::apache::lucene::util::t_Counter::wrap_Object(value);
        }

        static PyObject *t_TimeLimitingCollector_get__globalTimerThread(t_TimeLimitingCollector *self, void *data)
        {
          ::org::apache::lucene::search::TimeLimitingCollector$TimerThread value((jobject) NULL);
          OBJ_CALL(value = self->object.getGlobalTimerThread());
          return ::org::apache::lucene::search::t_TimeLimitingCollector$TimerThread::wrap_Object(value);
        }

        static PyObject *t_TimeLimitingCollector_get__greedy(t_TimeLimitingCollector *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isGreedy());
          Py_RETURN_BOOL(value);
        }
        static int t_TimeLimitingCollector_set__greedy(t_TimeLimitingCollector *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setGreedy(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "greedy", arg);
          return -1;
        }

        static int t_TimeLimitingCollector_set__nextReader(t_TimeLimitingCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_TimeLimitingCollector_set__scorer(t_TimeLimitingCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/TermFreqValueSource.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *TermFreqValueSource::class$ = NULL;
            jmethodID *TermFreqValueSource::mids$ = NULL;
            bool TermFreqValueSource::live$ = false;

            jclass TermFreqValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/TermFreqValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b45b6622] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermFreqValueSource::TermFreqValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3) : ::org::apache::lucene::queries::function::valuesource::DocFreqValueSource(env->newObject(initializeClass, &mids$, mid_init$_b45b6622, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues TermFreqValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            ::java::lang::String TermFreqValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_TermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TermFreqValueSource_init_(t_TermFreqValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TermFreqValueSource_getValues(t_TermFreqValueSource *self, PyObject *args);
            static PyObject *t_TermFreqValueSource_name(t_TermFreqValueSource *self, PyObject *args);

            static PyMethodDef t_TermFreqValueSource__methods_[] = {
              DECLARE_METHOD(t_TermFreqValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermFreqValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermFreqValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_TermFreqValueSource, name, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermFreqValueSource, t_TermFreqValueSource, ::org::apache::lucene::queries::function::valuesource::DocFreqValueSource, TermFreqValueSource, t_TermFreqValueSource_init_, 0, 0, 0, 0, 0);

            void t_TermFreqValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(TermFreqValueSource), module, "TermFreqValueSource", 0);
            }

            void t_TermFreqValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermFreqValueSource).tp_dict, "class_", make_descriptor(TermFreqValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermFreqValueSource).tp_dict, "wrapfn_", make_descriptor(t_TermFreqValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermFreqValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermFreqValueSource::initializeClass, 1)))
                return NULL;
              return t_TermFreqValueSource::wrap_Object(TermFreqValueSource(((t_TermFreqValueSource *) arg)->object.this$));
            }
            static PyObject *t_TermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermFreqValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TermFreqValueSource_init_(t_TermFreqValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              TermFreqValueSource object((jobject) NULL);

              if (!parseArgs(args, "sssk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = TermFreqValueSource(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TermFreqValueSource_getValues(t_TermFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(TermFreqValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_TermFreqValueSource_name(t_TermFreqValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.name());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(TermFreqValueSource), (PyObject *) self, "name", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Rescorer.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Rescorer::class$ = NULL;
        jmethodID *Rescorer::mids$ = NULL;
        bool Rescorer::live$ = false;

        jclass Rescorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Rescorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_explain_2b38e623] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Explanation;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_rescore_bd3343d7] = env->getMethodID(cls, "rescore", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;I)Lorg/apache/lucene/search/TopDocs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Rescorer::Rescorer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::Explanation Rescorer::explain(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Explanation & a1, jint a2) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_2b38e623], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::TopDocs Rescorer::rescore(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::TopDocs & a1, jint a2) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_rescore_bd3343d7], a0.this$, a1.this$, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Rescorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Rescorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Rescorer_init_(t_Rescorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Rescorer_explain(t_Rescorer *self, PyObject *args);
        static PyObject *t_Rescorer_rescore(t_Rescorer *self, PyObject *args);

        static PyMethodDef t_Rescorer__methods_[] = {
          DECLARE_METHOD(t_Rescorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Rescorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Rescorer, explain, METH_VARARGS),
          DECLARE_METHOD(t_Rescorer, rescore, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Rescorer, t_Rescorer, ::java::lang::Object, Rescorer, t_Rescorer_init_, 0, 0, 0, 0, 0);

        void t_Rescorer::install(PyObject *module)
        {
          installType(&PY_TYPE(Rescorer), module, "Rescorer", 0);
        }

        void t_Rescorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Rescorer).tp_dict, "class_", make_descriptor(Rescorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Rescorer).tp_dict, "wrapfn_", make_descriptor(t_Rescorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Rescorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Rescorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Rescorer::initializeClass, 1)))
            return NULL;
          return t_Rescorer::wrap_Object(Rescorer(((t_Rescorer *) arg)->object.this$));
        }
        static PyObject *t_Rescorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Rescorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Rescorer_init_(t_Rescorer *self, PyObject *args, PyObject *kwds)
        {
          Rescorer object((jobject) NULL);

          INT_CALL(object = Rescorer());
          self->object = object;

          return 0;
        }

        static PyObject *t_Rescorer_explain(t_Rescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Explanation a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.explain(a0, a1, a2));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "explain", args);
          return NULL;
        }

        static PyObject *t_Rescorer_rescore(t_Rescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::TopDocs a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::TopDocs result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.rescore(a0, a1, a2));
            return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rescore", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianLightStemFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianLightStemFilterFactory::class$ = NULL;
          jmethodID *NorwegianLightStemFilterFactory::mids$ = NULL;
          bool NorwegianLightStemFilterFactory::live$ = false;

          jclass NorwegianLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianLightStemFilterFactory::NorwegianLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream NorwegianLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianLightStemFilterFactory_init_(t_NorwegianLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianLightStemFilterFactory_create(t_NorwegianLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_NorwegianLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_NorwegianLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NorwegianLightStemFilterFactory, t_NorwegianLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, NorwegianLightStemFilterFactory, t_NorwegianLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_NorwegianLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianLightStemFilterFactory), module, "NorwegianLightStemFilterFactory", 0);
          }

          void t_NorwegianLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemFilterFactory).tp_dict, "class_", make_descriptor(NorwegianLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_NorwegianLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NorwegianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_NorwegianLightStemFilterFactory::wrap_Object(NorwegianLightStemFilterFactory(((t_NorwegianLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_NorwegianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianLightStemFilterFactory_init_(t_NorwegianLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            NorwegianLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = NorwegianLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianLightStemFilterFactory_create(t_NorwegianLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NorwegianLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/RandomAccessOrds.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *RandomAccessOrds::class$ = NULL;
        jmethodID *RandomAccessOrds::mids$ = NULL;
        bool RandomAccessOrds::live$ = false;

        jclass RandomAccessOrds::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/RandomAccessOrds");

            mids$ = new jmethodID[max_mid];
            mids$[mid_cardinality_54c6a179] = env->getMethodID(cls, "cardinality", "()I");
            mids$[mid_ordAt_39c7bd20] = env->getMethodID(cls, "ordAt", "(I)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint RandomAccessOrds::cardinality() const
        {
          return env->callIntMethod(this$, mids$[mid_cardinality_54c6a179]);
        }

        jlong RandomAccessOrds::ordAt(jint a0) const
        {
          return env->callLongMethod(this$, mids$[mid_ordAt_39c7bd20], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_RandomAccessOrds_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RandomAccessOrds_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RandomAccessOrds_cardinality(t_RandomAccessOrds *self);
        static PyObject *t_RandomAccessOrds_ordAt(t_RandomAccessOrds *self, PyObject *arg);

        static PyMethodDef t_RandomAccessOrds__methods_[] = {
          DECLARE_METHOD(t_RandomAccessOrds, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RandomAccessOrds, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RandomAccessOrds, cardinality, METH_NOARGS),
          DECLARE_METHOD(t_RandomAccessOrds, ordAt, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RandomAccessOrds, t_RandomAccessOrds, ::org::apache::lucene::index::SortedSetDocValues, RandomAccessOrds, abstract_init, 0, 0, 0, 0, 0);

        void t_RandomAccessOrds::install(PyObject *module)
        {
          installType(&PY_TYPE(RandomAccessOrds), module, "RandomAccessOrds", 0);
        }

        void t_RandomAccessOrds::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RandomAccessOrds).tp_dict, "class_", make_descriptor(RandomAccessOrds::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RandomAccessOrds).tp_dict, "wrapfn_", make_descriptor(t_RandomAccessOrds::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RandomAccessOrds).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RandomAccessOrds_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RandomAccessOrds::initializeClass, 1)))
            return NULL;
          return t_RandomAccessOrds::wrap_Object(RandomAccessOrds(((t_RandomAccessOrds *) arg)->object.this$));
        }
        static PyObject *t_RandomAccessOrds_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RandomAccessOrds::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RandomAccessOrds_cardinality(t_RandomAccessOrds *self)
        {
          jint result;
          OBJ_CALL(result = self->object.cardinality());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_RandomAccessOrds_ordAt(t_RandomAccessOrds *self, PyObject *arg)
        {
          jint a0;
          jlong result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.ordAt(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "ordAt", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$Doubles.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$Doubles::class$ = NULL;
        jmethodID *FieldCache$Doubles::mids$ = NULL;
        bool FieldCache$Doubles::live$ = false;
        FieldCache$Doubles *FieldCache$Doubles::EMPTY = NULL;

        jclass FieldCache$Doubles::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$Doubles");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_39c7bd2e] = env->getMethodID(cls, "get", "(I)D");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new FieldCache$Doubles(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/FieldCache$Doubles;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$Doubles::FieldCache$Doubles() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jdouble FieldCache$Doubles::get(jint a0) const
        {
          return env->callDoubleMethod(this$, mids$[mid_get_39c7bd2e], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$Doubles_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Doubles_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$Doubles_init_(t_FieldCache$Doubles *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$Doubles_get(t_FieldCache$Doubles *self, PyObject *arg);

        static PyMethodDef t_FieldCache$Doubles__methods_[] = {
          DECLARE_METHOD(t_FieldCache$Doubles, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Doubles, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Doubles, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$Doubles, t_FieldCache$Doubles, ::java::lang::Object, FieldCache$Doubles, t_FieldCache$Doubles_init_, 0, 0, 0, 0, 0);

        void t_FieldCache$Doubles::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$Doubles), module, "FieldCache$Doubles", 0);
        }

        void t_FieldCache$Doubles::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$Doubles).tp_dict, "class_", make_descriptor(FieldCache$Doubles::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$Doubles).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$Doubles::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$Doubles).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCache$Doubles::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCache$Doubles).tp_dict, "EMPTY", make_descriptor(t_FieldCache$Doubles::wrap_Object(*FieldCache$Doubles::EMPTY)));
        }

        static PyObject *t_FieldCache$Doubles_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$Doubles::initializeClass, 1)))
            return NULL;
          return t_FieldCache$Doubles::wrap_Object(FieldCache$Doubles(((t_FieldCache$Doubles *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$Doubles_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$Doubles::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$Doubles_init_(t_FieldCache$Doubles *self, PyObject *args, PyObject *kwds)
        {
          FieldCache$Doubles object((jobject) NULL);

          INT_CALL(object = FieldCache$Doubles());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCache$Doubles_get(t_FieldCache$Doubles *self, PyObject *arg)
        {
          jint a0;
          jdouble result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/NoOutputs.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *NoOutputs::class$ = NULL;
          jmethodID *NoOutputs::mids$ = NULL;
          bool NoOutputs::live$ = false;

          jclass NoOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/NoOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_537d5bdf] = env->getMethodID(cls, "add", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_common_537d5bdf] = env->getMethodID(cls, "common", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_getNoOutput_846352c3] = env->getMethodID(cls, "getNoOutput", "()Ljava/lang/Object;");
              mids$[mid_getSingleton_99c00e31] = env->getStaticMethodID(cls, "getSingleton", "()Lorg/apache/lucene/util/fst/NoOutputs;");
              mids$[mid_merge_537d5bdf] = env->getMethodID(cls, "merge", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_outputToString_c9db4eed] = env->getMethodID(cls, "outputToString", "(Ljava/lang/Object;)Ljava/lang/String;");
              mids$[mid_read_7d5f44e2] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Ljava/lang/Object;");
              mids$[mid_subtract_537d5bdf] = env->getMethodID(cls, "subtract", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_write_208ac1fb] = env->getMethodID(cls, "write", "(Ljava/lang/Object;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Object NoOutputs::add(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_add_537d5bdf], a0.this$, a1.this$));
          }

          ::java::lang::Object NoOutputs::common(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_common_537d5bdf], a0.this$, a1.this$));
          }

          ::java::lang::Object NoOutputs::getNoOutput() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getNoOutput_846352c3]));
          }

          NoOutputs NoOutputs::getSingleton()
          {
            jclass cls = env->getClass(initializeClass);
            return NoOutputs(env->callStaticObjectMethod(cls, mids$[mid_getSingleton_99c00e31]));
          }

          ::java::lang::Object NoOutputs::merge(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_merge_537d5bdf], a0.this$, a1.this$));
          }

          ::java::lang::String NoOutputs::outputToString(const ::java::lang::Object & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_c9db4eed], a0.this$));
          }

          ::java::lang::Object NoOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_read_7d5f44e2], a0.this$));
          }

          ::java::lang::Object NoOutputs::subtract(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_subtract_537d5bdf], a0.this$, a1.this$));
          }

          void NoOutputs::write(const ::java::lang::Object & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_208ac1fb], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_NoOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NoOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NoOutputs_of_(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_add(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_common(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_getNoOutput(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_getSingleton(PyTypeObject *type);
          static PyObject *t_NoOutputs_merge(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_outputToString(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_read(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_subtract(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_write(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_get__noOutput(t_NoOutputs *self, void *data);
          static PyObject *t_NoOutputs_get__singleton(t_NoOutputs *self, void *data);
          static PyObject *t_NoOutputs_get__parameters_(t_NoOutputs *self, void *data);
          static PyGetSetDef t_NoOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_NoOutputs, noOutput),
            DECLARE_GET_FIELD(t_NoOutputs, singleton),
            DECLARE_GET_FIELD(t_NoOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NoOutputs__methods_[] = {
            DECLARE_METHOD(t_NoOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NoOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NoOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, getSingleton, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_NoOutputs, merge, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NoOutputs, t_NoOutputs, ::org::apache::lucene::util::fst::Outputs, NoOutputs, abstract_init, 0, 0, t_NoOutputs__fields_, 0, 0);
          PyObject *t_NoOutputs::wrap_Object(const NoOutputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_NoOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_NoOutputs *self = (t_NoOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_NoOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_NoOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_NoOutputs *self = (t_NoOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_NoOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(NoOutputs), module, "NoOutputs", 0);
          }

          void t_NoOutputs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NoOutputs).tp_dict, "class_", make_descriptor(NoOutputs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NoOutputs).tp_dict, "wrapfn_", make_descriptor(t_NoOutputs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NoOutputs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NoOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NoOutputs::initializeClass, 1)))
              return NULL;
            return t_NoOutputs::wrap_Object(NoOutputs(((t_NoOutputs *) arg)->object.this$));
          }
          static PyObject *t_NoOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NoOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_NoOutputs_of_(t_NoOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_NoOutputs_add(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_NoOutputs_common(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_NoOutputs_getNoOutput(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_NoOutputs_getSingleton(PyTypeObject *type)
          {
            NoOutputs result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::NoOutputs::getSingleton());
            return t_NoOutputs::wrap_Object(result);
          }

          static PyObject *t_NoOutputs_merge(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              OBJ_CALL(result = self->object.merge(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "merge", args, 2);
          }

          static PyObject *t_NoOutputs_outputToString(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_NoOutputs_read(t_NoOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_NoOutputs_subtract(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_NoOutputs_write(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "ok", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_NoOutputs_get__parameters_(t_NoOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_NoOutputs_get__noOutput(t_NoOutputs *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_NoOutputs_get__singleton(t_NoOutputs *self, void *data)
          {
            NoOutputs value((jobject) NULL);
            OBJ_CALL(value = self->object.getSingleton());
            return t_NoOutputs::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *Lock::class$ = NULL;
        jmethodID *Lock::mids$ = NULL;
        bool Lock::live$ = false;
        jlong Lock::LOCK_OBTAIN_WAIT_FOREVER = (jlong) 0;
        jlong Lock::LOCK_POLL_INTERVAL = (jlong) 0;

        jclass Lock::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/Lock");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_isLocked_54c6a16a] = env->getMethodID(cls, "isLocked", "()Z");
            mids$[mid_obtain_54c6a16a] = env->getMethodID(cls, "obtain", "()Z");
            mids$[mid_obtain_0ee6df23] = env->getMethodID(cls, "obtain", "(J)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            LOCK_OBTAIN_WAIT_FOREVER = env->getStaticLongField(cls, "LOCK_OBTAIN_WAIT_FOREVER");
            LOCK_POLL_INTERVAL = env->getStaticLongField(cls, "LOCK_POLL_INTERVAL");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Lock::Lock() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void Lock::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jboolean Lock::isLocked() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isLocked_54c6a16a]);
        }

        jboolean Lock::obtain() const
        {
          return env->callBooleanMethod(this$, mids$[mid_obtain_54c6a16a]);
        }

        jboolean Lock::obtain(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_obtain_0ee6df23], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/store/Lock$With.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_Lock_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Lock_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Lock_init_(t_Lock *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Lock_close(t_Lock *self);
        static PyObject *t_Lock_isLocked(t_Lock *self);
        static PyObject *t_Lock_obtain(t_Lock *self, PyObject *args);
        static PyObject *t_Lock_get__locked(t_Lock *self, void *data);
        static PyGetSetDef t_Lock__fields_[] = {
          DECLARE_GET_FIELD(t_Lock, locked),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Lock__methods_[] = {
          DECLARE_METHOD(t_Lock, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Lock, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Lock, close, METH_NOARGS),
          DECLARE_METHOD(t_Lock, isLocked, METH_NOARGS),
          DECLARE_METHOD(t_Lock, obtain, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Lock, t_Lock, ::java::lang::Object, Lock, t_Lock_init_, 0, 0, t_Lock__fields_, 0, 0);

        void t_Lock::install(PyObject *module)
        {
          installType(&PY_TYPE(Lock), module, "Lock", 0);
          PyDict_SetItemString(PY_TYPE(Lock).tp_dict, "With", make_descriptor(&PY_TYPE(Lock$With)));
        }

        void t_Lock::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Lock).tp_dict, "class_", make_descriptor(Lock::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Lock).tp_dict, "wrapfn_", make_descriptor(t_Lock::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Lock).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Lock::initializeClass);
          PyDict_SetItemString(PY_TYPE(Lock).tp_dict, "LOCK_OBTAIN_WAIT_FOREVER", make_descriptor(Lock::LOCK_OBTAIN_WAIT_FOREVER));
          PyDict_SetItemString(PY_TYPE(Lock).tp_dict, "LOCK_POLL_INTERVAL", make_descriptor(Lock::LOCK_POLL_INTERVAL));
        }

        static PyObject *t_Lock_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Lock::initializeClass, 1)))
            return NULL;
          return t_Lock::wrap_Object(Lock(((t_Lock *) arg)->object.this$));
        }
        static PyObject *t_Lock_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Lock::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Lock_init_(t_Lock *self, PyObject *args, PyObject *kwds)
        {
          Lock object((jobject) NULL);

          INT_CALL(object = Lock());
          self->object = object;

          return 0;
        }

        static PyObject *t_Lock_close(t_Lock *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_Lock_isLocked(t_Lock *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isLocked());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Lock_obtain(t_Lock *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jboolean result;
              OBJ_CALL(result = self->object.obtain());
              Py_RETURN_BOOL(result);
            }
            break;
           case 1:
            {
              jlong a0;
              jboolean result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.obtain(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "obtain", args);
          return NULL;
        }

        static PyObject *t_Lock_get__locked(t_Lock *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isLocked());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Bits::class$ = NULL;
        jmethodID *Bits::mids$ = NULL;
        bool Bits::live$ = false;
        JArray< Bits > *Bits::EMPTY_ARRAY = NULL;

        jclass Bits::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Bits");

            mids$ = new jmethodID[max_mid];
            mids$[mid_get_39c7bd30] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_ARRAY = new JArray< Bits >(env->getStaticObjectField(cls, "EMPTY_ARRAY", "[Lorg/apache/lucene/util/Bits;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean Bits::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_39c7bd30], a0);
        }

        jint Bits::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/Bits$MatchNoBits.h"
#include "org/apache/lucene/util/Bits$MatchAllBits.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Bits_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bits_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bits_get(t_Bits *self, PyObject *arg);
        static PyObject *t_Bits_length(t_Bits *self);

        static PyMethodDef t_Bits__methods_[] = {
          DECLARE_METHOD(t_Bits, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits, get, METH_O),
          DECLARE_METHOD(t_Bits, length, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Bits, t_Bits, ::java::lang::Object, Bits, abstract_init, 0, 0, 0, 0, 0);

        void t_Bits::install(PyObject *module)
        {
          installType(&PY_TYPE(Bits), module, "Bits", 0);
          PyDict_SetItemString(PY_TYPE(Bits).tp_dict, "MatchNoBits", make_descriptor(&PY_TYPE(Bits$MatchNoBits)));
          PyDict_SetItemString(PY_TYPE(Bits).tp_dict, "MatchAllBits", make_descriptor(&PY_TYPE(Bits$MatchAllBits)));
        }

        void t_Bits::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Bits).tp_dict, "class_", make_descriptor(Bits::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Bits).tp_dict, "wrapfn_", make_descriptor(t_Bits::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Bits).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Bits::initializeClass);
          PyDict_SetItemString(PY_TYPE(Bits).tp_dict, "EMPTY_ARRAY", make_descriptor(JArray<jobject>(Bits::EMPTY_ARRAY->this$).wrap(t_Bits::wrap_jobject)));
        }

        static PyObject *t_Bits_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Bits::initializeClass, 1)))
            return NULL;
          return t_Bits::wrap_Object(Bits(((t_Bits *) arg)->object.this$));
        }
        static PyObject *t_Bits_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Bits::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Bits_get(t_Bits *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_Bits_length(t_Bits *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/RemoveDeletedQueryNodesProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {

              ::java::lang::Class *RemoveDeletedQueryNodesProcessor::class$ = NULL;
              jmethodID *RemoveDeletedQueryNodesProcessor::mids$ = NULL;
              bool RemoveDeletedQueryNodesProcessor::live$ = false;

              jclass RemoveDeletedQueryNodesProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/processors/RemoveDeletedQueryNodesProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              RemoveDeletedQueryNodesProcessor::RemoveDeletedQueryNodesProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode RemoveDeletedQueryNodesProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {
              static PyObject *t_RemoveDeletedQueryNodesProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RemoveDeletedQueryNodesProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_RemoveDeletedQueryNodesProcessor_init_(t_RemoveDeletedQueryNodesProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_RemoveDeletedQueryNodesProcessor_process(t_RemoveDeletedQueryNodesProcessor *self, PyObject *args);

              static PyMethodDef t_RemoveDeletedQueryNodesProcessor__methods_[] = {
                DECLARE_METHOD(t_RemoveDeletedQueryNodesProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RemoveDeletedQueryNodesProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RemoveDeletedQueryNodesProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(RemoveDeletedQueryNodesProcessor, t_RemoveDeletedQueryNodesProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, RemoveDeletedQueryNodesProcessor, t_RemoveDeletedQueryNodesProcessor_init_, 0, 0, 0, 0, 0);

              void t_RemoveDeletedQueryNodesProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(RemoveDeletedQueryNodesProcessor), module, "RemoveDeletedQueryNodesProcessor", 0);
              }

              void t_RemoveDeletedQueryNodesProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(RemoveDeletedQueryNodesProcessor).tp_dict, "class_", make_descriptor(RemoveDeletedQueryNodesProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(RemoveDeletedQueryNodesProcessor).tp_dict, "wrapfn_", make_descriptor(t_RemoveDeletedQueryNodesProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(RemoveDeletedQueryNodesProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_RemoveDeletedQueryNodesProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, RemoveDeletedQueryNodesProcessor::initializeClass, 1)))
                  return NULL;
                return t_RemoveDeletedQueryNodesProcessor::wrap_Object(RemoveDeletedQueryNodesProcessor(((t_RemoveDeletedQueryNodesProcessor *) arg)->object.this$));
              }
              static PyObject *t_RemoveDeletedQueryNodesProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, RemoveDeletedQueryNodesProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_RemoveDeletedQueryNodesProcessor_init_(t_RemoveDeletedQueryNodesProcessor *self, PyObject *args, PyObject *kwds)
              {
                RemoveDeletedQueryNodesProcessor object((jobject) NULL);

                INT_CALL(object = RemoveDeletedQueryNodesProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_RemoveDeletedQueryNodesProcessor_process(t_RemoveDeletedQueryNodesProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(RemoveDeletedQueryNodesProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/State.h"
#include "java/util/Comparator.h"
#include "java/util/Collection.h"
#include "java/lang/Comparable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/automaton/Transition.h"
#include "java/lang/Iterable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *State::class$ = NULL;
          jmethodID *State::mids$ = NULL;
          jfieldID *State::fids$ = NULL;
          bool State::live$ = false;

          jclass State::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/State");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_addTransition_8209dac4] = env->getMethodID(cls, "addTransition", "(Lorg/apache/lucene/util/automaton/Transition;)V");
              mids$[mid_compareTo_931bc94c] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/util/automaton/State;)I");
              mids$[mid_getNumber_54c6a179] = env->getMethodID(cls, "getNumber", "()I");
              mids$[mid_getTransitions_0ab6fc38] = env->getMethodID(cls, "getTransitions", "()Ljava/lang/Iterable;");
              mids$[mid_isAccept_54c6a16a] = env->getMethodID(cls, "isAccept", "()Z");
              mids$[mid_numTransitions_54c6a179] = env->getMethodID(cls, "numTransitions", "()I");
              mids$[mid_reduce_54c6a166] = env->getMethodID(cls, "reduce", "()V");
              mids$[mid_setAccept_bb0c767f] = env->getMethodID(cls, "setAccept", "(Z)V");
              mids$[mid_setTransitions_bc11dd38] = env->getMethodID(cls, "setTransitions", "([Lorg/apache/lucene/util/automaton/Transition;)V");
              mids$[mid_sortTransitions_6ffdd545] = env->getMethodID(cls, "sortTransitions", "(Ljava/util/Comparator;)V");
              mids$[mid_step_efd54f68] = env->getMethodID(cls, "step", "(I)Lorg/apache/lucene/util/automaton/State;");
              mids$[mid_step_006cd2bb] = env->getMethodID(cls, "step", "(ILjava/util/Collection;)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_trimTransitionsArray_54c6a166] = env->getMethodID(cls, "trimTransitionsArray", "()V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_numTransitions] = env->getFieldID(cls, "numTransitions", "I");
              fids$[fid_transitionsArray] = env->getFieldID(cls, "transitionsArray", "[Lorg/apache/lucene/util/automaton/Transition;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          State::State() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void State::addTransition(const ::org::apache::lucene::util::automaton::Transition & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_addTransition_8209dac4], a0.this$);
          }

          jint State::compareTo(const State & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_931bc94c], a0.this$);
          }

          jint State::getNumber() const
          {
            return env->callIntMethod(this$, mids$[mid_getNumber_54c6a179]);
          }

          ::java::lang::Iterable State::getTransitions() const
          {
            return ::java::lang::Iterable(env->callObjectMethod(this$, mids$[mid_getTransitions_0ab6fc38]));
          }

          jboolean State::isAccept() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isAccept_54c6a16a]);
          }

          jint State::numTransitions() const
          {
            return env->callIntMethod(this$, mids$[mid_numTransitions_54c6a179]);
          }

          void State::reduce() const
          {
            env->callVoidMethod(this$, mids$[mid_reduce_54c6a166]);
          }

          void State::setAccept(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAccept_bb0c767f], a0);
          }

          void State::setTransitions(const JArray< ::org::apache::lucene::util::automaton::Transition > & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTransitions_bc11dd38], a0.this$);
          }

          void State::sortTransitions(const ::java::util::Comparator & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_sortTransitions_6ffdd545], a0.this$);
          }

          State State::step(jint a0) const
          {
            return State(env->callObjectMethod(this$, mids$[mid_step_efd54f68], a0));
          }

          void State::step(jint a0, const ::java::util::Collection & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_step_006cd2bb], a0, a1.this$);
          }

          ::java::lang::String State::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          void State::trimTransitionsArray() const
          {
            env->callVoidMethod(this$, mids$[mid_trimTransitionsArray_54c6a166]);
          }

          jint State::_get_numTransitions() const
          {
            return env->getIntField(this$, fids$[fid_numTransitions]);
          }

          void State::_set_numTransitions(jint a0) const
          {
            env->setIntField(this$, fids$[fid_numTransitions], a0);
          }

          JArray< ::org::apache::lucene::util::automaton::Transition > State::_get_transitionsArray() const
          {
            return JArray< ::org::apache::lucene::util::automaton::Transition >(env->getObjectField(this$, fids$[fid_transitionsArray]));
          }

          void State::_set_transitionsArray(const JArray< ::org::apache::lucene::util::automaton::Transition > & a0) const
          {
            env->setObjectField(this$, fids$[fid_transitionsArray], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_State_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_State_instance_(PyTypeObject *type, PyObject *arg);
          static int t_State_init_(t_State *self, PyObject *args, PyObject *kwds);
          static PyObject *t_State_addTransition(t_State *self, PyObject *arg);
          static PyObject *t_State_compareTo(t_State *self, PyObject *arg);
          static PyObject *t_State_getNumber(t_State *self);
          static PyObject *t_State_getTransitions(t_State *self);
          static PyObject *t_State_isAccept(t_State *self);
          static PyObject *t_State_numTransitions(t_State *self);
          static PyObject *t_State_reduce(t_State *self);
          static PyObject *t_State_setAccept(t_State *self, PyObject *arg);
          static PyObject *t_State_setTransitions(t_State *self, PyObject *arg);
          static PyObject *t_State_sortTransitions(t_State *self, PyObject *arg);
          static PyObject *t_State_step(t_State *self, PyObject *args);
          static PyObject *t_State_toString(t_State *self, PyObject *args);
          static PyObject *t_State_trimTransitionsArray(t_State *self);
          static PyObject *t_State_get__numTransitions(t_State *self, void *data);
          static int t_State_set__numTransitions(t_State *self, PyObject *arg, void *data);
          static PyObject *t_State_get__transitionsArray(t_State *self, void *data);
          static int t_State_set__transitionsArray(t_State *self, PyObject *arg, void *data);

          static PyObject *t_State_get__accept(t_State *self, void *data);
          static int t_State_set__accept(t_State *self, PyObject *arg, void *data);
          static PyObject *t_State_get__number(t_State *self, void *data);
          static PyObject *t_State_get__transitions(t_State *self, void *data);
          static int t_State_set__transitions(t_State *self, PyObject *arg, void *data);
          static PyGetSetDef t_State__fields_[] = {
            DECLARE_GETSET_FIELD(t_State, numTransitions),
            DECLARE_GETSET_FIELD(t_State, transitionsArray),
            DECLARE_GETSET_FIELD(t_State, accept),
            DECLARE_GET_FIELD(t_State, number),
            DECLARE_GETSET_FIELD(t_State, transitions),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_State__methods_[] = {
            DECLARE_METHOD(t_State, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_State, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_State, addTransition, METH_O),
            DECLARE_METHOD(t_State, compareTo, METH_O),
            DECLARE_METHOD(t_State, getNumber, METH_NOARGS),
            DECLARE_METHOD(t_State, getTransitions, METH_NOARGS),
            DECLARE_METHOD(t_State, isAccept, METH_NOARGS),
            DECLARE_METHOD(t_State, numTransitions, METH_NOARGS),
            DECLARE_METHOD(t_State, reduce, METH_NOARGS),
            DECLARE_METHOD(t_State, setAccept, METH_O),
            DECLARE_METHOD(t_State, setTransitions, METH_O),
            DECLARE_METHOD(t_State, sortTransitions, METH_O),
            DECLARE_METHOD(t_State, step, METH_VARARGS),
            DECLARE_METHOD(t_State, toString, METH_VARARGS),
            DECLARE_METHOD(t_State, trimTransitionsArray, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(State, t_State, ::java::lang::Object, State, t_State_init_, 0, 0, t_State__fields_, 0, 0);

          void t_State::install(PyObject *module)
          {
            installType(&PY_TYPE(State), module, "State", 0);
          }

          void t_State::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(State).tp_dict, "class_", make_descriptor(State::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(State).tp_dict, "wrapfn_", make_descriptor(t_State::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(State).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_State_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, State::initializeClass, 1)))
              return NULL;
            return t_State::wrap_Object(State(((t_State *) arg)->object.this$));
          }
          static PyObject *t_State_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, State::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_State_init_(t_State *self, PyObject *args, PyObject *kwds)
          {
            State object((jobject) NULL);

            INT_CALL(object = State());
            self->object = object;

            return 0;
          }

          static PyObject *t_State_addTransition(t_State *self, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Transition a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Transition::initializeClass, &a0))
            {
              OBJ_CALL(self->object.addTransition(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addTransition", arg);
            return NULL;
          }

          static PyObject *t_State_compareTo(t_State *self, PyObject *arg)
          {
            State a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", State::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_State_getNumber(t_State *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNumber());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_State_getTransitions(t_State *self)
          {
            ::java::lang::Iterable result((jobject) NULL);
            OBJ_CALL(result = self->object.getTransitions());
            return ::java::lang::t_Iterable::wrap_Object(result, &::org::apache::lucene::util::automaton::PY_TYPE(Transition));
          }

          static PyObject *t_State_isAccept(t_State *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isAccept());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_State_numTransitions(t_State *self)
          {
            jint result;
            OBJ_CALL(result = self->object.numTransitions());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_State_reduce(t_State *self)
          {
            OBJ_CALL(self->object.reduce());
            Py_RETURN_NONE;
          }

          static PyObject *t_State_setAccept(t_State *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setAccept(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAccept", arg);
            return NULL;
          }

          static PyObject *t_State_setTransitions(t_State *self, PyObject *arg)
          {
            JArray< ::org::apache::lucene::util::automaton::Transition > a0((jobject) NULL);

            if (!parseArg(arg, "[k", ::org::apache::lucene::util::automaton::Transition::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setTransitions(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTransitions", arg);
            return NULL;
          }

          static PyObject *t_State_sortTransitions(t_State *self, PyObject *arg)
          {
            ::java::util::Comparator a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
            {
              OBJ_CALL(self->object.sortTransitions(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "sortTransitions", arg);
            return NULL;
          }

          static PyObject *t_State_step(t_State *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                State result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.step(a0));
                  return t_State::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                ::java::util::Collection a1((jobject) NULL);
                PyTypeObject **p1;

                if (!parseArgs(args, "IK", ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(self->object.step(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "step", args);
            return NULL;
          }

          static PyObject *t_State_toString(t_State *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(State), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_State_trimTransitionsArray(t_State *self)
          {
            OBJ_CALL(self->object.trimTransitionsArray());
            Py_RETURN_NONE;
          }

          static PyObject *t_State_get__numTransitions(t_State *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_numTransitions());
            return PyInt_FromLong((long) value);
          }
          static int t_State_set__numTransitions(t_State *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_numTransitions(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "numTransitions", arg);
            return -1;
          }

          static PyObject *t_State_get__transitionsArray(t_State *self, void *data)
          {
            JArray< ::org::apache::lucene::util::automaton::Transition > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_transitionsArray());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::util::automaton::t_Transition::wrap_jobject);
          }
          static int t_State_set__transitionsArray(t_State *self, PyObject *arg, void *data)
          {
            JArray< ::org::apache::lucene::util::automaton::Transition > value((jobject) NULL);
            if (!parseArg(arg, "[k", ::org::apache::lucene::util::automaton::Transition::initializeClass, &value))
            {
              INT_CALL(self->object._set_transitionsArray(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "transitionsArray", arg);
            return -1;
          }

          static PyObject *t_State_get__accept(t_State *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isAccept());
            Py_RETURN_BOOL(value);
          }
          static int t_State_set__accept(t_State *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAccept(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "accept", arg);
            return -1;
          }

          static PyObject *t_State_get__number(t_State *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNumber());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_State_get__transitions(t_State *self, void *data)
          {
            ::java::lang::Iterable value((jobject) NULL);
            OBJ_CALL(value = self->object.getTransitions());
            return ::java::lang::t_Iterable::wrap_Object(value);
          }
          static int t_State_set__transitions(t_State *self, PyObject *arg, void *data)
          {
            {
              JArray< ::org::apache::lucene::util::automaton::Transition > value((jobject) NULL);
              if (!parseArg(arg, "[k", ::org::apache::lucene::util::automaton::Transition::initializeClass, &value))
              {
                INT_CALL(self->object.setTransitions(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "transitions", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene42/Lucene42NormsFormat.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {

          ::java::lang::Class *Lucene42NormsFormat::class$ = NULL;
          jmethodID *Lucene42NormsFormat::mids$ = NULL;
          bool Lucene42NormsFormat::live$ = false;

          jclass Lucene42NormsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene42/Lucene42NormsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_normsConsumer_025deb44] = env->getMethodID(cls, "normsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_normsProducer_9b0d4e4a] = env->getMethodID(cls, "normsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene42NormsFormat::Lucene42NormsFormat() : ::org::apache::lucene::codecs::NormsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          Lucene42NormsFormat::Lucene42NormsFormat(jfloat a0) : ::org::apache::lucene::codecs::NormsFormat(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene42NormsFormat::normsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_normsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene42NormsFormat::normsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_normsProducer_9b0d4e4a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {
          static PyObject *t_Lucene42NormsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene42NormsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene42NormsFormat_init_(t_Lucene42NormsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene42NormsFormat_normsConsumer(t_Lucene42NormsFormat *self, PyObject *args);
          static PyObject *t_Lucene42NormsFormat_normsProducer(t_Lucene42NormsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene42NormsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene42NormsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42NormsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42NormsFormat, normsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42NormsFormat, normsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene42NormsFormat, t_Lucene42NormsFormat, ::org::apache::lucene::codecs::NormsFormat, Lucene42NormsFormat, t_Lucene42NormsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene42NormsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene42NormsFormat), module, "Lucene42NormsFormat", 0);
          }

          void t_Lucene42NormsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene42NormsFormat).tp_dict, "class_", make_descriptor(Lucene42NormsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene42NormsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene42NormsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene42NormsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene42NormsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene42NormsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene42NormsFormat::wrap_Object(Lucene42NormsFormat(((t_Lucene42NormsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene42NormsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene42NormsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene42NormsFormat_init_(t_Lucene42NormsFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Lucene42NormsFormat object((jobject) NULL);

                INT_CALL(object = Lucene42NormsFormat());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                Lucene42NormsFormat object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = Lucene42NormsFormat(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene42NormsFormat_normsConsumer(t_Lucene42NormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42NormsFormat), (PyObject *) self, "normsConsumer", args, 2);
          }

          static PyObject *t_Lucene42NormsFormat_normsProducer(t_Lucene42NormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42NormsFormat), (PyObject *) self, "normsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/WordlistLoader.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/CharArrayMap.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/io/Reader.h"
#include "java/io/InputStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *WordlistLoader::class$ = NULL;
          jmethodID *WordlistLoader::mids$ = NULL;
          bool WordlistLoader::live$ = false;

          jclass WordlistLoader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/WordlistLoader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getSnowballWordSet_f4ba7807] = env->getStaticMethodID(cls, "getSnowballWordSet", "(Ljava/io/Reader;Lorg/apache/lucene/analysis/util/CharArraySet;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_getSnowballWordSet_b3c09259] = env->getStaticMethodID(cls, "getSnowballWordSet", "(Ljava/io/Reader;Lorg/apache/lucene/util/Version;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_getStemDict_a82ef4ef] = env->getStaticMethodID(cls, "getStemDict", "(Ljava/io/Reader;Lorg/apache/lucene/analysis/util/CharArrayMap;)Lorg/apache/lucene/analysis/util/CharArrayMap;");
              mids$[mid_getWordSet_b3c09259] = env->getStaticMethodID(cls, "getWordSet", "(Ljava/io/Reader;Lorg/apache/lucene/util/Version;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_getWordSet_f4ba7807] = env->getStaticMethodID(cls, "getWordSet", "(Ljava/io/Reader;Lorg/apache/lucene/analysis/util/CharArraySet;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_getWordSet_47002787] = env->getStaticMethodID(cls, "getWordSet", "(Ljava/io/Reader;Ljava/lang/String;Lorg/apache/lucene/util/Version;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_getWordSet_24df331d] = env->getStaticMethodID(cls, "getWordSet", "(Ljava/io/Reader;Ljava/lang/String;Lorg/apache/lucene/analysis/util/CharArraySet;)Lorg/apache/lucene/analysis/util/CharArraySet;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::analysis::util::CharArraySet WordlistLoader::getSnowballWordSet(const ::java::io::Reader & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getSnowballWordSet_f4ba7807], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet WordlistLoader::getSnowballWordSet(const ::java::io::Reader & a0, const ::org::apache::lucene::util::Version & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getSnowballWordSet_b3c09259], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArrayMap WordlistLoader::getStemDict(const ::java::io::Reader & a0, const ::org::apache::lucene::analysis::util::CharArrayMap & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArrayMap(env->callStaticObjectMethod(cls, mids$[mid_getStemDict_a82ef4ef], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet WordlistLoader::getWordSet(const ::java::io::Reader & a0, const ::org::apache::lucene::util::Version & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getWordSet_b3c09259], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet WordlistLoader::getWordSet(const ::java::io::Reader & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getWordSet_f4ba7807], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet WordlistLoader::getWordSet(const ::java::io::Reader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::util::Version & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getWordSet_47002787], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet WordlistLoader::getWordSet(const ::java::io::Reader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getWordSet_24df331d], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_WordlistLoader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordlistLoader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordlistLoader_getSnowballWordSet(PyTypeObject *type, PyObject *args);
          static PyObject *t_WordlistLoader_getStemDict(PyTypeObject *type, PyObject *args);
          static PyObject *t_WordlistLoader_getWordSet(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_WordlistLoader__methods_[] = {
            DECLARE_METHOD(t_WordlistLoader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordlistLoader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordlistLoader, getSnowballWordSet, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_WordlistLoader, getStemDict, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_WordlistLoader, getWordSet, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WordlistLoader, t_WordlistLoader, ::java::lang::Object, WordlistLoader, abstract_init, 0, 0, 0, 0, 0);

          void t_WordlistLoader::install(PyObject *module)
          {
            installType(&PY_TYPE(WordlistLoader), module, "WordlistLoader", 0);
          }

          void t_WordlistLoader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WordlistLoader).tp_dict, "class_", make_descriptor(WordlistLoader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WordlistLoader).tp_dict, "wrapfn_", make_descriptor(t_WordlistLoader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WordlistLoader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WordlistLoader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordlistLoader::initializeClass, 1)))
              return NULL;
            return t_WordlistLoader::wrap_Object(WordlistLoader(((t_WordlistLoader *) arg)->object.this$));
          }
          static PyObject *t_WordlistLoader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordlistLoader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_WordlistLoader_getSnowballWordSet(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "kK", ::java::io::Reader::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getSnowballWordSet(a0, a1));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                ::org::apache::lucene::util::Version a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "kK", ::java::io::Reader::initializeClass, ::org::apache::lucene::util::Version::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getSnowballWordSet(a0, a1));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getSnowballWordSet", args);
            return NULL;
          }

          static PyObject *t_WordlistLoader_getStemDict(PyTypeObject *type, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::org::apache::lucene::analysis::util::CharArrayMap a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::analysis::util::CharArrayMap result((jobject) NULL);

            if (!parseArgs(args, "kK", ::java::io::Reader::initializeClass, ::org::apache::lucene::analysis::util::CharArrayMap::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArrayMap::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getStemDict(a0, a1));
              return ::org::apache::lucene::analysis::util::t_CharArrayMap::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            PyErr_SetArgsError(type, "getStemDict", args);
            return NULL;
          }

          static PyObject *t_WordlistLoader_getWordSet(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::org::apache::lucene::util::Version a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "kK", ::java::io::Reader::initializeClass, ::org::apache::lucene::util::Version::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getWordSet(a0, a1));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "kK", ::java::io::Reader::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getWordSet(a0, a1));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::util::Version a2((jobject) NULL);
                PyTypeObject **p2;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "ksK", ::java::io::Reader::initializeClass, ::org::apache::lucene::util::Version::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getWordSet(a0, a1, a2));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "ksK", ::java::io::Reader::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getWordSet(a0, a1, a2));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getWordSet", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/analysis/PythonTokenFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {

        ::java::lang::Class *PythonTokenFilter::class$ = NULL;
        jmethodID *PythonTokenFilter::mids$ = NULL;
        bool PythonTokenFilter::live$ = false;

        jclass PythonTokenFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/analysis/PythonTokenFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonTokenFilter::PythonTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

        void PythonTokenFilter::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonTokenFilter::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonTokenFilter::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {
        static PyObject *t_PythonTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonTokenFilter_init_(t_PythonTokenFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonTokenFilter_finalize(t_PythonTokenFilter *self);
        static PyObject *t_PythonTokenFilter_pythonExtension(t_PythonTokenFilter *self, PyObject *args);
        static jboolean JNICALL t_PythonTokenFilter_incrementToken0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonTokenFilter_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonTokenFilter_get__self(t_PythonTokenFilter *self, void *data);
        static PyGetSetDef t_PythonTokenFilter__fields_[] = {
          DECLARE_GET_FIELD(t_PythonTokenFilter, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonTokenFilter__methods_[] = {
          DECLARE_METHOD(t_PythonTokenFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenFilter, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonTokenFilter, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonTokenFilter, t_PythonTokenFilter, ::org::apache::lucene::analysis::TokenFilter, PythonTokenFilter, t_PythonTokenFilter_init_, 0, 0, t_PythonTokenFilter__fields_, 0, 0);

        void t_PythonTokenFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonTokenFilter), module, "PythonTokenFilter", 1);
        }

        void t_PythonTokenFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonTokenFilter).tp_dict, "class_", make_descriptor(PythonTokenFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_PythonTokenFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonTokenFilter::initializeClass);
          JNINativeMethod methods[] = {
            { "incrementToken", "()Z", (void *) t_PythonTokenFilter_incrementToken0 },
            { "pythonDecRef", "()V", (void *) t_PythonTokenFilter_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonTokenFilter::initializeClass, 1)))
            return NULL;
          return t_PythonTokenFilter::wrap_Object(PythonTokenFilter(((t_PythonTokenFilter *) arg)->object.this$));
        }
        static PyObject *t_PythonTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonTokenFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonTokenFilter_init_(t_PythonTokenFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
          PythonTokenFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
          {
            INT_CALL(object = PythonTokenFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonTokenFilter_finalize(t_PythonTokenFilter *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonTokenFilter_pythonExtension(t_PythonTokenFilter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jboolean JNICALL t_PythonTokenFilter_incrementToken0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenFilter::mids$[PythonTokenFilter::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "incrementToken", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("incrementToken", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonTokenFilter_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenFilter::mids$[PythonTokenFilter::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonTokenFilter::mids$[PythonTokenFilter::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonTokenFilter_get__self(t_PythonTokenFilter *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *ParallelTaxonomyArrays::class$ = NULL;
          jmethodID *ParallelTaxonomyArrays::mids$ = NULL;
          bool ParallelTaxonomyArrays::live$ = false;

          jclass ParallelTaxonomyArrays::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_children_dab10e75] = env->getMethodID(cls, "children", "()[I");
              mids$[mid_parents_dab10e75] = env->getMethodID(cls, "parents", "()[I");
              mids$[mid_siblings_dab10e75] = env->getMethodID(cls, "siblings", "()[I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ParallelTaxonomyArrays::ParallelTaxonomyArrays() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          JArray< jint > ParallelTaxonomyArrays::children() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_children_dab10e75]));
          }

          JArray< jint > ParallelTaxonomyArrays::parents() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_parents_dab10e75]));
          }

          JArray< jint > ParallelTaxonomyArrays::siblings() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_siblings_dab10e75]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_ParallelTaxonomyArrays_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ParallelTaxonomyArrays_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ParallelTaxonomyArrays_init_(t_ParallelTaxonomyArrays *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ParallelTaxonomyArrays_children(t_ParallelTaxonomyArrays *self);
          static PyObject *t_ParallelTaxonomyArrays_parents(t_ParallelTaxonomyArrays *self);
          static PyObject *t_ParallelTaxonomyArrays_siblings(t_ParallelTaxonomyArrays *self);

          static PyMethodDef t_ParallelTaxonomyArrays__methods_[] = {
            DECLARE_METHOD(t_ParallelTaxonomyArrays, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParallelTaxonomyArrays, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParallelTaxonomyArrays, children, METH_NOARGS),
            DECLARE_METHOD(t_ParallelTaxonomyArrays, parents, METH_NOARGS),
            DECLARE_METHOD(t_ParallelTaxonomyArrays, siblings, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ParallelTaxonomyArrays, t_ParallelTaxonomyArrays, ::java::lang::Object, ParallelTaxonomyArrays, t_ParallelTaxonomyArrays_init_, 0, 0, 0, 0, 0);

          void t_ParallelTaxonomyArrays::install(PyObject *module)
          {
            installType(&PY_TYPE(ParallelTaxonomyArrays), module, "ParallelTaxonomyArrays", 0);
          }

          void t_ParallelTaxonomyArrays::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ParallelTaxonomyArrays).tp_dict, "class_", make_descriptor(ParallelTaxonomyArrays::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ParallelTaxonomyArrays).tp_dict, "wrapfn_", make_descriptor(t_ParallelTaxonomyArrays::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ParallelTaxonomyArrays).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ParallelTaxonomyArrays_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ParallelTaxonomyArrays::initializeClass, 1)))
              return NULL;
            return t_ParallelTaxonomyArrays::wrap_Object(ParallelTaxonomyArrays(((t_ParallelTaxonomyArrays *) arg)->object.this$));
          }
          static PyObject *t_ParallelTaxonomyArrays_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ParallelTaxonomyArrays::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ParallelTaxonomyArrays_init_(t_ParallelTaxonomyArrays *self, PyObject *args, PyObject *kwds)
          {
            ParallelTaxonomyArrays object((jobject) NULL);

            INT_CALL(object = ParallelTaxonomyArrays());
            self->object = object;

            return 0;
          }

          static PyObject *t_ParallelTaxonomyArrays_children(t_ParallelTaxonomyArrays *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.children());
            return result.wrap();
          }

          static PyObject *t_ParallelTaxonomyArrays_parents(t_ParallelTaxonomyArrays *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.parents());
            return result.wrap();
          }

          static PyObject *t_ParallelTaxonomyArrays_siblings(t_ParallelTaxonomyArrays *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.siblings());
            return result.wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/TFIDFSimilarity.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/similarities/Similarity$SimWeight.h"
#include "org/apache/lucene/search/Explanation.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *TFIDFSimilarity::class$ = NULL;
          jmethodID *TFIDFSimilarity::mids$ = NULL;
          bool TFIDFSimilarity::live$ = false;

          jclass TFIDFSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/TFIDFSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeNorm_6ff84e0e] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_computeWeight_8bb6ee0b] = env->getMethodID(cls, "computeWeight", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimWeight;");
              mids$[mid_coord_d8d154b6] = env->getMethodID(cls, "coord", "(II)F");
              mids$[mid_decodeNormValue_0ee6df3f] = env->getMethodID(cls, "decodeNormValue", "(J)F");
              mids$[mid_encodeNormValue_06298cb7] = env->getMethodID(cls, "encodeNormValue", "(F)J");
              mids$[mid_idf_a7e12cb4] = env->getMethodID(cls, "idf", "(JJ)F");
              mids$[mid_idfExplain_9dde2121] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_idfExplain_be4c9f2b] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_lengthNorm_6ff84e02] = env->getMethodID(cls, "lengthNorm", "(Lorg/apache/lucene/index/FieldInvertState;)F");
              mids$[mid_queryNorm_06298cbb] = env->getMethodID(cls, "queryNorm", "(F)F");
              mids$[mid_scorePayload_ffd34a82] = env->getMethodID(cls, "scorePayload", "(IIILorg/apache/lucene/util/BytesRef;)F");
              mids$[mid_simScorer_9a2cfed8] = env->getMethodID(cls, "simScorer", "(Lorg/apache/lucene/search/similarities/Similarity$SimWeight;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");
              mids$[mid_sloppyFreq_39c7bd2c] = env->getMethodID(cls, "sloppyFreq", "(I)F");
              mids$[mid_tf_06298cbb] = env->getMethodID(cls, "tf", "(F)F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TFIDFSimilarity::TFIDFSimilarity() : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jlong TFIDFSimilarity::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ff84e0e], a0.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimWeight TFIDFSimilarity::computeWeight(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimWeight(env->callObjectMethod(this$, mids$[mid_computeWeight_8bb6ee0b], a0, a1.this$, a2.this$));
          }

          jfloat TFIDFSimilarity::coord(jint a0, jint a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_coord_d8d154b6], a0, a1);
          }

          jfloat TFIDFSimilarity::decodeNormValue(jlong a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_decodeNormValue_0ee6df3f], a0);
          }

          jlong TFIDFSimilarity::encodeNormValue(jfloat a0) const
          {
            return env->callLongMethod(this$, mids$[mid_encodeNormValue_06298cb7], a0);
          }

          jfloat TFIDFSimilarity::idf(jlong a0, jlong a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_idf_a7e12cb4], a0, a1);
          }

          ::org::apache::lucene::search::Explanation TFIDFSimilarity::idfExplain(const ::org::apache::lucene::search::CollectionStatistics & a0, const ::org::apache::lucene::search::TermStatistics & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_idfExplain_9dde2121], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::Explanation TFIDFSimilarity::idfExplain(const ::org::apache::lucene::search::CollectionStatistics & a0, const JArray< ::org::apache::lucene::search::TermStatistics > & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_idfExplain_be4c9f2b], a0.this$, a1.this$));
          }

          jfloat TFIDFSimilarity::lengthNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_lengthNorm_6ff84e02], a0.this$);
          }

          jfloat TFIDFSimilarity::queryNorm(jfloat a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_queryNorm_06298cbb], a0);
          }

          jfloat TFIDFSimilarity::scorePayload(jint a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_scorePayload_ffd34a82], a0, a1, a2, a3.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer TFIDFSimilarity::simScorer(const ::org::apache::lucene::search::similarities::Similarity$SimWeight & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_simScorer_9a2cfed8], a0.this$, a1.this$));
          }

          jfloat TFIDFSimilarity::sloppyFreq(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_sloppyFreq_39c7bd2c], a0);
          }

          jfloat TFIDFSimilarity::tf(jfloat a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_tf_06298cbb], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_TFIDFSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TFIDFSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TFIDFSimilarity_init_(t_TFIDFSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TFIDFSimilarity_computeNorm(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_computeWeight(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_coord(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_decodeNormValue(t_TFIDFSimilarity *self, PyObject *arg);
          static PyObject *t_TFIDFSimilarity_encodeNormValue(t_TFIDFSimilarity *self, PyObject *arg);
          static PyObject *t_TFIDFSimilarity_idf(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_idfExplain(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_lengthNorm(t_TFIDFSimilarity *self, PyObject *arg);
          static PyObject *t_TFIDFSimilarity_queryNorm(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_scorePayload(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_simScorer(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_sloppyFreq(t_TFIDFSimilarity *self, PyObject *arg);
          static PyObject *t_TFIDFSimilarity_tf(t_TFIDFSimilarity *self, PyObject *arg);

          static PyMethodDef t_TFIDFSimilarity__methods_[] = {
            DECLARE_METHOD(t_TFIDFSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TFIDFSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TFIDFSimilarity, computeNorm, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, computeWeight, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, coord, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, decodeNormValue, METH_O),
            DECLARE_METHOD(t_TFIDFSimilarity, encodeNormValue, METH_O),
            DECLARE_METHOD(t_TFIDFSimilarity, idf, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, idfExplain, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, lengthNorm, METH_O),
            DECLARE_METHOD(t_TFIDFSimilarity, queryNorm, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, scorePayload, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, simScorer, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, sloppyFreq, METH_O),
            DECLARE_METHOD(t_TFIDFSimilarity, tf, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TFIDFSimilarity, t_TFIDFSimilarity, ::org::apache::lucene::search::similarities::Similarity, TFIDFSimilarity, t_TFIDFSimilarity_init_, 0, 0, 0, 0, 0);

          void t_TFIDFSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(TFIDFSimilarity), module, "TFIDFSimilarity", 0);
          }

          void t_TFIDFSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TFIDFSimilarity).tp_dict, "class_", make_descriptor(TFIDFSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TFIDFSimilarity).tp_dict, "wrapfn_", make_descriptor(t_TFIDFSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TFIDFSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TFIDFSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TFIDFSimilarity::initializeClass, 1)))
              return NULL;
            return t_TFIDFSimilarity::wrap_Object(TFIDFSimilarity(((t_TFIDFSimilarity *) arg)->object.this$));
          }
          static PyObject *t_TFIDFSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TFIDFSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TFIDFSimilarity_init_(t_TFIDFSimilarity *self, PyObject *args, PyObject *kwds)
          {
            TFIDFSimilarity object((jobject) NULL);

            INT_CALL(object = TFIDFSimilarity());
            self->object = object;

            return 0;
          }

          static PyObject *t_TFIDFSimilarity_computeNorm(t_TFIDFSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(TFIDFSimilarity), (PyObject *) self, "computeNorm", args, 2);
          }

          static PyObject *t_TFIDFSimilarity_computeWeight(t_TFIDFSimilarity *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimWeight result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.computeWeight(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimWeight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TFIDFSimilarity), (PyObject *) self, "computeWeight", args, 2);
          }

          static PyObject *t_TFIDFSimilarity_coord(t_TFIDFSimilarity *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.coord(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(TFIDFSimilarity), (PyObject *) self, "coord", args, 2);
          }

          static PyObject *t_TFIDFSimilarity_decodeNormValue(t_TFIDFSimilarity *self, PyObject *arg)
          {
            jlong a0;
            jfloat result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.decodeNormValue(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "decodeNormValue", arg);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_encodeNormValue(t_TFIDFSimilarity *self, PyObject *arg)
          {
            jfloat a0;
            jlong result;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(result = self->object.encodeNormValue(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "encodeNormValue", arg);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_idf(t_TFIDFSimilarity *self, PyObject *args)
          {
            jlong a0;
            jlong a1;
            jfloat result;

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.idf(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "idf", args);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_idfExplain(t_TFIDFSimilarity *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::search::CollectionStatistics a0((jobject) NULL);
                ::org::apache::lucene::search::TermStatistics a1((jobject) NULL);
                ::org::apache::lucene::search::Explanation result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.idfExplain(a0, a1));
                  return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::search::CollectionStatistics a0((jobject) NULL);
                JArray< ::org::apache::lucene::search::TermStatistics > a1((jobject) NULL);
                ::org::apache::lucene::search::Explanation result((jobject) NULL);

                if (!parseArgs(args, "k[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.idfExplain(a0, a1));
                  return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "idfExplain", args);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_lengthNorm(t_TFIDFSimilarity *self, PyObject *arg)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jfloat result;

            if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.lengthNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "lengthNorm", arg);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_queryNorm(t_TFIDFSimilarity *self, PyObject *args)
          {
            jfloat a0;
            jfloat result;

            if (!parseArgs(args, "F", &a0))
            {
              OBJ_CALL(result = self->object.queryNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(TFIDFSimilarity), (PyObject *) self, "queryNorm", args, 2);
          }

          static PyObject *t_TFIDFSimilarity_scorePayload(t_TFIDFSimilarity *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "IIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.scorePayload(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "scorePayload", args);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_simScorer(t_TFIDFSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::Similarity$SimWeight a0((jobject) NULL);
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::similarities::Similarity$SimWeight::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.simScorer(a0, a1));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TFIDFSimilarity), (PyObject *) self, "simScorer", args, 2);
          }

          static PyObject *t_TFIDFSimilarity_sloppyFreq(t_TFIDFSimilarity *self, PyObject *arg)
          {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.sloppyFreq(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "sloppyFreq", arg);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_tf(t_TFIDFSimilarity *self, PyObject *arg)
          {
            jfloat a0;
            jfloat result;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(result = self->object.tf(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "tf", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/MergeState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40StoredFieldsWriter::class$ = NULL;
          jmethodID *Lucene40StoredFieldsWriter::mids$ = NULL;
          bool Lucene40StoredFieldsWriter::live$ = false;
          ::java::lang::String *Lucene40StoredFieldsWriter::FIELDS_EXTENSION = NULL;
          ::java::lang::String *Lucene40StoredFieldsWriter::FIELDS_INDEX_EXTENSION = NULL;

          jclass Lucene40StoredFieldsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1962ccd4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
              mids$[mid_abort_54c6a166] = env->getMethodID(cls, "abort", "()V");
              mids$[mid_addRawDocuments_9a4782ba] = env->getMethodID(cls, "addRawDocuments", "(Lorg/apache/lucene/store/IndexInput;[II)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_finish_48f050c2] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
              mids$[mid_finishDocument_54c6a166] = env->getMethodID(cls, "finishDocument", "()V");
              mids$[mid_merge_fd0cfdeb] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)I");
              mids$[mid_startDocument_54c6a166] = env->getMethodID(cls, "startDocument", "()V");
              mids$[mid_writeField_0de3c993] = env->getMethodID(cls, "writeField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/IndexableField;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              FIELDS_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "FIELDS_EXTENSION", "Ljava/lang/String;"));
              FIELDS_INDEX_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "FIELDS_INDEX_EXTENSION", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40StoredFieldsWriter::Lucene40StoredFieldsWriter(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) : ::org::apache::lucene::codecs::StoredFieldsWriter(env->newObject(initializeClass, &mids$, mid_init$_1962ccd4, a0.this$, a1.this$, a2.this$)) {}

          void Lucene40StoredFieldsWriter::abort() const
          {
            env->callVoidMethod(this$, mids$[mid_abort_54c6a166]);
          }

          void Lucene40StoredFieldsWriter::addRawDocuments(const ::org::apache::lucene::store::IndexInput & a0, const JArray< jint > & a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_addRawDocuments_9a4782ba], a0.this$, a1.this$, a2);
          }

          void Lucene40StoredFieldsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void Lucene40StoredFieldsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_finish_48f050c2], a0.this$, a1);
          }

          void Lucene40StoredFieldsWriter::finishDocument() const
          {
            env->callVoidMethod(this$, mids$[mid_finishDocument_54c6a166]);
          }

          jint Lucene40StoredFieldsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_merge_fd0cfdeb], a0.this$);
          }

          void Lucene40StoredFieldsWriter::startDocument() const
          {
            env->callVoidMethod(this$, mids$[mid_startDocument_54c6a166]);
          }

          void Lucene40StoredFieldsWriter::writeField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::IndexableField & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_writeField_0de3c993], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40StoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40StoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40StoredFieldsWriter_init_(t_Lucene40StoredFieldsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40StoredFieldsWriter_abort(t_Lucene40StoredFieldsWriter *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsWriter_addRawDocuments(t_Lucene40StoredFieldsWriter *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsWriter_close(t_Lucene40StoredFieldsWriter *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsWriter_finish(t_Lucene40StoredFieldsWriter *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsWriter_finishDocument(t_Lucene40StoredFieldsWriter *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsWriter_merge(t_Lucene40StoredFieldsWriter *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsWriter_startDocument(t_Lucene40StoredFieldsWriter *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsWriter_writeField(t_Lucene40StoredFieldsWriter *self, PyObject *args);

          static PyMethodDef t_Lucene40StoredFieldsWriter__methods_[] = {
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, abort, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, addRawDocuments, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, finish, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, finishDocument, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, merge, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, startDocument, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, writeField, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40StoredFieldsWriter, t_Lucene40StoredFieldsWriter, ::org::apache::lucene::codecs::StoredFieldsWriter, Lucene40StoredFieldsWriter, t_Lucene40StoredFieldsWriter_init_, 0, 0, 0, 0, 0);

          void t_Lucene40StoredFieldsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40StoredFieldsWriter), module, "Lucene40StoredFieldsWriter", 0);
          }

          void t_Lucene40StoredFieldsWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsWriter).tp_dict, "class_", make_descriptor(Lucene40StoredFieldsWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsWriter).tp_dict, "wrapfn_", make_descriptor(t_Lucene40StoredFieldsWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene40StoredFieldsWriter::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsWriter).tp_dict, "FIELDS_EXTENSION", make_descriptor(j2p(*Lucene40StoredFieldsWriter::FIELDS_EXTENSION)));
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsWriter).tp_dict, "FIELDS_INDEX_EXTENSION", make_descriptor(j2p(*Lucene40StoredFieldsWriter::FIELDS_INDEX_EXTENSION)));
          }

          static PyObject *t_Lucene40StoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40StoredFieldsWriter::initializeClass, 1)))
              return NULL;
            return t_Lucene40StoredFieldsWriter::wrap_Object(Lucene40StoredFieldsWriter(((t_Lucene40StoredFieldsWriter *) arg)->object.this$));
          }
          static PyObject *t_Lucene40StoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40StoredFieldsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40StoredFieldsWriter_init_(t_Lucene40StoredFieldsWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            Lucene40StoredFieldsWriter object((jobject) NULL);

            if (!parseArgs(args, "ksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = Lucene40StoredFieldsWriter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene40StoredFieldsWriter_abort(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.abort());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsWriter), (PyObject *) self, "abort", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsWriter_addRawDocuments(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            JArray< jint > a1((jobject) NULL);
            jint a2;

            if (!parseArgs(args, "k[II", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.addRawDocuments(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addRawDocuments", args);
            return NULL;
          }

          static PyObject *t_Lucene40StoredFieldsWriter_close(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsWriter_finish(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.finish(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsWriter), (PyObject *) self, "finish", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsWriter_finishDocument(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishDocument());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsWriter), (PyObject *) self, "finishDocument", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsWriter_merge(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::MergeState a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.merge(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsWriter), (PyObject *) self, "merge", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsWriter_startDocument(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.startDocument());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsWriter), (PyObject *) self, "startDocument", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsWriter_writeField(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::index::IndexableField a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::IndexableField::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.writeField(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsWriter), (PyObject *) self, "writeField", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/DirectSpellChecker.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "org/apache/lucene/search/spell/SuggestMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *DirectSpellChecker::class$ = NULL;
          jmethodID *DirectSpellChecker::mids$ = NULL;
          bool DirectSpellChecker::live$ = false;
          ::org::apache::lucene::search::spell::StringDistance *DirectSpellChecker::INTERNAL_LEVENSHTEIN = NULL;

          jclass DirectSpellChecker::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/DirectSpellChecker");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getAccuracy_54c6a176] = env->getMethodID(cls, "getAccuracy", "()F");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_getDistance_a5face5e] = env->getMethodID(cls, "getDistance", "()Lorg/apache/lucene/search/spell/StringDistance;");
              mids$[mid_getLowerCaseTerms_54c6a16a] = env->getMethodID(cls, "getLowerCaseTerms", "()Z");
              mids$[mid_getMaxEdits_54c6a179] = env->getMethodID(cls, "getMaxEdits", "()I");
              mids$[mid_getMaxInspections_54c6a179] = env->getMethodID(cls, "getMaxInspections", "()I");
              mids$[mid_getMaxQueryFrequency_54c6a176] = env->getMethodID(cls, "getMaxQueryFrequency", "()F");
              mids$[mid_getMinPrefix_54c6a179] = env->getMethodID(cls, "getMinPrefix", "()I");
              mids$[mid_getMinQueryLength_54c6a179] = env->getMethodID(cls, "getMinQueryLength", "()I");
              mids$[mid_getThresholdFrequency_54c6a176] = env->getMethodID(cls, "getThresholdFrequency", "()F");
              mids$[mid_setAccuracy_06298cab] = env->getMethodID(cls, "setAccuracy", "(F)V");
              mids$[mid_setComparator_6ffdd545] = env->getMethodID(cls, "setComparator", "(Ljava/util/Comparator;)V");
              mids$[mid_setDistance_9c934047] = env->getMethodID(cls, "setDistance", "(Lorg/apache/lucene/search/spell/StringDistance;)V");
              mids$[mid_setLowerCaseTerms_bb0c767f] = env->getMethodID(cls, "setLowerCaseTerms", "(Z)V");
              mids$[mid_setMaxEdits_39c7bd3c] = env->getMethodID(cls, "setMaxEdits", "(I)V");
              mids$[mid_setMaxInspections_39c7bd3c] = env->getMethodID(cls, "setMaxInspections", "(I)V");
              mids$[mid_setMaxQueryFrequency_06298cab] = env->getMethodID(cls, "setMaxQueryFrequency", "(F)V");
              mids$[mid_setMinPrefix_39c7bd3c] = env->getMethodID(cls, "setMinPrefix", "(I)V");
              mids$[mid_setMinQueryLength_39c7bd3c] = env->getMethodID(cls, "setMinQueryLength", "(I)V");
              mids$[mid_setThresholdFrequency_06298cab] = env->getMethodID(cls, "setThresholdFrequency", "(F)V");
              mids$[mid_suggestSimilar_45727077] = env->getMethodID(cls, "suggestSimilar", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;)[Lorg/apache/lucene/search/spell/SuggestWord;");
              mids$[mid_suggestSimilar_cd50864e] = env->getMethodID(cls, "suggestSimilar", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/spell/SuggestMode;)[Lorg/apache/lucene/search/spell/SuggestWord;");
              mids$[mid_suggestSimilar_96cb19cd] = env->getMethodID(cls, "suggestSimilar", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/spell/SuggestMode;F)[Lorg/apache/lucene/search/spell/SuggestWord;");
              mids$[mid_suggestSimilar_dc649c5f] = env->getMethodID(cls, "suggestSimilar", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;IIFLorg/apache/lucene/util/CharsRef;)Ljava/util/Collection;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              INTERNAL_LEVENSHTEIN = new ::org::apache::lucene::search::spell::StringDistance(env->getStaticObjectField(cls, "INTERNAL_LEVENSHTEIN", "Lorg/apache/lucene/search/spell/StringDistance;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DirectSpellChecker::DirectSpellChecker() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat DirectSpellChecker::getAccuracy() const
          {
            return env->callFloatMethod(this$, mids$[mid_getAccuracy_54c6a176]);
          }

          ::java::util::Comparator DirectSpellChecker::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          ::org::apache::lucene::search::spell::StringDistance DirectSpellChecker::getDistance() const
          {
            return ::org::apache::lucene::search::spell::StringDistance(env->callObjectMethod(this$, mids$[mid_getDistance_a5face5e]));
          }

          jboolean DirectSpellChecker::getLowerCaseTerms() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getLowerCaseTerms_54c6a16a]);
          }

          jint DirectSpellChecker::getMaxEdits() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxEdits_54c6a179]);
          }

          jint DirectSpellChecker::getMaxInspections() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxInspections_54c6a179]);
          }

          jfloat DirectSpellChecker::getMaxQueryFrequency() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMaxQueryFrequency_54c6a176]);
          }

          jint DirectSpellChecker::getMinPrefix() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinPrefix_54c6a179]);
          }

          jint DirectSpellChecker::getMinQueryLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinQueryLength_54c6a179]);
          }

          jfloat DirectSpellChecker::getThresholdFrequency() const
          {
            return env->callFloatMethod(this$, mids$[mid_getThresholdFrequency_54c6a176]);
          }

          void DirectSpellChecker::setAccuracy(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAccuracy_06298cab], a0);
          }

          void DirectSpellChecker::setComparator(const ::java::util::Comparator & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setComparator_6ffdd545], a0.this$);
          }

          void DirectSpellChecker::setDistance(const ::org::apache::lucene::search::spell::StringDistance & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDistance_9c934047], a0.this$);
          }

          void DirectSpellChecker::setLowerCaseTerms(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setLowerCaseTerms_bb0c767f], a0);
          }

          void DirectSpellChecker::setMaxEdits(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxEdits_39c7bd3c], a0);
          }

          void DirectSpellChecker::setMaxInspections(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxInspections_39c7bd3c], a0);
          }

          void DirectSpellChecker::setMaxQueryFrequency(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxQueryFrequency_06298cab], a0);
          }

          void DirectSpellChecker::setMinPrefix(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinPrefix_39c7bd3c], a0);
          }

          void DirectSpellChecker::setMinQueryLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinQueryLength_39c7bd3c], a0);
          }

          void DirectSpellChecker::setThresholdFrequency(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setThresholdFrequency_06298cab], a0);
          }

          JArray< ::org::apache::lucene::search::spell::SuggestWord > DirectSpellChecker::suggestSimilar(const ::org::apache::lucene::index::Term & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2) const
          {
            return JArray< ::org::apache::lucene::search::spell::SuggestWord >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_45727077], a0.this$, a1, a2.this$));
          }

          JArray< ::org::apache::lucene::search::spell::SuggestWord > DirectSpellChecker::suggestSimilar(const ::org::apache::lucene::index::Term & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::org::apache::lucene::search::spell::SuggestMode & a3) const
          {
            return JArray< ::org::apache::lucene::search::spell::SuggestWord >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_cd50864e], a0.this$, a1, a2.this$, a3.this$));
          }

          JArray< ::org::apache::lucene::search::spell::SuggestWord > DirectSpellChecker::suggestSimilar(const ::org::apache::lucene::index::Term & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::org::apache::lucene::search::spell::SuggestMode & a3, jfloat a4) const
          {
            return JArray< ::org::apache::lucene::search::spell::SuggestWord >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_96cb19cd], a0.this$, a1, a2.this$, a3.this$, a4));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_DirectSpellChecker_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectSpellChecker_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DirectSpellChecker_init_(t_DirectSpellChecker *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DirectSpellChecker_getAccuracy(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getComparator(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getDistance(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getLowerCaseTerms(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getMaxEdits(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getMaxInspections(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getMaxQueryFrequency(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getMinPrefix(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getMinQueryLength(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getThresholdFrequency(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_setAccuracy(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setComparator(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setDistance(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setLowerCaseTerms(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setMaxEdits(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setMaxInspections(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setMaxQueryFrequency(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setMinPrefix(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setMinQueryLength(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setThresholdFrequency(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_suggestSimilar(t_DirectSpellChecker *self, PyObject *args);
          static PyObject *t_DirectSpellChecker_get__accuracy(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__accuracy(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__comparator(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__comparator(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__distance(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__distance(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__lowerCaseTerms(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__lowerCaseTerms(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__maxEdits(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__maxEdits(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__maxInspections(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__maxInspections(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__maxQueryFrequency(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__maxQueryFrequency(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__minPrefix(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__minPrefix(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__minQueryLength(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__minQueryLength(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__thresholdFrequency(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__thresholdFrequency(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyGetSetDef t_DirectSpellChecker__fields_[] = {
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, accuracy),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, comparator),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, distance),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, lowerCaseTerms),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, maxEdits),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, maxInspections),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, maxQueryFrequency),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, minPrefix),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, minQueryLength),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, thresholdFrequency),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DirectSpellChecker__methods_[] = {
            DECLARE_METHOD(t_DirectSpellChecker, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectSpellChecker, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectSpellChecker, getAccuracy, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getDistance, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getLowerCaseTerms, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getMaxEdits, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getMaxInspections, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getMaxQueryFrequency, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getMinPrefix, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getMinQueryLength, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getThresholdFrequency, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, setAccuracy, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setComparator, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setDistance, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setLowerCaseTerms, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setMaxEdits, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setMaxInspections, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setMaxQueryFrequency, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setMinPrefix, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setMinQueryLength, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setThresholdFrequency, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, suggestSimilar, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DirectSpellChecker, t_DirectSpellChecker, ::java::lang::Object, DirectSpellChecker, t_DirectSpellChecker_init_, 0, 0, t_DirectSpellChecker__fields_, 0, 0);

          void t_DirectSpellChecker::install(PyObject *module)
          {
            installType(&PY_TYPE(DirectSpellChecker), module, "DirectSpellChecker", 0);
          }

          void t_DirectSpellChecker::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DirectSpellChecker).tp_dict, "class_", make_descriptor(DirectSpellChecker::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DirectSpellChecker).tp_dict, "wrapfn_", make_descriptor(t_DirectSpellChecker::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DirectSpellChecker).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DirectSpellChecker::initializeClass);
            PyDict_SetItemString(PY_TYPE(DirectSpellChecker).tp_dict, "INTERNAL_LEVENSHTEIN", make_descriptor(::org::apache::lucene::search::spell::t_StringDistance::wrap_Object(*DirectSpellChecker::INTERNAL_LEVENSHTEIN)));
          }

          static PyObject *t_DirectSpellChecker_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DirectSpellChecker::initializeClass, 1)))
              return NULL;
            return t_DirectSpellChecker::wrap_Object(DirectSpellChecker(((t_DirectSpellChecker *) arg)->object.this$));
          }
          static PyObject *t_DirectSpellChecker_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DirectSpellChecker::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DirectSpellChecker_init_(t_DirectSpellChecker *self, PyObject *args, PyObject *kwds)
          {
            DirectSpellChecker object((jobject) NULL);

            INT_CALL(object = DirectSpellChecker());
            self->object = object;

            return 0;
          }

          static PyObject *t_DirectSpellChecker_getAccuracy(t_DirectSpellChecker *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getAccuracy());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_DirectSpellChecker_getComparator(t_DirectSpellChecker *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::search::spell::PY_TYPE(SuggestWord));
          }

          static PyObject *t_DirectSpellChecker_getDistance(t_DirectSpellChecker *self)
          {
            ::org::apache::lucene::search::spell::StringDistance result((jobject) NULL);
            OBJ_CALL(result = self->object.getDistance());
            return ::org::apache::lucene::search::spell::t_StringDistance::wrap_Object(result);
          }

          static PyObject *t_DirectSpellChecker_getLowerCaseTerms(t_DirectSpellChecker *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getLowerCaseTerms());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_DirectSpellChecker_getMaxEdits(t_DirectSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxEdits());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_DirectSpellChecker_getMaxInspections(t_DirectSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxInspections());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_DirectSpellChecker_getMaxQueryFrequency(t_DirectSpellChecker *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMaxQueryFrequency());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_DirectSpellChecker_getMinPrefix(t_DirectSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinPrefix());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_DirectSpellChecker_getMinQueryLength(t_DirectSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinQueryLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_DirectSpellChecker_getThresholdFrequency(t_DirectSpellChecker *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getThresholdFrequency());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_DirectSpellChecker_setAccuracy(t_DirectSpellChecker *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setAccuracy(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAccuracy", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setComparator(t_DirectSpellChecker *self, PyObject *arg)
          {
            ::java::util::Comparator a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
            {
              OBJ_CALL(self->object.setComparator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setComparator", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setDistance(t_DirectSpellChecker *self, PyObject *arg)
          {
            ::org::apache::lucene::search::spell::StringDistance a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::spell::StringDistance::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setDistance(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDistance", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setLowerCaseTerms(t_DirectSpellChecker *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setLowerCaseTerms(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLowerCaseTerms", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setMaxEdits(t_DirectSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxEdits(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxEdits", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setMaxInspections(t_DirectSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxInspections(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxInspections", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setMaxQueryFrequency(t_DirectSpellChecker *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setMaxQueryFrequency(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxQueryFrequency", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setMinPrefix(t_DirectSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinPrefix(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinPrefix", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setMinQueryLength(t_DirectSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinQueryLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinQueryLength", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setThresholdFrequency(t_DirectSpellChecker *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setThresholdFrequency(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setThresholdFrequency", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_suggestSimilar(t_DirectSpellChecker *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                JArray< ::org::apache::lucene::search::spell::SuggestWord > result((jobject) NULL);

                if (!parseArgs(args, "kIk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spell::t_SuggestWord::wrap_jobject);
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                ::org::apache::lucene::search::spell::SuggestMode a3((jobject) NULL);
                PyTypeObject **p3;
                JArray< ::org::apache::lucene::search::spell::SuggestWord > result((jobject) NULL);

                if (!parseArgs(args, "kIkK", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2, a3));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spell::t_SuggestWord::wrap_jobject);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                ::org::apache::lucene::search::spell::SuggestMode a3((jobject) NULL);
                PyTypeObject **p3;
                jfloat a4;
                JArray< ::org::apache::lucene::search::spell::SuggestWord > result((jobject) NULL);

                if (!parseArgs(args, "kIkKF", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_, &a4))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2, a3, a4));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spell::t_SuggestWord::wrap_jobject);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "suggestSimilar", args);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_get__accuracy(t_DirectSpellChecker *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getAccuracy());
            return PyFloat_FromDouble((double) value);
          }
          static int t_DirectSpellChecker_set__accuracy(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setAccuracy(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "accuracy", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__comparator(t_DirectSpellChecker *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
          static int t_DirectSpellChecker_set__comparator(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Comparator value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Comparator::initializeClass, &value))
              {
                INT_CALL(self->object.setComparator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "comparator", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__distance(t_DirectSpellChecker *self, void *data)
          {
            ::org::apache::lucene::search::spell::StringDistance value((jobject) NULL);
            OBJ_CALL(value = self->object.getDistance());
            return ::org::apache::lucene::search::spell::t_StringDistance::wrap_Object(value);
          }
          static int t_DirectSpellChecker_set__distance(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::spell::StringDistance value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::spell::StringDistance::initializeClass, &value))
              {
                INT_CALL(self->object.setDistance(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "distance", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__lowerCaseTerms(t_DirectSpellChecker *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getLowerCaseTerms());
            Py_RETURN_BOOL(value);
          }
          static int t_DirectSpellChecker_set__lowerCaseTerms(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setLowerCaseTerms(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "lowerCaseTerms", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__maxEdits(t_DirectSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxEdits());
            return PyInt_FromLong((long) value);
          }
          static int t_DirectSpellChecker_set__maxEdits(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxEdits(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxEdits", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__maxInspections(t_DirectSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxInspections());
            return PyInt_FromLong((long) value);
          }
          static int t_DirectSpellChecker_set__maxInspections(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxInspections(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxInspections", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__maxQueryFrequency(t_DirectSpellChecker *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMaxQueryFrequency());
            return PyFloat_FromDouble((double) value);
          }
          static int t_DirectSpellChecker_set__maxQueryFrequency(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setMaxQueryFrequency(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxQueryFrequency", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__minPrefix(t_DirectSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinPrefix());
            return PyInt_FromLong((long) value);
          }
          static int t_DirectSpellChecker_set__minPrefix(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinPrefix(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minPrefix", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__minQueryLength(t_DirectSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinQueryLength());
            return PyInt_FromLong((long) value);
          }
          static int t_DirectSpellChecker_set__minQueryLength(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinQueryLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minQueryLength", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__thresholdFrequency(t_DirectSpellChecker *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getThresholdFrequency());
            return PyFloat_FromDouble((double) value);
          }
          static int t_DirectSpellChecker_set__thresholdFrequency(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setThresholdFrequency(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "thresholdFrequency", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/ClassicAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *ClassicAnalyzer::class$ = NULL;
          jmethodID *ClassicAnalyzer::mids$ = NULL;
          bool ClassicAnalyzer::live$ = false;
          jint ClassicAnalyzer::DEFAULT_MAX_TOKEN_LENGTH = (jint) 0;
          ::org::apache::lucene::analysis::util::CharArraySet *ClassicAnalyzer::STOP_WORDS_SET = NULL;

          jclass ClassicAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/ClassicAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getMaxTokenLength_54c6a179] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_setMaxTokenLength_39c7bd3c] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_TOKEN_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_TOKEN_LENGTH");
              STOP_WORDS_SET = new ::org::apache::lucene::analysis::util::CharArraySet(env->getStaticObjectField(cls, "STOP_WORDS_SET", "Lorg/apache/lucene/analysis/util/CharArraySet;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClassicAnalyzer::ClassicAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          ClassicAnalyzer::ClassicAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          ClassicAnalyzer::ClassicAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          jint ClassicAnalyzer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_54c6a179]);
          }

          void ClassicAnalyzer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_ClassicAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClassicAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClassicAnalyzer_init_(t_ClassicAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClassicAnalyzer_getMaxTokenLength(t_ClassicAnalyzer *self);
          static PyObject *t_ClassicAnalyzer_setMaxTokenLength(t_ClassicAnalyzer *self, PyObject *arg);
          static PyObject *t_ClassicAnalyzer_get__maxTokenLength(t_ClassicAnalyzer *self, void *data);
          static int t_ClassicAnalyzer_set__maxTokenLength(t_ClassicAnalyzer *self, PyObject *arg, void *data);
          static PyGetSetDef t_ClassicAnalyzer__fields_[] = {
            DECLARE_GETSET_FIELD(t_ClassicAnalyzer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ClassicAnalyzer__methods_[] = {
            DECLARE_METHOD(t_ClassicAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicAnalyzer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_ClassicAnalyzer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ClassicAnalyzer, t_ClassicAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, ClassicAnalyzer, t_ClassicAnalyzer_init_, 0, 0, t_ClassicAnalyzer__fields_, 0, 0);

          void t_ClassicAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(ClassicAnalyzer), module, "ClassicAnalyzer", 0);
          }

          void t_ClassicAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ClassicAnalyzer).tp_dict, "class_", make_descriptor(ClassicAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ClassicAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_ClassicAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ClassicAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ClassicAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ClassicAnalyzer).tp_dict, "DEFAULT_MAX_TOKEN_LENGTH", make_descriptor(ClassicAnalyzer::DEFAULT_MAX_TOKEN_LENGTH));
            PyDict_SetItemString(PY_TYPE(ClassicAnalyzer).tp_dict, "STOP_WORDS_SET", make_descriptor(::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(*ClassicAnalyzer::STOP_WORDS_SET)));
          }

          static PyObject *t_ClassicAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClassicAnalyzer::initializeClass, 1)))
              return NULL;
            return t_ClassicAnalyzer::wrap_Object(ClassicAnalyzer(((t_ClassicAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_ClassicAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClassicAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClassicAnalyzer_init_(t_ClassicAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ClassicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = ClassicAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                ClassicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = ClassicAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ClassicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ClassicAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClassicAnalyzer_getMaxTokenLength(t_ClassicAnalyzer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_ClassicAnalyzer_setMaxTokenLength(t_ClassicAnalyzer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_ClassicAnalyzer_get__maxTokenLength(t_ClassicAnalyzer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) value);
          }
          static int t_ClassicAnalyzer_set__maxTokenLength(t_ClassicAnalyzer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/MatchAllDocsQueryNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *MatchAllDocsQueryNode::class$ = NULL;
              jmethodID *MatchAllDocsQueryNode::mids$ = NULL;
              bool MatchAllDocsQueryNode::live$ = false;

              jclass MatchAllDocsQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/MatchAllDocsQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_cloneTree_54ec1c5f] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/MatchAllDocsQueryNode;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MatchAllDocsQueryNode::MatchAllDocsQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              MatchAllDocsQueryNode MatchAllDocsQueryNode::cloneTree() const
              {
                return MatchAllDocsQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_54ec1c5f]));
              }

              ::java::lang::CharSequence MatchAllDocsQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String MatchAllDocsQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_MatchAllDocsQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MatchAllDocsQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MatchAllDocsQueryNode_init_(t_MatchAllDocsQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MatchAllDocsQueryNode_cloneTree(t_MatchAllDocsQueryNode *self, PyObject *args);
              static PyObject *t_MatchAllDocsQueryNode_toQueryString(t_MatchAllDocsQueryNode *self, PyObject *args);
              static PyObject *t_MatchAllDocsQueryNode_toString(t_MatchAllDocsQueryNode *self, PyObject *args);

              static PyMethodDef t_MatchAllDocsQueryNode__methods_[] = {
                DECLARE_METHOD(t_MatchAllDocsQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchAllDocsQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchAllDocsQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_MatchAllDocsQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_MatchAllDocsQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MatchAllDocsQueryNode, t_MatchAllDocsQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, MatchAllDocsQueryNode, t_MatchAllDocsQueryNode_init_, 0, 0, 0, 0, 0);

              void t_MatchAllDocsQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(MatchAllDocsQueryNode), module, "MatchAllDocsQueryNode", 0);
              }

              void t_MatchAllDocsQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNode).tp_dict, "class_", make_descriptor(MatchAllDocsQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNode).tp_dict, "wrapfn_", make_descriptor(t_MatchAllDocsQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MatchAllDocsQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MatchAllDocsQueryNode::initializeClass, 1)))
                  return NULL;
                return t_MatchAllDocsQueryNode::wrap_Object(MatchAllDocsQueryNode(((t_MatchAllDocsQueryNode *) arg)->object.this$));
              }
              static PyObject *t_MatchAllDocsQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MatchAllDocsQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MatchAllDocsQueryNode_init_(t_MatchAllDocsQueryNode *self, PyObject *args, PyObject *kwds)
              {
                MatchAllDocsQueryNode object((jobject) NULL);

                INT_CALL(object = MatchAllDocsQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_MatchAllDocsQueryNode_cloneTree(t_MatchAllDocsQueryNode *self, PyObject *args)
              {
                MatchAllDocsQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_MatchAllDocsQueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(MatchAllDocsQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_MatchAllDocsQueryNode_toQueryString(t_MatchAllDocsQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(MatchAllDocsQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_MatchAllDocsQueryNode_toString(t_MatchAllDocsQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(MatchAllDocsQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/DuplicateFilterBuilder.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Filter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *DuplicateFilterBuilder::class$ = NULL;
            jmethodID *DuplicateFilterBuilder::mids$ = NULL;
            bool DuplicateFilterBuilder::live$ = false;

            jclass DuplicateFilterBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/DuplicateFilterBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DuplicateFilterBuilder::DuplicateFilterBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_DuplicateFilterBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DuplicateFilterBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DuplicateFilterBuilder_init_(t_DuplicateFilterBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_DuplicateFilterBuilder__methods_[] = {
              DECLARE_METHOD(t_DuplicateFilterBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DuplicateFilterBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DuplicateFilterBuilder, t_DuplicateFilterBuilder, ::java::lang::Object, DuplicateFilterBuilder, t_DuplicateFilterBuilder_init_, 0, 0, 0, 0, 0);

            void t_DuplicateFilterBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(DuplicateFilterBuilder), module, "DuplicateFilterBuilder", 0);
            }

            void t_DuplicateFilterBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DuplicateFilterBuilder).tp_dict, "class_", make_descriptor(DuplicateFilterBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DuplicateFilterBuilder).tp_dict, "wrapfn_", make_descriptor(t_DuplicateFilterBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DuplicateFilterBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DuplicateFilterBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DuplicateFilterBuilder::initializeClass, 1)))
                return NULL;
              return t_DuplicateFilterBuilder::wrap_Object(DuplicateFilterBuilder(((t_DuplicateFilterBuilder *) arg)->object.this$));
            }
            static PyObject *t_DuplicateFilterBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DuplicateFilterBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DuplicateFilterBuilder_init_(t_DuplicateFilterBuilder *self, PyObject *args, PyObject *kwds)
            {
              DuplicateFilterBuilder object((jobject) NULL);

              INT_CALL(object = DuplicateFilterBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocTermOrdsRangeFilter.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocTermOrdsRangeFilter::class$ = NULL;
        jmethodID *DocTermOrdsRangeFilter::mids$ = NULL;
        bool DocTermOrdsRangeFilter::live$ = false;

        jclass DocTermOrdsRangeFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocTermOrdsRangeFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_getLowerVal_4ae19461] = env->getMethodID(cls, "getLowerVal", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getUpperVal_4ae19461] = env->getMethodID(cls, "getUpperVal", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_includesLower_54c6a16a] = env->getMethodID(cls, "includesLower", "()Z");
            mids$[mid_includesUpper_54c6a16a] = env->getMethodID(cls, "includesUpper", "()Z");
            mids$[mid_newBytesRefRange_a12b5d0e] = env->getStaticMethodID(cls, "newBytesRefRange", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;ZZ)Lorg/apache/lucene/search/DocTermOrdsRangeFilter;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean DocTermOrdsRangeFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet DocTermOrdsRangeFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::java::lang::String DocTermOrdsRangeFilter::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
        }

        ::org::apache::lucene::util::BytesRef DocTermOrdsRangeFilter::getLowerVal() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getLowerVal_4ae19461]));
        }

        ::org::apache::lucene::util::BytesRef DocTermOrdsRangeFilter::getUpperVal() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getUpperVal_4ae19461]));
        }

        jint DocTermOrdsRangeFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean DocTermOrdsRangeFilter::includesLower() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesLower_54c6a16a]);
        }

        jboolean DocTermOrdsRangeFilter::includesUpper() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesUpper_54c6a16a]);
        }

        DocTermOrdsRangeFilter DocTermOrdsRangeFilter::newBytesRefRange(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::util::BytesRef & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return DocTermOrdsRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newBytesRefRange_a12b5d0e], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        ::java::lang::String DocTermOrdsRangeFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocTermOrdsRangeFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocTermOrdsRangeFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocTermOrdsRangeFilter_equals(t_DocTermOrdsRangeFilter *self, PyObject *args);
        static PyObject *t_DocTermOrdsRangeFilter_getDocIdSet(t_DocTermOrdsRangeFilter *self, PyObject *args);
        static PyObject *t_DocTermOrdsRangeFilter_getField(t_DocTermOrdsRangeFilter *self);
        static PyObject *t_DocTermOrdsRangeFilter_getLowerVal(t_DocTermOrdsRangeFilter *self);
        static PyObject *t_DocTermOrdsRangeFilter_getUpperVal(t_DocTermOrdsRangeFilter *self);
        static PyObject *t_DocTermOrdsRangeFilter_hashCode(t_DocTermOrdsRangeFilter *self, PyObject *args);
        static PyObject *t_DocTermOrdsRangeFilter_includesLower(t_DocTermOrdsRangeFilter *self);
        static PyObject *t_DocTermOrdsRangeFilter_includesUpper(t_DocTermOrdsRangeFilter *self);
        static PyObject *t_DocTermOrdsRangeFilter_newBytesRefRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocTermOrdsRangeFilter_toString(t_DocTermOrdsRangeFilter *self, PyObject *args);
        static PyObject *t_DocTermOrdsRangeFilter_get__field(t_DocTermOrdsRangeFilter *self, void *data);
        static PyObject *t_DocTermOrdsRangeFilter_get__lowerVal(t_DocTermOrdsRangeFilter *self, void *data);
        static PyObject *t_DocTermOrdsRangeFilter_get__upperVal(t_DocTermOrdsRangeFilter *self, void *data);
        static PyGetSetDef t_DocTermOrdsRangeFilter__fields_[] = {
          DECLARE_GET_FIELD(t_DocTermOrdsRangeFilter, field),
          DECLARE_GET_FIELD(t_DocTermOrdsRangeFilter, lowerVal),
          DECLARE_GET_FIELD(t_DocTermOrdsRangeFilter, upperVal),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocTermOrdsRangeFilter__methods_[] = {
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, getField, METH_NOARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, getLowerVal, METH_NOARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, getUpperVal, METH_NOARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, includesLower, METH_NOARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, includesUpper, METH_NOARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, newBytesRefRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocTermOrdsRangeFilter, t_DocTermOrdsRangeFilter, ::org::apache::lucene::search::Filter, DocTermOrdsRangeFilter, abstract_init, 0, 0, t_DocTermOrdsRangeFilter__fields_, 0, 0);

        void t_DocTermOrdsRangeFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(DocTermOrdsRangeFilter), module, "DocTermOrdsRangeFilter", 0);
        }

        void t_DocTermOrdsRangeFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocTermOrdsRangeFilter).tp_dict, "class_", make_descriptor(DocTermOrdsRangeFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocTermOrdsRangeFilter).tp_dict, "wrapfn_", make_descriptor(t_DocTermOrdsRangeFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocTermOrdsRangeFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocTermOrdsRangeFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocTermOrdsRangeFilter::initializeClass, 1)))
            return NULL;
          return t_DocTermOrdsRangeFilter::wrap_Object(DocTermOrdsRangeFilter(((t_DocTermOrdsRangeFilter *) arg)->object.this$));
        }
        static PyObject *t_DocTermOrdsRangeFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocTermOrdsRangeFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocTermOrdsRangeFilter_equals(t_DocTermOrdsRangeFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DocTermOrdsRangeFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DocTermOrdsRangeFilter_getDocIdSet(t_DocTermOrdsRangeFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DocTermOrdsRangeFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_DocTermOrdsRangeFilter_getField(t_DocTermOrdsRangeFilter *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_DocTermOrdsRangeFilter_getLowerVal(t_DocTermOrdsRangeFilter *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getLowerVal());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_DocTermOrdsRangeFilter_getUpperVal(t_DocTermOrdsRangeFilter *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getUpperVal());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_DocTermOrdsRangeFilter_hashCode(t_DocTermOrdsRangeFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(DocTermOrdsRangeFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DocTermOrdsRangeFilter_includesLower(t_DocTermOrdsRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesLower());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_DocTermOrdsRangeFilter_includesUpper(t_DocTermOrdsRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesUpper());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_DocTermOrdsRangeFilter_newBytesRefRange(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          DocTermOrdsRangeFilter result((jobject) NULL);

          if (!parseArgs(args, "skkZZ", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::DocTermOrdsRangeFilter::newBytesRefRange(a0, a1, a2, a3, a4));
            return t_DocTermOrdsRangeFilter::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newBytesRefRange", args);
          return NULL;
        }

        static PyObject *t_DocTermOrdsRangeFilter_toString(t_DocTermOrdsRangeFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(DocTermOrdsRangeFilter), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_DocTermOrdsRangeFilter_get__field(t_DocTermOrdsRangeFilter *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }

        static PyObject *t_DocTermOrdsRangeFilter_get__lowerVal(t_DocTermOrdsRangeFilter *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getLowerVal());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_DocTermOrdsRangeFilter_get__upperVal(t_DocTermOrdsRangeFilter *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getUpperVal());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianMinimalStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianMinimalStemFilter::class$ = NULL;
          jmethodID *NorwegianMinimalStemFilter::mids$ = NULL;
          bool NorwegianMinimalStemFilter::live$ = false;

          jclass NorwegianMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianMinimalStemFilter::NorwegianMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          NorwegianMinimalStemFilter::NorwegianMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          jboolean NorwegianMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianMinimalStemFilter_init_(t_NorwegianMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianMinimalStemFilter_incrementToken(t_NorwegianMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_NorwegianMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_NorwegianMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NorwegianMinimalStemFilter, t_NorwegianMinimalStemFilter, ::org::apache::lucene::analysis::TokenFilter, NorwegianMinimalStemFilter, t_NorwegianMinimalStemFilter_init_, 0, 0, 0, 0, 0);

          void t_NorwegianMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianMinimalStemFilter), module, "NorwegianMinimalStemFilter", 0);
          }

          void t_NorwegianMinimalStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemFilter).tp_dict, "class_", make_descriptor(NorwegianMinimalStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemFilter).tp_dict, "wrapfn_", make_descriptor(t_NorwegianMinimalStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NorwegianMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_NorwegianMinimalStemFilter::wrap_Object(NorwegianMinimalStemFilter(((t_NorwegianMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_NorwegianMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianMinimalStemFilter_init_(t_NorwegianMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                NorwegianMinimalStemFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = NorwegianMinimalStemFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                NorwegianMinimalStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = NorwegianMinimalStemFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianMinimalStemFilter_incrementToken(t_NorwegianMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NorwegianMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/TokenMgrError.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *TokenMgrError::class$ = NULL;
            jmethodID *TokenMgrError::mids$ = NULL;
            bool TokenMgrError::live$ = false;

            jclass TokenMgrError::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/TokenMgrError");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
                mids$[mid_init$_8aaeec67] = env->getMethodID(cls, "<init>", "(ZIIILjava/lang/String;CI)V");
                mids$[mid_getMessage_14c7b5c5] = env->getMethodID(cls, "getMessage", "()Ljava/lang/String;");
                mids$[mid_LexicalError_e888c5f6] = env->getStaticMethodID(cls, "LexicalError", "(ZIIILjava/lang/String;C)Ljava/lang/String;");
                mids$[mid_addEscapes_97a5258f] = env->getStaticMethodID(cls, "addEscapes", "(Ljava/lang/String;)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TokenMgrError::TokenMgrError() : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            TokenMgrError::TokenMgrError(const ::java::lang::String & a0, jint a1) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

            TokenMgrError::TokenMgrError(jboolean a0, jint a1, jint a2, jint a3, const ::java::lang::String & a4, jchar a5, jint a6) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_8aaeec67, a0, a1, a2, a3, a4.this$, a5, a6)) {}

            ::java::lang::String TokenMgrError::getMessage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMessage_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args);
            static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data);
            static PyGetSetDef t_TokenMgrError__fields_[] = {
              DECLARE_GET_FIELD(t_TokenMgrError, message),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TokenMgrError__methods_[] = {
              DECLARE_METHOD(t_TokenMgrError, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TokenMgrError, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TokenMgrError, getMessage, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TokenMgrError, t_TokenMgrError, ::java::lang::Error, TokenMgrError, t_TokenMgrError_init_, 0, 0, t_TokenMgrError__fields_, 0, 0);

            void t_TokenMgrError::install(PyObject *module)
            {
              installType(&PY_TYPE(TokenMgrError), module, "TokenMgrError", 0);
            }

            void t_TokenMgrError::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "class_", make_descriptor(TokenMgrError::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "wrapfn_", make_descriptor(t_TokenMgrError::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TokenMgrError::initializeClass, 1)))
                return NULL;
              return t_TokenMgrError::wrap_Object(TokenMgrError(((t_TokenMgrError *) arg)->object.this$));
            }
            static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TokenMgrError::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  TokenMgrError object((jobject) NULL);

                  INT_CALL(object = TokenMgrError());
                  self->object = object;
                  break;
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  jint a1;
                  TokenMgrError object((jobject) NULL);

                  if (!parseArgs(args, "sI", &a0, &a1))
                  {
                    INT_CALL(object = TokenMgrError(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 7:
                {
                  jboolean a0;
                  jint a1;
                  jint a2;
                  jint a3;
                  ::java::lang::String a4((jobject) NULL);
                  jchar a5;
                  jint a6;
                  TokenMgrError object((jobject) NULL);

                  if (!parseArgs(args, "ZIIIsCI", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                  {
                    INT_CALL(object = TokenMgrError(a0, a1, a2, a3, a4, a5, a6));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getMessage());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(TokenMgrError), (PyObject *) self, "getMessage", args, 2);
            }

            static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getMessage());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/std40/StandardTokenizerImpl40.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std40 {

            ::java::lang::Class *StandardTokenizerImpl40::class$ = NULL;
            jmethodID *StandardTokenizerImpl40::mids$ = NULL;
            bool StandardTokenizerImpl40::live$ = false;
            jint StandardTokenizerImpl40::HANGUL_TYPE = (jint) 0;
            jint StandardTokenizerImpl40::HIRAGANA_TYPE = (jint) 0;
            jint StandardTokenizerImpl40::IDEOGRAPHIC_TYPE = (jint) 0;
            jint StandardTokenizerImpl40::KATAKANA_TYPE = (jint) 0;
            jint StandardTokenizerImpl40::NUMERIC_TYPE = (jint) 0;
            jint StandardTokenizerImpl40::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
            jint StandardTokenizerImpl40::WORD_TYPE = (jint) 0;
            jint StandardTokenizerImpl40::YYEOF = (jint) 0;
            jint StandardTokenizerImpl40::YYINITIAL = (jint) 0;

            jclass StandardTokenizerImpl40::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/std40/StandardTokenizerImpl40");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
                mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
                mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
                mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
                HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
                IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
                KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
                NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
                SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
                WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
                YYEOF = env->getStaticIntField(cls, "YYEOF");
                YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            StandardTokenizerImpl40::StandardTokenizerImpl40(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jint StandardTokenizerImpl40::getNextToken() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
            }

            void StandardTokenizerImpl40::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
            }

            void StandardTokenizerImpl40::yybegin(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
            }

            jint StandardTokenizerImpl40::yychar() const
            {
              return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
            }

            jchar StandardTokenizerImpl40::yycharat(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
            }

            void StandardTokenizerImpl40::yyclose() const
            {
              env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
            }

            jint StandardTokenizerImpl40::yylength() const
            {
              return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
            }

            void StandardTokenizerImpl40::yypushback(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
            }

            void StandardTokenizerImpl40::yyreset(const ::java::io::Reader & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
            }

            jint StandardTokenizerImpl40::yystate() const
            {
              return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
            }

            ::java::lang::String StandardTokenizerImpl40::yytext() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std40 {
            static PyObject *t_StandardTokenizerImpl40_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl40_instance_(PyTypeObject *type, PyObject *arg);
            static int t_StandardTokenizerImpl40_init_(t_StandardTokenizerImpl40 *self, PyObject *args, PyObject *kwds);
            static PyObject *t_StandardTokenizerImpl40_getNextToken(t_StandardTokenizerImpl40 *self);
            static PyObject *t_StandardTokenizerImpl40_getText(t_StandardTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl40_yybegin(t_StandardTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl40_yychar(t_StandardTokenizerImpl40 *self);
            static PyObject *t_StandardTokenizerImpl40_yycharat(t_StandardTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl40_yyclose(t_StandardTokenizerImpl40 *self);
            static PyObject *t_StandardTokenizerImpl40_yylength(t_StandardTokenizerImpl40 *self);
            static PyObject *t_StandardTokenizerImpl40_yypushback(t_StandardTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl40_yyreset(t_StandardTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl40_yystate(t_StandardTokenizerImpl40 *self);
            static PyObject *t_StandardTokenizerImpl40_yytext(t_StandardTokenizerImpl40 *self);
            static PyObject *t_StandardTokenizerImpl40_get__nextToken(t_StandardTokenizerImpl40 *self, void *data);
            static PyGetSetDef t_StandardTokenizerImpl40__fields_[] = {
              DECLARE_GET_FIELD(t_StandardTokenizerImpl40, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_StandardTokenizerImpl40__methods_[] = {
              DECLARE_METHOD(t_StandardTokenizerImpl40, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardTokenizerImpl40, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardTokenizerImpl40, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl40, getText, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yybegin, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yychar, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yycharat, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yyclose, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yylength, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yypushback, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yyreset, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yystate, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yytext, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(StandardTokenizerImpl40, t_StandardTokenizerImpl40, ::java::lang::Object, StandardTokenizerImpl40, t_StandardTokenizerImpl40_init_, 0, 0, t_StandardTokenizerImpl40__fields_, 0, 0);

            void t_StandardTokenizerImpl40::install(PyObject *module)
            {
              installType(&PY_TYPE(StandardTokenizerImpl40), module, "StandardTokenizerImpl40", 0);
            }

            void t_StandardTokenizerImpl40::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "class_", make_descriptor(StandardTokenizerImpl40::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "wrapfn_", make_descriptor(t_StandardTokenizerImpl40::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(StandardTokenizerImpl40::initializeClass);
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "HANGUL_TYPE", make_descriptor(StandardTokenizerImpl40::HANGUL_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "HIRAGANA_TYPE", make_descriptor(StandardTokenizerImpl40::HIRAGANA_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(StandardTokenizerImpl40::IDEOGRAPHIC_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "KATAKANA_TYPE", make_descriptor(StandardTokenizerImpl40::KATAKANA_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "NUMERIC_TYPE", make_descriptor(StandardTokenizerImpl40::NUMERIC_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(StandardTokenizerImpl40::SOUTH_EAST_ASIAN_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "WORD_TYPE", make_descriptor(StandardTokenizerImpl40::WORD_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "YYEOF", make_descriptor(StandardTokenizerImpl40::YYEOF));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "YYINITIAL", make_descriptor(StandardTokenizerImpl40::YYINITIAL));
            }

            static PyObject *t_StandardTokenizerImpl40_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, StandardTokenizerImpl40::initializeClass, 1)))
                return NULL;
              return t_StandardTokenizerImpl40::wrap_Object(StandardTokenizerImpl40(((t_StandardTokenizerImpl40 *) arg)->object.this$));
            }
            static PyObject *t_StandardTokenizerImpl40_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, StandardTokenizerImpl40::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_StandardTokenizerImpl40_init_(t_StandardTokenizerImpl40 *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              StandardTokenizerImpl40 object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = StandardTokenizerImpl40(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_StandardTokenizerImpl40_getNextToken(t_StandardTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextToken());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl40_getText(t_StandardTokenizerImpl40 *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
              {
                OBJ_CALL(self->object.getText(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getText", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl40_yybegin(t_StandardTokenizerImpl40 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yybegin(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl40_yychar(t_StandardTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yychar());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl40_yycharat(t_StandardTokenizerImpl40 *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.yycharat(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl40_yyclose(t_StandardTokenizerImpl40 *self)
            {
              OBJ_CALL(self->object.yyclose());
              Py_RETURN_NONE;
            }

            static PyObject *t_StandardTokenizerImpl40_yylength(t_StandardTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yylength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl40_yypushback(t_StandardTokenizerImpl40 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yypushback(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl40_yyreset(t_StandardTokenizerImpl40 *self, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.yyreset(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl40_yystate(t_StandardTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yystate());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl40_yytext(t_StandardTokenizerImpl40 *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.yytext());
              return j2p(result);
            }

            static PyObject *t_StandardTokenizerImpl40_get__nextToken(t_StandardTokenizerImpl40 *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextToken());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/LuceneDictionary.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *LuceneDictionary::class$ = NULL;
          jmethodID *LuceneDictionary::mids$ = NULL;
          bool LuceneDictionary::live$ = false;

          jclass LuceneDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/LuceneDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_215fea03] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)V");
              mids$[mid_getEntryIterator_23dc46b1] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LuceneDictionary::LuceneDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_215fea03, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::suggest::InputIterator LuceneDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_23dc46b1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_LuceneDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LuceneDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LuceneDictionary_init_(t_LuceneDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LuceneDictionary_getEntryIterator(t_LuceneDictionary *self);
          static PyObject *t_LuceneDictionary_get__entryIterator(t_LuceneDictionary *self, void *data);
          static PyGetSetDef t_LuceneDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_LuceneDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LuceneDictionary__methods_[] = {
            DECLARE_METHOD(t_LuceneDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LuceneDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LuceneDictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LuceneDictionary, t_LuceneDictionary, ::java::lang::Object, LuceneDictionary, t_LuceneDictionary_init_, 0, 0, t_LuceneDictionary__fields_, 0, 0);

          void t_LuceneDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(LuceneDictionary), module, "LuceneDictionary", 0);
          }

          void t_LuceneDictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LuceneDictionary).tp_dict, "class_", make_descriptor(LuceneDictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LuceneDictionary).tp_dict, "wrapfn_", make_descriptor(t_LuceneDictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LuceneDictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LuceneDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LuceneDictionary::initializeClass, 1)))
              return NULL;
            return t_LuceneDictionary::wrap_Object(LuceneDictionary(((t_LuceneDictionary *) arg)->object.this$));
          }
          static PyObject *t_LuceneDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LuceneDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LuceneDictionary_init_(t_LuceneDictionary *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            LuceneDictionary object((jobject) NULL);

            if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
            {
              INT_CALL(object = LuceneDictionary(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LuceneDictionary_getEntryIterator(t_LuceneDictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_LuceneDictionary_get__entryIterator(t_LuceneDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Analyzer$TokenStreamComponents::class$ = NULL;
        jmethodID *Analyzer$TokenStreamComponents::mids$ = NULL;
        bool Analyzer$TokenStreamComponents::live$ = false;

        jclass Analyzer$TokenStreamComponents::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Analyzer$TokenStreamComponents");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_789fa946] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Tokenizer;)V");
            mids$[mid_init$_f0015a14] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Tokenizer;Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_getTokenStream_71f550c9] = env->getMethodID(cls, "getTokenStream", "()Lorg/apache/lucene/analysis/TokenStream;");
            mids$[mid_getTokenizer_6c9709bb] = env->getMethodID(cls, "getTokenizer", "()Lorg/apache/lucene/analysis/Tokenizer;");
            mids$[mid_setReader_cf2e3c10] = env->getMethodID(cls, "setReader", "(Ljava/io/Reader;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Analyzer$TokenStreamComponents::Analyzer$TokenStreamComponents(const ::org::apache::lucene::analysis::Tokenizer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_789fa946, a0.this$)) {}

        Analyzer$TokenStreamComponents::Analyzer$TokenStreamComponents(const ::org::apache::lucene::analysis::Tokenizer & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f0015a14, a0.this$, a1.this$)) {}

        ::org::apache::lucene::analysis::TokenStream Analyzer$TokenStreamComponents::getTokenStream() const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_getTokenStream_71f550c9]));
        }

        ::org::apache::lucene::analysis::Tokenizer Analyzer$TokenStreamComponents::getTokenizer() const
        {
          return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_getTokenizer_6c9709bb]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Analyzer$TokenStreamComponents_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Analyzer$TokenStreamComponents_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Analyzer$TokenStreamComponents_init_(t_Analyzer$TokenStreamComponents *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Analyzer$TokenStreamComponents_getTokenStream(t_Analyzer$TokenStreamComponents *self);
        static PyObject *t_Analyzer$TokenStreamComponents_getTokenizer(t_Analyzer$TokenStreamComponents *self);
        static PyObject *t_Analyzer$TokenStreamComponents_get__tokenStream(t_Analyzer$TokenStreamComponents *self, void *data);
        static PyObject *t_Analyzer$TokenStreamComponents_get__tokenizer(t_Analyzer$TokenStreamComponents *self, void *data);
        static PyGetSetDef t_Analyzer$TokenStreamComponents__fields_[] = {
          DECLARE_GET_FIELD(t_Analyzer$TokenStreamComponents, tokenStream),
          DECLARE_GET_FIELD(t_Analyzer$TokenStreamComponents, tokenizer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Analyzer$TokenStreamComponents__methods_[] = {
          DECLARE_METHOD(t_Analyzer$TokenStreamComponents, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$TokenStreamComponents, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$TokenStreamComponents, getTokenStream, METH_NOARGS),
          DECLARE_METHOD(t_Analyzer$TokenStreamComponents, getTokenizer, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Analyzer$TokenStreamComponents, t_Analyzer$TokenStreamComponents, ::java::lang::Object, Analyzer$TokenStreamComponents, t_Analyzer$TokenStreamComponents_init_, 0, 0, t_Analyzer$TokenStreamComponents__fields_, 0, 0);

        void t_Analyzer$TokenStreamComponents::install(PyObject *module)
        {
          installType(&PY_TYPE(Analyzer$TokenStreamComponents), module, "Analyzer$TokenStreamComponents", 0);
        }

        void t_Analyzer$TokenStreamComponents::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Analyzer$TokenStreamComponents).tp_dict, "class_", make_descriptor(Analyzer$TokenStreamComponents::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Analyzer$TokenStreamComponents).tp_dict, "wrapfn_", make_descriptor(t_Analyzer$TokenStreamComponents::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Analyzer$TokenStreamComponents).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Analyzer$TokenStreamComponents_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Analyzer$TokenStreamComponents::initializeClass, 1)))
            return NULL;
          return t_Analyzer$TokenStreamComponents::wrap_Object(Analyzer$TokenStreamComponents(((t_Analyzer$TokenStreamComponents *) arg)->object.this$));
        }
        static PyObject *t_Analyzer$TokenStreamComponents_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Analyzer$TokenStreamComponents::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Analyzer$TokenStreamComponents_init_(t_Analyzer$TokenStreamComponents *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::analysis::Tokenizer a0((jobject) NULL);
              Analyzer$TokenStreamComponents object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Tokenizer::initializeClass, &a0))
              {
                INT_CALL(object = Analyzer$TokenStreamComponents(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::analysis::Tokenizer a0((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
              Analyzer$TokenStreamComponents object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Tokenizer::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
              {
                INT_CALL(object = Analyzer$TokenStreamComponents(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Analyzer$TokenStreamComponents_getTokenStream(t_Analyzer$TokenStreamComponents *self)
        {
          ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);
          OBJ_CALL(result = self->object.getTokenStream());
          return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
        }

        static PyObject *t_Analyzer$TokenStreamComponents_getTokenizer(t_Analyzer$TokenStreamComponents *self)
        {
          ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);
          OBJ_CALL(result = self->object.getTokenizer());
          return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
        }

        static PyObject *t_Analyzer$TokenStreamComponents_get__tokenStream(t_Analyzer$TokenStreamComponents *self, void *data)
        {
          ::org::apache::lucene::analysis::TokenStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getTokenStream());
          return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(value);
        }

        static PyObject *t_Analyzer$TokenStreamComponents_get__tokenizer(t_Analyzer$TokenStreamComponents *self, void *data)
        {
          ::org::apache::lucene::analysis::Tokenizer value((jobject) NULL);
          OBJ_CALL(value = self->object.getTokenizer());
          return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/Field.h"
#include "java/lang/Number.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/document/Field$Index.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/document/Field$TermVector.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/document/FieldType.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *Field::class$ = NULL;
        jmethodID *Field::mids$ = NULL;
        bool Field::live$ = false;

        jclass Field::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/Field");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7d0c5392] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_init$_23e5278e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/io/Reader;)V");
            mids$[mid_init$_97e62b21] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[B)V");
            mids$[mid_init$_65c4643a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/io/Reader;Lorg/apache/lucene/document/Field$TermVector;)V");
            mids$[mid_init$_36a37f8e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/document/Field$TermVector;)V");
            mids$[mid_init$_4a37b91f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[BLorg/apache/lucene/document/FieldType;)V");
            mids$[mid_init$_3af3ec14] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/document/FieldType;)V");
            mids$[mid_init$_406439e8] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/io/Reader;Lorg/apache/lucene/document/FieldType;)V");
            mids$[mid_init$_7ccdd79c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/document/FieldType;)V");
            mids$[mid_init$_9c27c9b4] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/document/FieldType;)V");
            mids$[mid_init$_5c377d43] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/document/Field$Store;Lorg/apache/lucene/document/Field$Index;)V");
            mids$[mid_init$_eab5cd19] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[BII)V");
            mids$[mid_init$_596be1b9] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/document/Field$Store;Lorg/apache/lucene/document/Field$Index;Lorg/apache/lucene/document/Field$TermVector;)V");
            mids$[mid_init$_b94bfb2f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[BIILorg/apache/lucene/document/FieldType;)V");
            mids$[mid_binaryValue_4ae19461] = env->getMethodID(cls, "binaryValue", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_boost_54c6a176] = env->getMethodID(cls, "boost", "()F");
            mids$[mid_fieldType_a2615189] = env->getMethodID(cls, "fieldType", "()Lorg/apache/lucene/document/FieldType;");
            mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
            mids$[mid_numericValue_ee47e3e1] = env->getMethodID(cls, "numericValue", "()Ljava/lang/Number;");
            mids$[mid_readerValue_b6f16bdd] = env->getMethodID(cls, "readerValue", "()Ljava/io/Reader;");
            mids$[mid_setBoost_06298cab] = env->getMethodID(cls, "setBoost", "(F)V");
            mids$[mid_setByteValue_b2271687] = env->getMethodID(cls, "setByteValue", "(B)V");
            mids$[mid_setBytesValue_49b4f12b] = env->getMethodID(cls, "setBytesValue", "([B)V");
            mids$[mid_setBytesValue_7bc03dc4] = env->getMethodID(cls, "setBytesValue", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_setDoubleValue_5d1c7645] = env->getMethodID(cls, "setDoubleValue", "(D)V");
            mids$[mid_setFloatValue_06298cab] = env->getMethodID(cls, "setFloatValue", "(F)V");
            mids$[mid_setIntValue_39c7bd3c] = env->getMethodID(cls, "setIntValue", "(I)V");
            mids$[mid_setLongValue_0ee6df2f] = env->getMethodID(cls, "setLongValue", "(J)V");
            mids$[mid_setReaderValue_cf2e3c10] = env->getMethodID(cls, "setReaderValue", "(Ljava/io/Reader;)V");
            mids$[mid_setShortValue_3bc40c6a] = env->getMethodID(cls, "setShortValue", "(S)V");
            mids$[mid_setStringValue_5fdc3f48] = env->getMethodID(cls, "setStringValue", "(Ljava/lang/String;)V");
            mids$[mid_setTokenStream_c7c794dc] = env->getMethodID(cls, "setTokenStream", "(Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_stringValue_14c7b5c5] = env->getMethodID(cls, "stringValue", "()Ljava/lang/String;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_tokenStream_cea65119] = env->getMethodID(cls, "tokenStream", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
            mids$[mid_tokenStreamValue_71f550c9] = env->getMethodID(cls, "tokenStreamValue", "()Lorg/apache/lucene/analysis/TokenStream;");
            mids$[mid_translateFieldType_2095598c] = env->getStaticMethodID(cls, "translateFieldType", "(Lorg/apache/lucene/document/Field$Store;Lorg/apache/lucene/document/Field$Index;Lorg/apache/lucene/document/Field$TermVector;)Lorg/apache/lucene/document/FieldType;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Field::Field(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7d0c5392, a0.this$, a1.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::java::io::Reader & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_23e5278e, a0.this$, a1.this$)) {}

        Field::Field(const ::java::lang::String & a0, const JArray< jbyte > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_97e62b21, a0.this$, a1.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::java::io::Reader & a1, const ::org::apache::lucene::document::Field$TermVector & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_65c4643a, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::document::Field$TermVector & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_36a37f8e, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const JArray< jbyte > & a1, const ::org::apache::lucene::document::FieldType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4a37b91f, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::document::FieldType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3af3ec14, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::java::io::Reader & a1, const ::org::apache::lucene::document::FieldType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_406439e8, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::document::FieldType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7ccdd79c, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::document::FieldType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9c27c9b4, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::document::Field$Store & a2, const ::org::apache::lucene::document::Field$Index & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5c377d43, a0.this$, a1.this$, a2.this$, a3.this$)) {}

        Field::Field(const ::java::lang::String & a0, const JArray< jbyte > & a1, jint a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_eab5cd19, a0.this$, a1.this$, a2, a3)) {}

        Field::Field(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::document::Field$Store & a2, const ::org::apache::lucene::document::Field$Index & a3, const ::org::apache::lucene::document::Field$TermVector & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_596be1b9, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

        Field::Field(const ::java::lang::String & a0, const JArray< jbyte > & a1, jint a2, jint a3, const ::org::apache::lucene::document::FieldType & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b94bfb2f, a0.this$, a1.this$, a2, a3, a4.this$)) {}

        ::org::apache::lucene::util::BytesRef Field::binaryValue() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_binaryValue_4ae19461]));
        }

        jfloat Field::boost() const
        {
          return env->callFloatMethod(this$, mids$[mid_boost_54c6a176]);
        }

        ::org::apache::lucene::document::FieldType Field::fieldType() const
        {
          return ::org::apache::lucene::document::FieldType(env->callObjectMethod(this$, mids$[mid_fieldType_a2615189]));
        }

        ::java::lang::String Field::name() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
        }

        ::java::lang::Number Field::numericValue() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_numericValue_ee47e3e1]));
        }

        ::java::io::Reader Field::readerValue() const
        {
          return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_readerValue_b6f16bdd]));
        }

        void Field::setBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBoost_06298cab], a0);
        }

        void Field::setByteValue(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setByteValue_b2271687], a0);
        }

        void Field::setBytesValue(const JArray< jbyte > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBytesValue_49b4f12b], a0.this$);
        }

        void Field::setBytesValue(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBytesValue_7bc03dc4], a0.this$);
        }

        void Field::setDoubleValue(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDoubleValue_5d1c7645], a0);
        }

        void Field::setFloatValue(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFloatValue_06298cab], a0);
        }

        void Field::setIntValue(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setIntValue_39c7bd3c], a0);
        }

        void Field::setLongValue(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLongValue_0ee6df2f], a0);
        }

        void Field::setReaderValue(const ::java::io::Reader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setReaderValue_cf2e3c10], a0.this$);
        }

        void Field::setShortValue(jshort a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setShortValue_3bc40c6a], a0);
        }

        void Field::setStringValue(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStringValue_5fdc3f48], a0.this$);
        }

        void Field::setTokenStream(const ::org::apache::lucene::analysis::TokenStream & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTokenStream_c7c794dc], a0.this$);
        }

        ::java::lang::String Field::stringValue() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_stringValue_14c7b5c5]));
        }

        ::java::lang::String Field::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::org::apache::lucene::analysis::TokenStream Field::tokenStream(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_tokenStream_cea65119], a0.this$, a1.this$));
        }

        ::org::apache::lucene::analysis::TokenStream Field::tokenStreamValue() const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_tokenStreamValue_71f550c9]));
        }

        ::org::apache::lucene::document::FieldType Field::translateFieldType(const ::org::apache::lucene::document::Field$Store & a0, const ::org::apache::lucene::document::Field$Index & a1, const ::org::apache::lucene::document::Field$TermVector & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::document::FieldType(env->callStaticObjectMethod(cls, mids$[mid_translateFieldType_2095598c], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_Field_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Field_init_(t_Field *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Field_binaryValue(t_Field *self);
        static PyObject *t_Field_boost(t_Field *self);
        static PyObject *t_Field_fieldType(t_Field *self);
        static PyObject *t_Field_name(t_Field *self);
        static PyObject *t_Field_numericValue(t_Field *self);
        static PyObject *t_Field_readerValue(t_Field *self);
        static PyObject *t_Field_setBoost(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setByteValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setBytesValue(t_Field *self, PyObject *args);
        static PyObject *t_Field_setDoubleValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setFloatValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setIntValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setLongValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setReaderValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setShortValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setStringValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setTokenStream(t_Field *self, PyObject *arg);
        static PyObject *t_Field_stringValue(t_Field *self);
        static PyObject *t_Field_toString(t_Field *self, PyObject *args);
        static PyObject *t_Field_tokenStream(t_Field *self, PyObject *args);
        static PyObject *t_Field_tokenStreamValue(t_Field *self);
        static PyObject *t_Field_translateFieldType(PyTypeObject *type, PyObject *args);
        static int t_Field_set__byteValue(t_Field *self, PyObject *arg, void *data);
        static int t_Field_set__bytesValue(t_Field *self, PyObject *arg, void *data);
        static int t_Field_set__doubleValue(t_Field *self, PyObject *arg, void *data);
        static int t_Field_set__floatValue(t_Field *self, PyObject *arg, void *data);
        static int t_Field_set__intValue(t_Field *self, PyObject *arg, void *data);
        static int t_Field_set__longValue(t_Field *self, PyObject *arg, void *data);
        static int t_Field_set__shortValue(t_Field *self, PyObject *arg, void *data);
        static PyGetSetDef t_Field__fields_[] = {
          DECLARE_SET_FIELD(t_Field, byteValue),
          DECLARE_SET_FIELD(t_Field, bytesValue),
          DECLARE_SET_FIELD(t_Field, doubleValue),
          DECLARE_SET_FIELD(t_Field, floatValue),
          DECLARE_SET_FIELD(t_Field, intValue),
          DECLARE_SET_FIELD(t_Field, longValue),
          DECLARE_SET_FIELD(t_Field, shortValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Field__methods_[] = {
          DECLARE_METHOD(t_Field, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field, binaryValue, METH_NOARGS),
          DECLARE_METHOD(t_Field, boost, METH_NOARGS),
          DECLARE_METHOD(t_Field, fieldType, METH_NOARGS),
          DECLARE_METHOD(t_Field, name, METH_NOARGS),
          DECLARE_METHOD(t_Field, numericValue, METH_NOARGS),
          DECLARE_METHOD(t_Field, readerValue, METH_NOARGS),
          DECLARE_METHOD(t_Field, setBoost, METH_O),
          DECLARE_METHOD(t_Field, setByteValue, METH_O),
          DECLARE_METHOD(t_Field, setBytesValue, METH_VARARGS),
          DECLARE_METHOD(t_Field, setDoubleValue, METH_O),
          DECLARE_METHOD(t_Field, setFloatValue, METH_O),
          DECLARE_METHOD(t_Field, setIntValue, METH_O),
          DECLARE_METHOD(t_Field, setLongValue, METH_O),
          DECLARE_METHOD(t_Field, setReaderValue, METH_O),
          DECLARE_METHOD(t_Field, setShortValue, METH_O),
          DECLARE_METHOD(t_Field, setStringValue, METH_O),
          DECLARE_METHOD(t_Field, setTokenStream, METH_O),
          DECLARE_METHOD(t_Field, stringValue, METH_NOARGS),
          DECLARE_METHOD(t_Field, toString, METH_VARARGS),
          DECLARE_METHOD(t_Field, tokenStream, METH_VARARGS),
          DECLARE_METHOD(t_Field, tokenStreamValue, METH_NOARGS),
          DECLARE_METHOD(t_Field, translateFieldType, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Field, t_Field, ::java::lang::Object, Field, t_Field_init_, 0, 0, t_Field__fields_, 0, 0);

        void t_Field::install(PyObject *module)
        {
          installType(&PY_TYPE(Field), module, "Field", 0);
          PyDict_SetItemString(PY_TYPE(Field).tp_dict, "TermVector", make_descriptor(&PY_TYPE(Field$TermVector)));
          PyDict_SetItemString(PY_TYPE(Field).tp_dict, "Index", make_descriptor(&PY_TYPE(Field$Index)));
          PyDict_SetItemString(PY_TYPE(Field).tp_dict, "Store", make_descriptor(&PY_TYPE(Field$Store)));
        }

        void t_Field::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Field).tp_dict, "class_", make_descriptor(Field::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Field).tp_dict, "wrapfn_", make_descriptor(t_Field::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Field).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Field_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Field::initializeClass, 1)))
            return NULL;
          return t_Field::wrap_Object(Field(((t_Field *) arg)->object.this$));
        }
        static PyObject *t_Field_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Field::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Field_init_(t_Field *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
              {
                INT_CALL(object = Field(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::io::Reader a1((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
              {
                INT_CALL(object = Field(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "s[B", &a0, &a1))
              {
                INT_CALL(object = Field(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::io::Reader a1((jobject) NULL);
              ::org::apache::lucene::document::Field$TermVector a2((jobject) NULL);
              PyTypeObject **p2;
              Field object((jobject) NULL);

              if (!parseArgs(args, "skK", ::java::io::Reader::initializeClass, ::org::apache::lucene::document::Field$TermVector::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$TermVector::parameters_))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
              ::org::apache::lucene::document::Field$TermVector a2((jobject) NULL);
              PyTypeObject **p2;
              Field object((jobject) NULL);

              if (!parseArgs(args, "skK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::document::Field$TermVector::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$TermVector::parameters_))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "s[Bk", ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "skk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::io::Reader a1((jobject) NULL);
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "skk", ::java::io::Reader::initializeClass, ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "ssk", ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "skk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              ::org::apache::lucene::document::Field$Index a3((jobject) NULL);
              PyTypeObject **p3;
              Field object((jobject) NULL);

              if (!parseArgs(args, "ssKK", ::org::apache::lucene::document::Field$Store::initializeClass, ::org::apache::lucene::document::Field$Index::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_, &a3, &p3, ::org::apache::lucene::document::t_Field$Index::parameters_))
              {
                INT_CALL(object = Field(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              jint a2;
              jint a3;
              Field object((jobject) NULL);

              if (!parseArgs(args, "s[BII", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = Field(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              ::org::apache::lucene::document::Field$Index a3((jobject) NULL);
              PyTypeObject **p3;
              ::org::apache::lucene::document::Field$TermVector a4((jobject) NULL);
              PyTypeObject **p4;
              Field object((jobject) NULL);

              if (!parseArgs(args, "ssKKK", ::org::apache::lucene::document::Field$Store::initializeClass, ::org::apache::lucene::document::Field$Index::initializeClass, ::org::apache::lucene::document::Field$TermVector::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_, &a3, &p3, ::org::apache::lucene::document::t_Field$Index::parameters_, &a4, &p4, ::org::apache::lucene::document::t_Field$TermVector::parameters_))
              {
                INT_CALL(object = Field(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              jint a2;
              jint a3;
              ::org::apache::lucene::document::FieldType a4((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "s[BIIk", ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = Field(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Field_binaryValue(t_Field *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.binaryValue());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_Field_boost(t_Field *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.boost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Field_fieldType(t_Field *self)
        {
          ::org::apache::lucene::document::FieldType result((jobject) NULL);
          OBJ_CALL(result = self->object.fieldType());
          return ::org::apache::lucene::document::t_FieldType::wrap_Object(result);
        }

        static PyObject *t_Field_name(t_Field *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.name());
          return j2p(result);
        }

        static PyObject *t_Field_numericValue(t_Field *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.numericValue());
          return ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_Field_readerValue(t_Field *self)
        {
          ::java::io::Reader result((jobject) NULL);
          OBJ_CALL(result = self->object.readerValue());
          return ::java::io::t_Reader::wrap_Object(result);
        }

        static PyObject *t_Field_setBoost(t_Field *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBoost", arg);
          return NULL;
        }

        static PyObject *t_Field_setByteValue(t_Field *self, PyObject *arg)
        {
          jbyte a0;

          if (!parseArg(arg, "B", &a0))
          {
            OBJ_CALL(self->object.setByteValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setByteValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setBytesValue(t_Field *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(self->object.setBytesValue(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setBytesValue(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "setBytesValue", args);
          return NULL;
        }

        static PyObject *t_Field_setDoubleValue(t_Field *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setDoubleValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDoubleValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setFloatValue(t_Field *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setFloatValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setFloatValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setIntValue(t_Field *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setIntValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setIntValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setLongValue(t_Field *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.setLongValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLongValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setReaderValue(t_Field *self, PyObject *arg)
        {
          ::java::io::Reader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setReaderValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setReaderValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setShortValue(t_Field *self, PyObject *arg)
        {
          jshort a0;

          if (!parseArg(arg, "S", &a0))
          {
            OBJ_CALL(self->object.setShortValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setShortValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setStringValue(t_Field *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.setStringValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStringValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setTokenStream(t_Field *self, PyObject *arg)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setTokenStream(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setTokenStream", arg);
          return NULL;
        }

        static PyObject *t_Field_stringValue(t_Field *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.stringValue());
          return j2p(result);
        }

        static PyObject *t_Field_toString(t_Field *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(Field), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Field_tokenStream(t_Field *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.tokenStream(a0, a1));
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "tokenStream", args);
          return NULL;
        }

        static PyObject *t_Field_tokenStreamValue(t_Field *self)
        {
          ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);
          OBJ_CALL(result = self->object.tokenStreamValue());
          return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
        }

        static PyObject *t_Field_translateFieldType(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::document::Field$Store a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::document::Field$Index a1((jobject) NULL);
          PyTypeObject **p1;
          ::org::apache::lucene::document::Field$TermVector a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::document::FieldType result((jobject) NULL);

          if (!parseArgs(args, "KKK", ::org::apache::lucene::document::Field$Store::initializeClass, ::org::apache::lucene::document::Field$Index::initializeClass, ::org::apache::lucene::document::Field$TermVector::initializeClass, &a0, &p0, ::org::apache::lucene::document::t_Field$Store::parameters_, &a1, &p1, ::org::apache::lucene::document::t_Field$Index::parameters_, &a2, &p2, ::org::apache::lucene::document::t_Field$TermVector::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::Field::translateFieldType(a0, a1, a2));
            return ::org::apache::lucene::document::t_FieldType::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "translateFieldType", args);
          return NULL;
        }

        static int t_Field_set__byteValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jbyte value;
            if (!parseArg(arg, "B", &value))
            {
              INT_CALL(self->object.setByteValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "byteValue", arg);
          return -1;
        }

        static int t_Field_set__bytesValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            JArray< jbyte > value((jobject) NULL);
            if (!parseArg(arg, "[B", &value))
            {
              INT_CALL(self->object.setBytesValue(value));
              return 0;
            }
          }
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setBytesValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bytesValue", arg);
          return -1;
        }

        static int t_Field_set__doubleValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setDoubleValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "doubleValue", arg);
          return -1;
        }

        static int t_Field_set__floatValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setFloatValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "floatValue", arg);
          return -1;
        }

        static int t_Field_set__intValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setIntValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "intValue", arg);
          return -1;
        }

        static int t_Field_set__longValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setLongValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "longValue", arg);
          return -1;
        }

        static int t_Field_set__shortValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jshort value;
            if (!parseArg(arg, "S", &value))
            {
              INT_CALL(self->object.setShortValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "shortValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonFieldComparatorSource.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonFieldComparatorSource::class$ = NULL;
        jmethodID *PythonFieldComparatorSource::mids$ = NULL;
        bool PythonFieldComparatorSource::live$ = false;

        jclass PythonFieldComparatorSource::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonFieldComparatorSource");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_newComparator_0c7e6c91] = env->getMethodID(cls, "newComparator", "(Ljava/lang/String;IIZ)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonFieldComparatorSource::PythonFieldComparatorSource() : ::org::apache::lucene::search::FieldComparatorSource(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonFieldComparatorSource::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonFieldComparatorSource::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonFieldComparatorSource::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonFieldComparatorSource_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonFieldComparatorSource_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonFieldComparatorSource_init_(t_PythonFieldComparatorSource *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonFieldComparatorSource_finalize(t_PythonFieldComparatorSource *self);
        static PyObject *t_PythonFieldComparatorSource_pythonExtension(t_PythonFieldComparatorSource *self, PyObject *args);
        static jobject JNICALL t_PythonFieldComparatorSource_newComparator0(JNIEnv *jenv, jobject jobj, jobject a0, jint a1, jint a2, jboolean a3);
        static void JNICALL t_PythonFieldComparatorSource_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonFieldComparatorSource_get__self(t_PythonFieldComparatorSource *self, void *data);
        static PyGetSetDef t_PythonFieldComparatorSource__fields_[] = {
          DECLARE_GET_FIELD(t_PythonFieldComparatorSource, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonFieldComparatorSource__methods_[] = {
          DECLARE_METHOD(t_PythonFieldComparatorSource, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFieldComparatorSource, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFieldComparatorSource, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonFieldComparatorSource, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonFieldComparatorSource, t_PythonFieldComparatorSource, ::org::apache::lucene::search::FieldComparatorSource, PythonFieldComparatorSource, t_PythonFieldComparatorSource_init_, 0, 0, t_PythonFieldComparatorSource__fields_, 0, 0);

        void t_PythonFieldComparatorSource::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonFieldComparatorSource), module, "PythonFieldComparatorSource", 1);
        }

        void t_PythonFieldComparatorSource::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonFieldComparatorSource).tp_dict, "class_", make_descriptor(PythonFieldComparatorSource::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonFieldComparatorSource).tp_dict, "wrapfn_", make_descriptor(t_PythonFieldComparatorSource::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonFieldComparatorSource).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonFieldComparatorSource::initializeClass);
          JNINativeMethod methods[] = {
            { "newComparator", "(Ljava/lang/String;IIZ)Lorg/apache/lucene/search/FieldComparator;", (void *) t_PythonFieldComparatorSource_newComparator0 },
            { "pythonDecRef", "()V", (void *) t_PythonFieldComparatorSource_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonFieldComparatorSource_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonFieldComparatorSource::initializeClass, 1)))
            return NULL;
          return t_PythonFieldComparatorSource::wrap_Object(PythonFieldComparatorSource(((t_PythonFieldComparatorSource *) arg)->object.this$));
        }
        static PyObject *t_PythonFieldComparatorSource_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonFieldComparatorSource::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonFieldComparatorSource_init_(t_PythonFieldComparatorSource *self, PyObject *args, PyObject *kwds)
        {
          PythonFieldComparatorSource object((jobject) NULL);

          INT_CALL(object = PythonFieldComparatorSource());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonFieldComparatorSource_finalize(t_PythonFieldComparatorSource *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonFieldComparatorSource_pythonExtension(t_PythonFieldComparatorSource *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jobject JNICALL t_PythonFieldComparatorSource_newComparator0(JNIEnv *jenv, jobject jobj, jobject a0, jint a1, jint a2, jboolean a3)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparatorSource::mids$[PythonFieldComparatorSource::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::search::FieldComparator value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *o3 = (a3 ? Py_True : Py_False);
          PyObject *result = PyObject_CallMethod(obj, "newComparator", "OiiO", o0, (int) a1, (int) a2, o3);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::search::FieldComparator::initializeClass, &value))
          {
            throwTypeError("newComparator", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonFieldComparatorSource_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparatorSource::mids$[PythonFieldComparatorSource::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonFieldComparatorSource::mids$[PythonFieldComparatorSource::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonFieldComparatorSource_get__self(t_PythonFieldComparatorSource *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexQuery.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexQueryCapable.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {

            ::java::lang::Class *RegexQuery::class$ = NULL;
            jmethodID *RegexQuery::mids$ = NULL;
            bool RegexQuery::live$ = false;

            jclass RegexQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/regex/RegexQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getRegexImplementation_814365f4] = env->getMethodID(cls, "getRegexImplementation", "()Lorg/apache/lucene/sandbox/queries/regex/RegexCapabilities;");
                mids$[mid_getTerm_0f71f314] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_setRegexImplementation_06bf498d] = env->getMethodID(cls, "setRegexImplementation", "(Lorg/apache/lucene/sandbox/queries/regex/RegexCapabilities;)V");
                mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_getTermsEnum_0bc2a5ab] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/FilteredTermsEnum;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            RegexQuery::RegexQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

            jboolean RegexQuery::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities RegexQuery::getRegexImplementation() const
            {
              return ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities(env->callObjectMethod(this$, mids$[mid_getRegexImplementation_814365f4]));
            }

            ::org::apache::lucene::index::Term RegexQuery::getTerm() const
            {
              return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_0f71f314]));
            }

            jint RegexQuery::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            void RegexQuery::setRegexImplementation(const ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setRegexImplementation_06bf498d], a0.this$);
            }

            ::java::lang::String RegexQuery::toString(const ::java::lang::String & a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {
            static PyObject *t_RegexQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_RegexQuery_init_(t_RegexQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_RegexQuery_equals(t_RegexQuery *self, PyObject *args);
            static PyObject *t_RegexQuery_getRegexImplementation(t_RegexQuery *self);
            static PyObject *t_RegexQuery_getTerm(t_RegexQuery *self);
            static PyObject *t_RegexQuery_hashCode(t_RegexQuery *self, PyObject *args);
            static PyObject *t_RegexQuery_setRegexImplementation(t_RegexQuery *self, PyObject *arg);
            static PyObject *t_RegexQuery_toString(t_RegexQuery *self, PyObject *args);
            static PyObject *t_RegexQuery_get__regexImplementation(t_RegexQuery *self, void *data);
            static int t_RegexQuery_set__regexImplementation(t_RegexQuery *self, PyObject *arg, void *data);
            static PyObject *t_RegexQuery_get__term(t_RegexQuery *self, void *data);
            static PyGetSetDef t_RegexQuery__fields_[] = {
              DECLARE_GETSET_FIELD(t_RegexQuery, regexImplementation),
              DECLARE_GET_FIELD(t_RegexQuery, term),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_RegexQuery__methods_[] = {
              DECLARE_METHOD(t_RegexQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexQuery, equals, METH_VARARGS),
              DECLARE_METHOD(t_RegexQuery, getRegexImplementation, METH_NOARGS),
              DECLARE_METHOD(t_RegexQuery, getTerm, METH_NOARGS),
              DECLARE_METHOD(t_RegexQuery, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_RegexQuery, setRegexImplementation, METH_O),
              DECLARE_METHOD(t_RegexQuery, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(RegexQuery, t_RegexQuery, ::org::apache::lucene::search::MultiTermQuery, RegexQuery, t_RegexQuery_init_, 0, 0, t_RegexQuery__fields_, 0, 0);

            void t_RegexQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(RegexQuery), module, "RegexQuery", 0);
            }

            void t_RegexQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(RegexQuery).tp_dict, "class_", make_descriptor(RegexQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(RegexQuery).tp_dict, "wrapfn_", make_descriptor(t_RegexQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(RegexQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RegexQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RegexQuery::initializeClass, 1)))
                return NULL;
              return t_RegexQuery::wrap_Object(RegexQuery(((t_RegexQuery *) arg)->object.this$));
            }
            static PyObject *t_RegexQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RegexQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_RegexQuery_init_(t_RegexQuery *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              RegexQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                INT_CALL(object = RegexQuery(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_RegexQuery_equals(t_RegexQuery *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(RegexQuery), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_RegexQuery_getRegexImplementation(t_RegexQuery *self)
            {
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities result((jobject) NULL);
              OBJ_CALL(result = self->object.getRegexImplementation());
              return ::org::apache::lucene::sandbox::queries::regex::t_RegexCapabilities::wrap_Object(result);
            }

            static PyObject *t_RegexQuery_getTerm(t_RegexQuery *self)
            {
              ::org::apache::lucene::index::Term result((jobject) NULL);
              OBJ_CALL(result = self->object.getTerm());
              return ::org::apache::lucene::index::t_Term::wrap_Object(result);
            }

            static PyObject *t_RegexQuery_hashCode(t_RegexQuery *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(RegexQuery), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_RegexQuery_setRegexImplementation(t_RegexQuery *self, PyObject *arg)
            {
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setRegexImplementation(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setRegexImplementation", arg);
              return NULL;
            }

            static PyObject *t_RegexQuery_toString(t_RegexQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(RegexQuery), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_RegexQuery_get__regexImplementation(t_RegexQuery *self, void *data)
            {
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities value((jobject) NULL);
              OBJ_CALL(value = self->object.getRegexImplementation());
              return ::org::apache::lucene::sandbox::queries::regex::t_RegexCapabilities::wrap_Object(value);
            }
            static int t_RegexQuery_set__regexImplementation(t_RegexQuery *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities::initializeClass, &value))
                {
                  INT_CALL(self->object.setRegexImplementation(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "regexImplementation", arg);
              return -1;
            }

            static PyObject *t_RegexQuery_get__term(t_RegexQuery *self, void *data)
            {
              ::org::apache::lucene::index::Term value((jobject) NULL);
              OBJ_CALL(value = self->object.getTerm());
              return ::org::apache::lucene::index::t_Term::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues$DocTermsIndexException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *DocTermsIndexDocValues$DocTermsIndexException::class$ = NULL;
            jmethodID *DocTermsIndexDocValues$DocTermsIndexException::mids$ = NULL;
            bool DocTermsIndexDocValues$DocTermsIndexException::live$ = false;

            jclass DocTermsIndexDocValues$DocTermsIndexException::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues$DocTermsIndexException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_df97be8c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/RuntimeException;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DocTermsIndexDocValues$DocTermsIndexException::DocTermsIndexDocValues$DocTermsIndexException(const ::java::lang::String & a0, const ::java::lang::RuntimeException & a1) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_df97be8c, a0.this$, a1.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_DocTermsIndexDocValues$DocTermsIndexException_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DocTermsIndexDocValues$DocTermsIndexException_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DocTermsIndexDocValues$DocTermsIndexException_init_(t_DocTermsIndexDocValues$DocTermsIndexException *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_DocTermsIndexDocValues$DocTermsIndexException__methods_[] = {
              DECLARE_METHOD(t_DocTermsIndexDocValues$DocTermsIndexException, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DocTermsIndexDocValues$DocTermsIndexException, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DocTermsIndexDocValues$DocTermsIndexException, t_DocTermsIndexDocValues$DocTermsIndexException, ::java::lang::RuntimeException, DocTermsIndexDocValues$DocTermsIndexException, t_DocTermsIndexDocValues$DocTermsIndexException_init_, 0, 0, 0, 0, 0);

            void t_DocTermsIndexDocValues$DocTermsIndexException::install(PyObject *module)
            {
              installType(&PY_TYPE(DocTermsIndexDocValues$DocTermsIndexException), module, "DocTermsIndexDocValues$DocTermsIndexException", 0);
            }

            void t_DocTermsIndexDocValues$DocTermsIndexException::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DocTermsIndexDocValues$DocTermsIndexException).tp_dict, "class_", make_descriptor(DocTermsIndexDocValues$DocTermsIndexException::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DocTermsIndexDocValues$DocTermsIndexException).tp_dict, "wrapfn_", make_descriptor(t_DocTermsIndexDocValues$DocTermsIndexException::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DocTermsIndexDocValues$DocTermsIndexException).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DocTermsIndexDocValues$DocTermsIndexException_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DocTermsIndexDocValues$DocTermsIndexException::initializeClass, 1)))
                return NULL;
              return t_DocTermsIndexDocValues$DocTermsIndexException::wrap_Object(DocTermsIndexDocValues$DocTermsIndexException(((t_DocTermsIndexDocValues$DocTermsIndexException *) arg)->object.this$));
            }
            static PyObject *t_DocTermsIndexDocValues$DocTermsIndexException_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DocTermsIndexDocValues$DocTermsIndexException::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DocTermsIndexDocValues$DocTermsIndexException_init_(t_DocTermsIndexDocValues$DocTermsIndexException *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::RuntimeException a1((jobject) NULL);
              DocTermsIndexDocValues$DocTermsIndexException object((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::lang::RuntimeException::initializeClass, &a0, &a1))
              {
                INT_CALL(object = DocTermsIndexDocValues$DocTermsIndexException(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/LogMergePolicy.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/lang/Boolean.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *LogMergePolicy::class$ = NULL;
        jmethodID *LogMergePolicy::mids$ = NULL;
        bool LogMergePolicy::live$ = false;
        jint LogMergePolicy::DEFAULT_MAX_MERGE_DOCS = (jint) 0;
        jint LogMergePolicy::DEFAULT_MERGE_FACTOR = (jint) 0;
        jdouble LogMergePolicy::DEFAULT_NO_CFS_RATIO = (jdouble) 0;
        jdouble LogMergePolicy::LEVEL_LOG_SPAN = (jdouble) 0;

        jclass LogMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/LogMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_findForcedDeletesMerges_581dbc49] = env->getMethodID(cls, "findForcedDeletesMerges", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findForcedMerges_4fe4a5b5] = env->getMethodID(cls, "findForcedMerges", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findMerges_cada0df0] = env->getMethodID(cls, "findMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_getCalibrateSizeByDeletes_54c6a16a] = env->getMethodID(cls, "getCalibrateSizeByDeletes", "()Z");
            mids$[mid_getMaxMergeDocs_54c6a179] = env->getMethodID(cls, "getMaxMergeDocs", "()I");
            mids$[mid_getMergeFactor_54c6a179] = env->getMethodID(cls, "getMergeFactor", "()I");
            mids$[mid_setCalibrateSizeByDeletes_bb0c767f] = env->getMethodID(cls, "setCalibrateSizeByDeletes", "(Z)V");
            mids$[mid_setMaxMergeDocs_39c7bd3c] = env->getMethodID(cls, "setMaxMergeDocs", "(I)V");
            mids$[mid_setMergeFactor_39c7bd3c] = env->getMethodID(cls, "setMergeFactor", "(I)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_message_dcbb03ef] = env->getMethodID(cls, "message", "(Ljava/lang/String;Lorg/apache/lucene/index/IndexWriter;)V");
            mids$[mid_isMerged_2ee943c8] = env->getMethodID(cls, "isMerged", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/IndexWriter;)Z");
            mids$[mid_verbose_4f2fb7d9] = env->getMethodID(cls, "verbose", "(Lorg/apache/lucene/index/IndexWriter;)Z");
            mids$[mid_sizeDocs_5454cb07] = env->getMethodID(cls, "sizeDocs", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)J");
            mids$[mid_sizeBytes_5454cb07] = env->getMethodID(cls, "sizeBytes", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_MAX_MERGE_DOCS = env->getStaticIntField(cls, "DEFAULT_MAX_MERGE_DOCS");
            DEFAULT_MERGE_FACTOR = env->getStaticIntField(cls, "DEFAULT_MERGE_FACTOR");
            DEFAULT_NO_CFS_RATIO = env->getStaticDoubleField(cls, "DEFAULT_NO_CFS_RATIO");
            LEVEL_LOG_SPAN = env->getStaticDoubleField(cls, "LEVEL_LOG_SPAN");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LogMergePolicy::LogMergePolicy() : ::org::apache::lucene::index::MergePolicy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void LogMergePolicy::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification LogMergePolicy::findForcedDeletesMerges(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::IndexWriter & a1) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedDeletesMerges_581dbc49], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification LogMergePolicy::findForcedMerges(const ::org::apache::lucene::index::SegmentInfos & a0, jint a1, const ::java::util::Map & a2, const ::org::apache::lucene::index::IndexWriter & a3) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedMerges_4fe4a5b5], a0.this$, a1, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification LogMergePolicy::findMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findMerges_cada0df0], a0.this$, a1.this$, a2.this$));
        }

        jboolean LogMergePolicy::getCalibrateSizeByDeletes() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getCalibrateSizeByDeletes_54c6a16a]);
        }

        jint LogMergePolicy::getMaxMergeDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxMergeDocs_54c6a179]);
        }

        jint LogMergePolicy::getMergeFactor() const
        {
          return env->callIntMethod(this$, mids$[mid_getMergeFactor_54c6a179]);
        }

        void LogMergePolicy::setCalibrateSizeByDeletes(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCalibrateSizeByDeletes_bb0c767f], a0);
        }

        void LogMergePolicy::setMaxMergeDocs(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxMergeDocs_39c7bd3c], a0);
        }

        void LogMergePolicy::setMergeFactor(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMergeFactor_39c7bd3c], a0);
        }

        ::java::lang::String LogMergePolicy::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_LogMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LogMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LogMergePolicy_init_(t_LogMergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LogMergePolicy_close(t_LogMergePolicy *self, PyObject *args);
        static PyObject *t_LogMergePolicy_findForcedDeletesMerges(t_LogMergePolicy *self, PyObject *args);
        static PyObject *t_LogMergePolicy_findForcedMerges(t_LogMergePolicy *self, PyObject *args);
        static PyObject *t_LogMergePolicy_findMerges(t_LogMergePolicy *self, PyObject *args);
        static PyObject *t_LogMergePolicy_getCalibrateSizeByDeletes(t_LogMergePolicy *self);
        static PyObject *t_LogMergePolicy_getMaxMergeDocs(t_LogMergePolicy *self);
        static PyObject *t_LogMergePolicy_getMergeFactor(t_LogMergePolicy *self);
        static PyObject *t_LogMergePolicy_setCalibrateSizeByDeletes(t_LogMergePolicy *self, PyObject *arg);
        static PyObject *t_LogMergePolicy_setMaxMergeDocs(t_LogMergePolicy *self, PyObject *arg);
        static PyObject *t_LogMergePolicy_setMergeFactor(t_LogMergePolicy *self, PyObject *arg);
        static PyObject *t_LogMergePolicy_toString(t_LogMergePolicy *self, PyObject *args);
        static PyObject *t_LogMergePolicy_get__calibrateSizeByDeletes(t_LogMergePolicy *self, void *data);
        static int t_LogMergePolicy_set__calibrateSizeByDeletes(t_LogMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_LogMergePolicy_get__maxMergeDocs(t_LogMergePolicy *self, void *data);
        static int t_LogMergePolicy_set__maxMergeDocs(t_LogMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_LogMergePolicy_get__mergeFactor(t_LogMergePolicy *self, void *data);
        static int t_LogMergePolicy_set__mergeFactor(t_LogMergePolicy *self, PyObject *arg, void *data);
        static PyGetSetDef t_LogMergePolicy__fields_[] = {
          DECLARE_GETSET_FIELD(t_LogMergePolicy, calibrateSizeByDeletes),
          DECLARE_GETSET_FIELD(t_LogMergePolicy, maxMergeDocs),
          DECLARE_GETSET_FIELD(t_LogMergePolicy, mergeFactor),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LogMergePolicy__methods_[] = {
          DECLARE_METHOD(t_LogMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogMergePolicy, close, METH_VARARGS),
          DECLARE_METHOD(t_LogMergePolicy, findForcedDeletesMerges, METH_VARARGS),
          DECLARE_METHOD(t_LogMergePolicy, findForcedMerges, METH_VARARGS),
          DECLARE_METHOD(t_LogMergePolicy, findMerges, METH_VARARGS),
          DECLARE_METHOD(t_LogMergePolicy, getCalibrateSizeByDeletes, METH_NOARGS),
          DECLARE_METHOD(t_LogMergePolicy, getMaxMergeDocs, METH_NOARGS),
          DECLARE_METHOD(t_LogMergePolicy, getMergeFactor, METH_NOARGS),
          DECLARE_METHOD(t_LogMergePolicy, setCalibrateSizeByDeletes, METH_O),
          DECLARE_METHOD(t_LogMergePolicy, setMaxMergeDocs, METH_O),
          DECLARE_METHOD(t_LogMergePolicy, setMergeFactor, METH_O),
          DECLARE_METHOD(t_LogMergePolicy, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LogMergePolicy, t_LogMergePolicy, ::org::apache::lucene::index::MergePolicy, LogMergePolicy, t_LogMergePolicy_init_, 0, 0, t_LogMergePolicy__fields_, 0, 0);

        void t_LogMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(LogMergePolicy), module, "LogMergePolicy", 0);
        }

        void t_LogMergePolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LogMergePolicy).tp_dict, "class_", make_descriptor(LogMergePolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LogMergePolicy).tp_dict, "wrapfn_", make_descriptor(t_LogMergePolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LogMergePolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(LogMergePolicy::initializeClass);
          PyDict_SetItemString(PY_TYPE(LogMergePolicy).tp_dict, "DEFAULT_MAX_MERGE_DOCS", make_descriptor(LogMergePolicy::DEFAULT_MAX_MERGE_DOCS));
          PyDict_SetItemString(PY_TYPE(LogMergePolicy).tp_dict, "DEFAULT_MERGE_FACTOR", make_descriptor(LogMergePolicy::DEFAULT_MERGE_FACTOR));
          PyDict_SetItemString(PY_TYPE(LogMergePolicy).tp_dict, "DEFAULT_NO_CFS_RATIO", make_descriptor(LogMergePolicy::DEFAULT_NO_CFS_RATIO));
          PyDict_SetItemString(PY_TYPE(LogMergePolicy).tp_dict, "LEVEL_LOG_SPAN", make_descriptor(LogMergePolicy::LEVEL_LOG_SPAN));
        }

        static PyObject *t_LogMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LogMergePolicy::initializeClass, 1)))
            return NULL;
          return t_LogMergePolicy::wrap_Object(LogMergePolicy(((t_LogMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_LogMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LogMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LogMergePolicy_init_(t_LogMergePolicy *self, PyObject *args, PyObject *kwds)
        {
          LogMergePolicy object((jobject) NULL);

          INT_CALL(object = LogMergePolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_LogMergePolicy_close(t_LogMergePolicy *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(LogMergePolicy), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_LogMergePolicy_findForcedDeletesMerges(t_LogMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.findForcedDeletesMerges(a0, a1));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(LogMergePolicy), (PyObject *) self, "findForcedDeletesMerges", args, 2);
        }

        static PyObject *t_LogMergePolicy_findForcedMerges(t_LogMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          jint a1;
          ::java::util::Map a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::IndexWriter a3((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kIKk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3))
          {
            OBJ_CALL(result = self->object.findForcedMerges(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(LogMergePolicy), (PyObject *) self, "findForcedMerges", args, 2);
        }

        static PyObject *t_LogMergePolicy_findMerges(t_LogMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(LogMergePolicy), (PyObject *) self, "findMerges", args, 2);
        }

        static PyObject *t_LogMergePolicy_getCalibrateSizeByDeletes(t_LogMergePolicy *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getCalibrateSizeByDeletes());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_LogMergePolicy_getMaxMergeDocs(t_LogMergePolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxMergeDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LogMergePolicy_getMergeFactor(t_LogMergePolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMergeFactor());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LogMergePolicy_setCalibrateSizeByDeletes(t_LogMergePolicy *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setCalibrateSizeByDeletes(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCalibrateSizeByDeletes", arg);
          return NULL;
        }

        static PyObject *t_LogMergePolicy_setMaxMergeDocs(t_LogMergePolicy *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setMaxMergeDocs(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergeDocs", arg);
          return NULL;
        }

        static PyObject *t_LogMergePolicy_setMergeFactor(t_LogMergePolicy *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setMergeFactor(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMergeFactor", arg);
          return NULL;
        }

        static PyObject *t_LogMergePolicy_toString(t_LogMergePolicy *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(LogMergePolicy), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_LogMergePolicy_get__calibrateSizeByDeletes(t_LogMergePolicy *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getCalibrateSizeByDeletes());
          Py_RETURN_BOOL(value);
        }
        static int t_LogMergePolicy_set__calibrateSizeByDeletes(t_LogMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setCalibrateSizeByDeletes(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "calibrateSizeByDeletes", arg);
          return -1;
        }

        static PyObject *t_LogMergePolicy_get__maxMergeDocs(t_LogMergePolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxMergeDocs());
          return PyInt_FromLong((long) value);
        }
        static int t_LogMergePolicy_set__maxMergeDocs(t_LogMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxMergeDocs(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergeDocs", arg);
          return -1;
        }

        static PyObject *t_LogMergePolicy_get__mergeFactor(t_LogMergePolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMergeFactor());
          return PyInt_FromLong((long) value);
        }
        static int t_LogMergePolicy_set__mergeFactor(t_LogMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMergeFactor(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergeFactor", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MultiValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MultiValueSource::class$ = NULL;
            jmethodID *MultiValueSource::mids$ = NULL;
            bool MultiValueSource::live$ = false;

            jclass MultiValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MultiValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_dimension_54c6a179] = env->getMethodID(cls, "dimension", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MultiValueSource::MultiValueSource() : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            jint MultiValueSource::dimension() const
            {
              return env->callIntMethod(this$, mids$[mid_dimension_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MultiValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MultiValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MultiValueSource_init_(t_MultiValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MultiValueSource_dimension(t_MultiValueSource *self);

            static PyMethodDef t_MultiValueSource__methods_[] = {
              DECLARE_METHOD(t_MultiValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiValueSource, dimension, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MultiValueSource, t_MultiValueSource, ::org::apache::lucene::queries::function::ValueSource, MultiValueSource, t_MultiValueSource_init_, 0, 0, 0, 0, 0);

            void t_MultiValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(MultiValueSource), module, "MultiValueSource", 0);
            }

            void t_MultiValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MultiValueSource).tp_dict, "class_", make_descriptor(MultiValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MultiValueSource).tp_dict, "wrapfn_", make_descriptor(t_MultiValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MultiValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MultiValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MultiValueSource::initializeClass, 1)))
                return NULL;
              return t_MultiValueSource::wrap_Object(MultiValueSource(((t_MultiValueSource *) arg)->object.this$));
            }
            static PyObject *t_MultiValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MultiValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MultiValueSource_init_(t_MultiValueSource *self, PyObject *args, PyObject *kwds)
            {
              MultiValueSource object((jobject) NULL);

              INT_CALL(object = MultiValueSource());
              self->object = object;

              return 0;
            }

            static PyObject *t_MultiValueSource_dimension(t_MultiValueSource *self)
            {
              jint result;
              OBJ_CALL(result = self->object.dimension());
              return PyInt_FromLong((long) result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiTermQuery$ConstantScoreAutoRewrite.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiTermQuery$ConstantScoreAutoRewrite::class$ = NULL;
        jmethodID *MultiTermQuery$ConstantScoreAutoRewrite::mids$ = NULL;
        bool MultiTermQuery$ConstantScoreAutoRewrite::live$ = false;

        jclass MultiTermQuery$ConstantScoreAutoRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiTermQuery$ConstantScoreAutoRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermQuery$ConstantScoreAutoRewrite::MultiTermQuery$ConstantScoreAutoRewrite() : ::org::apache::lucene::search::ConstantScoreAutoRewrite(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_of_(t_MultiTermQuery$ConstantScoreAutoRewrite *self, PyObject *args);
        static int t_MultiTermQuery$ConstantScoreAutoRewrite_init_(t_MultiTermQuery$ConstantScoreAutoRewrite *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_get__parameters_(t_MultiTermQuery$ConstantScoreAutoRewrite *self, void *data);
        static PyGetSetDef t_MultiTermQuery$ConstantScoreAutoRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTermQuery$ConstantScoreAutoRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTermQuery$ConstantScoreAutoRewrite__methods_[] = {
          DECLARE_METHOD(t_MultiTermQuery$ConstantScoreAutoRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$ConstantScoreAutoRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$ConstantScoreAutoRewrite, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTermQuery$ConstantScoreAutoRewrite, t_MultiTermQuery$ConstantScoreAutoRewrite, ::org::apache::lucene::search::ConstantScoreAutoRewrite, MultiTermQuery$ConstantScoreAutoRewrite, t_MultiTermQuery$ConstantScoreAutoRewrite_init_, 0, 0, t_MultiTermQuery$ConstantScoreAutoRewrite__fields_, 0, 0);
        PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite::wrap_Object(const MultiTermQuery$ConstantScoreAutoRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$ConstantScoreAutoRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$ConstantScoreAutoRewrite *self = (t_MultiTermQuery$ConstantScoreAutoRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$ConstantScoreAutoRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$ConstantScoreAutoRewrite *self = (t_MultiTermQuery$ConstantScoreAutoRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MultiTermQuery$ConstantScoreAutoRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermQuery$ConstantScoreAutoRewrite), module, "MultiTermQuery$ConstantScoreAutoRewrite", 0);
        }

        void t_MultiTermQuery$ConstantScoreAutoRewrite::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$ConstantScoreAutoRewrite).tp_dict, "class_", make_descriptor(MultiTermQuery$ConstantScoreAutoRewrite::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$ConstantScoreAutoRewrite).tp_dict, "wrapfn_", make_descriptor(t_MultiTermQuery$ConstantScoreAutoRewrite::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$ConstantScoreAutoRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermQuery$ConstantScoreAutoRewrite::initializeClass, 1)))
            return NULL;
          return t_MultiTermQuery$ConstantScoreAutoRewrite::wrap_Object(MultiTermQuery$ConstantScoreAutoRewrite(((t_MultiTermQuery$ConstantScoreAutoRewrite *) arg)->object.this$));
        }
        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermQuery$ConstantScoreAutoRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_of_(t_MultiTermQuery$ConstantScoreAutoRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MultiTermQuery$ConstantScoreAutoRewrite_init_(t_MultiTermQuery$ConstantScoreAutoRewrite *self, PyObject *args, PyObject *kwds)
        {
          MultiTermQuery$ConstantScoreAutoRewrite object((jobject) NULL);

          INT_CALL(object = MultiTermQuery$ConstantScoreAutoRewrite());
          self->object = object;
          self->parameters[0] = &::org::apache::lucene::search::PY_TYPE(BooleanQuery);

          return 0;
        }
        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_get__parameters_(t_MultiTermQuery$ConstantScoreAutoRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer$ReuseStrategy.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Analyzer::class$ = NULL;
        jmethodID *Analyzer::mids$ = NULL;
        bool Analyzer::live$ = false;
        ::org::apache::lucene::analysis::Analyzer$ReuseStrategy *Analyzer::GLOBAL_REUSE_STRATEGY = NULL;
        ::org::apache::lucene::analysis::Analyzer$ReuseStrategy *Analyzer::PER_FIELD_REUSE_STRATEGY = NULL;

        jclass Analyzer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Analyzer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_9d052de7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer$ReuseStrategy;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getOffsetGap_5fdc3f57] = env->getMethodID(cls, "getOffsetGap", "(Ljava/lang/String;)I");
            mids$[mid_getPositionIncrementGap_5fdc3f57] = env->getMethodID(cls, "getPositionIncrementGap", "(Ljava/lang/String;)I");
            mids$[mid_getReuseStrategy_723277fa] = env->getMethodID(cls, "getReuseStrategy", "()Lorg/apache/lucene/analysis/Analyzer$ReuseStrategy;");
            mids$[mid_tokenStream_b2e3f2ad] = env->getMethodID(cls, "tokenStream", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/analysis/TokenStream;");
            mids$[mid_tokenStream_f8551151] = env->getMethodID(cls, "tokenStream", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/TokenStream;");
            mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_initReader_d8fb1c81] = env->getMethodID(cls, "initReader", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            GLOBAL_REUSE_STRATEGY = new ::org::apache::lucene::analysis::Analyzer$ReuseStrategy(env->getStaticObjectField(cls, "GLOBAL_REUSE_STRATEGY", "Lorg/apache/lucene/analysis/Analyzer$ReuseStrategy;"));
            PER_FIELD_REUSE_STRATEGY = new ::org::apache::lucene::analysis::Analyzer$ReuseStrategy(env->getStaticObjectField(cls, "PER_FIELD_REUSE_STRATEGY", "Lorg/apache/lucene/analysis/Analyzer$ReuseStrategy;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Analyzer::Analyzer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        Analyzer::Analyzer(const ::org::apache::lucene::analysis::Analyzer$ReuseStrategy & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9d052de7, a0.this$)) {}

        void Analyzer::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jint Analyzer::getOffsetGap(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getOffsetGap_5fdc3f57], a0.this$);
        }

        jint Analyzer::getPositionIncrementGap(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getPositionIncrementGap_5fdc3f57], a0.this$);
        }

        ::org::apache::lucene::analysis::Analyzer$ReuseStrategy Analyzer::getReuseStrategy() const
        {
          return ::org::apache::lucene::analysis::Analyzer$ReuseStrategy(env->callObjectMethod(this$, mids$[mid_getReuseStrategy_723277fa]));
        }

        ::org::apache::lucene::analysis::TokenStream Analyzer::tokenStream(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_tokenStream_b2e3f2ad], a0.this$, a1.this$));
        }

        ::org::apache::lucene::analysis::TokenStream Analyzer::tokenStream(const ::java::lang::String & a0, const ::java::io::Reader & a1) const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_tokenStream_f8551151], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/Analyzer$PerFieldReuseStrategy.h"
#include "org/apache/lucene/analysis/Analyzer$GlobalReuseStrategy.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Analyzer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Analyzer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Analyzer_init_(t_Analyzer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Analyzer_close(t_Analyzer *self);
        static PyObject *t_Analyzer_getOffsetGap(t_Analyzer *self, PyObject *arg);
        static PyObject *t_Analyzer_getPositionIncrementGap(t_Analyzer *self, PyObject *arg);
        static PyObject *t_Analyzer_getReuseStrategy(t_Analyzer *self);
        static PyObject *t_Analyzer_tokenStream(t_Analyzer *self, PyObject *args);
        static PyObject *t_Analyzer_get__reuseStrategy(t_Analyzer *self, void *data);
        static PyGetSetDef t_Analyzer__fields_[] = {
          DECLARE_GET_FIELD(t_Analyzer, reuseStrategy),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Analyzer__methods_[] = {
          DECLARE_METHOD(t_Analyzer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer, close, METH_NOARGS),
          DECLARE_METHOD(t_Analyzer, getOffsetGap, METH_O),
          DECLARE_METHOD(t_Analyzer, getPositionIncrementGap, METH_O),
          DECLARE_METHOD(t_Analyzer, getReuseStrategy, METH_NOARGS),
          DECLARE_METHOD(t_Analyzer, tokenStream, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Analyzer, t_Analyzer, ::java::lang::Object, Analyzer, t_Analyzer_init_, 0, 0, t_Analyzer__fields_, 0, 0);

        void t_Analyzer::install(PyObject *module)
        {
          installType(&PY_TYPE(Analyzer), module, "Analyzer", 0);
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "PerFieldReuseStrategy", make_descriptor(&PY_TYPE(Analyzer$PerFieldReuseStrategy)));
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "GlobalReuseStrategy", make_descriptor(&PY_TYPE(Analyzer$GlobalReuseStrategy)));
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "ReuseStrategy", make_descriptor(&PY_TYPE(Analyzer$ReuseStrategy)));
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "TokenStreamComponents", make_descriptor(&PY_TYPE(Analyzer$TokenStreamComponents)));
        }

        void t_Analyzer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "class_", make_descriptor(Analyzer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "wrapfn_", make_descriptor(t_Analyzer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Analyzer::initializeClass);
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "GLOBAL_REUSE_STRATEGY", make_descriptor(::org::apache::lucene::analysis::t_Analyzer$ReuseStrategy::wrap_Object(*Analyzer::GLOBAL_REUSE_STRATEGY)));
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "PER_FIELD_REUSE_STRATEGY", make_descriptor(::org::apache::lucene::analysis::t_Analyzer$ReuseStrategy::wrap_Object(*Analyzer::PER_FIELD_REUSE_STRATEGY)));
        }

        static PyObject *t_Analyzer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Analyzer::initializeClass, 1)))
            return NULL;
          return t_Analyzer::wrap_Object(Analyzer(((t_Analyzer *) arg)->object.this$));
        }
        static PyObject *t_Analyzer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Analyzer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Analyzer_init_(t_Analyzer *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              Analyzer object((jobject) NULL);

              INT_CALL(object = Analyzer());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::org::apache::lucene::analysis::Analyzer$ReuseStrategy a0((jobject) NULL);
              Analyzer object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer$ReuseStrategy::initializeClass, &a0))
              {
                INT_CALL(object = Analyzer(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Analyzer_close(t_Analyzer *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_Analyzer_getOffsetGap(t_Analyzer *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getOffsetGap(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getOffsetGap", arg);
          return NULL;
        }

        static PyObject *t_Analyzer_getPositionIncrementGap(t_Analyzer *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getPositionIncrementGap(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getPositionIncrementGap", arg);
          return NULL;
        }

        static PyObject *t_Analyzer_getReuseStrategy(t_Analyzer *self)
        {
          ::org::apache::lucene::analysis::Analyzer$ReuseStrategy result((jobject) NULL);
          OBJ_CALL(result = self->object.getReuseStrategy());
          return ::org::apache::lucene::analysis::t_Analyzer$ReuseStrategy::wrap_Object(result);
        }

        static PyObject *t_Analyzer_tokenStream(t_Analyzer *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(result = self->object.tokenStream(a0, a1));
                return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::io::Reader a1((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.tokenStream(a0, a1));
                return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "tokenStream", args);
          return NULL;
        }

        static PyObject *t_Analyzer_get__reuseStrategy(t_Analyzer *self, void *data)
        {
          ::org::apache::lucene::analysis::Analyzer$ReuseStrategy value((jobject) NULL);
          OBJ_CALL(value = self->object.getReuseStrategy());
          return ::org::apache::lucene::analysis::t_Analyzer$ReuseStrategy::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/SortedIntSet$FrozenIntSet.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/automaton/State.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *SortedIntSet$FrozenIntSet::class$ = NULL;
          jmethodID *SortedIntSet$FrozenIntSet::mids$ = NULL;
          bool SortedIntSet$FrozenIntSet::live$ = false;

          jclass SortedIntSet$FrozenIntSet::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/SortedIntSet$FrozenIntSet");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8b58b7f9] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/util/automaton/State;)V");
              mids$[mid_init$_8bb61283] = env->getMethodID(cls, "<init>", "([IILorg/apache/lucene/util/automaton/State;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedIntSet$FrozenIntSet::SortedIntSet$FrozenIntSet(jint a0, const ::org::apache::lucene::util::automaton::State & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8b58b7f9, a0, a1.this$)) {}

          SortedIntSet$FrozenIntSet::SortedIntSet$FrozenIntSet(const JArray< jint > & a0, jint a1, const ::org::apache::lucene::util::automaton::State & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8bb61283, a0.this$, a1, a2.this$)) {}

          jboolean SortedIntSet$FrozenIntSet::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint SortedIntSet$FrozenIntSet::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String SortedIntSet$FrozenIntSet::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_SortedIntSet$FrozenIntSet_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedIntSet$FrozenIntSet_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedIntSet$FrozenIntSet_init_(t_SortedIntSet$FrozenIntSet *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedIntSet$FrozenIntSet_equals(t_SortedIntSet$FrozenIntSet *self, PyObject *args);
          static PyObject *t_SortedIntSet$FrozenIntSet_hashCode(t_SortedIntSet$FrozenIntSet *self, PyObject *args);
          static PyObject *t_SortedIntSet$FrozenIntSet_toString(t_SortedIntSet$FrozenIntSet *self, PyObject *args);

          static PyMethodDef t_SortedIntSet$FrozenIntSet__methods_[] = {
            DECLARE_METHOD(t_SortedIntSet$FrozenIntSet, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedIntSet$FrozenIntSet, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedIntSet$FrozenIntSet, equals, METH_VARARGS),
            DECLARE_METHOD(t_SortedIntSet$FrozenIntSet, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SortedIntSet$FrozenIntSet, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedIntSet$FrozenIntSet, t_SortedIntSet$FrozenIntSet, ::java::lang::Object, SortedIntSet$FrozenIntSet, t_SortedIntSet$FrozenIntSet_init_, 0, 0, 0, 0, 0);

          void t_SortedIntSet$FrozenIntSet::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedIntSet$FrozenIntSet), module, "SortedIntSet$FrozenIntSet", 0);
          }

          void t_SortedIntSet$FrozenIntSet::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedIntSet$FrozenIntSet).tp_dict, "class_", make_descriptor(SortedIntSet$FrozenIntSet::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedIntSet$FrozenIntSet).tp_dict, "wrapfn_", make_descriptor(t_SortedIntSet$FrozenIntSet::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedIntSet$FrozenIntSet).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedIntSet$FrozenIntSet_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedIntSet$FrozenIntSet::initializeClass, 1)))
              return NULL;
            return t_SortedIntSet$FrozenIntSet::wrap_Object(SortedIntSet$FrozenIntSet(((t_SortedIntSet$FrozenIntSet *) arg)->object.this$));
          }
          static PyObject *t_SortedIntSet$FrozenIntSet_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedIntSet$FrozenIntSet::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedIntSet$FrozenIntSet_init_(t_SortedIntSet$FrozenIntSet *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jint a0;
                ::org::apache::lucene::util::automaton::State a1((jobject) NULL);
                SortedIntSet$FrozenIntSet object((jobject) NULL);

                if (!parseArgs(args, "Ik", ::org::apache::lucene::util::automaton::State::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SortedIntSet$FrozenIntSet(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                JArray< jint > a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::util::automaton::State a2((jobject) NULL);
                SortedIntSet$FrozenIntSet object((jobject) NULL);

                if (!parseArgs(args, "[IIk", ::org::apache::lucene::util::automaton::State::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SortedIntSet$FrozenIntSet(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedIntSet$FrozenIntSet_equals(t_SortedIntSet$FrozenIntSet *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SortedIntSet$FrozenIntSet), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SortedIntSet$FrozenIntSet_hashCode(t_SortedIntSet$FrozenIntSet *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SortedIntSet$FrozenIntSet), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SortedIntSet$FrozenIntSet_toString(t_SortedIntSet$FrozenIntSet *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SortedIntSet$FrozenIntSet), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$numeric_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$numeric_return::class$ = NULL;
          jmethodID *JavascriptParser$numeric_return::mids$ = NULL;
          bool JavascriptParser$numeric_return::live$ = false;

          jclass JavascriptParser$numeric_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$numeric_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$numeric_return::JavascriptParser$numeric_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$numeric_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$numeric_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$numeric_return_init_(t_JavascriptParser$numeric_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$numeric_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$numeric_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$numeric_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$numeric_return, t_JavascriptParser$numeric_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$numeric_return, t_JavascriptParser$numeric_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$numeric_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$numeric_return), module, "JavascriptParser$numeric_return", 0);
          }

          void t_JavascriptParser$numeric_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$numeric_return).tp_dict, "class_", make_descriptor(JavascriptParser$numeric_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$numeric_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$numeric_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$numeric_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$numeric_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$numeric_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$numeric_return::wrap_Object(JavascriptParser$numeric_return(((t_JavascriptParser$numeric_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$numeric_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$numeric_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$numeric_return_init_(t_JavascriptParser$numeric_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$numeric_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$numeric_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/RangeQueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *RangeQueryNode::class$ = NULL;
              jmethodID *RangeQueryNode::mids$ = NULL;
              bool RangeQueryNode::live$ = false;

              jclass RangeQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/RangeQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getLowerBound_2906e52b] = env->getMethodID(cls, "getLowerBound", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;");
                  mids$[mid_getUpperBound_2906e52b] = env->getMethodID(cls, "getUpperBound", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;");
                  mids$[mid_isLowerInclusive_54c6a16a] = env->getMethodID(cls, "isLowerInclusive", "()Z");
                  mids$[mid_isUpperInclusive_54c6a16a] = env->getMethodID(cls, "isUpperInclusive", "()Z");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode RangeQueryNode::getLowerBound() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode(env->callObjectMethod(this$, mids$[mid_getLowerBound_2906e52b]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode RangeQueryNode::getUpperBound() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode(env->callObjectMethod(this$, mids$[mid_getUpperBound_2906e52b]));
              }

              jboolean RangeQueryNode::isLowerInclusive() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isLowerInclusive_54c6a16a]);
              }

              jboolean RangeQueryNode::isUpperInclusive() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isUpperInclusive_54c6a16a]);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_RangeQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RangeQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RangeQueryNode_of_(t_RangeQueryNode *self, PyObject *args);
              static PyObject *t_RangeQueryNode_getLowerBound(t_RangeQueryNode *self);
              static PyObject *t_RangeQueryNode_getUpperBound(t_RangeQueryNode *self);
              static PyObject *t_RangeQueryNode_isLowerInclusive(t_RangeQueryNode *self);
              static PyObject *t_RangeQueryNode_isUpperInclusive(t_RangeQueryNode *self);
              static PyObject *t_RangeQueryNode_get__lowerBound(t_RangeQueryNode *self, void *data);
              static PyObject *t_RangeQueryNode_get__lowerInclusive(t_RangeQueryNode *self, void *data);
              static PyObject *t_RangeQueryNode_get__upperBound(t_RangeQueryNode *self, void *data);
              static PyObject *t_RangeQueryNode_get__upperInclusive(t_RangeQueryNode *self, void *data);
              static PyObject *t_RangeQueryNode_get__parameters_(t_RangeQueryNode *self, void *data);
              static PyGetSetDef t_RangeQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_RangeQueryNode, lowerBound),
                DECLARE_GET_FIELD(t_RangeQueryNode, lowerInclusive),
                DECLARE_GET_FIELD(t_RangeQueryNode, upperBound),
                DECLARE_GET_FIELD(t_RangeQueryNode, upperInclusive),
                DECLARE_GET_FIELD(t_RangeQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_RangeQueryNode__methods_[] = {
                DECLARE_METHOD(t_RangeQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RangeQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RangeQueryNode, of_, METH_VARARGS),
                DECLARE_METHOD(t_RangeQueryNode, getLowerBound, METH_NOARGS),
                DECLARE_METHOD(t_RangeQueryNode, getUpperBound, METH_NOARGS),
                DECLARE_METHOD(t_RangeQueryNode, isLowerInclusive, METH_NOARGS),
                DECLARE_METHOD(t_RangeQueryNode, isUpperInclusive, METH_NOARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(RangeQueryNode, t_RangeQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldableNode, RangeQueryNode, abstract_init, 0, 0, t_RangeQueryNode__fields_, 0, 0);
              PyObject *t_RangeQueryNode::wrap_Object(const RangeQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_RangeQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_RangeQueryNode *self = (t_RangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_RangeQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_RangeQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_RangeQueryNode *self = (t_RangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_RangeQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(RangeQueryNode), module, "RangeQueryNode", 0);
              }

              void t_RangeQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(RangeQueryNode).tp_dict, "class_", make_descriptor(RangeQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(RangeQueryNode).tp_dict, "wrapfn_", make_descriptor(t_RangeQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(RangeQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_RangeQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, RangeQueryNode::initializeClass, 1)))
                  return NULL;
                return t_RangeQueryNode::wrap_Object(RangeQueryNode(((t_RangeQueryNode *) arg)->object.this$));
              }
              static PyObject *t_RangeQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, RangeQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_RangeQueryNode_of_(t_RangeQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_RangeQueryNode_getLowerBound(t_RangeQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getLowerBound());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(result);
              }

              static PyObject *t_RangeQueryNode_getUpperBound(t_RangeQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getUpperBound());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(result);
              }

              static PyObject *t_RangeQueryNode_isLowerInclusive(t_RangeQueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isLowerInclusive());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_RangeQueryNode_isUpperInclusive(t_RangeQueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isUpperInclusive());
                Py_RETURN_BOOL(result);
              }
              static PyObject *t_RangeQueryNode_get__parameters_(t_RangeQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }

              static PyObject *t_RangeQueryNode_get__lowerBound(t_RangeQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getLowerBound());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(value);
              }

              static PyObject *t_RangeQueryNode_get__lowerInclusive(t_RangeQueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isLowerInclusive());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_RangeQueryNode_get__upperBound(t_RangeQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getUpperBound());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(value);
              }

              static PyObject *t_RangeQueryNode_get__upperInclusive(t_RangeQueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isUpperInclusive());
                Py_RETURN_BOOL(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfoFormat.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/SegmentInfoReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/SegmentInfoWriter.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene3x {

          ::java::lang::Class *Lucene3xSegmentInfoFormat::class$ = NULL;
          jmethodID *Lucene3xSegmentInfoFormat::mids$ = NULL;
          bool Lucene3xSegmentInfoFormat::live$ = false;
          ::java::lang::String *Lucene3xSegmentInfoFormat::DS_COMPOUND_KEY = NULL;
          ::java::lang::String *Lucene3xSegmentInfoFormat::DS_NAME_KEY = NULL;
          ::java::lang::String *Lucene3xSegmentInfoFormat::DS_OFFSET_KEY = NULL;
          jint Lucene3xSegmentInfoFormat::FORMAT_3_1 = (jint) 0;
          jint Lucene3xSegmentInfoFormat::FORMAT_DIAGNOSTICS = (jint) 0;
          jint Lucene3xSegmentInfoFormat::FORMAT_HAS_VECTORS = (jint) 0;
          ::java::lang::String *Lucene3xSegmentInfoFormat::NORMGEN_KEY = NULL;
          ::java::lang::String *Lucene3xSegmentInfoFormat::NORMGEN_PREFIX = NULL;
          ::java::lang::String *Lucene3xSegmentInfoFormat::UPGRADED_SI_CODEC_NAME = NULL;
          ::java::lang::String *Lucene3xSegmentInfoFormat::UPGRADED_SI_EXTENSION = NULL;
          jint Lucene3xSegmentInfoFormat::UPGRADED_SI_VERSION_CURRENT = (jint) 0;
          jint Lucene3xSegmentInfoFormat::UPGRADED_SI_VERSION_START = (jint) 0;

          jclass Lucene3xSegmentInfoFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfoFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getDocStoreIsCompoundFile_196ca35f] = env->getStaticMethodID(cls, "getDocStoreIsCompoundFile", "(Lorg/apache/lucene/index/SegmentInfo;)Z");
              mids$[mid_getDocStoreOffset_196ca34c] = env->getStaticMethodID(cls, "getDocStoreOffset", "(Lorg/apache/lucene/index/SegmentInfo;)I");
              mids$[mid_getDocStoreSegment_44869e72] = env->getStaticMethodID(cls, "getDocStoreSegment", "(Lorg/apache/lucene/index/SegmentInfo;)Ljava/lang/String;");
              mids$[mid_getSegmentInfoReader_1e88b6e7] = env->getMethodID(cls, "getSegmentInfoReader", "()Lorg/apache/lucene/codecs/SegmentInfoReader;");
              mids$[mid_getSegmentInfoWriter_2d4ab533] = env->getMethodID(cls, "getSegmentInfoWriter", "()Lorg/apache/lucene/codecs/SegmentInfoWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DS_COMPOUND_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "DS_COMPOUND_KEY", "Ljava/lang/String;"));
              DS_NAME_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "DS_NAME_KEY", "Ljava/lang/String;"));
              DS_OFFSET_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "DS_OFFSET_KEY", "Ljava/lang/String;"));
              FORMAT_3_1 = env->getStaticIntField(cls, "FORMAT_3_1");
              FORMAT_DIAGNOSTICS = env->getStaticIntField(cls, "FORMAT_DIAGNOSTICS");
              FORMAT_HAS_VECTORS = env->getStaticIntField(cls, "FORMAT_HAS_VECTORS");
              NORMGEN_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "NORMGEN_KEY", "Ljava/lang/String;"));
              NORMGEN_PREFIX = new ::java::lang::String(env->getStaticObjectField(cls, "NORMGEN_PREFIX", "Ljava/lang/String;"));
              UPGRADED_SI_CODEC_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "UPGRADED_SI_CODEC_NAME", "Ljava/lang/String;"));
              UPGRADED_SI_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "UPGRADED_SI_EXTENSION", "Ljava/lang/String;"));
              UPGRADED_SI_VERSION_CURRENT = env->getStaticIntField(cls, "UPGRADED_SI_VERSION_CURRENT");
              UPGRADED_SI_VERSION_START = env->getStaticIntField(cls, "UPGRADED_SI_VERSION_START");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene3xSegmentInfoFormat::Lucene3xSegmentInfoFormat() : ::org::apache::lucene::codecs::SegmentInfoFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean Lucene3xSegmentInfoFormat::getDocStoreIsCompoundFile(const ::org::apache::lucene::index::SegmentInfo & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_getDocStoreIsCompoundFile_196ca35f], a0.this$);
          }

          jint Lucene3xSegmentInfoFormat::getDocStoreOffset(const ::org::apache::lucene::index::SegmentInfo & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_getDocStoreOffset_196ca34c], a0.this$);
          }

          ::java::lang::String Lucene3xSegmentInfoFormat::getDocStoreSegment(const ::org::apache::lucene::index::SegmentInfo & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getDocStoreSegment_44869e72], a0.this$));
          }

          ::org::apache::lucene::codecs::SegmentInfoReader Lucene3xSegmentInfoFormat::getSegmentInfoReader() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoReader(env->callObjectMethod(this$, mids$[mid_getSegmentInfoReader_1e88b6e7]));
          }

          ::org::apache::lucene::codecs::SegmentInfoWriter Lucene3xSegmentInfoFormat::getSegmentInfoWriter() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoWriter(env->callObjectMethod(this$, mids$[mid_getSegmentInfoWriter_2d4ab533]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene3x {
          static PyObject *t_Lucene3xSegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene3xSegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene3xSegmentInfoFormat_init_(t_Lucene3xSegmentInfoFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene3xSegmentInfoFormat_getDocStoreIsCompoundFile(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene3xSegmentInfoFormat_getDocStoreOffset(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene3xSegmentInfoFormat_getDocStoreSegment(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene3xSegmentInfoFormat_getSegmentInfoReader(t_Lucene3xSegmentInfoFormat *self, PyObject *args);
          static PyObject *t_Lucene3xSegmentInfoFormat_getSegmentInfoWriter(t_Lucene3xSegmentInfoFormat *self, PyObject *args);
          static PyObject *t_Lucene3xSegmentInfoFormat_get__segmentInfoReader(t_Lucene3xSegmentInfoFormat *self, void *data);
          static PyObject *t_Lucene3xSegmentInfoFormat_get__segmentInfoWriter(t_Lucene3xSegmentInfoFormat *self, void *data);
          static PyGetSetDef t_Lucene3xSegmentInfoFormat__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene3xSegmentInfoFormat, segmentInfoReader),
            DECLARE_GET_FIELD(t_Lucene3xSegmentInfoFormat, segmentInfoWriter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene3xSegmentInfoFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene3xSegmentInfoFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoFormat, getDocStoreIsCompoundFile, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoFormat, getDocStoreOffset, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoFormat, getDocStoreSegment, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoFormat, getSegmentInfoReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoFormat, getSegmentInfoWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene3xSegmentInfoFormat, t_Lucene3xSegmentInfoFormat, ::org::apache::lucene::codecs::SegmentInfoFormat, Lucene3xSegmentInfoFormat, t_Lucene3xSegmentInfoFormat_init_, 0, 0, t_Lucene3xSegmentInfoFormat__fields_, 0, 0);

          void t_Lucene3xSegmentInfoFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene3xSegmentInfoFormat), module, "Lucene3xSegmentInfoFormat", 0);
          }

          void t_Lucene3xSegmentInfoFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "class_", make_descriptor(Lucene3xSegmentInfoFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene3xSegmentInfoFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene3xSegmentInfoFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "DS_COMPOUND_KEY", make_descriptor(j2p(*Lucene3xSegmentInfoFormat::DS_COMPOUND_KEY)));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "DS_NAME_KEY", make_descriptor(j2p(*Lucene3xSegmentInfoFormat::DS_NAME_KEY)));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "DS_OFFSET_KEY", make_descriptor(j2p(*Lucene3xSegmentInfoFormat::DS_OFFSET_KEY)));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "FORMAT_3_1", make_descriptor(Lucene3xSegmentInfoFormat::FORMAT_3_1));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "FORMAT_DIAGNOSTICS", make_descriptor(Lucene3xSegmentInfoFormat::FORMAT_DIAGNOSTICS));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "FORMAT_HAS_VECTORS", make_descriptor(Lucene3xSegmentInfoFormat::FORMAT_HAS_VECTORS));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "NORMGEN_KEY", make_descriptor(j2p(*Lucene3xSegmentInfoFormat::NORMGEN_KEY)));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "NORMGEN_PREFIX", make_descriptor(j2p(*Lucene3xSegmentInfoFormat::NORMGEN_PREFIX)));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "UPGRADED_SI_CODEC_NAME", make_descriptor(j2p(*Lucene3xSegmentInfoFormat::UPGRADED_SI_CODEC_NAME)));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "UPGRADED_SI_EXTENSION", make_descriptor(j2p(*Lucene3xSegmentInfoFormat::UPGRADED_SI_EXTENSION)));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "UPGRADED_SI_VERSION_CURRENT", make_descriptor(Lucene3xSegmentInfoFormat::UPGRADED_SI_VERSION_CURRENT));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "UPGRADED_SI_VERSION_START", make_descriptor(Lucene3xSegmentInfoFormat::UPGRADED_SI_VERSION_START));
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene3xSegmentInfoFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene3xSegmentInfoFormat::wrap_Object(Lucene3xSegmentInfoFormat(((t_Lucene3xSegmentInfoFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene3xSegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene3xSegmentInfoFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene3xSegmentInfoFormat_init_(t_Lucene3xSegmentInfoFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene3xSegmentInfoFormat object((jobject) NULL);

            INT_CALL(object = Lucene3xSegmentInfoFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_getDocStoreIsCompoundFile(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::index::SegmentInfo a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::lucene3x::Lucene3xSegmentInfoFormat::getDocStoreIsCompoundFile(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "getDocStoreIsCompoundFile", arg);
            return NULL;
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_getDocStoreOffset(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::index::SegmentInfo a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::lucene3x::Lucene3xSegmentInfoFormat::getDocStoreOffset(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "getDocStoreOffset", arg);
            return NULL;
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_getDocStoreSegment(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::index::SegmentInfo a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::lucene3x::Lucene3xSegmentInfoFormat::getDocStoreSegment(a0));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "getDocStoreSegment", arg);
            return NULL;
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_getSegmentInfoReader(t_Lucene3xSegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSegmentInfoReader());
              return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xSegmentInfoFormat), (PyObject *) self, "getSegmentInfoReader", args, 2);
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_getSegmentInfoWriter(t_Lucene3xSegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoWriter result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSegmentInfoWriter());
              return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xSegmentInfoFormat), (PyObject *) self, "getSegmentInfoWriter", args, 2);
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_get__segmentInfoReader(t_Lucene3xSegmentInfoFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::SegmentInfoReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getSegmentInfoReader());
            return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(value);
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_get__segmentInfoWriter(t_Lucene3xSegmentInfoFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::SegmentInfoWriter value((jobject) NULL);
            OBJ_CALL(value = self->object.getSegmentInfoWriter());
            return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *DelimitedPayloadTokenFilterFactory::class$ = NULL;
          jmethodID *DelimitedPayloadTokenFilterFactory::mids$ = NULL;
          bool DelimitedPayloadTokenFilterFactory::live$ = false;
          ::java::lang::String *DelimitedPayloadTokenFilterFactory::DELIMITER_ATTR = NULL;
          ::java::lang::String *DelimitedPayloadTokenFilterFactory::ENCODER_ATTR = NULL;

          jclass DelimitedPayloadTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ca2c8453] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DELIMITER_ATTR = new ::java::lang::String(env->getStaticObjectField(cls, "DELIMITER_ATTR", "Ljava/lang/String;"));
              ENCODER_ATTR = new ::java::lang::String(env->getStaticObjectField(cls, "ENCODER_ATTR", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DelimitedPayloadTokenFilterFactory::DelimitedPayloadTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::payloads::DelimitedPayloadTokenFilter DelimitedPayloadTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::payloads::DelimitedPayloadTokenFilter(env->callObjectMethod(this$, mids$[mid_create_ca2c8453], a0.this$));
          }

          void DelimitedPayloadTokenFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_DelimitedPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DelimitedPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DelimitedPayloadTokenFilterFactory_init_(t_DelimitedPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DelimitedPayloadTokenFilterFactory_create(t_DelimitedPayloadTokenFilterFactory *self, PyObject *args);
          static PyObject *t_DelimitedPayloadTokenFilterFactory_inform(t_DelimitedPayloadTokenFilterFactory *self, PyObject *arg);

          static PyMethodDef t_DelimitedPayloadTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_DelimitedPayloadTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DelimitedPayloadTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DelimitedPayloadTokenFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_DelimitedPayloadTokenFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DelimitedPayloadTokenFilterFactory, t_DelimitedPayloadTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, DelimitedPayloadTokenFilterFactory, t_DelimitedPayloadTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_DelimitedPayloadTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(DelimitedPayloadTokenFilterFactory), module, "DelimitedPayloadTokenFilterFactory", 0);
          }

          void t_DelimitedPayloadTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilterFactory).tp_dict, "class_", make_descriptor(DelimitedPayloadTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_DelimitedPayloadTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DelimitedPayloadTokenFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilterFactory).tp_dict, "DELIMITER_ATTR", make_descriptor(j2p(*DelimitedPayloadTokenFilterFactory::DELIMITER_ATTR)));
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilterFactory).tp_dict, "ENCODER_ATTR", make_descriptor(j2p(*DelimitedPayloadTokenFilterFactory::ENCODER_ATTR)));
          }

          static PyObject *t_DelimitedPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DelimitedPayloadTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_DelimitedPayloadTokenFilterFactory::wrap_Object(DelimitedPayloadTokenFilterFactory(((t_DelimitedPayloadTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_DelimitedPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DelimitedPayloadTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DelimitedPayloadTokenFilterFactory_init_(t_DelimitedPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            DelimitedPayloadTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = DelimitedPayloadTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DelimitedPayloadTokenFilterFactory_create(t_DelimitedPayloadTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::payloads::DelimitedPayloadTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::payloads::t_DelimitedPayloadTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DelimitedPayloadTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_DelimitedPayloadTokenFilterFactory_inform(t_DelimitedPayloadTokenFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/SimpleFragListBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *SimpleFragListBuilder::class$ = NULL;
          jmethodID *SimpleFragListBuilder::mids$ = NULL;
          bool SimpleFragListBuilder::live$ = false;

          jclass SimpleFragListBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/SimpleFragListBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_createFieldFragList_f54fd6ce] = env->getMethodID(cls, "createFieldFragList", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;I)Lorg/apache/lucene/search/vectorhighlight/FieldFragList;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleFragListBuilder::SimpleFragListBuilder() : ::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          SimpleFragListBuilder::SimpleFragListBuilder(jint a0) : ::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          ::org::apache::lucene::search::vectorhighlight::FieldFragList SimpleFragListBuilder::createFieldFragList(const ::org::apache::lucene::search::vectorhighlight::FieldPhraseList & a0, jint a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->callObjectMethod(this$, mids$[mid_createFieldFragList_f54fd6ce], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_SimpleFragListBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleFragListBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleFragListBuilder_init_(t_SimpleFragListBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleFragListBuilder_createFieldFragList(t_SimpleFragListBuilder *self, PyObject *args);

          static PyMethodDef t_SimpleFragListBuilder__methods_[] = {
            DECLARE_METHOD(t_SimpleFragListBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragListBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragListBuilder, createFieldFragList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleFragListBuilder, t_SimpleFragListBuilder, ::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder, SimpleFragListBuilder, t_SimpleFragListBuilder_init_, 0, 0, 0, 0, 0);

          void t_SimpleFragListBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleFragListBuilder), module, "SimpleFragListBuilder", 0);
          }

          void t_SimpleFragListBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleFragListBuilder).tp_dict, "class_", make_descriptor(SimpleFragListBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleFragListBuilder).tp_dict, "wrapfn_", make_descriptor(t_SimpleFragListBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleFragListBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleFragListBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleFragListBuilder::initializeClass, 1)))
              return NULL;
            return t_SimpleFragListBuilder::wrap_Object(SimpleFragListBuilder(((t_SimpleFragListBuilder *) arg)->object.this$));
          }
          static PyObject *t_SimpleFragListBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleFragListBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleFragListBuilder_init_(t_SimpleFragListBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SimpleFragListBuilder object((jobject) NULL);

                INT_CALL(object = SimpleFragListBuilder());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                SimpleFragListBuilder object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = SimpleFragListBuilder(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleFragListBuilder_createFieldFragList(t_SimpleFragListBuilder *self, PyObject *args)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldPhraseList a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::vectorhighlight::FieldFragList result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::vectorhighlight::FieldPhraseList::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.createFieldFragList(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldFragList::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SimpleFragListBuilder), (PyObject *) self, "createFieldFragList", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/MatchAllDocsQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/search/MatchAllDocsQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *MatchAllDocsQueryNodeBuilder::class$ = NULL;
              jmethodID *MatchAllDocsQueryNodeBuilder::mids$ = NULL;
              bool MatchAllDocsQueryNodeBuilder::live$ = false;

              jclass MatchAllDocsQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/MatchAllDocsQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_94b64688] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/MatchAllDocsQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MatchAllDocsQueryNodeBuilder::MatchAllDocsQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::MatchAllDocsQuery MatchAllDocsQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::MatchAllDocsQuery(env->callObjectMethod(this$, mids$[mid_build_94b64688], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_MatchAllDocsQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MatchAllDocsQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MatchAllDocsQueryNodeBuilder_init_(t_MatchAllDocsQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MatchAllDocsQueryNodeBuilder_build(t_MatchAllDocsQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_MatchAllDocsQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_MatchAllDocsQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchAllDocsQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchAllDocsQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MatchAllDocsQueryNodeBuilder, t_MatchAllDocsQueryNodeBuilder, ::java::lang::Object, MatchAllDocsQueryNodeBuilder, t_MatchAllDocsQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_MatchAllDocsQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(MatchAllDocsQueryNodeBuilder), module, "MatchAllDocsQueryNodeBuilder", 0);
              }

              void t_MatchAllDocsQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNodeBuilder).tp_dict, "class_", make_descriptor(MatchAllDocsQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_MatchAllDocsQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MatchAllDocsQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MatchAllDocsQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_MatchAllDocsQueryNodeBuilder::wrap_Object(MatchAllDocsQueryNodeBuilder(((t_MatchAllDocsQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_MatchAllDocsQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MatchAllDocsQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MatchAllDocsQueryNodeBuilder_init_(t_MatchAllDocsQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                MatchAllDocsQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = MatchAllDocsQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_MatchAllDocsQueryNodeBuilder_build(t_MatchAllDocsQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::MatchAllDocsQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_MatchAllDocsQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/ChecksumIndexInput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *ChecksumIndexInput::class$ = NULL;
        jmethodID *ChecksumIndexInput::mids$ = NULL;
        bool ChecksumIndexInput::live$ = false;

        jclass ChecksumIndexInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/ChecksumIndexInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getChecksum_54c6a17a] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_seek_0ee6df2f] = env->getMethodID(cls, "seek", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong ChecksumIndexInput::getChecksum() const
        {
          return env->callLongMethod(this$, mids$[mid_getChecksum_54c6a17a]);
        }

        void ChecksumIndexInput::seek(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seek_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_ChecksumIndexInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ChecksumIndexInput_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ChecksumIndexInput_getChecksum(t_ChecksumIndexInput *self);
        static PyObject *t_ChecksumIndexInput_seek(t_ChecksumIndexInput *self, PyObject *args);
        static PyObject *t_ChecksumIndexInput_get__checksum(t_ChecksumIndexInput *self, void *data);
        static PyGetSetDef t_ChecksumIndexInput__fields_[] = {
          DECLARE_GET_FIELD(t_ChecksumIndexInput, checksum),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ChecksumIndexInput__methods_[] = {
          DECLARE_METHOD(t_ChecksumIndexInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ChecksumIndexInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ChecksumIndexInput, getChecksum, METH_NOARGS),
          DECLARE_METHOD(t_ChecksumIndexInput, seek, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ChecksumIndexInput, t_ChecksumIndexInput, ::org::apache::lucene::store::IndexInput, ChecksumIndexInput, abstract_init, 0, 0, t_ChecksumIndexInput__fields_, 0, 0);

        void t_ChecksumIndexInput::install(PyObject *module)
        {
          installType(&PY_TYPE(ChecksumIndexInput), module, "ChecksumIndexInput", 0);
        }

        void t_ChecksumIndexInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ChecksumIndexInput).tp_dict, "class_", make_descriptor(ChecksumIndexInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ChecksumIndexInput).tp_dict, "wrapfn_", make_descriptor(t_ChecksumIndexInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ChecksumIndexInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ChecksumIndexInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ChecksumIndexInput::initializeClass, 1)))
            return NULL;
          return t_ChecksumIndexInput::wrap_Object(ChecksumIndexInput(((t_ChecksumIndexInput *) arg)->object.this$));
        }
        static PyObject *t_ChecksumIndexInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ChecksumIndexInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ChecksumIndexInput_getChecksum(t_ChecksumIndexInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_ChecksumIndexInput_seek(t_ChecksumIndexInput *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.seek(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ChecksumIndexInput), (PyObject *) self, "seek", args, 2);
        }

        static PyObject *t_ChecksumIndexInput_get__checksum(t_ChecksumIndexInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniNormalizer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniNormalizer::class$ = NULL;
          jmethodID *SoraniNormalizer::mids$ = NULL;
          bool SoraniNormalizer::live$ = false;

          jclass SoraniNormalizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniNormalizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normalize_ec6430eb] = env->getMethodID(cls, "normalize", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniNormalizer::SoraniNormalizer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint SoraniNormalizer::normalize(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_normalize_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniNormalizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniNormalizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniNormalizer_init_(t_SoraniNormalizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniNormalizer_normalize(t_SoraniNormalizer *self, PyObject *args);

          static PyMethodDef t_SoraniNormalizer__methods_[] = {
            DECLARE_METHOD(t_SoraniNormalizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizer, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SoraniNormalizer, t_SoraniNormalizer, ::java::lang::Object, SoraniNormalizer, t_SoraniNormalizer_init_, 0, 0, 0, 0, 0);

          void t_SoraniNormalizer::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniNormalizer), module, "SoraniNormalizer", 0);
          }

          void t_SoraniNormalizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SoraniNormalizer).tp_dict, "class_", make_descriptor(SoraniNormalizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SoraniNormalizer).tp_dict, "wrapfn_", make_descriptor(t_SoraniNormalizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SoraniNormalizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SoraniNormalizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniNormalizer::initializeClass, 1)))
              return NULL;
            return t_SoraniNormalizer::wrap_Object(SoraniNormalizer(((t_SoraniNormalizer *) arg)->object.this$));
          }
          static PyObject *t_SoraniNormalizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniNormalizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniNormalizer_init_(t_SoraniNormalizer *self, PyObject *args, PyObject *kwds)
          {
            SoraniNormalizer object((jobject) NULL);

            INT_CALL(object = SoraniNormalizer());
            self->object = object;

            return 0;
          }

          static PyObject *t_SoraniNormalizer_normalize(t_SoraniNormalizer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.normalize(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SuggestMode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SuggestMode::class$ = NULL;
          jmethodID *SuggestMode::mids$ = NULL;
          bool SuggestMode::live$ = false;
          SuggestMode *SuggestMode::SUGGEST_ALWAYS = NULL;
          SuggestMode *SuggestMode::SUGGEST_MORE_POPULAR = NULL;
          SuggestMode *SuggestMode::SUGGEST_WHEN_NOT_IN_INDEX = NULL;

          jclass SuggestMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SuggestMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_ca4a62d8] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/spell/SuggestMode;");
              mids$[mid_values_1d9d8b36] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/spell/SuggestMode;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              SUGGEST_ALWAYS = new SuggestMode(env->getStaticObjectField(cls, "SUGGEST_ALWAYS", "Lorg/apache/lucene/search/spell/SuggestMode;"));
              SUGGEST_MORE_POPULAR = new SuggestMode(env->getStaticObjectField(cls, "SUGGEST_MORE_POPULAR", "Lorg/apache/lucene/search/spell/SuggestMode;"));
              SUGGEST_WHEN_NOT_IN_INDEX = new SuggestMode(env->getStaticObjectField(cls, "SUGGEST_WHEN_NOT_IN_INDEX", "Lorg/apache/lucene/search/spell/SuggestMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SuggestMode SuggestMode::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return SuggestMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ca4a62d8], a0.this$));
          }

          JArray< SuggestMode > SuggestMode::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< SuggestMode >(env->callStaticObjectMethod(cls, mids$[mid_values_1d9d8b36]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SuggestMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestMode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestMode_of_(t_SuggestMode *self, PyObject *args);
          static PyObject *t_SuggestMode_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_SuggestMode_values(PyTypeObject *type);
          static PyObject *t_SuggestMode_get__parameters_(t_SuggestMode *self, void *data);
          static PyGetSetDef t_SuggestMode__fields_[] = {
            DECLARE_GET_FIELD(t_SuggestMode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SuggestMode__methods_[] = {
            DECLARE_METHOD(t_SuggestMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestMode, of_, METH_VARARGS),
            DECLARE_METHOD(t_SuggestMode, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SuggestMode, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SuggestMode, t_SuggestMode, ::java::lang::Enum, SuggestMode, abstract_init, 0, 0, t_SuggestMode__fields_, 0, 0);
          PyObject *t_SuggestMode::wrap_Object(const SuggestMode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SuggestMode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SuggestMode *self = (t_SuggestMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SuggestMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SuggestMode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SuggestMode *self = (t_SuggestMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SuggestMode::install(PyObject *module)
          {
            installType(&PY_TYPE(SuggestMode), module, "SuggestMode", 0);
          }

          void t_SuggestMode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SuggestMode).tp_dict, "class_", make_descriptor(SuggestMode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SuggestMode).tp_dict, "wrapfn_", make_descriptor(t_SuggestMode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SuggestMode).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SuggestMode::initializeClass);
            PyDict_SetItemString(PY_TYPE(SuggestMode).tp_dict, "SUGGEST_ALWAYS", make_descriptor(t_SuggestMode::wrap_Object(*SuggestMode::SUGGEST_ALWAYS)));
            PyDict_SetItemString(PY_TYPE(SuggestMode).tp_dict, "SUGGEST_MORE_POPULAR", make_descriptor(t_SuggestMode::wrap_Object(*SuggestMode::SUGGEST_MORE_POPULAR)));
            PyDict_SetItemString(PY_TYPE(SuggestMode).tp_dict, "SUGGEST_WHEN_NOT_IN_INDEX", make_descriptor(t_SuggestMode::wrap_Object(*SuggestMode::SUGGEST_WHEN_NOT_IN_INDEX)));
          }

          static PyObject *t_SuggestMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SuggestMode::initializeClass, 1)))
              return NULL;
            return t_SuggestMode::wrap_Object(SuggestMode(((t_SuggestMode *) arg)->object.this$));
          }
          static PyObject *t_SuggestMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SuggestMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SuggestMode_of_(t_SuggestMode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_SuggestMode_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            SuggestMode result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::spell::SuggestMode::valueOf(a0));
              return t_SuggestMode::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_SuggestMode_values(PyTypeObject *type)
          {
            JArray< SuggestMode > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::search::spell::SuggestMode::values());
            return JArray<jobject>(result.this$).wrap(t_SuggestMode::wrap_jobject);
          }
          static PyObject *t_SuggestMode_get__parameters_(t_SuggestMode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Collector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Collector::class$ = NULL;
        jmethodID *Collector::mids$ = NULL;
        bool Collector::live$ = false;

        jclass Collector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Collector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Collector::Collector() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean Collector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        void Collector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
        }

        void Collector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }

        void Collector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Collector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Collector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Collector_init_(t_Collector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Collector_acceptsDocsOutOfOrder(t_Collector *self);
        static PyObject *t_Collector_collect(t_Collector *self, PyObject *arg);
        static PyObject *t_Collector_setNextReader(t_Collector *self, PyObject *arg);
        static PyObject *t_Collector_setScorer(t_Collector *self, PyObject *arg);
        static int t_Collector_set__nextReader(t_Collector *self, PyObject *arg, void *data);
        static int t_Collector_set__scorer(t_Collector *self, PyObject *arg, void *data);
        static PyGetSetDef t_Collector__fields_[] = {
          DECLARE_SET_FIELD(t_Collector, nextReader),
          DECLARE_SET_FIELD(t_Collector, scorer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Collector__methods_[] = {
          DECLARE_METHOD(t_Collector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Collector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Collector, acceptsDocsOutOfOrder, METH_NOARGS),
          DECLARE_METHOD(t_Collector, collect, METH_O),
          DECLARE_METHOD(t_Collector, setNextReader, METH_O),
          DECLARE_METHOD(t_Collector, setScorer, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Collector, t_Collector, ::java::lang::Object, Collector, t_Collector_init_, 0, 0, t_Collector__fields_, 0, 0);

        void t_Collector::install(PyObject *module)
        {
          installType(&PY_TYPE(Collector), module, "Collector", 0);
        }

        void t_Collector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Collector).tp_dict, "class_", make_descriptor(Collector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Collector).tp_dict, "wrapfn_", make_descriptor(t_Collector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Collector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Collector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Collector::initializeClass, 1)))
            return NULL;
          return t_Collector::wrap_Object(Collector(((t_Collector *) arg)->object.this$));
        }
        static PyObject *t_Collector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Collector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Collector_init_(t_Collector *self, PyObject *args, PyObject *kwds)
        {
          Collector object((jobject) NULL);

          INT_CALL(object = Collector());
          self->object = object;

          return 0;
        }

        static PyObject *t_Collector_acceptsDocsOutOfOrder(t_Collector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Collector_collect(t_Collector *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "collect", arg);
          return NULL;
        }

        static PyObject *t_Collector_setNextReader(t_Collector *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setNextReader", arg);
          return NULL;
        }

        static PyObject *t_Collector_setScorer(t_Collector *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setScorer", arg);
          return NULL;
        }

        static int t_Collector_set__nextReader(t_Collector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_Collector_set__scorer(t_Collector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/FilteringTokenFilter.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *FilteringTokenFilter::class$ = NULL;
          jmethodID *FilteringTokenFilter::mids$ = NULL;
          bool FilteringTokenFilter::live$ = false;

          jclass FilteringTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/FilteringTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_f31dee3a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;ZLorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_getEnablePositionIncrements_54c6a16a] = env->getMethodID(cls, "getEnablePositionIncrements", "()Z");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setEnablePositionIncrements_bb0c767f] = env->getMethodID(cls, "setEnablePositionIncrements", "(Z)V");
              mids$[mid_accept_54c6a16a] = env->getMethodID(cls, "accept", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FilteringTokenFilter::FilteringTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          FilteringTokenFilter::FilteringTokenFilter(const ::org::apache::lucene::util::Version & a0, jboolean a1, const ::org::apache::lucene::analysis::TokenStream & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_f31dee3a, a0.this$, a1, a2.this$)) {}

          void FilteringTokenFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean FilteringTokenFilter::getEnablePositionIncrements() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getEnablePositionIncrements_54c6a16a]);
          }

          jboolean FilteringTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void FilteringTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void FilteringTokenFilter::setEnablePositionIncrements(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setEnablePositionIncrements_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_FilteringTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FilteringTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FilteringTokenFilter_init_(t_FilteringTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FilteringTokenFilter_end(t_FilteringTokenFilter *self, PyObject *args);
          static PyObject *t_FilteringTokenFilter_getEnablePositionIncrements(t_FilteringTokenFilter *self);
          static PyObject *t_FilteringTokenFilter_incrementToken(t_FilteringTokenFilter *self, PyObject *args);
          static PyObject *t_FilteringTokenFilter_reset(t_FilteringTokenFilter *self, PyObject *args);
          static PyObject *t_FilteringTokenFilter_setEnablePositionIncrements(t_FilteringTokenFilter *self, PyObject *arg);
          static PyObject *t_FilteringTokenFilter_get__enablePositionIncrements(t_FilteringTokenFilter *self, void *data);
          static int t_FilteringTokenFilter_set__enablePositionIncrements(t_FilteringTokenFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_FilteringTokenFilter__fields_[] = {
            DECLARE_GETSET_FIELD(t_FilteringTokenFilter, enablePositionIncrements),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FilteringTokenFilter__methods_[] = {
            DECLARE_METHOD(t_FilteringTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilteringTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilteringTokenFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_FilteringTokenFilter, getEnablePositionIncrements, METH_NOARGS),
            DECLARE_METHOD(t_FilteringTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_FilteringTokenFilter, reset, METH_VARARGS),
            DECLARE_METHOD(t_FilteringTokenFilter, setEnablePositionIncrements, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FilteringTokenFilter, t_FilteringTokenFilter, ::org::apache::lucene::analysis::TokenFilter, FilteringTokenFilter, t_FilteringTokenFilter_init_, 0, 0, t_FilteringTokenFilter__fields_, 0, 0);

          void t_FilteringTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FilteringTokenFilter), module, "FilteringTokenFilter", 0);
          }

          void t_FilteringTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FilteringTokenFilter).tp_dict, "class_", make_descriptor(FilteringTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FilteringTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_FilteringTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FilteringTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FilteringTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FilteringTokenFilter::initializeClass, 1)))
              return NULL;
            return t_FilteringTokenFilter::wrap_Object(FilteringTokenFilter(((t_FilteringTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_FilteringTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FilteringTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FilteringTokenFilter_init_(t_FilteringTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                FilteringTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = FilteringTokenFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean a1;
                ::org::apache::lucene::analysis::TokenStream a2((jobject) NULL);
                FilteringTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KZk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = FilteringTokenFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FilteringTokenFilter_end(t_FilteringTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(FilteringTokenFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_FilteringTokenFilter_getEnablePositionIncrements(t_FilteringTokenFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getEnablePositionIncrements());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FilteringTokenFilter_incrementToken(t_FilteringTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FilteringTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_FilteringTokenFilter_reset(t_FilteringTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(FilteringTokenFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_FilteringTokenFilter_setEnablePositionIncrements(t_FilteringTokenFilter *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setEnablePositionIncrements(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setEnablePositionIncrements", arg);
            return NULL;
          }

          static PyObject *t_FilteringTokenFilter_get__enablePositionIncrements(t_FilteringTokenFilter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getEnablePositionIncrements());
            Py_RETURN_BOOL(value);
          }
          static int t_FilteringTokenFilter_set__enablePositionIncrements(t_FilteringTokenFilter *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setEnablePositionIncrements(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "enablePositionIncrements", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingTermVectorsReader::class$ = NULL;
          jmethodID *CompressingTermVectorsReader::mids$ = NULL;
          bool CompressingTermVectorsReader::live$ = false;

          jclass CompressingTermVectorsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingTermVectorsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_846e12dd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/String;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;)V");
              mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_clone_475a2624] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/TermVectorsReader;");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_get_ef1c9c73] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/index/Fields;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingTermVectorsReader::CompressingTermVectorsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::java::lang::String & a2, const ::org::apache::lucene::index::FieldInfos & a3, const ::org::apache::lucene::store::IOContext & a4, const ::java::lang::String & a5, const ::org::apache::lucene::codecs::compressing::CompressionMode & a6) : ::org::apache::lucene::codecs::TermVectorsReader(env->newObject(initializeClass, &mids$, mid_init$_846e12dd, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$)) {}

          void CompressingTermVectorsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
          }

          ::org::apache::lucene::codecs::TermVectorsReader CompressingTermVectorsReader::clone() const
          {
            return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_clone_475a2624]));
          }

          void CompressingTermVectorsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          ::org::apache::lucene::index::Fields CompressingTermVectorsReader::get(jint a0) const
          {
            return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_get_ef1c9c73], a0));
          }

          jlong CompressingTermVectorsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingTermVectorsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingTermVectorsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompressingTermVectorsReader_init_(t_CompressingTermVectorsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompressingTermVectorsReader_checkIntegrity(t_CompressingTermVectorsReader *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsReader_clone(t_CompressingTermVectorsReader *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsReader_close(t_CompressingTermVectorsReader *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsReader_get(t_CompressingTermVectorsReader *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsReader_ramBytesUsed(t_CompressingTermVectorsReader *self, PyObject *args);

          static PyMethodDef t_CompressingTermVectorsReader__methods_[] = {
            DECLARE_METHOD(t_CompressingTermVectorsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, clone, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, get, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, ramBytesUsed, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingTermVectorsReader, t_CompressingTermVectorsReader, ::org::apache::lucene::codecs::TermVectorsReader, CompressingTermVectorsReader, t_CompressingTermVectorsReader_init_, 0, 0, 0, 0, 0);

          void t_CompressingTermVectorsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingTermVectorsReader), module, "CompressingTermVectorsReader", 0);
          }

          void t_CompressingTermVectorsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsReader).tp_dict, "class_", make_descriptor(CompressingTermVectorsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsReader).tp_dict, "wrapfn_", make_descriptor(t_CompressingTermVectorsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingTermVectorsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingTermVectorsReader::initializeClass, 1)))
              return NULL;
            return t_CompressingTermVectorsReader::wrap_Object(CompressingTermVectorsReader(((t_CompressingTermVectorsReader *) arg)->object.this$));
          }
          static PyObject *t_CompressingTermVectorsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingTermVectorsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompressingTermVectorsReader_init_(t_CompressingTermVectorsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a3((jobject) NULL);
            ::org::apache::lucene::store::IOContext a4((jobject) NULL);
            ::java::lang::String a5((jobject) NULL);
            ::org::apache::lucene::codecs::compressing::CompressionMode a6((jobject) NULL);
            CompressingTermVectorsReader object((jobject) NULL);

            if (!parseArgs(args, "kkskksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              INT_CALL(object = CompressingTermVectorsReader(a0, a1, a2, a3, a4, a5, a6));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompressingTermVectorsReader_checkIntegrity(t_CompressingTermVectorsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_CompressingTermVectorsReader_clone(t_CompressingTermVectorsReader *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsReader), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_CompressingTermVectorsReader_close(t_CompressingTermVectorsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_CompressingTermVectorsReader_get(t_CompressingTermVectorsReader *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::index::Fields result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsReader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_CompressingTermVectorsReader_ramBytesUsed(t_CompressingTermVectorsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/util/Version.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *BlendedInfixSuggester::class$ = NULL;
            jmethodID *BlendedInfixSuggester::mids$ = NULL;
            bool BlendedInfixSuggester::live$ = false;
            jint BlendedInfixSuggester::DEFAULT_NUM_FACTOR = (jint) 0;

            jclass BlendedInfixSuggester::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b2fef229] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_185ca32c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;ILorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;I)V");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_lookup_bb92c162] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;IZZ)Ljava/util/List;");
                mids$[mid_getTextFieldType_a2615189] = env->getMethodID(cls, "getTextFieldType", "()Lorg/apache/lucene/document/FieldType;");
                mids$[mid_createResults_dfa2a05f] = env->getMethodID(cls, "createResults", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopFieldDocs;ILjava/lang/CharSequence;ZLjava/util/Set;Ljava/lang/String;)Ljava/util/List;");
                mids$[mid_calculateCoefficient_39c7bd2e] = env->getMethodID(cls, "calculateCoefficient", "(I)D");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                DEFAULT_NUM_FACTOR = env->getStaticIntField(cls, "DEFAULT_NUM_FACTOR");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BlendedInfixSuggester::BlendedInfixSuggester(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::search::suggest::analyzing::AnalyzingInfixSuggester(env->newObject(initializeClass, &mids$, mid_init$_b2fef229, a0.this$, a1.this$, a2.this$)) {}

            BlendedInfixSuggester::BlendedInfixSuggester(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::analysis::Analyzer & a2, const ::org::apache::lucene::analysis::Analyzer & a3, jint a4, const ::org::apache::lucene::search::suggest::analyzing::BlendedInfixSuggester$BlenderType & a5, jint a6) : ::org::apache::lucene::search::suggest::analyzing::AnalyzingInfixSuggester(env->newObject(initializeClass, &mids$, mid_init$_185ca32c, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5.this$, a6)) {}

            ::java::util::List BlendedInfixSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            ::java::util::List BlendedInfixSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jint a2, jboolean a3, jboolean a4) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_bb92c162], a0.this$, a1.this$, a2, a3, a4));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_BlendedInfixSuggester_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BlendedInfixSuggester_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BlendedInfixSuggester_init_(t_BlendedInfixSuggester *self, PyObject *args, PyObject *kwds);
            static PyObject *t_BlendedInfixSuggester_lookup(t_BlendedInfixSuggester *self, PyObject *args);

            static PyMethodDef t_BlendedInfixSuggester__methods_[] = {
              DECLARE_METHOD(t_BlendedInfixSuggester, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BlendedInfixSuggester, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BlendedInfixSuggester, lookup, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BlendedInfixSuggester, t_BlendedInfixSuggester, ::org::apache::lucene::search::suggest::analyzing::AnalyzingInfixSuggester, BlendedInfixSuggester, t_BlendedInfixSuggester_init_, 0, 0, 0, 0, 0);

            void t_BlendedInfixSuggester::install(PyObject *module)
            {
              installType(&PY_TYPE(BlendedInfixSuggester), module, "BlendedInfixSuggester", 0);
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester).tp_dict, "BlenderType", make_descriptor(&PY_TYPE(BlendedInfixSuggester$BlenderType)));
            }

            void t_BlendedInfixSuggester::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester).tp_dict, "class_", make_descriptor(BlendedInfixSuggester::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester).tp_dict, "wrapfn_", make_descriptor(t_BlendedInfixSuggester::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(BlendedInfixSuggester::initializeClass);
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester).tp_dict, "DEFAULT_NUM_FACTOR", make_descriptor(BlendedInfixSuggester::DEFAULT_NUM_FACTOR));
            }

            static PyObject *t_BlendedInfixSuggester_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BlendedInfixSuggester::initializeClass, 1)))
                return NULL;
              return t_BlendedInfixSuggester::wrap_Object(BlendedInfixSuggester(((t_BlendedInfixSuggester *) arg)->object.this$));
            }
            static PyObject *t_BlendedInfixSuggester_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BlendedInfixSuggester::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BlendedInfixSuggester_init_(t_BlendedInfixSuggester *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  ::org::apache::lucene::util::Version a0((jobject) NULL);
                  PyTypeObject **p0;
                  ::org::apache::lucene::store::Directory a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  BlendedInfixSuggester object((jobject) NULL);

                  if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                  {
                    INT_CALL(object = BlendedInfixSuggester(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 7:
                {
                  ::org::apache::lucene::util::Version a0((jobject) NULL);
                  PyTypeObject **p0;
                  ::org::apache::lucene::store::Directory a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                  jint a4;
                  ::org::apache::lucene::search::suggest::analyzing::BlendedInfixSuggester$BlenderType a5((jobject) NULL);
                  PyTypeObject **p5;
                  jint a6;
                  BlendedInfixSuggester object((jobject) NULL);

                  if (!parseArgs(args, "KkkkIKI", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::search::suggest::analyzing::BlendedInfixSuggester$BlenderType::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4, &a5, &p5, ::org::apache::lucene::search::suggest::analyzing::t_BlendedInfixSuggester$BlenderType::parameters_, &a6))
                  {
                    INT_CALL(object = BlendedInfixSuggester(a0, a1, a2, a3, a4, a5, a6));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_BlendedInfixSuggester_lookup(t_BlendedInfixSuggester *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 4:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jboolean a2;
                  jint a3;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                break;
               case 5:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jint a2;
                  jboolean a3;
                  jboolean a4;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKIZZ", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3, &a4))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3, a4));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
              }

              return callSuper(&PY_TYPE(BlendedInfixSuggester), (PyObject *) self, "lookup", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicNormalizer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicNormalizer::class$ = NULL;
          jmethodID *ArabicNormalizer::mids$ = NULL;
          bool ArabicNormalizer::live$ = false;
          jchar ArabicNormalizer::ALEF = (jchar) 0;
          jchar ArabicNormalizer::ALEF_HAMZA_ABOVE = (jchar) 0;
          jchar ArabicNormalizer::ALEF_HAMZA_BELOW = (jchar) 0;
          jchar ArabicNormalizer::ALEF_MADDA = (jchar) 0;
          jchar ArabicNormalizer::DAMMA = (jchar) 0;
          jchar ArabicNormalizer::DAMMATAN = (jchar) 0;
          jchar ArabicNormalizer::DOTLESS_YEH = (jchar) 0;
          jchar ArabicNormalizer::FATHA = (jchar) 0;
          jchar ArabicNormalizer::FATHATAN = (jchar) 0;
          jchar ArabicNormalizer::HEH = (jchar) 0;
          jchar ArabicNormalizer::KASRA = (jchar) 0;
          jchar ArabicNormalizer::KASRATAN = (jchar) 0;
          jchar ArabicNormalizer::SHADDA = (jchar) 0;
          jchar ArabicNormalizer::SUKUN = (jchar) 0;
          jchar ArabicNormalizer::TATWEEL = (jchar) 0;
          jchar ArabicNormalizer::TEH_MARBUTA = (jchar) 0;
          jchar ArabicNormalizer::YEH = (jchar) 0;

          jclass ArabicNormalizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicNormalizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normalize_ec6430eb] = env->getMethodID(cls, "normalize", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ALEF = env->getStaticCharField(cls, "ALEF");
              ALEF_HAMZA_ABOVE = env->getStaticCharField(cls, "ALEF_HAMZA_ABOVE");
              ALEF_HAMZA_BELOW = env->getStaticCharField(cls, "ALEF_HAMZA_BELOW");
              ALEF_MADDA = env->getStaticCharField(cls, "ALEF_MADDA");
              DAMMA = env->getStaticCharField(cls, "DAMMA");
              DAMMATAN = env->getStaticCharField(cls, "DAMMATAN");
              DOTLESS_YEH = env->getStaticCharField(cls, "DOTLESS_YEH");
              FATHA = env->getStaticCharField(cls, "FATHA");
              FATHATAN = env->getStaticCharField(cls, "FATHATAN");
              HEH = env->getStaticCharField(cls, "HEH");
              KASRA = env->getStaticCharField(cls, "KASRA");
              KASRATAN = env->getStaticCharField(cls, "KASRATAN");
              SHADDA = env->getStaticCharField(cls, "SHADDA");
              SUKUN = env->getStaticCharField(cls, "SUKUN");
              TATWEEL = env->getStaticCharField(cls, "TATWEEL");
              TEH_MARBUTA = env->getStaticCharField(cls, "TEH_MARBUTA");
              YEH = env->getStaticCharField(cls, "YEH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicNormalizer::ArabicNormalizer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint ArabicNormalizer::normalize(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_normalize_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicNormalizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicNormalizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicNormalizer_init_(t_ArabicNormalizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicNormalizer_normalize(t_ArabicNormalizer *self, PyObject *args);

          static PyMethodDef t_ArabicNormalizer__methods_[] = {
            DECLARE_METHOD(t_ArabicNormalizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizer, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicNormalizer, t_ArabicNormalizer, ::java::lang::Object, ArabicNormalizer, t_ArabicNormalizer_init_, 0, 0, 0, 0, 0);

          void t_ArabicNormalizer::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicNormalizer), module, "ArabicNormalizer", 0);
          }

          void t_ArabicNormalizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "class_", make_descriptor(ArabicNormalizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "wrapfn_", make_descriptor(t_ArabicNormalizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ArabicNormalizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "ALEF", make_descriptor(ArabicNormalizer::ALEF));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "ALEF_HAMZA_ABOVE", make_descriptor(ArabicNormalizer::ALEF_HAMZA_ABOVE));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "ALEF_HAMZA_BELOW", make_descriptor(ArabicNormalizer::ALEF_HAMZA_BELOW));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "ALEF_MADDA", make_descriptor(ArabicNormalizer::ALEF_MADDA));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "DAMMA", make_descriptor(ArabicNormalizer::DAMMA));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "DAMMATAN", make_descriptor(ArabicNormalizer::DAMMATAN));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "DOTLESS_YEH", make_descriptor(ArabicNormalizer::DOTLESS_YEH));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "FATHA", make_descriptor(ArabicNormalizer::FATHA));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "FATHATAN", make_descriptor(ArabicNormalizer::FATHATAN));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "HEH", make_descriptor(ArabicNormalizer::HEH));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "KASRA", make_descriptor(ArabicNormalizer::KASRA));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "KASRATAN", make_descriptor(ArabicNormalizer::KASRATAN));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "SHADDA", make_descriptor(ArabicNormalizer::SHADDA));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "SUKUN", make_descriptor(ArabicNormalizer::SUKUN));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "TATWEEL", make_descriptor(ArabicNormalizer::TATWEEL));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "TEH_MARBUTA", make_descriptor(ArabicNormalizer::TEH_MARBUTA));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "YEH", make_descriptor(ArabicNormalizer::YEH));
          }

          static PyObject *t_ArabicNormalizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicNormalizer::initializeClass, 1)))
              return NULL;
            return t_ArabicNormalizer::wrap_Object(ArabicNormalizer(((t_ArabicNormalizer *) arg)->object.this$));
          }
          static PyObject *t_ArabicNormalizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicNormalizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicNormalizer_init_(t_ArabicNormalizer *self, PyObject *args, PyObject *kwds)
          {
            ArabicNormalizer object((jobject) NULL);

            INT_CALL(object = ArabicNormalizer());
            self->object = object;

            return 0;
          }

          static PyObject *t_ArabicNormalizer_normalize(t_ArabicNormalizer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.normalize(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TwoPhaseCommitTool$PrepareCommitFailException.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TwoPhaseCommitTool$PrepareCommitFailException::class$ = NULL;
        jmethodID *TwoPhaseCommitTool$PrepareCommitFailException::mids$ = NULL;
        bool TwoPhaseCommitTool$PrepareCommitFailException::live$ = false;

        jclass TwoPhaseCommitTool$PrepareCommitFailException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TwoPhaseCommitTool$PrepareCommitFailException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_52a0ac67] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;Lorg/apache/lucene/index/TwoPhaseCommit;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TwoPhaseCommitTool$PrepareCommitFailException::TwoPhaseCommitTool$PrepareCommitFailException(const ::java::lang::Throwable & a0, const ::org::apache::lucene::index::TwoPhaseCommit & a1) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_52a0ac67, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TwoPhaseCommitTool$PrepareCommitFailException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommitTool$PrepareCommitFailException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TwoPhaseCommitTool$PrepareCommitFailException_init_(t_TwoPhaseCommitTool$PrepareCommitFailException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_TwoPhaseCommitTool$PrepareCommitFailException__methods_[] = {
          DECLARE_METHOD(t_TwoPhaseCommitTool$PrepareCommitFailException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommitTool$PrepareCommitFailException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TwoPhaseCommitTool$PrepareCommitFailException, t_TwoPhaseCommitTool$PrepareCommitFailException, ::java::io::IOException, TwoPhaseCommitTool$PrepareCommitFailException, t_TwoPhaseCommitTool$PrepareCommitFailException_init_, 0, 0, 0, 0, 0);

        void t_TwoPhaseCommitTool$PrepareCommitFailException::install(PyObject *module)
        {
          installType(&PY_TYPE(TwoPhaseCommitTool$PrepareCommitFailException), module, "TwoPhaseCommitTool$PrepareCommitFailException", 0);
        }

        void t_TwoPhaseCommitTool$PrepareCommitFailException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool$PrepareCommitFailException).tp_dict, "class_", make_descriptor(TwoPhaseCommitTool$PrepareCommitFailException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool$PrepareCommitFailException).tp_dict, "wrapfn_", make_descriptor(t_TwoPhaseCommitTool$PrepareCommitFailException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool$PrepareCommitFailException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TwoPhaseCommitTool$PrepareCommitFailException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TwoPhaseCommitTool$PrepareCommitFailException::initializeClass, 1)))
            return NULL;
          return t_TwoPhaseCommitTool$PrepareCommitFailException::wrap_Object(TwoPhaseCommitTool$PrepareCommitFailException(((t_TwoPhaseCommitTool$PrepareCommitFailException *) arg)->object.this$));
        }
        static PyObject *t_TwoPhaseCommitTool$PrepareCommitFailException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TwoPhaseCommitTool$PrepareCommitFailException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TwoPhaseCommitTool$PrepareCommitFailException_init_(t_TwoPhaseCommitTool$PrepareCommitFailException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::Throwable a0((jobject) NULL);
          ::org::apache::lucene::index::TwoPhaseCommit a1((jobject) NULL);
          TwoPhaseCommitTool$PrepareCommitFailException object((jobject) NULL);

          if (!parseArgs(args, "kk", ::java::lang::Throwable::initializeClass, ::org::apache::lucene::index::TwoPhaseCommit::initializeClass, &a0, &a1))
          {
            INT_CALL(object = TwoPhaseCommitTool$PrepareCommitFailException(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/AndQueryNode.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *AndQueryNode::class$ = NULL;
              jmethodID *AndQueryNode::mids$ = NULL;
              bool AndQueryNode::live$ = false;

              jclass AndQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/AndQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              AndQueryNode::AndQueryNode(const ::java::util::List & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

              ::java::lang::CharSequence AndQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String AndQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_AndQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AndQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_AndQueryNode_init_(t_AndQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_AndQueryNode_toQueryString(t_AndQueryNode *self, PyObject *args);
              static PyObject *t_AndQueryNode_toString(t_AndQueryNode *self, PyObject *args);

              static PyMethodDef t_AndQueryNode__methods_[] = {
                DECLARE_METHOD(t_AndQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AndQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AndQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_AndQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(AndQueryNode, t_AndQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode, AndQueryNode, t_AndQueryNode_init_, 0, 0, 0, 0, 0);

              void t_AndQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(AndQueryNode), module, "AndQueryNode", 0);
              }

              void t_AndQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(AndQueryNode).tp_dict, "class_", make_descriptor(AndQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(AndQueryNode).tp_dict, "wrapfn_", make_descriptor(t_AndQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(AndQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AndQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AndQueryNode::initializeClass, 1)))
                  return NULL;
                return t_AndQueryNode::wrap_Object(AndQueryNode(((t_AndQueryNode *) arg)->object.this$));
              }
              static PyObject *t_AndQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AndQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_AndQueryNode_init_(t_AndQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                AndQueryNode object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  INT_CALL(object = AndQueryNode(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_AndQueryNode_toQueryString(t_AndQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(AndQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_AndQueryNode_toString(t_AndQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(AndQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *TotalTermFreqValueSource::class$ = NULL;
            jmethodID *TotalTermFreqValueSource::mids$ = NULL;
            bool TotalTermFreqValueSource::live$ = false;

            jclass TotalTermFreqValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b45b6622] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TotalTermFreqValueSource::TotalTermFreqValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_b45b6622, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            void TotalTermFreqValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String TotalTermFreqValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean TotalTermFreqValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues TotalTermFreqValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint TotalTermFreqValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String TotalTermFreqValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_TotalTermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TotalTermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TotalTermFreqValueSource_init_(t_TotalTermFreqValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TotalTermFreqValueSource_createWeight(t_TotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_TotalTermFreqValueSource_description(t_TotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_TotalTermFreqValueSource_equals(t_TotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_TotalTermFreqValueSource_getValues(t_TotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_TotalTermFreqValueSource_hashCode(t_TotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_TotalTermFreqValueSource_name(t_TotalTermFreqValueSource *self);

            static PyMethodDef t_TotalTermFreqValueSource__methods_[] = {
              DECLARE_METHOD(t_TotalTermFreqValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TotalTermFreqValueSource, t_TotalTermFreqValueSource, ::org::apache::lucene::queries::function::ValueSource, TotalTermFreqValueSource, t_TotalTermFreqValueSource_init_, 0, 0, 0, 0, 0);

            void t_TotalTermFreqValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(TotalTermFreqValueSource), module, "TotalTermFreqValueSource", 0);
            }

            void t_TotalTermFreqValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TotalTermFreqValueSource).tp_dict, "class_", make_descriptor(TotalTermFreqValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TotalTermFreqValueSource).tp_dict, "wrapfn_", make_descriptor(t_TotalTermFreqValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TotalTermFreqValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TotalTermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TotalTermFreqValueSource::initializeClass, 1)))
                return NULL;
              return t_TotalTermFreqValueSource::wrap_Object(TotalTermFreqValueSource(((t_TotalTermFreqValueSource *) arg)->object.this$));
            }
            static PyObject *t_TotalTermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TotalTermFreqValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TotalTermFreqValueSource_init_(t_TotalTermFreqValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              TotalTermFreqValueSource object((jobject) NULL);

              if (!parseArgs(args, "sssk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = TotalTermFreqValueSource(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TotalTermFreqValueSource_createWeight(t_TotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TotalTermFreqValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_TotalTermFreqValueSource_description(t_TotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(TotalTermFreqValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_TotalTermFreqValueSource_equals(t_TotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(TotalTermFreqValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_TotalTermFreqValueSource_getValues(t_TotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(TotalTermFreqValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_TotalTermFreqValueSource_hashCode(t_TotalTermFreqValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(TotalTermFreqValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_TotalTermFreqValueSource_name(t_TotalTermFreqValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/tst/TernaryTreeNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {

            ::java::lang::Class *TernaryTreeNode::class$ = NULL;
            jmethodID *TernaryTreeNode::mids$ = NULL;
            bool TernaryTreeNode::live$ = false;

            jclass TernaryTreeNode::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/tst/TernaryTreeNode");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TernaryTreeNode::TernaryTreeNode() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {
            static PyObject *t_TernaryTreeNode_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TernaryTreeNode_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TernaryTreeNode_init_(t_TernaryTreeNode *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_TernaryTreeNode__methods_[] = {
              DECLARE_METHOD(t_TernaryTreeNode, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TernaryTreeNode, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TernaryTreeNode, t_TernaryTreeNode, ::java::lang::Object, TernaryTreeNode, t_TernaryTreeNode_init_, 0, 0, 0, 0, 0);

            void t_TernaryTreeNode::install(PyObject *module)
            {
              installType(&PY_TYPE(TernaryTreeNode), module, "TernaryTreeNode", 0);
            }

            void t_TernaryTreeNode::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TernaryTreeNode).tp_dict, "class_", make_descriptor(TernaryTreeNode::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TernaryTreeNode).tp_dict, "wrapfn_", make_descriptor(t_TernaryTreeNode::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TernaryTreeNode).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TernaryTreeNode_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TernaryTreeNode::initializeClass, 1)))
                return NULL;
              return t_TernaryTreeNode::wrap_Object(TernaryTreeNode(((t_TernaryTreeNode *) arg)->object.this$));
            }
            static PyObject *t_TernaryTreeNode_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TernaryTreeNode::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TernaryTreeNode_init_(t_TernaryTreeNode *self, PyObject *args, PyObject *kwds)
            {
              TernaryTreeNode object((jobject) NULL);

              INT_CALL(object = TernaryTreeNode());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *CharStream::class$ = NULL;
          jmethodID *CharStream::mids$ = NULL;
          bool CharStream::live$ = false;

          jclass CharStream::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/CharStream");

              mids$ = new jmethodID[max_mid];
              mids$[mid_BeginToken_54c6a173] = env->getMethodID(cls, "BeginToken", "()C");
              mids$[mid_Done_54c6a166] = env->getMethodID(cls, "Done", "()V");
              mids$[mid_GetImage_14c7b5c5] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
              mids$[mid_GetSuffix_b4292e99] = env->getMethodID(cls, "GetSuffix", "(I)[C");
              mids$[mid_backup_39c7bd3c] = env->getMethodID(cls, "backup", "(I)V");
              mids$[mid_getBeginColumn_54c6a179] = env->getMethodID(cls, "getBeginColumn", "()I");
              mids$[mid_getBeginLine_54c6a179] = env->getMethodID(cls, "getBeginLine", "()I");
              mids$[mid_getColumn_54c6a179] = env->getMethodID(cls, "getColumn", "()I");
              mids$[mid_getEndColumn_54c6a179] = env->getMethodID(cls, "getEndColumn", "()I");
              mids$[mid_getEndLine_54c6a179] = env->getMethodID(cls, "getEndLine", "()I");
              mids$[mid_getLine_54c6a179] = env->getMethodID(cls, "getLine", "()I");
              mids$[mid_readChar_54c6a173] = env->getMethodID(cls, "readChar", "()C");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jchar CharStream::BeginToken() const
          {
            return env->callCharMethod(this$, mids$[mid_BeginToken_54c6a173]);
          }

          void CharStream::Done() const
          {
            env->callVoidMethod(this$, mids$[mid_Done_54c6a166]);
          }

          ::java::lang::String CharStream::GetImage() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_14c7b5c5]));
          }

          JArray< jchar > CharStream::GetSuffix(jint a0) const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_b4292e99], a0));
          }

          void CharStream::backup(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_backup_39c7bd3c], a0);
          }

          jint CharStream::getBeginColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getBeginColumn_54c6a179]);
          }

          jint CharStream::getBeginLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getBeginLine_54c6a179]);
          }

          jint CharStream::getColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getColumn_54c6a179]);
          }

          jint CharStream::getEndColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndColumn_54c6a179]);
          }

          jint CharStream::getEndLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndLine_54c6a179]);
          }

          jint CharStream::getLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getLine_54c6a179]);
          }

          jchar CharStream::readChar() const
          {
            return env->callCharMethod(this$, mids$[mid_readChar_54c6a173]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharStream_BeginToken(t_CharStream *self);
          static PyObject *t_CharStream_Done(t_CharStream *self);
          static PyObject *t_CharStream_GetImage(t_CharStream *self);
          static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg);
          static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg);
          static PyObject *t_CharStream_getBeginColumn(t_CharStream *self);
          static PyObject *t_CharStream_getBeginLine(t_CharStream *self);
          static PyObject *t_CharStream_getColumn(t_CharStream *self);
          static PyObject *t_CharStream_getEndColumn(t_CharStream *self);
          static PyObject *t_CharStream_getEndLine(t_CharStream *self);
          static PyObject *t_CharStream_getLine(t_CharStream *self);
          static PyObject *t_CharStream_readChar(t_CharStream *self);
          static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data);
          static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data);
          static PyObject *t_CharStream_get__column(t_CharStream *self, void *data);
          static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data);
          static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data);
          static PyObject *t_CharStream_get__line(t_CharStream *self, void *data);
          static PyGetSetDef t_CharStream__fields_[] = {
            DECLARE_GET_FIELD(t_CharStream, beginColumn),
            DECLARE_GET_FIELD(t_CharStream, beginLine),
            DECLARE_GET_FIELD(t_CharStream, column),
            DECLARE_GET_FIELD(t_CharStream, endColumn),
            DECLARE_GET_FIELD(t_CharStream, endLine),
            DECLARE_GET_FIELD(t_CharStream, line),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharStream__methods_[] = {
            DECLARE_METHOD(t_CharStream, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharStream, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharStream, BeginToken, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, Done, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, GetImage, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, GetSuffix, METH_O),
            DECLARE_METHOD(t_CharStream, backup, METH_O),
            DECLARE_METHOD(t_CharStream, getBeginColumn, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, getBeginLine, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, getColumn, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, getEndColumn, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, getEndLine, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, getLine, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, readChar, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharStream, t_CharStream, ::java::lang::Object, CharStream, abstract_init, 0, 0, t_CharStream__fields_, 0, 0);

          void t_CharStream::install(PyObject *module)
          {
            installType(&PY_TYPE(CharStream), module, "CharStream", 0);
          }

          void t_CharStream::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "class_", make_descriptor(CharStream::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "wrapfn_", make_descriptor(t_CharStream::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharStream::initializeClass, 1)))
              return NULL;
            return t_CharStream::wrap_Object(CharStream(((t_CharStream *) arg)->object.this$));
          }
          static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharStream::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharStream_BeginToken(t_CharStream *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.BeginToken());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_CharStream_Done(t_CharStream *self)
          {
            OBJ_CALL(self->object.Done());
            Py_RETURN_NONE;
          }

          static PyObject *t_CharStream_GetImage(t_CharStream *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.GetImage());
            return j2p(result);
          }

          static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg)
          {
            jint a0;
            JArray< jchar > result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.GetSuffix(a0));
              return result.wrap();
            }

            PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
            return NULL;
          }

          static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.backup(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "backup", arg);
            return NULL;
          }

          static PyObject *t_CharStream_getBeginColumn(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBeginColumn());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharStream_getBeginLine(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBeginLine());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharStream_getColumn(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getColumn());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharStream_getEndColumn(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndColumn());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharStream_getEndLine(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndLine());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharStream_getLine(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getLine());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharStream_readChar(t_CharStream *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.readChar());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBeginColumn());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBeginLine());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharStream_get__column(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getColumn());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndColumn());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndLine());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharStream_get__line(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getLine());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/NoSuchDirectoryException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *NoSuchDirectoryException::class$ = NULL;
        jmethodID *NoSuchDirectoryException::mids$ = NULL;
        bool NoSuchDirectoryException::live$ = false;

        jclass NoSuchDirectoryException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/NoSuchDirectoryException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NoSuchDirectoryException::NoSuchDirectoryException(const ::java::lang::String & a0) : ::java::io::FileNotFoundException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_NoSuchDirectoryException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoSuchDirectoryException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NoSuchDirectoryException_init_(t_NoSuchDirectoryException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_NoSuchDirectoryException__methods_[] = {
          DECLARE_METHOD(t_NoSuchDirectoryException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoSuchDirectoryException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NoSuchDirectoryException, t_NoSuchDirectoryException, ::java::io::FileNotFoundException, NoSuchDirectoryException, t_NoSuchDirectoryException_init_, 0, 0, 0, 0, 0);

        void t_NoSuchDirectoryException::install(PyObject *module)
        {
          installType(&PY_TYPE(NoSuchDirectoryException), module, "NoSuchDirectoryException", 0);
        }

        void t_NoSuchDirectoryException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NoSuchDirectoryException).tp_dict, "class_", make_descriptor(NoSuchDirectoryException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NoSuchDirectoryException).tp_dict, "wrapfn_", make_descriptor(t_NoSuchDirectoryException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NoSuchDirectoryException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NoSuchDirectoryException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NoSuchDirectoryException::initializeClass, 1)))
            return NULL;
          return t_NoSuchDirectoryException::wrap_Object(NoSuchDirectoryException(((t_NoSuchDirectoryException *) arg)->object.this$));
        }
        static PyObject *t_NoSuchDirectoryException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NoSuchDirectoryException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NoSuchDirectoryException_init_(t_NoSuchDirectoryException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          NoSuchDirectoryException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = NoSuchDirectoryException(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$primary_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$primary_return::class$ = NULL;
          jmethodID *JavascriptParser$primary_return::mids$ = NULL;
          bool JavascriptParser$primary_return::live$ = false;

          jclass JavascriptParser$primary_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$primary_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$primary_return::JavascriptParser$primary_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$primary_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$primary_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$primary_return_init_(t_JavascriptParser$primary_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$primary_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$primary_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$primary_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$primary_return, t_JavascriptParser$primary_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$primary_return, t_JavascriptParser$primary_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$primary_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$primary_return), module, "JavascriptParser$primary_return", 0);
          }

          void t_JavascriptParser$primary_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$primary_return).tp_dict, "class_", make_descriptor(JavascriptParser$primary_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$primary_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$primary_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$primary_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$primary_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$primary_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$primary_return::wrap_Object(JavascriptParser$primary_return(((t_JavascriptParser$primary_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$primary_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$primary_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$primary_return_init_(t_JavascriptParser$primary_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$primary_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$primary_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SrndTruncQuery.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SrndTruncQuery::class$ = NULL;
            jmethodID *SrndTruncQuery::mids$ = NULL;
            bool SrndTruncQuery::live$ = false;

            jclass SrndTruncQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SrndTruncQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d9707974] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;CC)V");
                mids$[mid_getTruncated_14c7b5c5] = env->getMethodID(cls, "getTruncated", "()Ljava/lang/String;");
                mids$[mid_toStringUnquoted_14c7b5c5] = env->getMethodID(cls, "toStringUnquoted", "()Ljava/lang/String;");
                mids$[mid_visitMatchingTerms_330199a1] = env->getMethodID(cls, "visitMatchingTerms", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor;)V");
                mids$[mid_matchingChar_87fd5456] = env->getMethodID(cls, "matchingChar", "(C)Z");
                mids$[mid_appendRegExpForChar_1dca1640] = env->getMethodID(cls, "appendRegExpForChar", "(CLjava/lang/StringBuilder;)V");
                mids$[mid_truncatedToPrefixAndPattern_54c6a166] = env->getMethodID(cls, "truncatedToPrefixAndPattern", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SrndTruncQuery::SrndTruncQuery(const ::java::lang::String & a0, jchar a1, jchar a2) : ::org::apache::lucene::queryparser::surround::query::SimpleTerm(env->newObject(initializeClass, &mids$, mid_init$_d9707974, a0.this$, a1, a2)) {}

            ::java::lang::String SrndTruncQuery::getTruncated() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTruncated_14c7b5c5]));
            }

            ::java::lang::String SrndTruncQuery::toStringUnquoted() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringUnquoted_14c7b5c5]));
            }

            void SrndTruncQuery::visitMatchingTerms(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor & a2) const
            {
              env->callVoidMethod(this$, mids$[mid_visitMatchingTerms_330199a1], a0.this$, a1.this$, a2.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SrndTruncQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SrndTruncQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SrndTruncQuery_init_(t_SrndTruncQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SrndTruncQuery_getTruncated(t_SrndTruncQuery *self);
            static PyObject *t_SrndTruncQuery_toStringUnquoted(t_SrndTruncQuery *self, PyObject *args);
            static PyObject *t_SrndTruncQuery_visitMatchingTerms(t_SrndTruncQuery *self, PyObject *args);
            static PyObject *t_SrndTruncQuery_get__truncated(t_SrndTruncQuery *self, void *data);
            static PyGetSetDef t_SrndTruncQuery__fields_[] = {
              DECLARE_GET_FIELD(t_SrndTruncQuery, truncated),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SrndTruncQuery__methods_[] = {
              DECLARE_METHOD(t_SrndTruncQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndTruncQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndTruncQuery, getTruncated, METH_NOARGS),
              DECLARE_METHOD(t_SrndTruncQuery, toStringUnquoted, METH_VARARGS),
              DECLARE_METHOD(t_SrndTruncQuery, visitMatchingTerms, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SrndTruncQuery, t_SrndTruncQuery, ::org::apache::lucene::queryparser::surround::query::SimpleTerm, SrndTruncQuery, t_SrndTruncQuery_init_, 0, 0, t_SrndTruncQuery__fields_, 0, 0);

            void t_SrndTruncQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(SrndTruncQuery), module, "SrndTruncQuery", 0);
            }

            void t_SrndTruncQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SrndTruncQuery).tp_dict, "class_", make_descriptor(SrndTruncQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SrndTruncQuery).tp_dict, "wrapfn_", make_descriptor(t_SrndTruncQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SrndTruncQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SrndTruncQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SrndTruncQuery::initializeClass, 1)))
                return NULL;
              return t_SrndTruncQuery::wrap_Object(SrndTruncQuery(((t_SrndTruncQuery *) arg)->object.this$));
            }
            static PyObject *t_SrndTruncQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SrndTruncQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SrndTruncQuery_init_(t_SrndTruncQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              jchar a1;
              jchar a2;
              SrndTruncQuery object((jobject) NULL);

              if (!parseArgs(args, "sCC", &a0, &a1, &a2))
              {
                INT_CALL(object = SrndTruncQuery(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SrndTruncQuery_getTruncated(t_SrndTruncQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getTruncated());
              return j2p(result);
            }

            static PyObject *t_SrndTruncQuery_toStringUnquoted(t_SrndTruncQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toStringUnquoted());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SrndTruncQuery), (PyObject *) self, "toStringUnquoted", args, 2);
            }

            static PyObject *t_SrndTruncQuery_visitMatchingTerms(t_SrndTruncQuery *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor a2((jobject) NULL);

              if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.visitMatchingTerms(a0, a1, a2));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SrndTruncQuery), (PyObject *) self, "visitMatchingTerms", args, 2);
            }

            static PyObject *t_SrndTruncQuery_get__truncated(t_SrndTruncQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getTruncated());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40LiveDocsFormat.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/MutableBits.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40LiveDocsFormat::class$ = NULL;
          jmethodID *Lucene40LiveDocsFormat::mids$ = NULL;
          bool Lucene40LiveDocsFormat::live$ = false;

          jclass Lucene40LiveDocsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40LiveDocsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_files_cb8dcbcf] = env->getMethodID(cls, "files", "(Lorg/apache/lucene/index/SegmentCommitInfo;Ljava/util/Collection;)V");
              mids$[mid_newLiveDocs_f311e97a] = env->getMethodID(cls, "newLiveDocs", "(I)Lorg/apache/lucene/util/MutableBits;");
              mids$[mid_newLiveDocs_e3a7ca1a] = env->getMethodID(cls, "newLiveDocs", "(Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/util/MutableBits;");
              mids$[mid_readLiveDocs_60c7b77b] = env->getMethodID(cls, "readLiveDocs", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/util/Bits;");
              mids$[mid_writeLiveDocs_37123b35] = env->getMethodID(cls, "writeLiveDocs", "(Lorg/apache/lucene/util/MutableBits;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentCommitInfo;ILorg/apache/lucene/store/IOContext;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40LiveDocsFormat::Lucene40LiveDocsFormat() : ::org::apache::lucene::codecs::LiveDocsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void Lucene40LiveDocsFormat::files(const ::org::apache::lucene::index::SegmentCommitInfo & a0, const ::java::util::Collection & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_files_cb8dcbcf], a0.this$, a1.this$);
          }

          ::org::apache::lucene::util::MutableBits Lucene40LiveDocsFormat::newLiveDocs(jint a0) const
          {
            return ::org::apache::lucene::util::MutableBits(env->callObjectMethod(this$, mids$[mid_newLiveDocs_f311e97a], a0));
          }

          ::org::apache::lucene::util::MutableBits Lucene40LiveDocsFormat::newLiveDocs(const ::org::apache::lucene::util::Bits & a0) const
          {
            return ::org::apache::lucene::util::MutableBits(env->callObjectMethod(this$, mids$[mid_newLiveDocs_e3a7ca1a], a0.this$));
          }

          ::org::apache::lucene::util::Bits Lucene40LiveDocsFormat::readLiveDocs(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentCommitInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_readLiveDocs_60c7b77b], a0.this$, a1.this$, a2.this$));
          }

          void Lucene40LiveDocsFormat::writeLiveDocs(const ::org::apache::lucene::util::MutableBits & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::index::SegmentCommitInfo & a2, jint a3, const ::org::apache::lucene::store::IOContext & a4) const
          {
            env->callVoidMethod(this$, mids$[mid_writeLiveDocs_37123b35], a0.this$, a1.this$, a2.this$, a3, a4.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40LiveDocsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40LiveDocsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40LiveDocsFormat_init_(t_Lucene40LiveDocsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40LiveDocsFormat_files(t_Lucene40LiveDocsFormat *self, PyObject *args);
          static PyObject *t_Lucene40LiveDocsFormat_newLiveDocs(t_Lucene40LiveDocsFormat *self, PyObject *args);
          static PyObject *t_Lucene40LiveDocsFormat_readLiveDocs(t_Lucene40LiveDocsFormat *self, PyObject *args);
          static PyObject *t_Lucene40LiveDocsFormat_writeLiveDocs(t_Lucene40LiveDocsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene40LiveDocsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40LiveDocsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40LiveDocsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40LiveDocsFormat, files, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40LiveDocsFormat, newLiveDocs, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40LiveDocsFormat, readLiveDocs, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40LiveDocsFormat, writeLiveDocs, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40LiveDocsFormat, t_Lucene40LiveDocsFormat, ::org::apache::lucene::codecs::LiveDocsFormat, Lucene40LiveDocsFormat, t_Lucene40LiveDocsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene40LiveDocsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40LiveDocsFormat), module, "Lucene40LiveDocsFormat", 0);
          }

          void t_Lucene40LiveDocsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40LiveDocsFormat).tp_dict, "class_", make_descriptor(Lucene40LiveDocsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40LiveDocsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40LiveDocsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40LiveDocsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40LiveDocsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40LiveDocsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40LiveDocsFormat::wrap_Object(Lucene40LiveDocsFormat(((t_Lucene40LiveDocsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40LiveDocsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40LiveDocsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40LiveDocsFormat_init_(t_Lucene40LiveDocsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40LiveDocsFormat object((jobject) NULL);

            INT_CALL(object = Lucene40LiveDocsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40LiveDocsFormat_files(t_Lucene40LiveDocsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
            ::java::util::Collection a1((jobject) NULL);
            PyTypeObject **p1;

            if (!parseArgs(args, "kK", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(self->object.files(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40LiveDocsFormat), (PyObject *) self, "files", args, 2);
          }

          static PyObject *t_Lucene40LiveDocsFormat_newLiveDocs(t_Lucene40LiveDocsFormat *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                ::org::apache::lucene::util::MutableBits result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.newLiveDocs(a0));
                  return ::org::apache::lucene::util::t_MutableBits::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::util::Bits a0((jobject) NULL);
                ::org::apache::lucene::util::MutableBits result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Bits::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.newLiveDocs(a0));
                  return ::org::apache::lucene::util::t_MutableBits::wrap_Object(result);
                }
              }
            }

            return callSuper(&PY_TYPE(Lucene40LiveDocsFormat), (PyObject *) self, "newLiveDocs", args, 2);
          }

          static PyObject *t_Lucene40LiveDocsFormat_readLiveDocs(t_Lucene40LiveDocsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentCommitInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::util::Bits result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.readLiveDocs(a0, a1, a2));
              return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40LiveDocsFormat), (PyObject *) self, "readLiveDocs", args, 2);
          }

          static PyObject *t_Lucene40LiveDocsFormat_writeLiveDocs(t_Lucene40LiveDocsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::util::MutableBits a0((jobject) NULL);
            ::org::apache::lucene::store::Directory a1((jobject) NULL);
            ::org::apache::lucene::index::SegmentCommitInfo a2((jobject) NULL);
            jint a3;
            ::org::apache::lucene::store::IOContext a4((jobject) NULL);

            if (!parseArgs(args, "kkkIk", ::org::apache::lucene::util::MutableBits::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.writeLiveDocs(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40LiveDocsFormat), (PyObject *) self, "writeLiveDocs", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/TermStats.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *TermStats::class$ = NULL;
        jmethodID *TermStats::mids$ = NULL;
        jfieldID *TermStats::fids$ = NULL;
        bool TermStats::live$ = false;

        jclass TermStats::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/TermStats");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_03b232b5] = env->getMethodID(cls, "<init>", "(IJ)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docFreq] = env->getFieldID(cls, "docFreq", "I");
            fids$[fid_totalTermFreq] = env->getFieldID(cls, "totalTermFreq", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermStats::TermStats(jint a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_03b232b5, a0, a1)) {}

        jint TermStats::_get_docFreq() const
        {
          return env->getIntField(this$, fids$[fid_docFreq]);
        }

        jlong TermStats::_get_totalTermFreq() const
        {
          return env->getLongField(this$, fids$[fid_totalTermFreq]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_TermStats_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermStats_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermStats_init_(t_TermStats *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermStats_get__docFreq(t_TermStats *self, void *data);
        static PyObject *t_TermStats_get__totalTermFreq(t_TermStats *self, void *data);

        static PyGetSetDef t_TermStats__fields_[] = {
          DECLARE_GET_FIELD(t_TermStats, docFreq),
          DECLARE_GET_FIELD(t_TermStats, totalTermFreq),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermStats__methods_[] = {
          DECLARE_METHOD(t_TermStats, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermStats, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermStats, t_TermStats, ::java::lang::Object, TermStats, t_TermStats_init_, 0, 0, t_TermStats__fields_, 0, 0);

        void t_TermStats::install(PyObject *module)
        {
          installType(&PY_TYPE(TermStats), module, "TermStats", 0);
        }

        void t_TermStats::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermStats).tp_dict, "class_", make_descriptor(TermStats::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermStats).tp_dict, "wrapfn_", make_descriptor(t_TermStats::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermStats).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermStats_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermStats::initializeClass, 1)))
            return NULL;
          return t_TermStats::wrap_Object(TermStats(((t_TermStats *) arg)->object.this$));
        }
        static PyObject *t_TermStats_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermStats::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermStats_init_(t_TermStats *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jlong a1;
          TermStats object((jobject) NULL);

          if (!parseArgs(args, "IJ", &a0, &a1))
          {
            INT_CALL(object = TermStats(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermStats_get__docFreq(t_TermStats *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docFreq());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_TermStats_get__totalTermFreq(t_TermStats *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Attribute.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeFactory::class$ = NULL;
        jmethodID *AttributeFactory::mids$ = NULL;
        bool AttributeFactory::live$ = false;
        AttributeFactory *AttributeFactory::DEFAULT_ATTRIBUTE_FACTORY = NULL;

        jclass AttributeFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_createAttributeInstance_4f9d0910] = env->getMethodID(cls, "createAttributeInstance", "(Ljava/lang/Class;)Lorg/apache/lucene/util/AttributeImpl;");
            mids$[mid_getStaticImplementation_223064f9] = env->getStaticMethodID(cls, "getStaticImplementation", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/lang/Class;)Lorg/apache/lucene/util/AttributeFactory;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_ATTRIBUTE_FACTORY = new AttributeFactory(env->getStaticObjectField(cls, "DEFAULT_ATTRIBUTE_FACTORY", "Lorg/apache/lucene/util/AttributeFactory;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AttributeFactory::AttributeFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::util::AttributeImpl AttributeFactory::createAttributeInstance(const ::java::lang::Class & a0) const
        {
          return ::org::apache::lucene::util::AttributeImpl(env->callObjectMethod(this$, mids$[mid_createAttributeInstance_4f9d0910], a0.this$));
        }

        AttributeFactory AttributeFactory::getStaticImplementation(const AttributeFactory & a0, const ::java::lang::Class & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return AttributeFactory(env->callStaticObjectMethod(cls, mids$[mid_getStaticImplementation_223064f9], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/AttributeFactory$StaticImplementationAttributeFactory.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AttributeFactory_init_(t_AttributeFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AttributeFactory_createAttributeInstance(t_AttributeFactory *self, PyObject *arg);
        static PyObject *t_AttributeFactory_getStaticImplementation(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_AttributeFactory__methods_[] = {
          DECLARE_METHOD(t_AttributeFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeFactory, createAttributeInstance, METH_O),
          DECLARE_METHOD(t_AttributeFactory, getStaticImplementation, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AttributeFactory, t_AttributeFactory, ::java::lang::Object, AttributeFactory, t_AttributeFactory_init_, 0, 0, 0, 0, 0);

        void t_AttributeFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeFactory), module, "AttributeFactory", 0);
          PyDict_SetItemString(PY_TYPE(AttributeFactory).tp_dict, "StaticImplementationAttributeFactory", make_descriptor(&PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory)));
        }

        void t_AttributeFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AttributeFactory).tp_dict, "class_", make_descriptor(AttributeFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AttributeFactory).tp_dict, "wrapfn_", make_descriptor(t_AttributeFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AttributeFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(AttributeFactory::initializeClass);
          PyDict_SetItemString(PY_TYPE(AttributeFactory).tp_dict, "DEFAULT_ATTRIBUTE_FACTORY", make_descriptor(t_AttributeFactory::wrap_Object(*AttributeFactory::DEFAULT_ATTRIBUTE_FACTORY)));
        }

        static PyObject *t_AttributeFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeFactory::initializeClass, 1)))
            return NULL;
          return t_AttributeFactory::wrap_Object(AttributeFactory(((t_AttributeFactory *) arg)->object.this$));
        }
        static PyObject *t_AttributeFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AttributeFactory_init_(t_AttributeFactory *self, PyObject *args, PyObject *kwds)
        {
          AttributeFactory object((jobject) NULL);

          INT_CALL(object = AttributeFactory());
          self->object = object;

          return 0;
        }

        static PyObject *t_AttributeFactory_createAttributeInstance(t_AttributeFactory *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::util::AttributeImpl result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.createAttributeInstance(a0));
            return ::org::apache::lucene::util::t_AttributeImpl::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "createAttributeInstance", arg);
          return NULL;
        }

        static PyObject *t_AttributeFactory_getStaticImplementation(PyTypeObject *type, PyObject *args)
        {
          AttributeFactory a0((jobject) NULL);
          ::java::lang::Class a1((jobject) NULL);
          PyTypeObject **p1;
          AttributeFactory result((jobject) NULL);

          if (!parseArgs(args, "kK", AttributeFactory::initializeClass, ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::AttributeFactory::getStaticImplementation(a0, a1));
            return t_AttributeFactory::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getStaticImplementation", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicNormalizationFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/ar/ArabicNormalizationFilter.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicNormalizationFilterFactory::class$ = NULL;
          jmethodID *ArabicNormalizationFilterFactory::mids$ = NULL;
          bool ArabicNormalizationFilterFactory::live$ = false;

          jclass ArabicNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_4e13fbb2] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/ar/ArabicNormalizationFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicNormalizationFilterFactory::ArabicNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ar::ArabicNormalizationFilter ArabicNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::ar::ArabicNormalizationFilter(env->callObjectMethod(this$, mids$[mid_create_4e13fbb2], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory ArabicNormalizationFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicNormalizationFilterFactory_init_(t_ArabicNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicNormalizationFilterFactory_create(t_ArabicNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_ArabicNormalizationFilterFactory_getMultiTermComponent(t_ArabicNormalizationFilterFactory *self);
          static PyObject *t_ArabicNormalizationFilterFactory_get__multiTermComponent(t_ArabicNormalizationFilterFactory *self, void *data);
          static PyGetSetDef t_ArabicNormalizationFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_ArabicNormalizationFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ArabicNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ArabicNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_ArabicNormalizationFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicNormalizationFilterFactory, t_ArabicNormalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ArabicNormalizationFilterFactory, t_ArabicNormalizationFilterFactory_init_, 0, 0, t_ArabicNormalizationFilterFactory__fields_, 0, 0);

          void t_ArabicNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicNormalizationFilterFactory), module, "ArabicNormalizationFilterFactory", 0);
          }

          void t_ArabicNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicNormalizationFilterFactory).tp_dict, "class_", make_descriptor(ArabicNormalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ArabicNormalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ArabicNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ArabicNormalizationFilterFactory::wrap_Object(ArabicNormalizationFilterFactory(((t_ArabicNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ArabicNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicNormalizationFilterFactory_init_(t_ArabicNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ArabicNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ArabicNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArabicNormalizationFilterFactory_create(t_ArabicNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::ar::ArabicNormalizationFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::ar::t_ArabicNormalizationFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ArabicNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_ArabicNormalizationFilterFactory_getMultiTermComponent(t_ArabicNormalizationFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_ArabicNormalizationFilterFactory_get__multiTermComponent(t_ArabicNormalizationFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/StopwordAnalyzerBase.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *StopwordAnalyzerBase::class$ = NULL;
          jmethodID *StopwordAnalyzerBase::mids$ = NULL;
          bool StopwordAnalyzerBase::live$ = false;

          jclass StopwordAnalyzerBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/StopwordAnalyzerBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getStopwordSet_d2d3505c] = env->getMethodID(cls, "getStopwordSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_loadStopwordSet_b3c09259] = env->getStaticMethodID(cls, "loadStopwordSet", "(Ljava/io/Reader;Lorg/apache/lucene/util/Version;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_loadStopwordSet_b1bbe8e8] = env->getStaticMethodID(cls, "loadStopwordSet", "(Ljava/io/File;Lorg/apache/lucene/util/Version;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_loadStopwordSet_3cef351b] = env->getStaticMethodID(cls, "loadStopwordSet", "(ZLjava/lang/Class;Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/analysis/util/CharArraySet;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::analysis::util::CharArraySet StopwordAnalyzerBase::getStopwordSet() const
          {
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callObjectMethod(this$, mids$[mid_getStopwordSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_StopwordAnalyzerBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StopwordAnalyzerBase_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StopwordAnalyzerBase_getStopwordSet(t_StopwordAnalyzerBase *self);
          static PyObject *t_StopwordAnalyzerBase_get__stopwordSet(t_StopwordAnalyzerBase *self, void *data);
          static PyGetSetDef t_StopwordAnalyzerBase__fields_[] = {
            DECLARE_GET_FIELD(t_StopwordAnalyzerBase, stopwordSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StopwordAnalyzerBase__methods_[] = {
            DECLARE_METHOD(t_StopwordAnalyzerBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopwordAnalyzerBase, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopwordAnalyzerBase, getStopwordSet, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StopwordAnalyzerBase, t_StopwordAnalyzerBase, ::org::apache::lucene::analysis::Analyzer, StopwordAnalyzerBase, abstract_init, 0, 0, t_StopwordAnalyzerBase__fields_, 0, 0);

          void t_StopwordAnalyzerBase::install(PyObject *module)
          {
            installType(&PY_TYPE(StopwordAnalyzerBase), module, "StopwordAnalyzerBase", 0);
          }

          void t_StopwordAnalyzerBase::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StopwordAnalyzerBase).tp_dict, "class_", make_descriptor(StopwordAnalyzerBase::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StopwordAnalyzerBase).tp_dict, "wrapfn_", make_descriptor(t_StopwordAnalyzerBase::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StopwordAnalyzerBase).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StopwordAnalyzerBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StopwordAnalyzerBase::initializeClass, 1)))
              return NULL;
            return t_StopwordAnalyzerBase::wrap_Object(StopwordAnalyzerBase(((t_StopwordAnalyzerBase *) arg)->object.this$));
          }
          static PyObject *t_StopwordAnalyzerBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StopwordAnalyzerBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_StopwordAnalyzerBase_getStopwordSet(t_StopwordAnalyzerBase *self)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = self->object.getStopwordSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_StopwordAnalyzerBase_get__stopwordSet(t_StopwordAnalyzerBase *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getStopwordSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Builder$Arc.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Builder$Arc::class$ = NULL;
          jmethodID *Builder$Arc::mids$ = NULL;
          jfieldID *Builder$Arc::fids$ = NULL;
          bool Builder$Arc::live$ = false;

          jclass Builder$Arc::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Builder$Arc");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_isFinal] = env->getFieldID(cls, "isFinal", "Z");
              fids$[fid_label] = env->getFieldID(cls, "label", "I");
              fids$[fid_nextFinalOutput] = env->getFieldID(cls, "nextFinalOutput", "Ljava/lang/Object;");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Builder$Arc::Builder$Arc() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean Builder$Arc::_get_isFinal() const
          {
            return env->getBooleanField(this$, fids$[fid_isFinal]);
          }

          void Builder$Arc::_set_isFinal(jboolean a0) const
          {
            env->setBooleanField(this$, fids$[fid_isFinal], a0);
          }

          jint Builder$Arc::_get_label() const
          {
            return env->getIntField(this$, fids$[fid_label]);
          }

          void Builder$Arc::_set_label(jint a0) const
          {
            env->setIntField(this$, fids$[fid_label], a0);
          }

          ::java::lang::Object Builder$Arc::_get_nextFinalOutput() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_nextFinalOutput]));
          }

          void Builder$Arc::_set_nextFinalOutput(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_nextFinalOutput], a0.this$);
          }

          ::java::lang::Object Builder$Arc::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }

          void Builder$Arc::_set_output(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_output], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Builder$Arc_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder$Arc_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder$Arc_of_(t_Builder$Arc *self, PyObject *args);
          static int t_Builder$Arc_init_(t_Builder$Arc *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Builder$Arc_get__isFinal(t_Builder$Arc *self, void *data);
          static int t_Builder$Arc_set__isFinal(t_Builder$Arc *self, PyObject *arg, void *data);
          static PyObject *t_Builder$Arc_get__label(t_Builder$Arc *self, void *data);
          static int t_Builder$Arc_set__label(t_Builder$Arc *self, PyObject *arg, void *data);
          static PyObject *t_Builder$Arc_get__nextFinalOutput(t_Builder$Arc *self, void *data);
          static int t_Builder$Arc_set__nextFinalOutput(t_Builder$Arc *self, PyObject *arg, void *data);
          static PyObject *t_Builder$Arc_get__output(t_Builder$Arc *self, void *data);
          static int t_Builder$Arc_set__output(t_Builder$Arc *self, PyObject *arg, void *data);

          static PyObject *t_Builder$Arc_get__parameters_(t_Builder$Arc *self, void *data);
          static PyGetSetDef t_Builder$Arc__fields_[] = {
            DECLARE_GETSET_FIELD(t_Builder$Arc, isFinal),
            DECLARE_GETSET_FIELD(t_Builder$Arc, label),
            DECLARE_GETSET_FIELD(t_Builder$Arc, nextFinalOutput),
            DECLARE_GETSET_FIELD(t_Builder$Arc, output),
            DECLARE_GET_FIELD(t_Builder$Arc, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Builder$Arc__methods_[] = {
            DECLARE_METHOD(t_Builder$Arc, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder$Arc, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder$Arc, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Builder$Arc, t_Builder$Arc, ::java::lang::Object, Builder$Arc, t_Builder$Arc_init_, 0, 0, t_Builder$Arc__fields_, 0, 0);
          PyObject *t_Builder$Arc::wrap_Object(const Builder$Arc& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder$Arc::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder$Arc *self = (t_Builder$Arc *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Builder$Arc::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder$Arc::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder$Arc *self = (t_Builder$Arc *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Builder$Arc::install(PyObject *module)
          {
            installType(&PY_TYPE(Builder$Arc), module, "Builder$Arc", 0);
          }

          void t_Builder$Arc::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Builder$Arc).tp_dict, "class_", make_descriptor(Builder$Arc::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Builder$Arc).tp_dict, "wrapfn_", make_descriptor(t_Builder$Arc::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Builder$Arc).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Builder$Arc_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Builder$Arc::initializeClass, 1)))
              return NULL;
            return t_Builder$Arc::wrap_Object(Builder$Arc(((t_Builder$Arc *) arg)->object.this$));
          }
          static PyObject *t_Builder$Arc_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Builder$Arc::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Builder$Arc_of_(t_Builder$Arc *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Builder$Arc_init_(t_Builder$Arc *self, PyObject *args, PyObject *kwds)
          {
            Builder$Arc object((jobject) NULL);

            INT_CALL(object = Builder$Arc());
            self->object = object;

            return 0;
          }
          static PyObject *t_Builder$Arc_get__parameters_(t_Builder$Arc *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Builder$Arc_get__isFinal(t_Builder$Arc *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_isFinal());
            Py_RETURN_BOOL(value);
          }
          static int t_Builder$Arc_set__isFinal(t_Builder$Arc *self, PyObject *arg, void *data)
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object._set_isFinal(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "isFinal", arg);
            return -1;
          }

          static PyObject *t_Builder$Arc_get__label(t_Builder$Arc *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_label());
            return PyInt_FromLong((long) value);
          }
          static int t_Builder$Arc_set__label(t_Builder$Arc *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_label(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "label", arg);
            return -1;
          }

          static PyObject *t_Builder$Arc_get__nextFinalOutput(t_Builder$Arc *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_nextFinalOutput());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_Builder$Arc_set__nextFinalOutput(t_Builder$Arc *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_nextFinalOutput(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "nextFinalOutput", arg);
            return -1;
          }

          static PyObject *t_Builder$Arc_get__output(t_Builder$Arc *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_Builder$Arc_set__output(t_Builder$Arc *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_output(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "output", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiFields.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiFields::class$ = NULL;
        jmethodID *MultiFields::mids$ = NULL;
        bool MultiFields::live$ = false;

        jclass MultiFields::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiFields");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4836fcd7] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/Fields;[Lorg/apache/lucene/index/ReaderSlice;)V");
            mids$[mid_getFields_450c502c] = env->getStaticMethodID(cls, "getFields", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/index/Fields;");
            mids$[mid_getIndexedFields_c7983645] = env->getStaticMethodID(cls, "getIndexedFields", "(Lorg/apache/lucene/index/IndexReader;)Ljava/util/Collection;");
            mids$[mid_getLiveDocs_38e907ca] = env->getStaticMethodID(cls, "getLiveDocs", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getMergedFieldInfos_27fb8e4c] = env->getStaticMethodID(cls, "getMergedFieldInfos", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getTermDocsEnum_0566f0df] = env->getStaticMethodID(cls, "getTermDocsEnum", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_getTermDocsEnum_dd660923] = env->getStaticMethodID(cls, "getTermDocsEnum", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;I)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_getTermPositionsEnum_b8773540] = env->getStaticMethodID(cls, "getTermPositionsEnum", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_getTermPositionsEnum_79e6ab0c] = env->getStaticMethodID(cls, "getTermPositionsEnum", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_getTerms_4d5aa19b] = env->getStaticMethodID(cls, "getTerms", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_terms_ee262ab4] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiFields::MultiFields(const JArray< ::org::apache::lucene::index::Fields > & a0, const JArray< ::org::apache::lucene::index::ReaderSlice > & a1) : ::org::apache::lucene::index::Fields(env->newObject(initializeClass, &mids$, mid_init$_4836fcd7, a0.this$, a1.this$)) {}

        ::org::apache::lucene::index::Fields MultiFields::getFields(const ::org::apache::lucene::index::IndexReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::Fields(env->callStaticObjectMethod(cls, mids$[mid_getFields_450c502c], a0.this$));
        }

        ::java::util::Collection MultiFields::getIndexedFields(const ::org::apache::lucene::index::IndexReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Collection(env->callStaticObjectMethod(cls, mids$[mid_getIndexedFields_c7983645], a0.this$));
        }

        ::org::apache::lucene::util::Bits MultiFields::getLiveDocs(const ::org::apache::lucene::index::IndexReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_getLiveDocs_38e907ca], a0.this$));
        }

        ::org::apache::lucene::index::FieldInfos MultiFields::getMergedFieldInfos(const ::org::apache::lucene::index::IndexReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::FieldInfos(env->callStaticObjectMethod(cls, mids$[mid_getMergedFieldInfos_27fb8e4c], a0.this$));
        }

        ::org::apache::lucene::index::DocsEnum MultiFields::getTermDocsEnum(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DocsEnum(env->callStaticObjectMethod(cls, mids$[mid_getTermDocsEnum_0566f0df], a0.this$, a1.this$, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::DocsEnum MultiFields::getTermDocsEnum(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3, jint a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DocsEnum(env->callStaticObjectMethod(cls, mids$[mid_getTermDocsEnum_dd660923], a0.this$, a1.this$, a2.this$, a3.this$, a4));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum MultiFields::getTermPositionsEnum(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callStaticObjectMethod(cls, mids$[mid_getTermPositionsEnum_b8773540], a0.this$, a1.this$, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum MultiFields::getTermPositionsEnum(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3, jint a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callStaticObjectMethod(cls, mids$[mid_getTermPositionsEnum_79e6ab0c], a0.this$, a1.this$, a2.this$, a3.this$, a4));
        }

        ::org::apache::lucene::index::Terms MultiFields::getTerms(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::Terms(env->callStaticObjectMethod(cls, mids$[mid_getTerms_4d5aa19b], a0.this$, a1.this$));
        }

        ::java::util::Iterator MultiFields::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        jint MultiFields::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        ::org::apache::lucene::index::Terms MultiFields::terms(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_ee262ab4], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiFields_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiFields_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiFields_init_(t_MultiFields *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiFields_getFields(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiFields_getIndexedFields(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiFields_getLiveDocs(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiFields_getMergedFieldInfos(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiFields_getTermDocsEnum(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiFields_getTermPositionsEnum(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiFields_getTerms(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiFields_iterator(t_MultiFields *self, PyObject *args);
        static PyObject *t_MultiFields_size(t_MultiFields *self, PyObject *args);
        static PyObject *t_MultiFields_terms(t_MultiFields *self, PyObject *args);

        static PyMethodDef t_MultiFields__methods_[] = {
          DECLARE_METHOD(t_MultiFields, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, getFields, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, getIndexedFields, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, getLiveDocs, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, getMergedFieldInfos, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, getTermDocsEnum, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, getTermPositionsEnum, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, getTerms, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, iterator, METH_VARARGS),
          DECLARE_METHOD(t_MultiFields, size, METH_VARARGS),
          DECLARE_METHOD(t_MultiFields, terms, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiFields, t_MultiFields, ::org::apache::lucene::index::Fields, MultiFields, t_MultiFields_init_, ((PyObject *(*)(t_MultiFields *)) get_iterator< t_MultiFields >), 0, 0, 0, 0);

        void t_MultiFields::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiFields), module, "MultiFields", 0);
        }

        void t_MultiFields::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiFields).tp_dict, "class_", make_descriptor(MultiFields::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiFields).tp_dict, "wrapfn_", make_descriptor(t_MultiFields::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiFields).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiFields_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiFields::initializeClass, 1)))
            return NULL;
          return t_MultiFields::wrap_Object(MultiFields(((t_MultiFields *) arg)->object.this$));
        }
        static PyObject *t_MultiFields_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiFields::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiFields_init_(t_MultiFields *self, PyObject *args, PyObject *kwds)
        {
          JArray< ::org::apache::lucene::index::Fields > a0((jobject) NULL);
          JArray< ::org::apache::lucene::index::ReaderSlice > a1((jobject) NULL);
          MultiFields object((jobject) NULL);

          if (!parseArgs(args, "[k[k", ::org::apache::lucene::index::Fields::initializeClass, ::org::apache::lucene::index::ReaderSlice::initializeClass, &a0, &a1))
          {
            INT_CALL(object = MultiFields(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiFields_getFields(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getFields(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getFields", arg);
          return NULL;
        }

        static PyObject *t_MultiFields_getIndexedFields(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::util::Collection result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getIndexedFields(a0));
            return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          PyErr_SetArgsError(type, "getIndexedFields", arg);
          return NULL;
        }

        static PyObject *t_MultiFields_getLiveDocs(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getLiveDocs(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getLiveDocs", arg);
          return NULL;
        }

        static PyObject *t_MultiFields_getMergedFieldInfos(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getMergedFieldInfos(a0));
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getMergedFieldInfos", arg);
          return NULL;
        }

        static PyObject *t_MultiFields_getTermDocsEnum(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 4:
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

              if (!parseArgs(args, "kksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getTermDocsEnum(a0, a1, a2, a3));
                return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
              }
            }
            break;
           case 5:
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              jint a4;
              ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

              if (!parseArgs(args, "kkskI", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getTermDocsEnum(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "getTermDocsEnum", args);
          return NULL;
        }

        static PyObject *t_MultiFields_getTermPositionsEnum(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 4:
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

              if (!parseArgs(args, "kksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getTermPositionsEnum(a0, a1, a2, a3));
                return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
              }
            }
            break;
           case 5:
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              jint a4;
              ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

              if (!parseArgs(args, "kkskI", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getTermPositionsEnum(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "getTermPositionsEnum", args);
          return NULL;
        }

        static PyObject *t_MultiFields_getTerms(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getTerms(a0, a1));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getTerms", args);
          return NULL;
        }

        static PyObject *t_MultiFields_iterator(t_MultiFields *self, PyObject *args)
        {
          ::java::util::Iterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::java::util::t_Iterator::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          return callSuper(&PY_TYPE(MultiFields), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_MultiFields_size(t_MultiFields *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiFields), (PyObject *) self, "size", args, 2);
        }

        static PyObject *t_MultiFields_terms(t_MultiFields *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.terms(a0));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiFields), (PyObject *) self, "terms", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/RegExp.h"
#include "java/util/Map.h"
#include "org/apache/lucene/util/automaton/AutomatonProvider.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/IllegalArgumentException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *RegExp::class$ = NULL;
          jmethodID *RegExp::mids$ = NULL;
          bool RegExp::live$ = false;
          jint RegExp::ALL = (jint) 0;
          jint RegExp::ANYSTRING = (jint) 0;
          jint RegExp::AUTOMATON = (jint) 0;
          jint RegExp::COMPLEMENT = (jint) 0;
          jint RegExp::EMPTY = (jint) 0;
          jint RegExp::INTERSECTION = (jint) 0;
          jint RegExp::INTERVAL = (jint) 0;
          jint RegExp::NONE = (jint) 0;

          jclass RegExp::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/RegExp");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
              mids$[mid_getIdentifiers_03e99967] = env->getMethodID(cls, "getIdentifiers", "()Ljava/util/Set;");
              mids$[mid_setAllowMutate_bb0c7673] = env->getMethodID(cls, "setAllowMutate", "(Z)Z");
              mids$[mid_toAutomaton_9b0d5999] = env->getMethodID(cls, "toAutomaton", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_toAutomaton_ab3fd6f0] = env->getMethodID(cls, "toAutomaton", "(Lorg/apache/lucene/util/automaton/AutomatonProvider;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_toAutomaton_5130eb3f] = env->getMethodID(cls, "toAutomaton", "(Ljava/util/Map;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ALL = env->getStaticIntField(cls, "ALL");
              ANYSTRING = env->getStaticIntField(cls, "ANYSTRING");
              AUTOMATON = env->getStaticIntField(cls, "AUTOMATON");
              COMPLEMENT = env->getStaticIntField(cls, "COMPLEMENT");
              EMPTY = env->getStaticIntField(cls, "EMPTY");
              INTERSECTION = env->getStaticIntField(cls, "INTERSECTION");
              INTERVAL = env->getStaticIntField(cls, "INTERVAL");
              NONE = env->getStaticIntField(cls, "NONE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RegExp::RegExp(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          RegExp::RegExp(const ::java::lang::String & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

          ::java::util::Set RegExp::getIdentifiers() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getIdentifiers_03e99967]));
          }

          jboolean RegExp::setAllowMutate(jboolean a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_setAllowMutate_bb0c7673], a0);
          }

          ::org::apache::lucene::util::automaton::Automaton RegExp::toAutomaton() const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_9b0d5999]));
          }

          ::org::apache::lucene::util::automaton::Automaton RegExp::toAutomaton(const ::org::apache::lucene::util::automaton::AutomatonProvider & a0) const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_ab3fd6f0], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton RegExp::toAutomaton(const ::java::util::Map & a0) const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_5130eb3f], a0.this$));
          }

          ::java::lang::String RegExp::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_RegExp_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RegExp_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RegExp_init_(t_RegExp *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RegExp_getIdentifiers(t_RegExp *self);
          static PyObject *t_RegExp_setAllowMutate(t_RegExp *self, PyObject *arg);
          static PyObject *t_RegExp_toAutomaton(t_RegExp *self, PyObject *args);
          static PyObject *t_RegExp_toString(t_RegExp *self, PyObject *args);
          static int t_RegExp_set__allowMutate(t_RegExp *self, PyObject *arg, void *data);
          static PyObject *t_RegExp_get__identifiers(t_RegExp *self, void *data);
          static PyGetSetDef t_RegExp__fields_[] = {
            DECLARE_SET_FIELD(t_RegExp, allowMutate),
            DECLARE_GET_FIELD(t_RegExp, identifiers),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_RegExp__methods_[] = {
            DECLARE_METHOD(t_RegExp, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RegExp, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RegExp, getIdentifiers, METH_NOARGS),
            DECLARE_METHOD(t_RegExp, setAllowMutate, METH_O),
            DECLARE_METHOD(t_RegExp, toAutomaton, METH_VARARGS),
            DECLARE_METHOD(t_RegExp, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RegExp, t_RegExp, ::java::lang::Object, RegExp, t_RegExp_init_, 0, 0, t_RegExp__fields_, 0, 0);

          void t_RegExp::install(PyObject *module)
          {
            installType(&PY_TYPE(RegExp), module, "RegExp", 0);
          }

          void t_RegExp::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "class_", make_descriptor(RegExp::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "wrapfn_", make_descriptor(t_RegExp::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(RegExp::initializeClass);
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "ALL", make_descriptor(RegExp::ALL));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "ANYSTRING", make_descriptor(RegExp::ANYSTRING));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "AUTOMATON", make_descriptor(RegExp::AUTOMATON));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "COMPLEMENT", make_descriptor(RegExp::COMPLEMENT));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "EMPTY", make_descriptor(RegExp::EMPTY));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "INTERSECTION", make_descriptor(RegExp::INTERSECTION));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "INTERVAL", make_descriptor(RegExp::INTERVAL));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "NONE", make_descriptor(RegExp::NONE));
          }

          static PyObject *t_RegExp_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RegExp::initializeClass, 1)))
              return NULL;
            return t_RegExp::wrap_Object(RegExp(((t_RegExp *) arg)->object.this$));
          }
          static PyObject *t_RegExp_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RegExp::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RegExp_init_(t_RegExp *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                RegExp object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = RegExp(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                RegExp object((jobject) NULL);

                if (!parseArgs(args, "sI", &a0, &a1))
                {
                  INT_CALL(object = RegExp(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RegExp_getIdentifiers(t_RegExp *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.getIdentifiers());
            return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_RegExp_setAllowMutate(t_RegExp *self, PyObject *arg)
          {
            jboolean a0;
            jboolean result;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.setAllowMutate(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setAllowMutate", arg);
            return NULL;
          }

          static PyObject *t_RegExp_toAutomaton(t_RegExp *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
                OBJ_CALL(result = self->object.toAutomaton());
                return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
              }
              break;
             case 1:
              {
                ::org::apache::lucene::util::automaton::AutomatonProvider a0((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::AutomatonProvider::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toAutomaton(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
                {
                  OBJ_CALL(result = self->object.toAutomaton(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "toAutomaton", args);
            return NULL;
          }

          static PyObject *t_RegExp_toString(t_RegExp *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(RegExp), (PyObject *) self, "toString", args, 2);
          }

          static int t_RegExp_set__allowMutate(t_RegExp *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAllowMutate(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "allowMutate", arg);
            return -1;
          }

          static PyObject *t_RegExp_get__identifiers(t_RegExp *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object.getIdentifiers());
            return ::java::util::t_Set::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/BoostingQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *BoostingQuery::class$ = NULL;
        jmethodID *BoostingQuery::mids$ = NULL;
        bool BoostingQuery::live$ = false;

        jclass BoostingQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/BoostingQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7f23a8a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Query;F)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BoostingQuery::BoostingQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Query & a1, jfloat a2) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_7f23a8a3, a0.this$, a1.this$, a2)) {}

        jboolean BoostingQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint BoostingQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query BoostingQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        ::java::lang::String BoostingQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_BoostingQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BoostingQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BoostingQuery_init_(t_BoostingQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BoostingQuery_equals(t_BoostingQuery *self, PyObject *args);
        static PyObject *t_BoostingQuery_hashCode(t_BoostingQuery *self, PyObject *args);
        static PyObject *t_BoostingQuery_rewrite(t_BoostingQuery *self, PyObject *args);
        static PyObject *t_BoostingQuery_toString(t_BoostingQuery *self, PyObject *args);

        static PyMethodDef t_BoostingQuery__methods_[] = {
          DECLARE_METHOD(t_BoostingQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostingQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostingQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_BoostingQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BoostingQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_BoostingQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BoostingQuery, t_BoostingQuery, ::org::apache::lucene::search::Query, BoostingQuery, t_BoostingQuery_init_, 0, 0, 0, 0, 0);

        void t_BoostingQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(BoostingQuery), module, "BoostingQuery", 0);
        }

        void t_BoostingQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BoostingQuery).tp_dict, "class_", make_descriptor(BoostingQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BoostingQuery).tp_dict, "wrapfn_", make_descriptor(t_BoostingQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BoostingQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BoostingQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BoostingQuery::initializeClass, 1)))
            return NULL;
          return t_BoostingQuery::wrap_Object(BoostingQuery(((t_BoostingQuery *) arg)->object.this$));
        }
        static PyObject *t_BoostingQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BoostingQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BoostingQuery_init_(t_BoostingQuery *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          ::org::apache::lucene::search::Query a1((jobject) NULL);
          jfloat a2;
          BoostingQuery object((jobject) NULL);

          if (!parseArgs(args, "kkF", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = BoostingQuery(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BoostingQuery_equals(t_BoostingQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(BoostingQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BoostingQuery_hashCode(t_BoostingQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BoostingQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BoostingQuery_rewrite(t_BoostingQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BoostingQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_BoostingQuery_toString(t_BoostingQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(BoostingQuery), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *EdgeNGramTokenFilter::class$ = NULL;
          jmethodID *EdgeNGramTokenFilter::mids$ = NULL;
          bool EdgeNGramTokenFilter::live$ = false;
          jint EdgeNGramTokenFilter::DEFAULT_MAX_GRAM_SIZE = (jint) 0;
          jint EdgeNGramTokenFilter::DEFAULT_MIN_GRAM_SIZE = (jint) 0;
          ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side *EdgeNGramTokenFilter::DEFAULT_SIDE = NULL;

          jclass EdgeNGramTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_46a9ddd5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_init$_fa7af393] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;II)V");
              mids$[mid_init$_ef953ccc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side;II)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_GRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_GRAM_SIZE");
              DEFAULT_MIN_GRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_GRAM_SIZE");
              DEFAULT_SIDE = new ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side(env->getStaticObjectField(cls, "DEFAULT_SIDE", "Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EdgeNGramTokenFilter::EdgeNGramTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_46a9ddd5, a0.this$, a1.this$, a2, a3)) {}

          EdgeNGramTokenFilter::EdgeNGramTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::java::lang::String & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_fa7af393, a0.this$, a1.this$, a2.this$, a3, a4)) {}

          EdgeNGramTokenFilter::EdgeNGramTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_ef953ccc, a0.this$, a1.this$, a2.this$, a3, a4)) {}

          jboolean EdgeNGramTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void EdgeNGramTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_EdgeNGramTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EdgeNGramTokenFilter_init_(t_EdgeNGramTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EdgeNGramTokenFilter_incrementToken(t_EdgeNGramTokenFilter *self, PyObject *args);
          static PyObject *t_EdgeNGramTokenFilter_reset(t_EdgeNGramTokenFilter *self, PyObject *args);

          static PyMethodDef t_EdgeNGramTokenFilter__methods_[] = {
            DECLARE_METHOD(t_EdgeNGramTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EdgeNGramTokenFilter, t_EdgeNGramTokenFilter, ::org::apache::lucene::analysis::TokenFilter, EdgeNGramTokenFilter, t_EdgeNGramTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_EdgeNGramTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(EdgeNGramTokenFilter), module, "EdgeNGramTokenFilter", 0);
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter).tp_dict, "Side", make_descriptor(&PY_TYPE(EdgeNGramTokenFilter$Side)));
          }

          void t_EdgeNGramTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter).tp_dict, "class_", make_descriptor(EdgeNGramTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_EdgeNGramTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(EdgeNGramTokenFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter).tp_dict, "DEFAULT_MAX_GRAM_SIZE", make_descriptor(EdgeNGramTokenFilter::DEFAULT_MAX_GRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter).tp_dict, "DEFAULT_MIN_GRAM_SIZE", make_descriptor(EdgeNGramTokenFilter::DEFAULT_MIN_GRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter).tp_dict, "DEFAULT_SIDE", make_descriptor(::org::apache::lucene::analysis::ngram::t_EdgeNGramTokenFilter$Side::wrap_Object(*EdgeNGramTokenFilter::DEFAULT_SIDE)));
          }

          static PyObject *t_EdgeNGramTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EdgeNGramTokenFilter::initializeClass, 1)))
              return NULL;
            return t_EdgeNGramTokenFilter::wrap_Object(EdgeNGramTokenFilter(((t_EdgeNGramTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_EdgeNGramTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EdgeNGramTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EdgeNGramTokenFilter_init_(t_EdgeNGramTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jint a2;
                jint a3;
                EdgeNGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  INT_CALL(object = EdgeNGramTokenFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                jint a3;
                jint a4;
                EdgeNGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KksII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = EdgeNGramTokenFilter(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side a2((jobject) NULL);
                PyTypeObject **p2;
                jint a3;
                jint a4;
                EdgeNGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkKII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::org::apache::lucene::analysis::ngram::t_EdgeNGramTokenFilter$Side::parameters_, &a3, &a4))
                {
                  INT_CALL(object = EdgeNGramTokenFilter(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EdgeNGramTokenFilter_incrementToken(t_EdgeNGramTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(EdgeNGramTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_EdgeNGramTokenFilter_reset(t_EdgeNGramTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(EdgeNGramTokenFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector$GroupHead.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractAllGroupHeadsCollector$GroupHead::class$ = NULL;
          jmethodID *AbstractAllGroupHeadsCollector$GroupHead::mids$ = NULL;
          jfieldID *AbstractAllGroupHeadsCollector$GroupHead::fids$ = NULL;
          bool AbstractAllGroupHeadsCollector$GroupHead::live$ = false;

          jclass AbstractAllGroupHeadsCollector$GroupHead::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector$GroupHead");

              mids$ = new jmethodID[max_mid];
              mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
              mids$[mid_updateDocHead_39c7bd3c] = env->getMethodID(cls, "updateDocHead", "(I)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_doc] = env->getFieldID(cls, "doc", "I");
              fids$[fid_groupValue] = env->getFieldID(cls, "groupValue", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint AbstractAllGroupHeadsCollector$GroupHead::_get_doc() const
          {
            return env->getIntField(this$, fids$[fid_doc]);
          }

          void AbstractAllGroupHeadsCollector$GroupHead::_set_doc(jint a0) const
          {
            env->setIntField(this$, fids$[fid_doc], a0);
          }

          ::java::lang::Object AbstractAllGroupHeadsCollector$GroupHead::_get_groupValue() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_groupValue]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_of_(t_AbstractAllGroupHeadsCollector$GroupHead *self, PyObject *args);
          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_get__doc(t_AbstractAllGroupHeadsCollector$GroupHead *self, void *data);
          static int t_AbstractAllGroupHeadsCollector$GroupHead_set__doc(t_AbstractAllGroupHeadsCollector$GroupHead *self, PyObject *arg, void *data);
          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_get__groupValue(t_AbstractAllGroupHeadsCollector$GroupHead *self, void *data);

          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_get__parameters_(t_AbstractAllGroupHeadsCollector$GroupHead *self, void *data);
          static PyGetSetDef t_AbstractAllGroupHeadsCollector$GroupHead__fields_[] = {
            DECLARE_GETSET_FIELD(t_AbstractAllGroupHeadsCollector$GroupHead, doc),
            DECLARE_GET_FIELD(t_AbstractAllGroupHeadsCollector$GroupHead, groupValue),
            DECLARE_GET_FIELD(t_AbstractAllGroupHeadsCollector$GroupHead, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractAllGroupHeadsCollector$GroupHead__methods_[] = {
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector$GroupHead, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector$GroupHead, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector$GroupHead, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractAllGroupHeadsCollector$GroupHead, t_AbstractAllGroupHeadsCollector$GroupHead, ::java::lang::Object, AbstractAllGroupHeadsCollector$GroupHead, abstract_init, 0, 0, t_AbstractAllGroupHeadsCollector$GroupHead__fields_, 0, 0);
          PyObject *t_AbstractAllGroupHeadsCollector$GroupHead::wrap_Object(const AbstractAllGroupHeadsCollector$GroupHead& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractAllGroupHeadsCollector$GroupHead::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractAllGroupHeadsCollector$GroupHead *self = (t_AbstractAllGroupHeadsCollector$GroupHead *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractAllGroupHeadsCollector$GroupHead::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractAllGroupHeadsCollector$GroupHead::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractAllGroupHeadsCollector$GroupHead *self = (t_AbstractAllGroupHeadsCollector$GroupHead *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractAllGroupHeadsCollector$GroupHead::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractAllGroupHeadsCollector$GroupHead), module, "AbstractAllGroupHeadsCollector$GroupHead", 0);
          }

          void t_AbstractAllGroupHeadsCollector$GroupHead::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupHeadsCollector$GroupHead).tp_dict, "class_", make_descriptor(AbstractAllGroupHeadsCollector$GroupHead::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupHeadsCollector$GroupHead).tp_dict, "wrapfn_", make_descriptor(t_AbstractAllGroupHeadsCollector$GroupHead::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupHeadsCollector$GroupHead).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractAllGroupHeadsCollector$GroupHead::initializeClass, 1)))
              return NULL;
            return t_AbstractAllGroupHeadsCollector$GroupHead::wrap_Object(AbstractAllGroupHeadsCollector$GroupHead(((t_AbstractAllGroupHeadsCollector$GroupHead *) arg)->object.this$));
          }
          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractAllGroupHeadsCollector$GroupHead::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_of_(t_AbstractAllGroupHeadsCollector$GroupHead *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }
          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_get__parameters_(t_AbstractAllGroupHeadsCollector$GroupHead *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_get__doc(t_AbstractAllGroupHeadsCollector$GroupHead *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_doc());
            return PyInt_FromLong((long) value);
          }
          static int t_AbstractAllGroupHeadsCollector$GroupHead_set__doc(t_AbstractAllGroupHeadsCollector$GroupHead *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_doc(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "doc", arg);
            return -1;
          }

          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_get__groupValue(t_AbstractAllGroupHeadsCollector$GroupHead *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupValue());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {

          ::java::lang::Class *CompoundWordTokenFilterBase::class$ = NULL;
          jmethodID *CompoundWordTokenFilterBase::mids$ = NULL;
          bool CompoundWordTokenFilterBase::live$ = false;
          jint CompoundWordTokenFilterBase::DEFAULT_MAX_SUBWORD_SIZE = (jint) 0;
          jint CompoundWordTokenFilterBase::DEFAULT_MIN_SUBWORD_SIZE = (jint) 0;
          jint CompoundWordTokenFilterBase::DEFAULT_MIN_WORD_SIZE = (jint) 0;

          jclass CompoundWordTokenFilterBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_decompose_54c6a166] = env->getMethodID(cls, "decompose", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_SUBWORD_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_SUBWORD_SIZE");
              DEFAULT_MIN_SUBWORD_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_SUBWORD_SIZE");
              DEFAULT_MIN_WORD_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_WORD_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean CompoundWordTokenFilterBase::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void CompoundWordTokenFilterBase::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          static PyObject *t_CompoundWordTokenFilterBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompoundWordTokenFilterBase_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompoundWordTokenFilterBase_incrementToken(t_CompoundWordTokenFilterBase *self, PyObject *args);
          static PyObject *t_CompoundWordTokenFilterBase_reset(t_CompoundWordTokenFilterBase *self, PyObject *args);

          static PyMethodDef t_CompoundWordTokenFilterBase__methods_[] = {
            DECLARE_METHOD(t_CompoundWordTokenFilterBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompoundWordTokenFilterBase, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompoundWordTokenFilterBase, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_CompoundWordTokenFilterBase, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompoundWordTokenFilterBase, t_CompoundWordTokenFilterBase, ::org::apache::lucene::analysis::TokenFilter, CompoundWordTokenFilterBase, abstract_init, 0, 0, 0, 0, 0);

          void t_CompoundWordTokenFilterBase::install(PyObject *module)
          {
            installType(&PY_TYPE(CompoundWordTokenFilterBase), module, "CompoundWordTokenFilterBase", 0);
          }

          void t_CompoundWordTokenFilterBase::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompoundWordTokenFilterBase).tp_dict, "class_", make_descriptor(CompoundWordTokenFilterBase::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompoundWordTokenFilterBase).tp_dict, "wrapfn_", make_descriptor(t_CompoundWordTokenFilterBase::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompoundWordTokenFilterBase).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CompoundWordTokenFilterBase::initializeClass);
            PyDict_SetItemString(PY_TYPE(CompoundWordTokenFilterBase).tp_dict, "DEFAULT_MAX_SUBWORD_SIZE", make_descriptor(CompoundWordTokenFilterBase::DEFAULT_MAX_SUBWORD_SIZE));
            PyDict_SetItemString(PY_TYPE(CompoundWordTokenFilterBase).tp_dict, "DEFAULT_MIN_SUBWORD_SIZE", make_descriptor(CompoundWordTokenFilterBase::DEFAULT_MIN_SUBWORD_SIZE));
            PyDict_SetItemString(PY_TYPE(CompoundWordTokenFilterBase).tp_dict, "DEFAULT_MIN_WORD_SIZE", make_descriptor(CompoundWordTokenFilterBase::DEFAULT_MIN_WORD_SIZE));
          }

          static PyObject *t_CompoundWordTokenFilterBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompoundWordTokenFilterBase::initializeClass, 1)))
              return NULL;
            return t_CompoundWordTokenFilterBase::wrap_Object(CompoundWordTokenFilterBase(((t_CompoundWordTokenFilterBase *) arg)->object.this$));
          }
          static PyObject *t_CompoundWordTokenFilterBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompoundWordTokenFilterBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CompoundWordTokenFilterBase_incrementToken(t_CompoundWordTokenFilterBase *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CompoundWordTokenFilterBase), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_CompoundWordTokenFilterBase_reset(t_CompoundWordTokenFilterBase *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompoundWordTokenFilterBase), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetSumIntAssociations.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacetSumIntAssociations::class$ = NULL;
          jmethodID *TaxonomyFacetSumIntAssociations::mids$ = NULL;
          bool TaxonomyFacetSumIntAssociations::live$ = false;

          jclass TaxonomyFacetSumIntAssociations::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacetSumIntAssociations");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_33dd1605] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");
              mids$[mid_init$_9888e06b] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyFacetSumIntAssociations::TaxonomyFacetSumIntAssociations(const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::FacetsCollector & a2) : ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_33dd1605, a0.this$, a1.this$, a2.this$)) {}

          TaxonomyFacetSumIntAssociations::TaxonomyFacetSumIntAssociations(const ::java::lang::String & a0, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a1, const ::org::apache::lucene::facet::FacetsConfig & a2, const ::org::apache::lucene::facet::FacetsCollector & a3) : ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_9888e06b, a0.this$, a1.this$, a2.this$, a3.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacetSumIntAssociations_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacetSumIntAssociations_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyFacetSumIntAssociations_init_(t_TaxonomyFacetSumIntAssociations *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_TaxonomyFacetSumIntAssociations__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacetSumIntAssociations, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetSumIntAssociations, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyFacetSumIntAssociations, t_TaxonomyFacetSumIntAssociations, ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets, TaxonomyFacetSumIntAssociations, t_TaxonomyFacetSumIntAssociations_init_, 0, 0, 0, 0, 0);

          void t_TaxonomyFacetSumIntAssociations::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacetSumIntAssociations), module, "TaxonomyFacetSumIntAssociations", 0);
          }

          void t_TaxonomyFacetSumIntAssociations::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumIntAssociations).tp_dict, "class_", make_descriptor(TaxonomyFacetSumIntAssociations::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumIntAssociations).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyFacetSumIntAssociations::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumIntAssociations).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacetSumIntAssociations_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacetSumIntAssociations::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacetSumIntAssociations::wrap_Object(TaxonomyFacetSumIntAssociations(((t_TaxonomyFacetSumIntAssociations *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacetSumIntAssociations_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacetSumIntAssociations::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyFacetSumIntAssociations_init_(t_TaxonomyFacetSumIntAssociations *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                TaxonomyFacetSumIntAssociations object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = TaxonomyFacetSumIntAssociations(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a2((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a3((jobject) NULL);
                TaxonomyFacetSumIntAssociations object((jobject) NULL);

                if (!parseArgs(args, "skkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = TaxonomyFacetSumIntAssociations(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishMinimalStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishMinimalStemFilter::class$ = NULL;
          jmethodID *EnglishMinimalStemFilter::mids$ = NULL;
          bool EnglishMinimalStemFilter::live$ = false;

          jclass EnglishMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishMinimalStemFilter::EnglishMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean EnglishMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishMinimalStemFilter_init_(t_EnglishMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishMinimalStemFilter_incrementToken(t_EnglishMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_EnglishMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_EnglishMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EnglishMinimalStemFilter, t_EnglishMinimalStemFilter, ::org::apache::lucene::analysis::TokenFilter, EnglishMinimalStemFilter, t_EnglishMinimalStemFilter_init_, 0, 0, 0, 0, 0);

          void t_EnglishMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishMinimalStemFilter), module, "EnglishMinimalStemFilter", 0);
          }

          void t_EnglishMinimalStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemFilter).tp_dict, "class_", make_descriptor(EnglishMinimalStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemFilter).tp_dict, "wrapfn_", make_descriptor(t_EnglishMinimalStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EnglishMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_EnglishMinimalStemFilter::wrap_Object(EnglishMinimalStemFilter(((t_EnglishMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_EnglishMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishMinimalStemFilter_init_(t_EnglishMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            EnglishMinimalStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = EnglishMinimalStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EnglishMinimalStemFilter_incrementToken(t_EnglishMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(EnglishMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/RegexpQueryNode.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/TextableQueryNode.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *RegexpQueryNode::class$ = NULL;
              jmethodID *RegexpQueryNode::mids$ = NULL;
              bool RegexpQueryNode::live$ = false;

              jclass RegexpQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/RegexpQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_ddd81d4e] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;II)V");
                  mids$[mid_cloneTree_6f121059] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/standard/nodes/RegexpQueryNode;");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getFieldAsString_14c7b5c5] = env->getMethodID(cls, "getFieldAsString", "()Ljava/lang/String;");
                  mids$[mid_getText_e0adba2f] = env->getMethodID(cls, "getText", "()Ljava/lang/CharSequence;");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_setText_a8afc64a] = env->getMethodID(cls, "setText", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_textToBytesRef_4ae19461] = env->getMethodID(cls, "textToBytesRef", "()Lorg/apache/lucene/util/BytesRef;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              RegexpQueryNode::RegexpQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jint a2, jint a3) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_ddd81d4e, a0.this$, a1.this$, a2, a3)) {}

              RegexpQueryNode RegexpQueryNode::cloneTree() const
              {
                return RegexpQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_6f121059]));
              }

              ::java::lang::CharSequence RegexpQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              ::java::lang::String RegexpQueryNode::getFieldAsString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldAsString_14c7b5c5]));
              }

              ::java::lang::CharSequence RegexpQueryNode::getText() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getText_e0adba2f]));
              }

              void RegexpQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              void RegexpQueryNode::setText(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setText_a8afc64a], a0.this$);
              }

              ::org::apache::lucene::util::BytesRef RegexpQueryNode::textToBytesRef() const
              {
                return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_textToBytesRef_4ae19461]));
              }

              ::java::lang::CharSequence RegexpQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String RegexpQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_RegexpQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RegexpQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_RegexpQueryNode_init_(t_RegexpQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_RegexpQueryNode_cloneTree(t_RegexpQueryNode *self, PyObject *args);
              static PyObject *t_RegexpQueryNode_getField(t_RegexpQueryNode *self);
              static PyObject *t_RegexpQueryNode_getFieldAsString(t_RegexpQueryNode *self);
              static PyObject *t_RegexpQueryNode_getText(t_RegexpQueryNode *self);
              static PyObject *t_RegexpQueryNode_setField(t_RegexpQueryNode *self, PyObject *arg);
              static PyObject *t_RegexpQueryNode_setText(t_RegexpQueryNode *self, PyObject *arg);
              static PyObject *t_RegexpQueryNode_textToBytesRef(t_RegexpQueryNode *self);
              static PyObject *t_RegexpQueryNode_toQueryString(t_RegexpQueryNode *self, PyObject *args);
              static PyObject *t_RegexpQueryNode_toString(t_RegexpQueryNode *self, PyObject *args);
              static PyObject *t_RegexpQueryNode_get__field(t_RegexpQueryNode *self, void *data);
              static int t_RegexpQueryNode_set__field(t_RegexpQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_RegexpQueryNode_get__fieldAsString(t_RegexpQueryNode *self, void *data);
              static PyObject *t_RegexpQueryNode_get__text(t_RegexpQueryNode *self, void *data);
              static int t_RegexpQueryNode_set__text(t_RegexpQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_RegexpQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_RegexpQueryNode, field),
                DECLARE_GET_FIELD(t_RegexpQueryNode, fieldAsString),
                DECLARE_GETSET_FIELD(t_RegexpQueryNode, text),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_RegexpQueryNode__methods_[] = {
                DECLARE_METHOD(t_RegexpQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RegexpQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RegexpQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_RegexpQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_RegexpQueryNode, getFieldAsString, METH_NOARGS),
                DECLARE_METHOD(t_RegexpQueryNode, getText, METH_NOARGS),
                DECLARE_METHOD(t_RegexpQueryNode, setField, METH_O),
                DECLARE_METHOD(t_RegexpQueryNode, setText, METH_O),
                DECLARE_METHOD(t_RegexpQueryNode, textToBytesRef, METH_NOARGS),
                DECLARE_METHOD(t_RegexpQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_RegexpQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(RegexpQueryNode, t_RegexpQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, RegexpQueryNode, t_RegexpQueryNode_init_, 0, 0, t_RegexpQueryNode__fields_, 0, 0);

              void t_RegexpQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(RegexpQueryNode), module, "RegexpQueryNode", 0);
              }

              void t_RegexpQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(RegexpQueryNode).tp_dict, "class_", make_descriptor(RegexpQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(RegexpQueryNode).tp_dict, "wrapfn_", make_descriptor(t_RegexpQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(RegexpQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_RegexpQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, RegexpQueryNode::initializeClass, 1)))
                  return NULL;
                return t_RegexpQueryNode::wrap_Object(RegexpQueryNode(((t_RegexpQueryNode *) arg)->object.this$));
              }
              static PyObject *t_RegexpQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, RegexpQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_RegexpQueryNode_init_(t_RegexpQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                jint a2;
                jint a3;
                RegexpQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OOII", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = RegexpQueryNode(a0, a1, a2, a3));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_RegexpQueryNode_cloneTree(t_RegexpQueryNode *self, PyObject *args)
              {
                RegexpQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_RegexpQueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(RegexpQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_RegexpQueryNode_getField(t_RegexpQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_RegexpQueryNode_getFieldAsString(t_RegexpQueryNode *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getFieldAsString());
                return j2p(result);
              }

              static PyObject *t_RegexpQueryNode_getText(t_RegexpQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_RegexpQueryNode_setField(t_RegexpQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_RegexpQueryNode_setText(t_RegexpQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setText(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setText", arg);
                return NULL;
              }

              static PyObject *t_RegexpQueryNode_textToBytesRef(t_RegexpQueryNode *self)
              {
                ::org::apache::lucene::util::BytesRef result((jobject) NULL);
                OBJ_CALL(result = self->object.textToBytesRef());
                return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
              }

              static PyObject *t_RegexpQueryNode_toQueryString(t_RegexpQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(RegexpQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_RegexpQueryNode_toString(t_RegexpQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(RegexpQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_RegexpQueryNode_get__field(t_RegexpQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_RegexpQueryNode_set__field(t_RegexpQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_RegexpQueryNode_get__fieldAsString(t_RegexpQueryNode *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getFieldAsString());
                return j2p(value);
              }

              static PyObject *t_RegexpQueryNode_get__text(t_RegexpQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_RegexpQueryNode_set__text(t_RegexpQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setText(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "text", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexTermsEnum.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {

            ::java::lang::Class *RegexTermsEnum::class$ = NULL;
            jmethodID *RegexTermsEnum::mids$ = NULL;
            bool RegexTermsEnum::live$ = false;

            jclass RegexTermsEnum::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/regex/RegexTermsEnum");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d12accc0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;Lorg/apache/lucene/index/Term;Lorg/apache/lucene/sandbox/queries/regex/RegexCapabilities;)V");
                mids$[mid_accept_30bc08e1] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/FilteredTermsEnum$AcceptStatus;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            RegexTermsEnum::RegexTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0, const ::org::apache::lucene::index::Term & a1, const ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities & a2) : ::org::apache::lucene::index::FilteredTermsEnum(env->newObject(initializeClass, &mids$, mid_init$_d12accc0, a0.this$, a1.this$, a2.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {
            static PyObject *t_RegexTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
            static int t_RegexTermsEnum_init_(t_RegexTermsEnum *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_RegexTermsEnum__methods_[] = {
              DECLARE_METHOD(t_RegexTermsEnum, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexTermsEnum, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(RegexTermsEnum, t_RegexTermsEnum, ::org::apache::lucene::index::FilteredTermsEnum, RegexTermsEnum, t_RegexTermsEnum_init_, 0, 0, 0, 0, 0);

            void t_RegexTermsEnum::install(PyObject *module)
            {
              installType(&PY_TYPE(RegexTermsEnum), module, "RegexTermsEnum", 0);
            }

            void t_RegexTermsEnum::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(RegexTermsEnum).tp_dict, "class_", make_descriptor(RegexTermsEnum::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(RegexTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_RegexTermsEnum::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(RegexTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RegexTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RegexTermsEnum::initializeClass, 1)))
                return NULL;
              return t_RegexTermsEnum::wrap_Object(RegexTermsEnum(((t_RegexTermsEnum *) arg)->object.this$));
            }
            static PyObject *t_RegexTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RegexTermsEnum::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_RegexTermsEnum_init_(t_RegexTermsEnum *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
              ::org::apache::lucene::index::Term a1((jobject) NULL);
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities a2((jobject) NULL);
              RegexTermsEnum object((jobject) NULL);

              if (!parseArgs(args, "kkk", ::org::apache::lucene::index::TermsEnum::initializeClass, ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = RegexTermsEnum(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseMinimalStemFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseMinimalStemFilterFactory::class$ = NULL;
          jmethodID *PortugueseMinimalStemFilterFactory::mids$ = NULL;
          bool PortugueseMinimalStemFilterFactory::live$ = false;

          jclass PortugueseMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseMinimalStemFilterFactory::PortugueseMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream PortugueseMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseMinimalStemFilterFactory_init_(t_PortugueseMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseMinimalStemFilterFactory_create(t_PortugueseMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_PortugueseMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PortugueseMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseMinimalStemFilterFactory, t_PortugueseMinimalStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PortugueseMinimalStemFilterFactory, t_PortugueseMinimalStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PortugueseMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseMinimalStemFilterFactory), module, "PortugueseMinimalStemFilterFactory", 0);
          }

          void t_PortugueseMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemFilterFactory).tp_dict, "class_", make_descriptor(PortugueseMinimalStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PortugueseMinimalStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PortugueseMinimalStemFilterFactory::wrap_Object(PortugueseMinimalStemFilterFactory(((t_PortugueseMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PortugueseMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseMinimalStemFilterFactory_init_(t_PortugueseMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PortugueseMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PortugueseMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseMinimalStemFilterFactory_create(t_PortugueseMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PortugueseMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/postingshighlight/DefaultPassageFormatter.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/postingshighlight/Passage.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {

          ::java::lang::Class *DefaultPassageFormatter::class$ = NULL;
          jmethodID *DefaultPassageFormatter::mids$ = NULL;
          bool DefaultPassageFormatter::live$ = false;

          jclass DefaultPassageFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/postingshighlight/DefaultPassageFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_7f8a9869] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V");
              mids$[mid_format_4b42952e] = env->getMethodID(cls, "format", "([Lorg/apache/lucene/search/postingshighlight/Passage;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_append_5cdac082] = env->getMethodID(cls, "append", "(Ljava/lang/StringBuilder;Ljava/lang/String;II)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DefaultPassageFormatter::DefaultPassageFormatter() : ::org::apache::lucene::search::postingshighlight::PassageFormatter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          DefaultPassageFormatter::DefaultPassageFormatter(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3) : ::org::apache::lucene::search::postingshighlight::PassageFormatter(env->newObject(initializeClass, &mids$, mid_init$_7f8a9869, a0.this$, a1.this$, a2.this$, a3)) {}

          ::java::lang::String DefaultPassageFormatter::format(const JArray< ::org::apache::lucene::search::postingshighlight::Passage > & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_format_4b42952e], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {
          static PyObject *t_DefaultPassageFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DefaultPassageFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DefaultPassageFormatter_init_(t_DefaultPassageFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DefaultPassageFormatter_format(t_DefaultPassageFormatter *self, PyObject *args);

          static PyMethodDef t_DefaultPassageFormatter__methods_[] = {
            DECLARE_METHOD(t_DefaultPassageFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultPassageFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultPassageFormatter, format, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DefaultPassageFormatter, t_DefaultPassageFormatter, ::org::apache::lucene::search::postingshighlight::PassageFormatter, DefaultPassageFormatter, t_DefaultPassageFormatter_init_, 0, 0, 0, 0, 0);

          void t_DefaultPassageFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(DefaultPassageFormatter), module, "DefaultPassageFormatter", 0);
          }

          void t_DefaultPassageFormatter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DefaultPassageFormatter).tp_dict, "class_", make_descriptor(DefaultPassageFormatter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DefaultPassageFormatter).tp_dict, "wrapfn_", make_descriptor(t_DefaultPassageFormatter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DefaultPassageFormatter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DefaultPassageFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DefaultPassageFormatter::initializeClass, 1)))
              return NULL;
            return t_DefaultPassageFormatter::wrap_Object(DefaultPassageFormatter(((t_DefaultPassageFormatter *) arg)->object.this$));
          }
          static PyObject *t_DefaultPassageFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DefaultPassageFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DefaultPassageFormatter_init_(t_DefaultPassageFormatter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                DefaultPassageFormatter object((jobject) NULL);

                INT_CALL(object = DefaultPassageFormatter());
                self->object = object;
                break;
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                jboolean a3;
                DefaultPassageFormatter object((jobject) NULL);

                if (!parseArgs(args, "sssZ", &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = DefaultPassageFormatter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DefaultPassageFormatter_format(t_DefaultPassageFormatter *self, PyObject *args)
          {
            JArray< ::org::apache::lucene::search::postingshighlight::Passage > a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "[ks", ::org::apache::lucene::search::postingshighlight::Passage::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.format(a0, a1));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DefaultPassageFormatter), (PyObject *) self, "format", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniStemmer::class$ = NULL;
          jmethodID *SoraniStemmer::mids$ = NULL;
          bool SoraniStemmer::live$ = false;

          jclass SoraniStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniStemmer::SoraniStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint SoraniStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniStemmer_init_(t_SoraniStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniStemmer_stem(t_SoraniStemmer *self, PyObject *args);

          static PyMethodDef t_SoraniStemmer__methods_[] = {
            DECLARE_METHOD(t_SoraniStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SoraniStemmer, t_SoraniStemmer, ::java::lang::Object, SoraniStemmer, t_SoraniStemmer_init_, 0, 0, 0, 0, 0);

          void t_SoraniStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniStemmer), module, "SoraniStemmer", 0);
          }

          void t_SoraniStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SoraniStemmer).tp_dict, "class_", make_descriptor(SoraniStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SoraniStemmer).tp_dict, "wrapfn_", make_descriptor(t_SoraniStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SoraniStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SoraniStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniStemmer::initializeClass, 1)))
              return NULL;
            return t_SoraniStemmer::wrap_Object(SoraniStemmer(((t_SoraniStemmer *) arg)->object.this$));
          }
          static PyObject *t_SoraniStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniStemmer_init_(t_SoraniStemmer *self, PyObject *args, PyObject *kwds)
          {
            SoraniStemmer object((jobject) NULL);

            INT_CALL(object = SoraniStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_SoraniStemmer_stem(t_SoraniStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/OpenRangeQueryNodeProcessor.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *OpenRangeQueryNodeProcessor::class$ = NULL;
              jmethodID *OpenRangeQueryNodeProcessor::mids$ = NULL;
              bool OpenRangeQueryNodeProcessor::live$ = false;
              ::java::lang::String *OpenRangeQueryNodeProcessor::OPEN_RANGE_TOKEN = NULL;

              jclass OpenRangeQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/OpenRangeQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  OPEN_RANGE_TOKEN = new ::java::lang::String(env->getStaticObjectField(cls, "OPEN_RANGE_TOKEN", "Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              OpenRangeQueryNodeProcessor::OpenRangeQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_OpenRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_OpenRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_OpenRangeQueryNodeProcessor_init_(t_OpenRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_OpenRangeQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_OpenRangeQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_OpenRangeQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(OpenRangeQueryNodeProcessor, t_OpenRangeQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, OpenRangeQueryNodeProcessor, t_OpenRangeQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_OpenRangeQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(OpenRangeQueryNodeProcessor), module, "OpenRangeQueryNodeProcessor", 0);
              }

              void t_OpenRangeQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(OpenRangeQueryNodeProcessor).tp_dict, "class_", make_descriptor(OpenRangeQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(OpenRangeQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_OpenRangeQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(OpenRangeQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(OpenRangeQueryNodeProcessor::initializeClass);
                PyDict_SetItemString(PY_TYPE(OpenRangeQueryNodeProcessor).tp_dict, "OPEN_RANGE_TOKEN", make_descriptor(j2p(*OpenRangeQueryNodeProcessor::OPEN_RANGE_TOKEN)));
              }

              static PyObject *t_OpenRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, OpenRangeQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_OpenRangeQueryNodeProcessor::wrap_Object(OpenRangeQueryNodeProcessor(((t_OpenRangeQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_OpenRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, OpenRangeQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_OpenRangeQueryNodeProcessor_init_(t_OpenRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                OpenRangeQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = OpenRangeQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/in/IndicNormalizer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {

          ::java::lang::Class *IndicNormalizer::class$ = NULL;
          jmethodID *IndicNormalizer::mids$ = NULL;
          bool IndicNormalizer::live$ = false;

          jclass IndicNormalizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/in/IndicNormalizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normalize_ec6430eb] = env->getMethodID(cls, "normalize", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndicNormalizer::IndicNormalizer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint IndicNormalizer::normalize(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_normalize_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {
          static PyObject *t_IndicNormalizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndicNormalizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndicNormalizer_init_(t_IndicNormalizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndicNormalizer_normalize(t_IndicNormalizer *self, PyObject *args);

          static PyMethodDef t_IndicNormalizer__methods_[] = {
            DECLARE_METHOD(t_IndicNormalizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizer, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndicNormalizer, t_IndicNormalizer, ::java::lang::Object, IndicNormalizer, t_IndicNormalizer_init_, 0, 0, 0, 0, 0);

          void t_IndicNormalizer::install(PyObject *module)
          {
            installType(&PY_TYPE(IndicNormalizer), module, "IndicNormalizer", 0);
          }

          void t_IndicNormalizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndicNormalizer).tp_dict, "class_", make_descriptor(IndicNormalizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndicNormalizer).tp_dict, "wrapfn_", make_descriptor(t_IndicNormalizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndicNormalizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndicNormalizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndicNormalizer::initializeClass, 1)))
              return NULL;
            return t_IndicNormalizer::wrap_Object(IndicNormalizer(((t_IndicNormalizer *) arg)->object.this$));
          }
          static PyObject *t_IndicNormalizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndicNormalizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndicNormalizer_init_(t_IndicNormalizer *self, PyObject *args, PyObject *kwds)
          {
            IndicNormalizer object((jobject) NULL);

            INT_CALL(object = IndicNormalizer());
            self->object = object;

            return 0;
          }

          static PyObject *t_IndicNormalizer_normalize(t_IndicNormalizer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.normalize(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *FuzzyLikeThisQuery::class$ = NULL;
          jmethodID *FuzzyLikeThisQuery::mids$ = NULL;
          bool FuzzyLikeThisQuery::live$ = false;

          jclass FuzzyLikeThisQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_374e0216] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_addTerms_7066f4ef] = env->getMethodID(cls, "addTerms", "(Ljava/lang/String;Ljava/lang/String;FI)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isIgnoreTF_54c6a16a] = env->getMethodID(cls, "isIgnoreTF", "()Z");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setIgnoreTF_bb0c767f] = env->getMethodID(cls, "setIgnoreTF", "(Z)V");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FuzzyLikeThisQuery::FuzzyLikeThisQuery(jint a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_374e0216, a0, a1.this$)) {}

          void FuzzyLikeThisQuery::addTerms(const ::java::lang::String & a0, const ::java::lang::String & a1, jfloat a2, jint a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addTerms_7066f4ef], a0.this$, a1.this$, a2, a3);
          }

          jboolean FuzzyLikeThisQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint FuzzyLikeThisQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jboolean FuzzyLikeThisQuery::isIgnoreTF() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreTF_54c6a16a]);
          }

          ::org::apache::lucene::search::Query FuzzyLikeThisQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          void FuzzyLikeThisQuery::setIgnoreTF(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setIgnoreTF_bb0c767f], a0);
          }

          ::java::lang::String FuzzyLikeThisQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_FuzzyLikeThisQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FuzzyLikeThisQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FuzzyLikeThisQuery_init_(t_FuzzyLikeThisQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FuzzyLikeThisQuery_addTerms(t_FuzzyLikeThisQuery *self, PyObject *args);
          static PyObject *t_FuzzyLikeThisQuery_equals(t_FuzzyLikeThisQuery *self, PyObject *args);
          static PyObject *t_FuzzyLikeThisQuery_hashCode(t_FuzzyLikeThisQuery *self, PyObject *args);
          static PyObject *t_FuzzyLikeThisQuery_isIgnoreTF(t_FuzzyLikeThisQuery *self);
          static PyObject *t_FuzzyLikeThisQuery_rewrite(t_FuzzyLikeThisQuery *self, PyObject *args);
          static PyObject *t_FuzzyLikeThisQuery_setIgnoreTF(t_FuzzyLikeThisQuery *self, PyObject *arg);
          static PyObject *t_FuzzyLikeThisQuery_toString(t_FuzzyLikeThisQuery *self, PyObject *args);
          static PyObject *t_FuzzyLikeThisQuery_get__ignoreTF(t_FuzzyLikeThisQuery *self, void *data);
          static int t_FuzzyLikeThisQuery_set__ignoreTF(t_FuzzyLikeThisQuery *self, PyObject *arg, void *data);
          static PyGetSetDef t_FuzzyLikeThisQuery__fields_[] = {
            DECLARE_GETSET_FIELD(t_FuzzyLikeThisQuery, ignoreTF),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FuzzyLikeThisQuery__methods_[] = {
            DECLARE_METHOD(t_FuzzyLikeThisQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, addTerms, METH_VARARGS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, isIgnoreTF, METH_NOARGS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, setIgnoreTF, METH_O),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FuzzyLikeThisQuery, t_FuzzyLikeThisQuery, ::org::apache::lucene::search::Query, FuzzyLikeThisQuery, t_FuzzyLikeThisQuery_init_, 0, 0, t_FuzzyLikeThisQuery__fields_, 0, 0);

          void t_FuzzyLikeThisQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(FuzzyLikeThisQuery), module, "FuzzyLikeThisQuery", 0);
          }

          void t_FuzzyLikeThisQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FuzzyLikeThisQuery).tp_dict, "class_", make_descriptor(FuzzyLikeThisQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FuzzyLikeThisQuery).tp_dict, "wrapfn_", make_descriptor(t_FuzzyLikeThisQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FuzzyLikeThisQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FuzzyLikeThisQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FuzzyLikeThisQuery::initializeClass, 1)))
              return NULL;
            return t_FuzzyLikeThisQuery::wrap_Object(FuzzyLikeThisQuery(((t_FuzzyLikeThisQuery *) arg)->object.this$));
          }
          static PyObject *t_FuzzyLikeThisQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FuzzyLikeThisQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FuzzyLikeThisQuery_init_(t_FuzzyLikeThisQuery *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
            FuzzyLikeThisQuery object((jobject) NULL);

            if (!parseArgs(args, "Ik", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
            {
              INT_CALL(object = FuzzyLikeThisQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FuzzyLikeThisQuery_addTerms(t_FuzzyLikeThisQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat a2;
            jint a3;

            if (!parseArgs(args, "ssFI", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.addTerms(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addTerms", args);
            return NULL;
          }

          static PyObject *t_FuzzyLikeThisQuery_equals(t_FuzzyLikeThisQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FuzzyLikeThisQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FuzzyLikeThisQuery_hashCode(t_FuzzyLikeThisQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FuzzyLikeThisQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FuzzyLikeThisQuery_isIgnoreTF(t_FuzzyLikeThisQuery *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreTF());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FuzzyLikeThisQuery_rewrite(t_FuzzyLikeThisQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FuzzyLikeThisQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_FuzzyLikeThisQuery_setIgnoreTF(t_FuzzyLikeThisQuery *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setIgnoreTF(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setIgnoreTF", arg);
            return NULL;
          }

          static PyObject *t_FuzzyLikeThisQuery_toString(t_FuzzyLikeThisQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FuzzyLikeThisQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FuzzyLikeThisQuery_get__ignoreTF(t_FuzzyLikeThisQuery *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreTF());
            Py_RETURN_BOOL(value);
          }
          static int t_FuzzyLikeThisQuery_set__ignoreTF(t_FuzzyLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setIgnoreTF(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "ignoreTF", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeywordRepeatFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeywordRepeatFilter::class$ = NULL;
          jmethodID *KeywordRepeatFilter::mids$ = NULL;
          bool KeywordRepeatFilter::live$ = false;

          jclass KeywordRepeatFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeywordRepeatFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordRepeatFilter::KeywordRepeatFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean KeywordRepeatFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void KeywordRepeatFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeywordRepeatFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordRepeatFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordRepeatFilter_init_(t_KeywordRepeatFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordRepeatFilter_incrementToken(t_KeywordRepeatFilter *self, PyObject *args);
          static PyObject *t_KeywordRepeatFilter_reset(t_KeywordRepeatFilter *self, PyObject *args);

          static PyMethodDef t_KeywordRepeatFilter__methods_[] = {
            DECLARE_METHOD(t_KeywordRepeatFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordRepeatFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordRepeatFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_KeywordRepeatFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordRepeatFilter, t_KeywordRepeatFilter, ::org::apache::lucene::analysis::TokenFilter, KeywordRepeatFilter, t_KeywordRepeatFilter_init_, 0, 0, 0, 0, 0);

          void t_KeywordRepeatFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordRepeatFilter), module, "KeywordRepeatFilter", 0);
          }

          void t_KeywordRepeatFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordRepeatFilter).tp_dict, "class_", make_descriptor(KeywordRepeatFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordRepeatFilter).tp_dict, "wrapfn_", make_descriptor(t_KeywordRepeatFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordRepeatFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordRepeatFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordRepeatFilter::initializeClass, 1)))
              return NULL;
            return t_KeywordRepeatFilter::wrap_Object(KeywordRepeatFilter(((t_KeywordRepeatFilter *) arg)->object.this$));
          }
          static PyObject *t_KeywordRepeatFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordRepeatFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordRepeatFilter_init_(t_KeywordRepeatFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            KeywordRepeatFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = KeywordRepeatFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeywordRepeatFilter_incrementToken(t_KeywordRepeatFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(KeywordRepeatFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_KeywordRepeatFilter_reset(t_KeywordRepeatFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(KeywordRepeatFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefHash$BytesStartArray.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Counter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefHash$BytesStartArray::class$ = NULL;
        jmethodID *BytesRefHash$BytesStartArray::mids$ = NULL;
        bool BytesRefHash$BytesStartArray::live$ = false;

        jclass BytesRefHash$BytesStartArray::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefHash$BytesStartArray");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_bytesUsed_781dd30a] = env->getMethodID(cls, "bytesUsed", "()Lorg/apache/lucene/util/Counter;");
            mids$[mid_clear_dab10e75] = env->getMethodID(cls, "clear", "()[I");
            mids$[mid_grow_dab10e75] = env->getMethodID(cls, "grow", "()[I");
            mids$[mid_init_dab10e75] = env->getMethodID(cls, "init", "()[I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BytesRefHash$BytesStartArray::BytesRefHash$BytesStartArray() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::util::Counter BytesRefHash$BytesStartArray::bytesUsed() const
        {
          return ::org::apache::lucene::util::Counter(env->callObjectMethod(this$, mids$[mid_bytesUsed_781dd30a]));
        }

        JArray< jint > BytesRefHash$BytesStartArray::clear() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_clear_dab10e75]));
        }

        JArray< jint > BytesRefHash$BytesStartArray::grow() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_grow_dab10e75]));
        }

        JArray< jint > BytesRefHash$BytesStartArray::init() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_init_dab10e75]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefHash$BytesStartArray_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefHash$BytesStartArray_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BytesRefHash$BytesStartArray_init_(t_BytesRefHash$BytesStartArray *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BytesRefHash$BytesStartArray_bytesUsed(t_BytesRefHash$BytesStartArray *self);
        static PyObject *t_BytesRefHash$BytesStartArray_clear(t_BytesRefHash$BytesStartArray *self);
        static PyObject *t_BytesRefHash$BytesStartArray_grow(t_BytesRefHash$BytesStartArray *self);
        static PyObject *t_BytesRefHash$BytesStartArray_init(t_BytesRefHash$BytesStartArray *self);

        static PyMethodDef t_BytesRefHash$BytesStartArray__methods_[] = {
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, bytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, clear, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, grow, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, init, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BytesRefHash$BytesStartArray, t_BytesRefHash$BytesStartArray, ::java::lang::Object, BytesRefHash$BytesStartArray, t_BytesRefHash$BytesStartArray_init_, 0, 0, 0, 0, 0);

        void t_BytesRefHash$BytesStartArray::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefHash$BytesStartArray), module, "BytesRefHash$BytesStartArray", 0);
        }

        void t_BytesRefHash$BytesStartArray::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BytesRefHash$BytesStartArray).tp_dict, "class_", make_descriptor(BytesRefHash$BytesStartArray::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BytesRefHash$BytesStartArray).tp_dict, "wrapfn_", make_descriptor(t_BytesRefHash$BytesStartArray::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BytesRefHash$BytesStartArray).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BytesRefHash$BytesStartArray_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefHash$BytesStartArray::initializeClass, 1)))
            return NULL;
          return t_BytesRefHash$BytesStartArray::wrap_Object(BytesRefHash$BytesStartArray(((t_BytesRefHash$BytesStartArray *) arg)->object.this$));
        }
        static PyObject *t_BytesRefHash$BytesStartArray_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefHash$BytesStartArray::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BytesRefHash$BytesStartArray_init_(t_BytesRefHash$BytesStartArray *self, PyObject *args, PyObject *kwds)
        {
          BytesRefHash$BytesStartArray object((jobject) NULL);

          INT_CALL(object = BytesRefHash$BytesStartArray());
          self->object = object;

          return 0;
        }

        static PyObject *t_BytesRefHash$BytesStartArray_bytesUsed(t_BytesRefHash$BytesStartArray *self)
        {
          ::org::apache::lucene::util::Counter result((jobject) NULL);
          OBJ_CALL(result = self->object.bytesUsed());
          return ::org::apache::lucene::util::t_Counter::wrap_Object(result);
        }

        static PyObject *t_BytesRefHash$BytesStartArray_clear(t_BytesRefHash$BytesStartArray *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.clear());
          return result.wrap();
        }

        static PyObject *t_BytesRefHash$BytesStartArray_grow(t_BytesRefHash$BytesStartArray *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.grow());
          return result.wrap();
        }

        static PyObject *t_BytesRefHash$BytesStartArray_init(t_BytesRefHash$BytesStartArray *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.init());
          return result.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Lift.h"
#include "org/egothor/stemmer/Row.h"
#include "org/egothor/stemmer/Trie.h"
#include "java/lang/Class.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Lift::class$ = NULL;
      jmethodID *Lift::mids$ = NULL;
      bool Lift::live$ = false;

      jclass Lift::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Lift");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
          mids$[mid_liftUp_1357655d] = env->getMethodID(cls, "liftUp", "(Lorg/egothor/stemmer/Row;Ljava/util/List;)V");
          mids$[mid_optimize_c26c0475] = env->getMethodID(cls, "optimize", "(Lorg/egothor/stemmer/Trie;)Lorg/egothor/stemmer/Trie;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Lift::Lift(jboolean a0) : ::org::egothor::stemmer::Reduce(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

      void Lift::liftUp(const ::org::egothor::stemmer::Row & a0, const ::java::util::List & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_liftUp_1357655d], a0.this$, a1.this$);
      }

      ::org::egothor::stemmer::Trie Lift::optimize(const ::org::egothor::stemmer::Trie & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_optimize_c26c0475], a0.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Lift_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Lift_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Lift_init_(t_Lift *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Lift_liftUp(t_Lift *self, PyObject *args);
      static PyObject *t_Lift_optimize(t_Lift *self, PyObject *args);

      static PyMethodDef t_Lift__methods_[] = {
        DECLARE_METHOD(t_Lift, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Lift, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Lift, liftUp, METH_VARARGS),
        DECLARE_METHOD(t_Lift, optimize, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Lift, t_Lift, ::org::egothor::stemmer::Reduce, Lift, t_Lift_init_, 0, 0, 0, 0, 0);

      void t_Lift::install(PyObject *module)
      {
        installType(&PY_TYPE(Lift), module, "Lift", 0);
      }

      void t_Lift::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Lift).tp_dict, "class_", make_descriptor(Lift::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Lift).tp_dict, "wrapfn_", make_descriptor(t_Lift::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Lift).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Lift_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Lift::initializeClass, 1)))
          return NULL;
        return t_Lift::wrap_Object(Lift(((t_Lift *) arg)->object.this$));
      }
      static PyObject *t_Lift_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Lift::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Lift_init_(t_Lift *self, PyObject *args, PyObject *kwds)
      {
        jboolean a0;
        Lift object((jobject) NULL);

        if (!parseArgs(args, "Z", &a0))
        {
          INT_CALL(object = Lift(a0));
          self->object = object;
        }
        else
        {
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_Lift_liftUp(t_Lift *self, PyObject *args)
      {
        ::org::egothor::stemmer::Row a0((jobject) NULL);
        ::java::util::List a1((jobject) NULL);
        PyTypeObject **p1;

        if (!parseArgs(args, "kK", ::org::egothor::stemmer::Row::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
        {
          OBJ_CALL(self->object.liftUp(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "liftUp", args);
        return NULL;
      }

      static PyObject *t_Lift_optimize(t_Lift *self, PyObject *args)
      {
        ::org::egothor::stemmer::Trie a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArgs(args, "k", ::org::egothor::stemmer::Trie::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.optimize(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(Lift), (PyObject *) self, "optimize", args, 2);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts.h"
#include "java/lang/Number.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {

          ::java::lang::Class *SortedSetDocValuesFacetCounts::class$ = NULL;
          jmethodID *SortedSetDocValuesFacetCounts::mids$ = NULL;
          bool SortedSetDocValuesFacetCounts::live$ = false;

          jclass SortedSetDocValuesFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_2661b27e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState;Lorg/apache/lucene/facet/FacetsCollector;)V");
              mids$[mid_getAllDims_cdc2a528] = env->getMethodID(cls, "getAllDims", "(I)Ljava/util/List;");
              mids$[mid_getSpecificValue_8ecbcac9] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
              mids$[mid_getTopChildren_37e8c044] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedSetDocValuesFacetCounts::SortedSetDocValuesFacetCounts(const ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState & a0, const ::org::apache::lucene::facet::FacetsCollector & a1) : ::org::apache::lucene::facet::Facets(env->newObject(initializeClass, &mids$, mid_init$_2661b27e, a0.this$, a1.this$)) {}

          ::java::util::List SortedSetDocValuesFacetCounts::getAllDims(jint a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getAllDims_cdc2a528], a0));
          }

          ::java::lang::Number SortedSetDocValuesFacetCounts::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_8ecbcac9], a0.this$, a1.this$));
          }

          ::org::apache::lucene::facet::FacetResult SortedSetDocValuesFacetCounts::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
          {
            return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_37e8c044], a0, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {
          static PyObject *t_SortedSetDocValuesFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetDocValuesFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedSetDocValuesFacetCounts_init_(t_SortedSetDocValuesFacetCounts *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedSetDocValuesFacetCounts_getAllDims(t_SortedSetDocValuesFacetCounts *self, PyObject *args);
          static PyObject *t_SortedSetDocValuesFacetCounts_getSpecificValue(t_SortedSetDocValuesFacetCounts *self, PyObject *args);
          static PyObject *t_SortedSetDocValuesFacetCounts_getTopChildren(t_SortedSetDocValuesFacetCounts *self, PyObject *args);

          static PyMethodDef t_SortedSetDocValuesFacetCounts__methods_[] = {
            DECLARE_METHOD(t_SortedSetDocValuesFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetCounts, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetCounts, getAllDims, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetCounts, getSpecificValue, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetCounts, getTopChildren, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedSetDocValuesFacetCounts, t_SortedSetDocValuesFacetCounts, ::org::apache::lucene::facet::Facets, SortedSetDocValuesFacetCounts, t_SortedSetDocValuesFacetCounts_init_, 0, 0, 0, 0, 0);

          void t_SortedSetDocValuesFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedSetDocValuesFacetCounts), module, "SortedSetDocValuesFacetCounts", 0);
          }

          void t_SortedSetDocValuesFacetCounts::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesFacetCounts).tp_dict, "class_", make_descriptor(SortedSetDocValuesFacetCounts::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesFacetCounts).tp_dict, "wrapfn_", make_descriptor(t_SortedSetDocValuesFacetCounts::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesFacetCounts).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedSetDocValuesFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedSetDocValuesFacetCounts::initializeClass, 1)))
              return NULL;
            return t_SortedSetDocValuesFacetCounts::wrap_Object(SortedSetDocValuesFacetCounts(((t_SortedSetDocValuesFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_SortedSetDocValuesFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedSetDocValuesFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedSetDocValuesFacetCounts_init_(t_SortedSetDocValuesFacetCounts *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState a0((jobject) NULL);
            ::org::apache::lucene::facet::FacetsCollector a1((jobject) NULL);
            SortedSetDocValuesFacetCounts object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1))
            {
              INT_CALL(object = SortedSetDocValuesFacetCounts(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedSetDocValuesFacetCounts_getAllDims(t_SortedSetDocValuesFacetCounts *self, PyObject *args)
          {
            jint a0;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.getAllDims(a0));
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetResult));
            }

            return callSuper(&PY_TYPE(SortedSetDocValuesFacetCounts), (PyObject *) self, "getAllDims", args, 2);
          }

          static PyObject *t_SortedSetDocValuesFacetCounts_getSpecificValue(t_SortedSetDocValuesFacetCounts *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::java::lang::Number result((jobject) NULL);

            if (!parseArgs(args, "s[s", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
              return ::java::lang::t_Number::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SortedSetDocValuesFacetCounts), (PyObject *) self, "getSpecificValue", args, 2);
          }

          static PyObject *t_SortedSetDocValuesFacetCounts_getTopChildren(t_SortedSetDocValuesFacetCounts *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

            if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
              return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SortedSetDocValuesFacetCounts), (PyObject *) self, "getTopChildren", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$MemoryOrdinalMap.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {

            ::java::lang::Class *DirectoryTaxonomyWriter$MemoryOrdinalMap::class$ = NULL;
            jmethodID *DirectoryTaxonomyWriter$MemoryOrdinalMap::mids$ = NULL;
            bool DirectoryTaxonomyWriter$MemoryOrdinalMap::live$ = false;

            jclass DirectoryTaxonomyWriter$MemoryOrdinalMap::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$MemoryOrdinalMap");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_addDone_54c6a166] = env->getMethodID(cls, "addDone", "()V");
                mids$[mid_addMapping_d8d154a6] = env->getMethodID(cls, "addMapping", "(II)V");
                mids$[mid_getMap_dab10e75] = env->getMethodID(cls, "getMap", "()[I");
                mids$[mid_setSize_39c7bd3c] = env->getMethodID(cls, "setSize", "(I)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DirectoryTaxonomyWriter$MemoryOrdinalMap::DirectoryTaxonomyWriter$MemoryOrdinalMap() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            void DirectoryTaxonomyWriter$MemoryOrdinalMap::addDone() const
            {
              env->callVoidMethod(this$, mids$[mid_addDone_54c6a166]);
            }

            void DirectoryTaxonomyWriter$MemoryOrdinalMap::addMapping(jint a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addMapping_d8d154a6], a0, a1);
            }

            JArray< jint > DirectoryTaxonomyWriter$MemoryOrdinalMap::getMap() const
            {
              return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getMap_dab10e75]));
            }

            void DirectoryTaxonomyWriter$MemoryOrdinalMap::setSize(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setSize_39c7bd3c], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DirectoryTaxonomyWriter$MemoryOrdinalMap_init_(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_addDone(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_addMapping(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_getMap(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_setSize(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_get__map(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, void *data);
            static int t_DirectoryTaxonomyWriter$MemoryOrdinalMap_set__size(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *arg, void *data);
            static PyGetSetDef t_DirectoryTaxonomyWriter$MemoryOrdinalMap__fields_[] = {
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, map),
              DECLARE_SET_FIELD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, size),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DirectoryTaxonomyWriter$MemoryOrdinalMap__methods_[] = {
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, addDone, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, addMapping, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, getMap, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, setSize, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DirectoryTaxonomyWriter$MemoryOrdinalMap, t_DirectoryTaxonomyWriter$MemoryOrdinalMap, ::java::lang::Object, DirectoryTaxonomyWriter$MemoryOrdinalMap, t_DirectoryTaxonomyWriter$MemoryOrdinalMap_init_, 0, 0, t_DirectoryTaxonomyWriter$MemoryOrdinalMap__fields_, 0, 0);

            void t_DirectoryTaxonomyWriter$MemoryOrdinalMap::install(PyObject *module)
            {
              installType(&PY_TYPE(DirectoryTaxonomyWriter$MemoryOrdinalMap), module, "DirectoryTaxonomyWriter$MemoryOrdinalMap", 0);
            }

            void t_DirectoryTaxonomyWriter$MemoryOrdinalMap::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$MemoryOrdinalMap).tp_dict, "class_", make_descriptor(DirectoryTaxonomyWriter$MemoryOrdinalMap::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$MemoryOrdinalMap).tp_dict, "wrapfn_", make_descriptor(t_DirectoryTaxonomyWriter$MemoryOrdinalMap::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$MemoryOrdinalMap).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DirectoryTaxonomyWriter$MemoryOrdinalMap::initializeClass, 1)))
                return NULL;
              return t_DirectoryTaxonomyWriter$MemoryOrdinalMap::wrap_Object(DirectoryTaxonomyWriter$MemoryOrdinalMap(((t_DirectoryTaxonomyWriter$MemoryOrdinalMap *) arg)->object.this$));
            }
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DirectoryTaxonomyWriter$MemoryOrdinalMap::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DirectoryTaxonomyWriter$MemoryOrdinalMap_init_(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *args, PyObject *kwds)
            {
              DirectoryTaxonomyWriter$MemoryOrdinalMap object((jobject) NULL);

              INT_CALL(object = DirectoryTaxonomyWriter$MemoryOrdinalMap());
              self->object = object;

              return 0;
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_addDone(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self)
            {
              OBJ_CALL(self->object.addDone());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_addMapping(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *args)
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.addMapping(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addMapping", args);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_getMap(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self)
            {
              JArray< jint > result((jobject) NULL);
              OBJ_CALL(result = self->object.getMap());
              return result.wrap();
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_setSize(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setSize(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setSize", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_get__map(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, void *data)
            {
              JArray< jint > value((jobject) NULL);
              OBJ_CALL(value = self->object.getMap());
              return value.wrap();
            }

            static int t_DirectoryTaxonomyWriter$MemoryOrdinalMap_set__size(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setSize(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "size", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizer.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardTokenizerFactory::class$ = NULL;
          jmethodID *StandardTokenizerFactory::mids$ = NULL;
          bool StandardTokenizerFactory::live$ = false;

          jclass StandardTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_9cba40d3] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/standard/StandardTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StandardTokenizerFactory::StandardTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::standard::StandardTokenizer StandardTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::standard::StandardTokenizer(env->callObjectMethod(this$, mids$[mid_create_9cba40d3], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StandardTokenizerFactory_init_(t_StandardTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StandardTokenizerFactory_create(t_StandardTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_StandardTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_StandardTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StandardTokenizerFactory, t_StandardTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, StandardTokenizerFactory, t_StandardTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_StandardTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardTokenizerFactory), module, "StandardTokenizerFactory", 0);
          }

          void t_StandardTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StandardTokenizerFactory).tp_dict, "class_", make_descriptor(StandardTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_StandardTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StandardTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_StandardTokenizerFactory::wrap_Object(StandardTokenizerFactory(((t_StandardTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_StandardTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StandardTokenizerFactory_init_(t_StandardTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            StandardTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = StandardTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StandardTokenizerFactory_create(t_StandardTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::standard::StandardTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::standard::t_StandardTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StandardTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy$DocMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy$DocMap::class$ = NULL;
        jmethodID *MergePolicy$DocMap::mids$ = NULL;
        bool MergePolicy$DocMap::live$ = false;

        jclass MergePolicy$DocMap::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy$DocMap");

            mids$ = new jmethodID[max_mid];
            mids$[mid_map_39c7bd23] = env->getMethodID(cls, "map", "(I)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint MergePolicy$DocMap::map(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_map_39c7bd23], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy$DocMap_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$DocMap_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$DocMap_map(t_MergePolicy$DocMap *self, PyObject *arg);

        static PyMethodDef t_MergePolicy$DocMap__methods_[] = {
          DECLARE_METHOD(t_MergePolicy$DocMap, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$DocMap, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$DocMap, map, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergePolicy$DocMap, t_MergePolicy$DocMap, ::java::lang::Object, MergePolicy$DocMap, abstract_init, 0, 0, 0, 0, 0);

        void t_MergePolicy$DocMap::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy$DocMap), module, "MergePolicy$DocMap", 0);
        }

        void t_MergePolicy$DocMap::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergePolicy$DocMap).tp_dict, "class_", make_descriptor(MergePolicy$DocMap::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergePolicy$DocMap).tp_dict, "wrapfn_", make_descriptor(t_MergePolicy$DocMap::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergePolicy$DocMap).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy$DocMap_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy$DocMap::initializeClass, 1)))
            return NULL;
          return t_MergePolicy$DocMap::wrap_Object(MergePolicy$DocMap(((t_MergePolicy$DocMap *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy$DocMap_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy$DocMap::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergePolicy$DocMap_map(t_MergePolicy$DocMap *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.map(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "map", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SortedSetSortField.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/sandbox/queries/SortedSetSortField$Selector.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SortedSetSortField::class$ = NULL;
          jmethodID *SortedSetSortField::mids$ = NULL;
          bool SortedSetSortField::live$ = false;

          jclass SortedSetSortField::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SortedSetSortField");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f3691645] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Z)V");
              mids$[mid_init$_95ba0b53] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ZLorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getComparator_f38637f4] = env->getMethodID(cls, "getComparator", "(II)Lorg/apache/lucene/search/FieldComparator;");
              mids$[mid_getSelector_01e98d5f] = env->getMethodID(cls, "getSelector", "()Lorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setMissingValue_290588ee] = env->getMethodID(cls, "setMissingValue", "(Ljava/lang/Object;)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedSetSortField::SortedSetSortField(const ::java::lang::String & a0, jboolean a1) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_f3691645, a0.this$, a1)) {}

          SortedSetSortField::SortedSetSortField(const ::java::lang::String & a0, jboolean a1, const ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector & a2) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_95ba0b53, a0.this$, a1, a2.this$)) {}

          jboolean SortedSetSortField::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::search::FieldComparator SortedSetSortField::getComparator(jint a0, jint a1) const
          {
            return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_getComparator_f38637f4], a0, a1));
          }

          ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector SortedSetSortField::getSelector() const
          {
            return ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector(env->callObjectMethod(this$, mids$[mid_getSelector_01e98d5f]));
          }

          jint SortedSetSortField::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void SortedSetSortField::setMissingValue(const ::java::lang::Object & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMissingValue_290588ee], a0.this$);
          }

          ::java::lang::String SortedSetSortField::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SortedSetSortField_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetSortField_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedSetSortField_init_(t_SortedSetSortField *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedSetSortField_equals(t_SortedSetSortField *self, PyObject *args);
          static PyObject *t_SortedSetSortField_getComparator(t_SortedSetSortField *self, PyObject *args);
          static PyObject *t_SortedSetSortField_getSelector(t_SortedSetSortField *self);
          static PyObject *t_SortedSetSortField_hashCode(t_SortedSetSortField *self, PyObject *args);
          static PyObject *t_SortedSetSortField_setMissingValue(t_SortedSetSortField *self, PyObject *args);
          static PyObject *t_SortedSetSortField_toString(t_SortedSetSortField *self, PyObject *args);
          static int t_SortedSetSortField_set__missingValue(t_SortedSetSortField *self, PyObject *arg, void *data);
          static PyObject *t_SortedSetSortField_get__selector(t_SortedSetSortField *self, void *data);
          static PyGetSetDef t_SortedSetSortField__fields_[] = {
            DECLARE_SET_FIELD(t_SortedSetSortField, missingValue),
            DECLARE_GET_FIELD(t_SortedSetSortField, selector),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedSetSortField__methods_[] = {
            DECLARE_METHOD(t_SortedSetSortField, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetSortField, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetSortField, equals, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetSortField, getComparator, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetSortField, getSelector, METH_NOARGS),
            DECLARE_METHOD(t_SortedSetSortField, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetSortField, setMissingValue, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetSortField, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedSetSortField, t_SortedSetSortField, ::org::apache::lucene::search::SortField, SortedSetSortField, t_SortedSetSortField_init_, 0, 0, t_SortedSetSortField__fields_, 0, 0);

          void t_SortedSetSortField::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedSetSortField), module, "SortedSetSortField", 0);
            PyDict_SetItemString(PY_TYPE(SortedSetSortField).tp_dict, "Selector", make_descriptor(&PY_TYPE(SortedSetSortField$Selector)));
          }

          void t_SortedSetSortField::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedSetSortField).tp_dict, "class_", make_descriptor(SortedSetSortField::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedSetSortField).tp_dict, "wrapfn_", make_descriptor(t_SortedSetSortField::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedSetSortField).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedSetSortField_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedSetSortField::initializeClass, 1)))
              return NULL;
            return t_SortedSetSortField::wrap_Object(SortedSetSortField(((t_SortedSetSortField *) arg)->object.this$));
          }
          static PyObject *t_SortedSetSortField_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedSetSortField::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedSetSortField_init_(t_SortedSetSortField *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean a1;
                SortedSetSortField object((jobject) NULL);

                if (!parseArgs(args, "sZ", &a0, &a1))
                {
                  INT_CALL(object = SortedSetSortField(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean a1;
                ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector a2((jobject) NULL);
                PyTypeObject **p2;
                SortedSetSortField object((jobject) NULL);

                if (!parseArgs(args, "sZK", ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::sandbox::queries::t_SortedSetSortField$Selector::parameters_))
                {
                  INT_CALL(object = SortedSetSortField(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedSetSortField_equals(t_SortedSetSortField *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SortedSetSortField), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SortedSetSortField_getComparator(t_SortedSetSortField *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getComparator(a0, a1));
              return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SortedSetSortField), (PyObject *) self, "getComparator", args, 2);
          }

          static PyObject *t_SortedSetSortField_getSelector(t_SortedSetSortField *self)
          {
            ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector result((jobject) NULL);
            OBJ_CALL(result = self->object.getSelector());
            return ::org::apache::lucene::sandbox::queries::t_SortedSetSortField$Selector::wrap_Object(result);
          }

          static PyObject *t_SortedSetSortField_hashCode(t_SortedSetSortField *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SortedSetSortField), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SortedSetSortField_setMissingValue(t_SortedSetSortField *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(self->object.setMissingValue(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SortedSetSortField), (PyObject *) self, "setMissingValue", args, 2);
          }

          static PyObject *t_SortedSetSortField_toString(t_SortedSetSortField *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SortedSetSortField), (PyObject *) self, "toString", args, 2);
          }

          static int t_SortedSetSortField_set__missingValue(t_SortedSetSortField *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::Object value((jobject) NULL);
              if (!parseArg(arg, "o", &value))
              {
                INT_CALL(self->object.setMissingValue(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "missingValue", arg);
            return -1;
          }

          static PyObject *t_SortedSetSortField_get__selector(t_SortedSetSortField *self, void *data)
          {
            ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector value((jobject) NULL);
            OBJ_CALL(value = self->object.getSelector());
            return ::org::apache::lucene::sandbox::queries::t_SortedSetSortField$Selector::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *WordDelimiterFilterFactory::class$ = NULL;
          jmethodID *WordDelimiterFilterFactory::mids$ = NULL;
          bool WordDelimiterFilterFactory::live$ = false;
          ::java::lang::String *WordDelimiterFilterFactory::PROTECTED_TOKENS = NULL;
          ::java::lang::String *WordDelimiterFilterFactory::TYPES = NULL;

          jclass WordDelimiterFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2969f76d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PROTECTED_TOKENS = new ::java::lang::String(env->getStaticObjectField(cls, "PROTECTED_TOKENS", "Ljava/lang/String;"));
              TYPES = new ::java::lang::String(env->getStaticObjectField(cls, "TYPES", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WordDelimiterFilterFactory::WordDelimiterFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter WordDelimiterFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_2969f76d], a0.this$));
          }

          void WordDelimiterFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_WordDelimiterFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordDelimiterFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WordDelimiterFilterFactory_init_(t_WordDelimiterFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WordDelimiterFilterFactory_create(t_WordDelimiterFilterFactory *self, PyObject *args);
          static PyObject *t_WordDelimiterFilterFactory_inform(t_WordDelimiterFilterFactory *self, PyObject *arg);

          static PyMethodDef t_WordDelimiterFilterFactory__methods_[] = {
            DECLARE_METHOD(t_WordDelimiterFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_WordDelimiterFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WordDelimiterFilterFactory, t_WordDelimiterFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, WordDelimiterFilterFactory, t_WordDelimiterFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_WordDelimiterFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(WordDelimiterFilterFactory), module, "WordDelimiterFilterFactory", 0);
          }

          void t_WordDelimiterFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilterFactory).tp_dict, "class_", make_descriptor(WordDelimiterFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_WordDelimiterFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(WordDelimiterFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilterFactory).tp_dict, "PROTECTED_TOKENS", make_descriptor(j2p(*WordDelimiterFilterFactory::PROTECTED_TOKENS)));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilterFactory).tp_dict, "TYPES", make_descriptor(j2p(*WordDelimiterFilterFactory::TYPES)));
          }

          static PyObject *t_WordDelimiterFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordDelimiterFilterFactory::initializeClass, 1)))
              return NULL;
            return t_WordDelimiterFilterFactory::wrap_Object(WordDelimiterFilterFactory(((t_WordDelimiterFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_WordDelimiterFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordDelimiterFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WordDelimiterFilterFactory_init_(t_WordDelimiterFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            WordDelimiterFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = WordDelimiterFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WordDelimiterFilterFactory_create(t_WordDelimiterFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(WordDelimiterFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_WordDelimiterFilterFactory_inform(t_WordDelimiterFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparatorSource.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparatorSource::class$ = NULL;
        jmethodID *FieldComparatorSource::mids$ = NULL;
        bool FieldComparatorSource::live$ = false;

        jclass FieldComparatorSource::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparatorSource");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_newComparator_0c7e6c91] = env->getMethodID(cls, "newComparator", "(Ljava/lang/String;IIZ)Lorg/apache/lucene/search/FieldComparator;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparatorSource::FieldComparatorSource() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::FieldComparator FieldComparatorSource::newComparator(const ::java::lang::String & a0, jint a1, jint a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_newComparator_0c7e6c91], a0.this$, a1, a2, a3));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparatorSource_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparatorSource_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldComparatorSource_init_(t_FieldComparatorSource *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparatorSource_newComparator(t_FieldComparatorSource *self, PyObject *args);

        static PyMethodDef t_FieldComparatorSource__methods_[] = {
          DECLARE_METHOD(t_FieldComparatorSource, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparatorSource, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparatorSource, newComparator, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparatorSource, t_FieldComparatorSource, ::java::lang::Object, FieldComparatorSource, t_FieldComparatorSource_init_, 0, 0, 0, 0, 0);

        void t_FieldComparatorSource::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparatorSource), module, "FieldComparatorSource", 0);
        }

        void t_FieldComparatorSource::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparatorSource).tp_dict, "class_", make_descriptor(FieldComparatorSource::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparatorSource).tp_dict, "wrapfn_", make_descriptor(t_FieldComparatorSource::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparatorSource).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparatorSource_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparatorSource::initializeClass, 1)))
            return NULL;
          return t_FieldComparatorSource::wrap_Object(FieldComparatorSource(((t_FieldComparatorSource *) arg)->object.this$));
        }
        static PyObject *t_FieldComparatorSource_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparatorSource::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldComparatorSource_init_(t_FieldComparatorSource *self, PyObject *args, PyObject *kwds)
        {
          FieldComparatorSource object((jobject) NULL);

          INT_CALL(object = FieldComparatorSource());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldComparatorSource_newComparator(t_FieldComparatorSource *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint a2;
          jboolean a3;
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "sIIZ", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.newComparator(a0, a1, a2, a3));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "newComparator", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ConstValueSource.h"
#include "java/lang/Number.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ConstValueSource::class$ = NULL;
            jmethodID *ConstValueSource::mids$ = NULL;
            bool ConstValueSource::live$ = false;

            jclass ConstValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ConstValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getBool_54c6a16a] = env->getMethodID(cls, "getBool", "()Z");
                mids$[mid_getDouble_54c6a174] = env->getMethodID(cls, "getDouble", "()D");
                mids$[mid_getFloat_54c6a176] = env->getMethodID(cls, "getFloat", "()F");
                mids$[mid_getInt_54c6a179] = env->getMethodID(cls, "getInt", "()I");
                mids$[mid_getLong_54c6a17a] = env->getMethodID(cls, "getLong", "()J");
                mids$[mid_getNumber_ee47e3e1] = env->getMethodID(cls, "getNumber", "()Ljava/lang/Number;");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ConstValueSource::ConstValueSource(jfloat a0) : ::org::apache::lucene::queries::function::valuesource::ConstNumberSource(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

            ::java::lang::String ConstValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean ConstValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jboolean ConstValueSource::getBool() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getBool_54c6a16a]);
            }

            jdouble ConstValueSource::getDouble() const
            {
              return env->callDoubleMethod(this$, mids$[mid_getDouble_54c6a174]);
            }

            jfloat ConstValueSource::getFloat() const
            {
              return env->callFloatMethod(this$, mids$[mid_getFloat_54c6a176]);
            }

            jint ConstValueSource::getInt() const
            {
              return env->callIntMethod(this$, mids$[mid_getInt_54c6a179]);
            }

            jlong ConstValueSource::getLong() const
            {
              return env->callLongMethod(this$, mids$[mid_getLong_54c6a17a]);
            }

            ::java::lang::Number ConstValueSource::getNumber() const
            {
              return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getNumber_ee47e3e1]));
            }

            ::org::apache::lucene::queries::function::FunctionValues ConstValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint ConstValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ConstValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ConstValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ConstValueSource_init_(t_ConstValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ConstValueSource_description(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_equals(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getBool(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getDouble(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getFloat(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getInt(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getLong(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getNumber(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getValues(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_hashCode(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_get__bool(t_ConstValueSource *self, void *data);
            static PyObject *t_ConstValueSource_get__double(t_ConstValueSource *self, void *data);
            static PyObject *t_ConstValueSource_get__float(t_ConstValueSource *self, void *data);
            static PyObject *t_ConstValueSource_get__int(t_ConstValueSource *self, void *data);
            static PyObject *t_ConstValueSource_get__long(t_ConstValueSource *self, void *data);
            static PyObject *t_ConstValueSource_get__number(t_ConstValueSource *self, void *data);
            static PyGetSetDef t_ConstValueSource__fields_[] = {
              DECLARE_GET_FIELD(t_ConstValueSource, bool),
              DECLARE_GET_FIELD(t_ConstValueSource, double),
              DECLARE_GET_FIELD(t_ConstValueSource, float),
              DECLARE_GET_FIELD(t_ConstValueSource, int),
              DECLARE_GET_FIELD(t_ConstValueSource, long),
              DECLARE_GET_FIELD(t_ConstValueSource, number),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ConstValueSource__methods_[] = {
              DECLARE_METHOD(t_ConstValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ConstValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ConstValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getBool, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getDouble, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getFloat, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getInt, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getLong, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getNumber, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ConstValueSource, t_ConstValueSource, ::org::apache::lucene::queries::function::valuesource::ConstNumberSource, ConstValueSource, t_ConstValueSource_init_, 0, 0, t_ConstValueSource__fields_, 0, 0);

            void t_ConstValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(ConstValueSource), module, "ConstValueSource", 0);
            }

            void t_ConstValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ConstValueSource).tp_dict, "class_", make_descriptor(ConstValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ConstValueSource).tp_dict, "wrapfn_", make_descriptor(t_ConstValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ConstValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ConstValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ConstValueSource::initializeClass, 1)))
                return NULL;
              return t_ConstValueSource::wrap_Object(ConstValueSource(((t_ConstValueSource *) arg)->object.this$));
            }
            static PyObject *t_ConstValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ConstValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ConstValueSource_init_(t_ConstValueSource *self, PyObject *args, PyObject *kwds)
            {
              jfloat a0;
              ConstValueSource object((jobject) NULL);

              if (!parseArgs(args, "F", &a0))
              {
                INT_CALL(object = ConstValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ConstValueSource_description(t_ConstValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_ConstValueSource_equals(t_ConstValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_ConstValueSource_getBool(t_ConstValueSource *self, PyObject *args)
            {
              jboolean result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getBool());
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "getBool", args, 2);
            }

            static PyObject *t_ConstValueSource_getDouble(t_ConstValueSource *self, PyObject *args)
            {
              jdouble result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getDouble());
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "getDouble", args, 2);
            }

            static PyObject *t_ConstValueSource_getFloat(t_ConstValueSource *self, PyObject *args)
            {
              jfloat result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getFloat());
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "getFloat", args, 2);
            }

            static PyObject *t_ConstValueSource_getInt(t_ConstValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getInt());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "getInt", args, 2);
            }

            static PyObject *t_ConstValueSource_getLong(t_ConstValueSource *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getLong());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "getLong", args, 2);
            }

            static PyObject *t_ConstValueSource_getNumber(t_ConstValueSource *self, PyObject *args)
            {
              ::java::lang::Number result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getNumber());
                return ::java::lang::t_Number::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "getNumber", args, 2);
            }

            static PyObject *t_ConstValueSource_getValues(t_ConstValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_ConstValueSource_hashCode(t_ConstValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_ConstValueSource_get__bool(t_ConstValueSource *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getBool());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_ConstValueSource_get__double(t_ConstValueSource *self, void *data)
            {
              jdouble value;
              OBJ_CALL(value = self->object.getDouble());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_ConstValueSource_get__float(t_ConstValueSource *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getFloat());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_ConstValueSource_get__int(t_ConstValueSource *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getInt());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_ConstValueSource_get__long(t_ConstValueSource *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getLong());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }

            static PyObject *t_ConstValueSource_get__number(t_ConstValueSource *self, void *data)
            {
              ::java::lang::Number value((jobject) NULL);
              OBJ_CALL(value = self->object.getNumber());
              return ::java::lang::t_Number::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/es/SpanishAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {

          ::java::lang::Class *SpanishAnalyzer::class$ = NULL;
          jmethodID *SpanishAnalyzer::mids$ = NULL;
          bool SpanishAnalyzer::live$ = false;
          ::java::lang::String *SpanishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass SpanishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/es/SpanishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanishAnalyzer::SpanishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          SpanishAnalyzer::SpanishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          SpanishAnalyzer::SpanishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet SpanishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {
          static PyObject *t_SpanishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanishAnalyzer_init_(t_SpanishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_SpanishAnalyzer_get__defaultStopSet(t_SpanishAnalyzer *self, void *data);
          static PyGetSetDef t_SpanishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_SpanishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_SpanishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanishAnalyzer, t_SpanishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, SpanishAnalyzer, t_SpanishAnalyzer_init_, 0, 0, t_SpanishAnalyzer__fields_, 0, 0);

          void t_SpanishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanishAnalyzer), module, "SpanishAnalyzer", 0);
          }

          void t_SpanishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanishAnalyzer).tp_dict, "class_", make_descriptor(SpanishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_SpanishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SpanishAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(SpanishAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*SpanishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_SpanishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_SpanishAnalyzer::wrap_Object(SpanishAnalyzer(((t_SpanishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_SpanishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanishAnalyzer_init_(t_SpanishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                SpanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = SpanishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                SpanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SpanishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                SpanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SpanishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::es::SpanishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_SpanishAnalyzer_get__defaultStopSet(t_SpanishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiStemFilter::class$ = NULL;
          jmethodID *HindiStemFilter::mids$ = NULL;
          bool HindiStemFilter::live$ = false;

          jclass HindiStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiStemFilter::HindiStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean HindiStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiStemFilter_init_(t_HindiStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiStemFilter_incrementToken(t_HindiStemFilter *self, PyObject *args);

          static PyMethodDef t_HindiStemFilter__methods_[] = {
            DECLARE_METHOD(t_HindiStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HindiStemFilter, t_HindiStemFilter, ::org::apache::lucene::analysis::TokenFilter, HindiStemFilter, t_HindiStemFilter_init_, 0, 0, 0, 0, 0);

          void t_HindiStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiStemFilter), module, "HindiStemFilter", 0);
          }

          void t_HindiStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HindiStemFilter).tp_dict, "class_", make_descriptor(HindiStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HindiStemFilter).tp_dict, "wrapfn_", make_descriptor(t_HindiStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HindiStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HindiStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiStemFilter::initializeClass, 1)))
              return NULL;
            return t_HindiStemFilter::wrap_Object(HindiStemFilter(((t_HindiStemFilter *) arg)->object.this$));
          }
          static PyObject *t_HindiStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiStemFilter_init_(t_HindiStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            HindiStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = HindiStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HindiStemFilter_incrementToken(t_HindiStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(HindiStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/LetterTokenizer.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *LetterTokenizer::class$ = NULL;
          jmethodID *LetterTokenizer::mids$ = NULL;
          bool LetterTokenizer::live$ = false;

          jclass LetterTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/LetterTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LetterTokenizer::LetterTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          LetterTokenizer::LetterTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_LetterTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LetterTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LetterTokenizer_init_(t_LetterTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_LetterTokenizer__methods_[] = {
            DECLARE_METHOD(t_LetterTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LetterTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LetterTokenizer, t_LetterTokenizer, ::org::apache::lucene::analysis::util::CharTokenizer, LetterTokenizer, t_LetterTokenizer_init_, 0, 0, 0, 0, 0);

          void t_LetterTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(LetterTokenizer), module, "LetterTokenizer", 0);
          }

          void t_LetterTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LetterTokenizer).tp_dict, "class_", make_descriptor(LetterTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LetterTokenizer).tp_dict, "wrapfn_", make_descriptor(t_LetterTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LetterTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LetterTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LetterTokenizer::initializeClass, 1)))
              return NULL;
            return t_LetterTokenizer::wrap_Object(LetterTokenizer(((t_LetterTokenizer *) arg)->object.this$));
          }
          static PyObject *t_LetterTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LetterTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LetterTokenizer_init_(t_LetterTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                LetterTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = LetterTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                LetterTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = LetterTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/BasicOperations.h"
#include "org/apache/lucene/util/automaton/StatePair.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *BasicOperations::class$ = NULL;
          jmethodID *BasicOperations::mids$ = NULL;
          bool BasicOperations::live$ = false;

          jclass BasicOperations::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/BasicOperations");

              mids$ = new jmethodID[max_mid];
              mids$[mid_addEpsilons_c3f38587] = env->getStaticMethodID(cls, "addEpsilons", "(Lorg/apache/lucene/util/automaton/Automaton;Ljava/util/Collection;)V");
              mids$[mid_complement_7aca8e1f] = env->getStaticMethodID(cls, "complement", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_concatenate_3449867a] = env->getStaticMethodID(cls, "concatenate", "(Ljava/util/List;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_concatenate_fa852915] = env->getStaticMethodID(cls, "concatenate", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_determinize_fc7cf394] = env->getStaticMethodID(cls, "determinize", "(Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_intersection_fa852915] = env->getStaticMethodID(cls, "intersection", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_isEmpty_fc7cf398] = env->getStaticMethodID(cls, "isEmpty", "(Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_isEmptyString_fc7cf398] = env->getStaticMethodID(cls, "isEmptyString", "(Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_isTotal_fc7cf398] = env->getStaticMethodID(cls, "isTotal", "(Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_minus_fa852915] = env->getStaticMethodID(cls, "minus", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_optional_7aca8e1f] = env->getStaticMethodID(cls, "optional", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_repeat_7aca8e1f] = env->getStaticMethodID(cls, "repeat", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_repeat_df52766d] = env->getStaticMethodID(cls, "repeat", "(Lorg/apache/lucene/util/automaton/Automaton;I)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_repeat_6e1cfc6f] = env->getStaticMethodID(cls, "repeat", "(Lorg/apache/lucene/util/automaton/Automaton;II)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_run_b3a03722] = env->getStaticMethodID(cls, "run", "(Lorg/apache/lucene/util/automaton/Automaton;Ljava/lang/String;)Z");
              mids$[mid_sameLanguage_7d21690e] = env->getStaticMethodID(cls, "sameLanguage", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_subsetOf_7d21690e] = env->getStaticMethodID(cls, "subsetOf", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_union_40d33194] = env->getStaticMethodID(cls, "union", "(Ljava/util/Collection;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_union_fa852915] = env->getStaticMethodID(cls, "union", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void BasicOperations::addEpsilons(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::java::util::Collection & a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_addEpsilons_c3f38587], a0.this$, a1.this$);
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::complement(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_complement_7aca8e1f], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::concatenate(const ::java::util::List & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_concatenate_3449867a], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::concatenate(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_concatenate_fa852915], a0.this$, a1.this$));
          }

          void BasicOperations::determinize(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_determinize_fc7cf394], a0.this$);
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::intersection(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_intersection_fa852915], a0.this$, a1.this$));
          }

          jboolean BasicOperations::isEmpty(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_isEmpty_fc7cf398], a0.this$);
          }

          jboolean BasicOperations::isEmptyString(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_isEmptyString_fc7cf398], a0.this$);
          }

          jboolean BasicOperations::isTotal(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_isTotal_fc7cf398], a0.this$);
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::minus(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_minus_fa852915], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::optional(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_optional_7aca8e1f], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::repeat(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_repeat_7aca8e1f], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::repeat(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_repeat_df52766d], a0.this$, a1));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::repeat(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_repeat_6e1cfc6f], a0.this$, a1, a2));
          }

          jboolean BasicOperations::run(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::java::lang::String & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_run_b3a03722], a0.this$, a1.this$);
          }

          jboolean BasicOperations::sameLanguage(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_sameLanguage_7d21690e], a0.this$, a1.this$);
          }

          jboolean BasicOperations::subsetOf(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_subsetOf_7d21690e], a0.this$, a1.this$);
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::union$(const ::java::util::Collection & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_union_40d33194], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::union$(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_union_fa852915], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_BasicOperations_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicOperations_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicOperations_addEpsilons(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicOperations_complement(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicOperations_concatenate(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicOperations_determinize(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicOperations_intersection(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicOperations_isEmpty(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicOperations_isEmptyString(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicOperations_isTotal(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicOperations_minus(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicOperations_optional(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicOperations_repeat(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicOperations_run(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicOperations_sameLanguage(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicOperations_subsetOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicOperations_union(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_BasicOperations__methods_[] = {
            DECLARE_METHOD(t_BasicOperations, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, addEpsilons, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, complement, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, concatenate, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, determinize, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, intersection, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, isEmpty, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, isEmptyString, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, isTotal, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, minus, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, optional, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, repeat, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, run, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, sameLanguage, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, subsetOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, union, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicOperations, t_BasicOperations, ::java::lang::Object, BasicOperations, abstract_init, 0, 0, 0, 0, 0);

          void t_BasicOperations::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicOperations), module, "BasicOperations", 0);
          }

          void t_BasicOperations::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicOperations).tp_dict, "class_", make_descriptor(BasicOperations::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicOperations).tp_dict, "wrapfn_", make_descriptor(t_BasicOperations::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicOperations).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicOperations_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicOperations::initializeClass, 1)))
              return NULL;
            return t_BasicOperations::wrap_Object(BasicOperations(((t_BasicOperations *) arg)->object.this$));
          }
          static PyObject *t_BasicOperations_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicOperations::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BasicOperations_addEpsilons(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::java::util::Collection a1((jobject) NULL);
            PyTypeObject **p1;

            if (!parseArgs(args, "kK", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(::org::apache::lucene::util::automaton::BasicOperations::addEpsilons(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "addEpsilons", args);
            return NULL;
          }

          static PyObject *t_BasicOperations_complement(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::complement(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "complement", arg);
            return NULL;
          }

          static PyObject *t_BasicOperations_concatenate(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::concatenate(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::concatenate(a0, a1));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "concatenate", args);
            return NULL;
          }

          static PyObject *t_BasicOperations_determinize(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(::org::apache::lucene::util::automaton::BasicOperations::determinize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "determinize", arg);
            return NULL;
          }

          static PyObject *t_BasicOperations_intersection(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::intersection(a0, a1));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "intersection", args);
            return NULL;
          }

          static PyObject *t_BasicOperations_isEmpty(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::isEmpty(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "isEmpty", arg);
            return NULL;
          }

          static PyObject *t_BasicOperations_isEmptyString(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::isEmptyString(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "isEmptyString", arg);
            return NULL;
          }

          static PyObject *t_BasicOperations_isTotal(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::isTotal(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "isTotal", arg);
            return NULL;
          }

          static PyObject *t_BasicOperations_minus(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::minus(a0, a1));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "minus", args);
            return NULL;
          }

          static PyObject *t_BasicOperations_optional(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::optional(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "optional", arg);
            return NULL;
          }

          static PyObject *t_BasicOperations_repeat(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::repeat(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::repeat(a0, a1));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                jint a1;
                jint a2;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "kII", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::repeat(a0, a1, a2));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "repeat", args);
            return NULL;
          }

          static PyObject *t_BasicOperations_run(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "ks", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::run(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "run", args);
            return NULL;
          }

          static PyObject *t_BasicOperations_sameLanguage(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::sameLanguage(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "sameLanguage", args);
            return NULL;
          }

          static PyObject *t_BasicOperations_subsetOf(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::subsetOf(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "subsetOf", args);
            return NULL;
          }

          static PyObject *t_BasicOperations_union(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::util::Collection a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::union$(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::union$(a0, a1));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "union", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BooleanQuery$TooManyClauses.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BooleanQuery$TooManyClauses::class$ = NULL;
        jmethodID *BooleanQuery$TooManyClauses::mids$ = NULL;
        bool BooleanQuery$TooManyClauses::live$ = false;

        jclass BooleanQuery$TooManyClauses::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BooleanQuery$TooManyClauses");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BooleanQuery$TooManyClauses::BooleanQuery$TooManyClauses() : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BooleanQuery$TooManyClauses_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanQuery$TooManyClauses_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BooleanQuery$TooManyClauses_init_(t_BooleanQuery$TooManyClauses *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_BooleanQuery$TooManyClauses__methods_[] = {
          DECLARE_METHOD(t_BooleanQuery$TooManyClauses, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanQuery$TooManyClauses, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BooleanQuery$TooManyClauses, t_BooleanQuery$TooManyClauses, ::java::lang::RuntimeException, BooleanQuery$TooManyClauses, t_BooleanQuery$TooManyClauses_init_, 0, 0, 0, 0, 0);

        void t_BooleanQuery$TooManyClauses::install(PyObject *module)
        {
          installType(&PY_TYPE(BooleanQuery$TooManyClauses), module, "BooleanQuery$TooManyClauses", 0);
        }

        void t_BooleanQuery$TooManyClauses::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BooleanQuery$TooManyClauses).tp_dict, "class_", make_descriptor(BooleanQuery$TooManyClauses::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BooleanQuery$TooManyClauses).tp_dict, "wrapfn_", make_descriptor(t_BooleanQuery$TooManyClauses::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BooleanQuery$TooManyClauses).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BooleanQuery$TooManyClauses_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BooleanQuery$TooManyClauses::initializeClass, 1)))
            return NULL;
          return t_BooleanQuery$TooManyClauses::wrap_Object(BooleanQuery$TooManyClauses(((t_BooleanQuery$TooManyClauses *) arg)->object.this$));
        }
        static PyObject *t_BooleanQuery$TooManyClauses_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BooleanQuery$TooManyClauses::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BooleanQuery$TooManyClauses_init_(t_BooleanQuery$TooManyClauses *self, PyObject *args, PyObject *kwds)
        {
          BooleanQuery$TooManyClauses object((jobject) NULL);

          INT_CALL(object = BooleanQuery$TooManyClauses());
          self->object = object;

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager.h"
#include "java/io/PrintStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserConstants.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/CharStream.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/Token.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *StandardSyntaxParserTokenManager::class$ = NULL;
              jmethodID *StandardSyntaxParserTokenManager::mids$ = NULL;
              jfieldID *StandardSyntaxParserTokenManager::fids$ = NULL;
              bool StandardSyntaxParserTokenManager::live$ = false;
              JArray< jint > *StandardSyntaxParserTokenManager::jjnewLexState = NULL;
              JArray< ::java::lang::String > *StandardSyntaxParserTokenManager::jjstrLiteralImages = NULL;
              JArray< ::java::lang::String > *StandardSyntaxParserTokenManager::lexStateNames = NULL;

              jclass StandardSyntaxParserTokenManager::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_8af5fa89] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;)V");
                  mids$[mid_init$_954657e1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;I)V");
                  mids$[mid_ReInit_8af5fa89] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;)V");
                  mids$[mid_ReInit_954657e1] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;I)V");
                  mids$[mid_SwitchTo_39c7bd3c] = env->getMethodID(cls, "SwitchTo", "(I)V");
                  mids$[mid_getNextToken_5eb4cff8] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  mids$[mid_setDebugStream_1b7c898b] = env->getMethodID(cls, "setDebugStream", "(Ljava/io/PrintStream;)V");
                  mids$[mid_jjFillToken_5eb4cff8] = env->getMethodID(cls, "jjFillToken", "()Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");

                  fids$ = new jfieldID[max_fid];
                  fids$[fid_debugStream] = env->getFieldID(cls, "debugStream", "Ljava/io/PrintStream;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  jjnewLexState = new JArray< jint >(env->getStaticObjectField(cls, "jjnewLexState", "[I"));
                  jjstrLiteralImages = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "jjstrLiteralImages", "[Ljava/lang/String;"));
                  lexStateNames = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "lexStateNames", "[Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardSyntaxParserTokenManager::StandardSyntaxParserTokenManager(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8af5fa89, a0.this$)) {}

              StandardSyntaxParserTokenManager::StandardSyntaxParserTokenManager(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_954657e1, a0.this$, a1)) {}

              void StandardSyntaxParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_ReInit_8af5fa89], a0.this$);
              }

              void StandardSyntaxParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0, jint a1) const
              {
                env->callVoidMethod(this$, mids$[mid_ReInit_954657e1], a0.this$, a1);
              }

              void StandardSyntaxParserTokenManager::SwitchTo(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_SwitchTo_39c7bd3c], a0);
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token StandardSyntaxParserTokenManager::getNextToken() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_5eb4cff8]));
              }

              void StandardSyntaxParserTokenManager::setDebugStream(const ::java::io::PrintStream & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setDebugStream_1b7c898b], a0.this$);
              }

              ::java::io::PrintStream StandardSyntaxParserTokenManager::_get_debugStream() const
              {
                return ::java::io::PrintStream(env->getObjectField(this$, fids$[fid_debugStream]));
              }

              void StandardSyntaxParserTokenManager::_set_debugStream(const ::java::io::PrintStream & a0) const
              {
                env->setObjectField(this$, fids$[fid_debugStream], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_StandardSyntaxParserTokenManager_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardSyntaxParserTokenManager_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardSyntaxParserTokenManager_init_(t_StandardSyntaxParserTokenManager *self, PyObject *args, PyObject *kwds);
              static PyObject *t_StandardSyntaxParserTokenManager_ReInit(t_StandardSyntaxParserTokenManager *self, PyObject *args);
              static PyObject *t_StandardSyntaxParserTokenManager_SwitchTo(t_StandardSyntaxParserTokenManager *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParserTokenManager_getNextToken(t_StandardSyntaxParserTokenManager *self);
              static PyObject *t_StandardSyntaxParserTokenManager_setDebugStream(t_StandardSyntaxParserTokenManager *self, PyObject *arg);

              static int t_StandardSyntaxParserTokenManager_set__debugStream(t_StandardSyntaxParserTokenManager *self, PyObject *arg, void *data);
              static PyObject *t_StandardSyntaxParserTokenManager_get__nextToken(t_StandardSyntaxParserTokenManager *self, void *data);
              static PyGetSetDef t_StandardSyntaxParserTokenManager__fields_[] = {
                DECLARE_SET_FIELD(t_StandardSyntaxParserTokenManager, debugStream),
                DECLARE_GET_FIELD(t_StandardSyntaxParserTokenManager, nextToken),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_StandardSyntaxParserTokenManager__methods_[] = {
                DECLARE_METHOD(t_StandardSyntaxParserTokenManager, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardSyntaxParserTokenManager, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardSyntaxParserTokenManager, ReInit, METH_VARARGS),
                DECLARE_METHOD(t_StandardSyntaxParserTokenManager, SwitchTo, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParserTokenManager, getNextToken, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParserTokenManager, setDebugStream, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardSyntaxParserTokenManager, t_StandardSyntaxParserTokenManager, ::java::lang::Object, StandardSyntaxParserTokenManager, t_StandardSyntaxParserTokenManager_init_, 0, 0, t_StandardSyntaxParserTokenManager__fields_, 0, 0);

              void t_StandardSyntaxParserTokenManager::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardSyntaxParserTokenManager), module, "StandardSyntaxParserTokenManager", 0);
              }

              void t_StandardSyntaxParserTokenManager::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserTokenManager).tp_dict, "class_", make_descriptor(StandardSyntaxParserTokenManager::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserTokenManager).tp_dict, "wrapfn_", make_descriptor(t_StandardSyntaxParserTokenManager::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserTokenManager).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(StandardSyntaxParserTokenManager::initializeClass);
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserTokenManager).tp_dict, "jjnewLexState", make_descriptor(StandardSyntaxParserTokenManager::jjnewLexState->wrap()));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserTokenManager).tp_dict, "jjstrLiteralImages", make_descriptor(JArray<jstring>(StandardSyntaxParserTokenManager::jjstrLiteralImages->this$).wrap()));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserTokenManager).tp_dict, "lexStateNames", make_descriptor(JArray<jstring>(StandardSyntaxParserTokenManager::lexStateNames->this$).wrap()));
              }

              static PyObject *t_StandardSyntaxParserTokenManager_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardSyntaxParserTokenManager::initializeClass, 1)))
                  return NULL;
                return t_StandardSyntaxParserTokenManager::wrap_Object(StandardSyntaxParserTokenManager(((t_StandardSyntaxParserTokenManager *) arg)->object.this$));
              }
              static PyObject *t_StandardSyntaxParserTokenManager_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardSyntaxParserTokenManager::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardSyntaxParserTokenManager_init_(t_StandardSyntaxParserTokenManager *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);
                    StandardSyntaxParserTokenManager object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0))
                    {
                      INT_CALL(object = StandardSyntaxParserTokenManager(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 2:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);
                    jint a1;
                    StandardSyntaxParserTokenManager object((jobject) NULL);

                    if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0, &a1))
                    {
                      INT_CALL(object = StandardSyntaxParserTokenManager(a0, a1));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_StandardSyntaxParserTokenManager_ReInit(t_StandardSyntaxParserTokenManager *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0))
                    {
                      OBJ_CALL(self->object.ReInit(a0));
                      Py_RETURN_NONE;
                    }
                  }
                  break;
                 case 2:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);
                    jint a1;

                    if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0, &a1))
                    {
                      OBJ_CALL(self->object.ReInit(a0, a1));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "ReInit", args);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParserTokenManager_SwitchTo(t_StandardSyntaxParserTokenManager *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.SwitchTo(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "SwitchTo", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParserTokenManager_getNextToken(t_StandardSyntaxParserTokenManager *self)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token result((jobject) NULL);
                OBJ_CALL(result = self->object.getNextToken());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(result);
              }

              static PyObject *t_StandardSyntaxParserTokenManager_setDebugStream(t_StandardSyntaxParserTokenManager *self, PyObject *arg)
              {
                ::java::io::PrintStream a0((jobject) NULL);

                if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setDebugStream(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setDebugStream", arg);
                return NULL;
              }

              static int t_StandardSyntaxParserTokenManager_set__debugStream(t_StandardSyntaxParserTokenManager *self, PyObject *arg, void *data)
              {
                {
                  ::java::io::PrintStream value((jobject) NULL);
                  if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
                  {
                    INT_CALL(self->object.setDebugStream(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "debugStream", arg);
                return -1;
              }

              static PyObject *t_StandardSyntaxParserTokenManager_get__nextToken(t_StandardSyntaxParserTokenManager *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                OBJ_CALL(value = self->object.getNextToken());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/InPlaceMergeSorter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *InPlaceMergeSorter::class$ = NULL;
        jmethodID *InPlaceMergeSorter::mids$ = NULL;
        bool InPlaceMergeSorter::live$ = false;

        jclass InPlaceMergeSorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/InPlaceMergeSorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_sort_d8d154a6] = env->getMethodID(cls, "sort", "(II)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        InPlaceMergeSorter::InPlaceMergeSorter() : ::org::apache::lucene::util::Sorter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void InPlaceMergeSorter::sort(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_sort_d8d154a6], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_InPlaceMergeSorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_InPlaceMergeSorter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_InPlaceMergeSorter_init_(t_InPlaceMergeSorter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_InPlaceMergeSorter_sort(t_InPlaceMergeSorter *self, PyObject *args);

        static PyMethodDef t_InPlaceMergeSorter__methods_[] = {
          DECLARE_METHOD(t_InPlaceMergeSorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InPlaceMergeSorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InPlaceMergeSorter, sort, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(InPlaceMergeSorter, t_InPlaceMergeSorter, ::org::apache::lucene::util::Sorter, InPlaceMergeSorter, t_InPlaceMergeSorter_init_, 0, 0, 0, 0, 0);

        void t_InPlaceMergeSorter::install(PyObject *module)
        {
          installType(&PY_TYPE(InPlaceMergeSorter), module, "InPlaceMergeSorter", 0);
        }

        void t_InPlaceMergeSorter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(InPlaceMergeSorter).tp_dict, "class_", make_descriptor(InPlaceMergeSorter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(InPlaceMergeSorter).tp_dict, "wrapfn_", make_descriptor(t_InPlaceMergeSorter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(InPlaceMergeSorter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_InPlaceMergeSorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, InPlaceMergeSorter::initializeClass, 1)))
            return NULL;
          return t_InPlaceMergeSorter::wrap_Object(InPlaceMergeSorter(((t_InPlaceMergeSorter *) arg)->object.this$));
        }
        static PyObject *t_InPlaceMergeSorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, InPlaceMergeSorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_InPlaceMergeSorter_init_(t_InPlaceMergeSorter *self, PyObject *args, PyObject *kwds)
        {
          InPlaceMergeSorter object((jobject) NULL);

          INT_CALL(object = InPlaceMergeSorter());
          self->object = object;

          return 0;
        }

        static PyObject *t_InPlaceMergeSorter_sort(t_InPlaceMergeSorter *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.sort(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(InPlaceMergeSorter), (PyObject *) self, "sort", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanOrBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanOrBuilder::class$ = NULL;
            jmethodID *SpanOrBuilder::mids$ = NULL;
            bool SpanOrBuilder::live$ = false;

            jclass SpanOrBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanOrBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d9ca31a9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/builders/SpanQueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanOrBuilder::SpanOrBuilder(const ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder & a0) : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_d9ca31a9, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanOrBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanOrBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanOrBuilder_init_(t_SpanOrBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanOrBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanOrBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanOrBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanOrBuilder, t_SpanOrBuilder, ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase, SpanOrBuilder, t_SpanOrBuilder_init_, 0, 0, 0, 0, 0);

            void t_SpanOrBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanOrBuilder), module, "SpanOrBuilder", 0);
            }

            void t_SpanOrBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanOrBuilder).tp_dict, "class_", make_descriptor(SpanOrBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanOrBuilder).tp_dict, "wrapfn_", make_descriptor(t_SpanOrBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanOrBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanOrBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanOrBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanOrBuilder::wrap_Object(SpanOrBuilder(((t_SpanOrBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanOrBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanOrBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanOrBuilder_init_(t_SpanOrBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder a0((jobject) NULL);
              SpanOrBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = SpanOrBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardBooleanQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *StandardBooleanQueryNodeBuilder::class$ = NULL;
              jmethodID *StandardBooleanQueryNodeBuilder::mids$ = NULL;
              bool StandardBooleanQueryNodeBuilder::live$ = false;

              jclass StandardBooleanQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/StandardBooleanQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_e1a6cc4e] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/BooleanQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardBooleanQueryNodeBuilder::StandardBooleanQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::BooleanQuery StandardBooleanQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::BooleanQuery(env->callObjectMethod(this$, mids$[mid_build_e1a6cc4e], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_StandardBooleanQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardBooleanQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardBooleanQueryNodeBuilder_init_(t_StandardBooleanQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_StandardBooleanQueryNodeBuilder_build(t_StandardBooleanQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_StandardBooleanQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_StandardBooleanQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardBooleanQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardBooleanQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardBooleanQueryNodeBuilder, t_StandardBooleanQueryNodeBuilder, ::java::lang::Object, StandardBooleanQueryNodeBuilder, t_StandardBooleanQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_StandardBooleanQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardBooleanQueryNodeBuilder), module, "StandardBooleanQueryNodeBuilder", 0);
              }

              void t_StandardBooleanQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardBooleanQueryNodeBuilder).tp_dict, "class_", make_descriptor(StandardBooleanQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardBooleanQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_StandardBooleanQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardBooleanQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardBooleanQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardBooleanQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_StandardBooleanQueryNodeBuilder::wrap_Object(StandardBooleanQueryNodeBuilder(((t_StandardBooleanQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_StandardBooleanQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardBooleanQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardBooleanQueryNodeBuilder_init_(t_StandardBooleanQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                StandardBooleanQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = StandardBooleanQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_StandardBooleanQueryNodeBuilder_build(t_StandardBooleanQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::BooleanQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_BooleanQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/SimpleBoolFunction.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/queries/function/docvalues/BoolDocValues.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *SimpleBoolFunction::class$ = NULL;
            jmethodID *SimpleBoolFunction::mids$ = NULL;
            bool SimpleBoolFunction::live$ = false;

            jclass SimpleBoolFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/SimpleBoolFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_ea0ab6f1] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/docvalues/BoolDocValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_2223df3d] = env->getMethodID(cls, "func", "(ILorg/apache/lucene/queries/function/FunctionValues;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SimpleBoolFunction::SimpleBoolFunction(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::valuesource::BoolFunction(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            void SimpleBoolFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String SimpleBoolFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean SimpleBoolFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::docvalues::BoolDocValues SimpleBoolFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::docvalues::BoolDocValues(env->callObjectMethod(this$, mids$[mid_getValues_ea0ab6f1], a0.this$, a1.this$));
            }

            jint SimpleBoolFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_SimpleBoolFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SimpleBoolFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SimpleBoolFunction_init_(t_SimpleBoolFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SimpleBoolFunction_createWeight(t_SimpleBoolFunction *self, PyObject *args);
            static PyObject *t_SimpleBoolFunction_description(t_SimpleBoolFunction *self, PyObject *args);
            static PyObject *t_SimpleBoolFunction_equals(t_SimpleBoolFunction *self, PyObject *args);
            static PyObject *t_SimpleBoolFunction_getValues(t_SimpleBoolFunction *self, PyObject *args);
            static PyObject *t_SimpleBoolFunction_hashCode(t_SimpleBoolFunction *self, PyObject *args);

            static PyMethodDef t_SimpleBoolFunction__methods_[] = {
              DECLARE_METHOD(t_SimpleBoolFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleBoolFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleBoolFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_SimpleBoolFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_SimpleBoolFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_SimpleBoolFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_SimpleBoolFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SimpleBoolFunction, t_SimpleBoolFunction, ::org::apache::lucene::queries::function::valuesource::BoolFunction, SimpleBoolFunction, t_SimpleBoolFunction_init_, 0, 0, 0, 0, 0);

            void t_SimpleBoolFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(SimpleBoolFunction), module, "SimpleBoolFunction", 0);
            }

            void t_SimpleBoolFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SimpleBoolFunction).tp_dict, "class_", make_descriptor(SimpleBoolFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SimpleBoolFunction).tp_dict, "wrapfn_", make_descriptor(t_SimpleBoolFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SimpleBoolFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SimpleBoolFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SimpleBoolFunction::initializeClass, 1)))
                return NULL;
              return t_SimpleBoolFunction::wrap_Object(SimpleBoolFunction(((t_SimpleBoolFunction *) arg)->object.this$));
            }
            static PyObject *t_SimpleBoolFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SimpleBoolFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SimpleBoolFunction_init_(t_SimpleBoolFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              SimpleBoolFunction object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = SimpleBoolFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SimpleBoolFunction_createWeight(t_SimpleBoolFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SimpleBoolFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_SimpleBoolFunction_description(t_SimpleBoolFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SimpleBoolFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_SimpleBoolFunction_equals(t_SimpleBoolFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(SimpleBoolFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_SimpleBoolFunction_getValues(t_SimpleBoolFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::docvalues::BoolDocValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::docvalues::t_BoolDocValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(SimpleBoolFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_SimpleBoolFunction_hashCode(t_SimpleBoolFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(SimpleBoolFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/AbstractSet.h"
#include "java/lang/Object.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *AbstractSet::class$ = NULL;
    jmethodID *AbstractSet::mids$ = NULL;
    bool AbstractSet::live$ = false;

    jclass AbstractSet::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/AbstractSet");

        mids$ = new jmethodID[max_mid];
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_removeAll_9bfb3701] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jboolean AbstractSet::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jint AbstractSet::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jboolean AbstractSet::removeAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_removeAll_9bfb3701], a0.this$);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_AbstractSet_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractSet_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractSet_of_(t_AbstractSet *self, PyObject *args);
    static PyObject *t_AbstractSet_equals(t_AbstractSet *self, PyObject *args);
    static PyObject *t_AbstractSet_hashCode(t_AbstractSet *self, PyObject *args);
    static PyObject *t_AbstractSet_removeAll(t_AbstractSet *self, PyObject *args);
    static PyObject *t_AbstractSet_get__parameters_(t_AbstractSet *self, void *data);
    static PyGetSetDef t_AbstractSet__fields_[] = {
      DECLARE_GET_FIELD(t_AbstractSet, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_AbstractSet__methods_[] = {
      DECLARE_METHOD(t_AbstractSet, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractSet, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractSet, of_, METH_VARARGS),
      DECLARE_METHOD(t_AbstractSet, equals, METH_VARARGS),
      DECLARE_METHOD(t_AbstractSet, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_AbstractSet, removeAll, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(AbstractSet, t_AbstractSet, ::java::util::AbstractCollection, AbstractSet, abstract_init, 0, 0, t_AbstractSet__fields_, 0, 0);
    PyObject *t_AbstractSet::wrap_Object(const AbstractSet& object, PyTypeObject *p0)
    {
      PyObject *obj = t_AbstractSet::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractSet *self = (t_AbstractSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_AbstractSet::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_AbstractSet::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractSet *self = (t_AbstractSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_AbstractSet::install(PyObject *module)
    {
      installType(&PY_TYPE(AbstractSet), module, "AbstractSet", 0);
    }

    void t_AbstractSet::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(AbstractSet).tp_dict, "class_", make_descriptor(AbstractSet::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(AbstractSet).tp_dict, "wrapfn_", make_descriptor(t_AbstractSet::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(AbstractSet).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_AbstractSet_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, AbstractSet::initializeClass, 1)))
        return NULL;
      return t_AbstractSet::wrap_Object(AbstractSet(((t_AbstractSet *) arg)->object.this$));
    }
    static PyObject *t_AbstractSet_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, AbstractSet::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_AbstractSet_of_(t_AbstractSet *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_AbstractSet_equals(t_AbstractSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(AbstractSet), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_AbstractSet_hashCode(t_AbstractSet *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(AbstractSet), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_AbstractSet_removeAll(t_AbstractSet *self, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.removeAll(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(AbstractSet), (PyObject *) self, "removeAll", args, 2);
    }
    static PyObject *t_AbstractSet_get__parameters_(t_AbstractSet *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$bitwise_xor_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$bitwise_xor_return::class$ = NULL;
          jmethodID *JavascriptParser$bitwise_xor_return::mids$ = NULL;
          bool JavascriptParser$bitwise_xor_return::live$ = false;

          jclass JavascriptParser$bitwise_xor_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$bitwise_xor_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$bitwise_xor_return::JavascriptParser$bitwise_xor_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$bitwise_xor_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$bitwise_xor_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$bitwise_xor_return_init_(t_JavascriptParser$bitwise_xor_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$bitwise_xor_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$bitwise_xor_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$bitwise_xor_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$bitwise_xor_return, t_JavascriptParser$bitwise_xor_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$bitwise_xor_return, t_JavascriptParser$bitwise_xor_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$bitwise_xor_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$bitwise_xor_return), module, "JavascriptParser$bitwise_xor_return", 0);
          }

          void t_JavascriptParser$bitwise_xor_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_xor_return).tp_dict, "class_", make_descriptor(JavascriptParser$bitwise_xor_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_xor_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$bitwise_xor_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_xor_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$bitwise_xor_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$bitwise_xor_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$bitwise_xor_return::wrap_Object(JavascriptParser$bitwise_xor_return(((t_JavascriptParser$bitwise_xor_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$bitwise_xor_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$bitwise_xor_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$bitwise_xor_return_init_(t_JavascriptParser$bitwise_xor_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$bitwise_xor_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$bitwise_xor_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetCounts.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacetCounts::class$ = NULL;
          jmethodID *TaxonomyFacetCounts::mids$ = NULL;
          bool TaxonomyFacetCounts::live$ = false;

          jclass TaxonomyFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_50be664b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/OrdinalsReader;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyFacetCounts::TaxonomyFacetCounts(const ::org::apache::lucene::facet::taxonomy::OrdinalsReader & a0, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a1, const ::org::apache::lucene::facet::FacetsConfig & a2, const ::org::apache::lucene::facet::FacetsCollector & a3) : ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_50be664b, a0.this$, a1.this$, a2.this$, a3.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyFacetCounts_init_(t_TaxonomyFacetCounts *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_TaxonomyFacetCounts__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetCounts, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyFacetCounts, t_TaxonomyFacetCounts, ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets, TaxonomyFacetCounts, t_TaxonomyFacetCounts_init_, 0, 0, 0, 0, 0);

          void t_TaxonomyFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacetCounts), module, "TaxonomyFacetCounts", 0);
          }

          void t_TaxonomyFacetCounts::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetCounts).tp_dict, "class_", make_descriptor(TaxonomyFacetCounts::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetCounts).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyFacetCounts::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetCounts).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacetCounts::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacetCounts::wrap_Object(TaxonomyFacetCounts(((t_TaxonomyFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyFacetCounts_init_(t_TaxonomyFacetCounts *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader a0((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::TaxonomyReader a1((jobject) NULL);
            ::org::apache::lucene::facet::FacetsConfig a2((jobject) NULL);
            ::org::apache::lucene::facet::FacetsCollector a3((jobject) NULL);
            TaxonomyFacetCounts object((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::facet::taxonomy::OrdinalsReader::initializeClass, ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = TaxonomyFacetCounts(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/AllowLeadingWildcardProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *AllowLeadingWildcardProcessor::class$ = NULL;
              jmethodID *AllowLeadingWildcardProcessor::mids$ = NULL;
              bool AllowLeadingWildcardProcessor::live$ = false;

              jclass AllowLeadingWildcardProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/AllowLeadingWildcardProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              AllowLeadingWildcardProcessor::AllowLeadingWildcardProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode AllowLeadingWildcardProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_AllowLeadingWildcardProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AllowLeadingWildcardProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_AllowLeadingWildcardProcessor_init_(t_AllowLeadingWildcardProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_AllowLeadingWildcardProcessor_process(t_AllowLeadingWildcardProcessor *self, PyObject *args);

              static PyMethodDef t_AllowLeadingWildcardProcessor__methods_[] = {
                DECLARE_METHOD(t_AllowLeadingWildcardProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AllowLeadingWildcardProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AllowLeadingWildcardProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(AllowLeadingWildcardProcessor, t_AllowLeadingWildcardProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, AllowLeadingWildcardProcessor, t_AllowLeadingWildcardProcessor_init_, 0, 0, 0, 0, 0);

              void t_AllowLeadingWildcardProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(AllowLeadingWildcardProcessor), module, "AllowLeadingWildcardProcessor", 0);
              }

              void t_AllowLeadingWildcardProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(AllowLeadingWildcardProcessor).tp_dict, "class_", make_descriptor(AllowLeadingWildcardProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(AllowLeadingWildcardProcessor).tp_dict, "wrapfn_", make_descriptor(t_AllowLeadingWildcardProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(AllowLeadingWildcardProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AllowLeadingWildcardProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AllowLeadingWildcardProcessor::initializeClass, 1)))
                  return NULL;
                return t_AllowLeadingWildcardProcessor::wrap_Object(AllowLeadingWildcardProcessor(((t_AllowLeadingWildcardProcessor *) arg)->object.this$));
              }
              static PyObject *t_AllowLeadingWildcardProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AllowLeadingWildcardProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_AllowLeadingWildcardProcessor_init_(t_AllowLeadingWildcardProcessor *self, PyObject *args, PyObject *kwds)
              {
                AllowLeadingWildcardProcessor object((jobject) NULL);

                INT_CALL(object = AllowLeadingWildcardProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_AllowLeadingWildcardProcessor_process(t_AllowLeadingWildcardProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(AllowLeadingWildcardProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *BytesRefFSTEnum$InputOutput::class$ = NULL;
          jmethodID *BytesRefFSTEnum$InputOutput::mids$ = NULL;
          jfieldID *BytesRefFSTEnum$InputOutput::fids$ = NULL;
          bool BytesRefFSTEnum$InputOutput::live$ = false;

          jclass BytesRefFSTEnum$InputOutput::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_input] = env->getFieldID(cls, "input", "Lorg/apache/lucene/util/BytesRef;");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BytesRefFSTEnum$InputOutput::BytesRefFSTEnum$InputOutput() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::BytesRef BytesRefFSTEnum$InputOutput::_get_input() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_input]));
          }

          void BytesRefFSTEnum$InputOutput::_set_input(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            env->setObjectField(this$, fids$[fid_input], a0.this$);
          }

          ::java::lang::Object BytesRefFSTEnum$InputOutput::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }

          void BytesRefFSTEnum$InputOutput::_set_output(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_output], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_BytesRefFSTEnum$InputOutput_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum$InputOutput_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum$InputOutput_of_(t_BytesRefFSTEnum$InputOutput *self, PyObject *args);
          static int t_BytesRefFSTEnum$InputOutput_init_(t_BytesRefFSTEnum$InputOutput *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BytesRefFSTEnum$InputOutput_get__input(t_BytesRefFSTEnum$InputOutput *self, void *data);
          static int t_BytesRefFSTEnum$InputOutput_set__input(t_BytesRefFSTEnum$InputOutput *self, PyObject *arg, void *data);
          static PyObject *t_BytesRefFSTEnum$InputOutput_get__output(t_BytesRefFSTEnum$InputOutput *self, void *data);
          static int t_BytesRefFSTEnum$InputOutput_set__output(t_BytesRefFSTEnum$InputOutput *self, PyObject *arg, void *data);

          static PyObject *t_BytesRefFSTEnum$InputOutput_get__parameters_(t_BytesRefFSTEnum$InputOutput *self, void *data);
          static PyGetSetDef t_BytesRefFSTEnum$InputOutput__fields_[] = {
            DECLARE_GETSET_FIELD(t_BytesRefFSTEnum$InputOutput, input),
            DECLARE_GETSET_FIELD(t_BytesRefFSTEnum$InputOutput, output),
            DECLARE_GET_FIELD(t_BytesRefFSTEnum$InputOutput, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BytesRefFSTEnum$InputOutput__methods_[] = {
            DECLARE_METHOD(t_BytesRefFSTEnum$InputOutput, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BytesRefFSTEnum$InputOutput, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BytesRefFSTEnum$InputOutput, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BytesRefFSTEnum$InputOutput, t_BytesRefFSTEnum$InputOutput, ::java::lang::Object, BytesRefFSTEnum$InputOutput, t_BytesRefFSTEnum$InputOutput_init_, 0, 0, t_BytesRefFSTEnum$InputOutput__fields_, 0, 0);
          PyObject *t_BytesRefFSTEnum$InputOutput::wrap_Object(const BytesRefFSTEnum$InputOutput& object, PyTypeObject *p0)
          {
            PyObject *obj = t_BytesRefFSTEnum$InputOutput::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_BytesRefFSTEnum$InputOutput *self = (t_BytesRefFSTEnum$InputOutput *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_BytesRefFSTEnum$InputOutput::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_BytesRefFSTEnum$InputOutput::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_BytesRefFSTEnum$InputOutput *self = (t_BytesRefFSTEnum$InputOutput *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_BytesRefFSTEnum$InputOutput::install(PyObject *module)
          {
            installType(&PY_TYPE(BytesRefFSTEnum$InputOutput), module, "BytesRefFSTEnum$InputOutput", 0);
          }

          void t_BytesRefFSTEnum$InputOutput::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BytesRefFSTEnum$InputOutput).tp_dict, "class_", make_descriptor(BytesRefFSTEnum$InputOutput::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BytesRefFSTEnum$InputOutput).tp_dict, "wrapfn_", make_descriptor(t_BytesRefFSTEnum$InputOutput::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BytesRefFSTEnum$InputOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BytesRefFSTEnum$InputOutput_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BytesRefFSTEnum$InputOutput::initializeClass, 1)))
              return NULL;
            return t_BytesRefFSTEnum$InputOutput::wrap_Object(BytesRefFSTEnum$InputOutput(((t_BytesRefFSTEnum$InputOutput *) arg)->object.this$));
          }
          static PyObject *t_BytesRefFSTEnum$InputOutput_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BytesRefFSTEnum$InputOutput::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BytesRefFSTEnum$InputOutput_of_(t_BytesRefFSTEnum$InputOutput *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_BytesRefFSTEnum$InputOutput_init_(t_BytesRefFSTEnum$InputOutput *self, PyObject *args, PyObject *kwds)
          {
            BytesRefFSTEnum$InputOutput object((jobject) NULL);

            INT_CALL(object = BytesRefFSTEnum$InputOutput());
            self->object = object;

            return 0;
          }
          static PyObject *t_BytesRefFSTEnum$InputOutput_get__parameters_(t_BytesRefFSTEnum$InputOutput *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_BytesRefFSTEnum$InputOutput_get__input(t_BytesRefFSTEnum$InputOutput *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_input());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
          static int t_BytesRefFSTEnum$InputOutput_set__input(t_BytesRefFSTEnum$InputOutput *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object._set_input(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "input", arg);
            return -1;
          }

          static PyObject *t_BytesRefFSTEnum$InputOutput_get__output(t_BytesRefFSTEnum$InputOutput *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_BytesRefFSTEnum$InputOutput_set__output(t_BytesRefFSTEnum$InputOutput *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_output(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "output", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/HighFrequencyDictionary.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *HighFrequencyDictionary::class$ = NULL;
          jmethodID *HighFrequencyDictionary::mids$ = NULL;
          bool HighFrequencyDictionary::live$ = false;

          jclass HighFrequencyDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/HighFrequencyDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7d517188] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;F)V");
              mids$[mid_getEntryIterator_23dc46b1] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HighFrequencyDictionary::HighFrequencyDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, jfloat a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7d517188, a0.this$, a1.this$, a2)) {}

          ::org::apache::lucene::search::suggest::InputIterator HighFrequencyDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_23dc46b1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_HighFrequencyDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HighFrequencyDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HighFrequencyDictionary_init_(t_HighFrequencyDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HighFrequencyDictionary_getEntryIterator(t_HighFrequencyDictionary *self);
          static PyObject *t_HighFrequencyDictionary_get__entryIterator(t_HighFrequencyDictionary *self, void *data);
          static PyGetSetDef t_HighFrequencyDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_HighFrequencyDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_HighFrequencyDictionary__methods_[] = {
            DECLARE_METHOD(t_HighFrequencyDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HighFrequencyDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HighFrequencyDictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HighFrequencyDictionary, t_HighFrequencyDictionary, ::java::lang::Object, HighFrequencyDictionary, t_HighFrequencyDictionary_init_, 0, 0, t_HighFrequencyDictionary__fields_, 0, 0);

          void t_HighFrequencyDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(HighFrequencyDictionary), module, "HighFrequencyDictionary", 0);
          }

          void t_HighFrequencyDictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HighFrequencyDictionary).tp_dict, "class_", make_descriptor(HighFrequencyDictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HighFrequencyDictionary).tp_dict, "wrapfn_", make_descriptor(t_HighFrequencyDictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HighFrequencyDictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HighFrequencyDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HighFrequencyDictionary::initializeClass, 1)))
              return NULL;
            return t_HighFrequencyDictionary::wrap_Object(HighFrequencyDictionary(((t_HighFrequencyDictionary *) arg)->object.this$));
          }
          static PyObject *t_HighFrequencyDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HighFrequencyDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HighFrequencyDictionary_init_(t_HighFrequencyDictionary *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat a2;
            HighFrequencyDictionary object((jobject) NULL);

            if (!parseArgs(args, "ksF", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = HighFrequencyDictionary(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HighFrequencyDictionary_getEntryIterator(t_HighFrequencyDictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_HighFrequencyDictionary_get__entryIterator(t_HighFrequencyDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/path/PathHierarchyTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {

          ::java::lang::Class *PathHierarchyTokenizerFactory::class$ = NULL;
          jmethodID *PathHierarchyTokenizerFactory::mids$ = NULL;
          bool PathHierarchyTokenizerFactory::live$ = false;

          jclass PathHierarchyTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/path/PathHierarchyTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_e51780e9] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Tokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PathHierarchyTokenizerFactory::PathHierarchyTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::Tokenizer PathHierarchyTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_e51780e9], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {
          static PyObject *t_PathHierarchyTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PathHierarchyTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PathHierarchyTokenizerFactory_init_(t_PathHierarchyTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PathHierarchyTokenizerFactory_create(t_PathHierarchyTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_PathHierarchyTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_PathHierarchyTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PathHierarchyTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PathHierarchyTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PathHierarchyTokenizerFactory, t_PathHierarchyTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, PathHierarchyTokenizerFactory, t_PathHierarchyTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_PathHierarchyTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PathHierarchyTokenizerFactory), module, "PathHierarchyTokenizerFactory", 0);
          }

          void t_PathHierarchyTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizerFactory).tp_dict, "class_", make_descriptor(PathHierarchyTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_PathHierarchyTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PathHierarchyTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PathHierarchyTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_PathHierarchyTokenizerFactory::wrap_Object(PathHierarchyTokenizerFactory(((t_PathHierarchyTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_PathHierarchyTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PathHierarchyTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PathHierarchyTokenizerFactory_init_(t_PathHierarchyTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PathHierarchyTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PathHierarchyTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PathHierarchyTokenizerFactory_create(t_PathHierarchyTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PathHierarchyTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetsConfig$DimConfig.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetsConfig$DimConfig::class$ = NULL;
        jmethodID *FacetsConfig$DimConfig::mids$ = NULL;
        jfieldID *FacetsConfig$DimConfig::fids$ = NULL;
        bool FacetsConfig$DimConfig::live$ = false;

        jclass FacetsConfig$DimConfig::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetsConfig$DimConfig");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_hierarchical] = env->getFieldID(cls, "hierarchical", "Z");
            fids$[fid_indexFieldName] = env->getFieldID(cls, "indexFieldName", "Ljava/lang/String;");
            fids$[fid_multiValued] = env->getFieldID(cls, "multiValued", "Z");
            fids$[fid_requireDimCount] = env->getFieldID(cls, "requireDimCount", "Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetsConfig$DimConfig::FacetsConfig$DimConfig() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean FacetsConfig$DimConfig::_get_hierarchical() const
        {
          return env->getBooleanField(this$, fids$[fid_hierarchical]);
        }

        void FacetsConfig$DimConfig::_set_hierarchical(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_hierarchical], a0);
        }

        ::java::lang::String FacetsConfig$DimConfig::_get_indexFieldName() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_indexFieldName]));
        }

        void FacetsConfig$DimConfig::_set_indexFieldName(const ::java::lang::String & a0) const
        {
          env->setObjectField(this$, fids$[fid_indexFieldName], a0.this$);
        }

        jboolean FacetsConfig$DimConfig::_get_multiValued() const
        {
          return env->getBooleanField(this$, fids$[fid_multiValued]);
        }

        void FacetsConfig$DimConfig::_set_multiValued(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_multiValued], a0);
        }

        jboolean FacetsConfig$DimConfig::_get_requireDimCount() const
        {
          return env->getBooleanField(this$, fids$[fid_requireDimCount]);
        }

        void FacetsConfig$DimConfig::_set_requireDimCount(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_requireDimCount], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetsConfig$DimConfig_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetsConfig$DimConfig_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetsConfig$DimConfig_init_(t_FacetsConfig$DimConfig *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetsConfig$DimConfig_get__hierarchical(t_FacetsConfig$DimConfig *self, void *data);
        static int t_FacetsConfig$DimConfig_set__hierarchical(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data);
        static PyObject *t_FacetsConfig$DimConfig_get__indexFieldName(t_FacetsConfig$DimConfig *self, void *data);
        static int t_FacetsConfig$DimConfig_set__indexFieldName(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data);
        static PyObject *t_FacetsConfig$DimConfig_get__multiValued(t_FacetsConfig$DimConfig *self, void *data);
        static int t_FacetsConfig$DimConfig_set__multiValued(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data);
        static PyObject *t_FacetsConfig$DimConfig_get__requireDimCount(t_FacetsConfig$DimConfig *self, void *data);
        static int t_FacetsConfig$DimConfig_set__requireDimCount(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data);

        static PyGetSetDef t_FacetsConfig$DimConfig__fields_[] = {
          DECLARE_GETSET_FIELD(t_FacetsConfig$DimConfig, hierarchical),
          DECLARE_GETSET_FIELD(t_FacetsConfig$DimConfig, indexFieldName),
          DECLARE_GETSET_FIELD(t_FacetsConfig$DimConfig, multiValued),
          DECLARE_GETSET_FIELD(t_FacetsConfig$DimConfig, requireDimCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetsConfig$DimConfig__methods_[] = {
          DECLARE_METHOD(t_FacetsConfig$DimConfig, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsConfig$DimConfig, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FacetsConfig$DimConfig, t_FacetsConfig$DimConfig, ::java::lang::Object, FacetsConfig$DimConfig, t_FacetsConfig$DimConfig_init_, 0, 0, t_FacetsConfig$DimConfig__fields_, 0, 0);

        void t_FacetsConfig$DimConfig::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetsConfig$DimConfig), module, "FacetsConfig$DimConfig", 0);
        }

        void t_FacetsConfig$DimConfig::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FacetsConfig$DimConfig).tp_dict, "class_", make_descriptor(FacetsConfig$DimConfig::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FacetsConfig$DimConfig).tp_dict, "wrapfn_", make_descriptor(t_FacetsConfig$DimConfig::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FacetsConfig$DimConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FacetsConfig$DimConfig_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetsConfig$DimConfig::initializeClass, 1)))
            return NULL;
          return t_FacetsConfig$DimConfig::wrap_Object(FacetsConfig$DimConfig(((t_FacetsConfig$DimConfig *) arg)->object.this$));
        }
        static PyObject *t_FacetsConfig$DimConfig_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetsConfig$DimConfig::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetsConfig$DimConfig_init_(t_FacetsConfig$DimConfig *self, PyObject *args, PyObject *kwds)
        {
          FacetsConfig$DimConfig object((jobject) NULL);

          INT_CALL(object = FacetsConfig$DimConfig());
          self->object = object;

          return 0;
        }

        static PyObject *t_FacetsConfig$DimConfig_get__hierarchical(t_FacetsConfig$DimConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_hierarchical());
          Py_RETURN_BOOL(value);
        }
        static int t_FacetsConfig$DimConfig_set__hierarchical(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_hierarchical(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "hierarchical", arg);
          return -1;
        }

        static PyObject *t_FacetsConfig$DimConfig_get__indexFieldName(t_FacetsConfig$DimConfig *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_indexFieldName());
          return j2p(value);
        }
        static int t_FacetsConfig$DimConfig_set__indexFieldName(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          if (!parseArg(arg, "s", &value))
          {
            INT_CALL(self->object._set_indexFieldName(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "indexFieldName", arg);
          return -1;
        }

        static PyObject *t_FacetsConfig$DimConfig_get__multiValued(t_FacetsConfig$DimConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_multiValued());
          Py_RETURN_BOOL(value);
        }
        static int t_FacetsConfig$DimConfig_set__multiValued(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_multiValued(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "multiValued", arg);
          return -1;
        }

        static PyObject *t_FacetsConfig$DimConfig_get__requireDimCount(t_FacetsConfig$DimConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_requireDimCount());
          Py_RETURN_BOOL(value);
        }
        static int t_FacetsConfig$DimConfig_set__requireDimCount(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_requireDimCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "requireDimCount", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharTokenizer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharTokenizer::class$ = NULL;
          jmethodID *CharTokenizer::mids$ = NULL;
          bool CharTokenizer::live$ = false;

          jclass CharTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_normalize_39c7bd23] = env->getMethodID(cls, "normalize", "(I)I");
              mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharTokenizer::CharTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          CharTokenizer::CharTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}

          void CharTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean CharTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void CharTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CharTokenizer_init_(t_CharTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharTokenizer_end(t_CharTokenizer *self, PyObject *args);
          static PyObject *t_CharTokenizer_incrementToken(t_CharTokenizer *self, PyObject *args);
          static PyObject *t_CharTokenizer_reset(t_CharTokenizer *self, PyObject *args);

          static PyMethodDef t_CharTokenizer__methods_[] = {
            DECLARE_METHOD(t_CharTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_CharTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_CharTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharTokenizer, t_CharTokenizer, ::org::apache::lucene::analysis::Tokenizer, CharTokenizer, t_CharTokenizer_init_, 0, 0, 0, 0, 0);

          void t_CharTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(CharTokenizer), module, "CharTokenizer", 0);
          }

          void t_CharTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharTokenizer).tp_dict, "class_", make_descriptor(CharTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharTokenizer).tp_dict, "wrapfn_", make_descriptor(t_CharTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharTokenizer::initializeClass, 1)))
              return NULL;
            return t_CharTokenizer::wrap_Object(CharTokenizer(((t_CharTokenizer *) arg)->object.this$));
          }
          static PyObject *t_CharTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CharTokenizer_init_(t_CharTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                CharTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = CharTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                CharTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = CharTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CharTokenizer_end(t_CharTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_CharTokenizer_incrementToken(t_CharTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CharTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_CharTokenizer_reset(t_CharTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$Shorts.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$Shorts::class$ = NULL;
        jmethodID *FieldCache$Shorts::mids$ = NULL;
        bool FieldCache$Shorts::live$ = false;
        FieldCache$Shorts *FieldCache$Shorts::EMPTY = NULL;

        jclass FieldCache$Shorts::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$Shorts");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_39c7bd39] = env->getMethodID(cls, "get", "(I)S");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new FieldCache$Shorts(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/FieldCache$Shorts;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$Shorts::FieldCache$Shorts() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jshort FieldCache$Shorts::get(jint a0) const
        {
          return env->callShortMethod(this$, mids$[mid_get_39c7bd39], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$Shorts_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Shorts_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$Shorts_init_(t_FieldCache$Shorts *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$Shorts_get(t_FieldCache$Shorts *self, PyObject *arg);

        static PyMethodDef t_FieldCache$Shorts__methods_[] = {
          DECLARE_METHOD(t_FieldCache$Shorts, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Shorts, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Shorts, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$Shorts, t_FieldCache$Shorts, ::java::lang::Object, FieldCache$Shorts, t_FieldCache$Shorts_init_, 0, 0, 0, 0, 0);

        void t_FieldCache$Shorts::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$Shorts), module, "FieldCache$Shorts", 0);
        }

        void t_FieldCache$Shorts::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$Shorts).tp_dict, "class_", make_descriptor(FieldCache$Shorts::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$Shorts).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$Shorts::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$Shorts).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCache$Shorts::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCache$Shorts).tp_dict, "EMPTY", make_descriptor(t_FieldCache$Shorts::wrap_Object(*FieldCache$Shorts::EMPTY)));
        }

        static PyObject *t_FieldCache$Shorts_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$Shorts::initializeClass, 1)))
            return NULL;
          return t_FieldCache$Shorts::wrap_Object(FieldCache$Shorts(((t_FieldCache$Shorts *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$Shorts_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$Shorts::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$Shorts_init_(t_FieldCache$Shorts *self, PyObject *args, PyObject *kwds)
        {
          FieldCache$Shorts object((jobject) NULL);

          INT_CALL(object = FieldCache$Shorts());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCache$Shorts_get(t_FieldCache$Shorts *self, PyObject *arg)
        {
          jint a0;
          jshort result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/snowball/SnowballAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace snowball {

          ::java::lang::Class *SnowballAnalyzer::class$ = NULL;
          jmethodID *SnowballAnalyzer::mids$ = NULL;
          bool SnowballAnalyzer::live$ = false;

          jclass SnowballAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/snowball/SnowballAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1d68b8f5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;)V");
              mids$[mid_init$_df6e5eaa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SnowballAnalyzer::SnowballAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_1d68b8f5, a0.this$, a1.this$)) {}

          SnowballAnalyzer::SnowballAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_df6e5eaa, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents SnowballAnalyzer::createComponents(const ::java::lang::String & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_createComponents_1be39cae], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace snowball {
          static PyObject *t_SnowballAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SnowballAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SnowballAnalyzer_init_(t_SnowballAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SnowballAnalyzer_createComponents(t_SnowballAnalyzer *self, PyObject *args);

          static PyMethodDef t_SnowballAnalyzer__methods_[] = {
            DECLARE_METHOD(t_SnowballAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SnowballAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SnowballAnalyzer, createComponents, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SnowballAnalyzer, t_SnowballAnalyzer, ::org::apache::lucene::analysis::Analyzer, SnowballAnalyzer, t_SnowballAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_SnowballAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(SnowballAnalyzer), module, "SnowballAnalyzer", 0);
          }

          void t_SnowballAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SnowballAnalyzer).tp_dict, "class_", make_descriptor(SnowballAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SnowballAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_SnowballAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SnowballAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SnowballAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SnowballAnalyzer::initializeClass, 1)))
              return NULL;
            return t_SnowballAnalyzer::wrap_Object(SnowballAnalyzer(((t_SnowballAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_SnowballAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SnowballAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SnowballAnalyzer_init_(t_SnowballAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                SnowballAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "Ks", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = SnowballAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                SnowballAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KsK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SnowballAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SnowballAnalyzer_createComponents(t_SnowballAnalyzer *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

            if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.createComponents(a0, a1));
              return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "createComponents", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiReader.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiReader::class$ = NULL;
        jmethodID *MultiReader::mids$ = NULL;
        bool MultiReader::live$ = false;

        jclass MultiReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a20f8ee9] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/IndexReader;)V");
            mids$[mid_init$_44fb5002] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/IndexReader;Z)V");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiReader::MultiReader(const JArray< ::org::apache::lucene::index::IndexReader > & a0) : ::org::apache::lucene::index::BaseCompositeReader(env->newObject(initializeClass, &mids$, mid_init$_a20f8ee9, a0.this$)) {}

        MultiReader::MultiReader(const JArray< ::org::apache::lucene::index::IndexReader > & a0, jboolean a1) : ::org::apache::lucene::index::BaseCompositeReader(env->newObject(initializeClass, &mids$, mid_init$_44fb5002, a0.this$, a1)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiReader_of_(t_MultiReader *self, PyObject *args);
        static int t_MultiReader_init_(t_MultiReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiReader_get__parameters_(t_MultiReader *self, void *data);
        static PyGetSetDef t_MultiReader__fields_[] = {
          DECLARE_GET_FIELD(t_MultiReader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiReader__methods_[] = {
          DECLARE_METHOD(t_MultiReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiReader, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiReader, t_MultiReader, ::org::apache::lucene::index::BaseCompositeReader, MultiReader, t_MultiReader_init_, 0, 0, t_MultiReader__fields_, 0, 0);
        PyObject *t_MultiReader::wrap_Object(const MultiReader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiReader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiReader *self = (t_MultiReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MultiReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiReader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiReader *self = (t_MultiReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MultiReader::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiReader), module, "MultiReader", 0);
        }

        void t_MultiReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiReader).tp_dict, "class_", make_descriptor(MultiReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiReader).tp_dict, "wrapfn_", make_descriptor(t_MultiReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiReader::initializeClass, 1)))
            return NULL;
          return t_MultiReader::wrap_Object(MultiReader(((t_MultiReader *) arg)->object.this$));
        }
        static PyObject *t_MultiReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiReader_of_(t_MultiReader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MultiReader_init_(t_MultiReader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::IndexReader > a0((jobject) NULL);
              MultiReader object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
              {
                INT_CALL(object = MultiReader(a0));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(IndexReader);
                break;
              }
            }
            goto err;
           case 2:
            {
              JArray< ::org::apache::lucene::index::IndexReader > a0((jobject) NULL);
              jboolean a1;
              MultiReader object((jobject) NULL);

              if (!parseArgs(args, "[kZ", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
              {
                INT_CALL(object = MultiReader(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(IndexReader);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_MultiReader_get__parameters_(t_MultiReader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$unary_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$unary_return::class$ = NULL;
          jmethodID *JavascriptParser$unary_return::mids$ = NULL;
          bool JavascriptParser$unary_return::live$ = false;

          jclass JavascriptParser$unary_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$unary_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$unary_return::JavascriptParser$unary_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$unary_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$unary_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$unary_return_init_(t_JavascriptParser$unary_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$unary_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$unary_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$unary_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$unary_return, t_JavascriptParser$unary_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$unary_return, t_JavascriptParser$unary_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$unary_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$unary_return), module, "JavascriptParser$unary_return", 0);
          }

          void t_JavascriptParser$unary_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$unary_return).tp_dict, "class_", make_descriptor(JavascriptParser$unary_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$unary_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$unary_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$unary_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$unary_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$unary_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$unary_return::wrap_Object(JavascriptParser$unary_return(((t_JavascriptParser$unary_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$unary_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$unary_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$unary_return_init_(t_JavascriptParser$unary_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$unary_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$unary_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/WeightedFieldFragList.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *WeightedFieldFragList::class$ = NULL;
          jmethodID *WeightedFieldFragList::mids$ = NULL;
          bool WeightedFieldFragList::live$ = false;

          jclass WeightedFieldFragList::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/WeightedFieldFragList");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_add_21fbeb2b] = env->getMethodID(cls, "add", "(IILjava/util/List;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WeightedFieldFragList::WeightedFieldFragList(jint a0) : ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          void WeightedFieldFragList::add(jint a0, jint a1, const ::java::util::List & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_add_21fbeb2b], a0, a1, a2.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_WeightedFieldFragList_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WeightedFieldFragList_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WeightedFieldFragList_init_(t_WeightedFieldFragList *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WeightedFieldFragList_add(t_WeightedFieldFragList *self, PyObject *args);

          static PyMethodDef t_WeightedFieldFragList__methods_[] = {
            DECLARE_METHOD(t_WeightedFieldFragList, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedFieldFragList, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedFieldFragList, add, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WeightedFieldFragList, t_WeightedFieldFragList, ::org::apache::lucene::search::vectorhighlight::FieldFragList, WeightedFieldFragList, t_WeightedFieldFragList_init_, 0, 0, 0, 0, 0);

          void t_WeightedFieldFragList::install(PyObject *module)
          {
            installType(&PY_TYPE(WeightedFieldFragList), module, "WeightedFieldFragList", 0);
          }

          void t_WeightedFieldFragList::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WeightedFieldFragList).tp_dict, "class_", make_descriptor(WeightedFieldFragList::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WeightedFieldFragList).tp_dict, "wrapfn_", make_descriptor(t_WeightedFieldFragList::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WeightedFieldFragList).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WeightedFieldFragList_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WeightedFieldFragList::initializeClass, 1)))
              return NULL;
            return t_WeightedFieldFragList::wrap_Object(WeightedFieldFragList(((t_WeightedFieldFragList *) arg)->object.this$));
          }
          static PyObject *t_WeightedFieldFragList_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WeightedFieldFragList::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WeightedFieldFragList_init_(t_WeightedFieldFragList *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            WeightedFieldFragList object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = WeightedFieldFragList(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WeightedFieldFragList_add(t_WeightedFieldFragList *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::util::List a2((jobject) NULL);
            PyTypeObject **p2;

            if (!parseArgs(args, "IIK", ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(self->object.add(a0, a1, a2));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(WeightedFieldFragList), (PyObject *) self, "add", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/PayloadEncoder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *PayloadEncoder::class$ = NULL;
          jmethodID *PayloadEncoder::mids$ = NULL;
          bool PayloadEncoder::live$ = false;

          jclass PayloadEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/PayloadEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_encode_09e96eed] = env->getMethodID(cls, "encode", "([C)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_encode_871544e1] = env->getMethodID(cls, "encode", "([CII)Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::BytesRef PayloadEncoder::encode(const JArray< jchar > & a0) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_09e96eed], a0.this$));
          }

          ::org::apache::lucene::util::BytesRef PayloadEncoder::encode(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_871544e1], a0.this$, a1, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_PayloadEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadEncoder_encode(t_PayloadEncoder *self, PyObject *args);

          static PyMethodDef t_PayloadEncoder__methods_[] = {
            DECLARE_METHOD(t_PayloadEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadEncoder, encode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadEncoder, t_PayloadEncoder, ::java::lang::Object, PayloadEncoder, abstract_init, 0, 0, 0, 0, 0);

          void t_PayloadEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadEncoder), module, "PayloadEncoder", 0);
          }

          void t_PayloadEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadEncoder).tp_dict, "class_", make_descriptor(PayloadEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadEncoder).tp_dict, "wrapfn_", make_descriptor(t_PayloadEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadEncoder::initializeClass, 1)))
              return NULL;
            return t_PayloadEncoder::wrap_Object(PayloadEncoder(((t_PayloadEncoder *) arg)->object.this$));
          }
          static PyObject *t_PayloadEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PayloadEncoder_encode(t_PayloadEncoder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< jchar > a0((jobject) NULL);
                ::org::apache::lucene::util::BytesRef result((jobject) NULL);

                if (!parseArgs(args, "[C", &a0))
                {
                  OBJ_CALL(result = self->object.encode(a0));
                  return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                ::org::apache::lucene::util::BytesRef result((jobject) NULL);

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.encode(a0, a1, a2));
                  return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "encode", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SearcherLifetimeManager.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/SearcherLifetimeManager$Pruner.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SearcherLifetimeManager::class$ = NULL;
        jmethodID *SearcherLifetimeManager::mids$ = NULL;
        bool SearcherLifetimeManager::live$ = false;

        jclass SearcherLifetimeManager::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SearcherLifetimeManager");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_acquire_fc8f2eae] = env->getMethodID(cls, "acquire", "(J)Lorg/apache/lucene/search/IndexSearcher;");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_prune_da315acb] = env->getMethodID(cls, "prune", "(Lorg/apache/lucene/search/SearcherLifetimeManager$Pruner;)V");
            mids$[mid_record_474fe500] = env->getMethodID(cls, "record", "(Lorg/apache/lucene/search/IndexSearcher;)J");
            mids$[mid_release_474fe51c] = env->getMethodID(cls, "release", "(Lorg/apache/lucene/search/IndexSearcher;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SearcherLifetimeManager::SearcherLifetimeManager() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::IndexSearcher SearcherLifetimeManager::acquire(jlong a0) const
        {
          return ::org::apache::lucene::search::IndexSearcher(env->callObjectMethod(this$, mids$[mid_acquire_fc8f2eae], a0));
        }

        void SearcherLifetimeManager::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void SearcherLifetimeManager::prune(const ::org::apache::lucene::search::SearcherLifetimeManager$Pruner & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_prune_da315acb], a0.this$);
        }

        jlong SearcherLifetimeManager::record(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_record_474fe500], a0.this$);
        }

        void SearcherLifetimeManager::release(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_release_474fe51c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/SearcherLifetimeManager$PruneByAge.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SearcherLifetimeManager_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SearcherLifetimeManager_init_(t_SearcherLifetimeManager *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SearcherLifetimeManager_acquire(t_SearcherLifetimeManager *self, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager_close(t_SearcherLifetimeManager *self);
        static PyObject *t_SearcherLifetimeManager_prune(t_SearcherLifetimeManager *self, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager_record(t_SearcherLifetimeManager *self, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager_release(t_SearcherLifetimeManager *self, PyObject *arg);

        static PyMethodDef t_SearcherLifetimeManager__methods_[] = {
          DECLARE_METHOD(t_SearcherLifetimeManager, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager, acquire, METH_O),
          DECLARE_METHOD(t_SearcherLifetimeManager, close, METH_NOARGS),
          DECLARE_METHOD(t_SearcherLifetimeManager, prune, METH_O),
          DECLARE_METHOD(t_SearcherLifetimeManager, record, METH_O),
          DECLARE_METHOD(t_SearcherLifetimeManager, release, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SearcherLifetimeManager, t_SearcherLifetimeManager, ::java::lang::Object, SearcherLifetimeManager, t_SearcherLifetimeManager_init_, 0, 0, 0, 0, 0);

        void t_SearcherLifetimeManager::install(PyObject *module)
        {
          installType(&PY_TYPE(SearcherLifetimeManager), module, "SearcherLifetimeManager", 0);
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager).tp_dict, "PruneByAge", make_descriptor(&PY_TYPE(SearcherLifetimeManager$PruneByAge)));
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager).tp_dict, "Pruner", make_descriptor(&PY_TYPE(SearcherLifetimeManager$Pruner)));
        }

        void t_SearcherLifetimeManager::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager).tp_dict, "class_", make_descriptor(SearcherLifetimeManager::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager).tp_dict, "wrapfn_", make_descriptor(t_SearcherLifetimeManager::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SearcherLifetimeManager_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SearcherLifetimeManager::initializeClass, 1)))
            return NULL;
          return t_SearcherLifetimeManager::wrap_Object(SearcherLifetimeManager(((t_SearcherLifetimeManager *) arg)->object.this$));
        }
        static PyObject *t_SearcherLifetimeManager_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SearcherLifetimeManager::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SearcherLifetimeManager_init_(t_SearcherLifetimeManager *self, PyObject *args, PyObject *kwds)
        {
          SearcherLifetimeManager object((jobject) NULL);

          INT_CALL(object = SearcherLifetimeManager());
          self->object = object;

          return 0;
        }

        static PyObject *t_SearcherLifetimeManager_acquire(t_SearcherLifetimeManager *self, PyObject *arg)
        {
          jlong a0;
          ::org::apache::lucene::search::IndexSearcher result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.acquire(a0));
            return ::org::apache::lucene::search::t_IndexSearcher::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "acquire", arg);
          return NULL;
        }

        static PyObject *t_SearcherLifetimeManager_close(t_SearcherLifetimeManager *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_SearcherLifetimeManager_prune(t_SearcherLifetimeManager *self, PyObject *arg)
        {
          ::org::apache::lucene::search::SearcherLifetimeManager$Pruner a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::SearcherLifetimeManager$Pruner::initializeClass, &a0))
          {
            OBJ_CALL(self->object.prune(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "prune", arg);
          return NULL;
        }

        static PyObject *t_SearcherLifetimeManager_record(t_SearcherLifetimeManager *self, PyObject *arg)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.record(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "record", arg);
          return NULL;
        }

        static PyObject *t_SearcherLifetimeManager_release(t_SearcherLifetimeManager *self, PyObject *arg)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(self->object.release(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "release", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$logical_or_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$logical_or_return::class$ = NULL;
          jmethodID *JavascriptParser$logical_or_return::mids$ = NULL;
          bool JavascriptParser$logical_or_return::live$ = false;

          jclass JavascriptParser$logical_or_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$logical_or_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$logical_or_return::JavascriptParser$logical_or_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$logical_or_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$logical_or_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$logical_or_return_init_(t_JavascriptParser$logical_or_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$logical_or_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$logical_or_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$logical_or_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$logical_or_return, t_JavascriptParser$logical_or_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$logical_or_return, t_JavascriptParser$logical_or_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$logical_or_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$logical_or_return), module, "JavascriptParser$logical_or_return", 0);
          }

          void t_JavascriptParser$logical_or_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$logical_or_return).tp_dict, "class_", make_descriptor(JavascriptParser$logical_or_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$logical_or_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$logical_or_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$logical_or_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$logical_or_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$logical_or_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$logical_or_return::wrap_Object(JavascriptParser$logical_or_return(((t_JavascriptParser$logical_or_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$logical_or_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$logical_or_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$logical_or_return_init_(t_JavascriptParser$logical_or_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$logical_or_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$logical_or_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/CorePlusExtensionsParser.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/classic/QueryParser.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *CorePlusExtensionsParser::class$ = NULL;
          jmethodID *CorePlusExtensionsParser::mids$ = NULL;
          bool CorePlusExtensionsParser::live$ = false;

          jclass CorePlusExtensionsParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/CorePlusExtensionsParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_64322899] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/queryparser/classic/QueryParser;)V");
              mids$[mid_init$_d77cc89a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CorePlusExtensionsParser::CorePlusExtensionsParser(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::queryparser::classic::QueryParser & a1) : ::org::apache::lucene::queryparser::xml::CoreParser(env->newObject(initializeClass, &mids$, mid_init$_64322899, a0.this$, a1.this$)) {}

          CorePlusExtensionsParser::CorePlusExtensionsParser(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::queryparser::xml::CoreParser(env->newObject(initializeClass, &mids$, mid_init$_d77cc89a, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_CorePlusExtensionsParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CorePlusExtensionsParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CorePlusExtensionsParser_init_(t_CorePlusExtensionsParser *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_CorePlusExtensionsParser__methods_[] = {
            DECLARE_METHOD(t_CorePlusExtensionsParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CorePlusExtensionsParser, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CorePlusExtensionsParser, t_CorePlusExtensionsParser, ::org::apache::lucene::queryparser::xml::CoreParser, CorePlusExtensionsParser, t_CorePlusExtensionsParser_init_, 0, 0, 0, 0, 0);

          void t_CorePlusExtensionsParser::install(PyObject *module)
          {
            installType(&PY_TYPE(CorePlusExtensionsParser), module, "CorePlusExtensionsParser", 0);
          }

          void t_CorePlusExtensionsParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CorePlusExtensionsParser).tp_dict, "class_", make_descriptor(CorePlusExtensionsParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CorePlusExtensionsParser).tp_dict, "wrapfn_", make_descriptor(t_CorePlusExtensionsParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CorePlusExtensionsParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CorePlusExtensionsParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CorePlusExtensionsParser::initializeClass, 1)))
              return NULL;
            return t_CorePlusExtensionsParser::wrap_Object(CorePlusExtensionsParser(((t_CorePlusExtensionsParser *) arg)->object.this$));
          }
          static PyObject *t_CorePlusExtensionsParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CorePlusExtensionsParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CorePlusExtensionsParser_init_(t_CorePlusExtensionsParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::org::apache::lucene::queryparser::classic::QueryParser a1((jobject) NULL);
                CorePlusExtensionsParser object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::queryparser::classic::QueryParser::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CorePlusExtensionsParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                CorePlusExtensionsParser object((jobject) NULL);

                if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CorePlusExtensionsParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryParserHelper.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/SyntaxParser.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/builders/QueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {

            ::java::lang::Class *QueryParserHelper::class$ = NULL;
            jmethodID *QueryParserHelper::mids$ = NULL;
            bool QueryParserHelper::live$ = false;

            jclass QueryParserHelper::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/QueryParserHelper");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_552e5b8b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;Lorg/apache/lucene/queryparser/flexible/core/parser/SyntaxParser;Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;Lorg/apache/lucene/queryparser/flexible/core/builders/QueryBuilder;)V");
                mids$[mid_getQueryBuilder_8003a74c] = env->getMethodID(cls, "getQueryBuilder", "()Lorg/apache/lucene/queryparser/flexible/core/builders/QueryBuilder;");
                mids$[mid_getQueryConfigHandler_3636d8c3] = env->getMethodID(cls, "getQueryConfigHandler", "()Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;");
                mids$[mid_getQueryNodeProcessor_eb463160] = env->getMethodID(cls, "getQueryNodeProcessor", "()Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;");
                mids$[mid_getSyntaxParser_ede87db0] = env->getMethodID(cls, "getSyntaxParser", "()Lorg/apache/lucene/queryparser/flexible/core/parser/SyntaxParser;");
                mids$[mid_parse_1a6a44ef] = env->getMethodID(cls, "parse", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;");
                mids$[mid_setQueryBuilder_f13b6d3d] = env->getMethodID(cls, "setQueryBuilder", "(Lorg/apache/lucene/queryparser/flexible/core/builders/QueryBuilder;)V");
                mids$[mid_setQueryConfigHandler_0b1f7132] = env->getMethodID(cls, "setQueryConfigHandler", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                mids$[mid_setQueryNodeProcessor_507a7d15] = env->getMethodID(cls, "setQueryNodeProcessor", "(Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;)V");
                mids$[mid_setSyntaxParser_af2d05c9] = env->getMethodID(cls, "setSyntaxParser", "(Lorg/apache/lucene/queryparser/flexible/core/parser/SyntaxParser;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryParserHelper::QueryParserHelper(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0, const ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser & a1, const ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor & a2, const ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_552e5b8b, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder QueryParserHelper::getQueryBuilder() const
            {
              return ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder(env->callObjectMethod(this$, mids$[mid_getQueryBuilder_8003a74c]));
            }

            ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler QueryParserHelper::getQueryConfigHandler() const
            {
              return ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->callObjectMethod(this$, mids$[mid_getQueryConfigHandler_3636d8c3]));
            }

            ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor QueryParserHelper::getQueryNodeProcessor() const
            {
              return ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor(env->callObjectMethod(this$, mids$[mid_getQueryNodeProcessor_eb463160]));
            }

            ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser QueryParserHelper::getSyntaxParser() const
            {
              return ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser(env->callObjectMethod(this$, mids$[mid_getSyntaxParser_ede87db0]));
            }

            ::java::lang::Object QueryParserHelper::parse(const ::java::lang::String & a0, const ::java::lang::String & a1) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_parse_1a6a44ef], a0.this$, a1.this$));
            }

            void QueryParserHelper::setQueryBuilder(const ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setQueryBuilder_f13b6d3d], a0.this$);
            }

            void QueryParserHelper::setQueryConfigHandler(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setQueryConfigHandler_0b1f7132], a0.this$);
            }

            void QueryParserHelper::setQueryNodeProcessor(const ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setQueryNodeProcessor_507a7d15], a0.this$);
            }

            void QueryParserHelper::setSyntaxParser(const ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setSyntaxParser_af2d05c9], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            static PyObject *t_QueryParserHelper_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParserHelper_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryParserHelper_init_(t_QueryParserHelper *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryParserHelper_getQueryBuilder(t_QueryParserHelper *self);
            static PyObject *t_QueryParserHelper_getQueryConfigHandler(t_QueryParserHelper *self);
            static PyObject *t_QueryParserHelper_getQueryNodeProcessor(t_QueryParserHelper *self);
            static PyObject *t_QueryParserHelper_getSyntaxParser(t_QueryParserHelper *self);
            static PyObject *t_QueryParserHelper_parse(t_QueryParserHelper *self, PyObject *args);
            static PyObject *t_QueryParserHelper_setQueryBuilder(t_QueryParserHelper *self, PyObject *arg);
            static PyObject *t_QueryParserHelper_setQueryConfigHandler(t_QueryParserHelper *self, PyObject *arg);
            static PyObject *t_QueryParserHelper_setQueryNodeProcessor(t_QueryParserHelper *self, PyObject *arg);
            static PyObject *t_QueryParserHelper_setSyntaxParser(t_QueryParserHelper *self, PyObject *arg);
            static PyObject *t_QueryParserHelper_get__queryBuilder(t_QueryParserHelper *self, void *data);
            static int t_QueryParserHelper_set__queryBuilder(t_QueryParserHelper *self, PyObject *arg, void *data);
            static PyObject *t_QueryParserHelper_get__queryConfigHandler(t_QueryParserHelper *self, void *data);
            static int t_QueryParserHelper_set__queryConfigHandler(t_QueryParserHelper *self, PyObject *arg, void *data);
            static PyObject *t_QueryParserHelper_get__queryNodeProcessor(t_QueryParserHelper *self, void *data);
            static int t_QueryParserHelper_set__queryNodeProcessor(t_QueryParserHelper *self, PyObject *arg, void *data);
            static PyObject *t_QueryParserHelper_get__syntaxParser(t_QueryParserHelper *self, void *data);
            static int t_QueryParserHelper_set__syntaxParser(t_QueryParserHelper *self, PyObject *arg, void *data);
            static PyGetSetDef t_QueryParserHelper__fields_[] = {
              DECLARE_GETSET_FIELD(t_QueryParserHelper, queryBuilder),
              DECLARE_GETSET_FIELD(t_QueryParserHelper, queryConfigHandler),
              DECLARE_GETSET_FIELD(t_QueryParserHelper, queryNodeProcessor),
              DECLARE_GETSET_FIELD(t_QueryParserHelper, syntaxParser),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryParserHelper__methods_[] = {
              DECLARE_METHOD(t_QueryParserHelper, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserHelper, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserHelper, getQueryBuilder, METH_NOARGS),
              DECLARE_METHOD(t_QueryParserHelper, getQueryConfigHandler, METH_NOARGS),
              DECLARE_METHOD(t_QueryParserHelper, getQueryNodeProcessor, METH_NOARGS),
              DECLARE_METHOD(t_QueryParserHelper, getSyntaxParser, METH_NOARGS),
              DECLARE_METHOD(t_QueryParserHelper, parse, METH_VARARGS),
              DECLARE_METHOD(t_QueryParserHelper, setQueryBuilder, METH_O),
              DECLARE_METHOD(t_QueryParserHelper, setQueryConfigHandler, METH_O),
              DECLARE_METHOD(t_QueryParserHelper, setQueryNodeProcessor, METH_O),
              DECLARE_METHOD(t_QueryParserHelper, setSyntaxParser, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryParserHelper, t_QueryParserHelper, ::java::lang::Object, QueryParserHelper, t_QueryParserHelper_init_, 0, 0, t_QueryParserHelper__fields_, 0, 0);

            void t_QueryParserHelper::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryParserHelper), module, "QueryParserHelper", 0);
            }

            void t_QueryParserHelper::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryParserHelper).tp_dict, "class_", make_descriptor(QueryParserHelper::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryParserHelper).tp_dict, "wrapfn_", make_descriptor(t_QueryParserHelper::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryParserHelper).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryParserHelper_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryParserHelper::initializeClass, 1)))
                return NULL;
              return t_QueryParserHelper::wrap_Object(QueryParserHelper(((t_QueryParserHelper *) arg)->object.this$));
            }
            static PyObject *t_QueryParserHelper_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryParserHelper::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryParserHelper_init_(t_QueryParserHelper *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
              ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser a1((jobject) NULL);
              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor a2((jobject) NULL);
              ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder a3((jobject) NULL);
              QueryParserHelper object((jobject) NULL);

              if (!parseArgs(args, "kkkk", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser::initializeClass, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = QueryParserHelper(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryParserHelper_getQueryBuilder(t_QueryParserHelper *self)
            {
              ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder result((jobject) NULL);
              OBJ_CALL(result = self->object.getQueryBuilder());
              return ::org::apache::lucene::queryparser::flexible::core::builders::t_QueryBuilder::wrap_Object(result);
            }

            static PyObject *t_QueryParserHelper_getQueryConfigHandler(t_QueryParserHelper *self)
            {
              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler result((jobject) NULL);
              OBJ_CALL(result = self->object.getQueryConfigHandler());
              return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(result);
            }

            static PyObject *t_QueryParserHelper_getQueryNodeProcessor(t_QueryParserHelper *self)
            {
              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor result((jobject) NULL);
              OBJ_CALL(result = self->object.getQueryNodeProcessor());
              return ::org::apache::lucene::queryparser::flexible::core::processors::t_QueryNodeProcessor::wrap_Object(result);
            }

            static PyObject *t_QueryParserHelper_getSyntaxParser(t_QueryParserHelper *self)
            {
              ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser result((jobject) NULL);
              OBJ_CALL(result = self->object.getSyntaxParser());
              return ::org::apache::lucene::queryparser::flexible::core::parser::t_SyntaxParser::wrap_Object(result);
            }

            static PyObject *t_QueryParserHelper_parse(t_QueryParserHelper *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(result = self->object.parse(a0, a1));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "parse", args);
              return NULL;
            }

            static PyObject *t_QueryParserHelper_setQueryBuilder(t_QueryParserHelper *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setQueryBuilder(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setQueryBuilder", arg);
              return NULL;
            }

            static PyObject *t_QueryParserHelper_setQueryConfigHandler(t_QueryParserHelper *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setQueryConfigHandler(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setQueryConfigHandler", arg);
              return NULL;
            }

            static PyObject *t_QueryParserHelper_setQueryNodeProcessor(t_QueryParserHelper *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setQueryNodeProcessor(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setQueryNodeProcessor", arg);
              return NULL;
            }

            static PyObject *t_QueryParserHelper_setSyntaxParser(t_QueryParserHelper *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setSyntaxParser(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setSyntaxParser", arg);
              return NULL;
            }

            static PyObject *t_QueryParserHelper_get__queryBuilder(t_QueryParserHelper *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder value((jobject) NULL);
              OBJ_CALL(value = self->object.getQueryBuilder());
              return ::org::apache::lucene::queryparser::flexible::core::builders::t_QueryBuilder::wrap_Object(value);
            }
            static int t_QueryParserHelper_set__queryBuilder(t_QueryParserHelper *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder::initializeClass, &value))
                {
                  INT_CALL(self->object.setQueryBuilder(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "queryBuilder", arg);
              return -1;
            }

            static PyObject *t_QueryParserHelper_get__queryConfigHandler(t_QueryParserHelper *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
              OBJ_CALL(value = self->object.getQueryConfigHandler());
              return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(value);
            }
            static int t_QueryParserHelper_set__queryConfigHandler(t_QueryParserHelper *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &value))
                {
                  INT_CALL(self->object.setQueryConfigHandler(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "queryConfigHandler", arg);
              return -1;
            }

            static PyObject *t_QueryParserHelper_get__queryNodeProcessor(t_QueryParserHelper *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor value((jobject) NULL);
              OBJ_CALL(value = self->object.getQueryNodeProcessor());
              return ::org::apache::lucene::queryparser::flexible::core::processors::t_QueryNodeProcessor::wrap_Object(value);
            }
            static int t_QueryParserHelper_set__queryNodeProcessor(t_QueryParserHelper *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, &value))
                {
                  INT_CALL(self->object.setQueryNodeProcessor(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "queryNodeProcessor", arg);
              return -1;
            }

            static PyObject *t_QueryParserHelper_get__syntaxParser(t_QueryParserHelper *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser value((jobject) NULL);
              OBJ_CALL(value = self->object.getSyntaxParser());
              return ::org::apache::lucene::queryparser::flexible::core::parser::t_SyntaxParser::wrap_Object(value);
            }
            static int t_QueryParserHelper_set__syntaxParser(t_QueryParserHelper *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser::initializeClass, &value))
                {
                  INT_CALL(self->object.setSyntaxParser(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "syntaxParser", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/AnalyzerWrapper.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *AnalyzerWrapper::class$ = NULL;
        jmethodID *AnalyzerWrapper::mids$ = NULL;
        bool AnalyzerWrapper::live$ = false;

        jclass AnalyzerWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/AnalyzerWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getOffsetGap_5fdc3f57] = env->getMethodID(cls, "getOffsetGap", "(Ljava/lang/String;)I");
            mids$[mid_getPositionIncrementGap_5fdc3f57] = env->getMethodID(cls, "getPositionIncrementGap", "(Ljava/lang/String;)I");
            mids$[mid_initReader_d8fb1c81] = env->getMethodID(cls, "initReader", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;");
            mids$[mid_getWrappedAnalyzer_29a2299f] = env->getMethodID(cls, "getWrappedAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");
            mids$[mid_wrapComponents_46d74455] = env->getMethodID(cls, "wrapComponents", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_wrapReader_d8fb1c81] = env->getMethodID(cls, "wrapReader", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;");
            mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint AnalyzerWrapper::getOffsetGap(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getOffsetGap_5fdc3f57], a0.this$);
        }

        jint AnalyzerWrapper::getPositionIncrementGap(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getPositionIncrementGap_5fdc3f57], a0.this$);
        }

        ::java::io::Reader AnalyzerWrapper::initReader(const ::java::lang::String & a0, const ::java::io::Reader & a1) const
        {
          return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_initReader_d8fb1c81], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_AnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AnalyzerWrapper_getOffsetGap(t_AnalyzerWrapper *self, PyObject *args);
        static PyObject *t_AnalyzerWrapper_getPositionIncrementGap(t_AnalyzerWrapper *self, PyObject *args);
        static PyObject *t_AnalyzerWrapper_initReader(t_AnalyzerWrapper *self, PyObject *args);

        static PyMethodDef t_AnalyzerWrapper__methods_[] = {
          DECLARE_METHOD(t_AnalyzerWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AnalyzerWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AnalyzerWrapper, getOffsetGap, METH_VARARGS),
          DECLARE_METHOD(t_AnalyzerWrapper, getPositionIncrementGap, METH_VARARGS),
          DECLARE_METHOD(t_AnalyzerWrapper, initReader, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AnalyzerWrapper, t_AnalyzerWrapper, ::org::apache::lucene::analysis::Analyzer, AnalyzerWrapper, abstract_init, 0, 0, 0, 0, 0);

        void t_AnalyzerWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(AnalyzerWrapper), module, "AnalyzerWrapper", 0);
        }

        void t_AnalyzerWrapper::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AnalyzerWrapper).tp_dict, "class_", make_descriptor(AnalyzerWrapper::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AnalyzerWrapper).tp_dict, "wrapfn_", make_descriptor(t_AnalyzerWrapper::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AnalyzerWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AnalyzerWrapper::initializeClass, 1)))
            return NULL;
          return t_AnalyzerWrapper::wrap_Object(AnalyzerWrapper(((t_AnalyzerWrapper *) arg)->object.this$));
        }
        static PyObject *t_AnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AnalyzerWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_AnalyzerWrapper_getOffsetGap(t_AnalyzerWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getOffsetGap(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(AnalyzerWrapper), (PyObject *) self, "getOffsetGap", args, 2);
        }

        static PyObject *t_AnalyzerWrapper_getPositionIncrementGap(t_AnalyzerWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getPositionIncrementGap(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(AnalyzerWrapper), (PyObject *) self, "getPositionIncrementGap", args, 2);
        }

        static PyObject *t_AnalyzerWrapper_initReader(t_AnalyzerWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::io::Reader a1((jobject) NULL);
          ::java::io::Reader result((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.initReader(a0, a1));
            return ::java::io::t_Reader::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "initReader", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/IntegerEncoder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *IntegerEncoder::class$ = NULL;
          jmethodID *IntegerEncoder::mids$ = NULL;
          bool IntegerEncoder::live$ = false;

          jclass IntegerEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/IntegerEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encode_871544e1] = env->getMethodID(cls, "encode", "([CII)Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IntegerEncoder::IntegerEncoder() : ::org::apache::lucene::analysis::payloads::AbstractEncoder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::BytesRef IntegerEncoder::encode(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_871544e1], a0.this$, a1, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_IntegerEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntegerEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IntegerEncoder_init_(t_IntegerEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IntegerEncoder_encode(t_IntegerEncoder *self, PyObject *args);

          static PyMethodDef t_IntegerEncoder__methods_[] = {
            DECLARE_METHOD(t_IntegerEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntegerEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntegerEncoder, encode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IntegerEncoder, t_IntegerEncoder, ::org::apache::lucene::analysis::payloads::AbstractEncoder, IntegerEncoder, t_IntegerEncoder_init_, 0, 0, 0, 0, 0);

          void t_IntegerEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(IntegerEncoder), module, "IntegerEncoder", 0);
          }

          void t_IntegerEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IntegerEncoder).tp_dict, "class_", make_descriptor(IntegerEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IntegerEncoder).tp_dict, "wrapfn_", make_descriptor(t_IntegerEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IntegerEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntegerEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntegerEncoder::initializeClass, 1)))
              return NULL;
            return t_IntegerEncoder::wrap_Object(IntegerEncoder(((t_IntegerEncoder *) arg)->object.this$));
          }
          static PyObject *t_IntegerEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntegerEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IntegerEncoder_init_(t_IntegerEncoder *self, PyObject *args, PyObject *kwds)
          {
            IntegerEncoder object((jobject) NULL);

            INT_CALL(object = IntegerEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_IntegerEncoder_encode(t_IntegerEncoder *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.encode(a0, a1, a2));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntegerEncoder), (PyObject *) self, "encode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/AfterEffect.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *AfterEffect::class$ = NULL;
          jmethodID *AfterEffect::mids$ = NULL;
          bool AfterEffect::live$ = false;

          jclass AfterEffect::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/AfterEffect");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_05d4946a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;F)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AfterEffect::AfterEffect() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation AfterEffect::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_05d4946a], a0.this$, a1));
          }

          jfloat AfterEffect::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String AfterEffect::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/similarities/AfterEffect$NoAfterEffect.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_AfterEffect_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AfterEffect_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AfterEffect_init_(t_AfterEffect *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AfterEffect_explain(t_AfterEffect *self, PyObject *args);
          static PyObject *t_AfterEffect_score(t_AfterEffect *self, PyObject *args);
          static PyObject *t_AfterEffect_toString(t_AfterEffect *self, PyObject *args);

          static PyMethodDef t_AfterEffect__methods_[] = {
            DECLARE_METHOD(t_AfterEffect, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffect, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffect, explain, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffect, score, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffect, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AfterEffect, t_AfterEffect, ::java::lang::Object, AfterEffect, t_AfterEffect_init_, 0, 0, 0, 0, 0);

          void t_AfterEffect::install(PyObject *module)
          {
            installType(&PY_TYPE(AfterEffect), module, "AfterEffect", 0);
            PyDict_SetItemString(PY_TYPE(AfterEffect).tp_dict, "NoAfterEffect", make_descriptor(&PY_TYPE(AfterEffect$NoAfterEffect)));
          }

          void t_AfterEffect::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AfterEffect).tp_dict, "class_", make_descriptor(AfterEffect::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AfterEffect).tp_dict, "wrapfn_", make_descriptor(t_AfterEffect::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AfterEffect).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AfterEffect_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AfterEffect::initializeClass, 1)))
              return NULL;
            return t_AfterEffect::wrap_Object(AfterEffect(((t_AfterEffect *) arg)->object.this$));
          }
          static PyObject *t_AfterEffect_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AfterEffect::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AfterEffect_init_(t_AfterEffect *self, PyObject *args, PyObject *kwds)
          {
            AfterEffect object((jobject) NULL);

            INT_CALL(object = AfterEffect());
            self->object = object;

            return 0;
          }

          static PyObject *t_AfterEffect_explain(t_AfterEffect *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_AfterEffect_score(t_AfterEffect *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "score", args);
            return NULL;
          }

          static PyObject *t_AfterEffect_toString(t_AfterEffect *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(AfterEffect), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Token.h"
#include "org/apache/lucene/analysis/tokenattributes/PayloadAttribute.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "org/apache/lucene/analysis/tokenattributes/FlagsAttribute.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Token::class$ = NULL;
        jmethodID *Token::mids$ = NULL;
        bool Token::live$ = false;
        ::org::apache::lucene::util::AttributeFactory *Token::TOKEN_ATTRIBUTE_FACTORY = NULL;

        jclass Token::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Token");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
            mids$[mid_init$_6cc8d7e2] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;II)V");
            mids$[mid_init$_490a7ef0] = env->getMethodID(cls, "<init>", "(IILjava/lang/String;)V");
            mids$[mid_init$_d3236aa4] = env->getMethodID(cls, "<init>", "(III)V");
            mids$[mid_init$_734c49c6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;IILjava/lang/String;)V");
            mids$[mid_init$_b8e753a2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;III)V");
            mids$[mid_init$_f453acf6] = env->getMethodID(cls, "<init>", "([CIIII)V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_clone_55852c17] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/Token;");
            mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getFlags_54c6a179] = env->getMethodID(cls, "getFlags", "()I");
            mids$[mid_getPayload_4ae19461] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_reflectWith_5f3f5102] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
            mids$[mid_reinit_4f6e7002] = env->getMethodID(cls, "reinit", "(Lorg/apache/lucene/analysis/Token;)V");
            mids$[mid_reinit_4b41519c] = env->getMethodID(cls, "reinit", "(Lorg/apache/lucene/analysis/Token;Ljava/lang/String;)V");
            mids$[mid_reinit_fca163e5] = env->getMethodID(cls, "reinit", "(Ljava/lang/String;II)Lorg/apache/lucene/analysis/Token;");
            mids$[mid_reinit_9e1b3a5a] = env->getMethodID(cls, "reinit", "(Lorg/apache/lucene/analysis/Token;[CII)V");
            mids$[mid_reinit_ca2a1773] = env->getMethodID(cls, "reinit", "(Ljava/lang/String;IILjava/lang/String;)Lorg/apache/lucene/analysis/Token;");
            mids$[mid_reinit_53bb4fe3] = env->getMethodID(cls, "reinit", "([CIIII)Lorg/apache/lucene/analysis/Token;");
            mids$[mid_reinit_d4354d15] = env->getMethodID(cls, "reinit", "(Ljava/lang/String;IIII)Lorg/apache/lucene/analysis/Token;");
            mids$[mid_reinit_4c56913b] = env->getMethodID(cls, "reinit", "(Ljava/lang/String;IIIILjava/lang/String;)Lorg/apache/lucene/analysis/Token;");
            mids$[mid_reinit_6aec2009] = env->getMethodID(cls, "reinit", "([CIIIILjava/lang/String;)Lorg/apache/lucene/analysis/Token;");
            mids$[mid_setFlags_39c7bd3c] = env->getMethodID(cls, "setFlags", "(I)V");
            mids$[mid_setPayload_7bc03dc4] = env->getMethodID(cls, "setPayload", "(Lorg/apache/lucene/util/BytesRef;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TOKEN_ATTRIBUTE_FACTORY = new ::org::apache::lucene::util::AttributeFactory(env->getStaticObjectField(cls, "TOKEN_ATTRIBUTE_FACTORY", "Lorg/apache/lucene/util/AttributeFactory;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Token::Token() : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        Token::Token(jint a0, jint a1) : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

        Token::Token(const ::java::lang::CharSequence & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_6cc8d7e2, a0.this$, a1, a2)) {}

        Token::Token(jint a0, jint a1, const ::java::lang::String & a2) : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_490a7ef0, a0, a1, a2.this$)) {}

        Token::Token(jint a0, jint a1, jint a2) : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_d3236aa4, a0, a1, a2)) {}

        Token::Token(const ::java::lang::String & a0, jint a1, jint a2, const ::java::lang::String & a3) : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_734c49c6, a0.this$, a1, a2, a3.this$)) {}

        Token::Token(const ::java::lang::String & a0, jint a1, jint a2, jint a3) : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_b8e753a2, a0.this$, a1, a2, a3)) {}

        Token::Token(const JArray< jchar > & a0, jint a1, jint a2, jint a3, jint a4) : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_f453acf6, a0.this$, a1, a2, a3, a4)) {}

        void Token::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        Token Token::clone() const
        {
          return Token(env->callObjectMethod(this$, mids$[mid_clone_55852c17]));
        }

        void Token::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
        }

        jboolean Token::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint Token::getFlags() const
        {
          return env->callIntMethod(this$, mids$[mid_getFlags_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef Token::getPayload() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_4ae19461]));
        }

        jint Token::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        void Token::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reflectWith_5f3f5102], a0.this$);
        }

        void Token::reinit(const Token & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reinit_4f6e7002], a0.this$);
        }

        void Token::reinit(const Token & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_reinit_4b41519c], a0.this$, a1.this$);
        }

        Token Token::reinit(const ::java::lang::String & a0, jint a1, jint a2) const
        {
          return Token(env->callObjectMethod(this$, mids$[mid_reinit_fca163e5], a0.this$, a1, a2));
        }

        void Token::reinit(const Token & a0, const JArray< jchar > & a1, jint a2, jint a3) const
        {
          env->callVoidMethod(this$, mids$[mid_reinit_9e1b3a5a], a0.this$, a1.this$, a2, a3);
        }

        Token Token::reinit(const ::java::lang::String & a0, jint a1, jint a2, const ::java::lang::String & a3) const
        {
          return Token(env->callObjectMethod(this$, mids$[mid_reinit_ca2a1773], a0.this$, a1, a2, a3.this$));
        }

        Token Token::reinit(const JArray< jchar > & a0, jint a1, jint a2, jint a3, jint a4) const
        {
          return Token(env->callObjectMethod(this$, mids$[mid_reinit_53bb4fe3], a0.this$, a1, a2, a3, a4));
        }

        Token Token::reinit(const ::java::lang::String & a0, jint a1, jint a2, jint a3, jint a4) const
        {
          return Token(env->callObjectMethod(this$, mids$[mid_reinit_d4354d15], a0.this$, a1, a2, a3, a4));
        }

        Token Token::reinit(const ::java::lang::String & a0, jint a1, jint a2, jint a3, jint a4, const ::java::lang::String & a5) const
        {
          return Token(env->callObjectMethod(this$, mids$[mid_reinit_4c56913b], a0.this$, a1, a2, a3, a4, a5.this$));
        }

        Token Token::reinit(const JArray< jchar > & a0, jint a1, jint a2, jint a3, jint a4, const ::java::lang::String & a5) const
        {
          return Token(env->callObjectMethod(this$, mids$[mid_reinit_6aec2009], a0.this$, a1, a2, a3, a4, a5.this$));
        }

        void Token::setFlags(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFlags_39c7bd3c], a0);
        }

        void Token::setPayload(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setPayload_7bc03dc4], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Token_clear(t_Token *self, PyObject *args);
        static PyObject *t_Token_clone(t_Token *self, PyObject *args);
        static PyObject *t_Token_copyTo(t_Token *self, PyObject *args);
        static PyObject *t_Token_equals(t_Token *self, PyObject *args);
        static PyObject *t_Token_getFlags(t_Token *self);
        static PyObject *t_Token_getPayload(t_Token *self);
        static PyObject *t_Token_hashCode(t_Token *self, PyObject *args);
        static PyObject *t_Token_reflectWith(t_Token *self, PyObject *args);
        static PyObject *t_Token_reinit(t_Token *self, PyObject *args);
        static PyObject *t_Token_setFlags(t_Token *self, PyObject *arg);
        static PyObject *t_Token_setPayload(t_Token *self, PyObject *arg);
        static PyObject *t_Token_get__flags(t_Token *self, void *data);
        static int t_Token_set__flags(t_Token *self, PyObject *arg, void *data);
        static PyObject *t_Token_get__payload(t_Token *self, void *data);
        static int t_Token_set__payload(t_Token *self, PyObject *arg, void *data);
        static PyGetSetDef t_Token__fields_[] = {
          DECLARE_GETSET_FIELD(t_Token, flags),
          DECLARE_GETSET_FIELD(t_Token, payload),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Token__methods_[] = {
          DECLARE_METHOD(t_Token, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Token, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Token, clear, METH_VARARGS),
          DECLARE_METHOD(t_Token, clone, METH_VARARGS),
          DECLARE_METHOD(t_Token, copyTo, METH_VARARGS),
          DECLARE_METHOD(t_Token, equals, METH_VARARGS),
          DECLARE_METHOD(t_Token, getFlags, METH_NOARGS),
          DECLARE_METHOD(t_Token, getPayload, METH_NOARGS),
          DECLARE_METHOD(t_Token, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_Token, reflectWith, METH_VARARGS),
          DECLARE_METHOD(t_Token, reinit, METH_VARARGS),
          DECLARE_METHOD(t_Token, setFlags, METH_O),
          DECLARE_METHOD(t_Token, setPayload, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Token, t_Token, ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl, Token, t_Token_init_, 0, 0, t_Token__fields_, 0, 0);

        void t_Token::install(PyObject *module)
        {
          installType(&PY_TYPE(Token), module, "Token", 0);
        }

        void t_Token::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Token).tp_dict, "class_", make_descriptor(Token::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Token).tp_dict, "wrapfn_", make_descriptor(t_Token::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Token).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Token::initializeClass);
          PyDict_SetItemString(PY_TYPE(Token).tp_dict, "TOKEN_ATTRIBUTE_FACTORY", make_descriptor(::org::apache::lucene::util::t_AttributeFactory::wrap_Object(*Token::TOKEN_ATTRIBUTE_FACTORY)));
        }

        static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Token::initializeClass, 1)))
            return NULL;
          return t_Token::wrap_Object(Token(((t_Token *) arg)->object.this$));
        }
        static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Token::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              Token object((jobject) NULL);

              INT_CALL(object = Token());
              self->object = object;
              break;
            }
            goto err;
           case 2:
            {
              jint a0;
              jint a1;
              Token object((jobject) NULL);

              if (!parseArgs(args, "II", &a0, &a1))
              {
                INT_CALL(object = Token(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jint a1;
              jint a2;
              Token object((jobject) NULL);

              if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
              {
                INT_CALL(object = Token(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              jint a0;
              jint a1;
              ::java::lang::String a2((jobject) NULL);
              Token object((jobject) NULL);

              if (!parseArgs(args, "IIs", &a0, &a1, &a2))
              {
                INT_CALL(object = Token(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              jint a0;
              jint a1;
              jint a2;
              Token object((jobject) NULL);

              if (!parseArgs(args, "III", &a0, &a1, &a2))
              {
                INT_CALL(object = Token(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              ::java::lang::String a3((jobject) NULL);
              Token object((jobject) NULL);

              if (!parseArgs(args, "sIIs", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = Token(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              Token object((jobject) NULL);

              if (!parseArgs(args, "sIII", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = Token(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint a4;
              Token object((jobject) NULL);

              if (!parseArgs(args, "[CIIII", &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = Token(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Token_clear(t_Token *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(Token), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_Token_clone(t_Token *self, PyObject *args)
        {
          Token result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_Token::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(Token), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_Token_copyTo(t_Token *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(Token), (PyObject *) self, "copyTo", args, 2);
        }

        static PyObject *t_Token_equals(t_Token *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(Token), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Token_getFlags(t_Token *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getFlags());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_Token_getPayload(t_Token *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_Token_hashCode(t_Token *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(Token), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Token_reflectWith(t_Token *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
          {
            OBJ_CALL(self->object.reflectWith(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(Token), (PyObject *) self, "reflectWith", args, 2);
        }

        static PyObject *t_Token_reinit(t_Token *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              Token a0((jobject) NULL);

              if (!parseArgs(args, "k", Token::initializeClass, &a0))
              {
                OBJ_CALL(self->object.reinit(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              Token a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);

              if (!parseArgs(args, "ks", Token::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.reinit(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              Token result((jobject) NULL);

              if (!parseArgs(args, "sII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.reinit(a0, a1, a2));
                return t_Token::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              Token a0((jobject) NULL);
              JArray< jchar > a1((jobject) NULL);
              jint a2;
              jint a3;

              if (!parseArgs(args, "k[CII", Token::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(self->object.reinit(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              ::java::lang::String a3((jobject) NULL);
              Token result((jobject) NULL);

              if (!parseArgs(args, "sIIs", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.reinit(a0, a1, a2, a3));
                return t_Token::wrap_Object(result);
              }
            }
            break;
           case 5:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint a4;
              Token result((jobject) NULL);

              if (!parseArgs(args, "[CIIII", &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = self->object.reinit(a0, a1, a2, a3, a4));
                return t_Token::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint a4;
              Token result((jobject) NULL);

              if (!parseArgs(args, "sIIII", &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = self->object.reinit(a0, a1, a2, a3, a4));
                return t_Token::wrap_Object(result);
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint a4;
              ::java::lang::String a5((jobject) NULL);
              Token result((jobject) NULL);

              if (!parseArgs(args, "sIIIIs", &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = self->object.reinit(a0, a1, a2, a3, a4, a5));
                return t_Token::wrap_Object(result);
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint a4;
              ::java::lang::String a5((jobject) NULL);
              Token result((jobject) NULL);

              if (!parseArgs(args, "[CIIIIs", &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = self->object.reinit(a0, a1, a2, a3, a4, a5));
                return t_Token::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "reinit", args);
          return NULL;
        }

        static PyObject *t_Token_setFlags(t_Token *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setFlags(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setFlags", arg);
          return NULL;
        }

        static PyObject *t_Token_setPayload(t_Token *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setPayload(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setPayload", arg);
          return NULL;
        }

        static PyObject *t_Token_get__flags(t_Token *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getFlags());
          return PyInt_FromLong((long) value);
        }
        static int t_Token_set__flags(t_Token *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setFlags(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "flags", arg);
          return -1;
        }

        static PyObject *t_Token_get__payload(t_Token *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
        static int t_Token_set__payload(t_Token *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setPayload(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "payload", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace complexPhrase {

          ::java::lang::Class *ComplexPhraseQueryParser::class$ = NULL;
          jmethodID *ComplexPhraseQueryParser::mids$ = NULL;
          bool ComplexPhraseQueryParser::live$ = false;

          jclass ComplexPhraseQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_504c192d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_parse_fbed2634] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setInOrder_bb0c767f] = env->getMethodID(cls, "setInOrder", "(Z)V");
              mids$[mid_getFieldQuery_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_newTermQuery_c8bbbdc7] = env->getMethodID(cls, "newTermQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRangeQuery_75fd45b6] = env->getMethodID(cls, "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_newRangeQuery_75fd45b6] = env->getMethodID(cls, "newRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFuzzyQuery_45995161] = env->getMethodID(cls, "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
              mids$[mid_getWildcardQuery_38d6e77e] = env->getMethodID(cls, "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ComplexPhraseQueryParser::ComplexPhraseQueryParser(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_504c192d, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::Query ComplexPhraseQueryParser::parse(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_fbed2634], a0.this$));
          }

          void ComplexPhraseQueryParser::setInOrder(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setInOrder_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace complexPhrase {
          static PyObject *t_ComplexPhraseQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ComplexPhraseQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ComplexPhraseQueryParser_init_(t_ComplexPhraseQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ComplexPhraseQueryParser_parse(t_ComplexPhraseQueryParser *self, PyObject *args);
          static PyObject *t_ComplexPhraseQueryParser_setInOrder(t_ComplexPhraseQueryParser *self, PyObject *arg);
          static int t_ComplexPhraseQueryParser_set__inOrder(t_ComplexPhraseQueryParser *self, PyObject *arg, void *data);
          static PyGetSetDef t_ComplexPhraseQueryParser__fields_[] = {
            DECLARE_SET_FIELD(t_ComplexPhraseQueryParser, inOrder),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ComplexPhraseQueryParser__methods_[] = {
            DECLARE_METHOD(t_ComplexPhraseQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ComplexPhraseQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ComplexPhraseQueryParser, parse, METH_VARARGS),
            DECLARE_METHOD(t_ComplexPhraseQueryParser, setInOrder, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ComplexPhraseQueryParser, t_ComplexPhraseQueryParser, ::org::apache::lucene::queryparser::classic::QueryParser, ComplexPhraseQueryParser, t_ComplexPhraseQueryParser_init_, 0, 0, t_ComplexPhraseQueryParser__fields_, 0, 0);

          void t_ComplexPhraseQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(ComplexPhraseQueryParser), module, "ComplexPhraseQueryParser", 0);
          }

          void t_ComplexPhraseQueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ComplexPhraseQueryParser).tp_dict, "class_", make_descriptor(ComplexPhraseQueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ComplexPhraseQueryParser).tp_dict, "wrapfn_", make_descriptor(t_ComplexPhraseQueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ComplexPhraseQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ComplexPhraseQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ComplexPhraseQueryParser::initializeClass, 1)))
              return NULL;
            return t_ComplexPhraseQueryParser::wrap_Object(ComplexPhraseQueryParser(((t_ComplexPhraseQueryParser *) arg)->object.this$));
          }
          static PyObject *t_ComplexPhraseQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ComplexPhraseQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ComplexPhraseQueryParser_init_(t_ComplexPhraseQueryParser *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
            ComplexPhraseQueryParser object((jobject) NULL);

            if (!parseArgs(args, "Ksk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
            {
              INT_CALL(object = ComplexPhraseQueryParser(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ComplexPhraseQueryParser_parse(t_ComplexPhraseQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.parse(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ComplexPhraseQueryParser), (PyObject *) self, "parse", args, 2);
          }

          static PyObject *t_ComplexPhraseQueryParser_setInOrder(t_ComplexPhraseQueryParser *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setInOrder(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setInOrder", arg);
            return NULL;
          }

          static int t_ComplexPhraseQueryParser_set__inOrder(t_ComplexPhraseQueryParser *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setInOrder(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "inOrder", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/SumFloatFunction.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *SumFloatFunction::class$ = NULL;
            jmethodID *SumFloatFunction::mids$ = NULL;
            bool SumFloatFunction::live$ = false;

            jclass SumFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/SumFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ee9922ca] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_d2e34bb9] = env->getMethodID(cls, "func", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SumFloatFunction::SumFloatFunction(const JArray< ::org::apache::lucene::queries::function::ValueSource > & a0) : ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction(env->newObject(initializeClass, &mids$, mid_init$_ee9922ca, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_SumFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SumFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SumFloatFunction_init_(t_SumFloatFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SumFloatFunction__methods_[] = {
              DECLARE_METHOD(t_SumFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SumFloatFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SumFloatFunction, t_SumFloatFunction, ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction, SumFloatFunction, t_SumFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_SumFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(SumFloatFunction), module, "SumFloatFunction", 0);
            }

            void t_SumFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SumFloatFunction).tp_dict, "class_", make_descriptor(SumFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SumFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_SumFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SumFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SumFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SumFloatFunction::initializeClass, 1)))
                return NULL;
              return t_SumFloatFunction::wrap_Object(SumFloatFunction(((t_SumFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_SumFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SumFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SumFloatFunction_init_(t_SumFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              JArray< ::org::apache::lucene::queries::function::ValueSource > a0((jobject) NULL);
              SumFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = SumFloatFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *EdgeNGramTokenFilter$Side::class$ = NULL;
          jmethodID *EdgeNGramTokenFilter$Side::mids$ = NULL;
          bool EdgeNGramTokenFilter$Side::live$ = false;
          EdgeNGramTokenFilter$Side *EdgeNGramTokenFilter$Side::BACK = NULL;
          EdgeNGramTokenFilter$Side *EdgeNGramTokenFilter$Side::FRONT = NULL;

          jclass EdgeNGramTokenFilter$Side::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getLabel_14c7b5c5] = env->getMethodID(cls, "getLabel", "()Ljava/lang/String;");
              mids$[mid_getSide_e04ee6cc] = env->getStaticMethodID(cls, "getSide", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side;");
              mids$[mid_valueOf_e04ee6cc] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side;");
              mids$[mid_values_16957b8a] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              BACK = new EdgeNGramTokenFilter$Side(env->getStaticObjectField(cls, "BACK", "Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side;"));
              FRONT = new EdgeNGramTokenFilter$Side(env->getStaticObjectField(cls, "FRONT", "Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String EdgeNGramTokenFilter$Side::getLabel() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLabel_14c7b5c5]));
          }

          EdgeNGramTokenFilter$Side EdgeNGramTokenFilter$Side::getSide(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return EdgeNGramTokenFilter$Side(env->callStaticObjectMethod(cls, mids$[mid_getSide_e04ee6cc], a0.this$));
          }

          EdgeNGramTokenFilter$Side EdgeNGramTokenFilter$Side::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return EdgeNGramTokenFilter$Side(env->callStaticObjectMethod(cls, mids$[mid_valueOf_e04ee6cc], a0.this$));
          }

          JArray< EdgeNGramTokenFilter$Side > EdgeNGramTokenFilter$Side::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< EdgeNGramTokenFilter$Side >(env->callStaticObjectMethod(cls, mids$[mid_values_16957b8a]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_EdgeNGramTokenFilter$Side_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramTokenFilter$Side_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramTokenFilter$Side_of_(t_EdgeNGramTokenFilter$Side *self, PyObject *args);
          static PyObject *t_EdgeNGramTokenFilter$Side_getLabel(t_EdgeNGramTokenFilter$Side *self);
          static PyObject *t_EdgeNGramTokenFilter$Side_getSide(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramTokenFilter$Side_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_EdgeNGramTokenFilter$Side_values(PyTypeObject *type);
          static PyObject *t_EdgeNGramTokenFilter$Side_get__label(t_EdgeNGramTokenFilter$Side *self, void *data);
          static PyObject *t_EdgeNGramTokenFilter$Side_get__parameters_(t_EdgeNGramTokenFilter$Side *self, void *data);
          static PyGetSetDef t_EdgeNGramTokenFilter$Side__fields_[] = {
            DECLARE_GET_FIELD(t_EdgeNGramTokenFilter$Side, label),
            DECLARE_GET_FIELD(t_EdgeNGramTokenFilter$Side, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_EdgeNGramTokenFilter$Side__methods_[] = {
            DECLARE_METHOD(t_EdgeNGramTokenFilter$Side, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter$Side, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter$Side, of_, METH_VARARGS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter$Side, getLabel, METH_NOARGS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter$Side, getSide, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter$Side, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter$Side, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EdgeNGramTokenFilter$Side, t_EdgeNGramTokenFilter$Side, ::java::lang::Enum, EdgeNGramTokenFilter$Side, abstract_init, 0, 0, t_EdgeNGramTokenFilter$Side__fields_, 0, 0);
          PyObject *t_EdgeNGramTokenFilter$Side::wrap_Object(const EdgeNGramTokenFilter$Side& object, PyTypeObject *p0)
          {
            PyObject *obj = t_EdgeNGramTokenFilter$Side::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_EdgeNGramTokenFilter$Side *self = (t_EdgeNGramTokenFilter$Side *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_EdgeNGramTokenFilter$Side::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_EdgeNGramTokenFilter$Side::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_EdgeNGramTokenFilter$Side *self = (t_EdgeNGramTokenFilter$Side *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_EdgeNGramTokenFilter$Side::install(PyObject *module)
          {
            installType(&PY_TYPE(EdgeNGramTokenFilter$Side), module, "EdgeNGramTokenFilter$Side", 0);
          }

          void t_EdgeNGramTokenFilter$Side::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter$Side).tp_dict, "class_", make_descriptor(EdgeNGramTokenFilter$Side::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter$Side).tp_dict, "wrapfn_", make_descriptor(t_EdgeNGramTokenFilter$Side::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter$Side).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(EdgeNGramTokenFilter$Side::initializeClass);
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter$Side).tp_dict, "BACK", make_descriptor(t_EdgeNGramTokenFilter$Side::wrap_Object(*EdgeNGramTokenFilter$Side::BACK)));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter$Side).tp_dict, "FRONT", make_descriptor(t_EdgeNGramTokenFilter$Side::wrap_Object(*EdgeNGramTokenFilter$Side::FRONT)));
          }

          static PyObject *t_EdgeNGramTokenFilter$Side_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EdgeNGramTokenFilter$Side::initializeClass, 1)))
              return NULL;
            return t_EdgeNGramTokenFilter$Side::wrap_Object(EdgeNGramTokenFilter$Side(((t_EdgeNGramTokenFilter$Side *) arg)->object.this$));
          }
          static PyObject *t_EdgeNGramTokenFilter$Side_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EdgeNGramTokenFilter$Side::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_EdgeNGramTokenFilter$Side_of_(t_EdgeNGramTokenFilter$Side *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_EdgeNGramTokenFilter$Side_getLabel(t_EdgeNGramTokenFilter$Side *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getLabel());
            return j2p(result);
          }

          static PyObject *t_EdgeNGramTokenFilter$Side_getSide(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            EdgeNGramTokenFilter$Side result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side::getSide(a0));
              return t_EdgeNGramTokenFilter$Side::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getSide", arg);
            return NULL;
          }

          static PyObject *t_EdgeNGramTokenFilter$Side_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            EdgeNGramTokenFilter$Side result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side::valueOf(a0));
              return t_EdgeNGramTokenFilter$Side::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_EdgeNGramTokenFilter$Side_values(PyTypeObject *type)
          {
            JArray< EdgeNGramTokenFilter$Side > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side::values());
            return JArray<jobject>(result.this$).wrap(t_EdgeNGramTokenFilter$Side::wrap_jobject);
          }
          static PyObject *t_EdgeNGramTokenFilter$Side_get__parameters_(t_EdgeNGramTokenFilter$Side *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_EdgeNGramTokenFilter$Side_get__label(t_EdgeNGramTokenFilter$Side *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getLabel());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PrefixTermsEnum.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PrefixTermsEnum::class$ = NULL;
        jmethodID *PrefixTermsEnum::mids$ = NULL;
        bool PrefixTermsEnum::live$ = false;

        jclass PrefixTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PrefixTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_acc8615c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_accept_30bc08e1] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/FilteredTermsEnum$AcceptStatus;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PrefixTermsEnum::PrefixTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::index::FilteredTermsEnum(env->newObject(initializeClass, &mids$, mid_init$_acc8615c, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PrefixTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrefixTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PrefixTermsEnum_init_(t_PrefixTermsEnum *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_PrefixTermsEnum__methods_[] = {
          DECLARE_METHOD(t_PrefixTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixTermsEnum, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PrefixTermsEnum, t_PrefixTermsEnum, ::org::apache::lucene::index::FilteredTermsEnum, PrefixTermsEnum, t_PrefixTermsEnum_init_, 0, 0, 0, 0, 0);

        void t_PrefixTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(PrefixTermsEnum), module, "PrefixTermsEnum", 0);
        }

        void t_PrefixTermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PrefixTermsEnum).tp_dict, "class_", make_descriptor(PrefixTermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PrefixTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_PrefixTermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PrefixTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PrefixTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PrefixTermsEnum::initializeClass, 1)))
            return NULL;
          return t_PrefixTermsEnum::wrap_Object(PrefixTermsEnum(((t_PrefixTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_PrefixTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PrefixTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PrefixTermsEnum_init_(t_PrefixTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          PrefixTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::TermsEnum::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            INT_CALL(object = PrefixTermsEnum(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/QueryParserConstants.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *QueryParserConstants::class$ = NULL;
          jmethodID *QueryParserConstants::mids$ = NULL;
          bool QueryParserConstants::live$ = false;
          jint QueryParserConstants::AND = (jint) 0;
          jint QueryParserConstants::BAREOPER = (jint) 0;
          jint QueryParserConstants::Boost = (jint) 0;
          jint QueryParserConstants::CARAT = (jint) 0;
          jint QueryParserConstants::COLON = (jint) 0;
          jint QueryParserConstants::DEFAULT = (jint) 0;
          jint QueryParserConstants::EOF = (jint) 0;
          jint QueryParserConstants::FUZZY_SLOP = (jint) 0;
          jint QueryParserConstants::LPAREN = (jint) 0;
          jint QueryParserConstants::MINUS = (jint) 0;
          jint QueryParserConstants::NOT = (jint) 0;
          jint QueryParserConstants::NUMBER = (jint) 0;
          jint QueryParserConstants::OR = (jint) 0;
          jint QueryParserConstants::PLUS = (jint) 0;
          jint QueryParserConstants::PREFIXTERM = (jint) 0;
          jint QueryParserConstants::QUOTED = (jint) 0;
          jint QueryParserConstants::RANGEEX_END = (jint) 0;
          jint QueryParserConstants::RANGEEX_START = (jint) 0;
          jint QueryParserConstants::RANGEIN_END = (jint) 0;
          jint QueryParserConstants::RANGEIN_START = (jint) 0;
          jint QueryParserConstants::RANGE_GOOP = (jint) 0;
          jint QueryParserConstants::RANGE_QUOTED = (jint) 0;
          jint QueryParserConstants::RANGE_TO = (jint) 0;
          jint QueryParserConstants::REGEXPTERM = (jint) 0;
          jint QueryParserConstants::RPAREN = (jint) 0;
          jint QueryParserConstants::Range = (jint) 0;
          jint QueryParserConstants::STAR = (jint) 0;
          jint QueryParserConstants::TERM = (jint) 0;
          jint QueryParserConstants::WILDTERM = (jint) 0;
          jint QueryParserConstants::_ESCAPED_CHAR = (jint) 0;
          jint QueryParserConstants::_NUM_CHAR = (jint) 0;
          jint QueryParserConstants::_QUOTED_CHAR = (jint) 0;
          jint QueryParserConstants::_TERM_CHAR = (jint) 0;
          jint QueryParserConstants::_TERM_START_CHAR = (jint) 0;
          jint QueryParserConstants::_WHITESPACE = (jint) 0;
          JArray< ::java::lang::String > *QueryParserConstants::tokenImage = NULL;

          jclass QueryParserConstants::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/QueryParserConstants");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              AND = env->getStaticIntField(cls, "AND");
              BAREOPER = env->getStaticIntField(cls, "BAREOPER");
              Boost = env->getStaticIntField(cls, "Boost");
              CARAT = env->getStaticIntField(cls, "CARAT");
              COLON = env->getStaticIntField(cls, "COLON");
              DEFAULT = env->getStaticIntField(cls, "DEFAULT");
              EOF = env->getStaticIntField(cls, "EOF");
              FUZZY_SLOP = env->getStaticIntField(cls, "FUZZY_SLOP");
              LPAREN = env->getStaticIntField(cls, "LPAREN");
              MINUS = env->getStaticIntField(cls, "MINUS");
              NOT = env->getStaticIntField(cls, "NOT");
              NUMBER = env->getStaticIntField(cls, "NUMBER");
              OR = env->getStaticIntField(cls, "OR");
              PLUS = env->getStaticIntField(cls, "PLUS");
              PREFIXTERM = env->getStaticIntField(cls, "PREFIXTERM");
              QUOTED = env->getStaticIntField(cls, "QUOTED");
              RANGEEX_END = env->getStaticIntField(cls, "RANGEEX_END");
              RANGEEX_START = env->getStaticIntField(cls, "RANGEEX_START");
              RANGEIN_END = env->getStaticIntField(cls, "RANGEIN_END");
              RANGEIN_START = env->getStaticIntField(cls, "RANGEIN_START");
              RANGE_GOOP = env->getStaticIntField(cls, "RANGE_GOOP");
              RANGE_QUOTED = env->getStaticIntField(cls, "RANGE_QUOTED");
              RANGE_TO = env->getStaticIntField(cls, "RANGE_TO");
              REGEXPTERM = env->getStaticIntField(cls, "REGEXPTERM");
              RPAREN = env->getStaticIntField(cls, "RPAREN");
              Range = env->getStaticIntField(cls, "Range");
              STAR = env->getStaticIntField(cls, "STAR");
              TERM = env->getStaticIntField(cls, "TERM");
              WILDTERM = env->getStaticIntField(cls, "WILDTERM");
              _ESCAPED_CHAR = env->getStaticIntField(cls, "_ESCAPED_CHAR");
              _NUM_CHAR = env->getStaticIntField(cls, "_NUM_CHAR");
              _QUOTED_CHAR = env->getStaticIntField(cls, "_QUOTED_CHAR");
              _TERM_CHAR = env->getStaticIntField(cls, "_TERM_CHAR");
              _TERM_START_CHAR = env->getStaticIntField(cls, "_TERM_START_CHAR");
              _WHITESPACE = env->getStaticIntField(cls, "_WHITESPACE");
              tokenImage = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "tokenImage", "[Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_QueryParserConstants_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParserConstants_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_QueryParserConstants__methods_[] = {
            DECLARE_METHOD(t_QueryParserConstants, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserConstants, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryParserConstants, t_QueryParserConstants, ::java::lang::Object, QueryParserConstants, abstract_init, 0, 0, 0, 0, 0);

          void t_QueryParserConstants::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryParserConstants), module, "QueryParserConstants", 0);
          }

          void t_QueryParserConstants::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "class_", make_descriptor(QueryParserConstants::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "wrapfn_", make_descriptor(t_QueryParserConstants::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(QueryParserConstants::initializeClass);
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "AND", make_descriptor(QueryParserConstants::AND));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "BAREOPER", make_descriptor(QueryParserConstants::BAREOPER));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "Boost", make_descriptor(QueryParserConstants::Boost));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "CARAT", make_descriptor(QueryParserConstants::CARAT));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "COLON", make_descriptor(QueryParserConstants::COLON));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "DEFAULT", make_descriptor(QueryParserConstants::DEFAULT));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "EOF", make_descriptor(QueryParserConstants::EOF));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "FUZZY_SLOP", make_descriptor(QueryParserConstants::FUZZY_SLOP));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "LPAREN", make_descriptor(QueryParserConstants::LPAREN));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "MINUS", make_descriptor(QueryParserConstants::MINUS));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "NOT", make_descriptor(QueryParserConstants::NOT));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "NUMBER", make_descriptor(QueryParserConstants::NUMBER));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "OR", make_descriptor(QueryParserConstants::OR));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "PLUS", make_descriptor(QueryParserConstants::PLUS));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "PREFIXTERM", make_descriptor(QueryParserConstants::PREFIXTERM));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "QUOTED", make_descriptor(QueryParserConstants::QUOTED));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RANGEEX_END", make_descriptor(QueryParserConstants::RANGEEX_END));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RANGEEX_START", make_descriptor(QueryParserConstants::RANGEEX_START));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RANGEIN_END", make_descriptor(QueryParserConstants::RANGEIN_END));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RANGEIN_START", make_descriptor(QueryParserConstants::RANGEIN_START));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RANGE_GOOP", make_descriptor(QueryParserConstants::RANGE_GOOP));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RANGE_QUOTED", make_descriptor(QueryParserConstants::RANGE_QUOTED));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RANGE_TO", make_descriptor(QueryParserConstants::RANGE_TO));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "REGEXPTERM", make_descriptor(QueryParserConstants::REGEXPTERM));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RPAREN", make_descriptor(QueryParserConstants::RPAREN));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "Range", make_descriptor(QueryParserConstants::Range));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "STAR", make_descriptor(QueryParserConstants::STAR));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "TERM", make_descriptor(QueryParserConstants::TERM));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "WILDTERM", make_descriptor(QueryParserConstants::WILDTERM));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_ESCAPED_CHAR", make_descriptor(QueryParserConstants::_ESCAPED_CHAR));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_NUM_CHAR", make_descriptor(QueryParserConstants::_NUM_CHAR));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_QUOTED_CHAR", make_descriptor(QueryParserConstants::_QUOTED_CHAR));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_TERM_CHAR", make_descriptor(QueryParserConstants::_TERM_CHAR));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_TERM_START_CHAR", make_descriptor(QueryParserConstants::_TERM_START_CHAR));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_WHITESPACE", make_descriptor(QueryParserConstants::_WHITESPACE));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "tokenImage", make_descriptor(JArray<jstring>(QueryParserConstants::tokenImage->this$).wrap()));
          }

          static PyObject *t_QueryParserConstants_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryParserConstants::initializeClass, 1)))
              return NULL;
            return t_QueryParserConstants::wrap_Object(QueryParserConstants(((t_QueryParserConstants *) arg)->object.this$));
          }
          static PyObject *t_QueryParserConstants_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryParserConstants::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/MonotonicAppendingLongBuffer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *MonotonicAppendingLongBuffer::class$ = NULL;
          jmethodID *MonotonicAppendingLongBuffer::mids$ = NULL;
          bool MonotonicAppendingLongBuffer::live$ = false;

          jclass MonotonicAppendingLongBuffer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/MonotonicAppendingLongBuffer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_init$_a74e6883] = env->getMethodID(cls, "<init>", "(IIF)V");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MonotonicAppendingLongBuffer::MonotonicAppendingLongBuffer() : ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          MonotonicAppendingLongBuffer::MonotonicAppendingLongBuffer(jfloat a0) : ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          MonotonicAppendingLongBuffer::MonotonicAppendingLongBuffer(jint a0, jint a1, jfloat a2) : ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer(env->newObject(initializeClass, &mids$, mid_init$_a74e6883, a0, a1, a2)) {}

          jlong MonotonicAppendingLongBuffer::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_MonotonicAppendingLongBuffer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MonotonicAppendingLongBuffer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MonotonicAppendingLongBuffer_init_(t_MonotonicAppendingLongBuffer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MonotonicAppendingLongBuffer_ramBytesUsed(t_MonotonicAppendingLongBuffer *self, PyObject *args);

          static PyMethodDef t_MonotonicAppendingLongBuffer__methods_[] = {
            DECLARE_METHOD(t_MonotonicAppendingLongBuffer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MonotonicAppendingLongBuffer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MonotonicAppendingLongBuffer, ramBytesUsed, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MonotonicAppendingLongBuffer, t_MonotonicAppendingLongBuffer, ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer, MonotonicAppendingLongBuffer, t_MonotonicAppendingLongBuffer_init_, 0, 0, 0, 0, 0);

          void t_MonotonicAppendingLongBuffer::install(PyObject *module)
          {
            installType(&PY_TYPE(MonotonicAppendingLongBuffer), module, "MonotonicAppendingLongBuffer", 0);
          }

          void t_MonotonicAppendingLongBuffer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MonotonicAppendingLongBuffer).tp_dict, "class_", make_descriptor(MonotonicAppendingLongBuffer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MonotonicAppendingLongBuffer).tp_dict, "wrapfn_", make_descriptor(t_MonotonicAppendingLongBuffer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MonotonicAppendingLongBuffer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MonotonicAppendingLongBuffer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MonotonicAppendingLongBuffer::initializeClass, 1)))
              return NULL;
            return t_MonotonicAppendingLongBuffer::wrap_Object(MonotonicAppendingLongBuffer(((t_MonotonicAppendingLongBuffer *) arg)->object.this$));
          }
          static PyObject *t_MonotonicAppendingLongBuffer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MonotonicAppendingLongBuffer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MonotonicAppendingLongBuffer_init_(t_MonotonicAppendingLongBuffer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                MonotonicAppendingLongBuffer object((jobject) NULL);

                INT_CALL(object = MonotonicAppendingLongBuffer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                MonotonicAppendingLongBuffer object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = MonotonicAppendingLongBuffer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                jint a0;
                jint a1;
                jfloat a2;
                MonotonicAppendingLongBuffer object((jobject) NULL);

                if (!parseArgs(args, "IIF", &a0, &a1, &a2))
                {
                  INT_CALL(object = MonotonicAppendingLongBuffer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MonotonicAppendingLongBuffer_ramBytesUsed(t_MonotonicAppendingLongBuffer *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(MonotonicAppendingLongBuffer), (PyObject *) self, "ramBytesUsed", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanNormalizationFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanNormalizationFilterFactory::class$ = NULL;
          jmethodID *GermanNormalizationFilterFactory::mids$ = NULL;
          bool GermanNormalizationFilterFactory::live$ = false;

          jclass GermanNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanNormalizationFilterFactory::GermanNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GermanNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory GermanNormalizationFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanNormalizationFilterFactory_init_(t_GermanNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanNormalizationFilterFactory_create(t_GermanNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_GermanNormalizationFilterFactory_getMultiTermComponent(t_GermanNormalizationFilterFactory *self);
          static PyObject *t_GermanNormalizationFilterFactory_get__multiTermComponent(t_GermanNormalizationFilterFactory *self, void *data);
          static PyGetSetDef t_GermanNormalizationFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_GermanNormalizationFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GermanNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GermanNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_GermanNormalizationFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanNormalizationFilterFactory, t_GermanNormalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GermanNormalizationFilterFactory, t_GermanNormalizationFilterFactory_init_, 0, 0, t_GermanNormalizationFilterFactory__fields_, 0, 0);

          void t_GermanNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanNormalizationFilterFactory), module, "GermanNormalizationFilterFactory", 0);
          }

          void t_GermanNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanNormalizationFilterFactory).tp_dict, "class_", make_descriptor(GermanNormalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanNormalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GermanNormalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanNormalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GermanNormalizationFilterFactory::wrap_Object(GermanNormalizationFilterFactory(((t_GermanNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GermanNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanNormalizationFilterFactory_init_(t_GermanNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GermanNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GermanNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanNormalizationFilterFactory_create(t_GermanNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GermanNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_GermanNormalizationFilterFactory_getMultiTermComponent(t_GermanNormalizationFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_GermanNormalizationFilterFactory_get__multiTermComponent(t_GermanNormalizationFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/mlt/MoreLikeThis.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/search/similarities/TFIDFSimilarity.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/PriorityQueue.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace mlt {

          ::java::lang::Class *MoreLikeThis::class$ = NULL;
          jmethodID *MoreLikeThis::mids$ = NULL;
          bool MoreLikeThis::live$ = false;
          jboolean MoreLikeThis::DEFAULT_BOOST = (jboolean) 0;
          JArray< ::java::lang::String > *MoreLikeThis::DEFAULT_FIELD_NAMES = NULL;
          jint MoreLikeThis::DEFAULT_MAX_DOC_FREQ = (jint) 0;
          jint MoreLikeThis::DEFAULT_MAX_NUM_TOKENS_PARSED = (jint) 0;
          jint MoreLikeThis::DEFAULT_MAX_QUERY_TERMS = (jint) 0;
          jint MoreLikeThis::DEFAULT_MAX_WORD_LENGTH = (jint) 0;
          jint MoreLikeThis::DEFAULT_MIN_DOC_FREQ = (jint) 0;
          jint MoreLikeThis::DEFAULT_MIN_TERM_FREQ = (jint) 0;
          jint MoreLikeThis::DEFAULT_MIN_WORD_LENGTH = (jint) 0;
          ::java::util::Set *MoreLikeThis::DEFAULT_STOP_WORDS = NULL;

          jclass MoreLikeThis::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/mlt/MoreLikeThis");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7d7eaea9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;)V");
              mids$[mid_init$_ac25be47] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/similarities/TFIDFSimilarity;)V");
              mids$[mid_describeParams_14c7b5c5] = env->getMethodID(cls, "describeParams", "()Ljava/lang/String;");
              mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
              mids$[mid_getBoostFactor_54c6a176] = env->getMethodID(cls, "getBoostFactor", "()F");
              mids$[mid_getFieldNames_2e6d5245] = env->getMethodID(cls, "getFieldNames", "()[Ljava/lang/String;");
              mids$[mid_getMaxDocFreq_54c6a179] = env->getMethodID(cls, "getMaxDocFreq", "()I");
              mids$[mid_getMaxNumTokensParsed_54c6a179] = env->getMethodID(cls, "getMaxNumTokensParsed", "()I");
              mids$[mid_getMaxQueryTerms_54c6a179] = env->getMethodID(cls, "getMaxQueryTerms", "()I");
              mids$[mid_getMaxWordLen_54c6a179] = env->getMethodID(cls, "getMaxWordLen", "()I");
              mids$[mid_getMinDocFreq_54c6a179] = env->getMethodID(cls, "getMinDocFreq", "()I");
              mids$[mid_getMinTermFreq_54c6a179] = env->getMethodID(cls, "getMinTermFreq", "()I");
              mids$[mid_getMinWordLen_54c6a179] = env->getMethodID(cls, "getMinWordLen", "()I");
              mids$[mid_getSimilarity_41a9d5af] = env->getMethodID(cls, "getSimilarity", "()Lorg/apache/lucene/search/similarities/TFIDFSimilarity;");
              mids$[mid_getStopWords_03e99967] = env->getMethodID(cls, "getStopWords", "()Ljava/util/Set;");
              mids$[mid_isBoost_54c6a16a] = env->getMethodID(cls, "isBoost", "()Z");
              mids$[mid_like_2ad233cc] = env->getMethodID(cls, "like", "(I)Lorg/apache/lucene/search/Query;");
              mids$[mid_like_8dd03cea] = env->getMethodID(cls, "like", "(Ljava/io/Reader;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_like_e557659a] = env->getMethodID(cls, "like", "(Ljava/lang/String;[Ljava/io/Reader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_retrieveInterestingTerms_d74df9a3] = env->getMethodID(cls, "retrieveInterestingTerms", "(I)[Ljava/lang/String;");
              mids$[mid_retrieveInterestingTerms_bf65abe1] = env->getMethodID(cls, "retrieveInterestingTerms", "(Ljava/io/Reader;Ljava/lang/String;)[Ljava/lang/String;");
              mids$[mid_retrieveTerms_df466ac9] = env->getMethodID(cls, "retrieveTerms", "(I)Lorg/apache/lucene/util/PriorityQueue;");
              mids$[mid_retrieveTerms_ed0c2893] = env->getMethodID(cls, "retrieveTerms", "(Ljava/io/Reader;Ljava/lang/String;)Lorg/apache/lucene/util/PriorityQueue;");
              mids$[mid_setAnalyzer_31619410] = env->getMethodID(cls, "setAnalyzer", "(Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_setBoost_bb0c767f] = env->getMethodID(cls, "setBoost", "(Z)V");
              mids$[mid_setBoostFactor_06298cab] = env->getMethodID(cls, "setBoostFactor", "(F)V");
              mids$[mid_setFieldNames_4dd4540c] = env->getMethodID(cls, "setFieldNames", "([Ljava/lang/String;)V");
              mids$[mid_setMaxDocFreq_39c7bd3c] = env->getMethodID(cls, "setMaxDocFreq", "(I)V");
              mids$[mid_setMaxDocFreqPct_39c7bd3c] = env->getMethodID(cls, "setMaxDocFreqPct", "(I)V");
              mids$[mid_setMaxNumTokensParsed_39c7bd3c] = env->getMethodID(cls, "setMaxNumTokensParsed", "(I)V");
              mids$[mid_setMaxQueryTerms_39c7bd3c] = env->getMethodID(cls, "setMaxQueryTerms", "(I)V");
              mids$[mid_setMaxWordLen_39c7bd3c] = env->getMethodID(cls, "setMaxWordLen", "(I)V");
              mids$[mid_setMinDocFreq_39c7bd3c] = env->getMethodID(cls, "setMinDocFreq", "(I)V");
              mids$[mid_setMinTermFreq_39c7bd3c] = env->getMethodID(cls, "setMinTermFreq", "(I)V");
              mids$[mid_setMinWordLen_39c7bd3c] = env->getMethodID(cls, "setMinWordLen", "(I)V");
              mids$[mid_setSimilarity_8af31e2e] = env->getMethodID(cls, "setSimilarity", "(Lorg/apache/lucene/search/similarities/TFIDFSimilarity;)V");
              mids$[mid_setStopWords_fb4f2b26] = env->getMethodID(cls, "setStopWords", "(Ljava/util/Set;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_BOOST = env->getStaticBooleanField(cls, "DEFAULT_BOOST");
              DEFAULT_FIELD_NAMES = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "DEFAULT_FIELD_NAMES", "[Ljava/lang/String;"));
              DEFAULT_MAX_DOC_FREQ = env->getStaticIntField(cls, "DEFAULT_MAX_DOC_FREQ");
              DEFAULT_MAX_NUM_TOKENS_PARSED = env->getStaticIntField(cls, "DEFAULT_MAX_NUM_TOKENS_PARSED");
              DEFAULT_MAX_QUERY_TERMS = env->getStaticIntField(cls, "DEFAULT_MAX_QUERY_TERMS");
              DEFAULT_MAX_WORD_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_WORD_LENGTH");
              DEFAULT_MIN_DOC_FREQ = env->getStaticIntField(cls, "DEFAULT_MIN_DOC_FREQ");
              DEFAULT_MIN_TERM_FREQ = env->getStaticIntField(cls, "DEFAULT_MIN_TERM_FREQ");
              DEFAULT_MIN_WORD_LENGTH = env->getStaticIntField(cls, "DEFAULT_MIN_WORD_LENGTH");
              DEFAULT_STOP_WORDS = new ::java::util::Set(env->getStaticObjectField(cls, "DEFAULT_STOP_WORDS", "Ljava/util/Set;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MoreLikeThis::MoreLikeThis(const ::org::apache::lucene::index::IndexReader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7d7eaea9, a0.this$)) {}

          MoreLikeThis::MoreLikeThis(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::similarities::TFIDFSimilarity & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ac25be47, a0.this$, a1.this$)) {}

          ::java::lang::String MoreLikeThis::describeParams() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_describeParams_14c7b5c5]));
          }

          ::org::apache::lucene::analysis::Analyzer MoreLikeThis::getAnalyzer() const
          {
            return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
          }

          jfloat MoreLikeThis::getBoostFactor() const
          {
            return env->callFloatMethod(this$, mids$[mid_getBoostFactor_54c6a176]);
          }

          JArray< ::java::lang::String > MoreLikeThis::getFieldNames() const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getFieldNames_2e6d5245]));
          }

          jint MoreLikeThis::getMaxDocFreq() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxDocFreq_54c6a179]);
          }

          jint MoreLikeThis::getMaxNumTokensParsed() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxNumTokensParsed_54c6a179]);
          }

          jint MoreLikeThis::getMaxQueryTerms() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxQueryTerms_54c6a179]);
          }

          jint MoreLikeThis::getMaxWordLen() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxWordLen_54c6a179]);
          }

          jint MoreLikeThis::getMinDocFreq() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinDocFreq_54c6a179]);
          }

          jint MoreLikeThis::getMinTermFreq() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinTermFreq_54c6a179]);
          }

          jint MoreLikeThis::getMinWordLen() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinWordLen_54c6a179]);
          }

          ::org::apache::lucene::search::similarities::TFIDFSimilarity MoreLikeThis::getSimilarity() const
          {
            return ::org::apache::lucene::search::similarities::TFIDFSimilarity(env->callObjectMethod(this$, mids$[mid_getSimilarity_41a9d5af]));
          }

          ::java::util::Set MoreLikeThis::getStopWords() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getStopWords_03e99967]));
          }

          jboolean MoreLikeThis::isBoost() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isBoost_54c6a16a]);
          }

          ::org::apache::lucene::search::Query MoreLikeThis::like(jint a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_like_2ad233cc], a0));
          }

          ::org::apache::lucene::search::Query MoreLikeThis::like(const ::java::io::Reader & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_like_8dd03cea], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::Query MoreLikeThis::like(const ::java::lang::String & a0, const JArray< ::java::io::Reader > & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_like_e557659a], a0.this$, a1.this$));
          }

          JArray< ::java::lang::String > MoreLikeThis::retrieveInterestingTerms(jint a0) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_retrieveInterestingTerms_d74df9a3], a0));
          }

          JArray< ::java::lang::String > MoreLikeThis::retrieveInterestingTerms(const ::java::io::Reader & a0, const ::java::lang::String & a1) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_retrieveInterestingTerms_bf65abe1], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::PriorityQueue MoreLikeThis::retrieveTerms(jint a0) const
          {
            return ::org::apache::lucene::util::PriorityQueue(env->callObjectMethod(this$, mids$[mid_retrieveTerms_df466ac9], a0));
          }

          ::org::apache::lucene::util::PriorityQueue MoreLikeThis::retrieveTerms(const ::java::io::Reader & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::util::PriorityQueue(env->callObjectMethod(this$, mids$[mid_retrieveTerms_ed0c2893], a0.this$, a1.this$));
          }

          void MoreLikeThis::setAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAnalyzer_31619410], a0.this$);
          }

          void MoreLikeThis::setBoost(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBoost_bb0c767f], a0);
          }

          void MoreLikeThis::setBoostFactor(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBoostFactor_06298cab], a0);
          }

          void MoreLikeThis::setFieldNames(const JArray< ::java::lang::String > & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFieldNames_4dd4540c], a0.this$);
          }

          void MoreLikeThis::setMaxDocFreq(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxDocFreq_39c7bd3c], a0);
          }

          void MoreLikeThis::setMaxDocFreqPct(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxDocFreqPct_39c7bd3c], a0);
          }

          void MoreLikeThis::setMaxNumTokensParsed(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxNumTokensParsed_39c7bd3c], a0);
          }

          void MoreLikeThis::setMaxQueryTerms(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxQueryTerms_39c7bd3c], a0);
          }

          void MoreLikeThis::setMaxWordLen(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxWordLen_39c7bd3c], a0);
          }

          void MoreLikeThis::setMinDocFreq(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinDocFreq_39c7bd3c], a0);
          }

          void MoreLikeThis::setMinTermFreq(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinTermFreq_39c7bd3c], a0);
          }

          void MoreLikeThis::setMinWordLen(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinWordLen_39c7bd3c], a0);
          }

          void MoreLikeThis::setSimilarity(const ::org::apache::lucene::search::similarities::TFIDFSimilarity & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setSimilarity_8af31e2e], a0.this$);
          }

          void MoreLikeThis::setStopWords(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStopWords_fb4f2b26], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace mlt {
          static PyObject *t_MoreLikeThis_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MoreLikeThis_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MoreLikeThis_init_(t_MoreLikeThis *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MoreLikeThis_describeParams(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getAnalyzer(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getBoostFactor(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getFieldNames(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMaxDocFreq(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMaxNumTokensParsed(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMaxQueryTerms(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMaxWordLen(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMinDocFreq(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMinTermFreq(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMinWordLen(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getSimilarity(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getStopWords(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_isBoost(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_like(t_MoreLikeThis *self, PyObject *args);
          static PyObject *t_MoreLikeThis_retrieveInterestingTerms(t_MoreLikeThis *self, PyObject *args);
          static PyObject *t_MoreLikeThis_retrieveTerms(t_MoreLikeThis *self, PyObject *args);
          static PyObject *t_MoreLikeThis_setAnalyzer(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setBoost(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setBoostFactor(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setFieldNames(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMaxDocFreq(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMaxDocFreqPct(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMaxNumTokensParsed(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMaxQueryTerms(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMaxWordLen(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMinDocFreq(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMinTermFreq(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMinWordLen(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setSimilarity(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setStopWords(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_get__analyzer(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__analyzer(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__boost(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__boost(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__boostFactor(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__boostFactor(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__fieldNames(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__fieldNames(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__maxDocFreq(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__maxDocFreq(t_MoreLikeThis *self, PyObject *arg, void *data);
          static int t_MoreLikeThis_set__maxDocFreqPct(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__maxNumTokensParsed(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__maxNumTokensParsed(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__maxQueryTerms(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__maxQueryTerms(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__maxWordLen(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__maxWordLen(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__minDocFreq(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__minDocFreq(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__minTermFreq(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__minTermFreq(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__minWordLen(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__minWordLen(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__similarity(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__similarity(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__stopWords(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__stopWords(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyGetSetDef t_MoreLikeThis__fields_[] = {
            DECLARE_GETSET_FIELD(t_MoreLikeThis, analyzer),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, boost),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, boostFactor),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, fieldNames),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, maxDocFreq),
            DECLARE_SET_FIELD(t_MoreLikeThis, maxDocFreqPct),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, maxNumTokensParsed),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, maxQueryTerms),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, maxWordLen),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, minDocFreq),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, minTermFreq),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, minWordLen),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, similarity),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, stopWords),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MoreLikeThis__methods_[] = {
            DECLARE_METHOD(t_MoreLikeThis, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MoreLikeThis, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MoreLikeThis, describeParams, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getAnalyzer, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getBoostFactor, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getFieldNames, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMaxDocFreq, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMaxNumTokensParsed, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMaxQueryTerms, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMaxWordLen, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMinDocFreq, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMinTermFreq, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMinWordLen, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getSimilarity, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getStopWords, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, isBoost, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, like, METH_VARARGS),
            DECLARE_METHOD(t_MoreLikeThis, retrieveInterestingTerms, METH_VARARGS),
            DECLARE_METHOD(t_MoreLikeThis, retrieveTerms, METH_VARARGS),
            DECLARE_METHOD(t_MoreLikeThis, setAnalyzer, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setBoost, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setBoostFactor, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setFieldNames, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMaxDocFreq, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMaxDocFreqPct, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMaxNumTokensParsed, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMaxQueryTerms, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMaxWordLen, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMinDocFreq, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMinTermFreq, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMinWordLen, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setSimilarity, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setStopWords, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MoreLikeThis, t_MoreLikeThis, ::java::lang::Object, MoreLikeThis, t_MoreLikeThis_init_, 0, 0, t_MoreLikeThis__fields_, 0, 0);

          void t_MoreLikeThis::install(PyObject *module)
          {
            installType(&PY_TYPE(MoreLikeThis), module, "MoreLikeThis", 0);
          }

          void t_MoreLikeThis::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "class_", make_descriptor(MoreLikeThis::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "wrapfn_", make_descriptor(t_MoreLikeThis::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(MoreLikeThis::initializeClass);
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_BOOST", make_descriptor(MoreLikeThis::DEFAULT_BOOST));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_FIELD_NAMES", make_descriptor(JArray<jstring>(MoreLikeThis::DEFAULT_FIELD_NAMES->this$).wrap()));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_MAX_DOC_FREQ", make_descriptor(MoreLikeThis::DEFAULT_MAX_DOC_FREQ));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_MAX_NUM_TOKENS_PARSED", make_descriptor(MoreLikeThis::DEFAULT_MAX_NUM_TOKENS_PARSED));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_MAX_QUERY_TERMS", make_descriptor(MoreLikeThis::DEFAULT_MAX_QUERY_TERMS));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_MAX_WORD_LENGTH", make_descriptor(MoreLikeThis::DEFAULT_MAX_WORD_LENGTH));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_MIN_DOC_FREQ", make_descriptor(MoreLikeThis::DEFAULT_MIN_DOC_FREQ));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_MIN_TERM_FREQ", make_descriptor(MoreLikeThis::DEFAULT_MIN_TERM_FREQ));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_MIN_WORD_LENGTH", make_descriptor(MoreLikeThis::DEFAULT_MIN_WORD_LENGTH));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_STOP_WORDS", make_descriptor(::java::util::t_Set::wrap_Object(*MoreLikeThis::DEFAULT_STOP_WORDS)));
          }

          static PyObject *t_MoreLikeThis_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MoreLikeThis::initializeClass, 1)))
              return NULL;
            return t_MoreLikeThis::wrap_Object(MoreLikeThis(((t_MoreLikeThis *) arg)->object.this$));
          }
          static PyObject *t_MoreLikeThis_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MoreLikeThis::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MoreLikeThis_init_(t_MoreLikeThis *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                MoreLikeThis object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
                {
                  INT_CALL(object = MoreLikeThis(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::org::apache::lucene::search::similarities::TFIDFSimilarity a1((jobject) NULL);
                MoreLikeThis object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::similarities::TFIDFSimilarity::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = MoreLikeThis(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MoreLikeThis_describeParams(t_MoreLikeThis *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.describeParams());
            return j2p(result);
          }

          static PyObject *t_MoreLikeThis_getAnalyzer(t_MoreLikeThis *self)
          {
            ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
            OBJ_CALL(result = self->object.getAnalyzer());
            return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
          }

          static PyObject *t_MoreLikeThis_getBoostFactor(t_MoreLikeThis *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getBoostFactor());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_MoreLikeThis_getFieldNames(t_MoreLikeThis *self)
          {
            JArray< ::java::lang::String > result((jobject) NULL);
            OBJ_CALL(result = self->object.getFieldNames());
            return JArray<jstring>(result.this$).wrap();
          }

          static PyObject *t_MoreLikeThis_getMaxDocFreq(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxDocFreq());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMaxNumTokensParsed(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxNumTokensParsed());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMaxQueryTerms(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxQueryTerms());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMaxWordLen(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxWordLen());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMinDocFreq(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinDocFreq());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMinTermFreq(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinTermFreq());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMinWordLen(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinWordLen());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getSimilarity(t_MoreLikeThis *self)
          {
            ::org::apache::lucene::search::similarities::TFIDFSimilarity result((jobject) NULL);
            OBJ_CALL(result = self->object.getSimilarity());
            return ::org::apache::lucene::search::similarities::t_TFIDFSimilarity::wrap_Object(result);
          }

          static PyObject *t_MoreLikeThis_getStopWords(t_MoreLikeThis *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.getStopWords());
            return ::java::util::t_Set::wrap_Object(result);
          }

          static PyObject *t_MoreLikeThis_isBoost(t_MoreLikeThis *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isBoost());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_MoreLikeThis_like(t_MoreLikeThis *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.like(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "ks", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.like(a0, a1));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                JArray< ::java::io::Reader > a1((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "s[k", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.like(a0, a1));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "like", args);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_retrieveInterestingTerms(t_MoreLikeThis *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.retrieveInterestingTerms(a0));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "ks", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.retrieveInterestingTerms(a0, a1));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "retrieveInterestingTerms", args);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_retrieveTerms(t_MoreLikeThis *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                ::org::apache::lucene::util::PriorityQueue result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.retrieveTerms(a0));
                  return ::org::apache::lucene::util::t_PriorityQueue::wrap_Object(result, &::java::lang::PY_TYPE(Object));
                }
              }
              break;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::util::PriorityQueue result((jobject) NULL);

                if (!parseArgs(args, "ks", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.retrieveTerms(a0, a1));
                  return ::org::apache::lucene::util::t_PriorityQueue::wrap_Object(result, &::java::lang::PY_TYPE(Object));
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "retrieveTerms", args);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setAnalyzer(t_MoreLikeThis *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setAnalyzer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAnalyzer", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setBoost(t_MoreLikeThis *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setBoost(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setBoost", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setBoostFactor(t_MoreLikeThis *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setBoostFactor(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setBoostFactor", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setFieldNames(t_MoreLikeThis *self, PyObject *arg)
          {
            JArray< ::java::lang::String > a0((jobject) NULL);

            if (!parseArg(arg, "[s", &a0))
            {
              OBJ_CALL(self->object.setFieldNames(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFieldNames", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMaxDocFreq(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxDocFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxDocFreq", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMaxDocFreqPct(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxDocFreqPct(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxDocFreqPct", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMaxNumTokensParsed(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxNumTokensParsed(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxNumTokensParsed", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMaxQueryTerms(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxQueryTerms(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxQueryTerms", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMaxWordLen(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxWordLen(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxWordLen", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMinDocFreq(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinDocFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinDocFreq", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMinTermFreq(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinTermFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinTermFreq", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMinWordLen(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinWordLen(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinWordLen", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setSimilarity(t_MoreLikeThis *self, PyObject *arg)
          {
            ::org::apache::lucene::search::similarities::TFIDFSimilarity a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::TFIDFSimilarity::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setSimilarity(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setSimilarity", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setStopWords(t_MoreLikeThis *self, PyObject *arg)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.setStopWords(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStopWords", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_get__analyzer(t_MoreLikeThis *self, void *data)
          {
            ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
            OBJ_CALL(value = self->object.getAnalyzer());
            return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
          }
          static int t_MoreLikeThis_set__analyzer(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &value))
              {
                INT_CALL(self->object.setAnalyzer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "analyzer", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__boost(t_MoreLikeThis *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isBoost());
            Py_RETURN_BOOL(value);
          }
          static int t_MoreLikeThis_set__boost(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setBoost(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "boost", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__boostFactor(t_MoreLikeThis *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getBoostFactor());
            return PyFloat_FromDouble((double) value);
          }
          static int t_MoreLikeThis_set__boostFactor(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setBoostFactor(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "boostFactor", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__fieldNames(t_MoreLikeThis *self, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldNames());
            return JArray<jstring>(value.this$).wrap();
          }
          static int t_MoreLikeThis_set__fieldNames(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              JArray< ::java::lang::String > value((jobject) NULL);
              if (!parseArg(arg, "[s", &value))
              {
                INT_CALL(self->object.setFieldNames(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fieldNames", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__maxDocFreq(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxDocFreq());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__maxDocFreq(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxDocFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxDocFreq", arg);
            return -1;
          }

          static int t_MoreLikeThis_set__maxDocFreqPct(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxDocFreqPct(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxDocFreqPct", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__maxNumTokensParsed(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxNumTokensParsed());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__maxNumTokensParsed(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxNumTokensParsed(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxNumTokensParsed", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__maxQueryTerms(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxQueryTerms());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__maxQueryTerms(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxQueryTerms(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxQueryTerms", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__maxWordLen(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxWordLen());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__maxWordLen(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxWordLen(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxWordLen", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__minDocFreq(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinDocFreq());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__minDocFreq(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinDocFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minDocFreq", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__minTermFreq(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinTermFreq());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__minTermFreq(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinTermFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minTermFreq", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__minWordLen(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinWordLen());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__minWordLen(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinWordLen(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minWordLen", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__similarity(t_MoreLikeThis *self, void *data)
          {
            ::org::apache::lucene::search::similarities::TFIDFSimilarity value((jobject) NULL);
            OBJ_CALL(value = self->object.getSimilarity());
            return ::org::apache::lucene::search::similarities::t_TFIDFSimilarity::wrap_Object(value);
          }
          static int t_MoreLikeThis_set__similarity(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::similarities::TFIDFSimilarity value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::TFIDFSimilarity::initializeClass, &value))
              {
                INT_CALL(self->object.setSimilarity(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "similarity", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__stopWords(t_MoreLikeThis *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object.getStopWords());
            return ::java::util::t_Set::wrap_Object(value);
          }
          static int t_MoreLikeThis_set__stopWords(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Set value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Set::initializeClass, &value))
              {
                INT_CALL(self->object.setStopWords(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stopWords", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/WAH8DocIdSet.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *WAH8DocIdSet::class$ = NULL;
        jmethodID *WAH8DocIdSet::mids$ = NULL;
        bool WAH8DocIdSet::live$ = false;
        jint WAH8DocIdSet::DEFAULT_INDEX_INTERVAL = (jint) 0;

        jclass WAH8DocIdSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/WAH8DocIdSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_cardinality_54c6a179] = env->getMethodID(cls, "cardinality", "()I");
            mids$[mid_intersect_b06562c3] = env->getStaticMethodID(cls, "intersect", "(Ljava/util/Collection;)Lorg/apache/lucene/util/WAH8DocIdSet;");
            mids$[mid_intersect_8ad105f3] = env->getStaticMethodID(cls, "intersect", "(Ljava/util/Collection;I)Lorg/apache/lucene/util/WAH8DocIdSet;");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_union_b06562c3] = env->getStaticMethodID(cls, "union", "(Ljava/util/Collection;)Lorg/apache/lucene/util/WAH8DocIdSet;");
            mids$[mid_union_8ad105f3] = env->getStaticMethodID(cls, "union", "(Ljava/util/Collection;I)Lorg/apache/lucene/util/WAH8DocIdSet;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_INDEX_INTERVAL = env->getStaticIntField(cls, "DEFAULT_INDEX_INTERVAL");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint WAH8DocIdSet::cardinality() const
        {
          return env->callIntMethod(this$, mids$[mid_cardinality_54c6a179]);
        }

        WAH8DocIdSet WAH8DocIdSet::intersect(const ::java::util::Collection & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return WAH8DocIdSet(env->callStaticObjectMethod(cls, mids$[mid_intersect_b06562c3], a0.this$));
        }

        WAH8DocIdSet WAH8DocIdSet::intersect(const ::java::util::Collection & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return WAH8DocIdSet(env->callStaticObjectMethod(cls, mids$[mid_intersect_8ad105f3], a0.this$, a1));
        }

        jboolean WAH8DocIdSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        jlong WAH8DocIdSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        WAH8DocIdSet WAH8DocIdSet::union$(const ::java::util::Collection & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return WAH8DocIdSet(env->callStaticObjectMethod(cls, mids$[mid_union_b06562c3], a0.this$));
        }

        WAH8DocIdSet WAH8DocIdSet::union$(const ::java::util::Collection & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return WAH8DocIdSet(env->callStaticObjectMethod(cls, mids$[mid_union_8ad105f3], a0.this$, a1));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/WAH8DocIdSet$Builder.h"
#include "org/apache/lucene/util/WAH8DocIdSet$WordBuilder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_WAH8DocIdSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WAH8DocIdSet_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WAH8DocIdSet_cardinality(t_WAH8DocIdSet *self);
        static PyObject *t_WAH8DocIdSet_intersect(PyTypeObject *type, PyObject *args);
        static PyObject *t_WAH8DocIdSet_isCacheable(t_WAH8DocIdSet *self, PyObject *args);
        static PyObject *t_WAH8DocIdSet_ramBytesUsed(t_WAH8DocIdSet *self, PyObject *args);
        static PyObject *t_WAH8DocIdSet_union(PyTypeObject *type, PyObject *args);
        static PyObject *t_WAH8DocIdSet_get__cacheable(t_WAH8DocIdSet *self, void *data);
        static PyGetSetDef t_WAH8DocIdSet__fields_[] = {
          DECLARE_GET_FIELD(t_WAH8DocIdSet, cacheable),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_WAH8DocIdSet__methods_[] = {
          DECLARE_METHOD(t_WAH8DocIdSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WAH8DocIdSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WAH8DocIdSet, cardinality, METH_NOARGS),
          DECLARE_METHOD(t_WAH8DocIdSet, intersect, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_WAH8DocIdSet, isCacheable, METH_VARARGS),
          DECLARE_METHOD(t_WAH8DocIdSet, ramBytesUsed, METH_VARARGS),
          DECLARE_METHOD(t_WAH8DocIdSet, union, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(WAH8DocIdSet, t_WAH8DocIdSet, ::org::apache::lucene::search::DocIdSet, WAH8DocIdSet, abstract_init, 0, 0, t_WAH8DocIdSet__fields_, 0, 0);

        void t_WAH8DocIdSet::install(PyObject *module)
        {
          installType(&PY_TYPE(WAH8DocIdSet), module, "WAH8DocIdSet", 0);
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet).tp_dict, "Builder", make_descriptor(&PY_TYPE(WAH8DocIdSet$Builder)));
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet).tp_dict, "WordBuilder", make_descriptor(&PY_TYPE(WAH8DocIdSet$WordBuilder)));
        }

        void t_WAH8DocIdSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet).tp_dict, "class_", make_descriptor(WAH8DocIdSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet).tp_dict, "wrapfn_", make_descriptor(t_WAH8DocIdSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(WAH8DocIdSet::initializeClass);
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet).tp_dict, "DEFAULT_INDEX_INTERVAL", make_descriptor(WAH8DocIdSet::DEFAULT_INDEX_INTERVAL));
        }

        static PyObject *t_WAH8DocIdSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, WAH8DocIdSet::initializeClass, 1)))
            return NULL;
          return t_WAH8DocIdSet::wrap_Object(WAH8DocIdSet(((t_WAH8DocIdSet *) arg)->object.this$));
        }
        static PyObject *t_WAH8DocIdSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, WAH8DocIdSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_WAH8DocIdSet_cardinality(t_WAH8DocIdSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.cardinality());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_WAH8DocIdSet_intersect(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;
              WAH8DocIdSet result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::WAH8DocIdSet::intersect(a0));
                return t_WAH8DocIdSet::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;
              jint a1;
              WAH8DocIdSet result((jobject) NULL);

              if (!parseArgs(args, "KI", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::WAH8DocIdSet::intersect(a0, a1));
                return t_WAH8DocIdSet::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "intersect", args);
          return NULL;
        }

        static PyObject *t_WAH8DocIdSet_isCacheable(t_WAH8DocIdSet *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCacheable());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(WAH8DocIdSet), (PyObject *) self, "isCacheable", args, 2);
        }

        static PyObject *t_WAH8DocIdSet_ramBytesUsed(t_WAH8DocIdSet *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(WAH8DocIdSet), (PyObject *) self, "ramBytesUsed", args, 2);
        }

        static PyObject *t_WAH8DocIdSet_union(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;
              WAH8DocIdSet result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::WAH8DocIdSet::union$(a0));
                return t_WAH8DocIdSet::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;
              jint a1;
              WAH8DocIdSet result((jobject) NULL);

              if (!parseArgs(args, "KI", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::WAH8DocIdSet::union$(a0, a1));
                return t_WAH8DocIdSet::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "union", args);
          return NULL;
        }

        static PyObject *t_WAH8DocIdSet_get__cacheable(t_WAH8DocIdSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/NamedThreadFactory.h"
#include "java/lang/Runnable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/lang/Thread.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *NamedThreadFactory::class$ = NULL;
        jmethodID *NamedThreadFactory::mids$ = NULL;
        bool NamedThreadFactory::live$ = false;

        jclass NamedThreadFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/NamedThreadFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_newThread_9e58833c] = env->getMethodID(cls, "newThread", "(Ljava/lang/Runnable;)Ljava/lang/Thread;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NamedThreadFactory::NamedThreadFactory(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        ::java::lang::Thread NamedThreadFactory::newThread(const ::java::lang::Runnable & a0) const
        {
          return ::java::lang::Thread(env->callObjectMethod(this$, mids$[mid_newThread_9e58833c], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_NamedThreadFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedThreadFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NamedThreadFactory_init_(t_NamedThreadFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NamedThreadFactory_newThread(t_NamedThreadFactory *self, PyObject *arg);

        static PyMethodDef t_NamedThreadFactory__methods_[] = {
          DECLARE_METHOD(t_NamedThreadFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedThreadFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedThreadFactory, newThread, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NamedThreadFactory, t_NamedThreadFactory, ::java::lang::Object, NamedThreadFactory, t_NamedThreadFactory_init_, 0, 0, 0, 0, 0);

        void t_NamedThreadFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(NamedThreadFactory), module, "NamedThreadFactory", 0);
        }

        void t_NamedThreadFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NamedThreadFactory).tp_dict, "class_", make_descriptor(NamedThreadFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NamedThreadFactory).tp_dict, "wrapfn_", make_descriptor(t_NamedThreadFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NamedThreadFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NamedThreadFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NamedThreadFactory::initializeClass, 1)))
            return NULL;
          return t_NamedThreadFactory::wrap_Object(NamedThreadFactory(((t_NamedThreadFactory *) arg)->object.this$));
        }
        static PyObject *t_NamedThreadFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NamedThreadFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NamedThreadFactory_init_(t_NamedThreadFactory *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          NamedThreadFactory object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = NamedThreadFactory(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NamedThreadFactory_newThread(t_NamedThreadFactory *self, PyObject *arg)
        {
          ::java::lang::Runnable a0((jobject) NULL);
          ::java::lang::Thread result((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::Runnable::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.newThread(a0));
            return ::java::lang::t_Thread::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "newThread", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilterFactory.h"
#include "org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *HyphenatedWordsFilterFactory::class$ = NULL;
          jmethodID *HyphenatedWordsFilterFactory::mids$ = NULL;
          bool HyphenatedWordsFilterFactory::live$ = false;

          jclass HyphenatedWordsFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_4f2a8112] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HyphenatedWordsFilterFactory::HyphenatedWordsFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::HyphenatedWordsFilter HyphenatedWordsFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::HyphenatedWordsFilter(env->callObjectMethod(this$, mids$[mid_create_4f2a8112], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_HyphenatedWordsFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HyphenatedWordsFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HyphenatedWordsFilterFactory_init_(t_HyphenatedWordsFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HyphenatedWordsFilterFactory_create(t_HyphenatedWordsFilterFactory *self, PyObject *args);

          static PyMethodDef t_HyphenatedWordsFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HyphenatedWordsFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenatedWordsFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenatedWordsFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HyphenatedWordsFilterFactory, t_HyphenatedWordsFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, HyphenatedWordsFilterFactory, t_HyphenatedWordsFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_HyphenatedWordsFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HyphenatedWordsFilterFactory), module, "HyphenatedWordsFilterFactory", 0);
          }

          void t_HyphenatedWordsFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HyphenatedWordsFilterFactory).tp_dict, "class_", make_descriptor(HyphenatedWordsFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HyphenatedWordsFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_HyphenatedWordsFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HyphenatedWordsFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HyphenatedWordsFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HyphenatedWordsFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HyphenatedWordsFilterFactory::wrap_Object(HyphenatedWordsFilterFactory(((t_HyphenatedWordsFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HyphenatedWordsFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HyphenatedWordsFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HyphenatedWordsFilterFactory_init_(t_HyphenatedWordsFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HyphenatedWordsFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HyphenatedWordsFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HyphenatedWordsFilterFactory_create(t_HyphenatedWordsFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::HyphenatedWordsFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_HyphenatedWordsFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(HyphenatedWordsFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/NearSpansOrdered.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spans/SpanNearQuery.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *NearSpansOrdered::class$ = NULL;
          jmethodID *NearSpansOrdered::mids$ = NULL;
          bool NearSpansOrdered::live$ = false;

          jclass NearSpansOrdered::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/NearSpansOrdered");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a9b434a2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanNearQuery;Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)V");
              mids$[mid_init$_0f9019fb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanNearQuery;Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;Z)V");
              mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_doc_54c6a179] = env->getMethodID(cls, "doc", "()I");
              mids$[mid_end_54c6a179] = env->getMethodID(cls, "end", "()I");
              mids$[mid_getPayload_2d2d7de4] = env->getMethodID(cls, "getPayload", "()Ljava/util/Collection;");
              mids$[mid_getSubSpans_dd49b8eb] = env->getMethodID(cls, "getSubSpans", "()[Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_isPayloadAvailable_54c6a16a] = env->getMethodID(cls, "isPayloadAvailable", "()Z");
              mids$[mid_next_54c6a16a] = env->getMethodID(cls, "next", "()Z");
              mids$[mid_skipTo_39c7bd30] = env->getMethodID(cls, "skipTo", "(I)Z");
              mids$[mid_start_54c6a179] = env->getMethodID(cls, "start", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NearSpansOrdered::NearSpansOrdered(const ::org::apache::lucene::search::spans::SpanNearQuery & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1, const ::org::apache::lucene::util::Bits & a2, const ::java::util::Map & a3) : ::org::apache::lucene::search::spans::Spans(env->newObject(initializeClass, &mids$, mid_init$_a9b434a2, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          NearSpansOrdered::NearSpansOrdered(const ::org::apache::lucene::search::spans::SpanNearQuery & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1, const ::org::apache::lucene::util::Bits & a2, const ::java::util::Map & a3, jboolean a4) : ::org::apache::lucene::search::spans::Spans(env->newObject(initializeClass, &mids$, mid_init$_0f9019fb, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

          jlong NearSpansOrdered::cost() const
          {
            return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
          }

          jint NearSpansOrdered::doc() const
          {
            return env->callIntMethod(this$, mids$[mid_doc_54c6a179]);
          }

          jint NearSpansOrdered::end() const
          {
            return env->callIntMethod(this$, mids$[mid_end_54c6a179]);
          }

          ::java::util::Collection NearSpansOrdered::getPayload() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getPayload_2d2d7de4]));
          }

          JArray< ::org::apache::lucene::search::spans::Spans > NearSpansOrdered::getSubSpans() const
          {
            return JArray< ::org::apache::lucene::search::spans::Spans >(env->callObjectMethod(this$, mids$[mid_getSubSpans_dd49b8eb]));
          }

          jboolean NearSpansOrdered::isPayloadAvailable() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPayloadAvailable_54c6a16a]);
          }

          jboolean NearSpansOrdered::next() const
          {
            return env->callBooleanMethod(this$, mids$[mid_next_54c6a16a]);
          }

          jboolean NearSpansOrdered::skipTo(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_skipTo_39c7bd30], a0);
          }

          jint NearSpansOrdered::start() const
          {
            return env->callIntMethod(this$, mids$[mid_start_54c6a179]);
          }

          ::java::lang::String NearSpansOrdered::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_NearSpansOrdered_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NearSpansOrdered_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NearSpansOrdered_init_(t_NearSpansOrdered *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NearSpansOrdered_cost(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_doc(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_end(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_getPayload(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_getSubSpans(t_NearSpansOrdered *self);
          static PyObject *t_NearSpansOrdered_isPayloadAvailable(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_next(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_skipTo(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_start(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_toString(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_get__payload(t_NearSpansOrdered *self, void *data);
          static PyObject *t_NearSpansOrdered_get__payloadAvailable(t_NearSpansOrdered *self, void *data);
          static PyObject *t_NearSpansOrdered_get__subSpans(t_NearSpansOrdered *self, void *data);
          static PyGetSetDef t_NearSpansOrdered__fields_[] = {
            DECLARE_GET_FIELD(t_NearSpansOrdered, payload),
            DECLARE_GET_FIELD(t_NearSpansOrdered, payloadAvailable),
            DECLARE_GET_FIELD(t_NearSpansOrdered, subSpans),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NearSpansOrdered__methods_[] = {
            DECLARE_METHOD(t_NearSpansOrdered, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NearSpansOrdered, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NearSpansOrdered, cost, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, doc, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, end, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, getPayload, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, getSubSpans, METH_NOARGS),
            DECLARE_METHOD(t_NearSpansOrdered, isPayloadAvailable, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, next, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, skipTo, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, start, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NearSpansOrdered, t_NearSpansOrdered, ::org::apache::lucene::search::spans::Spans, NearSpansOrdered, t_NearSpansOrdered_init_, 0, 0, t_NearSpansOrdered__fields_, 0, 0);

          void t_NearSpansOrdered::install(PyObject *module)
          {
            installType(&PY_TYPE(NearSpansOrdered), module, "NearSpansOrdered", 0);
          }

          void t_NearSpansOrdered::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NearSpansOrdered).tp_dict, "class_", make_descriptor(NearSpansOrdered::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NearSpansOrdered).tp_dict, "wrapfn_", make_descriptor(t_NearSpansOrdered::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NearSpansOrdered).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NearSpansOrdered_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NearSpansOrdered::initializeClass, 1)))
              return NULL;
            return t_NearSpansOrdered::wrap_Object(NearSpansOrdered(((t_NearSpansOrdered *) arg)->object.this$));
          }
          static PyObject *t_NearSpansOrdered_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NearSpansOrdered::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NearSpansOrdered_init_(t_NearSpansOrdered *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::search::spans::SpanNearQuery a0((jobject) NULL);
                ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
                ::org::apache::lucene::util::Bits a2((jobject) NULL);
                ::java::util::Map a3((jobject) NULL);
                PyTypeObject **p3;
                NearSpansOrdered object((jobject) NULL);

                if (!parseArgs(args, "kkkK", ::org::apache::lucene::search::spans::SpanNearQuery::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Map::parameters_))
                {
                  INT_CALL(object = NearSpansOrdered(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::search::spans::SpanNearQuery a0((jobject) NULL);
                ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
                ::org::apache::lucene::util::Bits a2((jobject) NULL);
                ::java::util::Map a3((jobject) NULL);
                PyTypeObject **p3;
                jboolean a4;
                NearSpansOrdered object((jobject) NULL);

                if (!parseArgs(args, "kkkKZ", ::org::apache::lucene::search::spans::SpanNearQuery::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Map::parameters_, &a4))
                {
                  INT_CALL(object = NearSpansOrdered(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NearSpansOrdered_cost(t_NearSpansOrdered *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.cost());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "cost", args, 2);
          }

          static PyObject *t_NearSpansOrdered_doc(t_NearSpansOrdered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.doc());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "doc", args, 2);
          }

          static PyObject *t_NearSpansOrdered_end(t_NearSpansOrdered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.end());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_NearSpansOrdered_getPayload(t_NearSpansOrdered *self, PyObject *args)
          {
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getPayload());
              return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "getPayload", args, 2);
          }

          static PyObject *t_NearSpansOrdered_getSubSpans(t_NearSpansOrdered *self)
          {
            JArray< ::org::apache::lucene::search::spans::Spans > result((jobject) NULL);
            OBJ_CALL(result = self->object.getSubSpans());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spans::t_Spans::wrap_jobject);
          }

          static PyObject *t_NearSpansOrdered_isPayloadAvailable(t_NearSpansOrdered *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.isPayloadAvailable());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "isPayloadAvailable", args, 2);
          }

          static PyObject *t_NearSpansOrdered_next(t_NearSpansOrdered *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.next());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_NearSpansOrdered_skipTo(t_NearSpansOrdered *self, PyObject *args)
          {
            jint a0;
            jboolean result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.skipTo(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "skipTo", args, 2);
          }

          static PyObject *t_NearSpansOrdered_start(t_NearSpansOrdered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.start());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "start", args, 2);
          }

          static PyObject *t_NearSpansOrdered_toString(t_NearSpansOrdered *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_NearSpansOrdered_get__payload(t_NearSpansOrdered *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getPayload());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static PyObject *t_NearSpansOrdered_get__payloadAvailable(t_NearSpansOrdered *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPayloadAvailable());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_NearSpansOrdered_get__subSpans(t_NearSpansOrdered *self, void *data)
          {
            JArray< ::org::apache::lucene::search::spans::Spans > value((jobject) NULL);
            OBJ_CALL(value = self->object.getSubSpans());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::spans::t_Spans::wrap_jobject);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/Token.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/Serializable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *Token::class$ = NULL;
              jmethodID *Token::mids$ = NULL;
              jfieldID *Token::fids$ = NULL;
              bool Token::live$ = false;

              jclass Token::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/Token");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                  mids$[mid_init$_d40a4f2e] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;)V");
                  mids$[mid_getValue_846352c3] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
                  mids$[mid_newToken_24cc8f6e] = env->getStaticMethodID(cls, "newToken", "(I)Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  mids$[mid_newToken_b48de57c] = env->getStaticMethodID(cls, "newToken", "(ILjava/lang/String;)Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  fids$ = new jfieldID[max_fid];
                  fids$[fid_beginColumn] = env->getFieldID(cls, "beginColumn", "I");
                  fids$[fid_beginLine] = env->getFieldID(cls, "beginLine", "I");
                  fids$[fid_endColumn] = env->getFieldID(cls, "endColumn", "I");
                  fids$[fid_endLine] = env->getFieldID(cls, "endLine", "I");
                  fids$[fid_image] = env->getFieldID(cls, "image", "Ljava/lang/String;");
                  fids$[fid_kind] = env->getFieldID(cls, "kind", "I");
                  fids$[fid_next] = env->getFieldID(cls, "next", "Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  fids$[fid_specialToken] = env->getFieldID(cls, "specialToken", "Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              Token::Token() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              Token::Token(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

              Token::Token(jint a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d40a4f2e, a0, a1.this$)) {}

              ::java::lang::Object Token::getValue() const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_846352c3]));
              }

              Token Token::newToken(jint a0)
              {
                jclass cls = env->getClass(initializeClass);
                return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_24cc8f6e], a0));
              }

              Token Token::newToken(jint a0, const ::java::lang::String & a1)
              {
                jclass cls = env->getClass(initializeClass);
                return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_b48de57c], a0, a1.this$));
              }

              ::java::lang::String Token::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }

              jint Token::_get_beginColumn() const
              {
                return env->getIntField(this$, fids$[fid_beginColumn]);
              }

              void Token::_set_beginColumn(jint a0) const
              {
                env->setIntField(this$, fids$[fid_beginColumn], a0);
              }

              jint Token::_get_beginLine() const
              {
                return env->getIntField(this$, fids$[fid_beginLine]);
              }

              void Token::_set_beginLine(jint a0) const
              {
                env->setIntField(this$, fids$[fid_beginLine], a0);
              }

              jint Token::_get_endColumn() const
              {
                return env->getIntField(this$, fids$[fid_endColumn]);
              }

              void Token::_set_endColumn(jint a0) const
              {
                env->setIntField(this$, fids$[fid_endColumn], a0);
              }

              jint Token::_get_endLine() const
              {
                return env->getIntField(this$, fids$[fid_endLine]);
              }

              void Token::_set_endLine(jint a0) const
              {
                env->setIntField(this$, fids$[fid_endLine], a0);
              }

              ::java::lang::String Token::_get_image() const
              {
                return ::java::lang::String(env->getObjectField(this$, fids$[fid_image]));
              }

              void Token::_set_image(const ::java::lang::String & a0) const
              {
                env->setObjectField(this$, fids$[fid_image], a0.this$);
              }

              jint Token::_get_kind() const
              {
                return env->getIntField(this$, fids$[fid_kind]);
              }

              void Token::_set_kind(jint a0) const
              {
                env->setIntField(this$, fids$[fid_kind], a0);
              }

              Token Token::_get_next() const
              {
                return Token(env->getObjectField(this$, fids$[fid_next]));
              }

              void Token::_set_next(const Token & a0) const
              {
                env->setObjectField(this$, fids$[fid_next], a0.this$);
              }

              Token Token::_get_specialToken() const
              {
                return Token(env->getObjectField(this$, fids$[fid_specialToken]));
              }

              void Token::_set_specialToken(const Token & a0) const
              {
                env->setObjectField(this$, fids$[fid_specialToken], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg);
              static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds);
              static PyObject *t_Token_getValue(t_Token *self);
              static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args);
              static PyObject *t_Token_toString(t_Token *self, PyObject *args);
              static PyObject *t_Token_get__beginColumn(t_Token *self, void *data);
              static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__beginLine(t_Token *self, void *data);
              static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__endColumn(t_Token *self, void *data);
              static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__endLine(t_Token *self, void *data);
              static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__image(t_Token *self, void *data);
              static int t_Token_set__image(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__kind(t_Token *self, void *data);
              static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__next(t_Token *self, void *data);
              static int t_Token_set__next(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__specialToken(t_Token *self, void *data);
              static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data);

              static PyObject *t_Token_get__value(t_Token *self, void *data);
              static PyGetSetDef t_Token__fields_[] = {
                DECLARE_GETSET_FIELD(t_Token, beginColumn),
                DECLARE_GETSET_FIELD(t_Token, beginLine),
                DECLARE_GETSET_FIELD(t_Token, endColumn),
                DECLARE_GETSET_FIELD(t_Token, endLine),
                DECLARE_GETSET_FIELD(t_Token, image),
                DECLARE_GETSET_FIELD(t_Token, kind),
                DECLARE_GETSET_FIELD(t_Token, next),
                DECLARE_GETSET_FIELD(t_Token, specialToken),
                DECLARE_GET_FIELD(t_Token, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_Token__methods_[] = {
                DECLARE_METHOD(t_Token, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_Token, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_Token, getValue, METH_NOARGS),
                DECLARE_METHOD(t_Token, newToken, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_Token, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(Token, t_Token, ::java::lang::Object, Token, t_Token_init_, 0, 0, t_Token__fields_, 0, 0);

              void t_Token::install(PyObject *module)
              {
                installType(&PY_TYPE(Token), module, "Token", 0);
              }

              void t_Token::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(Token).tp_dict, "class_", make_descriptor(Token::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(Token).tp_dict, "wrapfn_", make_descriptor(t_Token::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(Token).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, Token::initializeClass, 1)))
                  return NULL;
                return t_Token::wrap_Object(Token(((t_Token *) arg)->object.this$));
              }
              static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, Token::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    Token object((jobject) NULL);

                    INT_CALL(object = Token());
                    self->object = object;
                    break;
                  }
                  goto err;
                 case 1:
                  {
                    jint a0;
                    Token object((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                      INT_CALL(object = Token(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 2:
                  {
                    jint a0;
                    ::java::lang::String a1((jobject) NULL);
                    Token object((jobject) NULL);

                    if (!parseArgs(args, "Is", &a0, &a1))
                    {
                      INT_CALL(object = Token(a0, a1));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_Token_getValue(t_Token *self)
              {
                ::java::lang::Object result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return ::java::lang::t_Object::wrap_Object(result);
              }

              static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    jint a0;
                    Token result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                      OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::parser::Token::newToken(a0));
                      return t_Token::wrap_Object(result);
                    }
                  }
                  break;
                 case 2:
                  {
                    jint a0;
                    ::java::lang::String a1((jobject) NULL);
                    Token result((jobject) NULL);

                    if (!parseArgs(args, "Is", &a0, &a1))
                    {
                      OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::parser::Token::newToken(a0, a1));
                      return t_Token::wrap_Object(result);
                    }
                  }
                }

                PyErr_SetArgsError(type, "newToken", args);
                return NULL;
              }

              static PyObject *t_Token_toString(t_Token *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(Token), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_Token_get__beginColumn(t_Token *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object._get_beginColumn());
                return PyInt_FromLong((long) value);
              }
              static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data)
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object._set_beginColumn(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "beginColumn", arg);
                return -1;
              }

              static PyObject *t_Token_get__beginLine(t_Token *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object._get_beginLine());
                return PyInt_FromLong((long) value);
              }
              static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data)
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object._set_beginLine(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "beginLine", arg);
                return -1;
              }

              static PyObject *t_Token_get__endColumn(t_Token *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object._get_endColumn());
                return PyInt_FromLong((long) value);
              }
              static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data)
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object._set_endColumn(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "endColumn", arg);
                return -1;
              }

              static PyObject *t_Token_get__endLine(t_Token *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object._get_endLine());
                return PyInt_FromLong((long) value);
              }
              static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data)
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object._set_endLine(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "endLine", arg);
                return -1;
              }

              static PyObject *t_Token_get__image(t_Token *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object._get_image());
                return j2p(value);
              }
              static int t_Token_set__image(t_Token *self, PyObject *arg, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                if (!parseArg(arg, "s", &value))
                {
                  INT_CALL(self->object._set_image(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "image", arg);
                return -1;
              }

              static PyObject *t_Token_get__kind(t_Token *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object._get_kind());
                return PyInt_FromLong((long) value);
              }
              static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data)
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object._set_kind(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "kind", arg);
                return -1;
              }

              static PyObject *t_Token_get__next(t_Token *self, void *data)
              {
                Token value((jobject) NULL);
                OBJ_CALL(value = self->object._get_next());
                return t_Token::wrap_Object(value);
              }
              static int t_Token_set__next(t_Token *self, PyObject *arg, void *data)
              {
                Token value((jobject) NULL);
                if (!parseArg(arg, "k", Token::initializeClass, &value))
                {
                  INT_CALL(self->object._set_next(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "next", arg);
                return -1;
              }

              static PyObject *t_Token_get__specialToken(t_Token *self, void *data)
              {
                Token value((jobject) NULL);
                OBJ_CALL(value = self->object._get_specialToken());
                return t_Token::wrap_Object(value);
              }
              static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data)
              {
                Token value((jobject) NULL);
                if (!parseArg(arg, "k", Token::initializeClass, &value))
                {
                  INT_CALL(self->object._set_specialToken(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "specialToken", arg);
                return -1;
              }

              static PyObject *t_Token_get__value(t_Token *self, void *data)
              {
                ::java::lang::Object value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_Object::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/cjk/CJKTokenizer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKTokenizerFactory::class$ = NULL;
          jmethodID *CJKTokenizerFactory::mids$ = NULL;
          bool CJKTokenizerFactory::live$ = false;

          jclass CJKTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_277e6a01] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/cjk/CJKTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKTokenizerFactory::CJKTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::cjk::CJKTokenizer CJKTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::cjk::CJKTokenizer(env->callObjectMethod(this$, mids$[mid_create_277e6a01], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKTokenizerFactory_init_(t_CJKTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKTokenizerFactory_create(t_CJKTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_CJKTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_CJKTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CJKTokenizerFactory, t_CJKTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, CJKTokenizerFactory, t_CJKTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_CJKTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKTokenizerFactory), module, "CJKTokenizerFactory", 0);
          }

          void t_CJKTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CJKTokenizerFactory).tp_dict, "class_", make_descriptor(CJKTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CJKTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_CJKTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CJKTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CJKTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_CJKTokenizerFactory::wrap_Object(CJKTokenizerFactory(((t_CJKTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_CJKTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKTokenizerFactory_init_(t_CJKTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CJKTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CJKTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKTokenizerFactory_create(t_CJKTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::cjk::CJKTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::cjk::t_CJKTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CJKTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/AppendingPackedLongBuffer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *AppendingPackedLongBuffer::class$ = NULL;
          jmethodID *AppendingPackedLongBuffer::mids$ = NULL;
          bool AppendingPackedLongBuffer::live$ = false;

          jclass AppendingPackedLongBuffer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/AppendingPackedLongBuffer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_init$_a74e6883] = env->getMethodID(cls, "<init>", "(IIF)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AppendingPackedLongBuffer::AppendingPackedLongBuffer() : ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          AppendingPackedLongBuffer::AppendingPackedLongBuffer(jfloat a0) : ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          AppendingPackedLongBuffer::AppendingPackedLongBuffer(jint a0, jint a1, jfloat a2) : ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer(env->newObject(initializeClass, &mids$, mid_init$_a74e6883, a0, a1, a2)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_AppendingPackedLongBuffer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AppendingPackedLongBuffer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AppendingPackedLongBuffer_init_(t_AppendingPackedLongBuffer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_AppendingPackedLongBuffer__methods_[] = {
            DECLARE_METHOD(t_AppendingPackedLongBuffer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AppendingPackedLongBuffer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AppendingPackedLongBuffer, t_AppendingPackedLongBuffer, ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer, AppendingPackedLongBuffer, t_AppendingPackedLongBuffer_init_, 0, 0, 0, 0, 0);

          void t_AppendingPackedLongBuffer::install(PyObject *module)
          {
            installType(&PY_TYPE(AppendingPackedLongBuffer), module, "AppendingPackedLongBuffer", 0);
          }

          void t_AppendingPackedLongBuffer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AppendingPackedLongBuffer).tp_dict, "class_", make_descriptor(AppendingPackedLongBuffer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AppendingPackedLongBuffer).tp_dict, "wrapfn_", make_descriptor(t_AppendingPackedLongBuffer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AppendingPackedLongBuffer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AppendingPackedLongBuffer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AppendingPackedLongBuffer::initializeClass, 1)))
              return NULL;
            return t_AppendingPackedLongBuffer::wrap_Object(AppendingPackedLongBuffer(((t_AppendingPackedLongBuffer *) arg)->object.this$));
          }
          static PyObject *t_AppendingPackedLongBuffer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AppendingPackedLongBuffer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AppendingPackedLongBuffer_init_(t_AppendingPackedLongBuffer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                AppendingPackedLongBuffer object((jobject) NULL);

                INT_CALL(object = AppendingPackedLongBuffer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                AppendingPackedLongBuffer object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = AppendingPackedLongBuffer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                jint a0;
                jint a1;
                jfloat a2;
                AppendingPackedLongBuffer object((jobject) NULL);

                if (!parseArgs(args, "IIF", &a0, &a1, &a2))
                {
                  INT_CALL(object = AppendingPackedLongBuffer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/KeywordTokenizer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *KeywordTokenizer::class$ = NULL;
          jmethodID *KeywordTokenizer::mids$ = NULL;
          bool KeywordTokenizer::live$ = false;
          jint KeywordTokenizer::DEFAULT_BUFFER_SIZE = (jint) 0;

          jclass KeywordTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/KeywordTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_8c604f56] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;I)V");
              mids$[mid_init$_338c3a92] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;I)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_BUFFER_SIZE = env->getStaticIntField(cls, "DEFAULT_BUFFER_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordTokenizer::KeywordTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          KeywordTokenizer::KeywordTokenizer(const ::java::io::Reader & a0, jint a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_8c604f56, a0.this$, a1)) {}

          KeywordTokenizer::KeywordTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jint a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_338c3a92, a0.this$, a1.this$, a2)) {}

          void KeywordTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean KeywordTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void KeywordTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_KeywordTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordTokenizer_init_(t_KeywordTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordTokenizer_end(t_KeywordTokenizer *self, PyObject *args);
          static PyObject *t_KeywordTokenizer_incrementToken(t_KeywordTokenizer *self, PyObject *args);
          static PyObject *t_KeywordTokenizer_reset(t_KeywordTokenizer *self, PyObject *args);

          static PyMethodDef t_KeywordTokenizer__methods_[] = {
            DECLARE_METHOD(t_KeywordTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_KeywordTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_KeywordTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordTokenizer, t_KeywordTokenizer, ::org::apache::lucene::analysis::Tokenizer, KeywordTokenizer, t_KeywordTokenizer_init_, 0, 0, 0, 0, 0);

          void t_KeywordTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordTokenizer), module, "KeywordTokenizer", 0);
          }

          void t_KeywordTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordTokenizer).tp_dict, "class_", make_descriptor(KeywordTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordTokenizer).tp_dict, "wrapfn_", make_descriptor(t_KeywordTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(KeywordTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(KeywordTokenizer).tp_dict, "DEFAULT_BUFFER_SIZE", make_descriptor(KeywordTokenizer::DEFAULT_BUFFER_SIZE));
          }

          static PyObject *t_KeywordTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordTokenizer::initializeClass, 1)))
              return NULL;
            return t_KeywordTokenizer::wrap_Object(KeywordTokenizer(((t_KeywordTokenizer *) arg)->object.this$));
          }
          static PyObject *t_KeywordTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordTokenizer_init_(t_KeywordTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                KeywordTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = KeywordTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                KeywordTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kI", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = KeywordTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                KeywordTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkI", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = KeywordTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeywordTokenizer_end(t_KeywordTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(KeywordTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_KeywordTokenizer_incrementToken(t_KeywordTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(KeywordTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_KeywordTokenizer_reset(t_KeywordTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(KeywordTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *DataOutput::class$ = NULL;
        jmethodID *DataOutput::mids$ = NULL;
        bool DataOutput::live$ = false;

        jclass DataOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/DataOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_copyBytes_394617c2] = env->getMethodID(cls, "copyBytes", "(Lorg/apache/lucene/store/DataInput;J)V");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_b8354c43] = env->getMethodID(cls, "writeBytes", "([BI)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");
            mids$[mid_writeInt_39c7bd3c] = env->getMethodID(cls, "writeInt", "(I)V");
            mids$[mid_writeLong_0ee6df2f] = env->getMethodID(cls, "writeLong", "(J)V");
            mids$[mid_writeShort_3bc40c6a] = env->getMethodID(cls, "writeShort", "(S)V");
            mids$[mid_writeString_5fdc3f48] = env->getMethodID(cls, "writeString", "(Ljava/lang/String;)V");
            mids$[mid_writeStringSet_fb4f2b26] = env->getMethodID(cls, "writeStringSet", "(Ljava/util/Set;)V");
            mids$[mid_writeStringStringMap_4c9e2b1c] = env->getMethodID(cls, "writeStringStringMap", "(Ljava/util/Map;)V");
            mids$[mid_writeVInt_39c7bd3c] = env->getMethodID(cls, "writeVInt", "(I)V");
            mids$[mid_writeVLong_0ee6df2f] = env->getMethodID(cls, "writeVLong", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DataOutput::DataOutput() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void DataOutput::copyBytes(const ::org::apache::lucene::store::DataInput & a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copyBytes_394617c2], a0.this$, a1);
        }

        void DataOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_b2271687], a0);
        }

        void DataOutput::writeBytes(const JArray< jbyte > & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_b8354c43], a0.this$, a1);
        }

        void DataOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }

        void DataOutput::writeInt(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeInt_39c7bd3c], a0);
        }

        void DataOutput::writeLong(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeLong_0ee6df2f], a0);
        }

        void DataOutput::writeShort(jshort a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeShort_3bc40c6a], a0);
        }

        void DataOutput::writeString(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeString_5fdc3f48], a0.this$);
        }

        void DataOutput::writeStringSet(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeStringSet_fb4f2b26], a0.this$);
        }

        void DataOutput::writeStringStringMap(const ::java::util::Map & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeStringStringMap_4c9e2b1c], a0.this$);
        }

        void DataOutput::writeVInt(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeVInt_39c7bd3c], a0);
        }

        void DataOutput::writeVLong(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeVLong_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_DataOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DataOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DataOutput_init_(t_DataOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DataOutput_copyBytes(t_DataOutput *self, PyObject *args);
        static PyObject *t_DataOutput_writeByte(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeBytes(t_DataOutput *self, PyObject *args);
        static PyObject *t_DataOutput_writeInt(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeLong(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeShort(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeString(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeStringSet(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeStringStringMap(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeVInt(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeVLong(t_DataOutput *self, PyObject *arg);

        static PyMethodDef t_DataOutput__methods_[] = {
          DECLARE_METHOD(t_DataOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DataOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DataOutput, copyBytes, METH_VARARGS),
          DECLARE_METHOD(t_DataOutput, writeByte, METH_O),
          DECLARE_METHOD(t_DataOutput, writeBytes, METH_VARARGS),
          DECLARE_METHOD(t_DataOutput, writeInt, METH_O),
          DECLARE_METHOD(t_DataOutput, writeLong, METH_O),
          DECLARE_METHOD(t_DataOutput, writeShort, METH_O),
          DECLARE_METHOD(t_DataOutput, writeString, METH_O),
          DECLARE_METHOD(t_DataOutput, writeStringSet, METH_O),
          DECLARE_METHOD(t_DataOutput, writeStringStringMap, METH_O),
          DECLARE_METHOD(t_DataOutput, writeVInt, METH_O),
          DECLARE_METHOD(t_DataOutput, writeVLong, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DataOutput, t_DataOutput, ::java::lang::Object, DataOutput, t_DataOutput_init_, 0, 0, 0, 0, 0);

        void t_DataOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(DataOutput), module, "DataOutput", 0);
        }

        void t_DataOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DataOutput).tp_dict, "class_", make_descriptor(DataOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DataOutput).tp_dict, "wrapfn_", make_descriptor(t_DataOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DataOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DataOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DataOutput::initializeClass, 1)))
            return NULL;
          return t_DataOutput::wrap_Object(DataOutput(((t_DataOutput *) arg)->object.this$));
        }
        static PyObject *t_DataOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DataOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DataOutput_init_(t_DataOutput *self, PyObject *args, PyObject *kwds)
        {
          DataOutput object((jobject) NULL);

          INT_CALL(object = DataOutput());
          self->object = object;

          return 0;
        }

        static PyObject *t_DataOutput_copyBytes(t_DataOutput *self, PyObject *args)
        {
          ::org::apache::lucene::store::DataInput a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "kJ", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.copyBytes(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyBytes", args);
          return NULL;
        }

        static PyObject *t_DataOutput_writeByte(t_DataOutput *self, PyObject *arg)
        {
          jbyte a0;

          if (!parseArg(arg, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeByte", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeBytes(t_DataOutput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "[BI", &a0, &a1))
              {
                OBJ_CALL(self->object.writeBytes(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.writeBytes(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "writeBytes", args);
          return NULL;
        }

        static PyObject *t_DataOutput_writeInt(t_DataOutput *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.writeInt(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeInt", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeLong(t_DataOutput *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.writeLong(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeLong", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeShort(t_DataOutput *self, PyObject *arg)
        {
          jshort a0;

          if (!parseArg(arg, "S", &a0))
          {
            OBJ_CALL(self->object.writeShort(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeShort", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeString(t_DataOutput *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.writeString(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeString", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeStringSet(t_DataOutput *self, PyObject *arg)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.writeStringSet(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeStringSet", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeStringStringMap(t_DataOutput *self, PyObject *arg)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            OBJ_CALL(self->object.writeStringStringMap(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeStringStringMap", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeVInt(t_DataOutput *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.writeVInt(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeVInt", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeVLong(t_DataOutput *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.writeVLong(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeVLong", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tr/TurkishLowerCaseFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {

          ::java::lang::Class *TurkishLowerCaseFilterFactory::class$ = NULL;
          jmethodID *TurkishLowerCaseFilterFactory::mids$ = NULL;
          bool TurkishLowerCaseFilterFactory::live$ = false;

          jclass TurkishLowerCaseFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tr/TurkishLowerCaseFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TurkishLowerCaseFilterFactory::TurkishLowerCaseFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream TurkishLowerCaseFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory TurkishLowerCaseFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {
          static PyObject *t_TurkishLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TurkishLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TurkishLowerCaseFilterFactory_init_(t_TurkishLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TurkishLowerCaseFilterFactory_create(t_TurkishLowerCaseFilterFactory *self, PyObject *args);
          static PyObject *t_TurkishLowerCaseFilterFactory_getMultiTermComponent(t_TurkishLowerCaseFilterFactory *self);
          static PyObject *t_TurkishLowerCaseFilterFactory_get__multiTermComponent(t_TurkishLowerCaseFilterFactory *self, void *data);
          static PyGetSetDef t_TurkishLowerCaseFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_TurkishLowerCaseFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TurkishLowerCaseFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TurkishLowerCaseFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishLowerCaseFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishLowerCaseFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_TurkishLowerCaseFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TurkishLowerCaseFilterFactory, t_TurkishLowerCaseFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, TurkishLowerCaseFilterFactory, t_TurkishLowerCaseFilterFactory_init_, 0, 0, t_TurkishLowerCaseFilterFactory__fields_, 0, 0);

          void t_TurkishLowerCaseFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TurkishLowerCaseFilterFactory), module, "TurkishLowerCaseFilterFactory", 0);
          }

          void t_TurkishLowerCaseFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TurkishLowerCaseFilterFactory).tp_dict, "class_", make_descriptor(TurkishLowerCaseFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TurkishLowerCaseFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_TurkishLowerCaseFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TurkishLowerCaseFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TurkishLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TurkishLowerCaseFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TurkishLowerCaseFilterFactory::wrap_Object(TurkishLowerCaseFilterFactory(((t_TurkishLowerCaseFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TurkishLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TurkishLowerCaseFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TurkishLowerCaseFilterFactory_init_(t_TurkishLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TurkishLowerCaseFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TurkishLowerCaseFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TurkishLowerCaseFilterFactory_create(t_TurkishLowerCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TurkishLowerCaseFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_TurkishLowerCaseFilterFactory_getMultiTermComponent(t_TurkishLowerCaseFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_TurkishLowerCaseFilterFactory_get__multiTermComponent(t_TurkishLowerCaseFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/InterruptedException.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Object::class$ = NULL;
    jmethodID *Object::mids$ = NULL;
    bool Object::live$ = false;

    jclass Object::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Object");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_getClass_44a5f2c9] = env->getMethodID(cls, "getClass", "()Ljava/lang/Class;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_notify_54c6a166] = env->getMethodID(cls, "notify", "()V");
        mids$[mid_notifyAll_54c6a166] = env->getMethodID(cls, "notifyAll", "()V");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_wait_54c6a166] = env->getMethodID(cls, "wait", "()V");
        mids$[mid_wait_0ee6df2f] = env->getMethodID(cls, "wait", "(J)V");
        mids$[mid_wait_25d05c8f] = env->getMethodID(cls, "wait", "(JI)V");
        mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Object::Object() : ::JObject(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    jboolean Object::equals(const Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::lang::Class Object::getClass() const
    {
      return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_getClass_44a5f2c9]));
    }

    jint Object::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    void Object::notify() const
    {
      env->callVoidMethod(this$, mids$[mid_notify_54c6a166]);
    }

    void Object::notifyAll() const
    {
      env->callVoidMethod(this$, mids$[mid_notifyAll_54c6a166]);
    }

    ::java::lang::String Object::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    void Object::wait() const
    {
      env->callVoidMethod(this$, mids$[mid_wait_54c6a166]);
    }

    void Object::wait(jlong a0) const
    {
      env->callVoidMethod(this$, mids$[mid_wait_0ee6df2f], a0);
    }

    void Object::wait(jlong a0, jint a1) const
    {
      env->callVoidMethod(this$, mids$[mid_wait_25d05c8f], a0, a1);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Object_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Object_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Object_init_(t_Object *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Object_equals(t_Object *self, PyObject *arg);
    static PyObject *t_Object_getClass(t_Object *self);
    static PyObject *t_Object_hashCode(t_Object *self);
    static PyObject *t_Object_notify(t_Object *self);
    static PyObject *t_Object_notifyAll(t_Object *self);
    static PyObject *t_Object_toString(t_Object *self);
    static PyObject *t_Object_wait(t_Object *self, PyObject *args);
    static PyObject *t_Object_get__class(t_Object *self, void *data);
    static PyGetSetDef t_Object__fields_[] = {
      DECLARE_GET_FIELD(t_Object, class),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Object__methods_[] = {
      DECLARE_METHOD(t_Object, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Object, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Object, equals, METH_O),
      DECLARE_METHOD(t_Object, getClass, METH_NOARGS),
      DECLARE_METHOD(t_Object, hashCode, METH_NOARGS),
      DECLARE_METHOD(t_Object, notify, METH_NOARGS),
      DECLARE_METHOD(t_Object, notifyAll, METH_NOARGS),
      DECLARE_METHOD(t_Object, toString, METH_NOARGS),
      DECLARE_METHOD(t_Object, wait, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Object, t_Object, JObject, Object, t_Object_init_, 0, 0, t_Object__fields_, 0, 0);

    void t_Object::install(PyObject *module)
    {
      installType(&PY_TYPE(Object), module, "Object", 0);
    }

    void t_Object::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Object).tp_dict, "class_", make_descriptor(Object::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Object).tp_dict, "wrapfn_", make_descriptor(t_Object::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Object).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Object_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Object::initializeClass, 1)))
        return NULL;
      return t_Object::wrap_Object(Object(((t_Object *) arg)->object.this$));
    }
    static PyObject *t_Object_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Object::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Object_init_(t_Object *self, PyObject *args, PyObject *kwds)
    {
      Object object((jobject) NULL);

      INT_CALL(object = Object());
      self->object = object;

      return 0;
    }

    static PyObject *t_Object_equals(t_Object *self, PyObject *arg)
    {
      Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "equals", arg);
      return NULL;
    }

    static PyObject *t_Object_getClass(t_Object *self)
    {
      ::java::lang::Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getClass());
      return ::java::lang::t_Class::wrap_Object(result);
    }

    static PyObject *t_Object_hashCode(t_Object *self)
    {
      jint result;
      OBJ_CALL(result = self->object.hashCode());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Object_notify(t_Object *self)
    {
      OBJ_CALL(self->object.notify());
      Py_RETURN_NONE;
    }

    static PyObject *t_Object_notifyAll(t_Object *self)
    {
      OBJ_CALL(self->object.notifyAll());
      Py_RETURN_NONE;
    }

    static PyObject *t_Object_toString(t_Object *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.toString());
      return j2p(result);
    }

    static PyObject *t_Object_wait(t_Object *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          OBJ_CALL(self->object.wait());
          Py_RETURN_NONE;
        }
        break;
       case 1:
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.wait(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          jlong a0;
          jint a1;

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(self->object.wait(a0, a1));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "wait", args);
      return NULL;
    }

    static PyObject *t_Object_get__class(t_Object *self, void *data)
    {
      ::java::lang::Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getClass());
      return ::java::lang::t_Class::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/NamedSPILoader.h"
#include "java/util/Set.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/util/NamedSPILoader$NamedSPI.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *NamedSPILoader::class$ = NULL;
        jmethodID *NamedSPILoader::mids$ = NULL;
        bool NamedSPILoader::live$ = false;

        jclass NamedSPILoader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/NamedSPILoader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a5deaff4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Class;)V");
            mids$[mid_init$_6deee997] = env->getMethodID(cls, "<init>", "(Ljava/lang/Class;Ljava/lang/ClassLoader;)V");
            mids$[mid_availableServices_03e99967] = env->getMethodID(cls, "availableServices", "()Ljava/util/Set;");
            mids$[mid_checkServiceName_5fdc3f48] = env->getStaticMethodID(cls, "checkServiceName", "(Ljava/lang/String;)V");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_lookup_f2235407] = env->getMethodID(cls, "lookup", "(Ljava/lang/String;)Lorg/apache/lucene/util/NamedSPILoader$NamedSPI;");
            mids$[mid_reload_9110048d] = env->getMethodID(cls, "reload", "(Ljava/lang/ClassLoader;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NamedSPILoader::NamedSPILoader(const ::java::lang::Class & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a5deaff4, a0.this$)) {}

        NamedSPILoader::NamedSPILoader(const ::java::lang::Class & a0, const ::java::lang::ClassLoader & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6deee997, a0.this$, a1.this$)) {}

        ::java::util::Set NamedSPILoader::availableServices() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_availableServices_03e99967]));
        }

        void NamedSPILoader::checkServiceName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_checkServiceName_5fdc3f48], a0.this$);
        }

        ::java::util::Iterator NamedSPILoader::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        ::org::apache::lucene::util::NamedSPILoader$NamedSPI NamedSPILoader::lookup(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::NamedSPILoader$NamedSPI(env->callObjectMethod(this$, mids$[mid_lookup_f2235407], a0.this$));
        }

        void NamedSPILoader::reload(const ::java::lang::ClassLoader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reload_9110048d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_NamedSPILoader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedSPILoader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedSPILoader_of_(t_NamedSPILoader *self, PyObject *args);
        static int t_NamedSPILoader_init_(t_NamedSPILoader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NamedSPILoader_availableServices(t_NamedSPILoader *self);
        static PyObject *t_NamedSPILoader_checkServiceName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedSPILoader_iterator(t_NamedSPILoader *self);
        static PyObject *t_NamedSPILoader_lookup(t_NamedSPILoader *self, PyObject *arg);
        static PyObject *t_NamedSPILoader_reload(t_NamedSPILoader *self, PyObject *arg);
        static PyObject *t_NamedSPILoader_get__parameters_(t_NamedSPILoader *self, void *data);
        static PyGetSetDef t_NamedSPILoader__fields_[] = {
          DECLARE_GET_FIELD(t_NamedSPILoader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NamedSPILoader__methods_[] = {
          DECLARE_METHOD(t_NamedSPILoader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedSPILoader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedSPILoader, of_, METH_VARARGS),
          DECLARE_METHOD(t_NamedSPILoader, availableServices, METH_NOARGS),
          DECLARE_METHOD(t_NamedSPILoader, checkServiceName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedSPILoader, iterator, METH_NOARGS),
          DECLARE_METHOD(t_NamedSPILoader, lookup, METH_O),
          DECLARE_METHOD(t_NamedSPILoader, reload, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NamedSPILoader, t_NamedSPILoader, ::java::lang::Object, NamedSPILoader, t_NamedSPILoader_init_, ((PyObject *(*)(t_NamedSPILoader *)) get_generic_iterator< t_NamedSPILoader >), 0, t_NamedSPILoader__fields_, 0, 0);
        PyObject *t_NamedSPILoader::wrap_Object(const NamedSPILoader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NamedSPILoader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NamedSPILoader *self = (t_NamedSPILoader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_NamedSPILoader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NamedSPILoader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NamedSPILoader *self = (t_NamedSPILoader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_NamedSPILoader::install(PyObject *module)
        {
          installType(&PY_TYPE(NamedSPILoader), module, "NamedSPILoader", 0);
          PyDict_SetItemString(PY_TYPE(NamedSPILoader).tp_dict, "NamedSPI", make_descriptor(&PY_TYPE(NamedSPILoader$NamedSPI)));
        }

        void t_NamedSPILoader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NamedSPILoader).tp_dict, "class_", make_descriptor(NamedSPILoader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NamedSPILoader).tp_dict, "wrapfn_", make_descriptor(t_NamedSPILoader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NamedSPILoader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NamedSPILoader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NamedSPILoader::initializeClass, 1)))
            return NULL;
          return t_NamedSPILoader::wrap_Object(NamedSPILoader(((t_NamedSPILoader *) arg)->object.this$));
        }
        static PyObject *t_NamedSPILoader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NamedSPILoader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NamedSPILoader_of_(t_NamedSPILoader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_NamedSPILoader_init_(t_NamedSPILoader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Class a0((jobject) NULL);
              PyTypeObject **p0;
              NamedSPILoader object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
              {
                INT_CALL(object = NamedSPILoader(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::Class a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::ClassLoader a1((jobject) NULL);
              NamedSPILoader object((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::lang::Class::initializeClass, ::java::lang::ClassLoader::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
              {
                INT_CALL(object = NamedSPILoader(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NamedSPILoader_availableServices(t_NamedSPILoader *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.availableServices());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_NamedSPILoader_checkServiceName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::util::NamedSPILoader::checkServiceName(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "checkServiceName", arg);
          return NULL;
        }

        static PyObject *t_NamedSPILoader_iterator(t_NamedSPILoader *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
        }

        static PyObject *t_NamedSPILoader_lookup(t_NamedSPILoader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::NamedSPILoader$NamedSPI result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.lookup(a0));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::util::t_NamedSPILoader$NamedSPI::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "lookup", arg);
          return NULL;
        }

        static PyObject *t_NamedSPILoader_reload(t_NamedSPILoader *self, PyObject *arg)
        {
          ::java::lang::ClassLoader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.reload(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reload", arg);
          return NULL;
        }
        static PyObject *t_NamedSPILoader_get__parameters_(t_NamedSPILoader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector$SearchGroupDocs.h"
#include "org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/TopDocsCollector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractSecondPassGroupingCollector$SearchGroupDocs::class$ = NULL;
          jmethodID *AbstractSecondPassGroupingCollector$SearchGroupDocs::mids$ = NULL;
          jfieldID *AbstractSecondPassGroupingCollector$SearchGroupDocs::fids$ = NULL;
          bool AbstractSecondPassGroupingCollector$SearchGroupDocs::live$ = false;

          jclass AbstractSecondPassGroupingCollector$SearchGroupDocs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector$SearchGroupDocs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b73e617c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector;Ljava/lang/Object;Lorg/apache/lucene/search/TopDocsCollector;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_collector] = env->getFieldID(cls, "collector", "Lorg/apache/lucene/search/TopDocsCollector;");
              fids$[fid_groupValue] = env->getFieldID(cls, "groupValue", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractSecondPassGroupingCollector$SearchGroupDocs::AbstractSecondPassGroupingCollector$SearchGroupDocs(const ::org::apache::lucene::search::grouping::AbstractSecondPassGroupingCollector & a0, const ::java::lang::Object & a1, const ::org::apache::lucene::search::TopDocsCollector & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b73e617c, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::TopDocsCollector AbstractSecondPassGroupingCollector$SearchGroupDocs::_get_collector() const
          {
            return ::org::apache::lucene::search::TopDocsCollector(env->getObjectField(this$, fids$[fid_collector]));
          }

          ::java::lang::Object AbstractSecondPassGroupingCollector$SearchGroupDocs::_get_groupValue() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_groupValue]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_of_(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, PyObject *args);
          static int t_AbstractSecondPassGroupingCollector$SearchGroupDocs_init_(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_get__collector(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, void *data);
          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_get__groupValue(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, void *data);

          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_get__parameters_(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, void *data);
          static PyGetSetDef t_AbstractSecondPassGroupingCollector$SearchGroupDocs__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractSecondPassGroupingCollector$SearchGroupDocs, collector),
            DECLARE_GET_FIELD(t_AbstractSecondPassGroupingCollector$SearchGroupDocs, groupValue),
            DECLARE_GET_FIELD(t_AbstractSecondPassGroupingCollector$SearchGroupDocs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractSecondPassGroupingCollector$SearchGroupDocs__methods_[] = {
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector$SearchGroupDocs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector$SearchGroupDocs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector$SearchGroupDocs, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractSecondPassGroupingCollector$SearchGroupDocs, t_AbstractSecondPassGroupingCollector$SearchGroupDocs, ::java::lang::Object, AbstractSecondPassGroupingCollector$SearchGroupDocs, t_AbstractSecondPassGroupingCollector$SearchGroupDocs_init_, 0, 0, t_AbstractSecondPassGroupingCollector$SearchGroupDocs__fields_, 0, 0);
          PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs::wrap_Object(const AbstractSecondPassGroupingCollector$SearchGroupDocs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractSecondPassGroupingCollector$SearchGroupDocs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self = (t_AbstractSecondPassGroupingCollector$SearchGroupDocs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractSecondPassGroupingCollector$SearchGroupDocs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self = (t_AbstractSecondPassGroupingCollector$SearchGroupDocs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractSecondPassGroupingCollector$SearchGroupDocs::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractSecondPassGroupingCollector$SearchGroupDocs), module, "AbstractSecondPassGroupingCollector$SearchGroupDocs", 0);
          }

          void t_AbstractSecondPassGroupingCollector$SearchGroupDocs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractSecondPassGroupingCollector$SearchGroupDocs).tp_dict, "class_", make_descriptor(AbstractSecondPassGroupingCollector$SearchGroupDocs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractSecondPassGroupingCollector$SearchGroupDocs).tp_dict, "wrapfn_", make_descriptor(t_AbstractSecondPassGroupingCollector$SearchGroupDocs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractSecondPassGroupingCollector$SearchGroupDocs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractSecondPassGroupingCollector$SearchGroupDocs::initializeClass, 1)))
              return NULL;
            return t_AbstractSecondPassGroupingCollector$SearchGroupDocs::wrap_Object(AbstractSecondPassGroupingCollector$SearchGroupDocs(((t_AbstractSecondPassGroupingCollector$SearchGroupDocs *) arg)->object.this$));
          }
          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractSecondPassGroupingCollector$SearchGroupDocs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_of_(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_AbstractSecondPassGroupingCollector$SearchGroupDocs_init_(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::grouping::AbstractSecondPassGroupingCollector a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::Object a1((jobject) NULL);
            ::org::apache::lucene::search::TopDocsCollector a2((jobject) NULL);
            PyTypeObject **p2;
            AbstractSecondPassGroupingCollector$SearchGroupDocs object((jobject) NULL);

            if (!parseArgs(args, "KoK", ::org::apache::lucene::search::grouping::AbstractSecondPassGroupingCollector::initializeClass, ::org::apache::lucene::search::TopDocsCollector::initializeClass, &a0, &p0, ::org::apache::lucene::search::grouping::t_AbstractSecondPassGroupingCollector::parameters_, &a1, &a2, &p2, ::org::apache::lucene::search::t_TopDocsCollector::parameters_))
            {
              INT_CALL(object = AbstractSecondPassGroupingCollector$SearchGroupDocs(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_get__parameters_(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_get__collector(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, void *data)
          {
            ::org::apache::lucene::search::TopDocsCollector value((jobject) NULL);
            OBJ_CALL(value = self->object._get_collector());
            return ::org::apache::lucene::search::t_TopDocsCollector::wrap_Object(value);
          }

          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_get__groupValue(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupValue());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/SingleInstanceLockFactory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Lock.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *SingleInstanceLockFactory::class$ = NULL;
        jmethodID *SingleInstanceLockFactory::mids$ = NULL;
        bool SingleInstanceLockFactory::live$ = false;

        jclass SingleInstanceLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/SingleInstanceLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SingleInstanceLockFactory::SingleInstanceLockFactory() : ::org::apache::lucene::store::LockFactory(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void SingleInstanceLockFactory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        ::org::apache::lucene::store::Lock SingleInstanceLockFactory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_SingleInstanceLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SingleInstanceLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SingleInstanceLockFactory_init_(t_SingleInstanceLockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SingleInstanceLockFactory_clearLock(t_SingleInstanceLockFactory *self, PyObject *args);
        static PyObject *t_SingleInstanceLockFactory_makeLock(t_SingleInstanceLockFactory *self, PyObject *args);

        static PyMethodDef t_SingleInstanceLockFactory__methods_[] = {
          DECLARE_METHOD(t_SingleInstanceLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SingleInstanceLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SingleInstanceLockFactory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_SingleInstanceLockFactory, makeLock, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SingleInstanceLockFactory, t_SingleInstanceLockFactory, ::org::apache::lucene::store::LockFactory, SingleInstanceLockFactory, t_SingleInstanceLockFactory_init_, 0, 0, 0, 0, 0);

        void t_SingleInstanceLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(SingleInstanceLockFactory), module, "SingleInstanceLockFactory", 0);
        }

        void t_SingleInstanceLockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SingleInstanceLockFactory).tp_dict, "class_", make_descriptor(SingleInstanceLockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SingleInstanceLockFactory).tp_dict, "wrapfn_", make_descriptor(t_SingleInstanceLockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SingleInstanceLockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SingleInstanceLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SingleInstanceLockFactory::initializeClass, 1)))
            return NULL;
          return t_SingleInstanceLockFactory::wrap_Object(SingleInstanceLockFactory(((t_SingleInstanceLockFactory *) arg)->object.this$));
        }
        static PyObject *t_SingleInstanceLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SingleInstanceLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SingleInstanceLockFactory_init_(t_SingleInstanceLockFactory *self, PyObject *args, PyObject *kwds)
        {
          SingleInstanceLockFactory object((jobject) NULL);

          INT_CALL(object = SingleInstanceLockFactory());
          self->object = object;

          return 0;
        }

        static PyObject *t_SingleInstanceLockFactory_clearLock(t_SingleInstanceLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SingleInstanceLockFactory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_SingleInstanceLockFactory_makeLock(t_SingleInstanceLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SingleInstanceLockFactory), (PyObject *) self, "makeLock", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Arrays.h"
#include "java/lang/String.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "java/util/List.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *Arrays::class$ = NULL;
    jmethodID *Arrays::mids$ = NULL;
    bool Arrays::live$ = false;

    jclass Arrays::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/Arrays");

        mids$ = new jmethodID[max_mid];
        mids$[mid_asList_b1a4e262] = env->getStaticMethodID(cls, "asList", "([Ljava/lang/Object;)Ljava/util/List;");
        mids$[mid_binarySearch_c36b04d7] = env->getStaticMethodID(cls, "binarySearch", "([FF)I");
        mids$[mid_binarySearch_1da92101] = env->getStaticMethodID(cls, "binarySearch", "([Ljava/lang/Object;Ljava/lang/Object;)I");
        mids$[mid_binarySearch_8f13b3af] = env->getStaticMethodID(cls, "binarySearch", "([BB)I");
        mids$[mid_binarySearch_e6fbc3d5] = env->getStaticMethodID(cls, "binarySearch", "([SS)I");
        mids$[mid_binarySearch_4c830bcf] = env->getStaticMethodID(cls, "binarySearch", "([JJ)I");
        mids$[mid_binarySearch_d6ab1c2f] = env->getStaticMethodID(cls, "binarySearch", "([DD)I");
        mids$[mid_binarySearch_df726439] = env->getStaticMethodID(cls, "binarySearch", "([II)I");
        mids$[mid_binarySearch_ea67e195] = env->getStaticMethodID(cls, "binarySearch", "([CC)I");
        mids$[mid_binarySearch_736a8636] = env->getStaticMethodID(cls, "binarySearch", "([Ljava/lang/Object;Ljava/lang/Object;Ljava/util/Comparator;)I");
        mids$[mid_binarySearch_c8914cef] = env->getStaticMethodID(cls, "binarySearch", "([JIIJ)I");
        mids$[mid_binarySearch_1e4305af] = env->getStaticMethodID(cls, "binarySearch", "([BIIB)I");
        mids$[mid_binarySearch_b3c1f717] = env->getStaticMethodID(cls, "binarySearch", "([FIIF)I");
        mids$[mid_binarySearch_dee75d29] = env->getStaticMethodID(cls, "binarySearch", "([Ljava/lang/Object;IILjava/lang/Object;)I");
        mids$[mid_binarySearch_695adc4b] = env->getStaticMethodID(cls, "binarySearch", "([DIID)I");
        mids$[mid_binarySearch_b5b4fc35] = env->getStaticMethodID(cls, "binarySearch", "([CIIC)I");
        mids$[mid_binarySearch_4eae659d] = env->getStaticMethodID(cls, "binarySearch", "([IIII)I");
        mids$[mid_binarySearch_4f5bed95] = env->getStaticMethodID(cls, "binarySearch", "([SIIS)I");
        mids$[mid_binarySearch_07be7c2a] = env->getStaticMethodID(cls, "binarySearch", "([Ljava/lang/Object;IILjava/lang/Object;Ljava/util/Comparator;)I");
        mids$[mid_copyOf_d090ee39] = env->getStaticMethodID(cls, "copyOf", "([SI)[S");
        mids$[mid_copyOf_91cb90f9] = env->getStaticMethodID(cls, "copyOf", "([CI)[C");
        mids$[mid_copyOf_0f9a030d] = env->getStaticMethodID(cls, "copyOf", "([JI)[J");
        mids$[mid_copyOf_e2c1f835] = env->getStaticMethodID(cls, "copyOf", "([DI)[D");
        mids$[mid_copyOf_6bd5869d] = env->getStaticMethodID(cls, "copyOf", "([BI)[B");
        mids$[mid_copyOf_669ee2d1] = env->getStaticMethodID(cls, "copyOf", "([Ljava/lang/Object;I)[Ljava/lang/Object;");
        mids$[mid_copyOf_d766d189] = env->getStaticMethodID(cls, "copyOf", "([II)[I");
        mids$[mid_copyOf_a415095d] = env->getStaticMethodID(cls, "copyOf", "([FI)[F");
        mids$[mid_copyOf_1fbccced] = env->getStaticMethodID(cls, "copyOf", "([ZI)[Z");
        mids$[mid_copyOf_3608f1f7] = env->getStaticMethodID(cls, "copyOf", "([Ljava/lang/Object;ILjava/lang/Class;)[Ljava/lang/Object;");
        mids$[mid_copyOfRange_16e37a35] = env->getStaticMethodID(cls, "copyOfRange", "([FII)[F");
        mids$[mid_copyOfRange_b92120ff] = env->getStaticMethodID(cls, "copyOfRange", "([Ljava/lang/Object;II)[Ljava/lang/Object;");
        mids$[mid_copyOfRange_bb313e1d] = env->getStaticMethodID(cls, "copyOfRange", "([DII)[D");
        mids$[mid_copyOfRange_96b1a95f] = env->getStaticMethodID(cls, "copyOfRange", "([CII)[C");
        mids$[mid_copyOfRange_3d448975] = env->getStaticMethodID(cls, "copyOfRange", "([BII)[B");
        mids$[mid_copyOfRange_a80c3bb3] = env->getStaticMethodID(cls, "copyOfRange", "([III)[I");
        mids$[mid_copyOfRange_be4afb45] = env->getStaticMethodID(cls, "copyOfRange", "([JII)[J");
        mids$[mid_copyOfRange_9766cdc5] = env->getStaticMethodID(cls, "copyOfRange", "([ZII)[Z");
        mids$[mid_copyOfRange_3a8237ff] = env->getStaticMethodID(cls, "copyOfRange", "([SII)[S");
        mids$[mid_copyOfRange_bca17599] = env->getStaticMethodID(cls, "copyOfRange", "([Ljava/lang/Object;IILjava/lang/Class;)[Ljava/lang/Object;");
        mids$[mid_deepEquals_a9ca87d2] = env->getStaticMethodID(cls, "deepEquals", "([Ljava/lang/Object;[Ljava/lang/Object;)Z");
        mids$[mid_deepHashCode_c0f5dac5] = env->getStaticMethodID(cls, "deepHashCode", "([Ljava/lang/Object;)I");
        mids$[mid_deepToString_02ea1cdd] = env->getStaticMethodID(cls, "deepToString", "([Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_equals_a9ca87d2] = env->getStaticMethodID(cls, "equals", "([Ljava/lang/Object;[Ljava/lang/Object;)Z");
        mids$[mid_equals_7868d93a] = env->getStaticMethodID(cls, "equals", "([S[S)Z");
        mids$[mid_equals_e3842e2a] = env->getStaticMethodID(cls, "equals", "([J[J)Z");
        mids$[mid_equals_2a42df9a] = env->getStaticMethodID(cls, "equals", "([C[C)Z");
        mids$[mid_equals_7c26725e] = env->getStaticMethodID(cls, "equals", "([I[I)Z");
        mids$[mid_equals_38a3e932] = env->getStaticMethodID(cls, "equals", "([F[F)Z");
        mids$[mid_equals_a2d8877a] = env->getStaticMethodID(cls, "equals", "([B[B)Z");
        mids$[mid_equals_2383bf16] = env->getStaticMethodID(cls, "equals", "([D[D)Z");
        mids$[mid_equals_6f6949ea] = env->getStaticMethodID(cls, "equals", "([Z[Z)Z");
        mids$[mid_fill_8f13b3b0] = env->getStaticMethodID(cls, "fill", "([BB)V");
        mids$[mid_fill_e6fbc3ca] = env->getStaticMethodID(cls, "fill", "([SS)V");
        mids$[mid_fill_c36b04c8] = env->getStaticMethodID(cls, "fill", "([FF)V");
        mids$[mid_fill_1da9211e] = env->getStaticMethodID(cls, "fill", "([Ljava/lang/Object;Ljava/lang/Object;)V");
        mids$[mid_fill_ea67e18a] = env->getStaticMethodID(cls, "fill", "([CC)V");
        mids$[mid_fill_4c830bd0] = env->getStaticMethodID(cls, "fill", "([JJ)V");
        mids$[mid_fill_d6ab1c30] = env->getStaticMethodID(cls, "fill", "([DD)V");
        mids$[mid_fill_df726426] = env->getStaticMethodID(cls, "fill", "([II)V");
        mids$[mid_fill_ad7155b0] = env->getStaticMethodID(cls, "fill", "([ZZ)V");
        mids$[mid_fill_b5b4fc2a] = env->getStaticMethodID(cls, "fill", "([CIIC)V");
        mids$[mid_fill_b3c1f708] = env->getStaticMethodID(cls, "fill", "([FIIF)V");
        mids$[mid_fill_c8914cf0] = env->getStaticMethodID(cls, "fill", "([JIIJ)V");
        mids$[mid_fill_dee75d36] = env->getStaticMethodID(cls, "fill", "([Ljava/lang/Object;IILjava/lang/Object;)V");
        mids$[mid_fill_4f5bed8a] = env->getStaticMethodID(cls, "fill", "([SIIS)V");
        mids$[mid_fill_1e4305b0] = env->getStaticMethodID(cls, "fill", "([BIIB)V");
        mids$[mid_fill_4eae6582] = env->getStaticMethodID(cls, "fill", "([IIII)V");
        mids$[mid_fill_77210c30] = env->getStaticMethodID(cls, "fill", "([ZIIZ)V");
        mids$[mid_fill_695adc54] = env->getStaticMethodID(cls, "fill", "([DIID)V");
        mids$[mid_hashCode_f0c5b9dc] = env->getStaticMethodID(cls, "hashCode", "([Z)I");
        mids$[mid_hashCode_9ceb500c] = env->getStaticMethodID(cls, "hashCode", "([J)I");
        mids$[mid_hashCode_49b4f134] = env->getStaticMethodID(cls, "hashCode", "([B)I");
        mids$[mid_hashCode_700e23c9] = env->getStaticMethodID(cls, "hashCode", "([C)I");
        mids$[mid_hashCode_c017fc59] = env->getStaticMethodID(cls, "hashCode", "([S)I");
        mids$[mid_hashCode_f3b62cc6] = env->getStaticMethodID(cls, "hashCode", "([D)I");
        mids$[mid_hashCode_9cc34320] = env->getStaticMethodID(cls, "hashCode", "([F)I");
        mids$[mid_hashCode_1efc2017] = env->getStaticMethodID(cls, "hashCode", "([I)I");
        mids$[mid_hashCode_c0f5dac5] = env->getStaticMethodID(cls, "hashCode", "([Ljava/lang/Object;)I");
        mids$[mid_sort_9cc3433f] = env->getStaticMethodID(cls, "sort", "([F)V");
        mids$[mid_sort_9ceb5013] = env->getStaticMethodID(cls, "sort", "([J)V");
        mids$[mid_sort_f3b62cd9] = env->getStaticMethodID(cls, "sort", "([D)V");
        mids$[mid_sort_700e23d6] = env->getStaticMethodID(cls, "sort", "([C)V");
        mids$[mid_sort_c0f5dada] = env->getStaticMethodID(cls, "sort", "([Ljava/lang/Object;)V");
        mids$[mid_sort_49b4f12b] = env->getStaticMethodID(cls, "sort", "([B)V");
        mids$[mid_sort_c017fc46] = env->getStaticMethodID(cls, "sort", "([S)V");
        mids$[mid_sort_1efc2008] = env->getStaticMethodID(cls, "sort", "([I)V");
        mids$[mid_sort_8c46d789] = env->getStaticMethodID(cls, "sort", "([Ljava/lang/Object;Ljava/util/Comparator;)V");
        mids$[mid_sort_b389e986] = env->getStaticMethodID(cls, "sort", "([SII)V");
        mids$[mid_sort_3e1ea22c] = env->getStaticMethodID(cls, "sort", "([III)V");
        mids$[mid_sort_c8bd2f63] = env->getStaticMethodID(cls, "sort", "([FII)V");
        mids$[mid_sort_86f4435f] = env->getStaticMethodID(cls, "sort", "([BII)V");
        mids$[mid_sort_6f0bb356] = env->getStaticMethodID(cls, "sort", "([CII)V");
        mids$[mid_sort_3be2c5d1] = env->getStaticMethodID(cls, "sort", "([DII)V");
        mids$[mid_sort_6ae021e7] = env->getStaticMethodID(cls, "sort", "([JII)V");
        mids$[mid_sort_4172dade] = env->getStaticMethodID(cls, "sort", "([Ljava/lang/Object;II)V");
        mids$[mid_sort_7c263389] = env->getStaticMethodID(cls, "sort", "([Ljava/lang/Object;IILjava/util/Comparator;)V");
        mids$[mid_toString_0f6e0f86] = env->getStaticMethodID(cls, "toString", "([B)Ljava/lang/String;");
        mids$[mid_toString_08b6580a] = env->getStaticMethodID(cls, "toString", "([F)Ljava/lang/String;");
        mids$[mid_toString_c783d655] = env->getStaticMethodID(cls, "toString", "([C)Ljava/lang/String;");
        mids$[mid_toString_9352a4bc] = env->getStaticMethodID(cls, "toString", "([D)Ljava/lang/String;");
        mids$[mid_toString_aeceff45] = env->getStaticMethodID(cls, "toString", "([S)Ljava/lang/String;");
        mids$[mid_toString_14e8bbde] = env->getStaticMethodID(cls, "toString", "([Z)Ljava/lang/String;");
        mids$[mid_toString_02ea1cdd] = env->getStaticMethodID(cls, "toString", "([Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_toString_053bf1ae] = env->getStaticMethodID(cls, "toString", "([J)Ljava/lang/String;");
        mids$[mid_toString_9570afaf] = env->getStaticMethodID(cls, "toString", "([I)Ljava/lang/String;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::util::List Arrays::asList(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_asList_b1a4e262], a0.this$));
    }

    jint Arrays::binarySearch(const JArray< jfloat > & a0, jfloat a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_c36b04d7], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< ::java::lang::Object > & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_1da92101], a0.this$, a1.this$);
    }

    jint Arrays::binarySearch(const JArray< jbyte > & a0, jbyte a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_8f13b3af], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< jshort > & a0, jshort a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_e6fbc3d5], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< jlong > & a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_4c830bcf], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< jdouble > & a0, jdouble a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_d6ab1c2f], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< jint > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_df726439], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< jchar > & a0, jchar a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_ea67e195], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< ::java::lang::Object > & a0, const ::java::lang::Object & a1, const ::java::util::Comparator & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_736a8636], a0.this$, a1.this$, a2.this$);
    }

    jint Arrays::binarySearch(const JArray< jlong > & a0, jint a1, jint a2, jlong a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_c8914cef], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< jbyte > & a0, jint a1, jint a2, jbyte a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_1e4305af], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< jfloat > & a0, jint a1, jint a2, jfloat a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_b3c1f717], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::lang::Object & a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_dee75d29], a0.this$, a1, a2, a3.this$);
    }

    jint Arrays::binarySearch(const JArray< jdouble > & a0, jint a1, jint a2, jdouble a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_695adc4b], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< jchar > & a0, jint a1, jint a2, jchar a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_b5b4fc35], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< jint > & a0, jint a1, jint a2, jint a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_4eae659d], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< jshort > & a0, jint a1, jint a2, jshort a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_4f5bed95], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::lang::Object & a3, const ::java::util::Comparator & a4)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_07be7c2a], a0.this$, a1, a2, a3.this$, a4.this$);
    }

    JArray< jshort > Arrays::copyOf(const JArray< jshort > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jshort >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_d090ee39], a0.this$, a1));
    }

    JArray< jchar > Arrays::copyOf(const JArray< jchar > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_91cb90f9], a0.this$, a1));
    }

    JArray< jlong > Arrays::copyOf(const JArray< jlong > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jlong >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_0f9a030d], a0.this$, a1));
    }

    JArray< jdouble > Arrays::copyOf(const JArray< jdouble > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jdouble >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_e2c1f835], a0.this$, a1));
    }

    JArray< jbyte > Arrays::copyOf(const JArray< jbyte > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_6bd5869d], a0.this$, a1));
    }

    JArray< ::java::lang::Object > Arrays::copyOf(const JArray< ::java::lang::Object > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::lang::Object >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_669ee2d1], a0.this$, a1));
    }

    JArray< jint > Arrays::copyOf(const JArray< jint > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_d766d189], a0.this$, a1));
    }

    JArray< jfloat > Arrays::copyOf(const JArray< jfloat > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jfloat >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_a415095d], a0.this$, a1));
    }

    JArray< jboolean > Arrays::copyOf(const JArray< jboolean > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jboolean >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_1fbccced], a0.this$, a1));
    }

    JArray< ::java::lang::Object > Arrays::copyOf(const JArray< ::java::lang::Object > & a0, jint a1, const ::java::lang::Class & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::lang::Object >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_3608f1f7], a0.this$, a1, a2.this$));
    }

    JArray< jfloat > Arrays::copyOfRange(const JArray< jfloat > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jfloat >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_16e37a35], a0.this$, a1, a2));
    }

    JArray< ::java::lang::Object > Arrays::copyOfRange(const JArray< ::java::lang::Object > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::lang::Object >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_b92120ff], a0.this$, a1, a2));
    }

    JArray< jdouble > Arrays::copyOfRange(const JArray< jdouble > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jdouble >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_bb313e1d], a0.this$, a1, a2));
    }

    JArray< jchar > Arrays::copyOfRange(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_96b1a95f], a0.this$, a1, a2));
    }

    JArray< jbyte > Arrays::copyOfRange(const JArray< jbyte > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_3d448975], a0.this$, a1, a2));
    }

    JArray< jint > Arrays::copyOfRange(const JArray< jint > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_a80c3bb3], a0.this$, a1, a2));
    }

    JArray< jlong > Arrays::copyOfRange(const JArray< jlong > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jlong >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_be4afb45], a0.this$, a1, a2));
    }

    JArray< jboolean > Arrays::copyOfRange(const JArray< jboolean > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jboolean >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_9766cdc5], a0.this$, a1, a2));
    }

    JArray< jshort > Arrays::copyOfRange(const JArray< jshort > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jshort >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_3a8237ff], a0.this$, a1, a2));
    }

    JArray< ::java::lang::Object > Arrays::copyOfRange(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::lang::Class & a3)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::lang::Object >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_bca17599], a0.this$, a1, a2, a3.this$));
    }

    jboolean Arrays::deepEquals(const JArray< ::java::lang::Object > & a0, const JArray< ::java::lang::Object > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_deepEquals_a9ca87d2], a0.this$, a1.this$);
    }

    jint Arrays::deepHashCode(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_deepHashCode_c0f5dac5], a0.this$);
    }

    ::java::lang::String Arrays::deepToString(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_deepToString_02ea1cdd], a0.this$));
    }

    jboolean Arrays::equals(const JArray< ::java::lang::Object > & a0, const JArray< ::java::lang::Object > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_a9ca87d2], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jshort > & a0, const JArray< jshort > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_7868d93a], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jlong > & a0, const JArray< jlong > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_e3842e2a], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jchar > & a0, const JArray< jchar > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_2a42df9a], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jint > & a0, const JArray< jint > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_7c26725e], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jfloat > & a0, const JArray< jfloat > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_38a3e932], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jbyte > & a0, const JArray< jbyte > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_a2d8877a], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jdouble > & a0, const JArray< jdouble > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_2383bf16], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jboolean > & a0, const JArray< jboolean > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_6f6949ea], a0.this$, a1.this$);
    }

    void Arrays::fill(const JArray< jbyte > & a0, jbyte a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_8f13b3b0], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jshort > & a0, jshort a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_e6fbc3ca], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jfloat > & a0, jfloat a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_c36b04c8], a0.this$, a1);
    }

    void Arrays::fill(const JArray< ::java::lang::Object > & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_1da9211e], a0.this$, a1.this$);
    }

    void Arrays::fill(const JArray< jchar > & a0, jchar a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_ea67e18a], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jlong > & a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_4c830bd0], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jdouble > & a0, jdouble a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_d6ab1c30], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jint > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_df726426], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jboolean > & a0, jboolean a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_ad7155b0], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jchar > & a0, jint a1, jint a2, jchar a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_b5b4fc2a], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jfloat > & a0, jint a1, jint a2, jfloat a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_b3c1f708], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jlong > & a0, jint a1, jint a2, jlong a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_c8914cf0], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::lang::Object & a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_dee75d36], a0.this$, a1, a2, a3.this$);
    }

    void Arrays::fill(const JArray< jshort > & a0, jint a1, jint a2, jshort a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_4f5bed8a], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jbyte > & a0, jint a1, jint a2, jbyte a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_1e4305b0], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jint > & a0, jint a1, jint a2, jint a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_4eae6582], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jboolean > & a0, jint a1, jint a2, jboolean a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_77210c30], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jdouble > & a0, jint a1, jint a2, jdouble a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_695adc54], a0.this$, a1, a2, a3);
    }

    jint Arrays::hashCode(const JArray< jboolean > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_f0c5b9dc], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jlong > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_9ceb500c], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jbyte > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_49b4f134], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_700e23c9], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jshort > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_c017fc59], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jdouble > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_f3b62cc6], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jfloat > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_9cc34320], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jint > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_1efc2017], a0.this$);
    }

    jint Arrays::hashCode(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_c0f5dac5], a0.this$);
    }

    void Arrays::sort(const JArray< jfloat > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_9cc3433f], a0.this$);
    }

    void Arrays::sort(const JArray< jlong > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_9ceb5013], a0.this$);
    }

    void Arrays::sort(const JArray< jdouble > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_f3b62cd9], a0.this$);
    }

    void Arrays::sort(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_700e23d6], a0.this$);
    }

    void Arrays::sort(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_c0f5dada], a0.this$);
    }

    void Arrays::sort(const JArray< jbyte > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_49b4f12b], a0.this$);
    }

    void Arrays::sort(const JArray< jshort > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_c017fc46], a0.this$);
    }

    void Arrays::sort(const JArray< jint > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_1efc2008], a0.this$);
    }

    void Arrays::sort(const JArray< ::java::lang::Object > & a0, const ::java::util::Comparator & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_8c46d789], a0.this$, a1.this$);
    }

    void Arrays::sort(const JArray< jshort > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_b389e986], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jint > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_3e1ea22c], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jfloat > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_c8bd2f63], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jbyte > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_86f4435f], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_6f0bb356], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jdouble > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_3be2c5d1], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jlong > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_6ae021e7], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< ::java::lang::Object > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_4172dade], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::util::Comparator & a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_7c263389], a0.this$, a1, a2, a3.this$);
    }

    ::java::lang::String Arrays::toString(const JArray< jbyte > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_0f6e0f86], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jfloat > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_08b6580a], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_c783d655], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jdouble > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_9352a4bc], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jshort > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_aeceff45], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jboolean > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_14e8bbde], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_02ea1cdd], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jlong > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_053bf1ae], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jint > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_9570afaf], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_Arrays_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Arrays_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Arrays_asList(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Arrays_binarySearch(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_copyOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_copyOfRange(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_deepEquals(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_deepHashCode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Arrays_deepToString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Arrays_equals(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_fill(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_hashCode(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_sort(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_toString(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Arrays__methods_[] = {
      DECLARE_METHOD(t_Arrays, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Arrays, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Arrays, asList, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Arrays, binarySearch, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, copyOf, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, copyOfRange, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, deepEquals, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, deepHashCode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Arrays, deepToString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Arrays, equals, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, fill, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, hashCode, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, sort, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, toString, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Arrays, t_Arrays, ::java::lang::Object, Arrays, abstract_init, 0, 0, 0, 0, 0);

    void t_Arrays::install(PyObject *module)
    {
      installType(&PY_TYPE(Arrays), module, "Arrays", 0);
    }

    void t_Arrays::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Arrays).tp_dict, "class_", make_descriptor(Arrays::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Arrays).tp_dict, "wrapfn_", make_descriptor(t_Arrays::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Arrays).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Arrays_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Arrays::initializeClass, 1)))
        return NULL;
      return t_Arrays::wrap_Object(Arrays(((t_Arrays *) arg)->object.this$));
    }
    static PyObject *t_Arrays_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Arrays::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Arrays_asList(PyTypeObject *type, PyObject *arg)
    {
      JArray< ::java::lang::Object > a0((jobject) NULL);
      ::java::util::List result((jobject) NULL);

      if (!parseArg(arg, "[o", &a0))
      {
        OBJ_CALL(result = ::java::util::Arrays::asList(a0));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "asList", arg);
      return NULL;
    }

    static PyObject *t_Arrays_binarySearch(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< jfloat > a0((jobject) NULL);
          jfloat a1;
          jint result;

          if (!parseArgs(args, "[FF", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[oo", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jbyte a1;
          jint result;

          if (!parseArgs(args, "[BB", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jshort a1;
          jint result;

          if (!parseArgs(args, "[SS", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jlong a1;
          jint result;

          if (!parseArgs(args, "[JJ", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jdouble a1;
          jint result;

          if (!parseArgs(args, "[DD", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "[II", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jchar a1;
          jint result;

          if (!parseArgs(args, "[CC", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          ::java::util::Comparator a2((jobject) NULL);
          PyTypeObject **p2;
          jint result;

          if (!parseArgs(args, "[ooK", ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 4:
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;
          jlong a3;
          jint result;

          if (!parseArgs(args, "[JIIJ", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jbyte a3;
          jint result;

          if (!parseArgs(args, "[BIIB", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jint a1;
          jint a2;
          jfloat a3;
          jint result;

          if (!parseArgs(args, "[FIIF", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::lang::Object a3((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[oIIo", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          jint a2;
          jdouble a3;
          jint result;

          if (!parseArgs(args, "[DIID", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jchar a3;
          jint result;

          if (!parseArgs(args, "[CIIC", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint a3;
          jint result;

          if (!parseArgs(args, "[IIII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jint a1;
          jint a2;
          jshort a3;
          jint result;

          if (!parseArgs(args, "[SIIS", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 5:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::lang::Object a3((jobject) NULL);
          ::java::util::Comparator a4((jobject) NULL);
          PyTypeObject **p4;
          jint result;

          if (!parseArgs(args, "[oIIoK", ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3, a4));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "binarySearch", args);
      return NULL;
    }

    static PyObject *t_Arrays_copyOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< jshort > a0((jobject) NULL);
          jint a1;
          JArray< jshort > result((jobject) NULL);

          if (!parseArgs(args, "[SI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          JArray< jchar > result((jobject) NULL);

          if (!parseArgs(args, "[CI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          JArray< jlong > result((jobject) NULL);

          if (!parseArgs(args, "[JI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          JArray< jdouble > result((jobject) NULL);

          if (!parseArgs(args, "[DI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          JArray< jbyte > result((jobject) NULL);

          if (!parseArgs(args, "[BI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArgs(args, "[oI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, "[II", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jint a1;
          JArray< jfloat > result((jobject) NULL);

          if (!parseArgs(args, "[FI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          jint a1;
          JArray< jboolean > result((jobject) NULL);

          if (!parseArgs(args, "[ZI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        break;
       case 3:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          ::java::lang::Class a2((jobject) NULL);
          PyTypeObject **p2;
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArgs(args, "[oIK", ::java::lang::Class::initializeClass, &a0, &a1, &a2, &p2, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1, a2));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
        }
      }

      PyErr_SetArgsError(type, "copyOf", args);
      return NULL;
    }

    static PyObject *t_Arrays_copyOfRange(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 3:
        {
          JArray< jfloat > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jfloat > result((jobject) NULL);

          if (!parseArgs(args, "[FII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArgs(args, "[oII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jdouble > result((jobject) NULL);

          if (!parseArgs(args, "[DII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jchar > result((jobject) NULL);

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jbyte > result((jobject) NULL);

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, "[III", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jlong > result((jobject) NULL);

          if (!parseArgs(args, "[JII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jboolean > result((jobject) NULL);

          if (!parseArgs(args, "[ZII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jshort > result((jobject) NULL);

          if (!parseArgs(args, "[SII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        break;
       case 4:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::lang::Class a3((jobject) NULL);
          PyTypeObject **p3;
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArgs(args, "[oIIK", ::java::lang::Class::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2, a3));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
        }
      }

      PyErr_SetArgsError(type, "copyOfRange", args);
      return NULL;
    }

    static PyObject *t_Arrays_deepEquals(PyTypeObject *type, PyObject *args)
    {
      JArray< ::java::lang::Object > a0((jobject) NULL);
      JArray< ::java::lang::Object > a1((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "[o[o", &a0, &a1))
      {
        OBJ_CALL(result = ::java::util::Arrays::deepEquals(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "deepEquals", args);
      return NULL;
    }

    static PyObject *t_Arrays_deepHashCode(PyTypeObject *type, PyObject *arg)
    {
      JArray< ::java::lang::Object > a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "[o", &a0))
      {
        OBJ_CALL(result = ::java::util::Arrays::deepHashCode(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "deepHashCode", arg);
      return NULL;
    }

    static PyObject *t_Arrays_deepToString(PyTypeObject *type, PyObject *arg)
    {
      JArray< ::java::lang::Object > a0((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "[o", &a0))
      {
        OBJ_CALL(result = ::java::util::Arrays::deepToString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "deepToString", arg);
      return NULL;
    }

    static PyObject *t_Arrays_equals(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          JArray< ::java::lang::Object > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[o[o", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          JArray< jshort > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[S[S", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[J[J", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          JArray< jchar > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[C[C", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          JArray< jint > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[I[I", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          JArray< jfloat > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[F[F", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          JArray< jbyte > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[B[B", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          JArray< jdouble > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[D[D", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          JArray< jboolean > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[Z[Z", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
      }

      return callSuper(type, "equals", args, 2);
    }

    static PyObject *t_Arrays_fill(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< jbyte > a0((jobject) NULL);
          jbyte a1;

          if (!parseArgs(args, "[BB", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jshort a1;

          if (!parseArgs(args, "[SS", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jfloat a1;

          if (!parseArgs(args, "[FF", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);

          if (!parseArgs(args, "[oo", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jchar a1;

          if (!parseArgs(args, "[CC", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "[JJ", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jdouble a1;

          if (!parseArgs(args, "[DD", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "[II", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          jboolean a1;

          if (!parseArgs(args, "[ZZ", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        break;
       case 4:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jchar a3;

          if (!parseArgs(args, "[CIIC", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jint a1;
          jint a2;
          jfloat a3;

          if (!parseArgs(args, "[FIIF", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;
          jlong a3;

          if (!parseArgs(args, "[JIIJ", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::lang::Object a3((jobject) NULL);

          if (!parseArgs(args, "[oIIo", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jint a1;
          jint a2;
          jshort a3;

          if (!parseArgs(args, "[SIIS", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jbyte a3;

          if (!parseArgs(args, "[BIIB", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint a3;

          if (!parseArgs(args, "[IIII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          jint a1;
          jint a2;
          jboolean a3;

          if (!parseArgs(args, "[ZIIZ", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          jint a2;
          jdouble a3;

          if (!parseArgs(args, "[DIID", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "fill", args);
      return NULL;
    }

    static PyObject *t_Arrays_hashCode(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jboolean > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[Z", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[J", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[S", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[D", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[F", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[I", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[o", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
      }

      return callSuper(type, "hashCode", args, 2);
    }

    static PyObject *t_Arrays_sort(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jfloat > a0((jobject) NULL);

          if (!parseArgs(args, "[F", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);

          if (!parseArgs(args, "[J", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);

          if (!parseArgs(args, "[D", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);

          if (!parseArgs(args, "[o", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);

          if (!parseArgs(args, "[S", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);

          if (!parseArgs(args, "[I", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::util::Comparator a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "[oK", ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1));
            Py_RETURN_NONE;
          }
        }
        break;
       case 3:
        {
          JArray< jshort > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[SII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[III", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[FII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[DII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[JII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[oII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        break;
       case 4:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::util::Comparator a3((jobject) NULL);
          PyTypeObject **p3;

          if (!parseArgs(args, "[oIIK", ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "sort", args);
      return NULL;
    }

    static PyObject *t_Arrays_toString(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jbyte > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[F", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[D", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[S", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[Z", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[o", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[J", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[I", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
      }

      return callSuper(type, "toString", args, 2);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$relational_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$relational_return::class$ = NULL;
          jmethodID *JavascriptParser$relational_return::mids$ = NULL;
          bool JavascriptParser$relational_return::live$ = false;

          jclass JavascriptParser$relational_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$relational_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$relational_return::JavascriptParser$relational_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$relational_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$relational_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$relational_return_init_(t_JavascriptParser$relational_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$relational_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$relational_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$relational_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$relational_return, t_JavascriptParser$relational_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$relational_return, t_JavascriptParser$relational_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$relational_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$relational_return), module, "JavascriptParser$relational_return", 0);
          }

          void t_JavascriptParser$relational_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$relational_return).tp_dict, "class_", make_descriptor(JavascriptParser$relational_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$relational_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$relational_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$relational_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$relational_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$relational_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$relational_return::wrap_Object(JavascriptParser$relational_return(((t_JavascriptParser$relational_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$relational_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$relational_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$relational_return_init_(t_JavascriptParser$relational_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$relational_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$relational_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MultiFunction.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MultiFunction::class$ = NULL;
            jmethodID *MultiFunction::mids$ = NULL;
            bool MultiFunction::live$ = false;

            jclass MultiFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MultiFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_description_4a33a010] = env->getStaticMethodID(cls, "description", "(Ljava/lang/String;Ljava/util/List;)Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_toString_6f3fdb48] = env->getStaticMethodID(cls, "toString", "(Ljava/lang/String;[Lorg/apache/lucene/queries/function/FunctionValues;I)Ljava/lang/String;");
                mids$[mid_valsArr_4dc40b54] = env->getStaticMethodID(cls, "valsArr", "(Ljava/util/List;Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)[Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MultiFunction::MultiFunction(const ::java::util::List & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

            void MultiFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String MultiFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            ::java::lang::String MultiFunction::description(const ::java::lang::String & a0, const ::java::util::List & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_description_4a33a010], a0.this$, a1.this$));
            }

            jboolean MultiFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jint MultiFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String MultiFunction::toString(const ::java::lang::String & a0, const JArray< ::org::apache::lucene::queries::function::FunctionValues > & a1, jint a2)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_6f3fdb48], a0.this$, a1.this$, a2));
            }

            JArray< ::org::apache::lucene::queries::function::FunctionValues > MultiFunction::valsArr(const ::java::util::List & a0, const ::java::util::Map & a1, const ::org::apache::lucene::index::AtomicReaderContext & a2)
            {
              jclass cls = env->getClass(initializeClass);
              return JArray< ::org::apache::lucene::queries::function::FunctionValues >(env->callStaticObjectMethod(cls, mids$[mid_valsArr_4dc40b54], a0.this$, a1.this$, a2.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MultiFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MultiFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MultiFunction_init_(t_MultiFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MultiFunction_createWeight(t_MultiFunction *self, PyObject *args);
            static PyObject *t_MultiFunction_description(t_MultiFunction *self, PyObject *args);
            static PyObject *t_MultiFunction_description_(PyTypeObject *type, PyObject *args);
            static PyObject *t_MultiFunction_equals(t_MultiFunction *self, PyObject *args);
            static PyObject *t_MultiFunction_hashCode(t_MultiFunction *self, PyObject *args);
            static PyObject *t_MultiFunction_toString(PyTypeObject *type, PyObject *args);
            static PyObject *t_MultiFunction_valsArr(PyTypeObject *type, PyObject *args);

            static PyMethodDef t_MultiFunction__methods_[] = {
              DECLARE_METHOD(t_MultiFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_MultiFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_MultiFunction, description_, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_MultiFunction, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_MultiFunction, toString, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction, valsArr, METH_VARARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MultiFunction, t_MultiFunction, ::org::apache::lucene::queries::function::ValueSource, MultiFunction, t_MultiFunction_init_, 0, 0, 0, 0, 0);

            void t_MultiFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(MultiFunction), module, "MultiFunction", 0);
            }

            void t_MultiFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MultiFunction).tp_dict, "class_", make_descriptor(MultiFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MultiFunction).tp_dict, "wrapfn_", make_descriptor(t_MultiFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MultiFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MultiFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MultiFunction::initializeClass, 1)))
                return NULL;
              return t_MultiFunction::wrap_Object(MultiFunction(((t_MultiFunction *) arg)->object.this$));
            }
            static PyObject *t_MultiFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MultiFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MultiFunction_init_(t_MultiFunction *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              MultiFunction object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                INT_CALL(object = MultiFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_MultiFunction_createWeight(t_MultiFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(MultiFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_MultiFunction_description(t_MultiFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(MultiFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_MultiFunction_description_(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::List a1((jobject) NULL);
              PyTypeObject **p1;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "sK", ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::queries::function::valuesource::MultiFunction::description(a0, a1));
                return j2p(result);
              }

              PyErr_SetArgsError(type, "description_", args);
              return NULL;
            }

            static PyObject *t_MultiFunction_equals(t_MultiFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(MultiFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_MultiFunction_hashCode(t_MultiFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(MultiFunction), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_MultiFunction_toString(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::org::apache::lucene::queries::function::FunctionValues > a1((jobject) NULL);
              jint a2;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "s[kI", ::org::apache::lucene::queries::function::FunctionValues::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::queries::function::valuesource::MultiFunction::toString(a0, a1, a2));
                return j2p(result);
              }

              return callSuper(type, "toString", args, 2);
            }

            static PyObject *t_MultiFunction_valsArr(PyTypeObject *type, PyObject *args)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::util::Map a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::index::AtomicReaderContext a2((jobject) NULL);
              JArray< ::org::apache::lucene::queries::function::FunctionValues > result((jobject) NULL);

              if (!parseArgs(args, "KKk", ::java::util::List::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_Map::parameters_, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::queries::function::valuesource::MultiFunction::valsArr(a0, a1, a2));
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::queries::function::t_FunctionValues::wrap_jobject);
              }

              PyErr_SetArgsError(type, "valsArr", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MatchAllDocsQuery.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MatchAllDocsQuery::class$ = NULL;
        jmethodID *MatchAllDocsQuery::mids$ = NULL;
        bool MatchAllDocsQuery::live$ = false;

        jclass MatchAllDocsQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MatchAllDocsQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MatchAllDocsQuery::MatchAllDocsQuery() : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::Weight MatchAllDocsQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean MatchAllDocsQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void MatchAllDocsQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        jint MatchAllDocsQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String MatchAllDocsQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MatchAllDocsQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MatchAllDocsQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MatchAllDocsQuery_init_(t_MatchAllDocsQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MatchAllDocsQuery_createWeight(t_MatchAllDocsQuery *self, PyObject *args);
        static PyObject *t_MatchAllDocsQuery_equals(t_MatchAllDocsQuery *self, PyObject *args);
        static PyObject *t_MatchAllDocsQuery_extractTerms(t_MatchAllDocsQuery *self, PyObject *args);
        static PyObject *t_MatchAllDocsQuery_hashCode(t_MatchAllDocsQuery *self, PyObject *args);
        static PyObject *t_MatchAllDocsQuery_toString(t_MatchAllDocsQuery *self, PyObject *args);

        static PyMethodDef t_MatchAllDocsQuery__methods_[] = {
          DECLARE_METHOD(t_MatchAllDocsQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MatchAllDocsQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MatchAllDocsQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_MatchAllDocsQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_MatchAllDocsQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_MatchAllDocsQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_MatchAllDocsQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MatchAllDocsQuery, t_MatchAllDocsQuery, ::org::apache::lucene::search::Query, MatchAllDocsQuery, t_MatchAllDocsQuery_init_, 0, 0, 0, 0, 0);

        void t_MatchAllDocsQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(MatchAllDocsQuery), module, "MatchAllDocsQuery", 0);
        }

        void t_MatchAllDocsQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MatchAllDocsQuery).tp_dict, "class_", make_descriptor(MatchAllDocsQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MatchAllDocsQuery).tp_dict, "wrapfn_", make_descriptor(t_MatchAllDocsQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MatchAllDocsQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MatchAllDocsQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MatchAllDocsQuery::initializeClass, 1)))
            return NULL;
          return t_MatchAllDocsQuery::wrap_Object(MatchAllDocsQuery(((t_MatchAllDocsQuery *) arg)->object.this$));
        }
        static PyObject *t_MatchAllDocsQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MatchAllDocsQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MatchAllDocsQuery_init_(t_MatchAllDocsQuery *self, PyObject *args, PyObject *kwds)
        {
          MatchAllDocsQuery object((jobject) NULL);

          INT_CALL(object = MatchAllDocsQuery());
          self->object = object;

          return 0;
        }

        static PyObject *t_MatchAllDocsQuery_createWeight(t_MatchAllDocsQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MatchAllDocsQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_MatchAllDocsQuery_equals(t_MatchAllDocsQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MatchAllDocsQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_MatchAllDocsQuery_extractTerms(t_MatchAllDocsQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MatchAllDocsQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_MatchAllDocsQuery_hashCode(t_MatchAllDocsQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MatchAllDocsQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_MatchAllDocsQuery_toString(t_MatchAllDocsQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MatchAllDocsQuery), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/ChecksumIndexInput.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/store/Lock.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *Directory::class$ = NULL;
        jmethodID *Directory::mids$ = NULL;
        bool Directory::live$ = false;

        jclass Directory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/Directory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_copy_146bec62] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getLockFactory_e4e9c36d] = env->getMethodID(cls, "getLockFactory", "()Lorg/apache/lucene/store/LockFactory;");
            mids$[mid_getLockID_14c7b5c5] = env->getMethodID(cls, "getLockID", "()Ljava/lang/String;");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_openChecksumInput_dab98306] = env->getMethodID(cls, "openChecksumInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/ChecksumIndexInput;");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_setLockFactory_9892eb8c] = env->getMethodID(cls, "setLockFactory", "(Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_ensureOpen_54c6a166] = env->getMethodID(cls, "ensureOpen", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Directory::Directory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void Directory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        void Directory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void Directory::copy(const Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_146bec62], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        ::org::apache::lucene::store::IndexOutput Directory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void Directory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        jboolean Directory::fileExists(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fileExists_5fdc3f44], a0.this$);
        }

        jlong Directory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_5fdc3f54], a0.this$);
        }

        ::org::apache::lucene::store::LockFactory Directory::getLockFactory() const
        {
          return ::org::apache::lucene::store::LockFactory(env->callObjectMethod(this$, mids$[mid_getLockFactory_e4e9c36d]));
        }

        ::java::lang::String Directory::getLockID() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLockID_14c7b5c5]));
        }

        JArray< ::java::lang::String > Directory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_2e6d5245]));
        }

        ::org::apache::lucene::store::Lock Directory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }

        ::org::apache::lucene::store::ChecksumIndexInput Directory::openChecksumInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::ChecksumIndexInput(env->callObjectMethod(this$, mids$[mid_openChecksumInput_dab98306], a0.this$, a1.this$));
        }

        ::org::apache::lucene::store::IndexInput Directory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }

        void Directory::setLockFactory(const ::org::apache::lucene::store::LockFactory & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLockFactory_9892eb8c], a0.this$);
        }

        void Directory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }

        ::java::lang::String Directory::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_Directory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Directory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Directory_init_(t_Directory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Directory_clearLock(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_close(t_Directory *self);
        static PyObject *t_Directory_copy(t_Directory *self, PyObject *args);
        static PyObject *t_Directory_createOutput(t_Directory *self, PyObject *args);
        static PyObject *t_Directory_deleteFile(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_fileExists(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_fileLength(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_getLockFactory(t_Directory *self);
        static PyObject *t_Directory_getLockID(t_Directory *self);
        static PyObject *t_Directory_listAll(t_Directory *self);
        static PyObject *t_Directory_makeLock(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_openChecksumInput(t_Directory *self, PyObject *args);
        static PyObject *t_Directory_openInput(t_Directory *self, PyObject *args);
        static PyObject *t_Directory_setLockFactory(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_sync(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_toString(t_Directory *self, PyObject *args);
        static PyObject *t_Directory_get__lockFactory(t_Directory *self, void *data);
        static int t_Directory_set__lockFactory(t_Directory *self, PyObject *arg, void *data);
        static PyObject *t_Directory_get__lockID(t_Directory *self, void *data);
        static PyGetSetDef t_Directory__fields_[] = {
          DECLARE_GETSET_FIELD(t_Directory, lockFactory),
          DECLARE_GET_FIELD(t_Directory, lockID),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Directory__methods_[] = {
          DECLARE_METHOD(t_Directory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Directory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Directory, clearLock, METH_O),
          DECLARE_METHOD(t_Directory, close, METH_NOARGS),
          DECLARE_METHOD(t_Directory, copy, METH_VARARGS),
          DECLARE_METHOD(t_Directory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_Directory, deleteFile, METH_O),
          DECLARE_METHOD(t_Directory, fileExists, METH_O),
          DECLARE_METHOD(t_Directory, fileLength, METH_O),
          DECLARE_METHOD(t_Directory, getLockFactory, METH_NOARGS),
          DECLARE_METHOD(t_Directory, getLockID, METH_NOARGS),
          DECLARE_METHOD(t_Directory, listAll, METH_NOARGS),
          DECLARE_METHOD(t_Directory, makeLock, METH_O),
          DECLARE_METHOD(t_Directory, openChecksumInput, METH_VARARGS),
          DECLARE_METHOD(t_Directory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_Directory, setLockFactory, METH_O),
          DECLARE_METHOD(t_Directory, sync, METH_O),
          DECLARE_METHOD(t_Directory, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Directory, t_Directory, ::java::lang::Object, Directory, t_Directory_init_, 0, 0, t_Directory__fields_, 0, 0);

        void t_Directory::install(PyObject *module)
        {
          installType(&PY_TYPE(Directory), module, "Directory", 0);
        }

        void t_Directory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Directory).tp_dict, "class_", make_descriptor(Directory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Directory).tp_dict, "wrapfn_", make_descriptor(t_Directory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Directory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Directory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Directory::initializeClass, 1)))
            return NULL;
          return t_Directory::wrap_Object(Directory(((t_Directory *) arg)->object.this$));
        }
        static PyObject *t_Directory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Directory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Directory_init_(t_Directory *self, PyObject *args, PyObject *kwds)
        {
          Directory object((jobject) NULL);

          INT_CALL(object = Directory());
          self->object = object;

          return 0;
        }

        static PyObject *t_Directory_clearLock(t_Directory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "clearLock", arg);
          return NULL;
        }

        static PyObject *t_Directory_close(t_Directory *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_Directory_copy(t_Directory *self, PyObject *args)
        {
          Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);

          if (!parseArgs(args, "kssk", Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.copy(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copy", args);
          return NULL;
        }

        static PyObject *t_Directory_createOutput(t_Directory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "createOutput", args);
          return NULL;
        }

        static PyObject *t_Directory_deleteFile(t_Directory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "deleteFile", arg);
          return NULL;
        }

        static PyObject *t_Directory_fileExists(t_Directory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileExists(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fileExists", arg);
          return NULL;
        }

        static PyObject *t_Directory_fileLength(t_Directory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "fileLength", arg);
          return NULL;
        }

        static PyObject *t_Directory_getLockFactory(t_Directory *self)
        {
          ::org::apache::lucene::store::LockFactory result((jobject) NULL);
          OBJ_CALL(result = self->object.getLockFactory());
          return ::org::apache::lucene::store::t_LockFactory::wrap_Object(result);
        }

        static PyObject *t_Directory_getLockID(t_Directory *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getLockID());
          return j2p(result);
        }

        static PyObject *t_Directory_listAll(t_Directory *self)
        {
          JArray< ::java::lang::String > result((jobject) NULL);
          OBJ_CALL(result = self->object.listAll());
          return JArray<jstring>(result.this$).wrap();
        }

        static PyObject *t_Directory_makeLock(t_Directory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "makeLock", arg);
          return NULL;
        }

        static PyObject *t_Directory_openChecksumInput(t_Directory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::ChecksumIndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openChecksumInput(a0, a1));
            return ::org::apache::lucene::store::t_ChecksumIndexInput::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "openChecksumInput", args);
          return NULL;
        }

        static PyObject *t_Directory_openInput(t_Directory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "openInput", args);
          return NULL;
        }

        static PyObject *t_Directory_setLockFactory(t_Directory *self, PyObject *arg)
        {
          ::org::apache::lucene::store::LockFactory a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setLockFactory(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLockFactory", arg);
          return NULL;
        }

        static PyObject *t_Directory_sync(t_Directory *self, PyObject *arg)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "sync", arg);
          return NULL;
        }

        static PyObject *t_Directory_toString(t_Directory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(Directory), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Directory_get__lockFactory(t_Directory *self, void *data)
        {
          ::org::apache::lucene::store::LockFactory value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockFactory());
          return ::org::apache::lucene::store::t_LockFactory::wrap_Object(value);
        }
        static int t_Directory_set__lockFactory(t_Directory *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::store::LockFactory value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &value))
            {
              INT_CALL(self->object.setLockFactory(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "lockFactory", arg);
          return -1;
        }

        static PyObject *t_Directory_get__lockID(t_Directory *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockID());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "java/lang/Comparable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor.h"
#include "org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "org/apache/lucene/queryparser/surround/query/DistanceSubQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SimpleTerm::class$ = NULL;
            jmethodID *SimpleTerm::mids$ = NULL;
            bool SimpleTerm::live$ = false;

            jclass SimpleTerm::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SimpleTerm");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
                mids$[mid_addSpanQueries_0564f431] = env->getMethodID(cls, "addSpanQueries", "(Lorg/apache/lucene/queryparser/surround/query/SpanNearClauseFactory;)V");
                mids$[mid_compareTo_a1a1be24] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/queryparser/surround/query/SimpleTerm;)I");
                mids$[mid_distanceSubQueryNotAllowed_14c7b5c5] = env->getMethodID(cls, "distanceSubQueryNotAllowed", "()Ljava/lang/String;");
                mids$[mid_getFieldOperator_14c7b5c5] = env->getMethodID(cls, "getFieldOperator", "()Ljava/lang/String;");
                mids$[mid_getQuote_14c7b5c5] = env->getMethodID(cls, "getQuote", "()Ljava/lang/String;");
                mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_toStringUnquoted_14c7b5c5] = env->getMethodID(cls, "toStringUnquoted", "()Ljava/lang/String;");
                mids$[mid_visitMatchingTerms_330199a1] = env->getMethodID(cls, "visitMatchingTerms", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor;)V");
                mids$[mid_suffixToString_9f94ae34] = env->getMethodID(cls, "suffixToString", "(Ljava/lang/StringBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SimpleTerm::SimpleTerm(jboolean a0) : ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

            void SimpleTerm::addSpanQueries(const ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addSpanQueries_0564f431], a0.this$);
            }

            jint SimpleTerm::compareTo(const SimpleTerm & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_compareTo_a1a1be24], a0.this$);
            }

            ::java::lang::String SimpleTerm::distanceSubQueryNotAllowed() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_distanceSubQueryNotAllowed_14c7b5c5]));
            }

            ::java::lang::String SimpleTerm::getFieldOperator() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldOperator_14c7b5c5]));
            }

            ::java::lang::String SimpleTerm::getQuote() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getQuote_14c7b5c5]));
            }

            ::org::apache::lucene::search::Query SimpleTerm::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30], a0.this$, a1.this$));
            }

            ::java::lang::String SimpleTerm::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }

            ::java::lang::String SimpleTerm::toStringUnquoted() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringUnquoted_14c7b5c5]));
            }

            void SimpleTerm::visitMatchingTerms(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor & a2) const
            {
              env->callVoidMethod(this$, mids$[mid_visitMatchingTerms_330199a1], a0.this$, a1.this$, a2.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SimpleTerm_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SimpleTerm_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SimpleTerm_init_(t_SimpleTerm *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SimpleTerm_addSpanQueries(t_SimpleTerm *self, PyObject *arg);
            static PyObject *t_SimpleTerm_compareTo(t_SimpleTerm *self, PyObject *arg);
            static PyObject *t_SimpleTerm_distanceSubQueryNotAllowed(t_SimpleTerm *self);
            static PyObject *t_SimpleTerm_getFieldOperator(t_SimpleTerm *self);
            static PyObject *t_SimpleTerm_getQuote(t_SimpleTerm *self);
            static PyObject *t_SimpleTerm_makeLuceneQueryFieldNoBoost(t_SimpleTerm *self, PyObject *args);
            static PyObject *t_SimpleTerm_toString(t_SimpleTerm *self, PyObject *args);
            static PyObject *t_SimpleTerm_toStringUnquoted(t_SimpleTerm *self);
            static PyObject *t_SimpleTerm_visitMatchingTerms(t_SimpleTerm *self, PyObject *args);
            static PyObject *t_SimpleTerm_get__fieldOperator(t_SimpleTerm *self, void *data);
            static PyObject *t_SimpleTerm_get__quote(t_SimpleTerm *self, void *data);
            static PyGetSetDef t_SimpleTerm__fields_[] = {
              DECLARE_GET_FIELD(t_SimpleTerm, fieldOperator),
              DECLARE_GET_FIELD(t_SimpleTerm, quote),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SimpleTerm__methods_[] = {
              DECLARE_METHOD(t_SimpleTerm, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleTerm, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleTerm, addSpanQueries, METH_O),
              DECLARE_METHOD(t_SimpleTerm, compareTo, METH_O),
              DECLARE_METHOD(t_SimpleTerm, distanceSubQueryNotAllowed, METH_NOARGS),
              DECLARE_METHOD(t_SimpleTerm, getFieldOperator, METH_NOARGS),
              DECLARE_METHOD(t_SimpleTerm, getQuote, METH_NOARGS),
              DECLARE_METHOD(t_SimpleTerm, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              DECLARE_METHOD(t_SimpleTerm, toString, METH_VARARGS),
              DECLARE_METHOD(t_SimpleTerm, toStringUnquoted, METH_NOARGS),
              DECLARE_METHOD(t_SimpleTerm, visitMatchingTerms, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SimpleTerm, t_SimpleTerm, ::org::apache::lucene::queryparser::surround::query::SrndQuery, SimpleTerm, t_SimpleTerm_init_, 0, 0, t_SimpleTerm__fields_, 0, 0);

            void t_SimpleTerm::install(PyObject *module)
            {
              installType(&PY_TYPE(SimpleTerm), module, "SimpleTerm", 0);
              PyDict_SetItemString(PY_TYPE(SimpleTerm).tp_dict, "MatchingTermVisitor", make_descriptor(&PY_TYPE(SimpleTerm$MatchingTermVisitor)));
            }

            void t_SimpleTerm::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SimpleTerm).tp_dict, "class_", make_descriptor(SimpleTerm::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SimpleTerm).tp_dict, "wrapfn_", make_descriptor(t_SimpleTerm::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SimpleTerm).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SimpleTerm_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SimpleTerm::initializeClass, 1)))
                return NULL;
              return t_SimpleTerm::wrap_Object(SimpleTerm(((t_SimpleTerm *) arg)->object.this$));
            }
            static PyObject *t_SimpleTerm_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SimpleTerm::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SimpleTerm_init_(t_SimpleTerm *self, PyObject *args, PyObject *kwds)
            {
              jboolean a0;
              SimpleTerm object((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                INT_CALL(object = SimpleTerm(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SimpleTerm_addSpanQueries(t_SimpleTerm *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addSpanQueries(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addSpanQueries", arg);
              return NULL;
            }

            static PyObject *t_SimpleTerm_compareTo(t_SimpleTerm *self, PyObject *arg)
            {
              SimpleTerm a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", SimpleTerm::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.compareTo(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
              return NULL;
            }

            static PyObject *t_SimpleTerm_distanceSubQueryNotAllowed(t_SimpleTerm *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.distanceSubQueryNotAllowed());
              return j2p(result);
            }

            static PyObject *t_SimpleTerm_getFieldOperator(t_SimpleTerm *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getFieldOperator());
              return j2p(result);
            }

            static PyObject *t_SimpleTerm_getQuote(t_SimpleTerm *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getQuote());
              return j2p(result);
            }

            static PyObject *t_SimpleTerm_makeLuceneQueryFieldNoBoost(t_SimpleTerm *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(SimpleTerm), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }

            static PyObject *t_SimpleTerm_toString(t_SimpleTerm *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SimpleTerm), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_SimpleTerm_toStringUnquoted(t_SimpleTerm *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.toStringUnquoted());
              return j2p(result);
            }

            static PyObject *t_SimpleTerm_visitMatchingTerms(t_SimpleTerm *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor a2((jobject) NULL);

              if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.visitMatchingTerms(a0, a1, a2));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "visitMatchingTerms", args);
              return NULL;
            }

            static PyObject *t_SimpleTerm_get__fieldOperator(t_SimpleTerm *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getFieldOperator());
              return j2p(value);
            }

            static PyObject *t_SimpleTerm_get__quote(t_SimpleTerm *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getQuote());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/DoubleRangeFacetCounts.h"
#include "org/apache/lucene/facet/range/DoubleRange.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *DoubleRangeFacetCounts::class$ = NULL;
          jmethodID *DoubleRangeFacetCounts::mids$ = NULL;
          bool DoubleRangeFacetCounts::live$ = false;

          jclass DoubleRangeFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/DoubleRangeFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9ae8847d] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/facet/FacetsCollector;[Lorg/apache/lucene/facet/range/DoubleRange;)V");
              mids$[mid_init$_828c1751] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/facet/FacetsCollector;[Lorg/apache/lucene/facet/range/DoubleRange;)V");
              mids$[mid_init$_f6d04191] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/facet/FacetsCollector;Lorg/apache/lucene/search/Filter;[Lorg/apache/lucene/facet/range/DoubleRange;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DoubleRangeFacetCounts::DoubleRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::facet::FacetsCollector & a1, const JArray< ::org::apache::lucene::facet::range::DoubleRange > & a2) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_9ae8847d, a0.this$, a1.this$, a2.this$)) {}

          DoubleRangeFacetCounts::DoubleRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::queries::function::ValueSource & a1, const ::org::apache::lucene::facet::FacetsCollector & a2, const JArray< ::org::apache::lucene::facet::range::DoubleRange > & a3) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_828c1751, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          DoubleRangeFacetCounts::DoubleRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::queries::function::ValueSource & a1, const ::org::apache::lucene::facet::FacetsCollector & a2, const ::org::apache::lucene::search::Filter & a3, const JArray< ::org::apache::lucene::facet::range::DoubleRange > & a4) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_f6d04191, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_DoubleRangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DoubleRangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DoubleRangeFacetCounts_init_(t_DoubleRangeFacetCounts *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_DoubleRangeFacetCounts__methods_[] = {
            DECLARE_METHOD(t_DoubleRangeFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DoubleRangeFacetCounts, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DoubleRangeFacetCounts, t_DoubleRangeFacetCounts, ::org::apache::lucene::facet::range::RangeFacetCounts, DoubleRangeFacetCounts, t_DoubleRangeFacetCounts_init_, 0, 0, 0, 0, 0);

          void t_DoubleRangeFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(DoubleRangeFacetCounts), module, "DoubleRangeFacetCounts", 0);
          }

          void t_DoubleRangeFacetCounts::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DoubleRangeFacetCounts).tp_dict, "class_", make_descriptor(DoubleRangeFacetCounts::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DoubleRangeFacetCounts).tp_dict, "wrapfn_", make_descriptor(t_DoubleRangeFacetCounts::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DoubleRangeFacetCounts).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DoubleRangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DoubleRangeFacetCounts::initializeClass, 1)))
              return NULL;
            return t_DoubleRangeFacetCounts::wrap_Object(DoubleRangeFacetCounts(((t_DoubleRangeFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_DoubleRangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DoubleRangeFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DoubleRangeFacetCounts_init_(t_DoubleRangeFacetCounts *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a1((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::DoubleRange > a2((jobject) NULL);
                DoubleRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "sk[k", ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::facet::range::DoubleRange::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = DoubleRangeFacetCounts(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::DoubleRange > a3((jobject) NULL);
                DoubleRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "skk[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::facet::range::DoubleRange::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = DoubleRangeFacetCounts(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                ::org::apache::lucene::search::Filter a3((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::DoubleRange > a4((jobject) NULL);
                DoubleRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "skkk[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::facet::range::DoubleRange::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = DoubleRangeFacetCounts(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {

          ::java::lang::Class *SortedSetDocValuesFacetField::class$ = NULL;
          jmethodID *SortedSetDocValuesFacetField::mids$ = NULL;
          jfieldID *SortedSetDocValuesFacetField::fids$ = NULL;
          bool SortedSetDocValuesFacetField::live$ = false;
          ::org::apache::lucene::document::FieldType *SortedSetDocValuesFacetField::TYPE = NULL;

          jclass SortedSetDocValuesFacetField::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetField");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_dim] = env->getFieldID(cls, "dim", "Ljava/lang/String;");
              fids$[fid_label] = env->getFieldID(cls, "label", "Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedSetDocValuesFacetField::SortedSetDocValuesFacetField(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

          ::java::lang::String SortedSetDocValuesFacetField::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::java::lang::String SortedSetDocValuesFacetField::_get_dim() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_dim]));
          }

          ::java::lang::String SortedSetDocValuesFacetField::_get_label() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_label]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {
          static PyObject *t_SortedSetDocValuesFacetField_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetDocValuesFacetField_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedSetDocValuesFacetField_init_(t_SortedSetDocValuesFacetField *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedSetDocValuesFacetField_toString(t_SortedSetDocValuesFacetField *self, PyObject *args);
          static PyObject *t_SortedSetDocValuesFacetField_get__dim(t_SortedSetDocValuesFacetField *self, void *data);
          static PyObject *t_SortedSetDocValuesFacetField_get__label(t_SortedSetDocValuesFacetField *self, void *data);

          static PyGetSetDef t_SortedSetDocValuesFacetField__fields_[] = {
            DECLARE_GET_FIELD(t_SortedSetDocValuesFacetField, dim),
            DECLARE_GET_FIELD(t_SortedSetDocValuesFacetField, label),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedSetDocValuesFacetField__methods_[] = {
            DECLARE_METHOD(t_SortedSetDocValuesFacetField, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetField, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetField, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedSetDocValuesFacetField, t_SortedSetDocValuesFacetField, ::org::apache::lucene::document::Field, SortedSetDocValuesFacetField, t_SortedSetDocValuesFacetField_init_, 0, 0, t_SortedSetDocValuesFacetField__fields_, 0, 0);

          void t_SortedSetDocValuesFacetField::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedSetDocValuesFacetField), module, "SortedSetDocValuesFacetField", 0);
          }

          void t_SortedSetDocValuesFacetField::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesFacetField).tp_dict, "class_", make_descriptor(SortedSetDocValuesFacetField::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesFacetField).tp_dict, "wrapfn_", make_descriptor(t_SortedSetDocValuesFacetField::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesFacetField).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SortedSetDocValuesFacetField::initializeClass);
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesFacetField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*SortedSetDocValuesFacetField::TYPE)));
          }

          static PyObject *t_SortedSetDocValuesFacetField_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedSetDocValuesFacetField::initializeClass, 1)))
              return NULL;
            return t_SortedSetDocValuesFacetField::wrap_Object(SortedSetDocValuesFacetField(((t_SortedSetDocValuesFacetField *) arg)->object.this$));
          }
          static PyObject *t_SortedSetDocValuesFacetField_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedSetDocValuesFacetField::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedSetDocValuesFacetField_init_(t_SortedSetDocValuesFacetField *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            SortedSetDocValuesFacetField object((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              INT_CALL(object = SortedSetDocValuesFacetField(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedSetDocValuesFacetField_toString(t_SortedSetDocValuesFacetField *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SortedSetDocValuesFacetField), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SortedSetDocValuesFacetField_get__dim(t_SortedSetDocValuesFacetField *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_dim());
            return j2p(value);
          }

          static PyObject *t_SortedSetDocValuesFacetField_get__label(t_SortedSetDocValuesFacetField *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_label());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueLong.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueLong::class$ = NULL;
          jmethodID *MutableValueLong::mids$ = NULL;
          jfieldID *MutableValueLong::fids$ = NULL;
          bool MutableValueLong::live$ = false;

          jclass MutableValueLong::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueLong");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_290588f1] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_d590ce7c] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_290588e2] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueLong::MutableValueLong() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint MutableValueLong::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_290588f1], a0.this$);
          }

          void MutableValueLong::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d590ce7c], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueLong::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          jboolean MutableValueLong::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_290588e2], a0.this$);
          }

          jint MutableValueLong::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::Object MutableValueLong::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }

          jlong MutableValueLong::_get_value() const
          {
            return env->getLongField(this$, fids$[fid_value]);
          }

          void MutableValueLong::_set_value(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_value], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueLong_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueLong_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueLong_init_(t_MutableValueLong *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueLong_compareSameType(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_copy(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_duplicate(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_equalsSameType(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_hashCode(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_toObject(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_get__value(t_MutableValueLong *self, void *data);
          static int t_MutableValueLong_set__value(t_MutableValueLong *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueLong__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueLong, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueLong__methods_[] = {
            DECLARE_METHOD(t_MutableValueLong, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueLong, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueLong, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueLong, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueLong, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueLong, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueLong, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueLong, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValueLong, t_MutableValueLong, ::org::apache::lucene::util::mutable$::MutableValue, MutableValueLong, t_MutableValueLong_init_, 0, 0, t_MutableValueLong__fields_, 0, 0);

          void t_MutableValueLong::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueLong), module, "MutableValueLong", 0);
          }

          void t_MutableValueLong::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValueLong).tp_dict, "class_", make_descriptor(MutableValueLong::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValueLong).tp_dict, "wrapfn_", make_descriptor(t_MutableValueLong::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValueLong).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueLong_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueLong::initializeClass, 1)))
              return NULL;
            return t_MutableValueLong::wrap_Object(MutableValueLong(((t_MutableValueLong *) arg)->object.this$));
          }
          static PyObject *t_MutableValueLong_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueLong::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueLong_init_(t_MutableValueLong *self, PyObject *args, PyObject *kwds)
          {
            MutableValueLong object((jobject) NULL);

            INT_CALL(object = MutableValueLong());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueLong_compareSameType(t_MutableValueLong *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueLong), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueLong_copy(t_MutableValueLong *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MutableValueLong), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueLong_duplicate(t_MutableValueLong *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueLong), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueLong_equalsSameType(t_MutableValueLong *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MutableValueLong), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueLong_hashCode(t_MutableValueLong *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueLong), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueLong_toObject(t_MutableValueLong *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueLong), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueLong_get__value(t_MutableValueLong *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_value());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_MutableValueLong_set__value(t_MutableValueLong *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseLightStemFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseLightStemFilterFactory::class$ = NULL;
          jmethodID *PortugueseLightStemFilterFactory::mids$ = NULL;
          bool PortugueseLightStemFilterFactory::live$ = false;

          jclass PortugueseLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseLightStemFilterFactory::PortugueseLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream PortugueseLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseLightStemFilterFactory_init_(t_PortugueseLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseLightStemFilterFactory_create(t_PortugueseLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_PortugueseLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PortugueseLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseLightStemFilterFactory, t_PortugueseLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PortugueseLightStemFilterFactory, t_PortugueseLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PortugueseLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseLightStemFilterFactory), module, "PortugueseLightStemFilterFactory", 0);
          }

          void t_PortugueseLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemFilterFactory).tp_dict, "class_", make_descriptor(PortugueseLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PortugueseLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PortugueseLightStemFilterFactory::wrap_Object(PortugueseLightStemFilterFactory(((t_PortugueseLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PortugueseLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseLightStemFilterFactory_init_(t_PortugueseLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PortugueseLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PortugueseLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseLightStemFilterFactory_create(t_PortugueseLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PortugueseLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *Lucene43EdgeNGramTokenizer::class$ = NULL;
          jmethodID *Lucene43EdgeNGramTokenizer::mids$ = NULL;
          bool Lucene43EdgeNGramTokenizer::live$ = false;
          jint Lucene43EdgeNGramTokenizer::DEFAULT_MAX_GRAM_SIZE = (jint) 0;
          jint Lucene43EdgeNGramTokenizer::DEFAULT_MIN_GRAM_SIZE = (jint) 0;
          ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side *Lucene43EdgeNGramTokenizer::DEFAULT_SIDE = NULL;

          jclass Lucene43EdgeNGramTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_47cfcf59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;II)V");
              mids$[mid_init$_0c87564f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;II)V");
              mids$[mid_init$_6fc4da21] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;II)V");
              mids$[mid_init$_9a7df2b7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;Ljava/lang/String;II)V");
              mids$[mid_init$_3a1c54b5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;Ljava/lang/String;II)V");
              mids$[mid_init$_1623557f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;II)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_GRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_GRAM_SIZE");
              DEFAULT_MIN_GRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_GRAM_SIZE");
              DEFAULT_SIDE = new ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side(env->getStaticObjectField(cls, "DEFAULT_SIDE", "Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene43EdgeNGramTokenizer::Lucene43EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_47cfcf59, a0.this$, a1.this$, a2, a3)) {}

          Lucene43EdgeNGramTokenizer::Lucene43EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_0c87564f, a0.this$, a1.this$, a2.this$, a3, a4)) {}

          Lucene43EdgeNGramTokenizer::Lucene43EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1, const ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_6fc4da21, a0.this$, a1.this$, a2.this$, a3, a4)) {}

          Lucene43EdgeNGramTokenizer::Lucene43EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1, const ::java::lang::String & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_9a7df2b7, a0.this$, a1.this$, a2.this$, a3, a4)) {}

          Lucene43EdgeNGramTokenizer::Lucene43EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2, const ::java::lang::String & a3, jint a4, jint a5) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_3a1c54b5, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5)) {}

          Lucene43EdgeNGramTokenizer::Lucene43EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2, const ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side & a3, jint a4, jint a5) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_1623557f, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5)) {}

          void Lucene43EdgeNGramTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean Lucene43EdgeNGramTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void Lucene43EdgeNGramTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_Lucene43EdgeNGramTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene43EdgeNGramTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene43EdgeNGramTokenizer_init_(t_Lucene43EdgeNGramTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene43EdgeNGramTokenizer_end(t_Lucene43EdgeNGramTokenizer *self, PyObject *args);
          static PyObject *t_Lucene43EdgeNGramTokenizer_incrementToken(t_Lucene43EdgeNGramTokenizer *self, PyObject *args);
          static PyObject *t_Lucene43EdgeNGramTokenizer_reset(t_Lucene43EdgeNGramTokenizer *self, PyObject *args);

          static PyMethodDef t_Lucene43EdgeNGramTokenizer__methods_[] = {
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene43EdgeNGramTokenizer, t_Lucene43EdgeNGramTokenizer, ::org::apache::lucene::analysis::Tokenizer, Lucene43EdgeNGramTokenizer, t_Lucene43EdgeNGramTokenizer_init_, 0, 0, 0, 0, 0);

          void t_Lucene43EdgeNGramTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene43EdgeNGramTokenizer), module, "Lucene43EdgeNGramTokenizer", 0);
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer).tp_dict, "Side", make_descriptor(&PY_TYPE(Lucene43EdgeNGramTokenizer$Side)));
          }

          void t_Lucene43EdgeNGramTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer).tp_dict, "class_", make_descriptor(Lucene43EdgeNGramTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer).tp_dict, "wrapfn_", make_descriptor(t_Lucene43EdgeNGramTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene43EdgeNGramTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer).tp_dict, "DEFAULT_MAX_GRAM_SIZE", make_descriptor(Lucene43EdgeNGramTokenizer::DEFAULT_MAX_GRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer).tp_dict, "DEFAULT_MIN_GRAM_SIZE", make_descriptor(Lucene43EdgeNGramTokenizer::DEFAULT_MIN_GRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer).tp_dict, "DEFAULT_SIDE", make_descriptor(::org::apache::lucene::analysis::ngram::t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(*Lucene43EdgeNGramTokenizer::DEFAULT_SIDE)));
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene43EdgeNGramTokenizer::initializeClass, 1)))
              return NULL;
            return t_Lucene43EdgeNGramTokenizer::wrap_Object(Lucene43EdgeNGramTokenizer(((t_Lucene43EdgeNGramTokenizer *) arg)->object.this$));
          }
          static PyObject *t_Lucene43EdgeNGramTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene43EdgeNGramTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene43EdgeNGramTokenizer_init_(t_Lucene43EdgeNGramTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jint a3;
                Lucene43EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KkII", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  INT_CALL(object = Lucene43EdgeNGramTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                jint a3;
                jint a4;
                Lucene43EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KkkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = Lucene43EdgeNGramTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side a2((jobject) NULL);
                PyTypeObject **p2;
                jint a3;
                jint a4;
                Lucene43EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KkKII", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::org::apache::lucene::analysis::ngram::t_Lucene43EdgeNGramTokenizer$Side::parameters_, &a3, &a4))
                {
                  INT_CALL(object = Lucene43EdgeNGramTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                jint a3;
                jint a4;
                Lucene43EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KksII", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = Lucene43EdgeNGramTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                jint a4;
                jint a5;
                Lucene43EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KkksII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4, &a5))
                {
                  INT_CALL(object = Lucene43EdgeNGramTokenizer(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side a3((jobject) NULL);
                PyTypeObject **p3;
                jint a4;
                jint a5;
                Lucene43EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KkkKII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::ngram::t_Lucene43EdgeNGramTokenizer$Side::parameters_, &a4, &a5))
                {
                  INT_CALL(object = Lucene43EdgeNGramTokenizer(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer_end(t_Lucene43EdgeNGramTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene43EdgeNGramTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer_incrementToken(t_Lucene43EdgeNGramTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Lucene43EdgeNGramTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer_reset(t_Lucene43EdgeNGramTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene43EdgeNGramTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanPositionCheckQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/index/TermContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanPositionCheckQuery::class$ = NULL;
          jmethodID *SpanPositionCheckQuery::mids$ = NULL;
          bool SpanPositionCheckQuery::live$ = false;

          jclass SpanPositionCheckQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanPositionCheckQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_056c1897] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;)V");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getMatch_d3aa0332] = env->getMethodID(cls, "getMatch", "()Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_acceptPosition_5342f73f] = env->getMethodID(cls, "acceptPosition", "(Lorg/apache/lucene/search/spans/Spans;)Lorg/apache/lucene/search/spans/SpanPositionCheckQuery$AcceptStatus;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanPositionCheckQuery::SpanPositionCheckQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_056c1897, a0.this$)) {}

          void SpanPositionCheckQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          ::java::lang::String SpanPositionCheckQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::search::spans::SpanQuery SpanPositionCheckQuery::getMatch() const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_getMatch_d3aa0332]));
          }

          ::org::apache::lucene::search::spans::Spans SpanPositionCheckQuery::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::search::Query SpanPositionCheckQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanPositionCheckQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanPositionCheckQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanPositionCheckQuery_init_(t_SpanPositionCheckQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanPositionCheckQuery_extractTerms(t_SpanPositionCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPositionCheckQuery_getField(t_SpanPositionCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPositionCheckQuery_getMatch(t_SpanPositionCheckQuery *self);
          static PyObject *t_SpanPositionCheckQuery_getSpans(t_SpanPositionCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPositionCheckQuery_rewrite(t_SpanPositionCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPositionCheckQuery_get__field(t_SpanPositionCheckQuery *self, void *data);
          static PyObject *t_SpanPositionCheckQuery_get__match(t_SpanPositionCheckQuery *self, void *data);
          static PyGetSetDef t_SpanPositionCheckQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanPositionCheckQuery, field),
            DECLARE_GET_FIELD(t_SpanPositionCheckQuery, match),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanPositionCheckQuery__methods_[] = {
            DECLARE_METHOD(t_SpanPositionCheckQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, getMatch, METH_NOARGS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, rewrite, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanPositionCheckQuery, t_SpanPositionCheckQuery, ::org::apache::lucene::search::spans::SpanQuery, SpanPositionCheckQuery, t_SpanPositionCheckQuery_init_, 0, 0, t_SpanPositionCheckQuery__fields_, 0, 0);

          void t_SpanPositionCheckQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanPositionCheckQuery), module, "SpanPositionCheckQuery", 0);
          }

          void t_SpanPositionCheckQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanPositionCheckQuery).tp_dict, "class_", make_descriptor(SpanPositionCheckQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanPositionCheckQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanPositionCheckQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanPositionCheckQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanPositionCheckQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanPositionCheckQuery::initializeClass, 1)))
              return NULL;
            return t_SpanPositionCheckQuery::wrap_Object(SpanPositionCheckQuery(((t_SpanPositionCheckQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanPositionCheckQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanPositionCheckQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanPositionCheckQuery_init_(t_SpanPositionCheckQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            SpanPositionCheckQuery object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0))
            {
              INT_CALL(object = SpanPositionCheckQuery(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanPositionCheckQuery_extractTerms(t_SpanPositionCheckQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SpanPositionCheckQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_SpanPositionCheckQuery_getField(t_SpanPositionCheckQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanPositionCheckQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanPositionCheckQuery_getMatch(t_SpanPositionCheckQuery *self)
          {
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);
            OBJ_CALL(result = self->object.getMatch());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
          }

          static PyObject *t_SpanPositionCheckQuery_getSpans(t_SpanPositionCheckQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanPositionCheckQuery), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanPositionCheckQuery_rewrite(t_SpanPositionCheckQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanPositionCheckQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_SpanPositionCheckQuery_get__field(t_SpanPositionCheckQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SpanPositionCheckQuery_get__match(t_SpanPositionCheckQuery *self, void *data)
          {
            ::org::apache::lucene::search::spans::SpanQuery value((jobject) NULL);
            OBJ_CALL(value = self->object.getMatch());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldFragList::class$ = NULL;
          jmethodID *FieldFragList::mids$ = NULL;
          bool FieldFragList::live$ = false;

          jclass FieldFragList::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldFragList");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_add_21fbeb2b] = env->getMethodID(cls, "add", "(IILjava/util/List;)V");
              mids$[mid_getFragInfos_87851566] = env->getMethodID(cls, "getFragInfos", "()Ljava/util/List;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldFragList::FieldFragList(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          void FieldFragList::add(jint a0, jint a1, const ::java::util::List & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_add_21fbeb2b], a0, a1, a2.this$);
          }

          ::java::util::List FieldFragList::getFragInfos() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getFragInfos_87851566]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldFragList_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldFragList_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldFragList_init_(t_FieldFragList *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldFragList_add(t_FieldFragList *self, PyObject *args);
          static PyObject *t_FieldFragList_getFragInfos(t_FieldFragList *self);
          static PyObject *t_FieldFragList_get__fragInfos(t_FieldFragList *self, void *data);
          static PyGetSetDef t_FieldFragList__fields_[] = {
            DECLARE_GET_FIELD(t_FieldFragList, fragInfos),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldFragList__methods_[] = {
            DECLARE_METHOD(t_FieldFragList, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList, add, METH_VARARGS),
            DECLARE_METHOD(t_FieldFragList, getFragInfos, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldFragList, t_FieldFragList, ::java::lang::Object, FieldFragList, t_FieldFragList_init_, 0, 0, t_FieldFragList__fields_, 0, 0);

          void t_FieldFragList::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldFragList), module, "FieldFragList", 0);
            PyDict_SetItemString(PY_TYPE(FieldFragList).tp_dict, "WeightedFragInfo", make_descriptor(&PY_TYPE(FieldFragList$WeightedFragInfo)));
          }

          void t_FieldFragList::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldFragList).tp_dict, "class_", make_descriptor(FieldFragList::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldFragList).tp_dict, "wrapfn_", make_descriptor(t_FieldFragList::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldFragList).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldFragList_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldFragList::initializeClass, 1)))
              return NULL;
            return t_FieldFragList::wrap_Object(FieldFragList(((t_FieldFragList *) arg)->object.this$));
          }
          static PyObject *t_FieldFragList_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldFragList::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldFragList_init_(t_FieldFragList *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            FieldFragList object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = FieldFragList(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldFragList_add(t_FieldFragList *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::util::List a2((jobject) NULL);
            PyTypeObject **p2;

            if (!parseArgs(args, "IIK", ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(self->object.add(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_FieldFragList_getFragInfos(t_FieldFragList *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getFragInfos());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldFragList$WeightedFragInfo));
          }

          static PyObject *t_FieldFragList_get__fragInfos(t_FieldFragList *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getFragInfos());
            return ::java::util::t_List::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/FSTUtil.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "org/apache/lucene/search/suggest/analyzing/FSTUtil$Path.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *FSTUtil::class$ = NULL;
            jmethodID *FSTUtil::mids$ = NULL;
            bool FSTUtil::live$ = false;

            jclass FSTUtil::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/FSTUtil");

                mids$ = new jmethodID[max_mid];
                mids$[mid_intersectPrefixPaths_2ebdda9a] = env->getStaticMethodID(cls, "intersectPrefixPaths", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/fst/FST;)Ljava/util/List;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::java::util::List FSTUtil::intersectPrefixPaths(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::fst::FST & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_intersectPrefixPaths_2ebdda9a], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_FSTUtil_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTUtil_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTUtil_intersectPrefixPaths(PyTypeObject *type, PyObject *args);

            static PyMethodDef t_FSTUtil__methods_[] = {
              DECLARE_METHOD(t_FSTUtil, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTUtil, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTUtil, intersectPrefixPaths, METH_VARARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FSTUtil, t_FSTUtil, ::java::lang::Object, FSTUtil, abstract_init, 0, 0, 0, 0, 0);

            void t_FSTUtil::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTUtil), module, "FSTUtil", 0);
              PyDict_SetItemString(PY_TYPE(FSTUtil).tp_dict, "Path", make_descriptor(&PY_TYPE(FSTUtil$Path)));
            }

            void t_FSTUtil::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FSTUtil).tp_dict, "class_", make_descriptor(FSTUtil::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FSTUtil).tp_dict, "wrapfn_", make_descriptor(t_FSTUtil::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FSTUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FSTUtil_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTUtil::initializeClass, 1)))
                return NULL;
              return t_FSTUtil::wrap_Object(FSTUtil(((t_FSTUtil *) arg)->object.this$));
            }
            static PyObject *t_FSTUtil_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTUtil::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FSTUtil_intersectPrefixPaths(PyTypeObject *type, PyObject *args)
            {
              ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
              ::org::apache::lucene::util::fst::FST a1((jobject) NULL);
              PyTypeObject **p1;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "kK", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::suggest::analyzing::FSTUtil::intersectPrefixPaths(a0, a1));
                return ::java::util::t_List::wrap_Object(result);
              }

              PyErr_SetArgsError(type, "intersectPrefixPaths", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefHash$DirectBytesStartArray.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Counter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefHash$DirectBytesStartArray::class$ = NULL;
        jmethodID *BytesRefHash$DirectBytesStartArray::mids$ = NULL;
        bool BytesRefHash$DirectBytesStartArray::live$ = false;

        jclass BytesRefHash$DirectBytesStartArray::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefHash$DirectBytesStartArray");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_395956a1] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/util/Counter;)V");
            mids$[mid_bytesUsed_781dd30a] = env->getMethodID(cls, "bytesUsed", "()Lorg/apache/lucene/util/Counter;");
            mids$[mid_clear_dab10e75] = env->getMethodID(cls, "clear", "()[I");
            mids$[mid_grow_dab10e75] = env->getMethodID(cls, "grow", "()[I");
            mids$[mid_init_dab10e75] = env->getMethodID(cls, "init", "()[I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BytesRefHash$DirectBytesStartArray::BytesRefHash$DirectBytesStartArray(jint a0) : ::org::apache::lucene::util::BytesRefHash$BytesStartArray(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        BytesRefHash$DirectBytesStartArray::BytesRefHash$DirectBytesStartArray(jint a0, const ::org::apache::lucene::util::Counter & a1) : ::org::apache::lucene::util::BytesRefHash$BytesStartArray(env->newObject(initializeClass, &mids$, mid_init$_395956a1, a0, a1.this$)) {}

        ::org::apache::lucene::util::Counter BytesRefHash$DirectBytesStartArray::bytesUsed() const
        {
          return ::org::apache::lucene::util::Counter(env->callObjectMethod(this$, mids$[mid_bytesUsed_781dd30a]));
        }

        JArray< jint > BytesRefHash$DirectBytesStartArray::clear() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_clear_dab10e75]));
        }

        JArray< jint > BytesRefHash$DirectBytesStartArray::grow() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_grow_dab10e75]));
        }

        JArray< jint > BytesRefHash$DirectBytesStartArray::init() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_init_dab10e75]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefHash$DirectBytesStartArray_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefHash$DirectBytesStartArray_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BytesRefHash$DirectBytesStartArray_init_(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BytesRefHash$DirectBytesStartArray_bytesUsed(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args);
        static PyObject *t_BytesRefHash$DirectBytesStartArray_clear(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args);
        static PyObject *t_BytesRefHash$DirectBytesStartArray_grow(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args);
        static PyObject *t_BytesRefHash$DirectBytesStartArray_init(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args);

        static PyMethodDef t_BytesRefHash$DirectBytesStartArray__methods_[] = {
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, bytesUsed, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, clear, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, grow, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, init, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BytesRefHash$DirectBytesStartArray, t_BytesRefHash$DirectBytesStartArray, ::org::apache::lucene::util::BytesRefHash$BytesStartArray, BytesRefHash$DirectBytesStartArray, t_BytesRefHash$DirectBytesStartArray_init_, 0, 0, 0, 0, 0);

        void t_BytesRefHash$DirectBytesStartArray::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefHash$DirectBytesStartArray), module, "BytesRefHash$DirectBytesStartArray", 0);
        }

        void t_BytesRefHash$DirectBytesStartArray::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BytesRefHash$DirectBytesStartArray).tp_dict, "class_", make_descriptor(BytesRefHash$DirectBytesStartArray::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BytesRefHash$DirectBytesStartArray).tp_dict, "wrapfn_", make_descriptor(t_BytesRefHash$DirectBytesStartArray::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BytesRefHash$DirectBytesStartArray).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BytesRefHash$DirectBytesStartArray_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefHash$DirectBytesStartArray::initializeClass, 1)))
            return NULL;
          return t_BytesRefHash$DirectBytesStartArray::wrap_Object(BytesRefHash$DirectBytesStartArray(((t_BytesRefHash$DirectBytesStartArray *) arg)->object.this$));
        }
        static PyObject *t_BytesRefHash$DirectBytesStartArray_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefHash$DirectBytesStartArray::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BytesRefHash$DirectBytesStartArray_init_(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              BytesRefHash$DirectBytesStartArray object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = BytesRefHash$DirectBytesStartArray(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jint a0;
              ::org::apache::lucene::util::Counter a1((jobject) NULL);
              BytesRefHash$DirectBytesStartArray object((jobject) NULL);

              if (!parseArgs(args, "Ik", ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = BytesRefHash$DirectBytesStartArray(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BytesRefHash$DirectBytesStartArray_bytesUsed(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args)
        {
          ::org::apache::lucene::util::Counter result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.bytesUsed());
            return ::org::apache::lucene::util::t_Counter::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BytesRefHash$DirectBytesStartArray), (PyObject *) self, "bytesUsed", args, 2);
        }

        static PyObject *t_BytesRefHash$DirectBytesStartArray_clear(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args)
        {
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clear());
            return result.wrap();
          }

          return callSuper(&PY_TYPE(BytesRefHash$DirectBytesStartArray), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_BytesRefHash$DirectBytesStartArray_grow(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args)
        {
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.grow());
            return result.wrap();
          }

          return callSuper(&PY_TYPE(BytesRefHash$DirectBytesStartArray), (PyObject *) self, "grow", args, 2);
        }

        static PyObject *t_BytesRefHash$DirectBytesStartArray_init(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args)
        {
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.init());
            return result.wrap();
          }

          return callSuper(&PY_TYPE(BytesRefHash$DirectBytesStartArray), (PyObject *) self, "init", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfo$IndexOptions.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInfo$DocValuesType.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FieldInfo::class$ = NULL;
        jmethodID *FieldInfo::mids$ = NULL;
        jfieldID *FieldInfo::fids$ = NULL;
        bool FieldInfo::live$ = false;

        jclass FieldInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FieldInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_09a7b3ac] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ZIZZZLorg/apache/lucene/index/FieldInfo$IndexOptions;Lorg/apache/lucene/index/FieldInfo$DocValuesType;Lorg/apache/lucene/index/FieldInfo$DocValuesType;JLjava/util/Map;)V");
            mids$[mid_attributes_db60befd] = env->getMethodID(cls, "attributes", "()Ljava/util/Map;");
            mids$[mid_getAttribute_97a5258f] = env->getMethodID(cls, "getAttribute", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getDocValuesGen_54c6a17a] = env->getMethodID(cls, "getDocValuesGen", "()J");
            mids$[mid_getDocValuesType_db3dc573] = env->getMethodID(cls, "getDocValuesType", "()Lorg/apache/lucene/index/FieldInfo$DocValuesType;");
            mids$[mid_getIndexOptions_e1b704de] = env->getMethodID(cls, "getIndexOptions", "()Lorg/apache/lucene/index/FieldInfo$IndexOptions;");
            mids$[mid_getNormType_db3dc573] = env->getMethodID(cls, "getNormType", "()Lorg/apache/lucene/index/FieldInfo$DocValuesType;");
            mids$[mid_hasDocValues_54c6a16a] = env->getMethodID(cls, "hasDocValues", "()Z");
            mids$[mid_hasNorms_54c6a16a] = env->getMethodID(cls, "hasNorms", "()Z");
            mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
            mids$[mid_hasVectors_54c6a16a] = env->getMethodID(cls, "hasVectors", "()Z");
            mids$[mid_isIndexed_54c6a16a] = env->getMethodID(cls, "isIndexed", "()Z");
            mids$[mid_omitsNorms_54c6a16a] = env->getMethodID(cls, "omitsNorms", "()Z");
            mids$[mid_putAttribute_aacea7e9] = env->getMethodID(cls, "putAttribute", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_name] = env->getFieldID(cls, "name", "Ljava/lang/String;");
            fids$[fid_number] = env->getFieldID(cls, "number", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldInfo::FieldInfo(const ::java::lang::String & a0, jboolean a1, jint a2, jboolean a3, jboolean a4, jboolean a5, const ::org::apache::lucene::index::FieldInfo$IndexOptions & a6, const ::org::apache::lucene::index::FieldInfo$DocValuesType & a7, const ::org::apache::lucene::index::FieldInfo$DocValuesType & a8, jlong a9, const ::java::util::Map & a10) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_09a7b3ac, a0.this$, a1, a2, a3, a4, a5, a6.this$, a7.this$, a8.this$, a9, a10.this$)) {}

        ::java::util::Map FieldInfo::attributes() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_attributes_db60befd]));
        }

        ::java::lang::String FieldInfo::getAttribute(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getAttribute_97a5258f], a0.this$));
        }

        jlong FieldInfo::getDocValuesGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getDocValuesGen_54c6a17a]);
        }

        ::org::apache::lucene::index::FieldInfo$DocValuesType FieldInfo::getDocValuesType() const
        {
          return ::org::apache::lucene::index::FieldInfo$DocValuesType(env->callObjectMethod(this$, mids$[mid_getDocValuesType_db3dc573]));
        }

        ::org::apache::lucene::index::FieldInfo$IndexOptions FieldInfo::getIndexOptions() const
        {
          return ::org::apache::lucene::index::FieldInfo$IndexOptions(env->callObjectMethod(this$, mids$[mid_getIndexOptions_e1b704de]));
        }

        ::org::apache::lucene::index::FieldInfo$DocValuesType FieldInfo::getNormType() const
        {
          return ::org::apache::lucene::index::FieldInfo$DocValuesType(env->callObjectMethod(this$, mids$[mid_getNormType_db3dc573]));
        }

        jboolean FieldInfo::hasDocValues() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasDocValues_54c6a16a]);
        }

        jboolean FieldInfo::hasNorms() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNorms_54c6a16a]);
        }

        jboolean FieldInfo::hasPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
        }

        jboolean FieldInfo::hasVectors() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasVectors_54c6a16a]);
        }

        jboolean FieldInfo::isIndexed() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isIndexed_54c6a16a]);
        }

        jboolean FieldInfo::omitsNorms() const
        {
          return env->callBooleanMethod(this$, mids$[mid_omitsNorms_54c6a16a]);
        }

        ::java::lang::String FieldInfo::putAttribute(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_putAttribute_aacea7e9], a0.this$, a1.this$));
        }

        ::java::lang::String FieldInfo::_get_name() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_name]));
        }

        jint FieldInfo::_get_number() const
        {
          return env->getIntField(this$, fids$[fid_number]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FieldInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldInfo_init_(t_FieldInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldInfo_attributes(t_FieldInfo *self);
        static PyObject *t_FieldInfo_getAttribute(t_FieldInfo *self, PyObject *arg);
        static PyObject *t_FieldInfo_getDocValuesGen(t_FieldInfo *self);
        static PyObject *t_FieldInfo_getDocValuesType(t_FieldInfo *self);
        static PyObject *t_FieldInfo_getIndexOptions(t_FieldInfo *self);
        static PyObject *t_FieldInfo_getNormType(t_FieldInfo *self);
        static PyObject *t_FieldInfo_hasDocValues(t_FieldInfo *self);
        static PyObject *t_FieldInfo_hasNorms(t_FieldInfo *self);
        static PyObject *t_FieldInfo_hasPayloads(t_FieldInfo *self);
        static PyObject *t_FieldInfo_hasVectors(t_FieldInfo *self);
        static PyObject *t_FieldInfo_isIndexed(t_FieldInfo *self);
        static PyObject *t_FieldInfo_omitsNorms(t_FieldInfo *self);
        static PyObject *t_FieldInfo_putAttribute(t_FieldInfo *self, PyObject *args);
        static PyObject *t_FieldInfo_get__name(t_FieldInfo *self, void *data);
        static PyObject *t_FieldInfo_get__number(t_FieldInfo *self, void *data);

        static PyObject *t_FieldInfo_get__docValuesGen(t_FieldInfo *self, void *data);
        static PyObject *t_FieldInfo_get__docValuesType(t_FieldInfo *self, void *data);
        static PyObject *t_FieldInfo_get__indexOptions(t_FieldInfo *self, void *data);
        static PyObject *t_FieldInfo_get__indexed(t_FieldInfo *self, void *data);
        static PyObject *t_FieldInfo_get__normType(t_FieldInfo *self, void *data);
        static PyGetSetDef t_FieldInfo__fields_[] = {
          DECLARE_GET_FIELD(t_FieldInfo, name),
          DECLARE_GET_FIELD(t_FieldInfo, number),
          DECLARE_GET_FIELD(t_FieldInfo, docValuesGen),
          DECLARE_GET_FIELD(t_FieldInfo, docValuesType),
          DECLARE_GET_FIELD(t_FieldInfo, indexOptions),
          DECLARE_GET_FIELD(t_FieldInfo, indexed),
          DECLARE_GET_FIELD(t_FieldInfo, normType),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldInfo__methods_[] = {
          DECLARE_METHOD(t_FieldInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo, attributes, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, getAttribute, METH_O),
          DECLARE_METHOD(t_FieldInfo, getDocValuesGen, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, getDocValuesType, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, getIndexOptions, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, getNormType, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, hasDocValues, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, hasNorms, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, hasPayloads, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, hasVectors, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, isIndexed, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, omitsNorms, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, putAttribute, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInfo, t_FieldInfo, ::java::lang::Object, FieldInfo, t_FieldInfo_init_, 0, 0, t_FieldInfo__fields_, 0, 0);

        void t_FieldInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfo), module, "FieldInfo", 0);
          PyDict_SetItemString(PY_TYPE(FieldInfo).tp_dict, "DocValuesType", make_descriptor(&PY_TYPE(FieldInfo$DocValuesType)));
          PyDict_SetItemString(PY_TYPE(FieldInfo).tp_dict, "IndexOptions", make_descriptor(&PY_TYPE(FieldInfo$IndexOptions)));
        }

        void t_FieldInfo::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInfo).tp_dict, "class_", make_descriptor(FieldInfo::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInfo).tp_dict, "wrapfn_", make_descriptor(t_FieldInfo::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfo::initializeClass, 1)))
            return NULL;
          return t_FieldInfo::wrap_Object(FieldInfo(((t_FieldInfo *) arg)->object.this$));
        }
        static PyObject *t_FieldInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldInfo_init_(t_FieldInfo *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean a1;
          jint a2;
          jboolean a3;
          jboolean a4;
          jboolean a5;
          ::org::apache::lucene::index::FieldInfo$IndexOptions a6((jobject) NULL);
          PyTypeObject **p6;
          ::org::apache::lucene::index::FieldInfo$DocValuesType a7((jobject) NULL);
          PyTypeObject **p7;
          ::org::apache::lucene::index::FieldInfo$DocValuesType a8((jobject) NULL);
          PyTypeObject **p8;
          jlong a9;
          ::java::util::Map a10((jobject) NULL);
          PyTypeObject **p10;
          FieldInfo object((jobject) NULL);

          if (!parseArgs(args, "sZIZZZKKKJK", ::org::apache::lucene::index::FieldInfo$IndexOptions::initializeClass, ::org::apache::lucene::index::FieldInfo$DocValuesType::initializeClass, ::org::apache::lucene::index::FieldInfo$DocValuesType::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &p6, ::org::apache::lucene::index::t_FieldInfo$IndexOptions::parameters_, &a7, &p7, ::org::apache::lucene::index::t_FieldInfo$DocValuesType::parameters_, &a8, &p8, ::org::apache::lucene::index::t_FieldInfo$DocValuesType::parameters_, &a9, &a10, &p10, ::java::util::t_Map::parameters_))
          {
            INT_CALL(object = FieldInfo(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldInfo_attributes(t_FieldInfo *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.attributes());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_FieldInfo_getAttribute(t_FieldInfo *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getAttribute(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAttribute", arg);
          return NULL;
        }

        static PyObject *t_FieldInfo_getDocValuesGen(t_FieldInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_FieldInfo_getDocValuesType(t_FieldInfo *self)
        {
          ::org::apache::lucene::index::FieldInfo$DocValuesType result((jobject) NULL);
          OBJ_CALL(result = self->object.getDocValuesType());
          return ::org::apache::lucene::index::t_FieldInfo$DocValuesType::wrap_Object(result);
        }

        static PyObject *t_FieldInfo_getIndexOptions(t_FieldInfo *self)
        {
          ::org::apache::lucene::index::FieldInfo$IndexOptions result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexOptions());
          return ::org::apache::lucene::index::t_FieldInfo$IndexOptions::wrap_Object(result);
        }

        static PyObject *t_FieldInfo_getNormType(t_FieldInfo *self)
        {
          ::org::apache::lucene::index::FieldInfo$DocValuesType result((jobject) NULL);
          OBJ_CALL(result = self->object.getNormType());
          return ::org::apache::lucene::index::t_FieldInfo$DocValuesType::wrap_Object(result);
        }

        static PyObject *t_FieldInfo_hasDocValues(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasDocValues());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_hasNorms(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasNorms());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_hasPayloads(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPayloads());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_hasVectors(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasVectors());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_isIndexed(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isIndexed());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_omitsNorms(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.omitsNorms());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_putAttribute(t_FieldInfo *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = self->object.putAttribute(a0, a1));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "putAttribute", args);
          return NULL;
        }

        static PyObject *t_FieldInfo_get__name(t_FieldInfo *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_name());
          return j2p(value);
        }

        static PyObject *t_FieldInfo_get__number(t_FieldInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_number());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FieldInfo_get__docValuesGen(t_FieldInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_FieldInfo_get__docValuesType(t_FieldInfo *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfo$DocValuesType value((jobject) NULL);
          OBJ_CALL(value = self->object.getDocValuesType());
          return ::org::apache::lucene::index::t_FieldInfo$DocValuesType::wrap_Object(value);
        }

        static PyObject *t_FieldInfo_get__indexOptions(t_FieldInfo *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfo$IndexOptions value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexOptions());
          return ::org::apache::lucene::index::t_FieldInfo$IndexOptions::wrap_Object(value);
        }

        static PyObject *t_FieldInfo_get__indexed(t_FieldInfo *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isIndexed());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_FieldInfo_get__normType(t_FieldInfo *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfo$DocValuesType value((jobject) NULL);
          OBJ_CALL(value = self->object.getNormType());
          return ::org::apache::lucene::index::t_FieldInfo$DocValuesType::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/TermSpans.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *TermSpans::class$ = NULL;
          jmethodID *TermSpans::mids$ = NULL;
          bool TermSpans::live$ = false;
          TermSpans *TermSpans::EMPTY_TERM_SPANS = NULL;

          jclass TermSpans::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/TermSpans");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_33ebef71] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/DocsAndPositionsEnum;Lorg/apache/lucene/index/Term;)V");
              mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_doc_54c6a179] = env->getMethodID(cls, "doc", "()I");
              mids$[mid_end_54c6a179] = env->getMethodID(cls, "end", "()I");
              mids$[mid_getPayload_2d2d7de4] = env->getMethodID(cls, "getPayload", "()Ljava/util/Collection;");
              mids$[mid_getPostings_548e5d87] = env->getMethodID(cls, "getPostings", "()Lorg/apache/lucene/index/DocsAndPositionsEnum;");
              mids$[mid_isPayloadAvailable_54c6a16a] = env->getMethodID(cls, "isPayloadAvailable", "()Z");
              mids$[mid_next_54c6a16a] = env->getMethodID(cls, "next", "()Z");
              mids$[mid_skipTo_39c7bd30] = env->getMethodID(cls, "skipTo", "(I)Z");
              mids$[mid_start_54c6a179] = env->getMethodID(cls, "start", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              EMPTY_TERM_SPANS = new TermSpans(env->getStaticObjectField(cls, "EMPTY_TERM_SPANS", "Lorg/apache/lucene/search/spans/TermSpans;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TermSpans::TermSpans(const ::org::apache::lucene::index::DocsAndPositionsEnum & a0, const ::org::apache::lucene::index::Term & a1) : ::org::apache::lucene::search::spans::Spans(env->newObject(initializeClass, &mids$, mid_init$_33ebef71, a0.this$, a1.this$)) {}

          jlong TermSpans::cost() const
          {
            return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
          }

          jint TermSpans::doc() const
          {
            return env->callIntMethod(this$, mids$[mid_doc_54c6a179]);
          }

          jint TermSpans::end() const
          {
            return env->callIntMethod(this$, mids$[mid_end_54c6a179]);
          }

          ::java::util::Collection TermSpans::getPayload() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getPayload_2d2d7de4]));
          }

          ::org::apache::lucene::index::DocsAndPositionsEnum TermSpans::getPostings() const
          {
            return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_getPostings_548e5d87]));
          }

          jboolean TermSpans::isPayloadAvailable() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPayloadAvailable_54c6a16a]);
          }

          jboolean TermSpans::next() const
          {
            return env->callBooleanMethod(this$, mids$[mid_next_54c6a16a]);
          }

          jboolean TermSpans::skipTo(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_skipTo_39c7bd30], a0);
          }

          jint TermSpans::start() const
          {
            return env->callIntMethod(this$, mids$[mid_start_54c6a179]);
          }

          ::java::lang::String TermSpans::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_TermSpans_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermSpans_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TermSpans_init_(t_TermSpans *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TermSpans_cost(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_doc(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_end(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_getPayload(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_getPostings(t_TermSpans *self);
          static PyObject *t_TermSpans_isPayloadAvailable(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_next(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_skipTo(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_start(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_toString(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_get__payload(t_TermSpans *self, void *data);
          static PyObject *t_TermSpans_get__payloadAvailable(t_TermSpans *self, void *data);
          static PyObject *t_TermSpans_get__postings(t_TermSpans *self, void *data);
          static PyGetSetDef t_TermSpans__fields_[] = {
            DECLARE_GET_FIELD(t_TermSpans, payload),
            DECLARE_GET_FIELD(t_TermSpans, payloadAvailable),
            DECLARE_GET_FIELD(t_TermSpans, postings),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TermSpans__methods_[] = {
            DECLARE_METHOD(t_TermSpans, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermSpans, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermSpans, cost, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, doc, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, end, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, getPayload, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, getPostings, METH_NOARGS),
            DECLARE_METHOD(t_TermSpans, isPayloadAvailable, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, next, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, skipTo, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, start, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TermSpans, t_TermSpans, ::org::apache::lucene::search::spans::Spans, TermSpans, t_TermSpans_init_, 0, 0, t_TermSpans__fields_, 0, 0);

          void t_TermSpans::install(PyObject *module)
          {
            installType(&PY_TYPE(TermSpans), module, "TermSpans", 0);
          }

          void t_TermSpans::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TermSpans).tp_dict, "class_", make_descriptor(TermSpans::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TermSpans).tp_dict, "wrapfn_", make_descriptor(t_TermSpans::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TermSpans).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(TermSpans::initializeClass);
            PyDict_SetItemString(PY_TYPE(TermSpans).tp_dict, "EMPTY_TERM_SPANS", make_descriptor(t_TermSpans::wrap_Object(*TermSpans::EMPTY_TERM_SPANS)));
          }

          static PyObject *t_TermSpans_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TermSpans::initializeClass, 1)))
              return NULL;
            return t_TermSpans::wrap_Object(TermSpans(((t_TermSpans *) arg)->object.this$));
          }
          static PyObject *t_TermSpans_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TermSpans::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TermSpans_init_(t_TermSpans *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::DocsAndPositionsEnum a0((jobject) NULL);
            ::org::apache::lucene::index::Term a1((jobject) NULL);
            TermSpans object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
            {
              INT_CALL(object = TermSpans(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TermSpans_cost(t_TermSpans *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.cost());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "cost", args, 2);
          }

          static PyObject *t_TermSpans_doc(t_TermSpans *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.doc());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "doc", args, 2);
          }

          static PyObject *t_TermSpans_end(t_TermSpans *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.end());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_TermSpans_getPayload(t_TermSpans *self, PyObject *args)
          {
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getPayload());
              return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "getPayload", args, 2);
          }

          static PyObject *t_TermSpans_getPostings(t_TermSpans *self)
          {
            ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);
            OBJ_CALL(result = self->object.getPostings());
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
          }

          static PyObject *t_TermSpans_isPayloadAvailable(t_TermSpans *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.isPayloadAvailable());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "isPayloadAvailable", args, 2);
          }

          static PyObject *t_TermSpans_next(t_TermSpans *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.next());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_TermSpans_skipTo(t_TermSpans *self, PyObject *args)
          {
            jint a0;
            jboolean result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.skipTo(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "skipTo", args, 2);
          }

          static PyObject *t_TermSpans_start(t_TermSpans *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.start());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "start", args, 2);
          }

          static PyObject *t_TermSpans_toString(t_TermSpans *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_TermSpans_get__payload(t_TermSpans *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getPayload());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static PyObject *t_TermSpans_get__payloadAvailable(t_TermSpans *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPayloadAvailable());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_TermSpans_get__postings(t_TermSpans *self, void *data)
          {
            ::org::apache::lucene::index::DocsAndPositionsEnum value((jobject) NULL);
            OBJ_CALL(value = self->object.getPostings());
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/NotQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *NotQuery::class$ = NULL;
            jmethodID *NotQuery::mids$ = NULL;
            bool NotQuery::live$ = false;

            jclass NotQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/NotQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f09ca325] = env->getMethodID(cls, "<init>", "(Ljava/util/List;Ljava/lang/String;)V");
                mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            NotQuery::NotQuery(const ::java::util::List & a0, const ::java::lang::String & a1) : ::org::apache::lucene::queryparser::surround::query::ComposedQuery(env->newObject(initializeClass, &mids$, mid_init$_f09ca325, a0.this$, a1.this$)) {}

            ::org::apache::lucene::search::Query NotQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_NotQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NotQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_NotQuery_init_(t_NotQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_NotQuery_makeLuceneQueryFieldNoBoost(t_NotQuery *self, PyObject *args);

            static PyMethodDef t_NotQuery__methods_[] = {
              DECLARE_METHOD(t_NotQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NotQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NotQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NotQuery, t_NotQuery, ::org::apache::lucene::queryparser::surround::query::ComposedQuery, NotQuery, t_NotQuery_init_, 0, 0, 0, 0, 0);

            void t_NotQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(NotQuery), module, "NotQuery", 0);
            }

            void t_NotQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NotQuery).tp_dict, "class_", make_descriptor(NotQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NotQuery).tp_dict, "wrapfn_", make_descriptor(t_NotQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NotQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NotQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NotQuery::initializeClass, 1)))
                return NULL;
              return t_NotQuery::wrap_Object(NotQuery(((t_NotQuery *) arg)->object.this$));
            }
            static PyObject *t_NotQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NotQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_NotQuery_init_(t_NotQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::String a1((jobject) NULL);
              NotQuery object((jobject) NULL);

              if (!parseArgs(args, "Ks", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
              {
                INT_CALL(object = NotQuery(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_NotQuery_makeLuceneQueryFieldNoBoost(t_NotQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(NotQuery), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/store/IOContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40TermVectorsReader::class$ = NULL;
          jmethodID *Lucene40TermVectorsReader::mids$ = NULL;
          bool Lucene40TermVectorsReader::live$ = false;

          jclass Lucene40TermVectorsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_3589180f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");
              mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_clone_475a2624] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/TermVectorsReader;");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_get_ef1c9c73] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/index/Fields;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40TermVectorsReader::Lucene40TermVectorsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) : ::org::apache::lucene::codecs::TermVectorsReader(env->newObject(initializeClass, &mids$, mid_init$_3589180f, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          void Lucene40TermVectorsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
          }

          ::org::apache::lucene::codecs::TermVectorsReader Lucene40TermVectorsReader::clone() const
          {
            return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_clone_475a2624]));
          }

          void Lucene40TermVectorsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          ::org::apache::lucene::index::Fields Lucene40TermVectorsReader::get(jint a0) const
          {
            return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_get_ef1c9c73], a0));
          }

          jlong Lucene40TermVectorsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40TermVectorsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40TermVectorsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40TermVectorsReader_init_(t_Lucene40TermVectorsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40TermVectorsReader_checkIntegrity(t_Lucene40TermVectorsReader *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsReader_clone(t_Lucene40TermVectorsReader *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsReader_close(t_Lucene40TermVectorsReader *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsReader_get(t_Lucene40TermVectorsReader *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsReader_ramBytesUsed(t_Lucene40TermVectorsReader *self, PyObject *args);

          static PyMethodDef t_Lucene40TermVectorsReader__methods_[] = {
            DECLARE_METHOD(t_Lucene40TermVectorsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40TermVectorsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40TermVectorsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsReader, clone, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsReader, get, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsReader, ramBytesUsed, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40TermVectorsReader, t_Lucene40TermVectorsReader, ::org::apache::lucene::codecs::TermVectorsReader, Lucene40TermVectorsReader, t_Lucene40TermVectorsReader_init_, 0, 0, 0, 0, 0);

          void t_Lucene40TermVectorsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40TermVectorsReader), module, "Lucene40TermVectorsReader", 0);
          }

          void t_Lucene40TermVectorsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsReader).tp_dict, "class_", make_descriptor(Lucene40TermVectorsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene40TermVectorsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40TermVectorsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40TermVectorsReader::initializeClass, 1)))
              return NULL;
            return t_Lucene40TermVectorsReader::wrap_Object(Lucene40TermVectorsReader(((t_Lucene40TermVectorsReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene40TermVectorsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40TermVectorsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40TermVectorsReader_init_(t_Lucene40TermVectorsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            Lucene40TermVectorsReader object((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = Lucene40TermVectorsReader(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene40TermVectorsReader_checkIntegrity(t_Lucene40TermVectorsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsReader_clone(t_Lucene40TermVectorsReader *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsReader), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsReader_close(t_Lucene40TermVectorsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsReader_get(t_Lucene40TermVectorsReader *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::index::Fields result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsReader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsReader_ramBytesUsed(t_Lucene40TermVectorsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PrintStreamInfoStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PrintStreamInfoStream::class$ = NULL;
        jmethodID *PrintStreamInfoStream::mids$ = NULL;
        bool PrintStreamInfoStream::live$ = false;

        jclass PrintStreamInfoStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PrintStreamInfoStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1b7c898b] = env->getMethodID(cls, "<init>", "(Ljava/io/PrintStream;)V");
            mids$[mid_init$_be16aeab] = env->getMethodID(cls, "<init>", "(Ljava/io/PrintStream;I)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_isEnabled_5fdc3f44] = env->getMethodID(cls, "isEnabled", "(Ljava/lang/String;)Z");
            mids$[mid_isSystemStream_54c6a16a] = env->getMethodID(cls, "isSystemStream", "()Z");
            mids$[mid_message_4a264742] = env->getMethodID(cls, "message", "(Ljava/lang/String;Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PrintStreamInfoStream::PrintStreamInfoStream(const ::java::io::PrintStream & a0) : ::org::apache::lucene::util::InfoStream(env->newObject(initializeClass, &mids$, mid_init$_1b7c898b, a0.this$)) {}

        PrintStreamInfoStream::PrintStreamInfoStream(const ::java::io::PrintStream & a0, jint a1) : ::org::apache::lucene::util::InfoStream(env->newObject(initializeClass, &mids$, mid_init$_be16aeab, a0.this$, a1)) {}

        void PrintStreamInfoStream::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jboolean PrintStreamInfoStream::isEnabled(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_isEnabled_5fdc3f44], a0.this$);
        }

        jboolean PrintStreamInfoStream::isSystemStream() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isSystemStream_54c6a16a]);
        }

        void PrintStreamInfoStream::message(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_message_4a264742], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PrintStreamInfoStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrintStreamInfoStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PrintStreamInfoStream_init_(t_PrintStreamInfoStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PrintStreamInfoStream_close(t_PrintStreamInfoStream *self, PyObject *args);
        static PyObject *t_PrintStreamInfoStream_isEnabled(t_PrintStreamInfoStream *self, PyObject *args);
        static PyObject *t_PrintStreamInfoStream_isSystemStream(t_PrintStreamInfoStream *self);
        static PyObject *t_PrintStreamInfoStream_message(t_PrintStreamInfoStream *self, PyObject *args);
        static PyObject *t_PrintStreamInfoStream_get__systemStream(t_PrintStreamInfoStream *self, void *data);
        static PyGetSetDef t_PrintStreamInfoStream__fields_[] = {
          DECLARE_GET_FIELD(t_PrintStreamInfoStream, systemStream),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PrintStreamInfoStream__methods_[] = {
          DECLARE_METHOD(t_PrintStreamInfoStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrintStreamInfoStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrintStreamInfoStream, close, METH_VARARGS),
          DECLARE_METHOD(t_PrintStreamInfoStream, isEnabled, METH_VARARGS),
          DECLARE_METHOD(t_PrintStreamInfoStream, isSystemStream, METH_NOARGS),
          DECLARE_METHOD(t_PrintStreamInfoStream, message, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PrintStreamInfoStream, t_PrintStreamInfoStream, ::org::apache::lucene::util::InfoStream, PrintStreamInfoStream, t_PrintStreamInfoStream_init_, 0, 0, t_PrintStreamInfoStream__fields_, 0, 0);

        void t_PrintStreamInfoStream::install(PyObject *module)
        {
          installType(&PY_TYPE(PrintStreamInfoStream), module, "PrintStreamInfoStream", 0);
        }

        void t_PrintStreamInfoStream::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PrintStreamInfoStream).tp_dict, "class_", make_descriptor(PrintStreamInfoStream::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PrintStreamInfoStream).tp_dict, "wrapfn_", make_descriptor(t_PrintStreamInfoStream::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PrintStreamInfoStream).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PrintStreamInfoStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PrintStreamInfoStream::initializeClass, 1)))
            return NULL;
          return t_PrintStreamInfoStream::wrap_Object(PrintStreamInfoStream(((t_PrintStreamInfoStream *) arg)->object.this$));
        }
        static PyObject *t_PrintStreamInfoStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PrintStreamInfoStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PrintStreamInfoStream_init_(t_PrintStreamInfoStream *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::PrintStream a0((jobject) NULL);
              PrintStreamInfoStream object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::PrintStream::initializeClass, &a0))
              {
                INT_CALL(object = PrintStreamInfoStream(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::io::PrintStream a0((jobject) NULL);
              jint a1;
              PrintStreamInfoStream object((jobject) NULL);

              if (!parseArgs(args, "kI", ::java::io::PrintStream::initializeClass, &a0, &a1))
              {
                INT_CALL(object = PrintStreamInfoStream(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PrintStreamInfoStream_close(t_PrintStreamInfoStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PrintStreamInfoStream), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_PrintStreamInfoStream_isEnabled(t_PrintStreamInfoStream *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.isEnabled(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PrintStreamInfoStream), (PyObject *) self, "isEnabled", args, 2);
        }

        static PyObject *t_PrintStreamInfoStream_isSystemStream(t_PrintStreamInfoStream *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isSystemStream());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_PrintStreamInfoStream_message(t_PrintStreamInfoStream *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.message(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PrintStreamInfoStream), (PyObject *) self, "message", args, 2);
        }

        static PyObject *t_PrintStreamInfoStream_get__systemStream(t_PrintStreamInfoStream *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isSystemStream());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/OpaqueQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *OpaqueQueryNode::class$ = NULL;
              jmethodID *OpaqueQueryNode::mids$ = NULL;
              bool OpaqueQueryNode::live$ = false;

              jclass OpaqueQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/OpaqueQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_db1d05ae] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getSchema_e0adba2f] = env->getMethodID(cls, "getSchema", "()Ljava/lang/CharSequence;");
                  mids$[mid_getValue_e0adba2f] = env->getMethodID(cls, "getValue", "()Ljava/lang/CharSequence;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              OpaqueQueryNode::OpaqueQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_db1d05ae, a0.this$, a1.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode OpaqueQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence OpaqueQueryNode::getSchema() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getSchema_e0adba2f]));
              }

              ::java::lang::CharSequence OpaqueQueryNode::getValue() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getValue_e0adba2f]));
              }

              ::java::lang::CharSequence OpaqueQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String OpaqueQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_OpaqueQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_OpaqueQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_OpaqueQueryNode_init_(t_OpaqueQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_OpaqueQueryNode_cloneTree(t_OpaqueQueryNode *self, PyObject *args);
              static PyObject *t_OpaqueQueryNode_getSchema(t_OpaqueQueryNode *self);
              static PyObject *t_OpaqueQueryNode_getValue(t_OpaqueQueryNode *self);
              static PyObject *t_OpaqueQueryNode_toQueryString(t_OpaqueQueryNode *self, PyObject *args);
              static PyObject *t_OpaqueQueryNode_toString(t_OpaqueQueryNode *self, PyObject *args);
              static PyObject *t_OpaqueQueryNode_get__schema(t_OpaqueQueryNode *self, void *data);
              static PyObject *t_OpaqueQueryNode_get__value(t_OpaqueQueryNode *self, void *data);
              static PyGetSetDef t_OpaqueQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_OpaqueQueryNode, schema),
                DECLARE_GET_FIELD(t_OpaqueQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_OpaqueQueryNode__methods_[] = {
                DECLARE_METHOD(t_OpaqueQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_OpaqueQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_OpaqueQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_OpaqueQueryNode, getSchema, METH_NOARGS),
                DECLARE_METHOD(t_OpaqueQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_OpaqueQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_OpaqueQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(OpaqueQueryNode, t_OpaqueQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, OpaqueQueryNode, t_OpaqueQueryNode_init_, 0, 0, t_OpaqueQueryNode__fields_, 0, 0);

              void t_OpaqueQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(OpaqueQueryNode), module, "OpaqueQueryNode", 0);
              }

              void t_OpaqueQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(OpaqueQueryNode).tp_dict, "class_", make_descriptor(OpaqueQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(OpaqueQueryNode).tp_dict, "wrapfn_", make_descriptor(t_OpaqueQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(OpaqueQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_OpaqueQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, OpaqueQueryNode::initializeClass, 1)))
                  return NULL;
                return t_OpaqueQueryNode::wrap_Object(OpaqueQueryNode(((t_OpaqueQueryNode *) arg)->object.this$));
              }
              static PyObject *t_OpaqueQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, OpaqueQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_OpaqueQueryNode_init_(t_OpaqueQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                OpaqueQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                {
                  INT_CALL(object = OpaqueQueryNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_OpaqueQueryNode_cloneTree(t_OpaqueQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(OpaqueQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_OpaqueQueryNode_getSchema(t_OpaqueQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getSchema());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_OpaqueQueryNode_getValue(t_OpaqueQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_OpaqueQueryNode_toQueryString(t_OpaqueQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(OpaqueQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_OpaqueQueryNode_toString(t_OpaqueQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(OpaqueQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_OpaqueQueryNode_get__schema(t_OpaqueQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getSchema());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }

              static PyObject *t_OpaqueQueryNode_get__value(t_OpaqueQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
