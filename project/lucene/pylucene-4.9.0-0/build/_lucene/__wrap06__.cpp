#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/WhitespaceTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/core/WhitespaceTokenizer.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *WhitespaceTokenizerFactory::class$ = NULL;
          jmethodID *WhitespaceTokenizerFactory::mids$ = NULL;
          bool WhitespaceTokenizerFactory::live$ = false;

          jclass WhitespaceTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/WhitespaceTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_3e31041b] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/core/WhitespaceTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WhitespaceTokenizerFactory::WhitespaceTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::core::WhitespaceTokenizer WhitespaceTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::core::WhitespaceTokenizer(env->callObjectMethod(this$, mids$[mid_create_3e31041b], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_WhitespaceTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WhitespaceTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WhitespaceTokenizerFactory_init_(t_WhitespaceTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WhitespaceTokenizerFactory_create(t_WhitespaceTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_WhitespaceTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_WhitespaceTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WhitespaceTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WhitespaceTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WhitespaceTokenizerFactory, t_WhitespaceTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, WhitespaceTokenizerFactory, t_WhitespaceTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_WhitespaceTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(WhitespaceTokenizerFactory), module, "WhitespaceTokenizerFactory", 0);
          }

          void t_WhitespaceTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WhitespaceTokenizerFactory).tp_dict, "class_", make_descriptor(WhitespaceTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WhitespaceTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_WhitespaceTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WhitespaceTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WhitespaceTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WhitespaceTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_WhitespaceTokenizerFactory::wrap_Object(WhitespaceTokenizerFactory(((t_WhitespaceTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_WhitespaceTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WhitespaceTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WhitespaceTokenizerFactory_init_(t_WhitespaceTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            WhitespaceTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = WhitespaceTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WhitespaceTokenizerFactory_create(t_WhitespaceTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::core::WhitespaceTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::core::t_WhitespaceTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(WhitespaceTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/WAH8DocIdSet$WordBuilder.h"
#include "org/apache/lucene/util/WAH8DocIdSet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *WAH8DocIdSet$WordBuilder::class$ = NULL;
        jmethodID *WAH8DocIdSet$WordBuilder::mids$ = NULL;
        bool WAH8DocIdSet$WordBuilder::live$ = false;

        jclass WAH8DocIdSet$WordBuilder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/WAH8DocIdSet$WordBuilder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_build_b0ef9fd4] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/util/WAH8DocIdSet;");
            mids$[mid_setIndexInterval_3cc37a2d] = env->getMethodID(cls, "setIndexInterval", "(I)Lorg/apache/lucene/util/WAH8DocIdSet$WordBuilder;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::WAH8DocIdSet WAH8DocIdSet$WordBuilder::build() const
        {
          return ::org::apache::lucene::util::WAH8DocIdSet(env->callObjectMethod(this$, mids$[mid_build_b0ef9fd4]));
        }

        WAH8DocIdSet$WordBuilder WAH8DocIdSet$WordBuilder::setIndexInterval(jint a0) const
        {
          return WAH8DocIdSet$WordBuilder(env->callObjectMethod(this$, mids$[mid_setIndexInterval_3cc37a2d], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_WAH8DocIdSet$WordBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WAH8DocIdSet$WordBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WAH8DocIdSet$WordBuilder_build(t_WAH8DocIdSet$WordBuilder *self);
        static PyObject *t_WAH8DocIdSet$WordBuilder_setIndexInterval(t_WAH8DocIdSet$WordBuilder *self, PyObject *arg);
        static int t_WAH8DocIdSet$WordBuilder_set__indexInterval(t_WAH8DocIdSet$WordBuilder *self, PyObject *arg, void *data);
        static PyGetSetDef t_WAH8DocIdSet$WordBuilder__fields_[] = {
          DECLARE_SET_FIELD(t_WAH8DocIdSet$WordBuilder, indexInterval),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_WAH8DocIdSet$WordBuilder__methods_[] = {
          DECLARE_METHOD(t_WAH8DocIdSet$WordBuilder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WAH8DocIdSet$WordBuilder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WAH8DocIdSet$WordBuilder, build, METH_NOARGS),
          DECLARE_METHOD(t_WAH8DocIdSet$WordBuilder, setIndexInterval, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(WAH8DocIdSet$WordBuilder, t_WAH8DocIdSet$WordBuilder, ::java::lang::Object, WAH8DocIdSet$WordBuilder, abstract_init, 0, 0, t_WAH8DocIdSet$WordBuilder__fields_, 0, 0);

        void t_WAH8DocIdSet$WordBuilder::install(PyObject *module)
        {
          installType(&PY_TYPE(WAH8DocIdSet$WordBuilder), module, "WAH8DocIdSet$WordBuilder", 0);
        }

        void t_WAH8DocIdSet$WordBuilder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet$WordBuilder).tp_dict, "class_", make_descriptor(WAH8DocIdSet$WordBuilder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet$WordBuilder).tp_dict, "wrapfn_", make_descriptor(t_WAH8DocIdSet$WordBuilder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet$WordBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_WAH8DocIdSet$WordBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, WAH8DocIdSet$WordBuilder::initializeClass, 1)))
            return NULL;
          return t_WAH8DocIdSet$WordBuilder::wrap_Object(WAH8DocIdSet$WordBuilder(((t_WAH8DocIdSet$WordBuilder *) arg)->object.this$));
        }
        static PyObject *t_WAH8DocIdSet$WordBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, WAH8DocIdSet$WordBuilder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_WAH8DocIdSet$WordBuilder_build(t_WAH8DocIdSet$WordBuilder *self)
        {
          ::org::apache::lucene::util::WAH8DocIdSet result((jobject) NULL);
          OBJ_CALL(result = self->object.build());
          return ::org::apache::lucene::util::t_WAH8DocIdSet::wrap_Object(result);
        }

        static PyObject *t_WAH8DocIdSet$WordBuilder_setIndexInterval(t_WAH8DocIdSet$WordBuilder *self, PyObject *arg)
        {
          jint a0;
          WAH8DocIdSet$WordBuilder result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setIndexInterval(a0));
            return t_WAH8DocIdSet$WordBuilder::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexInterval", arg);
          return NULL;
        }

        static int t_WAH8DocIdSet$WordBuilder_set__indexInterval(t_WAH8DocIdSet$WordBuilder *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setIndexInterval(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "indexInterval", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *TokenFilter::class$ = NULL;
        jmethodID *TokenFilter::mids$ = NULL;
        bool TokenFilter::live$ = false;

        jclass TokenFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/TokenFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TokenFilter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void TokenFilter::end() const
        {
          env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
        }

        void TokenFilter::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_TokenFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TokenFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TokenFilter_close(t_TokenFilter *self, PyObject *args);
        static PyObject *t_TokenFilter_end(t_TokenFilter *self, PyObject *args);
        static PyObject *t_TokenFilter_reset(t_TokenFilter *self, PyObject *args);

        static PyMethodDef t_TokenFilter__methods_[] = {
          DECLARE_METHOD(t_TokenFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenFilter, close, METH_VARARGS),
          DECLARE_METHOD(t_TokenFilter, end, METH_VARARGS),
          DECLARE_METHOD(t_TokenFilter, reset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TokenFilter, t_TokenFilter, ::org::apache::lucene::analysis::TokenStream, TokenFilter, abstract_init, 0, 0, 0, 0, 0);

        void t_TokenFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(TokenFilter), module, "TokenFilter", 0);
        }

        void t_TokenFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TokenFilter).tp_dict, "class_", make_descriptor(TokenFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TokenFilter).tp_dict, "wrapfn_", make_descriptor(t_TokenFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TokenFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TokenFilter::initializeClass, 1)))
            return NULL;
          return t_TokenFilter::wrap_Object(TokenFilter(((t_TokenFilter *) arg)->object.this$));
        }
        static PyObject *t_TokenFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TokenFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TokenFilter_close(t_TokenFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TokenFilter), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_TokenFilter_end(t_TokenFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.end());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TokenFilter), (PyObject *) self, "end", args, 2);
        }

        static PyObject *t_TokenFilter_reset(t_TokenFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TokenFilter), (PyObject *) self, "reset", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/EnumFieldSource.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/Integer.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/FieldCache$IntParser.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *EnumFieldSource::class$ = NULL;
            jmethodID *EnumFieldSource::mids$ = NULL;
            bool EnumFieldSource::live$ = false;

            jclass EnumFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/EnumFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_c567ecd0] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$IntParser;Ljava/util/Map;Ljava/util/Map;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            EnumFieldSource::EnumFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$IntParser & a1, const ::java::util::Map & a2, const ::java::util::Map & a3) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_c567ecd0, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            ::java::lang::String EnumFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean EnumFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues EnumFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint EnumFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_EnumFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_EnumFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_EnumFieldSource_init_(t_EnumFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_EnumFieldSource_description(t_EnumFieldSource *self, PyObject *args);
            static PyObject *t_EnumFieldSource_equals(t_EnumFieldSource *self, PyObject *args);
            static PyObject *t_EnumFieldSource_getValues(t_EnumFieldSource *self, PyObject *args);
            static PyObject *t_EnumFieldSource_hashCode(t_EnumFieldSource *self, PyObject *args);

            static PyMethodDef t_EnumFieldSource__methods_[] = {
              DECLARE_METHOD(t_EnumFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_EnumFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_EnumFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_EnumFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_EnumFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_EnumFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(EnumFieldSource, t_EnumFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, EnumFieldSource, t_EnumFieldSource_init_, 0, 0, 0, 0, 0);

            void t_EnumFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(EnumFieldSource), module, "EnumFieldSource", 0);
            }

            void t_EnumFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(EnumFieldSource).tp_dict, "class_", make_descriptor(EnumFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(EnumFieldSource).tp_dict, "wrapfn_", make_descriptor(t_EnumFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(EnumFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_EnumFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, EnumFieldSource::initializeClass, 1)))
                return NULL;
              return t_EnumFieldSource::wrap_Object(EnumFieldSource(((t_EnumFieldSource *) arg)->object.this$));
            }
            static PyObject *t_EnumFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, EnumFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_EnumFieldSource_init_(t_EnumFieldSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$IntParser a1((jobject) NULL);
              ::java::util::Map a2((jobject) NULL);
              PyTypeObject **p2;
              ::java::util::Map a3((jobject) NULL);
              PyTypeObject **p3;
              EnumFieldSource object((jobject) NULL);

              if (!parseArgs(args, "skKK", ::org::apache::lucene::search::FieldCache$IntParser::initializeClass, ::java::util::Map::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3, &p3, ::java::util::t_Map::parameters_))
              {
                INT_CALL(object = EnumFieldSource(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_EnumFieldSource_description(t_EnumFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(EnumFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_EnumFieldSource_equals(t_EnumFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(EnumFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_EnumFieldSource_getValues(t_EnumFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(EnumFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_EnumFieldSource_hashCode(t_EnumFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(EnumFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DateTools$Resolution::class$ = NULL;
        jmethodID *DateTools$Resolution::mids$ = NULL;
        bool DateTools$Resolution::live$ = false;
        DateTools$Resolution *DateTools$Resolution::DAY = NULL;
        DateTools$Resolution *DateTools$Resolution::HOUR = NULL;
        DateTools$Resolution *DateTools$Resolution::MILLISECOND = NULL;
        DateTools$Resolution *DateTools$Resolution::MINUTE = NULL;
        DateTools$Resolution *DateTools$Resolution::MONTH = NULL;
        DateTools$Resolution *DateTools$Resolution::SECOND = NULL;
        DateTools$Resolution *DateTools$Resolution::YEAR = NULL;

        jclass DateTools$Resolution::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DateTools$Resolution");

            mids$ = new jmethodID[max_mid];
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_valueOf_65edc44f] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/document/DateTools$Resolution;");
            mids$[mid_values_aa4de4a9] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/document/DateTools$Resolution;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DAY = new DateTools$Resolution(env->getStaticObjectField(cls, "DAY", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            HOUR = new DateTools$Resolution(env->getStaticObjectField(cls, "HOUR", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            MILLISECOND = new DateTools$Resolution(env->getStaticObjectField(cls, "MILLISECOND", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            MINUTE = new DateTools$Resolution(env->getStaticObjectField(cls, "MINUTE", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            MONTH = new DateTools$Resolution(env->getStaticObjectField(cls, "MONTH", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            SECOND = new DateTools$Resolution(env->getStaticObjectField(cls, "SECOND", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            YEAR = new DateTools$Resolution(env->getStaticObjectField(cls, "YEAR", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String DateTools$Resolution::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        DateTools$Resolution DateTools$Resolution::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DateTools$Resolution(env->callStaticObjectMethod(cls, mids$[mid_valueOf_65edc44f], a0.this$));
        }

        JArray< DateTools$Resolution > DateTools$Resolution::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< DateTools$Resolution >(env->callStaticObjectMethod(cls, mids$[mid_values_aa4de4a9]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DateTools$Resolution_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools$Resolution_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools$Resolution_of_(t_DateTools$Resolution *self, PyObject *args);
        static PyObject *t_DateTools$Resolution_toString(t_DateTools$Resolution *self, PyObject *args);
        static PyObject *t_DateTools$Resolution_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_DateTools$Resolution_values(PyTypeObject *type);
        static PyObject *t_DateTools$Resolution_get__parameters_(t_DateTools$Resolution *self, void *data);
        static PyGetSetDef t_DateTools$Resolution__fields_[] = {
          DECLARE_GET_FIELD(t_DateTools$Resolution, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DateTools$Resolution__methods_[] = {
          DECLARE_METHOD(t_DateTools$Resolution, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools$Resolution, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools$Resolution, of_, METH_VARARGS),
          DECLARE_METHOD(t_DateTools$Resolution, toString, METH_VARARGS),
          DECLARE_METHOD(t_DateTools$Resolution, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DateTools$Resolution, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DateTools$Resolution, t_DateTools$Resolution, ::java::lang::Enum, DateTools$Resolution, abstract_init, 0, 0, t_DateTools$Resolution__fields_, 0, 0);
        PyObject *t_DateTools$Resolution::wrap_Object(const DateTools$Resolution& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DateTools$Resolution::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DateTools$Resolution *self = (t_DateTools$Resolution *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_DateTools$Resolution::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DateTools$Resolution::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DateTools$Resolution *self = (t_DateTools$Resolution *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_DateTools$Resolution::install(PyObject *module)
        {
          installType(&PY_TYPE(DateTools$Resolution), module, "DateTools$Resolution", 0);
        }

        void t_DateTools$Resolution::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "class_", make_descriptor(DateTools$Resolution::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "wrapfn_", make_descriptor(t_DateTools$Resolution::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DateTools$Resolution::initializeClass);
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "DAY", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::DAY)));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "HOUR", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::HOUR)));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "MILLISECOND", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::MILLISECOND)));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "MINUTE", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::MINUTE)));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "MONTH", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::MONTH)));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "SECOND", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::SECOND)));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "YEAR", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::YEAR)));
        }

        static PyObject *t_DateTools$Resolution_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DateTools$Resolution::initializeClass, 1)))
            return NULL;
          return t_DateTools$Resolution::wrap_Object(DateTools$Resolution(((t_DateTools$Resolution *) arg)->object.this$));
        }
        static PyObject *t_DateTools$Resolution_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DateTools$Resolution::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DateTools$Resolution_of_(t_DateTools$Resolution *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_DateTools$Resolution_toString(t_DateTools$Resolution *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(DateTools$Resolution), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_DateTools$Resolution_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          DateTools$Resolution result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DateTools$Resolution::valueOf(a0));
            return t_DateTools$Resolution::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_DateTools$Resolution_values(PyTypeObject *type)
        {
          JArray< DateTools$Resolution > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::document::DateTools$Resolution::values());
          return JArray<jobject>(result.this$).wrap(t_DateTools$Resolution::wrap_jobject);
        }
        static PyObject *t_DateTools$Resolution_get__parameters_(t_DateTools$Resolution *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkTokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {

          ::java::lang::Class *TeeSinkTokenFilter$SinkTokenStream::class$ = NULL;
          jmethodID *TeeSinkTokenFilter$SinkTokenStream::mids$ = NULL;
          bool TeeSinkTokenFilter$SinkTokenStream::live$ = false;

          jclass TeeSinkTokenFilter$SinkTokenStream::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkTokenStream");

              mids$ = new jmethodID[max_mid];
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void TeeSinkTokenFilter$SinkTokenStream::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean TeeSinkTokenFilter$SinkTokenStream::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void TeeSinkTokenFilter$SinkTokenStream::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_end(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args);
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_incrementToken(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args);
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_reset(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args);

          static PyMethodDef t_TeeSinkTokenFilter$SinkTokenStream__methods_[] = {
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkTokenStream, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkTokenStream, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkTokenStream, end, METH_VARARGS),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkTokenStream, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkTokenStream, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TeeSinkTokenFilter$SinkTokenStream, t_TeeSinkTokenFilter$SinkTokenStream, ::org::apache::lucene::analysis::TokenStream, TeeSinkTokenFilter$SinkTokenStream, abstract_init, 0, 0, 0, 0, 0);

          void t_TeeSinkTokenFilter$SinkTokenStream::install(PyObject *module)
          {
            installType(&PY_TYPE(TeeSinkTokenFilter$SinkTokenStream), module, "TeeSinkTokenFilter$SinkTokenStream", 0);
          }

          void t_TeeSinkTokenFilter$SinkTokenStream::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter$SinkTokenStream).tp_dict, "class_", make_descriptor(TeeSinkTokenFilter$SinkTokenStream::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter$SinkTokenStream).tp_dict, "wrapfn_", make_descriptor(t_TeeSinkTokenFilter$SinkTokenStream::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter$SinkTokenStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TeeSinkTokenFilter$SinkTokenStream::initializeClass, 1)))
              return NULL;
            return t_TeeSinkTokenFilter$SinkTokenStream::wrap_Object(TeeSinkTokenFilter$SinkTokenStream(((t_TeeSinkTokenFilter$SinkTokenStream *) arg)->object.this$));
          }
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TeeSinkTokenFilter$SinkTokenStream::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_end(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(TeeSinkTokenFilter$SinkTokenStream), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_incrementToken(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TeeSinkTokenFilter$SinkTokenStream), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_reset(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(TeeSinkTokenFilter$SinkTokenStream), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$LMStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMSimilarity$LMStats::class$ = NULL;
          jmethodID *LMSimilarity$LMStats::mids$ = NULL;
          bool LMSimilarity$LMStats::live$ = false;

          jclass LMSimilarity$LMStats::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMSimilarity$LMStats");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f0649ce1] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;F)V");
              mids$[mid_getCollectionProbability_54c6a176] = env->getMethodID(cls, "getCollectionProbability", "()F");
              mids$[mid_setCollectionProbability_06298cab] = env->getMethodID(cls, "setCollectionProbability", "(F)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LMSimilarity$LMStats::LMSimilarity$LMStats(const ::java::lang::String & a0, jfloat a1) : ::org::apache::lucene::search::similarities::BasicStats(env->newObject(initializeClass, &mids$, mid_init$_f0649ce1, a0.this$, a1)) {}

          jfloat LMSimilarity$LMStats::getCollectionProbability() const
          {
            return env->callFloatMethod(this$, mids$[mid_getCollectionProbability_54c6a176]);
          }

          void LMSimilarity$LMStats::setCollectionProbability(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setCollectionProbability_06298cab], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMSimilarity$LMStats_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMSimilarity$LMStats_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LMSimilarity$LMStats_init_(t_LMSimilarity$LMStats *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LMSimilarity$LMStats_getCollectionProbability(t_LMSimilarity$LMStats *self);
          static PyObject *t_LMSimilarity$LMStats_setCollectionProbability(t_LMSimilarity$LMStats *self, PyObject *arg);
          static PyObject *t_LMSimilarity$LMStats_get__collectionProbability(t_LMSimilarity$LMStats *self, void *data);
          static int t_LMSimilarity$LMStats_set__collectionProbability(t_LMSimilarity$LMStats *self, PyObject *arg, void *data);
          static PyGetSetDef t_LMSimilarity$LMStats__fields_[] = {
            DECLARE_GETSET_FIELD(t_LMSimilarity$LMStats, collectionProbability),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMSimilarity$LMStats__methods_[] = {
            DECLARE_METHOD(t_LMSimilarity$LMStats, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$LMStats, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$LMStats, getCollectionProbability, METH_NOARGS),
            DECLARE_METHOD(t_LMSimilarity$LMStats, setCollectionProbability, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LMSimilarity$LMStats, t_LMSimilarity$LMStats, ::org::apache::lucene::search::similarities::BasicStats, LMSimilarity$LMStats, t_LMSimilarity$LMStats_init_, 0, 0, t_LMSimilarity$LMStats__fields_, 0, 0);

          void t_LMSimilarity$LMStats::install(PyObject *module)
          {
            installType(&PY_TYPE(LMSimilarity$LMStats), module, "LMSimilarity$LMStats", 0);
          }

          void t_LMSimilarity$LMStats::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LMSimilarity$LMStats).tp_dict, "class_", make_descriptor(LMSimilarity$LMStats::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LMSimilarity$LMStats).tp_dict, "wrapfn_", make_descriptor(t_LMSimilarity$LMStats::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LMSimilarity$LMStats).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMSimilarity$LMStats_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMSimilarity$LMStats::initializeClass, 1)))
              return NULL;
            return t_LMSimilarity$LMStats::wrap_Object(LMSimilarity$LMStats(((t_LMSimilarity$LMStats *) arg)->object.this$));
          }
          static PyObject *t_LMSimilarity$LMStats_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMSimilarity$LMStats::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LMSimilarity$LMStats_init_(t_LMSimilarity$LMStats *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            jfloat a1;
            LMSimilarity$LMStats object((jobject) NULL);

            if (!parseArgs(args, "sF", &a0, &a1))
            {
              INT_CALL(object = LMSimilarity$LMStats(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LMSimilarity$LMStats_getCollectionProbability(t_LMSimilarity$LMStats *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getCollectionProbability());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_LMSimilarity$LMStats_setCollectionProbability(t_LMSimilarity$LMStats *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setCollectionProbability(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setCollectionProbability", arg);
            return NULL;
          }

          static PyObject *t_LMSimilarity$LMStats_get__collectionProbability(t_LMSimilarity$LMStats *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getCollectionProbability());
            return PyFloat_FromDouble((double) value);
          }
          static int t_LMSimilarity$LMStats_set__collectionProbability(t_LMSimilarity$LMStats *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setCollectionProbability(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "collectionProbability", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *NumericPayloadTokenFilterFactory::class$ = NULL;
          jmethodID *NumericPayloadTokenFilterFactory::mids$ = NULL;
          bool NumericPayloadTokenFilterFactory::live$ = false;

          jclass NumericPayloadTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_21f7b18d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/payloads/NumericPayloadTokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NumericPayloadTokenFilterFactory::NumericPayloadTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::payloads::NumericPayloadTokenFilter NumericPayloadTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::payloads::NumericPayloadTokenFilter(env->callObjectMethod(this$, mids$[mid_create_21f7b18d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_NumericPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NumericPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NumericPayloadTokenFilterFactory_init_(t_NumericPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NumericPayloadTokenFilterFactory_create(t_NumericPayloadTokenFilterFactory *self, PyObject *args);

          static PyMethodDef t_NumericPayloadTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_NumericPayloadTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NumericPayloadTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NumericPayloadTokenFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NumericPayloadTokenFilterFactory, t_NumericPayloadTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, NumericPayloadTokenFilterFactory, t_NumericPayloadTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_NumericPayloadTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(NumericPayloadTokenFilterFactory), module, "NumericPayloadTokenFilterFactory", 0);
          }

          void t_NumericPayloadTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NumericPayloadTokenFilterFactory).tp_dict, "class_", make_descriptor(NumericPayloadTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NumericPayloadTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_NumericPayloadTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NumericPayloadTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NumericPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NumericPayloadTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_NumericPayloadTokenFilterFactory::wrap_Object(NumericPayloadTokenFilterFactory(((t_NumericPayloadTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_NumericPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NumericPayloadTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NumericPayloadTokenFilterFactory_init_(t_NumericPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            NumericPayloadTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = NumericPayloadTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NumericPayloadTokenFilterFactory_create(t_NumericPayloadTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::payloads::NumericPayloadTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::payloads::t_NumericPayloadTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NumericPayloadTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/TopOrdAndFloatQueue$OrdAndValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *TopOrdAndFloatQueue$OrdAndValue::class$ = NULL;
        jmethodID *TopOrdAndFloatQueue$OrdAndValue::mids$ = NULL;
        jfieldID *TopOrdAndFloatQueue$OrdAndValue::fids$ = NULL;
        bool TopOrdAndFloatQueue$OrdAndValue::live$ = false;

        jclass TopOrdAndFloatQueue$OrdAndValue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/TopOrdAndFloatQueue$OrdAndValue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_ord] = env->getFieldID(cls, "ord", "I");
            fids$[fid_value] = env->getFieldID(cls, "value", "F");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopOrdAndFloatQueue$OrdAndValue::TopOrdAndFloatQueue$OrdAndValue() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint TopOrdAndFloatQueue$OrdAndValue::_get_ord() const
        {
          return env->getIntField(this$, fids$[fid_ord]);
        }

        void TopOrdAndFloatQueue$OrdAndValue::_set_ord(jint a0) const
        {
          env->setIntField(this$, fids$[fid_ord], a0);
        }

        jfloat TopOrdAndFloatQueue$OrdAndValue::_get_value() const
        {
          return env->getFloatField(this$, fids$[fid_value]);
        }

        void TopOrdAndFloatQueue$OrdAndValue::_set_value(jfloat a0) const
        {
          env->setFloatField(this$, fids$[fid_value], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_of_(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *args);
        static int t_TopOrdAndFloatQueue$OrdAndValue_init_(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__ord(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data);
        static int t_TopOrdAndFloatQueue$OrdAndValue_set__ord(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *arg, void *data);
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__value(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data);
        static int t_TopOrdAndFloatQueue$OrdAndValue_set__value(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *arg, void *data);

        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__parameters_(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data);
        static PyGetSetDef t_TopOrdAndFloatQueue$OrdAndValue__fields_[] = {
          DECLARE_GETSET_FIELD(t_TopOrdAndFloatQueue$OrdAndValue, ord),
          DECLARE_GETSET_FIELD(t_TopOrdAndFloatQueue$OrdAndValue, value),
          DECLARE_GET_FIELD(t_TopOrdAndFloatQueue$OrdAndValue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopOrdAndFloatQueue$OrdAndValue__methods_[] = {
          DECLARE_METHOD(t_TopOrdAndFloatQueue$OrdAndValue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndFloatQueue$OrdAndValue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndFloatQueue$OrdAndValue, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopOrdAndFloatQueue$OrdAndValue, t_TopOrdAndFloatQueue$OrdAndValue, ::java::lang::Object, TopOrdAndFloatQueue$OrdAndValue, t_TopOrdAndFloatQueue$OrdAndValue_init_, 0, 0, t_TopOrdAndFloatQueue$OrdAndValue__fields_, 0, 0);
        PyObject *t_TopOrdAndFloatQueue$OrdAndValue::wrap_Object(const TopOrdAndFloatQueue$OrdAndValue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndFloatQueue$OrdAndValue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndFloatQueue$OrdAndValue *self = (t_TopOrdAndFloatQueue$OrdAndValue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopOrdAndFloatQueue$OrdAndValue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndFloatQueue$OrdAndValue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndFloatQueue$OrdAndValue *self = (t_TopOrdAndFloatQueue$OrdAndValue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopOrdAndFloatQueue$OrdAndValue::install(PyObject *module)
        {
          installType(&PY_TYPE(TopOrdAndFloatQueue$OrdAndValue), module, "TopOrdAndFloatQueue$OrdAndValue", 0);
        }

        void t_TopOrdAndFloatQueue$OrdAndValue::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopOrdAndFloatQueue$OrdAndValue).tp_dict, "class_", make_descriptor(TopOrdAndFloatQueue$OrdAndValue::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopOrdAndFloatQueue$OrdAndValue).tp_dict, "wrapfn_", make_descriptor(t_TopOrdAndFloatQueue$OrdAndValue::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopOrdAndFloatQueue$OrdAndValue).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopOrdAndFloatQueue$OrdAndValue::initializeClass, 1)))
            return NULL;
          return t_TopOrdAndFloatQueue$OrdAndValue::wrap_Object(TopOrdAndFloatQueue$OrdAndValue(((t_TopOrdAndFloatQueue$OrdAndValue *) arg)->object.this$));
        }
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopOrdAndFloatQueue$OrdAndValue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_of_(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_TopOrdAndFloatQueue$OrdAndValue_init_(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *args, PyObject *kwds)
        {
          TopOrdAndFloatQueue$OrdAndValue object((jobject) NULL);

          INT_CALL(object = TopOrdAndFloatQueue$OrdAndValue());
          self->object = object;
          self->parameters[0] = &::org::apache::lucene::facet::PY_TYPE(TopOrdAndFloatQueue$OrdAndValue);

          return 0;
        }
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__parameters_(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__ord(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_ord());
          return PyInt_FromLong((long) value);
        }
        static int t_TopOrdAndFloatQueue$OrdAndValue_set__ord(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_ord(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "ord", arg);
          return -1;
        }

        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__value(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object._get_value());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TopOrdAndFloatQueue$OrdAndValue_set__value(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *arg, void *data)
        {
          jfloat value;
          if (!parseArg(arg, "F", &value))
          {
            INT_CALL(self->object._set_value(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "value", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/PositiveIntOutputs.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/Long.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *PositiveIntOutputs::class$ = NULL;
          jmethodID *PositiveIntOutputs::mids$ = NULL;
          bool PositiveIntOutputs::live$ = false;

          jclass PositiveIntOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/PositiveIntOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_9f6e77f0] = env->getMethodID(cls, "add", "(Ljava/lang/Long;Ljava/lang/Long;)Ljava/lang/Long;");
              mids$[mid_common_9f6e77f0] = env->getMethodID(cls, "common", "(Ljava/lang/Long;Ljava/lang/Long;)Ljava/lang/Long;");
              mids$[mid_getNoOutput_c5e93900] = env->getMethodID(cls, "getNoOutput", "()Ljava/lang/Long;");
              mids$[mid_getSingleton_62a4b337] = env->getStaticMethodID(cls, "getSingleton", "()Lorg/apache/lucene/util/fst/PositiveIntOutputs;");
              mids$[mid_outputToString_d1a33160] = env->getMethodID(cls, "outputToString", "(Ljava/lang/Long;)Ljava/lang/String;");
              mids$[mid_ramBytesUsed_da55802d] = env->getMethodID(cls, "ramBytesUsed", "(Ljava/lang/Long;)J");
              mids$[mid_read_5eca7461] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Ljava/lang/Long;");
              mids$[mid_subtract_9f6e77f0] = env->getMethodID(cls, "subtract", "(Ljava/lang/Long;Ljava/lang/Long;)Ljava/lang/Long;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_write_6466b4a8] = env->getMethodID(cls, "write", "(Ljava/lang/Long;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Long PositiveIntOutputs::add(const ::java::lang::Long & a0, const ::java::lang::Long & a1) const
          {
            return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_add_9f6e77f0], a0.this$, a1.this$));
          }

          ::java::lang::Long PositiveIntOutputs::common(const ::java::lang::Long & a0, const ::java::lang::Long & a1) const
          {
            return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_common_9f6e77f0], a0.this$, a1.this$));
          }

          ::java::lang::Long PositiveIntOutputs::getNoOutput() const
          {
            return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_getNoOutput_c5e93900]));
          }

          PositiveIntOutputs PositiveIntOutputs::getSingleton()
          {
            jclass cls = env->getClass(initializeClass);
            return PositiveIntOutputs(env->callStaticObjectMethod(cls, mids$[mid_getSingleton_62a4b337]));
          }

          ::java::lang::String PositiveIntOutputs::outputToString(const ::java::lang::Long & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_d1a33160], a0.this$));
          }

          jlong PositiveIntOutputs::ramBytesUsed(const ::java::lang::Long & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_da55802d], a0.this$);
          }

          ::java::lang::Long PositiveIntOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_read_5eca7461], a0.this$));
          }

          ::java::lang::Long PositiveIntOutputs::subtract(const ::java::lang::Long & a0, const ::java::lang::Long & a1) const
          {
            return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_subtract_9f6e77f0], a0.this$, a1.this$));
          }

          ::java::lang::String PositiveIntOutputs::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          void PositiveIntOutputs::write(const ::java::lang::Long & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_6466b4a8], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_PositiveIntOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositiveIntOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositiveIntOutputs_of_(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_add(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_common(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_getNoOutput(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_getSingleton(PyTypeObject *type);
          static PyObject *t_PositiveIntOutputs_outputToString(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_ramBytesUsed(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_read(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_subtract(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_toString(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_write(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_get__noOutput(t_PositiveIntOutputs *self, void *data);
          static PyObject *t_PositiveIntOutputs_get__singleton(t_PositiveIntOutputs *self, void *data);
          static PyObject *t_PositiveIntOutputs_get__parameters_(t_PositiveIntOutputs *self, void *data);
          static PyGetSetDef t_PositiveIntOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_PositiveIntOutputs, noOutput),
            DECLARE_GET_FIELD(t_PositiveIntOutputs, singleton),
            DECLARE_GET_FIELD(t_PositiveIntOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PositiveIntOutputs__methods_[] = {
            DECLARE_METHOD(t_PositiveIntOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositiveIntOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositiveIntOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, getSingleton, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_PositiveIntOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, toString, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositiveIntOutputs, t_PositiveIntOutputs, ::org::apache::lucene::util::fst::Outputs, PositiveIntOutputs, abstract_init, 0, 0, t_PositiveIntOutputs__fields_, 0, 0);
          PyObject *t_PositiveIntOutputs::wrap_Object(const PositiveIntOutputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PositiveIntOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PositiveIntOutputs *self = (t_PositiveIntOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_PositiveIntOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PositiveIntOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PositiveIntOutputs *self = (t_PositiveIntOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_PositiveIntOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(PositiveIntOutputs), module, "PositiveIntOutputs", 0);
          }

          void t_PositiveIntOutputs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositiveIntOutputs).tp_dict, "class_", make_descriptor(PositiveIntOutputs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositiveIntOutputs).tp_dict, "wrapfn_", make_descriptor(t_PositiveIntOutputs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositiveIntOutputs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositiveIntOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositiveIntOutputs::initializeClass, 1)))
              return NULL;
            return t_PositiveIntOutputs::wrap_Object(PositiveIntOutputs(((t_PositiveIntOutputs *) arg)->object.this$));
          }
          static PyObject *t_PositiveIntOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositiveIntOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PositiveIntOutputs_of_(t_PositiveIntOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_PositiveIntOutputs_add(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            ::java::lang::Long a1((jobject) NULL);
            ::java::lang::Long result((jobject) NULL);

            if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::java::lang::t_Long::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_common(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            ::java::lang::Long a1((jobject) NULL);
            ::java::lang::Long result((jobject) NULL);

            if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::java::lang::t_Long::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_getNoOutput(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::java::lang::t_Long::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_getSingleton(PyTypeObject *type)
          {
            PositiveIntOutputs result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::PositiveIntOutputs::getSingleton());
            return t_PositiveIntOutputs::wrap_Object(result);
          }

          static PyObject *t_PositiveIntOutputs_outputToString(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Long), &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_ramBytesUsed(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Long), &a0))
            {
              OBJ_CALL(result = self->object.ramBytesUsed(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_read(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::java::lang::Long result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::java::lang::t_Long::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_subtract(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            ::java::lang::Long a1((jobject) NULL);
            ::java::lang::Long result((jobject) NULL);

            if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::java::lang::t_Long::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_toString(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_write(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "Ok", &::java::lang::PY_TYPE(Long), ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_PositiveIntOutputs_get__parameters_(t_PositiveIntOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_PositiveIntOutputs_get__noOutput(t_PositiveIntOutputs *self, void *data)
          {
            ::java::lang::Long value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::java::lang::t_Long::wrap_Object(value);
          }

          static PyObject *t_PositiveIntOutputs_get__singleton(t_PositiveIntOutputs *self, void *data)
          {
            PositiveIntOutputs value((jobject) NULL);
            OBJ_CALL(value = self->object.getSingleton());
            return t_PositiveIntOutputs::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$LongComparator.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/Long.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$LongComparator::class$ = NULL;
        jmethodID *FieldComparator$LongComparator::mids$ = NULL;
        bool FieldComparator$LongComparator::live$ = false;

        jclass FieldComparator$LongComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$LongComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a6072141] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Lorg/apache/lucene/search/FieldCache$Parser;Ljava/lang/Long;)V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_da558031] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Long;)V");
            mids$[mid_value_67140e92] = env->getMethodID(cls, "value", "(I)Ljava/lang/Long;");
            mids$[mid_getLongValues_8288bb5d] = env->getMethodID(cls, "getLongValues", "(Lorg/apache/lucene/index/AtomicReaderContext;Ljava/lang/String;)Lorg/apache/lucene/search/FieldCache$Longs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator$LongComparator::FieldComparator$LongComparator(jint a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$Parser & a2, const ::java::lang::Long & a3) : ::org::apache::lucene::search::FieldComparator$NumericComparator(env->newObject(initializeClass, &mids$, mid_init$_a6072141, a0, a1.this$, a2.this$, a3.this$)) {}

        jint FieldComparator$LongComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$LongComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$LongComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        void FieldComparator$LongComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$LongComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$LongComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$LongComparator::setTopValue(const ::java::lang::Long & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_da558031], a0.this$);
        }

        ::java::lang::Long FieldComparator$LongComparator::value(jint a0) const
        {
          return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_value_67140e92], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$LongComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$LongComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$LongComparator_of_(t_FieldComparator$LongComparator *self, PyObject *args);
        static int t_FieldComparator$LongComparator_init_(t_FieldComparator$LongComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator$LongComparator_compare(t_FieldComparator$LongComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$LongComparator_compareBottom(t_FieldComparator$LongComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$LongComparator_compareTop(t_FieldComparator$LongComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$LongComparator_copy(t_FieldComparator$LongComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$LongComparator_setBottom(t_FieldComparator$LongComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$LongComparator_setNextReader(t_FieldComparator$LongComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$LongComparator_setTopValue(t_FieldComparator$LongComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$LongComparator_value(t_FieldComparator$LongComparator *self, PyObject *args);
        static int t_FieldComparator$LongComparator_set__bottom(t_FieldComparator$LongComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$LongComparator_set__nextReader(t_FieldComparator$LongComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$LongComparator_set__topValue(t_FieldComparator$LongComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$LongComparator_get__parameters_(t_FieldComparator$LongComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$LongComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$LongComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$LongComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$LongComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$LongComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$LongComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$LongComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$LongComparator, t_FieldComparator$LongComparator, ::org::apache::lucene::search::FieldComparator$NumericComparator, FieldComparator$LongComparator, t_FieldComparator$LongComparator_init_, 0, 0, t_FieldComparator$LongComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$LongComparator::wrap_Object(const FieldComparator$LongComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$LongComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$LongComparator *self = (t_FieldComparator$LongComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$LongComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$LongComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$LongComparator *self = (t_FieldComparator$LongComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$LongComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$LongComparator), module, "FieldComparator$LongComparator", 0);
        }

        void t_FieldComparator$LongComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$LongComparator).tp_dict, "class_", make_descriptor(FieldComparator$LongComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$LongComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$LongComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$LongComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$LongComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$LongComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$LongComparator::wrap_Object(FieldComparator$LongComparator(((t_FieldComparator$LongComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$LongComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$LongComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$LongComparator_of_(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator$LongComparator_init_(t_FieldComparator$LongComparator *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::search::FieldCache$Parser a2((jobject) NULL);
          ::java::lang::Long a3((jobject) NULL);
          FieldComparator$LongComparator object((jobject) NULL);

          if (!parseArgs(args, "IskO", ::org::apache::lucene::search::FieldCache$Parser::initializeClass, &::java::lang::PY_TYPE(Long), &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = FieldComparator$LongComparator(a0, a1, a2, a3));
            self->object = object;
            self->parameters[0] = &::java::lang::PY_TYPE(Long);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldComparator$LongComparator_compare(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$LongComparator_compareBottom(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$LongComparator_compareTop(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$LongComparator_copy(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$LongComparator_setBottom(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$LongComparator_setNextReader(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Long));
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$LongComparator_setTopValue(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          ::java::lang::Long a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Long), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$LongComparator_value(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Long result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Long::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$LongComparator_get__parameters_(t_FieldComparator$LongComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$LongComparator_set__bottom(t_FieldComparator$LongComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$LongComparator_set__nextReader(t_FieldComparator$LongComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$LongComparator_set__topValue(t_FieldComparator$LongComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Long value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Long), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/QueryValueSource.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *QueryValueSource::class$ = NULL;
            jmethodID *QueryValueSource::mids$ = NULL;
            bool QueryValueSource::live$ = false;

            jclass QueryValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/QueryValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_05a7d758] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;F)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getDefaultValue_54c6a176] = env->getMethodID(cls, "getDefaultValue", "()F");
                mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryValueSource::QueryValueSource(const ::org::apache::lucene::search::Query & a0, jfloat a1) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_05a7d758, a0.this$, a1)) {}

            void QueryValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String QueryValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean QueryValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jfloat QueryValueSource::getDefaultValue() const
            {
              return env->callFloatMethod(this$, mids$[mid_getDefaultValue_54c6a176]);
            }

            ::org::apache::lucene::search::Query QueryValueSource::getQuery() const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
            }

            ::org::apache::lucene::queries::function::FunctionValues QueryValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint QueryValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_QueryValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryValueSource_init_(t_QueryValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryValueSource_createWeight(t_QueryValueSource *self, PyObject *args);
            static PyObject *t_QueryValueSource_description(t_QueryValueSource *self, PyObject *args);
            static PyObject *t_QueryValueSource_equals(t_QueryValueSource *self, PyObject *args);
            static PyObject *t_QueryValueSource_getDefaultValue(t_QueryValueSource *self);
            static PyObject *t_QueryValueSource_getQuery(t_QueryValueSource *self);
            static PyObject *t_QueryValueSource_getValues(t_QueryValueSource *self, PyObject *args);
            static PyObject *t_QueryValueSource_hashCode(t_QueryValueSource *self, PyObject *args);
            static PyObject *t_QueryValueSource_get__defaultValue(t_QueryValueSource *self, void *data);
            static PyObject *t_QueryValueSource_get__query(t_QueryValueSource *self, void *data);
            static PyGetSetDef t_QueryValueSource__fields_[] = {
              DECLARE_GET_FIELD(t_QueryValueSource, defaultValue),
              DECLARE_GET_FIELD(t_QueryValueSource, query),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryValueSource__methods_[] = {
              DECLARE_METHOD(t_QueryValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_QueryValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_QueryValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_QueryValueSource, getDefaultValue, METH_NOARGS),
              DECLARE_METHOD(t_QueryValueSource, getQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_QueryValueSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryValueSource, t_QueryValueSource, ::org::apache::lucene::queries::function::ValueSource, QueryValueSource, t_QueryValueSource_init_, 0, 0, t_QueryValueSource__fields_, 0, 0);

            void t_QueryValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryValueSource), module, "QueryValueSource", 0);
            }

            void t_QueryValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryValueSource).tp_dict, "class_", make_descriptor(QueryValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryValueSource).tp_dict, "wrapfn_", make_descriptor(t_QueryValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryValueSource::initializeClass, 1)))
                return NULL;
              return t_QueryValueSource::wrap_Object(QueryValueSource(((t_QueryValueSource *) arg)->object.this$));
            }
            static PyObject *t_QueryValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryValueSource_init_(t_QueryValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              jfloat a1;
              QueryValueSource object((jobject) NULL);

              if (!parseArgs(args, "kF", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
              {
                INT_CALL(object = QueryValueSource(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryValueSource_createWeight(t_QueryValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(QueryValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_QueryValueSource_description(t_QueryValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(QueryValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_QueryValueSource_equals(t_QueryValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(QueryValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_QueryValueSource_getDefaultValue(t_QueryValueSource *self)
            {
              jfloat result;
              OBJ_CALL(result = self->object.getDefaultValue());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_QueryValueSource_getQuery(t_QueryValueSource *self)
            {
              ::org::apache::lucene::search::Query result((jobject) NULL);
              OBJ_CALL(result = self->object.getQuery());
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            static PyObject *t_QueryValueSource_getValues(t_QueryValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(QueryValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_QueryValueSource_hashCode(t_QueryValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(QueryValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_QueryValueSource_get__defaultValue(t_QueryValueSource *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getDefaultValue());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_QueryValueSource_get__query(t_QueryValueSource *self, void *data)
            {
              ::org::apache::lucene::search::Query value((jobject) NULL);
              OBJ_CALL(value = self->object.getQuery());
              return ::org::apache::lucene::search::t_Query::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/PrintStream.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"
#include "java/util/List.h"
#include "java/lang/Cloneable.h"
#include "java/io/IOException.h"
#include "java/util/Iterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentInfos::class$ = NULL;
        jmethodID *SegmentInfos::mids$ = NULL;
        jfieldID *SegmentInfos::fids$ = NULL;
        bool SegmentInfos::live$ = false;
        jint SegmentInfos::FORMAT_SEGMENTS_GEN_CURRENT = (jint) 0;
        jint SegmentInfos::VERSION_40 = (jint) 0;
        jint SegmentInfos::VERSION_46 = (jint) 0;
        jint SegmentInfos::VERSION_48 = (jint) 0;
        jint SegmentInfos::VERSION_49 = (jint) 0;

        jclass SegmentInfos::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentInfos");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_6649cdf4] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/SegmentCommitInfo;)V");
            mids$[mid_addAll_d1cac205] = env->getMethodID(cls, "addAll", "(Ljava/lang/Iterable;)V");
            mids$[mid_asList_87851566] = env->getMethodID(cls, "asList", "()Ljava/util/List;");
            mids$[mid_changed_54c6a166] = env->getMethodID(cls, "changed", "()V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_clone_e585ba04] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/index/SegmentInfos;");
            mids$[mid_files_b47d57a7] = env->getMethodID(cls, "files", "(Lorg/apache/lucene/store/Directory;Z)Ljava/util/Collection;");
            mids$[mid_generationFromSegmentsFileName_5fdc3f54] = env->getStaticMethodID(cls, "generationFromSegmentsFileName", "(Ljava/lang/String;)J");
            mids$[mid_getDefaultGenLookahedCount_54c6a179] = env->getStaticMethodID(cls, "getDefaultGenLookahedCount", "()I");
            mids$[mid_getGeneration_54c6a17a] = env->getMethodID(cls, "getGeneration", "()J");
            mids$[mid_getInfoStream_00215d9e] = env->getStaticMethodID(cls, "getInfoStream", "()Ljava/io/PrintStream;");
            mids$[mid_getLastCommitGeneration_4dd45410] = env->getStaticMethodID(cls, "getLastCommitGeneration", "([Ljava/lang/String;)J");
            mids$[mid_getLastCommitGeneration_2e261eee] = env->getStaticMethodID(cls, "getLastCommitGeneration", "(Lorg/apache/lucene/store/Directory;)J");
            mids$[mid_getLastCommitSegmentsFileName_1034289b] = env->getStaticMethodID(cls, "getLastCommitSegmentsFileName", "([Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getLastCommitSegmentsFileName_0451c495] = env->getStaticMethodID(cls, "getLastCommitSegmentsFileName", "(Lorg/apache/lucene/store/Directory;)Ljava/lang/String;");
            mids$[mid_getLastGeneration_54c6a17a] = env->getMethodID(cls, "getLastGeneration", "()J");
            mids$[mid_getNextSegmentFileName_14c7b5c5] = env->getMethodID(cls, "getNextSegmentFileName", "()Ljava/lang/String;");
            mids$[mid_getSegmentsFileName_14c7b5c5] = env->getMethodID(cls, "getSegmentsFileName", "()Ljava/lang/String;");
            mids$[mid_getUserData_db60befd] = env->getMethodID(cls, "getUserData", "()Ljava/util/Map;");
            mids$[mid_getVersion_54c6a17a] = env->getMethodID(cls, "getVersion", "()J");
            mids$[mid_info_924229db] = env->getMethodID(cls, "info", "(I)Lorg/apache/lucene/index/SegmentCommitInfo;");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_read_2e261ef2] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_read_54f2a16c] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;)V");
            mids$[mid_remove_6649cdf4] = env->getMethodID(cls, "remove", "(Lorg/apache/lucene/index/SegmentCommitInfo;)V");
            mids$[mid_setDefaultGenLookaheadCount_39c7bd3c] = env->getStaticMethodID(cls, "setDefaultGenLookaheadCount", "(I)V");
            mids$[mid_setInfoStream_1b7c898b] = env->getStaticMethodID(cls, "setInfoStream", "(Ljava/io/PrintStream;)V");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_toString_0451c495] = env->getMethodID(cls, "toString", "(Lorg/apache/lucene/store/Directory;)Ljava/lang/String;");
            mids$[mid_totalDocCount_54c6a179] = env->getMethodID(cls, "totalDocCount", "()I");
            mids$[mid_write3xInfo_1fab7fdc] = env->getStaticMethodID(cls, "write3xInfo", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Ljava/lang/String;");
            mids$[mid_writeSegmentsGen_3dc02513] = env->getStaticMethodID(cls, "writeSegmentsGen", "(Lorg/apache/lucene/store/Directory;J)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_counter] = env->getFieldID(cls, "counter", "I");
            fids$[fid_userData] = env->getFieldID(cls, "userData", "Ljava/util/Map;");
            fids$[fid_version] = env->getFieldID(cls, "version", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            FORMAT_SEGMENTS_GEN_CURRENT = env->getStaticIntField(cls, "FORMAT_SEGMENTS_GEN_CURRENT");
            VERSION_40 = env->getStaticIntField(cls, "VERSION_40");
            VERSION_46 = env->getStaticIntField(cls, "VERSION_46");
            VERSION_48 = env->getStaticIntField(cls, "VERSION_48");
            VERSION_49 = env->getStaticIntField(cls, "VERSION_49");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentInfos::SegmentInfos() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void SegmentInfos::add(const ::org::apache::lucene::index::SegmentCommitInfo & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_6649cdf4], a0.this$);
        }

        void SegmentInfos::addAll(const ::java::lang::Iterable & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addAll_d1cac205], a0.this$);
        }

        ::java::util::List SegmentInfos::asList() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_asList_87851566]));
        }

        void SegmentInfos::changed() const
        {
          env->callVoidMethod(this$, mids$[mid_changed_54c6a166]);
        }

        void SegmentInfos::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        SegmentInfos SegmentInfos::clone() const
        {
          return SegmentInfos(env->callObjectMethod(this$, mids$[mid_clone_e585ba04]));
        }

        ::java::util::Collection SegmentInfos::files(const ::org::apache::lucene::store::Directory & a0, jboolean a1) const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_files_b47d57a7], a0.this$, a1));
        }

        jlong SegmentInfos::generationFromSegmentsFileName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_generationFromSegmentsFileName_5fdc3f54], a0.this$);
        }

        jint SegmentInfos::getDefaultGenLookahedCount()
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getDefaultGenLookahedCount_54c6a179]);
        }

        jlong SegmentInfos::getGeneration() const
        {
          return env->callLongMethod(this$, mids$[mid_getGeneration_54c6a17a]);
        }

        ::java::io::PrintStream SegmentInfos::getInfoStream()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::io::PrintStream(env->callStaticObjectMethod(cls, mids$[mid_getInfoStream_00215d9e]));
        }

        jlong SegmentInfos::getLastCommitGeneration(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_getLastCommitGeneration_4dd45410], a0.this$);
        }

        jlong SegmentInfos::getLastCommitGeneration(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_getLastCommitGeneration_2e261eee], a0.this$);
        }

        ::java::lang::String SegmentInfos::getLastCommitSegmentsFileName(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLastCommitSegmentsFileName_1034289b], a0.this$));
        }

        ::java::lang::String SegmentInfos::getLastCommitSegmentsFileName(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLastCommitSegmentsFileName_0451c495], a0.this$));
        }

        jlong SegmentInfos::getLastGeneration() const
        {
          return env->callLongMethod(this$, mids$[mid_getLastGeneration_54c6a17a]);
        }

        ::java::lang::String SegmentInfos::getNextSegmentFileName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getNextSegmentFileName_14c7b5c5]));
        }

        ::java::lang::String SegmentInfos::getSegmentsFileName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSegmentsFileName_14c7b5c5]));
        }

        ::java::util::Map SegmentInfos::getUserData() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getUserData_db60befd]));
        }

        jlong SegmentInfos::getVersion() const
        {
          return env->callLongMethod(this$, mids$[mid_getVersion_54c6a17a]);
        }

        ::org::apache::lucene::index::SegmentCommitInfo SegmentInfos::info(jint a0) const
        {
          return ::org::apache::lucene::index::SegmentCommitInfo(env->callObjectMethod(this$, mids$[mid_info_924229db], a0));
        }

        ::java::util::Iterator SegmentInfos::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        void SegmentInfos::read(const ::org::apache::lucene::store::Directory & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_read_2e261ef2], a0.this$);
        }

        void SegmentInfos::read(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_read_54f2a16c], a0.this$, a1.this$);
        }

        void SegmentInfos::remove(const ::org::apache::lucene::index::SegmentCommitInfo & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_remove_6649cdf4], a0.this$);
        }

        void SegmentInfos::setDefaultGenLookaheadCount(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setDefaultGenLookaheadCount_39c7bd3c], a0);
        }

        void SegmentInfos::setInfoStream(const ::java::io::PrintStream & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setInfoStream_1b7c898b], a0.this$);
        }

        jint SegmentInfos::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        ::java::lang::String SegmentInfos::toString(const ::org::apache::lucene::store::Directory & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_0451c495], a0.this$));
        }

        jint SegmentInfos::totalDocCount() const
        {
          return env->callIntMethod(this$, mids$[mid_totalDocCount_54c6a179]);
        }

        ::java::lang::String SegmentInfos::write3xInfo(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_write3xInfo_1fab7fdc], a0.this$, a1.this$, a2.this$));
        }

        void SegmentInfos::writeSegmentsGen(const ::org::apache::lucene::store::Directory & a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_writeSegmentsGen_3dc02513], a0.this$, a1);
        }

        jint SegmentInfos::_get_counter() const
        {
          return env->getIntField(this$, fids$[fid_counter]);
        }

        void SegmentInfos::_set_counter(jint a0) const
        {
          env->setIntField(this$, fids$[fid_counter], a0);
        }

        ::java::util::Map SegmentInfos::_get_userData() const
        {
          return ::java::util::Map(env->getObjectField(this$, fids$[fid_userData]));
        }

        void SegmentInfos::_set_userData(const ::java::util::Map & a0) const
        {
          env->setObjectField(this$, fids$[fid_userData], a0.this$);
        }

        jlong SegmentInfos::_get_version() const
        {
          return env->getLongField(this$, fids$[fid_version]);
        }

        void SegmentInfos::_set_version(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_version], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/SegmentInfos$FindSegmentsFile.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentInfos_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfos_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentInfos_init_(t_SegmentInfos *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentInfos_add(t_SegmentInfos *self, PyObject *arg);
        static PyObject *t_SegmentInfos_addAll(t_SegmentInfos *self, PyObject *arg);
        static PyObject *t_SegmentInfos_asList(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_changed(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_clear(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_clone(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_files(t_SegmentInfos *self, PyObject *args);
        static PyObject *t_SegmentInfos_generationFromSegmentsFileName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfos_getDefaultGenLookahedCount(PyTypeObject *type);
        static PyObject *t_SegmentInfos_getGeneration(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_getInfoStream(PyTypeObject *type);
        static PyObject *t_SegmentInfos_getLastCommitGeneration(PyTypeObject *type, PyObject *args);
        static PyObject *t_SegmentInfos_getLastCommitSegmentsFileName(PyTypeObject *type, PyObject *args);
        static PyObject *t_SegmentInfos_getLastGeneration(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_getNextSegmentFileName(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_getSegmentsFileName(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_getUserData(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_getVersion(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_info(t_SegmentInfos *self, PyObject *arg);
        static PyObject *t_SegmentInfos_iterator(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_read(t_SegmentInfos *self, PyObject *args);
        static PyObject *t_SegmentInfos_remove(t_SegmentInfos *self, PyObject *arg);
        static PyObject *t_SegmentInfos_setDefaultGenLookaheadCount(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfos_setInfoStream(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfos_size(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_toString(t_SegmentInfos *self, PyObject *args);
        static PyObject *t_SegmentInfos_totalDocCount(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_write3xInfo(PyTypeObject *type, PyObject *args);
        static PyObject *t_SegmentInfos_writeSegmentsGen(PyTypeObject *type, PyObject *args);
        static PyObject *t_SegmentInfos_get__counter(t_SegmentInfos *self, void *data);
        static int t_SegmentInfos_set__counter(t_SegmentInfos *self, PyObject *arg, void *data);

        static int t_SegmentInfos_set__defaultGenLookaheadCount(t_SegmentInfos *self, PyObject *arg, void *data);
        static PyObject *t_SegmentInfos_get__defaultGenLookahedCount(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__generation(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__infoStream(t_SegmentInfos *self, void *data);
        static int t_SegmentInfos_set__infoStream(t_SegmentInfos *self, PyObject *arg, void *data);
        static PyObject *t_SegmentInfos_get__lastGeneration(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__nextSegmentFileName(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__segmentsFileName(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__userData(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__version(t_SegmentInfos *self, void *data);
        static PyGetSetDef t_SegmentInfos__fields_[] = {
          DECLARE_GETSET_FIELD(t_SegmentInfos, counter),
          DECLARE_SET_FIELD(t_SegmentInfos, defaultGenLookaheadCount),
          DECLARE_GET_FIELD(t_SegmentInfos, defaultGenLookahedCount),
          DECLARE_GET_FIELD(t_SegmentInfos, generation),
          DECLARE_GETSET_FIELD(t_SegmentInfos, infoStream),
          DECLARE_GET_FIELD(t_SegmentInfos, lastGeneration),
          DECLARE_GET_FIELD(t_SegmentInfos, nextSegmentFileName),
          DECLARE_GET_FIELD(t_SegmentInfos, segmentsFileName),
          DECLARE_GET_FIELD(t_SegmentInfos, userData),
          DECLARE_GET_FIELD(t_SegmentInfos, version),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentInfos__methods_[] = {
          DECLARE_METHOD(t_SegmentInfos, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, add, METH_O),
          DECLARE_METHOD(t_SegmentInfos, addAll, METH_O),
          DECLARE_METHOD(t_SegmentInfos, asList, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, changed, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, clear, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, clone, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, files, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfos, generationFromSegmentsFileName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, getDefaultGenLookahedCount, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, getGeneration, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, getInfoStream, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, getLastCommitGeneration, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, getLastCommitSegmentsFileName, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, getLastGeneration, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, getNextSegmentFileName, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, getSegmentsFileName, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, getUserData, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, getVersion, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, info, METH_O),
          DECLARE_METHOD(t_SegmentInfos, iterator, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, read, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfos, remove, METH_O),
          DECLARE_METHOD(t_SegmentInfos, setDefaultGenLookaheadCount, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, setInfoStream, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, size, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, toString, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfos, totalDocCount, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, write3xInfo, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, writeSegmentsGen, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentInfos, t_SegmentInfos, ::java::lang::Object, SegmentInfos, t_SegmentInfos_init_, ((PyObject *(*)(t_SegmentInfos *)) get_iterator< t_SegmentInfos >), 0, t_SegmentInfos__fields_, 0, 0);

        void t_SegmentInfos::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentInfos), module, "SegmentInfos", 0);
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "FindSegmentsFile", make_descriptor(&PY_TYPE(SegmentInfos$FindSegmentsFile)));
        }

        void t_SegmentInfos::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "class_", make_descriptor(SegmentInfos::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "wrapfn_", make_descriptor(t_SegmentInfos::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SegmentInfos::initializeClass);
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "FORMAT_SEGMENTS_GEN_CURRENT", make_descriptor(SegmentInfos::FORMAT_SEGMENTS_GEN_CURRENT));
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "VERSION_40", make_descriptor(SegmentInfos::VERSION_40));
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "VERSION_46", make_descriptor(SegmentInfos::VERSION_46));
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "VERSION_48", make_descriptor(SegmentInfos::VERSION_48));
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "VERSION_49", make_descriptor(SegmentInfos::VERSION_49));
        }

        static PyObject *t_SegmentInfos_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentInfos::initializeClass, 1)))
            return NULL;
          return t_SegmentInfos::wrap_Object(SegmentInfos(((t_SegmentInfos *) arg)->object.this$));
        }
        static PyObject *t_SegmentInfos_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentInfos::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentInfos_init_(t_SegmentInfos *self, PyObject *args, PyObject *kwds)
        {
          SegmentInfos object((jobject) NULL);

          INT_CALL(object = SegmentInfos());
          self->object = object;

          return 0;
        }

        static PyObject *t_SegmentInfos_add(t_SegmentInfos *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_addAll(t_SegmentInfos *self, PyObject *arg)
        {
          ::java::lang::Iterable a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(self->object.addAll(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addAll", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_asList(t_SegmentInfos *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.asList());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(SegmentCommitInfo));
        }

        static PyObject *t_SegmentInfos_changed(t_SegmentInfos *self)
        {
          OBJ_CALL(self->object.changed());
          Py_RETURN_NONE;
        }

        static PyObject *t_SegmentInfos_clear(t_SegmentInfos *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_SegmentInfos_clone(t_SegmentInfos *self)
        {
          SegmentInfos result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_SegmentInfos::wrap_Object(result);
        }

        static PyObject *t_SegmentInfos_files(t_SegmentInfos *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          jboolean a1;
          ::java::util::Collection result((jobject) NULL);

          if (!parseArgs(args, "kZ", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.files(a0, a1));
            return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          PyErr_SetArgsError((PyObject *) self, "files", args);
          return NULL;
        }

        static PyObject *t_SegmentInfos_generationFromSegmentsFileName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::generationFromSegmentsFileName(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "generationFromSegmentsFileName", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_getDefaultGenLookahedCount(PyTypeObject *type)
        {
          jint result;
          OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::getDefaultGenLookahedCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SegmentInfos_getGeneration(t_SegmentInfos *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentInfos_getInfoStream(PyTypeObject *type)
        {
          ::java::io::PrintStream result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::getInfoStream());
          return ::java::io::t_PrintStream::wrap_Object(result);
        }

        static PyObject *t_SegmentInfos_getLastCommitGeneration(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::String > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::getLastCommitGeneration(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::getLastCommitGeneration(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "getLastCommitGeneration", args);
          return NULL;
        }

        static PyObject *t_SegmentInfos_getLastCommitSegmentsFileName(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::String > a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "[s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::getLastCommitSegmentsFileName(a0));
                return j2p(result);
              }
            }
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::getLastCommitSegmentsFileName(a0));
                return j2p(result);
              }
            }
          }

          PyErr_SetArgsError(type, "getLastCommitSegmentsFileName", args);
          return NULL;
        }

        static PyObject *t_SegmentInfos_getLastGeneration(t_SegmentInfos *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getLastGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentInfos_getNextSegmentFileName(t_SegmentInfos *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getNextSegmentFileName());
          return j2p(result);
        }

        static PyObject *t_SegmentInfos_getSegmentsFileName(t_SegmentInfos *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getSegmentsFileName());
          return j2p(result);
        }

        static PyObject *t_SegmentInfos_getUserData(t_SegmentInfos *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getUserData());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentInfos_getVersion(t_SegmentInfos *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getVersion());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentInfos_info(t_SegmentInfos *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::index::SegmentCommitInfo result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.info(a0));
            return ::org::apache::lucene::index::t_SegmentCommitInfo::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "info", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_iterator(t_SegmentInfos *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(SegmentCommitInfo));
        }

        static PyObject *t_SegmentInfos_read(t_SegmentInfos *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.read(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);

              if (!parseArgs(args, "ks", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.read(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "read", args);
          return NULL;
        }

        static PyObject *t_SegmentInfos_remove(t_SegmentInfos *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &a0))
          {
            OBJ_CALL(self->object.remove(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "remove", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_setDefaultGenLookaheadCount(PyTypeObject *type, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::SegmentInfos::setDefaultGenLookaheadCount(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setDefaultGenLookaheadCount", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_setInfoStream(PyTypeObject *type, PyObject *arg)
        {
          ::java::io::PrintStream a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::SegmentInfos::setInfoStream(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setInfoStream", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_size(t_SegmentInfos *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SegmentInfos_toString(t_SegmentInfos *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(SegmentInfos), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SegmentInfos_totalDocCount(t_SegmentInfos *self)
        {
          jint result;
          OBJ_CALL(result = self->object.totalDocCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SegmentInfos_write3xInfo(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::write3xInfo(a0, a1, a2));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "write3xInfo", args);
          return NULL;
        }

        static PyObject *t_SegmentInfos_writeSegmentsGen(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "kJ", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::org::apache::lucene::index::SegmentInfos::writeSegmentsGen(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "writeSegmentsGen", args);
          return NULL;
        }

        static PyObject *t_SegmentInfos_get__counter(t_SegmentInfos *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_counter());
          return PyInt_FromLong((long) value);
        }
        static int t_SegmentInfos_set__counter(t_SegmentInfos *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_counter(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "counter", arg);
          return -1;
        }

        static int t_SegmentInfos_set__defaultGenLookaheadCount(t_SegmentInfos *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setDefaultGenLookaheadCount(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "defaultGenLookaheadCount", arg);
          return -1;
        }

        static PyObject *t_SegmentInfos_get__defaultGenLookahedCount(t_SegmentInfos *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDefaultGenLookahedCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_SegmentInfos_get__generation(t_SegmentInfos *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentInfos_get__infoStream(t_SegmentInfos *self, void *data)
        {
          ::java::io::PrintStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getInfoStream());
          return ::java::io::t_PrintStream::wrap_Object(value);
        }
        static int t_SegmentInfos_set__infoStream(t_SegmentInfos *self, PyObject *arg, void *data)
        {
          {
            ::java::io::PrintStream value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
            {
              INT_CALL(self->object.setInfoStream(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "infoStream", arg);
          return -1;
        }

        static PyObject *t_SegmentInfos_get__lastGeneration(t_SegmentInfos *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getLastGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentInfos_get__nextSegmentFileName(t_SegmentInfos *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getNextSegmentFileName());
          return j2p(value);
        }

        static PyObject *t_SegmentInfos_get__segmentsFileName(t_SegmentInfos *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getSegmentsFileName());
          return j2p(value);
        }

        static PyObject *t_SegmentInfos_get__userData(t_SegmentInfos *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getUserData());
          return ::java::util::t_Map::wrap_Object(value);
        }

        static PyObject *t_SegmentInfos_get__version(t_SegmentInfos *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getVersion());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/LowerCaseTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/core/LowerCaseTokenizer.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *LowerCaseTokenizerFactory::class$ = NULL;
          jmethodID *LowerCaseTokenizerFactory::mids$ = NULL;
          bool LowerCaseTokenizerFactory::live$ = false;

          jclass LowerCaseTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/LowerCaseTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_3b72128c] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/core/LowerCaseTokenizer;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LowerCaseTokenizerFactory::LowerCaseTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::core::LowerCaseTokenizer LowerCaseTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::core::LowerCaseTokenizer(env->callObjectMethod(this$, mids$[mid_create_3b72128c], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory LowerCaseTokenizerFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_LowerCaseTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LowerCaseTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LowerCaseTokenizerFactory_init_(t_LowerCaseTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LowerCaseTokenizerFactory_create(t_LowerCaseTokenizerFactory *self, PyObject *args);
          static PyObject *t_LowerCaseTokenizerFactory_getMultiTermComponent(t_LowerCaseTokenizerFactory *self);
          static PyObject *t_LowerCaseTokenizerFactory_get__multiTermComponent(t_LowerCaseTokenizerFactory *self, void *data);
          static PyGetSetDef t_LowerCaseTokenizerFactory__fields_[] = {
            DECLARE_GET_FIELD(t_LowerCaseTokenizerFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LowerCaseTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_LowerCaseTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseTokenizerFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_LowerCaseTokenizerFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LowerCaseTokenizerFactory, t_LowerCaseTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, LowerCaseTokenizerFactory, t_LowerCaseTokenizerFactory_init_, 0, 0, t_LowerCaseTokenizerFactory__fields_, 0, 0);

          void t_LowerCaseTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LowerCaseTokenizerFactory), module, "LowerCaseTokenizerFactory", 0);
          }

          void t_LowerCaseTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LowerCaseTokenizerFactory).tp_dict, "class_", make_descriptor(LowerCaseTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LowerCaseTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_LowerCaseTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LowerCaseTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LowerCaseTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LowerCaseTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_LowerCaseTokenizerFactory::wrap_Object(LowerCaseTokenizerFactory(((t_LowerCaseTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_LowerCaseTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LowerCaseTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LowerCaseTokenizerFactory_init_(t_LowerCaseTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LowerCaseTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LowerCaseTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LowerCaseTokenizerFactory_create(t_LowerCaseTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::core::LowerCaseTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::core::t_LowerCaseTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LowerCaseTokenizerFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_LowerCaseTokenizerFactory_getMultiTermComponent(t_LowerCaseTokenizerFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_LowerCaseTokenizerFactory_get__multiTermComponent(t_LowerCaseTokenizerFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/automaton/Transition.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/util/automaton/ByteRunAutomaton.h"
#include "java/lang/String.h"
#include "java/lang/Boolean.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *CompiledAutomaton::class$ = NULL;
          jmethodID *CompiledAutomaton::mids$ = NULL;
          jfieldID *CompiledAutomaton::fids$ = NULL;
          bool CompiledAutomaton::live$ = false;

          jclass CompiledAutomaton::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/CompiledAutomaton");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fc7cf394] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_init$_3d57924d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;Ljava/lang/Boolean;Z)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_floor_0991fadd] = env->getMethodID(cls, "floor", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getTermsEnum_fb3ac14e] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toDot_14c7b5c5] = env->getMethodID(cls, "toDot", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_commonSuffixRef] = env->getFieldID(cls, "commonSuffixRef", "Lorg/apache/lucene/util/BytesRef;");
              fids$[fid_finite] = env->getFieldID(cls, "finite", "Ljava/lang/Boolean;");
              fids$[fid_runAutomaton] = env->getFieldID(cls, "runAutomaton", "Lorg/apache/lucene/util/automaton/ByteRunAutomaton;");
              fids$[fid_sortedTransitions] = env->getFieldID(cls, "sortedTransitions", "[[Lorg/apache/lucene/util/automaton/Transition;");
              fids$[fid_term] = env->getFieldID(cls, "term", "Lorg/apache/lucene/util/BytesRef;");
              fids$[fid_type] = env->getFieldID(cls, "type", "Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompiledAutomaton::CompiledAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_fc7cf394, a0.this$)) {}

          CompiledAutomaton::CompiledAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::java::lang::Boolean & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3d57924d, a0.this$, a1.this$, a2)) {}

          jboolean CompiledAutomaton::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef CompiledAutomaton::floor(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_floor_0991fadd], a0.this$, a1.this$));
          }

          ::org::apache::lucene::index::TermsEnum CompiledAutomaton::getTermsEnum(const ::org::apache::lucene::index::Terms & a0) const
          {
            return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_getTermsEnum_fb3ac14e], a0.this$));
          }

          jint CompiledAutomaton::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String CompiledAutomaton::toDot() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toDot_14c7b5c5]));
          }

          ::org::apache::lucene::util::BytesRef CompiledAutomaton::_get_commonSuffixRef() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_commonSuffixRef]));
          }

          ::java::lang::Boolean CompiledAutomaton::_get_finite() const
          {
            return ::java::lang::Boolean(env->getObjectField(this$, fids$[fid_finite]));
          }

          ::org::apache::lucene::util::automaton::ByteRunAutomaton CompiledAutomaton::_get_runAutomaton() const
          {
            return ::org::apache::lucene::util::automaton::ByteRunAutomaton(env->getObjectField(this$, fids$[fid_runAutomaton]));
          }

          JArray< JArray< ::org::apache::lucene::util::automaton::Transition > > CompiledAutomaton::_get_sortedTransitions() const
          {
            return JArray< JArray< ::org::apache::lucene::util::automaton::Transition > >(env->getObjectField(this$, fids$[fid_sortedTransitions]));
          }

          ::org::apache::lucene::util::BytesRef CompiledAutomaton::_get_term() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_term]));
          }

          ::org::apache::lucene::util::automaton::CompiledAutomaton$AUTOMATON_TYPE CompiledAutomaton::_get_type() const
          {
            return ::org::apache::lucene::util::automaton::CompiledAutomaton$AUTOMATON_TYPE(env->getObjectField(this$, fids$[fid_type]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_CompiledAutomaton_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompiledAutomaton_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompiledAutomaton_init_(t_CompiledAutomaton *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompiledAutomaton_equals(t_CompiledAutomaton *self, PyObject *args);
          static PyObject *t_CompiledAutomaton_floor(t_CompiledAutomaton *self, PyObject *args);
          static PyObject *t_CompiledAutomaton_getTermsEnum(t_CompiledAutomaton *self, PyObject *arg);
          static PyObject *t_CompiledAutomaton_hashCode(t_CompiledAutomaton *self, PyObject *args);
          static PyObject *t_CompiledAutomaton_toDot(t_CompiledAutomaton *self);
          static PyObject *t_CompiledAutomaton_get__commonSuffixRef(t_CompiledAutomaton *self, void *data);
          static PyObject *t_CompiledAutomaton_get__finite(t_CompiledAutomaton *self, void *data);
          static PyObject *t_CompiledAutomaton_get__runAutomaton(t_CompiledAutomaton *self, void *data);
          static PyObject *t_CompiledAutomaton_get__sortedTransitions(t_CompiledAutomaton *self, void *data);
          static PyObject *t_CompiledAutomaton_get__term(t_CompiledAutomaton *self, void *data);
          static PyObject *t_CompiledAutomaton_get__type(t_CompiledAutomaton *self, void *data);

          static PyGetSetDef t_CompiledAutomaton__fields_[] = {
            DECLARE_GET_FIELD(t_CompiledAutomaton, commonSuffixRef),
            DECLARE_GET_FIELD(t_CompiledAutomaton, finite),
            DECLARE_GET_FIELD(t_CompiledAutomaton, runAutomaton),
            DECLARE_GET_FIELD(t_CompiledAutomaton, sortedTransitions),
            DECLARE_GET_FIELD(t_CompiledAutomaton, term),
            DECLARE_GET_FIELD(t_CompiledAutomaton, type),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CompiledAutomaton__methods_[] = {
            DECLARE_METHOD(t_CompiledAutomaton, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompiledAutomaton, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompiledAutomaton, equals, METH_VARARGS),
            DECLARE_METHOD(t_CompiledAutomaton, floor, METH_VARARGS),
            DECLARE_METHOD(t_CompiledAutomaton, getTermsEnum, METH_O),
            DECLARE_METHOD(t_CompiledAutomaton, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_CompiledAutomaton, toDot, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompiledAutomaton, t_CompiledAutomaton, ::java::lang::Object, CompiledAutomaton, t_CompiledAutomaton_init_, 0, 0, t_CompiledAutomaton__fields_, 0, 0);

          void t_CompiledAutomaton::install(PyObject *module)
          {
            installType(&PY_TYPE(CompiledAutomaton), module, "CompiledAutomaton", 0);
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton).tp_dict, "AUTOMATON_TYPE", make_descriptor(&PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE)));
          }

          void t_CompiledAutomaton::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton).tp_dict, "class_", make_descriptor(CompiledAutomaton::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton).tp_dict, "wrapfn_", make_descriptor(t_CompiledAutomaton::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompiledAutomaton_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompiledAutomaton::initializeClass, 1)))
              return NULL;
            return t_CompiledAutomaton::wrap_Object(CompiledAutomaton(((t_CompiledAutomaton *) arg)->object.this$));
          }
          static PyObject *t_CompiledAutomaton_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompiledAutomaton::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompiledAutomaton_init_(t_CompiledAutomaton *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                CompiledAutomaton object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
                {
                  INT_CALL(object = CompiledAutomaton(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ::java::lang::Boolean a1((jobject) NULL);
                jboolean a2;
                CompiledAutomaton object((jobject) NULL);

                if (!parseArgs(args, "kOZ", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &::java::lang::PY_TYPE(Boolean), &a0, &a1, &a2))
                {
                  INT_CALL(object = CompiledAutomaton(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompiledAutomaton_equals(t_CompiledAutomaton *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CompiledAutomaton), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_CompiledAutomaton_floor(t_CompiledAutomaton *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.floor(a0, a1));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "floor", args);
            return NULL;
          }

          static PyObject *t_CompiledAutomaton_getTermsEnum(t_CompiledAutomaton *self, PyObject *arg)
          {
            ::org::apache::lucene::index::Terms a0((jobject) NULL);
            ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getTermsEnum(a0));
              return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getTermsEnum", arg);
            return NULL;
          }

          static PyObject *t_CompiledAutomaton_hashCode(t_CompiledAutomaton *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CompiledAutomaton), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_CompiledAutomaton_toDot(t_CompiledAutomaton *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.toDot());
            return j2p(result);
          }

          static PyObject *t_CompiledAutomaton_get__commonSuffixRef(t_CompiledAutomaton *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_commonSuffixRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_CompiledAutomaton_get__finite(t_CompiledAutomaton *self, void *data)
          {
            ::java::lang::Boolean value((jobject) NULL);
            OBJ_CALL(value = self->object._get_finite());
            return ::java::lang::t_Boolean::wrap_Object(value);
          }

          static PyObject *t_CompiledAutomaton_get__runAutomaton(t_CompiledAutomaton *self, void *data)
          {
            ::org::apache::lucene::util::automaton::ByteRunAutomaton value((jobject) NULL);
            OBJ_CALL(value = self->object._get_runAutomaton());
            return ::org::apache::lucene::util::automaton::t_ByteRunAutomaton::wrap_Object(value);
          }

          static PyObject *t_CompiledAutomaton_get__sortedTransitions(t_CompiledAutomaton *self, void *data)
          {
            JArray< JArray< ::org::apache::lucene::util::automaton::Transition > > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_sortedTransitions());
            return JArray<jobject>(value.this$).wrap(NULL);
          }

          static PyObject *t_CompiledAutomaton_get__term(t_CompiledAutomaton *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_term());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_CompiledAutomaton_get__type(t_CompiledAutomaton *self, void *data)
          {
            ::org::apache::lucene::util::automaton::CompiledAutomaton$AUTOMATON_TYPE value((jobject) NULL);
            OBJ_CALL(value = self->object._get_type());
            return ::org::apache::lucene::util::automaton::t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$multiplicative_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$multiplicative_return::class$ = NULL;
          jmethodID *JavascriptParser$multiplicative_return::mids$ = NULL;
          bool JavascriptParser$multiplicative_return::live$ = false;

          jclass JavascriptParser$multiplicative_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$multiplicative_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$multiplicative_return::JavascriptParser$multiplicative_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$multiplicative_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$multiplicative_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$multiplicative_return_init_(t_JavascriptParser$multiplicative_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$multiplicative_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$multiplicative_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$multiplicative_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$multiplicative_return, t_JavascriptParser$multiplicative_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$multiplicative_return, t_JavascriptParser$multiplicative_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$multiplicative_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$multiplicative_return), module, "JavascriptParser$multiplicative_return", 0);
          }

          void t_JavascriptParser$multiplicative_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$multiplicative_return).tp_dict, "class_", make_descriptor(JavascriptParser$multiplicative_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$multiplicative_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$multiplicative_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$multiplicative_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$multiplicative_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$multiplicative_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$multiplicative_return::wrap_Object(JavascriptParser$multiplicative_return(((t_JavascriptParser$multiplicative_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$multiplicative_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$multiplicative_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$multiplicative_return_init_(t_JavascriptParser$multiplicative_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$multiplicative_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$multiplicative_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/CachingCollector.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *CachingCollector::class$ = NULL;
        jmethodID *CachingCollector::mids$ = NULL;
        bool CachingCollector::live$ = false;

        jclass CachingCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/CachingCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_create_e449836e] = env->getStaticMethodID(cls, "create", "(ZZD)Lorg/apache/lucene/search/CachingCollector;");
            mids$[mid_create_69c8fe09] = env->getStaticMethodID(cls, "create", "(Lorg/apache/lucene/search/Collector;ZD)Lorg/apache/lucene/search/CachingCollector;");
            mids$[mid_create_e9d072d8] = env->getStaticMethodID(cls, "create", "(Lorg/apache/lucene/search/Collector;ZI)Lorg/apache/lucene/search/CachingCollector;");
            mids$[mid_isCached_54c6a16a] = env->getMethodID(cls, "isCached", "()Z");
            mids$[mid_replay_77379ce0] = env->getMethodID(cls, "replay", "(Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean CachingCollector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        CachingCollector CachingCollector::create(jboolean a0, jboolean a1, jdouble a2)
        {
          jclass cls = env->getClass(initializeClass);
          return CachingCollector(env->callStaticObjectMethod(cls, mids$[mid_create_e449836e], a0, a1, a2));
        }

        CachingCollector CachingCollector::create(const ::org::apache::lucene::search::Collector & a0, jboolean a1, jdouble a2)
        {
          jclass cls = env->getClass(initializeClass);
          return CachingCollector(env->callStaticObjectMethod(cls, mids$[mid_create_69c8fe09], a0.this$, a1, a2));
        }

        CachingCollector CachingCollector::create(const ::org::apache::lucene::search::Collector & a0, jboolean a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return CachingCollector(env->callStaticObjectMethod(cls, mids$[mid_create_e9d072d8], a0.this$, a1, a2));
        }

        jboolean CachingCollector::isCached() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCached_54c6a16a]);
        }

        void CachingCollector::replay(const ::org::apache::lucene::search::Collector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_replay_77379ce0], a0.this$);
        }

        void CachingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_CachingCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CachingCollector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CachingCollector_acceptsDocsOutOfOrder(t_CachingCollector *self, PyObject *args);
        static PyObject *t_CachingCollector_create(PyTypeObject *type, PyObject *args);
        static PyObject *t_CachingCollector_isCached(t_CachingCollector *self);
        static PyObject *t_CachingCollector_replay(t_CachingCollector *self, PyObject *arg);
        static PyObject *t_CachingCollector_setNextReader(t_CachingCollector *self, PyObject *args);
        static PyObject *t_CachingCollector_get__cached(t_CachingCollector *self, void *data);
        static int t_CachingCollector_set__nextReader(t_CachingCollector *self, PyObject *arg, void *data);
        static PyGetSetDef t_CachingCollector__fields_[] = {
          DECLARE_GET_FIELD(t_CachingCollector, cached),
          DECLARE_SET_FIELD(t_CachingCollector, nextReader),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CachingCollector__methods_[] = {
          DECLARE_METHOD(t_CachingCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CachingCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CachingCollector, acceptsDocsOutOfOrder, METH_VARARGS),
          DECLARE_METHOD(t_CachingCollector, create, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CachingCollector, isCached, METH_NOARGS),
          DECLARE_METHOD(t_CachingCollector, replay, METH_O),
          DECLARE_METHOD(t_CachingCollector, setNextReader, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CachingCollector, t_CachingCollector, ::org::apache::lucene::search::Collector, CachingCollector, abstract_init, 0, 0, t_CachingCollector__fields_, 0, 0);

        void t_CachingCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(CachingCollector), module, "CachingCollector", 0);
        }

        void t_CachingCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CachingCollector).tp_dict, "class_", make_descriptor(CachingCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CachingCollector).tp_dict, "wrapfn_", make_descriptor(t_CachingCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CachingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CachingCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CachingCollector::initializeClass, 1)))
            return NULL;
          return t_CachingCollector::wrap_Object(CachingCollector(((t_CachingCollector *) arg)->object.this$));
        }
        static PyObject *t_CachingCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CachingCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CachingCollector_acceptsDocsOutOfOrder(t_CachingCollector *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CachingCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
        }

        static PyObject *t_CachingCollector_create(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              jboolean a0;
              jboolean a1;
              jdouble a2;
              CachingCollector result((jobject) NULL);

              if (!parseArgs(args, "ZZD", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::CachingCollector::create(a0, a1, a2));
                return t_CachingCollector::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::search::Collector a0((jobject) NULL);
              jboolean a1;
              jdouble a2;
              CachingCollector result((jobject) NULL);

              if (!parseArgs(args, "kZD", ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::CachingCollector::create(a0, a1, a2));
                return t_CachingCollector::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::search::Collector a0((jobject) NULL);
              jboolean a1;
              jint a2;
              CachingCollector result((jobject) NULL);

              if (!parseArgs(args, "kZI", ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::CachingCollector::create(a0, a1, a2));
                return t_CachingCollector::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "create", args);
          return NULL;
        }

        static PyObject *t_CachingCollector_isCached(t_CachingCollector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isCached());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_CachingCollector_replay(t_CachingCollector *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Collector a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Collector::initializeClass, &a0))
          {
            OBJ_CALL(self->object.replay(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "replay", arg);
          return NULL;
        }

        static PyObject *t_CachingCollector_setNextReader(t_CachingCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CachingCollector), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_CachingCollector_get__cached(t_CachingCollector *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCached());
          Py_RETURN_BOOL(value);
        }

        static int t_CachingCollector_set__nextReader(t_CachingCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MultiFunction.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MultiFunction::class$ = NULL;
            jmethodID *MultiFunction::mids$ = NULL;
            bool MultiFunction::live$ = false;

            jclass MultiFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MultiFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_description_4a33a010] = env->getStaticMethodID(cls, "description", "(Ljava/lang/String;Ljava/util/List;)Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_toString_6f3fdb48] = env->getStaticMethodID(cls, "toString", "(Ljava/lang/String;[Lorg/apache/lucene/queries/function/FunctionValues;I)Ljava/lang/String;");
                mids$[mid_valsArr_4dc40b54] = env->getStaticMethodID(cls, "valsArr", "(Ljava/util/List;Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)[Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MultiFunction::MultiFunction(const ::java::util::List & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

            void MultiFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String MultiFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            ::java::lang::String MultiFunction::description(const ::java::lang::String & a0, const ::java::util::List & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_description_4a33a010], a0.this$, a1.this$));
            }

            jboolean MultiFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jint MultiFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String MultiFunction::toString(const ::java::lang::String & a0, const JArray< ::org::apache::lucene::queries::function::FunctionValues > & a1, jint a2)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_6f3fdb48], a0.this$, a1.this$, a2));
            }

            JArray< ::org::apache::lucene::queries::function::FunctionValues > MultiFunction::valsArr(const ::java::util::List & a0, const ::java::util::Map & a1, const ::org::apache::lucene::index::AtomicReaderContext & a2)
            {
              jclass cls = env->getClass(initializeClass);
              return JArray< ::org::apache::lucene::queries::function::FunctionValues >(env->callStaticObjectMethod(cls, mids$[mid_valsArr_4dc40b54], a0.this$, a1.this$, a2.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MultiFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MultiFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MultiFunction_init_(t_MultiFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MultiFunction_createWeight(t_MultiFunction *self, PyObject *args);
            static PyObject *t_MultiFunction_description(t_MultiFunction *self, PyObject *args);
            static PyObject *t_MultiFunction_description_(PyTypeObject *type, PyObject *args);
            static PyObject *t_MultiFunction_equals(t_MultiFunction *self, PyObject *args);
            static PyObject *t_MultiFunction_hashCode(t_MultiFunction *self, PyObject *args);
            static PyObject *t_MultiFunction_toString(PyTypeObject *type, PyObject *args);
            static PyObject *t_MultiFunction_valsArr(PyTypeObject *type, PyObject *args);

            static PyMethodDef t_MultiFunction__methods_[] = {
              DECLARE_METHOD(t_MultiFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_MultiFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_MultiFunction, description_, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_MultiFunction, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_MultiFunction, toString, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction, valsArr, METH_VARARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MultiFunction, t_MultiFunction, ::org::apache::lucene::queries::function::ValueSource, MultiFunction, t_MultiFunction_init_, 0, 0, 0, 0, 0);

            void t_MultiFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(MultiFunction), module, "MultiFunction", 0);
            }

            void t_MultiFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MultiFunction).tp_dict, "class_", make_descriptor(MultiFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MultiFunction).tp_dict, "wrapfn_", make_descriptor(t_MultiFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MultiFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MultiFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MultiFunction::initializeClass, 1)))
                return NULL;
              return t_MultiFunction::wrap_Object(MultiFunction(((t_MultiFunction *) arg)->object.this$));
            }
            static PyObject *t_MultiFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MultiFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MultiFunction_init_(t_MultiFunction *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              MultiFunction object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                INT_CALL(object = MultiFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_MultiFunction_createWeight(t_MultiFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(MultiFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_MultiFunction_description(t_MultiFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(MultiFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_MultiFunction_description_(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::List a1((jobject) NULL);
              PyTypeObject **p1;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "sK", ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::queries::function::valuesource::MultiFunction::description(a0, a1));
                return j2p(result);
              }

              PyErr_SetArgsError(type, "description_", args);
              return NULL;
            }

            static PyObject *t_MultiFunction_equals(t_MultiFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(MultiFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_MultiFunction_hashCode(t_MultiFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(MultiFunction), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_MultiFunction_toString(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::org::apache::lucene::queries::function::FunctionValues > a1((jobject) NULL);
              jint a2;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "s[kI", ::org::apache::lucene::queries::function::FunctionValues::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::queries::function::valuesource::MultiFunction::toString(a0, a1, a2));
                return j2p(result);
              }

              return callSuper(type, "toString", args, 2);
            }

            static PyObject *t_MultiFunction_valsArr(PyTypeObject *type, PyObject *args)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::util::Map a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::index::AtomicReaderContext a2((jobject) NULL);
              JArray< ::org::apache::lucene::queries::function::FunctionValues > result((jobject) NULL);

              if (!parseArgs(args, "KKk", ::java::util::List::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_Map::parameters_, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::queries::function::valuesource::MultiFunction::valsArr(a0, a1, a2));
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::queries::function::t_FunctionValues::wrap_jobject);
              }

              PyErr_SetArgsError(type, "valsArr", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/MultiFieldQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *MultiFieldQueryNodeProcessor::class$ = NULL;
              jmethodID *MultiFieldQueryNodeProcessor::mids$ = NULL;
              bool MultiFieldQueryNodeProcessor::live$ = false;

              jclass MultiFieldQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/MultiFieldQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_processChildren_cc04aeef] = env->getMethodID(cls, "processChildren", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MultiFieldQueryNodeProcessor::MultiFieldQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_MultiFieldQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MultiFieldQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MultiFieldQueryNodeProcessor_init_(t_MultiFieldQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_MultiFieldQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_MultiFieldQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiFieldQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MultiFieldQueryNodeProcessor, t_MultiFieldQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, MultiFieldQueryNodeProcessor, t_MultiFieldQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_MultiFieldQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(MultiFieldQueryNodeProcessor), module, "MultiFieldQueryNodeProcessor", 0);
              }

              void t_MultiFieldQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MultiFieldQueryNodeProcessor).tp_dict, "class_", make_descriptor(MultiFieldQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MultiFieldQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_MultiFieldQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MultiFieldQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MultiFieldQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MultiFieldQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_MultiFieldQueryNodeProcessor::wrap_Object(MultiFieldQueryNodeProcessor(((t_MultiFieldQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_MultiFieldQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MultiFieldQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MultiFieldQueryNodeProcessor_init_(t_MultiFieldQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                MultiFieldQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = MultiFieldQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector$GroupHead.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {

            ::java::lang::Class *FunctionAllGroupHeadsCollector::class$ = NULL;
            jmethodID *FunctionAllGroupHeadsCollector::mids$ = NULL;
            bool FunctionAllGroupHeadsCollector::live$ = false;

            jclass FunctionAllGroupHeadsCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_0f36bb74] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Ljava/util/Map;Lorg/apache/lucene/search/Sort;)V");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
                mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
                mids$[mid_retrieveGroupHeadAndAddIfNotExist_39c7bd3c] = env->getMethodID(cls, "retrieveGroupHeadAndAddIfNotExist", "(I)V");
                mids$[mid_getCollectedGroupHeads_2d2d7de4] = env->getMethodID(cls, "getCollectedGroupHeads", "()Ljava/util/Collection;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FunctionAllGroupHeadsCollector::FunctionAllGroupHeadsCollector(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::java::util::Map & a1, const ::org::apache::lucene::search::Sort & a2) : ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector(env->newObject(initializeClass, &mids$, mid_init$_0f36bb74, a0.this$, a1.this$, a2.this$)) {}

            void FunctionAllGroupHeadsCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }

            void FunctionAllGroupHeadsCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {
            static PyObject *t_FunctionAllGroupHeadsCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionAllGroupHeadsCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionAllGroupHeadsCollector_of_(t_FunctionAllGroupHeadsCollector *self, PyObject *args);
            static int t_FunctionAllGroupHeadsCollector_init_(t_FunctionAllGroupHeadsCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FunctionAllGroupHeadsCollector_setNextReader(t_FunctionAllGroupHeadsCollector *self, PyObject *args);
            static PyObject *t_FunctionAllGroupHeadsCollector_setScorer(t_FunctionAllGroupHeadsCollector *self, PyObject *args);
            static int t_FunctionAllGroupHeadsCollector_set__nextReader(t_FunctionAllGroupHeadsCollector *self, PyObject *arg, void *data);
            static int t_FunctionAllGroupHeadsCollector_set__scorer(t_FunctionAllGroupHeadsCollector *self, PyObject *arg, void *data);
            static PyObject *t_FunctionAllGroupHeadsCollector_get__parameters_(t_FunctionAllGroupHeadsCollector *self, void *data);
            static PyGetSetDef t_FunctionAllGroupHeadsCollector__fields_[] = {
              DECLARE_SET_FIELD(t_FunctionAllGroupHeadsCollector, nextReader),
              DECLARE_SET_FIELD(t_FunctionAllGroupHeadsCollector, scorer),
              DECLARE_GET_FIELD(t_FunctionAllGroupHeadsCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FunctionAllGroupHeadsCollector__methods_[] = {
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector, setNextReader, METH_VARARGS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector, setScorer, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FunctionAllGroupHeadsCollector, t_FunctionAllGroupHeadsCollector, ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector, FunctionAllGroupHeadsCollector, t_FunctionAllGroupHeadsCollector_init_, 0, 0, t_FunctionAllGroupHeadsCollector__fields_, 0, 0);
            PyObject *t_FunctionAllGroupHeadsCollector::wrap_Object(const FunctionAllGroupHeadsCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionAllGroupHeadsCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionAllGroupHeadsCollector *self = (t_FunctionAllGroupHeadsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FunctionAllGroupHeadsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionAllGroupHeadsCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionAllGroupHeadsCollector *self = (t_FunctionAllGroupHeadsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FunctionAllGroupHeadsCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(FunctionAllGroupHeadsCollector), module, "FunctionAllGroupHeadsCollector", 0);
            }

            void t_FunctionAllGroupHeadsCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupHeadsCollector).tp_dict, "class_", make_descriptor(FunctionAllGroupHeadsCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupHeadsCollector).tp_dict, "wrapfn_", make_descriptor(t_FunctionAllGroupHeadsCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupHeadsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FunctionAllGroupHeadsCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FunctionAllGroupHeadsCollector::initializeClass, 1)))
                return NULL;
              return t_FunctionAllGroupHeadsCollector::wrap_Object(FunctionAllGroupHeadsCollector(((t_FunctionAllGroupHeadsCollector *) arg)->object.this$));
            }
            static PyObject *t_FunctionAllGroupHeadsCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FunctionAllGroupHeadsCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FunctionAllGroupHeadsCollector_of_(t_FunctionAllGroupHeadsCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_FunctionAllGroupHeadsCollector_init_(t_FunctionAllGroupHeadsCollector *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::java::util::Map a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::search::Sort a2((jobject) NULL);
              FunctionAllGroupHeadsCollector object((jobject) NULL);

              if (!parseArgs(args, "kKk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_, &a2))
              {
                INT_CALL(object = FunctionAllGroupHeadsCollector(a0, a1, a2));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::search::grouping::function::PY_TYPE(FunctionAllGroupHeadsCollector$GroupHead);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FunctionAllGroupHeadsCollector_setNextReader(t_FunctionAllGroupHeadsCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionAllGroupHeadsCollector), (PyObject *) self, "setNextReader", args, 2);
            }

            static PyObject *t_FunctionAllGroupHeadsCollector_setScorer(t_FunctionAllGroupHeadsCollector *self, PyObject *args)
            {
              ::org::apache::lucene::search::Scorer a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setScorer(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionAllGroupHeadsCollector), (PyObject *) self, "setScorer", args, 2);
            }
            static PyObject *t_FunctionAllGroupHeadsCollector_get__parameters_(t_FunctionAllGroupHeadsCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static int t_FunctionAllGroupHeadsCollector_set__nextReader(t_FunctionAllGroupHeadsCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }

            static int t_FunctionAllGroupHeadsCollector_set__scorer(t_FunctionAllGroupHeadsCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::search::Scorer value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
                {
                  INT_CALL(self->object.setScorer(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "scorer", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$relational_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$relational_return::class$ = NULL;
          jmethodID *JavascriptParser$relational_return::mids$ = NULL;
          bool JavascriptParser$relational_return::live$ = false;

          jclass JavascriptParser$relational_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$relational_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$relational_return::JavascriptParser$relational_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$relational_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$relational_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$relational_return_init_(t_JavascriptParser$relational_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$relational_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$relational_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$relational_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$relational_return, t_JavascriptParser$relational_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$relational_return, t_JavascriptParser$relational_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$relational_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$relational_return), module, "JavascriptParser$relational_return", 0);
          }

          void t_JavascriptParser$relational_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$relational_return).tp_dict, "class_", make_descriptor(JavascriptParser$relational_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$relational_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$relational_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$relational_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$relational_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$relational_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$relational_return::wrap_Object(JavascriptParser$relational_return(((t_JavascriptParser$relational_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$relational_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$relational_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$relational_return_init_(t_JavascriptParser$relational_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$relational_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$relational_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanTermQuery.h"
#include "org/apache/lucene/index/TermContext.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanTermQuery::class$ = NULL;
          jmethodID *SpanTermQuery::mids$ = NULL;
          bool SpanTermQuery::live$ = false;

          jclass SpanTermQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanTermQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_getTerm_0f71f314] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanTermQuery::SpanTermQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

          jboolean SpanTermQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void SpanTermQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          ::java::lang::String SpanTermQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::search::spans::Spans SpanTermQuery::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::index::Term SpanTermQuery::getTerm() const
          {
            return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_0f71f314]));
          }

          jint SpanTermQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String SpanTermQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanTermQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanTermQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanTermQuery_init_(t_SpanTermQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanTermQuery_equals(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_extractTerms(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_getField(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_getSpans(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_getTerm(t_SpanTermQuery *self);
          static PyObject *t_SpanTermQuery_hashCode(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_toString(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_get__field(t_SpanTermQuery *self, void *data);
          static PyObject *t_SpanTermQuery_get__term(t_SpanTermQuery *self, void *data);
          static PyGetSetDef t_SpanTermQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanTermQuery, field),
            DECLARE_GET_FIELD(t_SpanTermQuery, term),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanTermQuery__methods_[] = {
            DECLARE_METHOD(t_SpanTermQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanTermQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanTermQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanTermQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_SpanTermQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanTermQuery, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanTermQuery, getTerm, METH_NOARGS),
            DECLARE_METHOD(t_SpanTermQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanTermQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanTermQuery, t_SpanTermQuery, ::org::apache::lucene::search::spans::SpanQuery, SpanTermQuery, t_SpanTermQuery_init_, 0, 0, t_SpanTermQuery__fields_, 0, 0);

          void t_SpanTermQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanTermQuery), module, "SpanTermQuery", 0);
          }

          void t_SpanTermQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanTermQuery).tp_dict, "class_", make_descriptor(SpanTermQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanTermQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanTermQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanTermQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanTermQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanTermQuery::initializeClass, 1)))
              return NULL;
            return t_SpanTermQuery::wrap_Object(SpanTermQuery(((t_SpanTermQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanTermQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanTermQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanTermQuery_init_(t_SpanTermQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::Term a0((jobject) NULL);
            SpanTermQuery object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
            {
              INT_CALL(object = SpanTermQuery(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanTermQuery_equals(t_SpanTermQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanTermQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanTermQuery_extractTerms(t_SpanTermQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SpanTermQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_SpanTermQuery_getField(t_SpanTermQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanTermQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanTermQuery_getSpans(t_SpanTermQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanTermQuery), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanTermQuery_getTerm(t_SpanTermQuery *self)
          {
            ::org::apache::lucene::index::Term result((jobject) NULL);
            OBJ_CALL(result = self->object.getTerm());
            return ::org::apache::lucene::index::t_Term::wrap_Object(result);
          }

          static PyObject *t_SpanTermQuery_hashCode(t_SpanTermQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanTermQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanTermQuery_toString(t_SpanTermQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanTermQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SpanTermQuery_get__field(t_SpanTermQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SpanTermQuery_get__term(t_SpanTermQuery *self, void *data)
          {
            ::org::apache::lucene::index::Term value((jobject) NULL);
            OBJ_CALL(value = self->object.getTerm());
            return ::org::apache::lucene::index::t_Term::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *BooleanQueryBuilder::class$ = NULL;
            jmethodID *BooleanQueryBuilder::mids$ = NULL;
            bool BooleanQueryBuilder::live$ = false;

            jclass BooleanQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6566a539] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/QueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BooleanQueryBuilder::BooleanQueryBuilder(const ::org::apache::lucene::queryparser::xml::QueryBuilder & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6566a539, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_BooleanQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BooleanQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BooleanQueryBuilder_init_(t_BooleanQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_BooleanQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_BooleanQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BooleanQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BooleanQueryBuilder, t_BooleanQueryBuilder, ::java::lang::Object, BooleanQueryBuilder, t_BooleanQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_BooleanQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(BooleanQueryBuilder), module, "BooleanQueryBuilder", 0);
            }

            void t_BooleanQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BooleanQueryBuilder).tp_dict, "class_", make_descriptor(BooleanQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BooleanQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_BooleanQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BooleanQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BooleanQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BooleanQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_BooleanQueryBuilder::wrap_Object(BooleanQueryBuilder(((t_BooleanQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_BooleanQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BooleanQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BooleanQueryBuilder_init_(t_BooleanQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::QueryBuilder a0((jobject) NULL);
              BooleanQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::QueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = BooleanQueryBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilterFactory.h"
#include "org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ASCIIFoldingFilterFactory::class$ = NULL;
          jmethodID *ASCIIFoldingFilterFactory::mids$ = NULL;
          bool ASCIIFoldingFilterFactory::live$ = false;

          jclass ASCIIFoldingFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_7c6dfdbe] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ASCIIFoldingFilterFactory::ASCIIFoldingFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::ASCIIFoldingFilter ASCIIFoldingFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::ASCIIFoldingFilter(env->callObjectMethod(this$, mids$[mid_create_7c6dfdbe], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory ASCIIFoldingFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ASCIIFoldingFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ASCIIFoldingFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ASCIIFoldingFilterFactory_init_(t_ASCIIFoldingFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ASCIIFoldingFilterFactory_create(t_ASCIIFoldingFilterFactory *self, PyObject *args);
          static PyObject *t_ASCIIFoldingFilterFactory_getMultiTermComponent(t_ASCIIFoldingFilterFactory *self);
          static PyObject *t_ASCIIFoldingFilterFactory_get__multiTermComponent(t_ASCIIFoldingFilterFactory *self, void *data);
          static PyGetSetDef t_ASCIIFoldingFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_ASCIIFoldingFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ASCIIFoldingFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ASCIIFoldingFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ASCIIFoldingFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ASCIIFoldingFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_ASCIIFoldingFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ASCIIFoldingFilterFactory, t_ASCIIFoldingFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ASCIIFoldingFilterFactory, t_ASCIIFoldingFilterFactory_init_, 0, 0, t_ASCIIFoldingFilterFactory__fields_, 0, 0);

          void t_ASCIIFoldingFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ASCIIFoldingFilterFactory), module, "ASCIIFoldingFilterFactory", 0);
          }

          void t_ASCIIFoldingFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ASCIIFoldingFilterFactory).tp_dict, "class_", make_descriptor(ASCIIFoldingFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ASCIIFoldingFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ASCIIFoldingFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ASCIIFoldingFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ASCIIFoldingFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ASCIIFoldingFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ASCIIFoldingFilterFactory::wrap_Object(ASCIIFoldingFilterFactory(((t_ASCIIFoldingFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ASCIIFoldingFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ASCIIFoldingFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ASCIIFoldingFilterFactory_init_(t_ASCIIFoldingFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ASCIIFoldingFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ASCIIFoldingFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ASCIIFoldingFilterFactory_create(t_ASCIIFoldingFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::ASCIIFoldingFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_ASCIIFoldingFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ASCIIFoldingFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_ASCIIFoldingFilterFactory_getMultiTermComponent(t_ASCIIFoldingFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_ASCIIFoldingFilterFactory_get__multiTermComponent(t_ASCIIFoldingFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene42/Lucene42NormsFormat.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {

          ::java::lang::Class *Lucene42NormsFormat::class$ = NULL;
          jmethodID *Lucene42NormsFormat::mids$ = NULL;
          bool Lucene42NormsFormat::live$ = false;

          jclass Lucene42NormsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene42/Lucene42NormsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_normsConsumer_025deb44] = env->getMethodID(cls, "normsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_normsProducer_9b0d4e4a] = env->getMethodID(cls, "normsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene42NormsFormat::Lucene42NormsFormat() : ::org::apache::lucene::codecs::NormsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          Lucene42NormsFormat::Lucene42NormsFormat(jfloat a0) : ::org::apache::lucene::codecs::NormsFormat(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene42NormsFormat::normsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_normsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene42NormsFormat::normsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_normsProducer_9b0d4e4a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {
          static PyObject *t_Lucene42NormsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene42NormsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene42NormsFormat_init_(t_Lucene42NormsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene42NormsFormat_normsConsumer(t_Lucene42NormsFormat *self, PyObject *args);
          static PyObject *t_Lucene42NormsFormat_normsProducer(t_Lucene42NormsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene42NormsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene42NormsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42NormsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42NormsFormat, normsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42NormsFormat, normsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene42NormsFormat, t_Lucene42NormsFormat, ::org::apache::lucene::codecs::NormsFormat, Lucene42NormsFormat, t_Lucene42NormsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene42NormsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene42NormsFormat), module, "Lucene42NormsFormat", 0);
          }

          void t_Lucene42NormsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene42NormsFormat).tp_dict, "class_", make_descriptor(Lucene42NormsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene42NormsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene42NormsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene42NormsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene42NormsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene42NormsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene42NormsFormat::wrap_Object(Lucene42NormsFormat(((t_Lucene42NormsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene42NormsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene42NormsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene42NormsFormat_init_(t_Lucene42NormsFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Lucene42NormsFormat object((jobject) NULL);

                INT_CALL(object = Lucene42NormsFormat());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                Lucene42NormsFormat object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = Lucene42NormsFormat(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene42NormsFormat_normsConsumer(t_Lucene42NormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42NormsFormat), (PyObject *) self, "normsConsumer", args, 2);
          }

          static PyObject *t_Lucene42NormsFormat_normsProducer(t_Lucene42NormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42NormsFormat), (PyObject *) self, "normsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntBlockPool$SliceReader.h"
#include "org/apache/lucene/util/IntBlockPool.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntBlockPool$SliceReader::class$ = NULL;
        jmethodID *IntBlockPool$SliceReader::mids$ = NULL;
        bool IntBlockPool$SliceReader::live$ = false;

        jclass IntBlockPool$SliceReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntBlockPool$SliceReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_67e0ad2c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/IntBlockPool;)V");
            mids$[mid_endOfSlice_54c6a16a] = env->getMethodID(cls, "endOfSlice", "()Z");
            mids$[mid_readInt_54c6a179] = env->getMethodID(cls, "readInt", "()I");
            mids$[mid_reset_d8d154a6] = env->getMethodID(cls, "reset", "(II)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntBlockPool$SliceReader::IntBlockPool$SliceReader(const ::org::apache::lucene::util::IntBlockPool & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_67e0ad2c, a0.this$)) {}

        jboolean IntBlockPool$SliceReader::endOfSlice() const
        {
          return env->callBooleanMethod(this$, mids$[mid_endOfSlice_54c6a16a]);
        }

        jint IntBlockPool$SliceReader::readInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_54c6a179]);
        }

        void IntBlockPool$SliceReader::reset(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_d8d154a6], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntBlockPool$SliceReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntBlockPool$SliceReader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntBlockPool$SliceReader_init_(t_IntBlockPool$SliceReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntBlockPool$SliceReader_endOfSlice(t_IntBlockPool$SliceReader *self);
        static PyObject *t_IntBlockPool$SliceReader_readInt(t_IntBlockPool$SliceReader *self);
        static PyObject *t_IntBlockPool$SliceReader_reset(t_IntBlockPool$SliceReader *self, PyObject *args);

        static PyMethodDef t_IntBlockPool$SliceReader__methods_[] = {
          DECLARE_METHOD(t_IntBlockPool$SliceReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$SliceReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$SliceReader, endOfSlice, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool$SliceReader, readInt, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool$SliceReader, reset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntBlockPool$SliceReader, t_IntBlockPool$SliceReader, ::java::lang::Object, IntBlockPool$SliceReader, t_IntBlockPool$SliceReader_init_, 0, 0, 0, 0, 0);

        void t_IntBlockPool$SliceReader::install(PyObject *module)
        {
          installType(&PY_TYPE(IntBlockPool$SliceReader), module, "IntBlockPool$SliceReader", 0);
        }

        void t_IntBlockPool$SliceReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntBlockPool$SliceReader).tp_dict, "class_", make_descriptor(IntBlockPool$SliceReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$SliceReader).tp_dict, "wrapfn_", make_descriptor(t_IntBlockPool$SliceReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$SliceReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntBlockPool$SliceReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntBlockPool$SliceReader::initializeClass, 1)))
            return NULL;
          return t_IntBlockPool$SliceReader::wrap_Object(IntBlockPool$SliceReader(((t_IntBlockPool$SliceReader *) arg)->object.this$));
        }
        static PyObject *t_IntBlockPool$SliceReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntBlockPool$SliceReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntBlockPool$SliceReader_init_(t_IntBlockPool$SliceReader *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::IntBlockPool a0((jobject) NULL);
          IntBlockPool$SliceReader object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::IntBlockPool::initializeClass, &a0))
          {
            INT_CALL(object = IntBlockPool$SliceReader(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntBlockPool$SliceReader_endOfSlice(t_IntBlockPool$SliceReader *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.endOfSlice());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IntBlockPool$SliceReader_readInt(t_IntBlockPool$SliceReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.readInt());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IntBlockPool$SliceReader_reset(t_IntBlockPool$SliceReader *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.reset(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchMinimalStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchMinimalStemFilter::class$ = NULL;
          jmethodID *FrenchMinimalStemFilter::mids$ = NULL;
          bool FrenchMinimalStemFilter::live$ = false;

          jclass FrenchMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchMinimalStemFilter::FrenchMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean FrenchMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchMinimalStemFilter_init_(t_FrenchMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchMinimalStemFilter_incrementToken(t_FrenchMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_FrenchMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_FrenchMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchMinimalStemFilter, t_FrenchMinimalStemFilter, ::org::apache::lucene::analysis::TokenFilter, FrenchMinimalStemFilter, t_FrenchMinimalStemFilter_init_, 0, 0, 0, 0, 0);

          void t_FrenchMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchMinimalStemFilter), module, "FrenchMinimalStemFilter", 0);
          }

          void t_FrenchMinimalStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemFilter).tp_dict, "class_", make_descriptor(FrenchMinimalStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemFilter).tp_dict, "wrapfn_", make_descriptor(t_FrenchMinimalStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_FrenchMinimalStemFilter::wrap_Object(FrenchMinimalStemFilter(((t_FrenchMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_FrenchMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchMinimalStemFilter_init_(t_FrenchMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            FrenchMinimalStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = FrenchMinimalStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FrenchMinimalStemFilter_incrementToken(t_FrenchMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FrenchMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/nl/DutchStemmer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace nl {

          ::java::lang::Class *DutchStemmer::class$ = NULL;
          jmethodID *DutchStemmer::mids$ = NULL;
          bool DutchStemmer::live$ = false;

          jclass DutchStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/nl/DutchStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_97a5258f] = env->getMethodID(cls, "stem", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DutchStemmer::DutchStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::String DutchStemmer::stem(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_stem_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace nl {
          static PyObject *t_DutchStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DutchStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DutchStemmer_init_(t_DutchStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DutchStemmer_stem(t_DutchStemmer *self, PyObject *arg);

          static PyMethodDef t_DutchStemmer__methods_[] = {
            DECLARE_METHOD(t_DutchStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DutchStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DutchStemmer, stem, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DutchStemmer, t_DutchStemmer, ::java::lang::Object, DutchStemmer, t_DutchStemmer_init_, 0, 0, 0, 0, 0);

          void t_DutchStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(DutchStemmer), module, "DutchStemmer", 0);
          }

          void t_DutchStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DutchStemmer).tp_dict, "class_", make_descriptor(DutchStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DutchStemmer).tp_dict, "wrapfn_", make_descriptor(t_DutchStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DutchStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DutchStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DutchStemmer::initializeClass, 1)))
              return NULL;
            return t_DutchStemmer::wrap_Object(DutchStemmer(((t_DutchStemmer *) arg)->object.this$));
          }
          static PyObject *t_DutchStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DutchStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DutchStemmer_init_(t_DutchStemmer *self, PyObject *args, PyObject *kwds)
          {
            DutchStemmer object((jobject) NULL);

            INT_CALL(object = DutchStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_DutchStemmer_stem(t_DutchStemmer *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.stem(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianLightStemmer::class$ = NULL;
          jmethodID *NorwegianLightStemmer::mids$ = NULL;
          bool NorwegianLightStemmer::live$ = false;
          jint NorwegianLightStemmer::BOKMAAL = (jint) 0;
          jint NorwegianLightStemmer::NYNORSK = (jint) 0;

          jclass NorwegianLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              BOKMAAL = env->getStaticIntField(cls, "BOKMAAL");
              NYNORSK = env->getStaticIntField(cls, "NYNORSK");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianLightStemmer::NorwegianLightStemmer(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          jint NorwegianLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianLightStemmer_init_(t_NorwegianLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianLightStemmer_stem(t_NorwegianLightStemmer *self, PyObject *args);

          static PyMethodDef t_NorwegianLightStemmer__methods_[] = {
            DECLARE_METHOD(t_NorwegianLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NorwegianLightStemmer, t_NorwegianLightStemmer, ::java::lang::Object, NorwegianLightStemmer, t_NorwegianLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_NorwegianLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianLightStemmer), module, "NorwegianLightStemmer", 0);
          }

          void t_NorwegianLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemmer).tp_dict, "class_", make_descriptor(NorwegianLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_NorwegianLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(NorwegianLightStemmer::initializeClass);
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemmer).tp_dict, "BOKMAAL", make_descriptor(NorwegianLightStemmer::BOKMAAL));
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemmer).tp_dict, "NYNORSK", make_descriptor(NorwegianLightStemmer::NYNORSK));
          }

          static PyObject *t_NorwegianLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianLightStemmer::initializeClass, 1)))
              return NULL;
            return t_NorwegianLightStemmer::wrap_Object(NorwegianLightStemmer(((t_NorwegianLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_NorwegianLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianLightStemmer_init_(t_NorwegianLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            NorwegianLightStemmer object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = NorwegianLightStemmer(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianLightStemmer_stem(t_NorwegianLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueDouble.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueDouble::class$ = NULL;
          jmethodID *MutableValueDouble::mids$ = NULL;
          jfieldID *MutableValueDouble::fids$ = NULL;
          bool MutableValueDouble::live$ = false;

          jclass MutableValueDouble::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueDouble");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_290588f1] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_d590ce7c] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_290588e2] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "D");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueDouble::MutableValueDouble() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint MutableValueDouble::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_290588f1], a0.this$);
          }

          void MutableValueDouble::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d590ce7c], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueDouble::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          jboolean MutableValueDouble::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_290588e2], a0.this$);
          }

          jint MutableValueDouble::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::Object MutableValueDouble::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }

          jdouble MutableValueDouble::_get_value() const
          {
            return env->getDoubleField(this$, fids$[fid_value]);
          }

          void MutableValueDouble::_set_value(jdouble a0) const
          {
            env->setDoubleField(this$, fids$[fid_value], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueDouble_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueDouble_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueDouble_init_(t_MutableValueDouble *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueDouble_compareSameType(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_copy(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_duplicate(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_equalsSameType(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_hashCode(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_toObject(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_get__value(t_MutableValueDouble *self, void *data);
          static int t_MutableValueDouble_set__value(t_MutableValueDouble *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueDouble__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueDouble, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueDouble__methods_[] = {
            DECLARE_METHOD(t_MutableValueDouble, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueDouble, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueDouble, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDouble, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDouble, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDouble, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDouble, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDouble, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValueDouble, t_MutableValueDouble, ::org::apache::lucene::util::mutable$::MutableValue, MutableValueDouble, t_MutableValueDouble_init_, 0, 0, t_MutableValueDouble__fields_, 0, 0);

          void t_MutableValueDouble::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueDouble), module, "MutableValueDouble", 0);
          }

          void t_MutableValueDouble::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValueDouble).tp_dict, "class_", make_descriptor(MutableValueDouble::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValueDouble).tp_dict, "wrapfn_", make_descriptor(t_MutableValueDouble::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValueDouble).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueDouble_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueDouble::initializeClass, 1)))
              return NULL;
            return t_MutableValueDouble::wrap_Object(MutableValueDouble(((t_MutableValueDouble *) arg)->object.this$));
          }
          static PyObject *t_MutableValueDouble_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueDouble::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueDouble_init_(t_MutableValueDouble *self, PyObject *args, PyObject *kwds)
          {
            MutableValueDouble object((jobject) NULL);

            INT_CALL(object = MutableValueDouble());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueDouble_compareSameType(t_MutableValueDouble *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueDouble), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueDouble_copy(t_MutableValueDouble *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MutableValueDouble), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueDouble_duplicate(t_MutableValueDouble *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueDouble), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueDouble_equalsSameType(t_MutableValueDouble *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MutableValueDouble), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueDouble_hashCode(t_MutableValueDouble *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueDouble), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueDouble_toObject(t_MutableValueDouble *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueDouble), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueDouble_get__value(t_MutableValueDouble *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_value());
            return PyFloat_FromDouble((double) value);
          }
          static int t_MutableValueDouble_set__value(t_MutableValueDouble *self, PyObject *arg, void *data)
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/PayloadHelper.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *PayloadHelper::class$ = NULL;
          jmethodID *PayloadHelper::mids$ = NULL;
          bool PayloadHelper::live$ = false;

          jclass PayloadHelper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/PayloadHelper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_decodeFloat_49b4f13b] = env->getStaticMethodID(cls, "decodeFloat", "([B)F");
              mids$[mid_decodeFloat_b8354c53] = env->getStaticMethodID(cls, "decodeFloat", "([BI)F");
              mids$[mid_decodeInt_b8354c5c] = env->getStaticMethodID(cls, "decodeInt", "([BI)I");
              mids$[mid_encodeFloat_909f9221] = env->getStaticMethodID(cls, "encodeFloat", "(F)[B");
              mids$[mid_encodeFloat_a555a4d0] = env->getStaticMethodID(cls, "encodeFloat", "(F[BI)[B");
              mids$[mid_encodeInt_b4292e98] = env->getStaticMethodID(cls, "encodeInt", "(I)[B");
              mids$[mid_encodeInt_1bd14047] = env->getStaticMethodID(cls, "encodeInt", "(I[BI)[B");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadHelper::PayloadHelper() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat PayloadHelper::decodeFloat(const JArray< jbyte > & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticFloatMethod(cls, mids$[mid_decodeFloat_49b4f13b], a0.this$);
          }

          jfloat PayloadHelper::decodeFloat(const JArray< jbyte > & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticFloatMethod(cls, mids$[mid_decodeFloat_b8354c53], a0.this$, a1);
          }

          jint PayloadHelper::decodeInt(const JArray< jbyte > & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_decodeInt_b8354c5c], a0.this$, a1);
          }

          JArray< jbyte > PayloadHelper::encodeFloat(jfloat a0)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_encodeFloat_909f9221], a0));
          }

          JArray< jbyte > PayloadHelper::encodeFloat(jfloat a0, const JArray< jbyte > & a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_encodeFloat_a555a4d0], a0, a1.this$, a2));
          }

          JArray< jbyte > PayloadHelper::encodeInt(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_encodeInt_b4292e98], a0));
          }

          JArray< jbyte > PayloadHelper::encodeInt(jint a0, const JArray< jbyte > & a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_encodeInt_1bd14047], a0, a1.this$, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_PayloadHelper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadHelper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadHelper_init_(t_PayloadHelper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadHelper_decodeFloat(PyTypeObject *type, PyObject *args);
          static PyObject *t_PayloadHelper_decodeInt(PyTypeObject *type, PyObject *args);
          static PyObject *t_PayloadHelper_encodeFloat(PyTypeObject *type, PyObject *args);
          static PyObject *t_PayloadHelper_encodeInt(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_PayloadHelper__methods_[] = {
            DECLARE_METHOD(t_PayloadHelper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadHelper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadHelper, decodeFloat, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PayloadHelper, decodeInt, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PayloadHelper, encodeFloat, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PayloadHelper, encodeInt, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadHelper, t_PayloadHelper, ::java::lang::Object, PayloadHelper, t_PayloadHelper_init_, 0, 0, 0, 0, 0);

          void t_PayloadHelper::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadHelper), module, "PayloadHelper", 0);
          }

          void t_PayloadHelper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadHelper).tp_dict, "class_", make_descriptor(PayloadHelper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadHelper).tp_dict, "wrapfn_", make_descriptor(t_PayloadHelper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadHelper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadHelper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadHelper::initializeClass, 1)))
              return NULL;
            return t_PayloadHelper::wrap_Object(PayloadHelper(((t_PayloadHelper *) arg)->object.this$));
          }
          static PyObject *t_PayloadHelper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadHelper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadHelper_init_(t_PayloadHelper *self, PyObject *args, PyObject *kwds)
          {
            PayloadHelper object((jobject) NULL);

            INT_CALL(object = PayloadHelper());
            self->object = object;

            return 0;
          }

          static PyObject *t_PayloadHelper_decodeFloat(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< jbyte > a0((jobject) NULL);
                jfloat result;

                if (!parseArgs(args, "[B", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::decodeFloat(a0));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 2:
              {
                JArray< jbyte > a0((jobject) NULL);
                jint a1;
                jfloat result;

                if (!parseArgs(args, "[BI", &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::decodeFloat(a0, a1));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError(type, "decodeFloat", args);
            return NULL;
          }

          static PyObject *t_PayloadHelper_decodeInt(PyTypeObject *type, PyObject *args)
          {
            JArray< jbyte > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[BI", &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::decodeInt(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "decodeInt", args);
            return NULL;
          }

          static PyObject *t_PayloadHelper_encodeFloat(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jfloat a0;
                JArray< jbyte > result((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::encodeFloat(a0));
                  return result.wrap();
                }
              }
              break;
             case 3:
              {
                jfloat a0;
                JArray< jbyte > a1((jobject) NULL);
                jint a2;
                JArray< jbyte > result((jobject) NULL);

                if (!parseArgs(args, "F[BI", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::encodeFloat(a0, a1, a2));
                  return result.wrap();
                }
              }
            }

            PyErr_SetArgsError(type, "encodeFloat", args);
            return NULL;
          }

          static PyObject *t_PayloadHelper_encodeInt(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                JArray< jbyte > result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::encodeInt(a0));
                  return result.wrap();
                }
              }
              break;
             case 3:
              {
                jint a0;
                JArray< jbyte > a1((jobject) NULL);
                jint a2;
                JArray< jbyte > result((jobject) NULL);

                if (!parseArgs(args, "I[BI", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::encodeInt(a0, a1, a2));
                  return result.wrap();
                }
              }
            }

            PyErr_SetArgsError(type, "encodeInt", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *DuplicateFilter$ProcessingMode::class$ = NULL;
          jmethodID *DuplicateFilter$ProcessingMode::mids$ = NULL;
          bool DuplicateFilter$ProcessingMode::live$ = false;
          DuplicateFilter$ProcessingMode *DuplicateFilter$ProcessingMode::PM_FAST_INVALIDATION = NULL;
          DuplicateFilter$ProcessingMode *DuplicateFilter$ProcessingMode::PM_FULL_VALIDATION = NULL;

          jclass DuplicateFilter$ProcessingMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_5b1a28e1] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode;");
              mids$[mid_values_e8e814df] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PM_FAST_INVALIDATION = new DuplicateFilter$ProcessingMode(env->getStaticObjectField(cls, "PM_FAST_INVALIDATION", "Lorg/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode;"));
              PM_FULL_VALIDATION = new DuplicateFilter$ProcessingMode(env->getStaticObjectField(cls, "PM_FULL_VALIDATION", "Lorg/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DuplicateFilter$ProcessingMode DuplicateFilter$ProcessingMode::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return DuplicateFilter$ProcessingMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_5b1a28e1], a0.this$));
          }

          JArray< DuplicateFilter$ProcessingMode > DuplicateFilter$ProcessingMode::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< DuplicateFilter$ProcessingMode >(env->callStaticObjectMethod(cls, mids$[mid_values_e8e814df]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_DuplicateFilter$ProcessingMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DuplicateFilter$ProcessingMode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DuplicateFilter$ProcessingMode_of_(t_DuplicateFilter$ProcessingMode *self, PyObject *args);
          static PyObject *t_DuplicateFilter$ProcessingMode_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_DuplicateFilter$ProcessingMode_values(PyTypeObject *type);
          static PyObject *t_DuplicateFilter$ProcessingMode_get__parameters_(t_DuplicateFilter$ProcessingMode *self, void *data);
          static PyGetSetDef t_DuplicateFilter$ProcessingMode__fields_[] = {
            DECLARE_GET_FIELD(t_DuplicateFilter$ProcessingMode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DuplicateFilter$ProcessingMode__methods_[] = {
            DECLARE_METHOD(t_DuplicateFilter$ProcessingMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter$ProcessingMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter$ProcessingMode, of_, METH_VARARGS),
            DECLARE_METHOD(t_DuplicateFilter$ProcessingMode, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter$ProcessingMode, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DuplicateFilter$ProcessingMode, t_DuplicateFilter$ProcessingMode, ::java::lang::Enum, DuplicateFilter$ProcessingMode, abstract_init, 0, 0, t_DuplicateFilter$ProcessingMode__fields_, 0, 0);
          PyObject *t_DuplicateFilter$ProcessingMode::wrap_Object(const DuplicateFilter$ProcessingMode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_DuplicateFilter$ProcessingMode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DuplicateFilter$ProcessingMode *self = (t_DuplicateFilter$ProcessingMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_DuplicateFilter$ProcessingMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_DuplicateFilter$ProcessingMode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DuplicateFilter$ProcessingMode *self = (t_DuplicateFilter$ProcessingMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_DuplicateFilter$ProcessingMode::install(PyObject *module)
          {
            installType(&PY_TYPE(DuplicateFilter$ProcessingMode), module, "DuplicateFilter$ProcessingMode", 0);
          }

          void t_DuplicateFilter$ProcessingMode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$ProcessingMode).tp_dict, "class_", make_descriptor(DuplicateFilter$ProcessingMode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$ProcessingMode).tp_dict, "wrapfn_", make_descriptor(t_DuplicateFilter$ProcessingMode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$ProcessingMode).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DuplicateFilter$ProcessingMode::initializeClass);
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$ProcessingMode).tp_dict, "PM_FAST_INVALIDATION", make_descriptor(t_DuplicateFilter$ProcessingMode::wrap_Object(*DuplicateFilter$ProcessingMode::PM_FAST_INVALIDATION)));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$ProcessingMode).tp_dict, "PM_FULL_VALIDATION", make_descriptor(t_DuplicateFilter$ProcessingMode::wrap_Object(*DuplicateFilter$ProcessingMode::PM_FULL_VALIDATION)));
          }

          static PyObject *t_DuplicateFilter$ProcessingMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DuplicateFilter$ProcessingMode::initializeClass, 1)))
              return NULL;
            return t_DuplicateFilter$ProcessingMode::wrap_Object(DuplicateFilter$ProcessingMode(((t_DuplicateFilter$ProcessingMode *) arg)->object.this$));
          }
          static PyObject *t_DuplicateFilter$ProcessingMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DuplicateFilter$ProcessingMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_DuplicateFilter$ProcessingMode_of_(t_DuplicateFilter$ProcessingMode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_DuplicateFilter$ProcessingMode_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            DuplicateFilter$ProcessingMode result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode::valueOf(a0));
              return t_DuplicateFilter$ProcessingMode::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_DuplicateFilter$ProcessingMode_values(PyTypeObject *type)
          {
            JArray< DuplicateFilter$ProcessingMode > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode::values());
            return JArray<jobject>(result.this$).wrap(t_DuplicateFilter$ProcessingMode::wrap_jobject);
          }
          static PyObject *t_DuplicateFilter$ProcessingMode_get__parameters_(t_DuplicateFilter$ProcessingMode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ga/IrishAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {

          ::java::lang::Class *IrishAnalyzer::class$ = NULL;
          jmethodID *IrishAnalyzer::mids$ = NULL;
          bool IrishAnalyzer::live$ = false;
          ::java::lang::String *IrishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass IrishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ga/IrishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IrishAnalyzer::IrishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          IrishAnalyzer::IrishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          IrishAnalyzer::IrishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet IrishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {
          static PyObject *t_IrishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IrishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IrishAnalyzer_init_(t_IrishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IrishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_IrishAnalyzer_get__defaultStopSet(t_IrishAnalyzer *self, void *data);
          static PyGetSetDef t_IrishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_IrishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IrishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_IrishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IrishAnalyzer, t_IrishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, IrishAnalyzer, t_IrishAnalyzer_init_, 0, 0, t_IrishAnalyzer__fields_, 0, 0);

          void t_IrishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(IrishAnalyzer), module, "IrishAnalyzer", 0);
          }

          void t_IrishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IrishAnalyzer).tp_dict, "class_", make_descriptor(IrishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IrishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_IrishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IrishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(IrishAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(IrishAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*IrishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_IrishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IrishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_IrishAnalyzer::wrap_Object(IrishAnalyzer(((t_IrishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_IrishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IrishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IrishAnalyzer_init_(t_IrishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                IrishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = IrishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                IrishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = IrishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                IrishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = IrishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IrishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ga::IrishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_IrishAnalyzer_get__defaultStopSet(t_IrishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BooleanClause$Occur::class$ = NULL;
        jmethodID *BooleanClause$Occur::mids$ = NULL;
        bool BooleanClause$Occur::live$ = false;
        BooleanClause$Occur *BooleanClause$Occur::MUST = NULL;
        BooleanClause$Occur *BooleanClause$Occur::MUST_NOT = NULL;
        BooleanClause$Occur *BooleanClause$Occur::SHOULD = NULL;

        jclass BooleanClause$Occur::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BooleanClause$Occur");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_af513d37] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/BooleanClause$Occur;");
            mids$[mid_values_e84c4b69] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/BooleanClause$Occur;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            MUST = new BooleanClause$Occur(env->getStaticObjectField(cls, "MUST", "Lorg/apache/lucene/search/BooleanClause$Occur;"));
            MUST_NOT = new BooleanClause$Occur(env->getStaticObjectField(cls, "MUST_NOT", "Lorg/apache/lucene/search/BooleanClause$Occur;"));
            SHOULD = new BooleanClause$Occur(env->getStaticObjectField(cls, "SHOULD", "Lorg/apache/lucene/search/BooleanClause$Occur;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BooleanClause$Occur BooleanClause$Occur::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return BooleanClause$Occur(env->callStaticObjectMethod(cls, mids$[mid_valueOf_af513d37], a0.this$));
        }

        JArray< BooleanClause$Occur > BooleanClause$Occur::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< BooleanClause$Occur >(env->callStaticObjectMethod(cls, mids$[mid_values_e84c4b69]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BooleanClause$Occur_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanClause$Occur_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanClause$Occur_of_(t_BooleanClause$Occur *self, PyObject *args);
        static PyObject *t_BooleanClause$Occur_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_BooleanClause$Occur_values(PyTypeObject *type);
        static PyObject *t_BooleanClause$Occur_get__parameters_(t_BooleanClause$Occur *self, void *data);
        static PyGetSetDef t_BooleanClause$Occur__fields_[] = {
          DECLARE_GET_FIELD(t_BooleanClause$Occur, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BooleanClause$Occur__methods_[] = {
          DECLARE_METHOD(t_BooleanClause$Occur, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanClause$Occur, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanClause$Occur, of_, METH_VARARGS),
          DECLARE_METHOD(t_BooleanClause$Occur, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BooleanClause$Occur, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BooleanClause$Occur, t_BooleanClause$Occur, ::java::lang::Enum, BooleanClause$Occur, abstract_init, 0, 0, t_BooleanClause$Occur__fields_, 0, 0);
        PyObject *t_BooleanClause$Occur::wrap_Object(const BooleanClause$Occur& object, PyTypeObject *p0)
        {
          PyObject *obj = t_BooleanClause$Occur::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_BooleanClause$Occur *self = (t_BooleanClause$Occur *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_BooleanClause$Occur::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_BooleanClause$Occur::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_BooleanClause$Occur *self = (t_BooleanClause$Occur *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_BooleanClause$Occur::install(PyObject *module)
        {
          installType(&PY_TYPE(BooleanClause$Occur), module, "BooleanClause$Occur", 0);
        }

        void t_BooleanClause$Occur::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BooleanClause$Occur).tp_dict, "class_", make_descriptor(BooleanClause$Occur::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BooleanClause$Occur).tp_dict, "wrapfn_", make_descriptor(t_BooleanClause$Occur::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BooleanClause$Occur).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BooleanClause$Occur::initializeClass);
          PyDict_SetItemString(PY_TYPE(BooleanClause$Occur).tp_dict, "MUST", make_descriptor(t_BooleanClause$Occur::wrap_Object(*BooleanClause$Occur::MUST)));
          PyDict_SetItemString(PY_TYPE(BooleanClause$Occur).tp_dict, "MUST_NOT", make_descriptor(t_BooleanClause$Occur::wrap_Object(*BooleanClause$Occur::MUST_NOT)));
          PyDict_SetItemString(PY_TYPE(BooleanClause$Occur).tp_dict, "SHOULD", make_descriptor(t_BooleanClause$Occur::wrap_Object(*BooleanClause$Occur::SHOULD)));
        }

        static PyObject *t_BooleanClause$Occur_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BooleanClause$Occur::initializeClass, 1)))
            return NULL;
          return t_BooleanClause$Occur::wrap_Object(BooleanClause$Occur(((t_BooleanClause$Occur *) arg)->object.this$));
        }
        static PyObject *t_BooleanClause$Occur_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BooleanClause$Occur::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BooleanClause$Occur_of_(t_BooleanClause$Occur *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_BooleanClause$Occur_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          BooleanClause$Occur result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::BooleanClause$Occur::valueOf(a0));
            return t_BooleanClause$Occur::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_BooleanClause$Occur_values(PyTypeObject *type)
        {
          JArray< BooleanClause$Occur > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::BooleanClause$Occur::values());
          return JArray<jobject>(result.this$).wrap(t_BooleanClause$Occur::wrap_jobject);
        }
        static PyObject *t_BooleanClause$Occur_get__parameters_(t_BooleanClause$Occur *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "java/lang/Comparable.h"
#include "java/util/Comparator.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRef::class$ = NULL;
        jmethodID *BytesRef::mids$ = NULL;
        jfieldID *BytesRef::fids$ = NULL;
        bool BytesRef::live$ = false;
        JArray< jbyte > *BytesRef::EMPTY_BYTES = NULL;

        jclass BytesRef::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRef");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_a8afc64a] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;)V");
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_49b4f12b] = env->getMethodID(cls, "<init>", "([B)V");
            mids$[mid_init$_86f4435f] = env->getMethodID(cls, "<init>", "([BII)V");
            mids$[mid_append_7bc03dc4] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_bytesEquals_7bc03dc8] = env->getMethodID(cls, "bytesEquals", "(Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_clone_4ae19461] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_compareTo_7bc03ddb] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_copyBytes_7bc03dc4] = env->getMethodID(cls, "copyBytes", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_copyChars_a8afc64a] = env->getMethodID(cls, "copyChars", "(Ljava/lang/CharSequence;)V");
            mids$[mid_deepCopyOf_21e43cb7] = env->getStaticMethodID(cls, "deepCopyOf", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getUTF8SortedAsUTF16Comparator_5a7ff2fc] = env->getStaticMethodID(cls, "getUTF8SortedAsUTF16Comparator", "()Ljava/util/Comparator;");
            mids$[mid_getUTF8SortedAsUnicodeComparator_5a7ff2fc] = env->getStaticMethodID(cls, "getUTF8SortedAsUnicodeComparator", "()Ljava/util/Comparator;");
            mids$[mid_grow_39c7bd3c] = env->getMethodID(cls, "grow", "(I)V");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isValid_54c6a16a] = env->getMethodID(cls, "isValid", "()Z");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_utf8ToString_14c7b5c5] = env->getMethodID(cls, "utf8ToString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_bytes] = env->getFieldID(cls, "bytes", "[B");
            fids$[fid_length] = env->getFieldID(cls, "length", "I");
            fids$[fid_offset] = env->getFieldID(cls, "offset", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_BYTES = new JArray< jbyte >(env->getStaticObjectField(cls, "EMPTY_BYTES", "[B"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BytesRef::BytesRef() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        BytesRef::BytesRef(const ::java::lang::CharSequence & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a8afc64a, a0.this$)) {}

        BytesRef::BytesRef(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        BytesRef::BytesRef(const JArray< jbyte > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_49b4f12b, a0.this$)) {}

        BytesRef::BytesRef(const JArray< jbyte > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_86f4435f, a0.this$, a1, a2)) {}

        void BytesRef::append(const BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_append_7bc03dc4], a0.this$);
        }

        jboolean BytesRef::bytesEquals(const BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_bytesEquals_7bc03dc8], a0.this$);
        }

        BytesRef BytesRef::clone() const
        {
          return BytesRef(env->callObjectMethod(this$, mids$[mid_clone_4ae19461]));
        }

        jint BytesRef::compareTo(const BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_7bc03ddb], a0.this$);
        }

        void BytesRef::copyBytes(const BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyBytes_7bc03dc4], a0.this$);
        }

        void BytesRef::copyChars(const ::java::lang::CharSequence & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyChars_a8afc64a], a0.this$);
        }

        BytesRef BytesRef::deepCopyOf(const BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return BytesRef(env->callStaticObjectMethod(cls, mids$[mid_deepCopyOf_21e43cb7], a0.this$));
        }

        jboolean BytesRef::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::util::Comparator BytesRef::getUTF8SortedAsUTF16Comparator()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_getUTF8SortedAsUTF16Comparator_5a7ff2fc]));
        }

        ::java::util::Comparator BytesRef::getUTF8SortedAsUnicodeComparator()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_getUTF8SortedAsUnicodeComparator_5a7ff2fc]));
        }

        void BytesRef::grow(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_grow_39c7bd3c], a0);
        }

        jint BytesRef::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean BytesRef::isValid() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isValid_54c6a16a]);
        }

        ::java::lang::String BytesRef::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String BytesRef::utf8ToString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_utf8ToString_14c7b5c5]));
        }

        JArray< jbyte > BytesRef::_get_bytes() const
        {
          return JArray< jbyte >(env->getObjectField(this$, fids$[fid_bytes]));
        }

        void BytesRef::_set_bytes(const JArray< jbyte > & a0) const
        {
          env->setObjectField(this$, fids$[fid_bytes], a0.this$);
        }

        jint BytesRef::_get_length() const
        {
          return env->getIntField(this$, fids$[fid_length]);
        }

        void BytesRef::_set_length(jint a0) const
        {
          env->setIntField(this$, fids$[fid_length], a0);
        }

        jint BytesRef::_get_offset() const
        {
          return env->getIntField(this$, fids$[fid_offset]);
        }

        void BytesRef::_set_offset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_offset], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRef_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRef_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BytesRef_init_(t_BytesRef *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BytesRef_append(t_BytesRef *self, PyObject *arg);
        static PyObject *t_BytesRef_bytesEquals(t_BytesRef *self, PyObject *arg);
        static PyObject *t_BytesRef_clone(t_BytesRef *self);
        static PyObject *t_BytesRef_compareTo(t_BytesRef *self, PyObject *arg);
        static PyObject *t_BytesRef_copyBytes(t_BytesRef *self, PyObject *arg);
        static PyObject *t_BytesRef_copyChars(t_BytesRef *self, PyObject *arg);
        static PyObject *t_BytesRef_deepCopyOf(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRef_equals(t_BytesRef *self, PyObject *args);
        static PyObject *t_BytesRef_getUTF8SortedAsUTF16Comparator(PyTypeObject *type);
        static PyObject *t_BytesRef_getUTF8SortedAsUnicodeComparator(PyTypeObject *type);
        static PyObject *t_BytesRef_grow(t_BytesRef *self, PyObject *arg);
        static PyObject *t_BytesRef_hashCode(t_BytesRef *self, PyObject *args);
        static PyObject *t_BytesRef_isValid(t_BytesRef *self);
        static PyObject *t_BytesRef_toString(t_BytesRef *self, PyObject *args);
        static PyObject *t_BytesRef_utf8ToString(t_BytesRef *self);
        static PyObject *t_BytesRef_get__bytes(t_BytesRef *self, void *data);
        static int t_BytesRef_set__bytes(t_BytesRef *self, PyObject *arg, void *data);
        static PyObject *t_BytesRef_get__length(t_BytesRef *self, void *data);
        static int t_BytesRef_set__length(t_BytesRef *self, PyObject *arg, void *data);
        static PyObject *t_BytesRef_get__offset(t_BytesRef *self, void *data);
        static int t_BytesRef_set__offset(t_BytesRef *self, PyObject *arg, void *data);

        static PyObject *t_BytesRef_get__uTF8SortedAsUTF16Comparator(t_BytesRef *self, void *data);
        static PyObject *t_BytesRef_get__uTF8SortedAsUnicodeComparator(t_BytesRef *self, void *data);
        static PyObject *t_BytesRef_get__valid(t_BytesRef *self, void *data);
        static PyGetSetDef t_BytesRef__fields_[] = {
          DECLARE_GETSET_FIELD(t_BytesRef, bytes),
          DECLARE_GETSET_FIELD(t_BytesRef, length),
          DECLARE_GETSET_FIELD(t_BytesRef, offset),
          DECLARE_GET_FIELD(t_BytesRef, uTF8SortedAsUTF16Comparator),
          DECLARE_GET_FIELD(t_BytesRef, uTF8SortedAsUnicodeComparator),
          DECLARE_GET_FIELD(t_BytesRef, valid),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BytesRef__methods_[] = {
          DECLARE_METHOD(t_BytesRef, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRef, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRef, append, METH_O),
          DECLARE_METHOD(t_BytesRef, bytesEquals, METH_O),
          DECLARE_METHOD(t_BytesRef, clone, METH_NOARGS),
          DECLARE_METHOD(t_BytesRef, compareTo, METH_O),
          DECLARE_METHOD(t_BytesRef, copyBytes, METH_O),
          DECLARE_METHOD(t_BytesRef, copyChars, METH_O),
          DECLARE_METHOD(t_BytesRef, deepCopyOf, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRef, equals, METH_VARARGS),
          DECLARE_METHOD(t_BytesRef, getUTF8SortedAsUTF16Comparator, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_BytesRef, getUTF8SortedAsUnicodeComparator, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_BytesRef, grow, METH_O),
          DECLARE_METHOD(t_BytesRef, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BytesRef, isValid, METH_NOARGS),
          DECLARE_METHOD(t_BytesRef, toString, METH_VARARGS),
          DECLARE_METHOD(t_BytesRef, utf8ToString, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BytesRef, t_BytesRef, ::java::lang::Object, BytesRef, t_BytesRef_init_, 0, 0, t_BytesRef__fields_, 0, 0);

        void t_BytesRef::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRef), module, "BytesRef", 0);
        }

        void t_BytesRef::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BytesRef).tp_dict, "class_", make_descriptor(BytesRef::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BytesRef).tp_dict, "wrapfn_", make_descriptor(t_BytesRef::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BytesRef).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BytesRef::initializeClass);
          PyDict_SetItemString(PY_TYPE(BytesRef).tp_dict, "EMPTY_BYTES", make_descriptor(BytesRef::EMPTY_BYTES->wrap()));
        }

        static PyObject *t_BytesRef_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRef::initializeClass, 1)))
            return NULL;
          return t_BytesRef::wrap_Object(BytesRef(((t_BytesRef *) arg)->object.this$));
        }
        static PyObject *t_BytesRef_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRef::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BytesRef_init_(t_BytesRef *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              BytesRef object((jobject) NULL);

              INT_CALL(object = BytesRef());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              BytesRef object((jobject) NULL);

              if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                INT_CALL(object = BytesRef(a0));
                self->object = object;
                break;
              }
            }
            {
              jint a0;
              BytesRef object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = BytesRef(a0));
                self->object = object;
                break;
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              BytesRef object((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                INT_CALL(object = BytesRef(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              BytesRef object((jobject) NULL);

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                INT_CALL(object = BytesRef(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BytesRef_append(t_BytesRef *self, PyObject *arg)
        {
          BytesRef a0((jobject) NULL);

          if (!parseArg(arg, "k", BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.append(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "append", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_bytesEquals(t_BytesRef *self, PyObject *arg)
        {
          BytesRef a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.bytesEquals(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "bytesEquals", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_clone(t_BytesRef *self)
        {
          BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_BytesRef_compareTo(t_BytesRef *self, PyObject *arg)
        {
          BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_copyBytes(t_BytesRef *self, PyObject *arg)
        {
          BytesRef a0((jobject) NULL);

          if (!parseArg(arg, "k", BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyBytes(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyBytes", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_copyChars(t_BytesRef *self, PyObject *arg)
        {
          ::java::lang::CharSequence a0((jobject) NULL);

          if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
          {
            OBJ_CALL(self->object.copyChars(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyChars", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_deepCopyOf(PyTypeObject *type, PyObject *arg)
        {
          BytesRef a0((jobject) NULL);
          BytesRef result((jobject) NULL);

          if (!parseArg(arg, "k", BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BytesRef::deepCopyOf(a0));
            return t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "deepCopyOf", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_equals(t_BytesRef *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(BytesRef), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BytesRef_getUTF8SortedAsUTF16Comparator(PyTypeObject *type)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::BytesRef::getUTF8SortedAsUTF16Comparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_BytesRef_getUTF8SortedAsUnicodeComparator(PyTypeObject *type)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::BytesRef::getUTF8SortedAsUnicodeComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_BytesRef_grow(t_BytesRef *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.grow(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "grow", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_hashCode(t_BytesRef *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BytesRef), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BytesRef_isValid(t_BytesRef *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isValid());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_BytesRef_toString(t_BytesRef *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(BytesRef), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_BytesRef_utf8ToString(t_BytesRef *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.utf8ToString());
          return j2p(result);
        }

        static PyObject *t_BytesRef_get__bytes(t_BytesRef *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_bytes());
          return value.wrap();
        }
        static int t_BytesRef_set__bytes(t_BytesRef *self, PyObject *arg, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          if (!parseArg(arg, "[B", &value))
          {
            INT_CALL(self->object._set_bytes(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "bytes", arg);
          return -1;
        }

        static PyObject *t_BytesRef_get__length(t_BytesRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_length());
          return PyInt_FromLong((long) value);
        }
        static int t_BytesRef_set__length(t_BytesRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_length(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "length", arg);
          return -1;
        }

        static PyObject *t_BytesRef_get__offset(t_BytesRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_offset());
          return PyInt_FromLong((long) value);
        }
        static int t_BytesRef_set__offset(t_BytesRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_offset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "offset", arg);
          return -1;
        }

        static PyObject *t_BytesRef_get__uTF8SortedAsUTF16Comparator(t_BytesRef *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getUTF8SortedAsUTF16Comparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_BytesRef_get__uTF8SortedAsUnicodeComparator(t_BytesRef *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getUTF8SortedAsUnicodeComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_BytesRef_get__valid(t_BytesRef *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isValid());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/TokenMgrError.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *TokenMgrError::class$ = NULL;
            jmethodID *TokenMgrError::mids$ = NULL;
            bool TokenMgrError::live$ = false;

            jclass TokenMgrError::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/TokenMgrError");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
                mids$[mid_init$_8aaeec67] = env->getMethodID(cls, "<init>", "(ZIIILjava/lang/String;CI)V");
                mids$[mid_getMessage_14c7b5c5] = env->getMethodID(cls, "getMessage", "()Ljava/lang/String;");
                mids$[mid_LexicalError_e888c5f6] = env->getStaticMethodID(cls, "LexicalError", "(ZIIILjava/lang/String;C)Ljava/lang/String;");
                mids$[mid_addEscapes_97a5258f] = env->getStaticMethodID(cls, "addEscapes", "(Ljava/lang/String;)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TokenMgrError::TokenMgrError() : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            TokenMgrError::TokenMgrError(const ::java::lang::String & a0, jint a1) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

            TokenMgrError::TokenMgrError(jboolean a0, jint a1, jint a2, jint a3, const ::java::lang::String & a4, jchar a5, jint a6) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_8aaeec67, a0, a1, a2, a3, a4.this$, a5, a6)) {}

            ::java::lang::String TokenMgrError::getMessage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMessage_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args);
            static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data);
            static PyGetSetDef t_TokenMgrError__fields_[] = {
              DECLARE_GET_FIELD(t_TokenMgrError, message),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TokenMgrError__methods_[] = {
              DECLARE_METHOD(t_TokenMgrError, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TokenMgrError, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TokenMgrError, getMessage, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TokenMgrError, t_TokenMgrError, ::java::lang::Error, TokenMgrError, t_TokenMgrError_init_, 0, 0, t_TokenMgrError__fields_, 0, 0);

            void t_TokenMgrError::install(PyObject *module)
            {
              installType(&PY_TYPE(TokenMgrError), module, "TokenMgrError", 0);
            }

            void t_TokenMgrError::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "class_", make_descriptor(TokenMgrError::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "wrapfn_", make_descriptor(t_TokenMgrError::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TokenMgrError::initializeClass, 1)))
                return NULL;
              return t_TokenMgrError::wrap_Object(TokenMgrError(((t_TokenMgrError *) arg)->object.this$));
            }
            static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TokenMgrError::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  TokenMgrError object((jobject) NULL);

                  INT_CALL(object = TokenMgrError());
                  self->object = object;
                  break;
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  jint a1;
                  TokenMgrError object((jobject) NULL);

                  if (!parseArgs(args, "sI", &a0, &a1))
                  {
                    INT_CALL(object = TokenMgrError(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 7:
                {
                  jboolean a0;
                  jint a1;
                  jint a2;
                  jint a3;
                  ::java::lang::String a4((jobject) NULL);
                  jchar a5;
                  jint a6;
                  TokenMgrError object((jobject) NULL);

                  if (!parseArgs(args, "ZIIIsCI", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                  {
                    INT_CALL(object = TokenMgrError(a0, a1, a2, a3, a4, a5, a6));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getMessage());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(TokenMgrError), (PyObject *) self, "getMessage", args, 2);
            }

            static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getMessage());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentReadState::class$ = NULL;
        jmethodID *SegmentReadState::mids$ = NULL;
        jfieldID *SegmentReadState::fids$ = NULL;
        bool SegmentReadState::live$ = false;

        jclass SegmentReadState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentReadState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_de7693af] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentReadState;Ljava/lang/String;)V");
            mids$[mid_init$_2ca58583] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;I)V");
            mids$[mid_init$_29b19e65] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;ILjava/lang/String;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_context] = env->getFieldID(cls, "context", "Lorg/apache/lucene/store/IOContext;");
            fids$[fid_directory] = env->getFieldID(cls, "directory", "Lorg/apache/lucene/store/Directory;");
            fids$[fid_fieldInfos] = env->getFieldID(cls, "fieldInfos", "Lorg/apache/lucene/index/FieldInfos;");
            fids$[fid_segmentInfo] = env->getFieldID(cls, "segmentInfo", "Lorg/apache/lucene/index/SegmentInfo;");
            fids$[fid_segmentSuffix] = env->getFieldID(cls, "segmentSuffix", "Ljava/lang/String;");
            fids$[fid_termsIndexDivisor] = env->getFieldID(cls, "termsIndexDivisor", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentReadState::SegmentReadState(const SegmentReadState & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_de7693af, a0.this$, a1.this$)) {}

        SegmentReadState::SegmentReadState(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3, jint a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2ca58583, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

        SegmentReadState::SegmentReadState(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3, jint a4, const ::java::lang::String & a5) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_29b19e65, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5.this$)) {}

        ::org::apache::lucene::store::IOContext SegmentReadState::_get_context() const
        {
          return ::org::apache::lucene::store::IOContext(env->getObjectField(this$, fids$[fid_context]));
        }

        ::org::apache::lucene::store::Directory SegmentReadState::_get_directory() const
        {
          return ::org::apache::lucene::store::Directory(env->getObjectField(this$, fids$[fid_directory]));
        }

        ::org::apache::lucene::index::FieldInfos SegmentReadState::_get_fieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->getObjectField(this$, fids$[fid_fieldInfos]));
        }

        ::org::apache::lucene::index::SegmentInfo SegmentReadState::_get_segmentInfo() const
        {
          return ::org::apache::lucene::index::SegmentInfo(env->getObjectField(this$, fids$[fid_segmentInfo]));
        }

        ::java::lang::String SegmentReadState::_get_segmentSuffix() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_segmentSuffix]));
        }

        jint SegmentReadState::_get_termsIndexDivisor() const
        {
          return env->getIntField(this$, fids$[fid_termsIndexDivisor]);
        }

        void SegmentReadState::_set_termsIndexDivisor(jint a0) const
        {
          env->setIntField(this$, fids$[fid_termsIndexDivisor], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentReadState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentReadState_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentReadState_init_(t_SegmentReadState *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentReadState_get__context(t_SegmentReadState *self, void *data);
        static PyObject *t_SegmentReadState_get__directory(t_SegmentReadState *self, void *data);
        static PyObject *t_SegmentReadState_get__fieldInfos(t_SegmentReadState *self, void *data);
        static PyObject *t_SegmentReadState_get__segmentInfo(t_SegmentReadState *self, void *data);
        static PyObject *t_SegmentReadState_get__segmentSuffix(t_SegmentReadState *self, void *data);
        static PyObject *t_SegmentReadState_get__termsIndexDivisor(t_SegmentReadState *self, void *data);
        static int t_SegmentReadState_set__termsIndexDivisor(t_SegmentReadState *self, PyObject *arg, void *data);

        static PyGetSetDef t_SegmentReadState__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentReadState, context),
          DECLARE_GET_FIELD(t_SegmentReadState, directory),
          DECLARE_GET_FIELD(t_SegmentReadState, fieldInfos),
          DECLARE_GET_FIELD(t_SegmentReadState, segmentInfo),
          DECLARE_GET_FIELD(t_SegmentReadState, segmentSuffix),
          DECLARE_GETSET_FIELD(t_SegmentReadState, termsIndexDivisor),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentReadState__methods_[] = {
          DECLARE_METHOD(t_SegmentReadState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentReadState, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentReadState, t_SegmentReadState, ::java::lang::Object, SegmentReadState, t_SegmentReadState_init_, 0, 0, t_SegmentReadState__fields_, 0, 0);

        void t_SegmentReadState::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentReadState), module, "SegmentReadState", 0);
        }

        void t_SegmentReadState::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentReadState).tp_dict, "class_", make_descriptor(SegmentReadState::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentReadState).tp_dict, "wrapfn_", make_descriptor(t_SegmentReadState::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentReadState).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentReadState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentReadState::initializeClass, 1)))
            return NULL;
          return t_SegmentReadState::wrap_Object(SegmentReadState(((t_SegmentReadState *) arg)->object.this$));
        }
        static PyObject *t_SegmentReadState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentReadState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentReadState_init_(t_SegmentReadState *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              SegmentReadState a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              SegmentReadState object((jobject) NULL);

              if (!parseArgs(args, "ks", SegmentReadState::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SegmentReadState(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
              ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
              ::org::apache::lucene::store::IOContext a3((jobject) NULL);
              jint a4;
              SegmentReadState object((jobject) NULL);

              if (!parseArgs(args, "kkkkI", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = SegmentReadState(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
            goto err;
           case 6:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
              ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
              ::org::apache::lucene::store::IOContext a3((jobject) NULL);
              jint a4;
              ::java::lang::String a5((jobject) NULL);
              SegmentReadState object((jobject) NULL);

              if (!parseArgs(args, "kkkkIs", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                INT_CALL(object = SegmentReadState(a0, a1, a2, a3, a4, a5));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentReadState_get__context(t_SegmentReadState *self, void *data)
        {
          ::org::apache::lucene::store::IOContext value((jobject) NULL);
          OBJ_CALL(value = self->object._get_context());
          return ::org::apache::lucene::store::t_IOContext::wrap_Object(value);
        }

        static PyObject *t_SegmentReadState_get__directory(t_SegmentReadState *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object._get_directory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_SegmentReadState_get__fieldInfos(t_SegmentReadState *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_SegmentReadState_get__segmentInfo(t_SegmentReadState *self, void *data)
        {
          ::org::apache::lucene::index::SegmentInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentInfo());
          return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(value);
        }

        static PyObject *t_SegmentReadState_get__segmentSuffix(t_SegmentReadState *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentSuffix());
          return j2p(value);
        }

        static PyObject *t_SegmentReadState_get__termsIndexDivisor(t_SegmentReadState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_termsIndexDivisor());
          return PyInt_FromLong((long) value);
        }
        static int t_SegmentReadState_set__termsIndexDivisor(t_SegmentReadState *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_termsIndexDivisor(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "termsIndexDivisor", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$additive_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$additive_return::class$ = NULL;
          jmethodID *JavascriptParser$additive_return::mids$ = NULL;
          bool JavascriptParser$additive_return::live$ = false;

          jclass JavascriptParser$additive_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$additive_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$additive_return::JavascriptParser$additive_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$additive_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$additive_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$additive_return_init_(t_JavascriptParser$additive_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$additive_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$additive_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$additive_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$additive_return, t_JavascriptParser$additive_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$additive_return, t_JavascriptParser$additive_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$additive_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$additive_return), module, "JavascriptParser$additive_return", 0);
          }

          void t_JavascriptParser$additive_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$additive_return).tp_dict, "class_", make_descriptor(JavascriptParser$additive_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$additive_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$additive_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$additive_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$additive_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$additive_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$additive_return::wrap_Object(JavascriptParser$additive_return(((t_JavascriptParser$additive_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$additive_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$additive_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$additive_return_init_(t_JavascriptParser$additive_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$additive_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$additive_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/SegmentInfoWriter.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *SegmentInfoWriter::class$ = NULL;
        jmethodID *SegmentInfoWriter::mids$ = NULL;
        bool SegmentInfoWriter::live$ = false;

        jclass SegmentInfoWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/SegmentInfoWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_write_3589180f] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void SegmentInfoWriter::write(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_write_3589180f], a0.this$, a1.this$, a2.this$, a3.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_SegmentInfoWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfoWriter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfoWriter_write(t_SegmentInfoWriter *self, PyObject *args);

        static PyMethodDef t_SegmentInfoWriter__methods_[] = {
          DECLARE_METHOD(t_SegmentInfoWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfoWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfoWriter, write, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentInfoWriter, t_SegmentInfoWriter, ::java::lang::Object, SegmentInfoWriter, abstract_init, 0, 0, 0, 0, 0);

        void t_SegmentInfoWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentInfoWriter), module, "SegmentInfoWriter", 0);
        }

        void t_SegmentInfoWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentInfoWriter).tp_dict, "class_", make_descriptor(SegmentInfoWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentInfoWriter).tp_dict, "wrapfn_", make_descriptor(t_SegmentInfoWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentInfoWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentInfoWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentInfoWriter::initializeClass, 1)))
            return NULL;
          return t_SegmentInfoWriter::wrap_Object(SegmentInfoWriter(((t_SegmentInfoWriter *) arg)->object.this$));
        }
        static PyObject *t_SegmentInfoWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentInfoWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SegmentInfoWriter_write(t_SegmentInfoWriter *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);

          if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.write(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "write", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *TokenMgrError::class$ = NULL;
              jmethodID *TokenMgrError::mids$ = NULL;
              bool TokenMgrError::live$ = false;

              jclass TokenMgrError::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
                  mids$[mid_init$_8aaeec67] = env->getMethodID(cls, "<init>", "(ZIIILjava/lang/String;CI)V");
                  mids$[mid_getMessage_14c7b5c5] = env->getMethodID(cls, "getMessage", "()Ljava/lang/String;");
                  mids$[mid_LexicalError_e888c5f6] = env->getStaticMethodID(cls, "LexicalError", "(ZIIILjava/lang/String;C)Ljava/lang/String;");
                  mids$[mid_addEscapes_97a5258f] = env->getStaticMethodID(cls, "addEscapes", "(Ljava/lang/String;)Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              TokenMgrError::TokenMgrError() : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              TokenMgrError::TokenMgrError(const ::java::lang::String & a0, jint a1) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

              TokenMgrError::TokenMgrError(jboolean a0, jint a1, jint a2, jint a3, const ::java::lang::String & a4, jchar a5, jint a6) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_8aaeec67, a0, a1, a2, a3, a4.this$, a5, a6)) {}

              ::java::lang::String TokenMgrError::getMessage() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMessage_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg);
              static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds);
              static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args);
              static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data);
              static PyGetSetDef t_TokenMgrError__fields_[] = {
                DECLARE_GET_FIELD(t_TokenMgrError, message),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_TokenMgrError__methods_[] = {
                DECLARE_METHOD(t_TokenMgrError, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TokenMgrError, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TokenMgrError, getMessage, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(TokenMgrError, t_TokenMgrError, ::java::lang::Error, TokenMgrError, t_TokenMgrError_init_, 0, 0, t_TokenMgrError__fields_, 0, 0);

              void t_TokenMgrError::install(PyObject *module)
              {
                installType(&PY_TYPE(TokenMgrError), module, "TokenMgrError", 0);
              }

              void t_TokenMgrError::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "class_", make_descriptor(TokenMgrError::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "wrapfn_", make_descriptor(t_TokenMgrError::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TokenMgrError::initializeClass, 1)))
                  return NULL;
                return t_TokenMgrError::wrap_Object(TokenMgrError(((t_TokenMgrError *) arg)->object.this$));
              }
              static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TokenMgrError::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    TokenMgrError object((jobject) NULL);

                    INT_CALL(object = TokenMgrError());
                    self->object = object;
                    break;
                  }
                  goto err;
                 case 2:
                  {
                    ::java::lang::String a0((jobject) NULL);
                    jint a1;
                    TokenMgrError object((jobject) NULL);

                    if (!parseArgs(args, "sI", &a0, &a1))
                    {
                      INT_CALL(object = TokenMgrError(a0, a1));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 7:
                  {
                    jboolean a0;
                    jint a1;
                    jint a2;
                    jint a3;
                    ::java::lang::String a4((jobject) NULL);
                    jchar a5;
                    jint a6;
                    TokenMgrError object((jobject) NULL);

                    if (!parseArgs(args, "ZIIIsCI", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                    {
                      INT_CALL(object = TokenMgrError(a0, a1, a2, a3, a4, a5, a6));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.getMessage());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(TokenMgrError), (PyObject *) self, "getMessage", args, 2);
              }

              static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getMessage());
                return j2p(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/Field.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Number.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/document/Field$TermVector.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/document/Field$Index.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *Field::class$ = NULL;
        jmethodID *Field::mids$ = NULL;
        bool Field::live$ = false;

        jclass Field::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/Field");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7d0c5392] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_init$_23e5278e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/io/Reader;)V");
            mids$[mid_init$_97e62b21] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[B)V");
            mids$[mid_init$_65c4643a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/io/Reader;Lorg/apache/lucene/document/Field$TermVector;)V");
            mids$[mid_init$_36a37f8e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/document/Field$TermVector;)V");
            mids$[mid_init$_4a37b91f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[BLorg/apache/lucene/document/FieldType;)V");
            mids$[mid_init$_3af3ec14] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/document/FieldType;)V");
            mids$[mid_init$_406439e8] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/io/Reader;Lorg/apache/lucene/document/FieldType;)V");
            mids$[mid_init$_7ccdd79c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/document/FieldType;)V");
            mids$[mid_init$_9c27c9b4] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/document/FieldType;)V");
            mids$[mid_init$_5c377d43] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/document/Field$Store;Lorg/apache/lucene/document/Field$Index;)V");
            mids$[mid_init$_eab5cd19] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[BII)V");
            mids$[mid_init$_596be1b9] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/document/Field$Store;Lorg/apache/lucene/document/Field$Index;Lorg/apache/lucene/document/Field$TermVector;)V");
            mids$[mid_init$_b94bfb2f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[BIILorg/apache/lucene/document/FieldType;)V");
            mids$[mid_binaryValue_4ae19461] = env->getMethodID(cls, "binaryValue", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_boost_54c6a176] = env->getMethodID(cls, "boost", "()F");
            mids$[mid_fieldType_a2615189] = env->getMethodID(cls, "fieldType", "()Lorg/apache/lucene/document/FieldType;");
            mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
            mids$[mid_numericValue_ee47e3e1] = env->getMethodID(cls, "numericValue", "()Ljava/lang/Number;");
            mids$[mid_readerValue_b6f16bdd] = env->getMethodID(cls, "readerValue", "()Ljava/io/Reader;");
            mids$[mid_setBoost_06298cab] = env->getMethodID(cls, "setBoost", "(F)V");
            mids$[mid_setByteValue_b2271687] = env->getMethodID(cls, "setByteValue", "(B)V");
            mids$[mid_setBytesValue_49b4f12b] = env->getMethodID(cls, "setBytesValue", "([B)V");
            mids$[mid_setBytesValue_7bc03dc4] = env->getMethodID(cls, "setBytesValue", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_setDoubleValue_5d1c7645] = env->getMethodID(cls, "setDoubleValue", "(D)V");
            mids$[mid_setFloatValue_06298cab] = env->getMethodID(cls, "setFloatValue", "(F)V");
            mids$[mid_setIntValue_39c7bd3c] = env->getMethodID(cls, "setIntValue", "(I)V");
            mids$[mid_setLongValue_0ee6df2f] = env->getMethodID(cls, "setLongValue", "(J)V");
            mids$[mid_setReaderValue_cf2e3c10] = env->getMethodID(cls, "setReaderValue", "(Ljava/io/Reader;)V");
            mids$[mid_setShortValue_3bc40c6a] = env->getMethodID(cls, "setShortValue", "(S)V");
            mids$[mid_setStringValue_5fdc3f48] = env->getMethodID(cls, "setStringValue", "(Ljava/lang/String;)V");
            mids$[mid_setTokenStream_c7c794dc] = env->getMethodID(cls, "setTokenStream", "(Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_stringValue_14c7b5c5] = env->getMethodID(cls, "stringValue", "()Ljava/lang/String;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_tokenStream_cea65119] = env->getMethodID(cls, "tokenStream", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
            mids$[mid_tokenStreamValue_71f550c9] = env->getMethodID(cls, "tokenStreamValue", "()Lorg/apache/lucene/analysis/TokenStream;");
            mids$[mid_translateFieldType_2095598c] = env->getStaticMethodID(cls, "translateFieldType", "(Lorg/apache/lucene/document/Field$Store;Lorg/apache/lucene/document/Field$Index;Lorg/apache/lucene/document/Field$TermVector;)Lorg/apache/lucene/document/FieldType;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Field::Field(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7d0c5392, a0.this$, a1.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::java::io::Reader & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_23e5278e, a0.this$, a1.this$)) {}

        Field::Field(const ::java::lang::String & a0, const JArray< jbyte > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_97e62b21, a0.this$, a1.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::java::io::Reader & a1, const ::org::apache::lucene::document::Field$TermVector & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_65c4643a, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::document::Field$TermVector & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_36a37f8e, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const JArray< jbyte > & a1, const ::org::apache::lucene::document::FieldType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4a37b91f, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::document::FieldType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3af3ec14, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::java::io::Reader & a1, const ::org::apache::lucene::document::FieldType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_406439e8, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::document::FieldType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7ccdd79c, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::document::FieldType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9c27c9b4, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::document::Field$Store & a2, const ::org::apache::lucene::document::Field$Index & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5c377d43, a0.this$, a1.this$, a2.this$, a3.this$)) {}

        Field::Field(const ::java::lang::String & a0, const JArray< jbyte > & a1, jint a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_eab5cd19, a0.this$, a1.this$, a2, a3)) {}

        Field::Field(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::document::Field$Store & a2, const ::org::apache::lucene::document::Field$Index & a3, const ::org::apache::lucene::document::Field$TermVector & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_596be1b9, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

        Field::Field(const ::java::lang::String & a0, const JArray< jbyte > & a1, jint a2, jint a3, const ::org::apache::lucene::document::FieldType & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b94bfb2f, a0.this$, a1.this$, a2, a3, a4.this$)) {}

        ::org::apache::lucene::util::BytesRef Field::binaryValue() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_binaryValue_4ae19461]));
        }

        jfloat Field::boost() const
        {
          return env->callFloatMethod(this$, mids$[mid_boost_54c6a176]);
        }

        ::org::apache::lucene::document::FieldType Field::fieldType() const
        {
          return ::org::apache::lucene::document::FieldType(env->callObjectMethod(this$, mids$[mid_fieldType_a2615189]));
        }

        ::java::lang::String Field::name() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
        }

        ::java::lang::Number Field::numericValue() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_numericValue_ee47e3e1]));
        }

        ::java::io::Reader Field::readerValue() const
        {
          return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_readerValue_b6f16bdd]));
        }

        void Field::setBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBoost_06298cab], a0);
        }

        void Field::setByteValue(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setByteValue_b2271687], a0);
        }

        void Field::setBytesValue(const JArray< jbyte > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBytesValue_49b4f12b], a0.this$);
        }

        void Field::setBytesValue(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBytesValue_7bc03dc4], a0.this$);
        }

        void Field::setDoubleValue(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDoubleValue_5d1c7645], a0);
        }

        void Field::setFloatValue(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFloatValue_06298cab], a0);
        }

        void Field::setIntValue(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setIntValue_39c7bd3c], a0);
        }

        void Field::setLongValue(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLongValue_0ee6df2f], a0);
        }

        void Field::setReaderValue(const ::java::io::Reader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setReaderValue_cf2e3c10], a0.this$);
        }

        void Field::setShortValue(jshort a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setShortValue_3bc40c6a], a0);
        }

        void Field::setStringValue(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStringValue_5fdc3f48], a0.this$);
        }

        void Field::setTokenStream(const ::org::apache::lucene::analysis::TokenStream & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTokenStream_c7c794dc], a0.this$);
        }

        ::java::lang::String Field::stringValue() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_stringValue_14c7b5c5]));
        }

        ::java::lang::String Field::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::org::apache::lucene::analysis::TokenStream Field::tokenStream(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_tokenStream_cea65119], a0.this$, a1.this$));
        }

        ::org::apache::lucene::analysis::TokenStream Field::tokenStreamValue() const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_tokenStreamValue_71f550c9]));
        }

        ::org::apache::lucene::document::FieldType Field::translateFieldType(const ::org::apache::lucene::document::Field$Store & a0, const ::org::apache::lucene::document::Field$Index & a1, const ::org::apache::lucene::document::Field$TermVector & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::document::FieldType(env->callStaticObjectMethod(cls, mids$[mid_translateFieldType_2095598c], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_Field_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Field_init_(t_Field *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Field_binaryValue(t_Field *self);
        static PyObject *t_Field_boost(t_Field *self);
        static PyObject *t_Field_fieldType(t_Field *self);
        static PyObject *t_Field_name(t_Field *self);
        static PyObject *t_Field_numericValue(t_Field *self);
        static PyObject *t_Field_readerValue(t_Field *self);
        static PyObject *t_Field_setBoost(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setByteValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setBytesValue(t_Field *self, PyObject *args);
        static PyObject *t_Field_setDoubleValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setFloatValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setIntValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setLongValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setReaderValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setShortValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setStringValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setTokenStream(t_Field *self, PyObject *arg);
        static PyObject *t_Field_stringValue(t_Field *self);
        static PyObject *t_Field_toString(t_Field *self, PyObject *args);
        static PyObject *t_Field_tokenStream(t_Field *self, PyObject *args);
        static PyObject *t_Field_tokenStreamValue(t_Field *self);
        static PyObject *t_Field_translateFieldType(PyTypeObject *type, PyObject *args);
        static int t_Field_set__byteValue(t_Field *self, PyObject *arg, void *data);
        static int t_Field_set__bytesValue(t_Field *self, PyObject *arg, void *data);
        static int t_Field_set__doubleValue(t_Field *self, PyObject *arg, void *data);
        static int t_Field_set__floatValue(t_Field *self, PyObject *arg, void *data);
        static int t_Field_set__intValue(t_Field *self, PyObject *arg, void *data);
        static int t_Field_set__longValue(t_Field *self, PyObject *arg, void *data);
        static int t_Field_set__shortValue(t_Field *self, PyObject *arg, void *data);
        static PyGetSetDef t_Field__fields_[] = {
          DECLARE_SET_FIELD(t_Field, byteValue),
          DECLARE_SET_FIELD(t_Field, bytesValue),
          DECLARE_SET_FIELD(t_Field, doubleValue),
          DECLARE_SET_FIELD(t_Field, floatValue),
          DECLARE_SET_FIELD(t_Field, intValue),
          DECLARE_SET_FIELD(t_Field, longValue),
          DECLARE_SET_FIELD(t_Field, shortValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Field__methods_[] = {
          DECLARE_METHOD(t_Field, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field, binaryValue, METH_NOARGS),
          DECLARE_METHOD(t_Field, boost, METH_NOARGS),
          DECLARE_METHOD(t_Field, fieldType, METH_NOARGS),
          DECLARE_METHOD(t_Field, name, METH_NOARGS),
          DECLARE_METHOD(t_Field, numericValue, METH_NOARGS),
          DECLARE_METHOD(t_Field, readerValue, METH_NOARGS),
          DECLARE_METHOD(t_Field, setBoost, METH_O),
          DECLARE_METHOD(t_Field, setByteValue, METH_O),
          DECLARE_METHOD(t_Field, setBytesValue, METH_VARARGS),
          DECLARE_METHOD(t_Field, setDoubleValue, METH_O),
          DECLARE_METHOD(t_Field, setFloatValue, METH_O),
          DECLARE_METHOD(t_Field, setIntValue, METH_O),
          DECLARE_METHOD(t_Field, setLongValue, METH_O),
          DECLARE_METHOD(t_Field, setReaderValue, METH_O),
          DECLARE_METHOD(t_Field, setShortValue, METH_O),
          DECLARE_METHOD(t_Field, setStringValue, METH_O),
          DECLARE_METHOD(t_Field, setTokenStream, METH_O),
          DECLARE_METHOD(t_Field, stringValue, METH_NOARGS),
          DECLARE_METHOD(t_Field, toString, METH_VARARGS),
          DECLARE_METHOD(t_Field, tokenStream, METH_VARARGS),
          DECLARE_METHOD(t_Field, tokenStreamValue, METH_NOARGS),
          DECLARE_METHOD(t_Field, translateFieldType, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Field, t_Field, ::java::lang::Object, Field, t_Field_init_, 0, 0, t_Field__fields_, 0, 0);

        void t_Field::install(PyObject *module)
        {
          installType(&PY_TYPE(Field), module, "Field", 0);
          PyDict_SetItemString(PY_TYPE(Field).tp_dict, "TermVector", make_descriptor(&PY_TYPE(Field$TermVector)));
          PyDict_SetItemString(PY_TYPE(Field).tp_dict, "Index", make_descriptor(&PY_TYPE(Field$Index)));
          PyDict_SetItemString(PY_TYPE(Field).tp_dict, "Store", make_descriptor(&PY_TYPE(Field$Store)));
        }

        void t_Field::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Field).tp_dict, "class_", make_descriptor(Field::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Field).tp_dict, "wrapfn_", make_descriptor(t_Field::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Field).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Field_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Field::initializeClass, 1)))
            return NULL;
          return t_Field::wrap_Object(Field(((t_Field *) arg)->object.this$));
        }
        static PyObject *t_Field_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Field::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Field_init_(t_Field *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
              {
                INT_CALL(object = Field(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::io::Reader a1((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
              {
                INT_CALL(object = Field(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "s[B", &a0, &a1))
              {
                INT_CALL(object = Field(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::io::Reader a1((jobject) NULL);
              ::org::apache::lucene::document::Field$TermVector a2((jobject) NULL);
              PyTypeObject **p2;
              Field object((jobject) NULL);

              if (!parseArgs(args, "skK", ::java::io::Reader::initializeClass, ::org::apache::lucene::document::Field$TermVector::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$TermVector::parameters_))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
              ::org::apache::lucene::document::Field$TermVector a2((jobject) NULL);
              PyTypeObject **p2;
              Field object((jobject) NULL);

              if (!parseArgs(args, "skK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::document::Field$TermVector::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$TermVector::parameters_))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "s[Bk", ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "skk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::io::Reader a1((jobject) NULL);
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "skk", ::java::io::Reader::initializeClass, ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "ssk", ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "skk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              ::org::apache::lucene::document::Field$Index a3((jobject) NULL);
              PyTypeObject **p3;
              Field object((jobject) NULL);

              if (!parseArgs(args, "ssKK", ::org::apache::lucene::document::Field$Store::initializeClass, ::org::apache::lucene::document::Field$Index::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_, &a3, &p3, ::org::apache::lucene::document::t_Field$Index::parameters_))
              {
                INT_CALL(object = Field(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              jint a2;
              jint a3;
              Field object((jobject) NULL);

              if (!parseArgs(args, "s[BII", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = Field(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              ::org::apache::lucene::document::Field$Index a3((jobject) NULL);
              PyTypeObject **p3;
              ::org::apache::lucene::document::Field$TermVector a4((jobject) NULL);
              PyTypeObject **p4;
              Field object((jobject) NULL);

              if (!parseArgs(args, "ssKKK", ::org::apache::lucene::document::Field$Store::initializeClass, ::org::apache::lucene::document::Field$Index::initializeClass, ::org::apache::lucene::document::Field$TermVector::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_, &a3, &p3, ::org::apache::lucene::document::t_Field$Index::parameters_, &a4, &p4, ::org::apache::lucene::document::t_Field$TermVector::parameters_))
              {
                INT_CALL(object = Field(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              jint a2;
              jint a3;
              ::org::apache::lucene::document::FieldType a4((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "s[BIIk", ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = Field(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Field_binaryValue(t_Field *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.binaryValue());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_Field_boost(t_Field *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.boost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Field_fieldType(t_Field *self)
        {
          ::org::apache::lucene::document::FieldType result((jobject) NULL);
          OBJ_CALL(result = self->object.fieldType());
          return ::org::apache::lucene::document::t_FieldType::wrap_Object(result);
        }

        static PyObject *t_Field_name(t_Field *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.name());
          return j2p(result);
        }

        static PyObject *t_Field_numericValue(t_Field *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.numericValue());
          return ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_Field_readerValue(t_Field *self)
        {
          ::java::io::Reader result((jobject) NULL);
          OBJ_CALL(result = self->object.readerValue());
          return ::java::io::t_Reader::wrap_Object(result);
        }

        static PyObject *t_Field_setBoost(t_Field *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBoost", arg);
          return NULL;
        }

        static PyObject *t_Field_setByteValue(t_Field *self, PyObject *arg)
        {
          jbyte a0;

          if (!parseArg(arg, "B", &a0))
          {
            OBJ_CALL(self->object.setByteValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setByteValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setBytesValue(t_Field *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(self->object.setBytesValue(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setBytesValue(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "setBytesValue", args);
          return NULL;
        }

        static PyObject *t_Field_setDoubleValue(t_Field *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setDoubleValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDoubleValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setFloatValue(t_Field *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setFloatValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setFloatValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setIntValue(t_Field *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setIntValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setIntValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setLongValue(t_Field *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.setLongValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLongValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setReaderValue(t_Field *self, PyObject *arg)
        {
          ::java::io::Reader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setReaderValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setReaderValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setShortValue(t_Field *self, PyObject *arg)
        {
          jshort a0;

          if (!parseArg(arg, "S", &a0))
          {
            OBJ_CALL(self->object.setShortValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setShortValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setStringValue(t_Field *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.setStringValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStringValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setTokenStream(t_Field *self, PyObject *arg)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setTokenStream(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setTokenStream", arg);
          return NULL;
        }

        static PyObject *t_Field_stringValue(t_Field *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.stringValue());
          return j2p(result);
        }

        static PyObject *t_Field_toString(t_Field *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(Field), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Field_tokenStream(t_Field *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.tokenStream(a0, a1));
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "tokenStream", args);
          return NULL;
        }

        static PyObject *t_Field_tokenStreamValue(t_Field *self)
        {
          ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);
          OBJ_CALL(result = self->object.tokenStreamValue());
          return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
        }

        static PyObject *t_Field_translateFieldType(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::document::Field$Store a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::document::Field$Index a1((jobject) NULL);
          PyTypeObject **p1;
          ::org::apache::lucene::document::Field$TermVector a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::document::FieldType result((jobject) NULL);

          if (!parseArgs(args, "KKK", ::org::apache::lucene::document::Field$Store::initializeClass, ::org::apache::lucene::document::Field$Index::initializeClass, ::org::apache::lucene::document::Field$TermVector::initializeClass, &a0, &p0, ::org::apache::lucene::document::t_Field$Store::parameters_, &a1, &p1, ::org::apache::lucene::document::t_Field$Index::parameters_, &a2, &p2, ::org::apache::lucene::document::t_Field$TermVector::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::Field::translateFieldType(a0, a1, a2));
            return ::org::apache::lucene::document::t_FieldType::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "translateFieldType", args);
          return NULL;
        }

        static int t_Field_set__byteValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jbyte value;
            if (!parseArg(arg, "B", &value))
            {
              INT_CALL(self->object.setByteValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "byteValue", arg);
          return -1;
        }

        static int t_Field_set__bytesValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            JArray< jbyte > value((jobject) NULL);
            if (!parseArg(arg, "[B", &value))
            {
              INT_CALL(self->object.setBytesValue(value));
              return 0;
            }
          }
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setBytesValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bytesValue", arg);
          return -1;
        }

        static int t_Field_set__doubleValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setDoubleValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "doubleValue", arg);
          return -1;
        }

        static int t_Field_set__floatValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setFloatValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "floatValue", arg);
          return -1;
        }

        static int t_Field_set__intValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setIntValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "intValue", arg);
          return -1;
        }

        static int t_Field_set__longValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setLongValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "longValue", arg);
          return -1;
        }

        static int t_Field_set__shortValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jshort value;
            if (!parseArg(arg, "S", &value))
            {
              INT_CALL(self->object.setShortValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "shortValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FuzzyTermsEnum.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "org/apache/lucene/index/TermState.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FuzzyTermsEnum::class$ = NULL;
        jmethodID *FuzzyTermsEnum::mids$ = NULL;
        bool FuzzyTermsEnum::live$ = false;

        jclass FuzzyTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FuzzyTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_538f73aa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;Lorg/apache/lucene/index/Term;FIZ)V");
            mids$[mid_docFreq_54c6a179] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_docs_e6d4c3ef] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_docsAndPositions_b5d9c11b] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_getMinSimilarity_54c6a176] = env->getMethodID(cls, "getMinSimilarity", "()F");
            mids$[mid_getScaleFactor_54c6a176] = env->getMethodID(cls, "getScaleFactor", "()F");
            mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
            mids$[mid_seekCeil_fa9d72c4] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_seekExact_7bc03dc8] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_seekExact_0ee6df2f] = env->getMethodID(cls, "seekExact", "(J)V");
            mids$[mid_seekExact_fe46da51] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_term_4ae19461] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_termState_3e41fede] = env->getMethodID(cls, "termState", "()Lorg/apache/lucene/index/TermState;");
            mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");
            mids$[mid_maxEditDistanceChanged_0741f897] = env->getMethodID(cls, "maxEditDistanceChanged", "(Lorg/apache/lucene/util/BytesRef;IZ)V");
            mids$[mid_getAutomatonEnum_6dd5cb2f] = env->getMethodID(cls, "getAutomatonEnum", "(ILorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_setEnum_0f660bfe] = env->getMethodID(cls, "setEnum", "(Lorg/apache/lucene/index/TermsEnum;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FuzzyTermsEnum::FuzzyTermsEnum(const ::org::apache::lucene::index::Terms & a0, const ::org::apache::lucene::util::AttributeSource & a1, const ::org::apache::lucene::index::Term & a2, jfloat a3, jint a4, jboolean a5) : ::org::apache::lucene::index::TermsEnum(env->newObject(initializeClass, &mids$, mid_init$_538f73aa, a0.this$, a1.this$, a2.this$, a3, a4, a5)) {}

        jint FuzzyTermsEnum::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_54c6a179]);
        }

        ::org::apache::lucene::index::DocsEnum FuzzyTermsEnum::docs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_e6d4c3ef], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum FuzzyTermsEnum::docsAndPositions(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsAndPositionsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_b5d9c11b], a0.this$, a1.this$, a2));
        }

        ::java::util::Comparator FuzzyTermsEnum::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        jfloat FuzzyTermsEnum::getMinSimilarity() const
        {
          return env->callFloatMethod(this$, mids$[mid_getMinSimilarity_54c6a176]);
        }

        jfloat FuzzyTermsEnum::getScaleFactor() const
        {
          return env->callFloatMethod(this$, mids$[mid_getScaleFactor_54c6a176]);
        }

        ::org::apache::lucene::util::BytesRef FuzzyTermsEnum::next() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
        }

        jlong FuzzyTermsEnum::ord() const
        {
          return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
        }

        ::org::apache::lucene::index::TermsEnum$SeekStatus FuzzyTermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_fa9d72c4], a0.this$));
        }

        jboolean FuzzyTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_seekExact_7bc03dc8], a0.this$);
        }

        void FuzzyTermsEnum::seekExact(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_0ee6df2f], a0);
        }

        void FuzzyTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermState & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_fe46da51], a0.this$, a1.this$);
        }

        ::org::apache::lucene::util::BytesRef FuzzyTermsEnum::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_4ae19461]));
        }

        ::org::apache::lucene::index::TermState FuzzyTermsEnum::termState() const
        {
          return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_termState_3e41fede]));
        }

        jlong FuzzyTermsEnum::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/FuzzyTermsEnum$LevenshteinAutomataAttributeImpl.h"
#include "org/apache/lucene/search/FuzzyTermsEnum$LevenshteinAutomataAttribute.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FuzzyTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FuzzyTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FuzzyTermsEnum_init_(t_FuzzyTermsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FuzzyTermsEnum_docFreq(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_docs(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_docsAndPositions(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_getComparator(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_getMinSimilarity(t_FuzzyTermsEnum *self);
        static PyObject *t_FuzzyTermsEnum_getScaleFactor(t_FuzzyTermsEnum *self);
        static PyObject *t_FuzzyTermsEnum_next(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_ord(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_seekCeil(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_seekExact(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_term(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_termState(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_totalTermFreq(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_get__comparator(t_FuzzyTermsEnum *self, void *data);
        static PyObject *t_FuzzyTermsEnum_get__minSimilarity(t_FuzzyTermsEnum *self, void *data);
        static PyObject *t_FuzzyTermsEnum_get__scaleFactor(t_FuzzyTermsEnum *self, void *data);
        static PyGetSetDef t_FuzzyTermsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_FuzzyTermsEnum, comparator),
          DECLARE_GET_FIELD(t_FuzzyTermsEnum, minSimilarity),
          DECLARE_GET_FIELD(t_FuzzyTermsEnum, scaleFactor),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FuzzyTermsEnum__methods_[] = {
          DECLARE_METHOD(t_FuzzyTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyTermsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyTermsEnum, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, docs, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, docsAndPositions, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, getMinSimilarity, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, getScaleFactor, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, next, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, ord, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, seekCeil, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, seekExact, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, term, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, termState, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FuzzyTermsEnum, t_FuzzyTermsEnum, ::org::apache::lucene::index::TermsEnum, FuzzyTermsEnum, t_FuzzyTermsEnum_init_, PyObject_SelfIter, ((PyObject *(*)(t_FuzzyTermsEnum *)) get_next< t_FuzzyTermsEnum,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_FuzzyTermsEnum__fields_, 0, 0);

        void t_FuzzyTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(FuzzyTermsEnum), module, "FuzzyTermsEnum", 0);
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum).tp_dict, "LevenshteinAutomataAttributeImpl", make_descriptor(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl)));
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum).tp_dict, "LevenshteinAutomataAttribute", make_descriptor(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttribute)));
        }

        void t_FuzzyTermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum).tp_dict, "class_", make_descriptor(FuzzyTermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_FuzzyTermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FuzzyTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FuzzyTermsEnum::initializeClass, 1)))
            return NULL;
          return t_FuzzyTermsEnum::wrap_Object(FuzzyTermsEnum(((t_FuzzyTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_FuzzyTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FuzzyTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FuzzyTermsEnum_init_(t_FuzzyTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          ::org::apache::lucene::util::AttributeSource a1((jobject) NULL);
          ::org::apache::lucene::index::Term a2((jobject) NULL);
          jfloat a3;
          jint a4;
          jboolean a5;
          FuzzyTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "kkkFIZ", ::org::apache::lucene::index::Terms::initializeClass, ::org::apache::lucene::util::AttributeSource::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
          {
            INT_CALL(object = FuzzyTermsEnum(a0, a1, a2, a3, a4, a5));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FuzzyTermsEnum_docFreq(t_FuzzyTermsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docFreq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_docs(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docs(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "docs", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_docsAndPositions(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsAndPositionsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "docsAndPositions", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_getComparator(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_getMinSimilarity(t_FuzzyTermsEnum *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getMinSimilarity());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_FuzzyTermsEnum_getScaleFactor(t_FuzzyTermsEnum *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getScaleFactor());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_FuzzyTermsEnum_next(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "next", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_ord(t_FuzzyTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "ord", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_seekCeil(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.seekCeil(a0));
            return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "seekCeil", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_seekExact(t_FuzzyTermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.seekExact(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.seekExact(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::index::TermState a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.seekExact(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "seekExact", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_term(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.term());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "term", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_termState(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermState result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.termState());
            return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "termState", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_totalTermFreq(t_FuzzyTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.totalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "totalTermFreq", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_get__comparator(t_FuzzyTermsEnum *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_FuzzyTermsEnum_get__minSimilarity(t_FuzzyTermsEnum *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getMinSimilarity());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_FuzzyTermsEnum_get__scaleFactor(t_FuzzyTermsEnum *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getScaleFactor());
          return PyFloat_FromDouble((double) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/es/SpanishAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {

          ::java::lang::Class *SpanishAnalyzer::class$ = NULL;
          jmethodID *SpanishAnalyzer::mids$ = NULL;
          bool SpanishAnalyzer::live$ = false;
          ::java::lang::String *SpanishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass SpanishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/es/SpanishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanishAnalyzer::SpanishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          SpanishAnalyzer::SpanishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          SpanishAnalyzer::SpanishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet SpanishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {
          static PyObject *t_SpanishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanishAnalyzer_init_(t_SpanishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_SpanishAnalyzer_get__defaultStopSet(t_SpanishAnalyzer *self, void *data);
          static PyGetSetDef t_SpanishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_SpanishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_SpanishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanishAnalyzer, t_SpanishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, SpanishAnalyzer, t_SpanishAnalyzer_init_, 0, 0, t_SpanishAnalyzer__fields_, 0, 0);

          void t_SpanishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanishAnalyzer), module, "SpanishAnalyzer", 0);
          }

          void t_SpanishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanishAnalyzer).tp_dict, "class_", make_descriptor(SpanishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_SpanishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SpanishAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(SpanishAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*SpanishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_SpanishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_SpanishAnalyzer::wrap_Object(SpanishAnalyzer(((t_SpanishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_SpanishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanishAnalyzer_init_(t_SpanishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                SpanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = SpanishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                SpanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SpanishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                SpanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SpanishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::es::SpanishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_SpanishAnalyzer_get__defaultStopSet(t_SpanishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/AbstractAppendingLongBuffer$Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *AbstractAppendingLongBuffer$Iterator::class$ = NULL;
          jmethodID *AbstractAppendingLongBuffer$Iterator::mids$ = NULL;
          bool AbstractAppendingLongBuffer$Iterator::live$ = false;

          jclass AbstractAppendingLongBuffer$Iterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/AbstractAppendingLongBuffer$Iterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
              mids$[mid_next_54c6a17a] = env->getMethodID(cls, "next", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean AbstractAppendingLongBuffer$Iterator::hasNext() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasNext_54c6a16a]);
          }

          jlong AbstractAppendingLongBuffer$Iterator::next() const
          {
            return env->callLongMethod(this$, mids$[mid_next_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_AbstractAppendingLongBuffer$Iterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAppendingLongBuffer$Iterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAppendingLongBuffer$Iterator_hasNext(t_AbstractAppendingLongBuffer$Iterator *self);
          static PyObject *t_AbstractAppendingLongBuffer$Iterator_next(t_AbstractAppendingLongBuffer$Iterator *self);

          static PyMethodDef t_AbstractAppendingLongBuffer$Iterator__methods_[] = {
            DECLARE_METHOD(t_AbstractAppendingLongBuffer$Iterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer$Iterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer$Iterator, hasNext, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer$Iterator, next, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractAppendingLongBuffer$Iterator, t_AbstractAppendingLongBuffer$Iterator, ::java::lang::Object, AbstractAppendingLongBuffer$Iterator, abstract_init, 0, 0, 0, 0, 0);

          void t_AbstractAppendingLongBuffer$Iterator::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractAppendingLongBuffer$Iterator), module, "AbstractAppendingLongBuffer$Iterator", 0);
          }

          void t_AbstractAppendingLongBuffer$Iterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractAppendingLongBuffer$Iterator).tp_dict, "class_", make_descriptor(AbstractAppendingLongBuffer$Iterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractAppendingLongBuffer$Iterator).tp_dict, "wrapfn_", make_descriptor(t_AbstractAppendingLongBuffer$Iterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractAppendingLongBuffer$Iterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractAppendingLongBuffer$Iterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractAppendingLongBuffer$Iterator::initializeClass, 1)))
              return NULL;
            return t_AbstractAppendingLongBuffer$Iterator::wrap_Object(AbstractAppendingLongBuffer$Iterator(((t_AbstractAppendingLongBuffer$Iterator *) arg)->object.this$));
          }
          static PyObject *t_AbstractAppendingLongBuffer$Iterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractAppendingLongBuffer$Iterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractAppendingLongBuffer$Iterator_hasNext(t_AbstractAppendingLongBuffer$Iterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasNext());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_AbstractAppendingLongBuffer$Iterator_next(t_AbstractAppendingLongBuffer$Iterator *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.next());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/AnalyzerWrapper.h"
#include "java/lang/String.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *AnalyzerWrapper::class$ = NULL;
        jmethodID *AnalyzerWrapper::mids$ = NULL;
        bool AnalyzerWrapper::live$ = false;

        jclass AnalyzerWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/AnalyzerWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getOffsetGap_5fdc3f57] = env->getMethodID(cls, "getOffsetGap", "(Ljava/lang/String;)I");
            mids$[mid_getPositionIncrementGap_5fdc3f57] = env->getMethodID(cls, "getPositionIncrementGap", "(Ljava/lang/String;)I");
            mids$[mid_initReader_d8fb1c81] = env->getMethodID(cls, "initReader", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;");
            mids$[mid_wrapComponents_46d74455] = env->getMethodID(cls, "wrapComponents", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_getWrappedAnalyzer_29a2299f] = env->getMethodID(cls, "getWrappedAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");
            mids$[mid_wrapReader_d8fb1c81] = env->getMethodID(cls, "wrapReader", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint AnalyzerWrapper::getOffsetGap(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getOffsetGap_5fdc3f57], a0.this$);
        }

        jint AnalyzerWrapper::getPositionIncrementGap(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getPositionIncrementGap_5fdc3f57], a0.this$);
        }

        ::java::io::Reader AnalyzerWrapper::initReader(const ::java::lang::String & a0, const ::java::io::Reader & a1) const
        {
          return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_initReader_d8fb1c81], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_AnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AnalyzerWrapper_getOffsetGap(t_AnalyzerWrapper *self, PyObject *args);
        static PyObject *t_AnalyzerWrapper_getPositionIncrementGap(t_AnalyzerWrapper *self, PyObject *args);
        static PyObject *t_AnalyzerWrapper_initReader(t_AnalyzerWrapper *self, PyObject *args);

        static PyMethodDef t_AnalyzerWrapper__methods_[] = {
          DECLARE_METHOD(t_AnalyzerWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AnalyzerWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AnalyzerWrapper, getOffsetGap, METH_VARARGS),
          DECLARE_METHOD(t_AnalyzerWrapper, getPositionIncrementGap, METH_VARARGS),
          DECLARE_METHOD(t_AnalyzerWrapper, initReader, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AnalyzerWrapper, t_AnalyzerWrapper, ::org::apache::lucene::analysis::Analyzer, AnalyzerWrapper, abstract_init, 0, 0, 0, 0, 0);

        void t_AnalyzerWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(AnalyzerWrapper), module, "AnalyzerWrapper", 0);
        }

        void t_AnalyzerWrapper::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AnalyzerWrapper).tp_dict, "class_", make_descriptor(AnalyzerWrapper::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AnalyzerWrapper).tp_dict, "wrapfn_", make_descriptor(t_AnalyzerWrapper::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AnalyzerWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AnalyzerWrapper::initializeClass, 1)))
            return NULL;
          return t_AnalyzerWrapper::wrap_Object(AnalyzerWrapper(((t_AnalyzerWrapper *) arg)->object.this$));
        }
        static PyObject *t_AnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AnalyzerWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_AnalyzerWrapper_getOffsetGap(t_AnalyzerWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getOffsetGap(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(AnalyzerWrapper), (PyObject *) self, "getOffsetGap", args, 2);
        }

        static PyObject *t_AnalyzerWrapper_getPositionIncrementGap(t_AnalyzerWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getPositionIncrementGap(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(AnalyzerWrapper), (PyObject *) self, "getPositionIncrementGap", args, 2);
        }

        static PyObject *t_AnalyzerWrapper_initReader(t_AnalyzerWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::io::Reader a1((jobject) NULL);
          ::java::io::Reader result((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.initReader(a0, a1));
            return ::java::io::t_Reader::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "initReader", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/AveragePayloadFunction.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *AveragePayloadFunction::class$ = NULL;
          jmethodID *AveragePayloadFunction::mids$ = NULL;
          bool AveragePayloadFunction::live$ = false;

          jclass AveragePayloadFunction::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/AveragePayloadFunction");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_currentScore_9fe8c3f6] = env->getMethodID(cls, "currentScore", "(ILjava/lang/String;IIIFF)F");
              mids$[mid_docScore_08788a8d] = env->getMethodID(cls, "docScore", "(ILjava/lang/String;IF)F");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AveragePayloadFunction::AveragePayloadFunction() : ::org::apache::lucene::search::payloads::PayloadFunction(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat AveragePayloadFunction::currentScore(jint a0, const ::java::lang::String & a1, jint a2, jint a3, jint a4, jfloat a5, jfloat a6) const
          {
            return env->callFloatMethod(this$, mids$[mid_currentScore_9fe8c3f6], a0, a1.this$, a2, a3, a4, a5, a6);
          }

          jfloat AveragePayloadFunction::docScore(jint a0, const ::java::lang::String & a1, jint a2, jfloat a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_docScore_08788a8d], a0, a1.this$, a2, a3);
          }

          jboolean AveragePayloadFunction::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint AveragePayloadFunction::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_AveragePayloadFunction_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AveragePayloadFunction_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AveragePayloadFunction_init_(t_AveragePayloadFunction *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AveragePayloadFunction_currentScore(t_AveragePayloadFunction *self, PyObject *args);
          static PyObject *t_AveragePayloadFunction_docScore(t_AveragePayloadFunction *self, PyObject *args);
          static PyObject *t_AveragePayloadFunction_equals(t_AveragePayloadFunction *self, PyObject *args);
          static PyObject *t_AveragePayloadFunction_hashCode(t_AveragePayloadFunction *self, PyObject *args);

          static PyMethodDef t_AveragePayloadFunction__methods_[] = {
            DECLARE_METHOD(t_AveragePayloadFunction, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AveragePayloadFunction, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AveragePayloadFunction, currentScore, METH_VARARGS),
            DECLARE_METHOD(t_AveragePayloadFunction, docScore, METH_VARARGS),
            DECLARE_METHOD(t_AveragePayloadFunction, equals, METH_VARARGS),
            DECLARE_METHOD(t_AveragePayloadFunction, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AveragePayloadFunction, t_AveragePayloadFunction, ::org::apache::lucene::search::payloads::PayloadFunction, AveragePayloadFunction, t_AveragePayloadFunction_init_, 0, 0, 0, 0, 0);

          void t_AveragePayloadFunction::install(PyObject *module)
          {
            installType(&PY_TYPE(AveragePayloadFunction), module, "AveragePayloadFunction", 0);
          }

          void t_AveragePayloadFunction::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AveragePayloadFunction).tp_dict, "class_", make_descriptor(AveragePayloadFunction::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AveragePayloadFunction).tp_dict, "wrapfn_", make_descriptor(t_AveragePayloadFunction::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AveragePayloadFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AveragePayloadFunction_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AveragePayloadFunction::initializeClass, 1)))
              return NULL;
            return t_AveragePayloadFunction::wrap_Object(AveragePayloadFunction(((t_AveragePayloadFunction *) arg)->object.this$));
          }
          static PyObject *t_AveragePayloadFunction_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AveragePayloadFunction::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AveragePayloadFunction_init_(t_AveragePayloadFunction *self, PyObject *args, PyObject *kwds)
          {
            AveragePayloadFunction object((jobject) NULL);

            INT_CALL(object = AveragePayloadFunction());
            self->object = object;

            return 0;
          }

          static PyObject *t_AveragePayloadFunction_currentScore(t_AveragePayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jint a3;
            jint a4;
            jfloat a5;
            jfloat a6;
            jfloat result;

            if (!parseArgs(args, "IsIIIFF", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              OBJ_CALL(result = self->object.currentScore(a0, a1, a2, a3, a4, a5, a6));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(AveragePayloadFunction), (PyObject *) self, "currentScore", args, 2);
          }

          static PyObject *t_AveragePayloadFunction_docScore(t_AveragePayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jfloat a3;
            jfloat result;

            if (!parseArgs(args, "IsIF", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.docScore(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(AveragePayloadFunction), (PyObject *) self, "docScore", args, 2);
          }

          static PyObject *t_AveragePayloadFunction_equals(t_AveragePayloadFunction *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AveragePayloadFunction), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_AveragePayloadFunction_hashCode(t_AveragePayloadFunction *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(AveragePayloadFunction), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "java/io/PrintStream.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/index/MergeScheduler.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "org/apache/lucene/index/IndexWriterConfig$OpenMode.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/index/IndexWriter$IndexReaderWarmer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexWriterConfig::class$ = NULL;
        jmethodID *IndexWriterConfig::mids$ = NULL;
        bool IndexWriterConfig::live$ = false;
        jboolean IndexWriterConfig::DEFAULT_CHECK_INTEGRITY_AT_MERGE = (jboolean) 0;
        jint IndexWriterConfig::DEFAULT_MAX_BUFFERED_DELETE_TERMS = (jint) 0;
        jint IndexWriterConfig::DEFAULT_MAX_BUFFERED_DOCS = (jint) 0;
        jint IndexWriterConfig::DEFAULT_MAX_THREAD_STATES = (jint) 0;
        jdouble IndexWriterConfig::DEFAULT_RAM_BUFFER_SIZE_MB = (jdouble) 0;
        jint IndexWriterConfig::DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB = (jint) 0;
        jboolean IndexWriterConfig::DEFAULT_READER_POOLING = (jboolean) 0;
        jint IndexWriterConfig::DEFAULT_READER_TERMS_INDEX_DIVISOR = (jint) 0;
        jint IndexWriterConfig::DEFAULT_TERM_INDEX_INTERVAL = (jint) 0;
        jboolean IndexWriterConfig::DEFAULT_USE_COMPOUND_FILE_SYSTEM = (jboolean) 0;
        jint IndexWriterConfig::DISABLE_AUTO_FLUSH = (jint) 0;
        jlong IndexWriterConfig::WRITE_LOCK_TIMEOUT = (jlong) 0;

        jclass IndexWriterConfig::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexWriterConfig");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b2a1ba2f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
            mids$[mid_getCodec_27f0a02b] = env->getMethodID(cls, "getCodec", "()Lorg/apache/lucene/codecs/Codec;");
            mids$[mid_getDefaultWriteLockTimeout_54c6a17a] = env->getStaticMethodID(cls, "getDefaultWriteLockTimeout", "()J");
            mids$[mid_getIndexCommit_09307276] = env->getMethodID(cls, "getIndexCommit", "()Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_getIndexDeletionPolicy_a18376c3] = env->getMethodID(cls, "getIndexDeletionPolicy", "()Lorg/apache/lucene/index/IndexDeletionPolicy;");
            mids$[mid_getInfoStream_1923150b] = env->getMethodID(cls, "getInfoStream", "()Lorg/apache/lucene/util/InfoStream;");
            mids$[mid_getMaxBufferedDeleteTerms_54c6a179] = env->getMethodID(cls, "getMaxBufferedDeleteTerms", "()I");
            mids$[mid_getMaxBufferedDocs_54c6a179] = env->getMethodID(cls, "getMaxBufferedDocs", "()I");
            mids$[mid_getMaxThreadStates_54c6a179] = env->getMethodID(cls, "getMaxThreadStates", "()I");
            mids$[mid_getMergePolicy_753f8dfd] = env->getMethodID(cls, "getMergePolicy", "()Lorg/apache/lucene/index/MergePolicy;");
            mids$[mid_getMergeScheduler_ff96d655] = env->getMethodID(cls, "getMergeScheduler", "()Lorg/apache/lucene/index/MergeScheduler;");
            mids$[mid_getMergedSegmentWarmer_b145c9d7] = env->getMethodID(cls, "getMergedSegmentWarmer", "()Lorg/apache/lucene/index/IndexWriter$IndexReaderWarmer;");
            mids$[mid_getOpenMode_4134b214] = env->getMethodID(cls, "getOpenMode", "()Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;");
            mids$[mid_getRAMBufferSizeMB_54c6a174] = env->getMethodID(cls, "getRAMBufferSizeMB", "()D");
            mids$[mid_getRAMPerThreadHardLimitMB_54c6a179] = env->getMethodID(cls, "getRAMPerThreadHardLimitMB", "()I");
            mids$[mid_getReaderPooling_54c6a16a] = env->getMethodID(cls, "getReaderPooling", "()Z");
            mids$[mid_getReaderTermsIndexDivisor_54c6a179] = env->getMethodID(cls, "getReaderTermsIndexDivisor", "()I");
            mids$[mid_getSimilarity_efcb1233] = env->getMethodID(cls, "getSimilarity", "()Lorg/apache/lucene/search/similarities/Similarity;");
            mids$[mid_getTermIndexInterval_54c6a179] = env->getMethodID(cls, "getTermIndexInterval", "()I");
            mids$[mid_getWriteLockTimeout_54c6a17a] = env->getMethodID(cls, "getWriteLockTimeout", "()J");
            mids$[mid_setCodec_c6322414] = env->getMethodID(cls, "setCodec", "(Lorg/apache/lucene/codecs/Codec;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setDefaultWriteLockTimeout_0ee6df2f] = env->getStaticMethodID(cls, "setDefaultWriteLockTimeout", "(J)V");
            mids$[mid_setIndexCommit_ec04569d] = env->getMethodID(cls, "setIndexCommit", "(Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setIndexDeletionPolicy_e3778c88] = env->getMethodID(cls, "setIndexDeletionPolicy", "(Lorg/apache/lucene/index/IndexDeletionPolicy;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setInfoStream_46a28868] = env->getMethodID(cls, "setInfoStream", "(Lorg/apache/lucene/util/InfoStream;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setInfoStream_915f97a5] = env->getMethodID(cls, "setInfoStream", "(Ljava/io/PrintStream;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setMaxBufferedDeleteTerms_0a512c4a] = env->getMethodID(cls, "setMaxBufferedDeleteTerms", "(I)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setMaxBufferedDocs_0a512c4a] = env->getMethodID(cls, "setMaxBufferedDocs", "(I)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setMaxThreadStates_0a512c4a] = env->getMethodID(cls, "setMaxThreadStates", "(I)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setMergePolicy_35fd1692] = env->getMethodID(cls, "setMergePolicy", "(Lorg/apache/lucene/index/MergePolicy;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setMergeScheduler_a7b4ba7a] = env->getMethodID(cls, "setMergeScheduler", "(Lorg/apache/lucene/index/MergeScheduler;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setMergedSegmentWarmer_f60591d0] = env->getMethodID(cls, "setMergedSegmentWarmer", "(Lorg/apache/lucene/index/IndexWriter$IndexReaderWarmer;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setOpenMode_ecf4c6f7] = env->getMethodID(cls, "setOpenMode", "(Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setRAMBufferSizeMB_f49ea4cb] = env->getMethodID(cls, "setRAMBufferSizeMB", "(D)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setRAMPerThreadHardLimitMB_0a512c4a] = env->getMethodID(cls, "setRAMPerThreadHardLimitMB", "(I)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setReaderPooling_53913b61] = env->getMethodID(cls, "setReaderPooling", "(Z)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setReaderTermsIndexDivisor_0a512c4a] = env->getMethodID(cls, "setReaderTermsIndexDivisor", "(I)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setSimilarity_842e4878] = env->getMethodID(cls, "setSimilarity", "(Lorg/apache/lucene/search/similarities/Similarity;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setTermIndexInterval_0a512c4a] = env->getMethodID(cls, "setTermIndexInterval", "(I)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setUseCompoundFile_53913b61] = env->getMethodID(cls, "setUseCompoundFile", "(Z)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setWriteLockTimeout_c56ab6f1] = env->getMethodID(cls, "setWriteLockTimeout", "(J)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_CHECK_INTEGRITY_AT_MERGE = env->getStaticBooleanField(cls, "DEFAULT_CHECK_INTEGRITY_AT_MERGE");
            DEFAULT_MAX_BUFFERED_DELETE_TERMS = env->getStaticIntField(cls, "DEFAULT_MAX_BUFFERED_DELETE_TERMS");
            DEFAULT_MAX_BUFFERED_DOCS = env->getStaticIntField(cls, "DEFAULT_MAX_BUFFERED_DOCS");
            DEFAULT_MAX_THREAD_STATES = env->getStaticIntField(cls, "DEFAULT_MAX_THREAD_STATES");
            DEFAULT_RAM_BUFFER_SIZE_MB = env->getStaticDoubleField(cls, "DEFAULT_RAM_BUFFER_SIZE_MB");
            DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB = env->getStaticIntField(cls, "DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB");
            DEFAULT_READER_POOLING = env->getStaticBooleanField(cls, "DEFAULT_READER_POOLING");
            DEFAULT_READER_TERMS_INDEX_DIVISOR = env->getStaticIntField(cls, "DEFAULT_READER_TERMS_INDEX_DIVISOR");
            DEFAULT_TERM_INDEX_INTERVAL = env->getStaticIntField(cls, "DEFAULT_TERM_INDEX_INTERVAL");
            DEFAULT_USE_COMPOUND_FILE_SYSTEM = env->getStaticBooleanField(cls, "DEFAULT_USE_COMPOUND_FILE_SYSTEM");
            DISABLE_AUTO_FLUSH = env->getStaticIntField(cls, "DISABLE_AUTO_FLUSH");
            WRITE_LOCK_TIMEOUT = env->getStaticLongField(cls, "WRITE_LOCK_TIMEOUT");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexWriterConfig::IndexWriterConfig(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::index::LiveIndexWriterConfig(env->newObject(initializeClass, &mids$, mid_init$_b2a1ba2f, a0.this$, a1.this$)) {}

        ::org::apache::lucene::analysis::Analyzer IndexWriterConfig::getAnalyzer() const
        {
          return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
        }

        ::org::apache::lucene::codecs::Codec IndexWriterConfig::getCodec() const
        {
          return ::org::apache::lucene::codecs::Codec(env->callObjectMethod(this$, mids$[mid_getCodec_27f0a02b]));
        }

        jlong IndexWriterConfig::getDefaultWriteLockTimeout()
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_getDefaultWriteLockTimeout_54c6a17a]);
        }

        ::org::apache::lucene::index::IndexCommit IndexWriterConfig::getIndexCommit() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_getIndexCommit_09307276]));
        }

        ::org::apache::lucene::index::IndexDeletionPolicy IndexWriterConfig::getIndexDeletionPolicy() const
        {
          return ::org::apache::lucene::index::IndexDeletionPolicy(env->callObjectMethod(this$, mids$[mid_getIndexDeletionPolicy_a18376c3]));
        }

        ::org::apache::lucene::util::InfoStream IndexWriterConfig::getInfoStream() const
        {
          return ::org::apache::lucene::util::InfoStream(env->callObjectMethod(this$, mids$[mid_getInfoStream_1923150b]));
        }

        jint IndexWriterConfig::getMaxBufferedDeleteTerms() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxBufferedDeleteTerms_54c6a179]);
        }

        jint IndexWriterConfig::getMaxBufferedDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxBufferedDocs_54c6a179]);
        }

        jint IndexWriterConfig::getMaxThreadStates() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxThreadStates_54c6a179]);
        }

        ::org::apache::lucene::index::MergePolicy IndexWriterConfig::getMergePolicy() const
        {
          return ::org::apache::lucene::index::MergePolicy(env->callObjectMethod(this$, mids$[mid_getMergePolicy_753f8dfd]));
        }

        ::org::apache::lucene::index::MergeScheduler IndexWriterConfig::getMergeScheduler() const
        {
          return ::org::apache::lucene::index::MergeScheduler(env->callObjectMethod(this$, mids$[mid_getMergeScheduler_ff96d655]));
        }

        ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer IndexWriterConfig::getMergedSegmentWarmer() const
        {
          return ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer(env->callObjectMethod(this$, mids$[mid_getMergedSegmentWarmer_b145c9d7]));
        }

        ::org::apache::lucene::index::IndexWriterConfig$OpenMode IndexWriterConfig::getOpenMode() const
        {
          return ::org::apache::lucene::index::IndexWriterConfig$OpenMode(env->callObjectMethod(this$, mids$[mid_getOpenMode_4134b214]));
        }

        jdouble IndexWriterConfig::getRAMBufferSizeMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getRAMBufferSizeMB_54c6a174]);
        }

        jint IndexWriterConfig::getRAMPerThreadHardLimitMB() const
        {
          return env->callIntMethod(this$, mids$[mid_getRAMPerThreadHardLimitMB_54c6a179]);
        }

        jboolean IndexWriterConfig::getReaderPooling() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getReaderPooling_54c6a16a]);
        }

        jint IndexWriterConfig::getReaderTermsIndexDivisor() const
        {
          return env->callIntMethod(this$, mids$[mid_getReaderTermsIndexDivisor_54c6a179]);
        }

        ::org::apache::lucene::search::similarities::Similarity IndexWriterConfig::getSimilarity() const
        {
          return ::org::apache::lucene::search::similarities::Similarity(env->callObjectMethod(this$, mids$[mid_getSimilarity_efcb1233]));
        }

        jint IndexWriterConfig::getTermIndexInterval() const
        {
          return env->callIntMethod(this$, mids$[mid_getTermIndexInterval_54c6a179]);
        }

        jlong IndexWriterConfig::getWriteLockTimeout() const
        {
          return env->callLongMethod(this$, mids$[mid_getWriteLockTimeout_54c6a17a]);
        }

        IndexWriterConfig IndexWriterConfig::setCodec(const ::org::apache::lucene::codecs::Codec & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setCodec_c6322414], a0.this$));
        }

        void IndexWriterConfig::setDefaultWriteLockTimeout(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setDefaultWriteLockTimeout_0ee6df2f], a0);
        }

        IndexWriterConfig IndexWriterConfig::setIndexCommit(const ::org::apache::lucene::index::IndexCommit & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setIndexCommit_ec04569d], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setIndexDeletionPolicy(const ::org::apache::lucene::index::IndexDeletionPolicy & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setIndexDeletionPolicy_e3778c88], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setInfoStream(const ::org::apache::lucene::util::InfoStream & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setInfoStream_46a28868], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setInfoStream(const ::java::io::PrintStream & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setInfoStream_915f97a5], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setMaxBufferedDeleteTerms(jint a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMaxBufferedDeleteTerms_0a512c4a], a0));
        }

        IndexWriterConfig IndexWriterConfig::setMaxBufferedDocs(jint a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMaxBufferedDocs_0a512c4a], a0));
        }

        IndexWriterConfig IndexWriterConfig::setMaxThreadStates(jint a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMaxThreadStates_0a512c4a], a0));
        }

        IndexWriterConfig IndexWriterConfig::setMergePolicy(const ::org::apache::lucene::index::MergePolicy & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMergePolicy_35fd1692], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setMergeScheduler(const ::org::apache::lucene::index::MergeScheduler & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMergeScheduler_a7b4ba7a], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setMergedSegmentWarmer(const ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMergedSegmentWarmer_f60591d0], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setOpenMode(const ::org::apache::lucene::index::IndexWriterConfig$OpenMode & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setOpenMode_ecf4c6f7], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setRAMBufferSizeMB(jdouble a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setRAMBufferSizeMB_f49ea4cb], a0));
        }

        IndexWriterConfig IndexWriterConfig::setRAMPerThreadHardLimitMB(jint a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setRAMPerThreadHardLimitMB_0a512c4a], a0));
        }

        IndexWriterConfig IndexWriterConfig::setReaderPooling(jboolean a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setReaderPooling_53913b61], a0));
        }

        IndexWriterConfig IndexWriterConfig::setReaderTermsIndexDivisor(jint a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setReaderTermsIndexDivisor_0a512c4a], a0));
        }

        IndexWriterConfig IndexWriterConfig::setSimilarity(const ::org::apache::lucene::search::similarities::Similarity & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setSimilarity_842e4878], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setTermIndexInterval(jint a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setTermIndexInterval_0a512c4a], a0));
        }

        IndexWriterConfig IndexWriterConfig::setUseCompoundFile(jboolean a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setUseCompoundFile_53913b61], a0));
        }

        IndexWriterConfig IndexWriterConfig::setWriteLockTimeout(jlong a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setWriteLockTimeout_c56ab6f1], a0));
        }

        ::java::lang::String IndexWriterConfig::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexWriterConfig_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriterConfig_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexWriterConfig_init_(t_IndexWriterConfig *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexWriterConfig_getAnalyzer(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getCodec(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getDefaultWriteLockTimeout(PyTypeObject *type);
        static PyObject *t_IndexWriterConfig_getIndexCommit(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getIndexDeletionPolicy(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getInfoStream(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getMaxBufferedDeleteTerms(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getMaxBufferedDocs(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getMaxThreadStates(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getMergePolicy(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getMergeScheduler(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getMergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getOpenMode(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getRAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getRAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getReaderPooling(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getReaderTermsIndexDivisor(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getSimilarity(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getTermIndexInterval(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getWriteLockTimeout(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setCodec(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setDefaultWriteLockTimeout(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setIndexCommit(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setIndexDeletionPolicy(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setInfoStream(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setMaxBufferedDeleteTerms(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setMaxBufferedDocs(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setMaxThreadStates(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setMergePolicy(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setMergeScheduler(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setMergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setOpenMode(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setRAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setRAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setReaderPooling(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setReaderTermsIndexDivisor(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setSimilarity(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setTermIndexInterval(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setUseCompoundFile(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setWriteLockTimeout(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_toString(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_get__analyzer(t_IndexWriterConfig *self, void *data);
        static PyObject *t_IndexWriterConfig_get__codec(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__codec(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__defaultWriteLockTimeout(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__defaultWriteLockTimeout(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__indexCommit(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__indexCommit(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__indexDeletionPolicy(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__indexDeletionPolicy(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__infoStream(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__infoStream(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__maxBufferedDeleteTerms(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__maxBufferedDeleteTerms(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__maxBufferedDocs(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__maxBufferedDocs(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__maxThreadStates(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__maxThreadStates(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__mergePolicy(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__mergePolicy(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__mergeScheduler(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__mergeScheduler(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__mergedSegmentWarmer(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__mergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__openMode(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__openMode(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__rAMBufferSizeMB(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__rAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__rAMPerThreadHardLimitMB(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__rAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__readerPooling(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__readerPooling(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__readerTermsIndexDivisor(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__readerTermsIndexDivisor(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__similarity(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__similarity(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__termIndexInterval(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__termIndexInterval(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static int t_IndexWriterConfig_set__useCompoundFile(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__writeLockTimeout(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__writeLockTimeout(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyGetSetDef t_IndexWriterConfig__fields_[] = {
          DECLARE_GET_FIELD(t_IndexWriterConfig, analyzer),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, codec),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, defaultWriteLockTimeout),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, indexCommit),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, indexDeletionPolicy),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, infoStream),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, maxBufferedDeleteTerms),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, maxBufferedDocs),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, maxThreadStates),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, mergePolicy),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, mergeScheduler),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, mergedSegmentWarmer),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, openMode),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, rAMBufferSizeMB),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, rAMPerThreadHardLimitMB),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, readerPooling),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, readerTermsIndexDivisor),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, similarity),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, termIndexInterval),
          DECLARE_SET_FIELD(t_IndexWriterConfig, useCompoundFile),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, writeLockTimeout),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexWriterConfig__methods_[] = {
          DECLARE_METHOD(t_IndexWriterConfig, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig, getAnalyzer, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getCodec, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getDefaultWriteLockTimeout, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig, getIndexCommit, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getIndexDeletionPolicy, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getInfoStream, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getMaxBufferedDeleteTerms, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getMaxBufferedDocs, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getMaxThreadStates, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getMergePolicy, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getMergeScheduler, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getMergedSegmentWarmer, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getOpenMode, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getRAMBufferSizeMB, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getRAMPerThreadHardLimitMB, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getReaderPooling, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getReaderTermsIndexDivisor, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getSimilarity, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getTermIndexInterval, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getWriteLockTimeout, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setCodec, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setDefaultWriteLockTimeout, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig, setIndexCommit, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setIndexDeletionPolicy, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setInfoStream, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setMaxBufferedDeleteTerms, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setMaxBufferedDocs, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setMaxThreadStates, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setMergePolicy, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setMergeScheduler, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setMergedSegmentWarmer, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setOpenMode, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setRAMBufferSizeMB, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setRAMPerThreadHardLimitMB, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setReaderPooling, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setReaderTermsIndexDivisor, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setSimilarity, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setTermIndexInterval, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setUseCompoundFile, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setWriteLockTimeout, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexWriterConfig, t_IndexWriterConfig, ::org::apache::lucene::index::LiveIndexWriterConfig, IndexWriterConfig, t_IndexWriterConfig_init_, 0, 0, t_IndexWriterConfig__fields_, 0, 0);

        void t_IndexWriterConfig::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexWriterConfig), module, "IndexWriterConfig", 0);
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "OpenMode", make_descriptor(&PY_TYPE(IndexWriterConfig$OpenMode)));
        }

        void t_IndexWriterConfig::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "class_", make_descriptor(IndexWriterConfig::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "wrapfn_", make_descriptor(t_IndexWriterConfig::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IndexWriterConfig::initializeClass);
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_CHECK_INTEGRITY_AT_MERGE", make_descriptor(IndexWriterConfig::DEFAULT_CHECK_INTEGRITY_AT_MERGE));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_MAX_BUFFERED_DELETE_TERMS", make_descriptor(IndexWriterConfig::DEFAULT_MAX_BUFFERED_DELETE_TERMS));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_MAX_BUFFERED_DOCS", make_descriptor(IndexWriterConfig::DEFAULT_MAX_BUFFERED_DOCS));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_MAX_THREAD_STATES", make_descriptor(IndexWriterConfig::DEFAULT_MAX_THREAD_STATES));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_RAM_BUFFER_SIZE_MB", make_descriptor(IndexWriterConfig::DEFAULT_RAM_BUFFER_SIZE_MB));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB", make_descriptor(IndexWriterConfig::DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_READER_POOLING", make_descriptor(IndexWriterConfig::DEFAULT_READER_POOLING));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_READER_TERMS_INDEX_DIVISOR", make_descriptor(IndexWriterConfig::DEFAULT_READER_TERMS_INDEX_DIVISOR));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_TERM_INDEX_INTERVAL", make_descriptor(IndexWriterConfig::DEFAULT_TERM_INDEX_INTERVAL));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_USE_COMPOUND_FILE_SYSTEM", make_descriptor(IndexWriterConfig::DEFAULT_USE_COMPOUND_FILE_SYSTEM));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DISABLE_AUTO_FLUSH", make_descriptor(IndexWriterConfig::DISABLE_AUTO_FLUSH));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "WRITE_LOCK_TIMEOUT", make_descriptor(IndexWriterConfig::WRITE_LOCK_TIMEOUT));
        }

        static PyObject *t_IndexWriterConfig_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexWriterConfig::initializeClass, 1)))
            return NULL;
          return t_IndexWriterConfig::wrap_Object(IndexWriterConfig(((t_IndexWriterConfig *) arg)->object.this$));
        }
        static PyObject *t_IndexWriterConfig_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexWriterConfig::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexWriterConfig_init_(t_IndexWriterConfig *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::Version a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
          IndexWriterConfig object((jobject) NULL);

          if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
          {
            INT_CALL(object = IndexWriterConfig(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexWriterConfig_getAnalyzer(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getAnalyzer());
            return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getAnalyzer", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getCodec(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::Codec result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getCodec());
            return ::org::apache::lucene::codecs::t_Codec::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getCodec", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getDefaultWriteLockTimeout(PyTypeObject *type)
        {
          jlong result;
          OBJ_CALL(result = ::org::apache::lucene::index::IndexWriterConfig::getDefaultWriteLockTimeout());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexWriterConfig_getIndexCommit(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getIndexCommit());
            return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getIndexCommit", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getIndexDeletionPolicy(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getIndexDeletionPolicy());
            return ::org::apache::lucene::index::t_IndexDeletionPolicy::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getIndexDeletionPolicy", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getInfoStream(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::util::InfoStream result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getInfoStream());
            return ::org::apache::lucene::util::t_InfoStream::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getInfoStream", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getMaxBufferedDeleteTerms(t_IndexWriterConfig *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMaxBufferedDeleteTerms());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getMaxBufferedDeleteTerms", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getMaxBufferedDocs(t_IndexWriterConfig *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMaxBufferedDocs());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getMaxBufferedDocs", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getMaxThreadStates(t_IndexWriterConfig *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMaxThreadStates());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getMaxThreadStates", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getMergePolicy(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergePolicy result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMergePolicy());
            return ::org::apache::lucene::index::t_MergePolicy::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getMergePolicy", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getMergeScheduler(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeScheduler result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMergeScheduler());
            return ::org::apache::lucene::index::t_MergeScheduler::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getMergeScheduler", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getMergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMergedSegmentWarmer());
            return ::org::apache::lucene::index::t_IndexWriter$IndexReaderWarmer::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getMergedSegmentWarmer", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getOpenMode(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriterConfig$OpenMode result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getOpenMode());
            return ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getOpenMode", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getRAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *args)
        {
          jdouble result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getRAMBufferSizeMB());
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getRAMBufferSizeMB", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getRAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getRAMPerThreadHardLimitMB());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getRAMPerThreadHardLimitMB", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getReaderPooling(t_IndexWriterConfig *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getReaderPooling());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getReaderPooling", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getReaderTermsIndexDivisor(t_IndexWriterConfig *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getReaderTermsIndexDivisor());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getReaderTermsIndexDivisor", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getSimilarity(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::search::similarities::Similarity result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getSimilarity());
            return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getSimilarity", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getTermIndexInterval(t_IndexWriterConfig *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getTermIndexInterval());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getTermIndexInterval", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getWriteLockTimeout(t_IndexWriterConfig *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getWriteLockTimeout());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getWriteLockTimeout", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setCodec(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::codecs::Codec a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::codecs::Codec::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setCodec(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setCodec", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setDefaultWriteLockTimeout(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::IndexWriterConfig::setDefaultWriteLockTimeout(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setDefaultWriteLockTimeout", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setIndexCommit(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setIndexCommit(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexCommit", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setIndexDeletionPolicy(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexDeletionPolicy::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setIndexDeletionPolicy(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexDeletionPolicy", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setInfoStream(t_IndexWriterConfig *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::InfoStream a0((jobject) NULL);
              IndexWriterConfig result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::InfoStream::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.setInfoStream(a0));
                return t_IndexWriterConfig::wrap_Object(result);
              }
            }
            {
              ::java::io::PrintStream a0((jobject) NULL);
              IndexWriterConfig result((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::PrintStream::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.setInfoStream(a0));
                return t_IndexWriterConfig::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "setInfoStream", args);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setMaxBufferedDeleteTerms(t_IndexWriterConfig *self, PyObject *args)
        {
          jint a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxBufferedDeleteTerms(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "setMaxBufferedDeleteTerms", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setMaxBufferedDocs(t_IndexWriterConfig *self, PyObject *args)
        {
          jint a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxBufferedDocs(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "setMaxBufferedDocs", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setMaxThreadStates(t_IndexWriterConfig *self, PyObject *arg)
        {
          jint a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxThreadStates(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxThreadStates", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setMergePolicy(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergePolicy a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergePolicy::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setMergePolicy(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMergePolicy", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setMergeScheduler(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeScheduler a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeScheduler::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setMergeScheduler(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMergeScheduler", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setMergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setMergedSegmentWarmer(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "setMergedSegmentWarmer", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setOpenMode(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexWriterConfig$OpenMode a0((jobject) NULL);
          PyTypeObject **p0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "K", ::org::apache::lucene::index::IndexWriterConfig$OpenMode::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::parameters_))
          {
            OBJ_CALL(result = self->object.setOpenMode(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setOpenMode", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setRAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *args)
        {
          jdouble a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(result = self->object.setRAMBufferSizeMB(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "setRAMBufferSizeMB", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setRAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *arg)
        {
          jint a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setRAMPerThreadHardLimitMB(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setRAMPerThreadHardLimitMB", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setReaderPooling(t_IndexWriterConfig *self, PyObject *arg)
        {
          jboolean a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.setReaderPooling(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setReaderPooling", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setReaderTermsIndexDivisor(t_IndexWriterConfig *self, PyObject *args)
        {
          jint a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.setReaderTermsIndexDivisor(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "setReaderTermsIndexDivisor", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setSimilarity(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::search::similarities::Similarity a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::Similarity::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setSimilarity(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setSimilarity", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setTermIndexInterval(t_IndexWriterConfig *self, PyObject *args)
        {
          jint a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.setTermIndexInterval(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "setTermIndexInterval", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setUseCompoundFile(t_IndexWriterConfig *self, PyObject *args)
        {
          jboolean a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "Z", &a0))
          {
            OBJ_CALL(result = self->object.setUseCompoundFile(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "setUseCompoundFile", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setWriteLockTimeout(t_IndexWriterConfig *self, PyObject *arg)
        {
          jlong a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.setWriteLockTimeout(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setWriteLockTimeout", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_toString(t_IndexWriterConfig *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_IndexWriterConfig_get__analyzer(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
          OBJ_CALL(value = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
        }

        static PyObject *t_IndexWriterConfig_get__codec(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::codecs::Codec value((jobject) NULL);
          OBJ_CALL(value = self->object.getCodec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__codec(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::codecs::Codec value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::codecs::Codec::initializeClass, &value))
            {
              INT_CALL(self->object.setCodec(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "codec", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__defaultWriteLockTimeout(t_IndexWriterConfig *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getDefaultWriteLockTimeout());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_IndexWriterConfig_set__defaultWriteLockTimeout(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setDefaultWriteLockTimeout(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "defaultWriteLockTimeout", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__indexCommit(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexCommit value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__indexCommit(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::IndexCommit value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &value))
            {
              INT_CALL(self->object.setIndexCommit(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "indexCommit", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__indexDeletionPolicy(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexDeletionPolicy());
          return ::org::apache::lucene::index::t_IndexDeletionPolicy::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__indexDeletionPolicy(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::IndexDeletionPolicy value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexDeletionPolicy::initializeClass, &value))
            {
              INT_CALL(self->object.setIndexDeletionPolicy(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "indexDeletionPolicy", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__infoStream(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::util::InfoStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getInfoStream());
          return ::org::apache::lucene::util::t_InfoStream::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__infoStream(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::InfoStream value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::InfoStream::initializeClass, &value))
            {
              INT_CALL(self->object.setInfoStream(value));
              return 0;
            }
          }
          {
            ::java::io::PrintStream value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
            {
              INT_CALL(self->object.setInfoStream(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "infoStream", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__maxBufferedDeleteTerms(t_IndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxBufferedDeleteTerms());
          return PyInt_FromLong((long) value);
        }
        static int t_IndexWriterConfig_set__maxBufferedDeleteTerms(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxBufferedDeleteTerms(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxBufferedDeleteTerms", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__maxBufferedDocs(t_IndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxBufferedDocs());
          return PyInt_FromLong((long) value);
        }
        static int t_IndexWriterConfig_set__maxBufferedDocs(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxBufferedDocs(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxBufferedDocs", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__maxThreadStates(t_IndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxThreadStates());
          return PyInt_FromLong((long) value);
        }
        static int t_IndexWriterConfig_set__maxThreadStates(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxThreadStates(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxThreadStates", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__mergePolicy(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::MergePolicy value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergePolicy());
          return ::org::apache::lucene::index::t_MergePolicy::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__mergePolicy(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::MergePolicy value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::MergePolicy::initializeClass, &value))
            {
              INT_CALL(self->object.setMergePolicy(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergePolicy", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__mergeScheduler(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::MergeScheduler value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergeScheduler());
          return ::org::apache::lucene::index::t_MergeScheduler::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__mergeScheduler(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::MergeScheduler value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeScheduler::initializeClass, &value))
            {
              INT_CALL(self->object.setMergeScheduler(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergeScheduler", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__mergedSegmentWarmer(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergedSegmentWarmer());
          return ::org::apache::lucene::index::t_IndexWriter$IndexReaderWarmer::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__mergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer::initializeClass, &value))
            {
              INT_CALL(self->object.setMergedSegmentWarmer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergedSegmentWarmer", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__openMode(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexWriterConfig$OpenMode value((jobject) NULL);
          OBJ_CALL(value = self->object.getOpenMode());
          return ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__openMode(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::IndexWriterConfig$OpenMode value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexWriterConfig$OpenMode::initializeClass, &value))
            {
              INT_CALL(self->object.setOpenMode(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "openMode", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__rAMBufferSizeMB(t_IndexWriterConfig *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getRAMBufferSizeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_IndexWriterConfig_set__rAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setRAMBufferSizeMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "rAMBufferSizeMB", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__rAMPerThreadHardLimitMB(t_IndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getRAMPerThreadHardLimitMB());
          return PyInt_FromLong((long) value);
        }
        static int t_IndexWriterConfig_set__rAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setRAMPerThreadHardLimitMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "rAMPerThreadHardLimitMB", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__readerPooling(t_IndexWriterConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getReaderPooling());
          Py_RETURN_BOOL(value);
        }
        static int t_IndexWriterConfig_set__readerPooling(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setReaderPooling(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "readerPooling", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__readerTermsIndexDivisor(t_IndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getReaderTermsIndexDivisor());
          return PyInt_FromLong((long) value);
        }
        static int t_IndexWriterConfig_set__readerTermsIndexDivisor(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setReaderTermsIndexDivisor(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "readerTermsIndexDivisor", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__similarity(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
          OBJ_CALL(value = self->object.getSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__similarity(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::Similarity::initializeClass, &value))
            {
              INT_CALL(self->object.setSimilarity(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "similarity", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__termIndexInterval(t_IndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getTermIndexInterval());
          return PyInt_FromLong((long) value);
        }
        static int t_IndexWriterConfig_set__termIndexInterval(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setTermIndexInterval(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "termIndexInterval", arg);
          return -1;
        }

        static int t_IndexWriterConfig_set__useCompoundFile(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setUseCompoundFile(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "useCompoundFile", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__writeLockTimeout(t_IndexWriterConfig *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getWriteLockTimeout());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_IndexWriterConfig_set__writeLockTimeout(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setWriteLockTimeout(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "writeLockTimeout", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternCaptureGroupFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/pattern/PatternCaptureGroupTokenFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternCaptureGroupFilterFactory::class$ = NULL;
          jmethodID *PatternCaptureGroupFilterFactory::mids$ = NULL;
          bool PatternCaptureGroupFilterFactory::live$ = false;

          jclass PatternCaptureGroupFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternCaptureGroupFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_c840bb3a] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/pattern/PatternCaptureGroupTokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternCaptureGroupFilterFactory::PatternCaptureGroupFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::pattern::PatternCaptureGroupTokenFilter PatternCaptureGroupFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::pattern::PatternCaptureGroupTokenFilter(env->callObjectMethod(this$, mids$[mid_create_c840bb3a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternCaptureGroupFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternCaptureGroupFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternCaptureGroupFilterFactory_init_(t_PatternCaptureGroupFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternCaptureGroupFilterFactory_create(t_PatternCaptureGroupFilterFactory *self, PyObject *args);

          static PyMethodDef t_PatternCaptureGroupFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PatternCaptureGroupFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternCaptureGroupFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternCaptureGroupFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternCaptureGroupFilterFactory, t_PatternCaptureGroupFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PatternCaptureGroupFilterFactory, t_PatternCaptureGroupFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PatternCaptureGroupFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternCaptureGroupFilterFactory), module, "PatternCaptureGroupFilterFactory", 0);
          }

          void t_PatternCaptureGroupFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternCaptureGroupFilterFactory).tp_dict, "class_", make_descriptor(PatternCaptureGroupFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternCaptureGroupFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PatternCaptureGroupFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternCaptureGroupFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternCaptureGroupFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternCaptureGroupFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PatternCaptureGroupFilterFactory::wrap_Object(PatternCaptureGroupFilterFactory(((t_PatternCaptureGroupFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PatternCaptureGroupFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternCaptureGroupFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternCaptureGroupFilterFactory_init_(t_PatternCaptureGroupFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PatternCaptureGroupFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PatternCaptureGroupFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternCaptureGroupFilterFactory_create(t_PatternCaptureGroupFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::pattern::PatternCaptureGroupTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::pattern::t_PatternCaptureGroupTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PatternCaptureGroupFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FuzzyQueryNode.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/CloneNotSupportedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *FuzzyQueryNode::class$ = NULL;
              jmethodID *FuzzyQueryNode::mids$ = NULL;
              bool FuzzyQueryNode::live$ = false;

              jclass FuzzyQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/FuzzyQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_7cd5e8f3] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;FII)V");
                  mids$[mid_cloneTree_90198571] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FuzzyQueryNode;");
                  mids$[mid_getPrefixLength_54c6a179] = env->getMethodID(cls, "getPrefixLength", "()I");
                  mids$[mid_getSimilarity_54c6a176] = env->getMethodID(cls, "getSimilarity", "()F");
                  mids$[mid_setPrefixLength_39c7bd3c] = env->getMethodID(cls, "setPrefixLength", "(I)V");
                  mids$[mid_setSimilarity_06298cab] = env->getMethodID(cls, "setSimilarity", "(F)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FuzzyQueryNode::FuzzyQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jfloat a2, jint a3, jint a4) : ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode(env->newObject(initializeClass, &mids$, mid_init$_7cd5e8f3, a0.this$, a1.this$, a2, a3, a4)) {}

              FuzzyQueryNode FuzzyQueryNode::cloneTree() const
              {
                return FuzzyQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_90198571]));
              }

              jint FuzzyQueryNode::getPrefixLength() const
              {
                return env->callIntMethod(this$, mids$[mid_getPrefixLength_54c6a179]);
              }

              jfloat FuzzyQueryNode::getSimilarity() const
              {
                return env->callFloatMethod(this$, mids$[mid_getSimilarity_54c6a176]);
              }

              void FuzzyQueryNode::setPrefixLength(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setPrefixLength_39c7bd3c], a0);
              }

              void FuzzyQueryNode::setSimilarity(jfloat a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setSimilarity_06298cab], a0);
              }

              ::java::lang::CharSequence FuzzyQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String FuzzyQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_FuzzyQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FuzzyQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FuzzyQueryNode_init_(t_FuzzyQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FuzzyQueryNode_cloneTree(t_FuzzyQueryNode *self, PyObject *args);
              static PyObject *t_FuzzyQueryNode_getPrefixLength(t_FuzzyQueryNode *self);
              static PyObject *t_FuzzyQueryNode_getSimilarity(t_FuzzyQueryNode *self);
              static PyObject *t_FuzzyQueryNode_setPrefixLength(t_FuzzyQueryNode *self, PyObject *arg);
              static PyObject *t_FuzzyQueryNode_setSimilarity(t_FuzzyQueryNode *self, PyObject *arg);
              static PyObject *t_FuzzyQueryNode_toQueryString(t_FuzzyQueryNode *self, PyObject *args);
              static PyObject *t_FuzzyQueryNode_toString(t_FuzzyQueryNode *self, PyObject *args);
              static PyObject *t_FuzzyQueryNode_get__prefixLength(t_FuzzyQueryNode *self, void *data);
              static int t_FuzzyQueryNode_set__prefixLength(t_FuzzyQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FuzzyQueryNode_get__similarity(t_FuzzyQueryNode *self, void *data);
              static int t_FuzzyQueryNode_set__similarity(t_FuzzyQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_FuzzyQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_FuzzyQueryNode, prefixLength),
                DECLARE_GETSET_FIELD(t_FuzzyQueryNode, similarity),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FuzzyQueryNode__methods_[] = {
                DECLARE_METHOD(t_FuzzyQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_FuzzyQueryNode, getPrefixLength, METH_NOARGS),
                DECLARE_METHOD(t_FuzzyQueryNode, getSimilarity, METH_NOARGS),
                DECLARE_METHOD(t_FuzzyQueryNode, setPrefixLength, METH_O),
                DECLARE_METHOD(t_FuzzyQueryNode, setSimilarity, METH_O),
                DECLARE_METHOD(t_FuzzyQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_FuzzyQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FuzzyQueryNode, t_FuzzyQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode, FuzzyQueryNode, t_FuzzyQueryNode_init_, 0, 0, t_FuzzyQueryNode__fields_, 0, 0);

              void t_FuzzyQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(FuzzyQueryNode), module, "FuzzyQueryNode", 0);
              }

              void t_FuzzyQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNode).tp_dict, "class_", make_descriptor(FuzzyQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNode).tp_dict, "wrapfn_", make_descriptor(t_FuzzyQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FuzzyQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FuzzyQueryNode::initializeClass, 1)))
                  return NULL;
                return t_FuzzyQueryNode::wrap_Object(FuzzyQueryNode(((t_FuzzyQueryNode *) arg)->object.this$));
              }
              static PyObject *t_FuzzyQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FuzzyQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FuzzyQueryNode_init_(t_FuzzyQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                jfloat a2;
                jint a3;
                jint a4;
                FuzzyQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OOFII", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = FuzzyQueryNode(a0, a1, a2, a3, a4));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FuzzyQueryNode_cloneTree(t_FuzzyQueryNode *self, PyObject *args)
              {
                FuzzyQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_FuzzyQueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(FuzzyQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_FuzzyQueryNode_getPrefixLength(t_FuzzyQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getPrefixLength());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FuzzyQueryNode_getSimilarity(t_FuzzyQueryNode *self)
              {
                jfloat result;
                OBJ_CALL(result = self->object.getSimilarity());
                return PyFloat_FromDouble((double) result);
              }

              static PyObject *t_FuzzyQueryNode_setPrefixLength(t_FuzzyQueryNode *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.setPrefixLength(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setPrefixLength", arg);
                return NULL;
              }

              static PyObject *t_FuzzyQueryNode_setSimilarity(t_FuzzyQueryNode *self, PyObject *arg)
              {
                jfloat a0;

                if (!parseArg(arg, "F", &a0))
                {
                  OBJ_CALL(self->object.setSimilarity(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setSimilarity", arg);
                return NULL;
              }

              static PyObject *t_FuzzyQueryNode_toQueryString(t_FuzzyQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(FuzzyQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_FuzzyQueryNode_toString(t_FuzzyQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(FuzzyQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_FuzzyQueryNode_get__prefixLength(t_FuzzyQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getPrefixLength());
                return PyInt_FromLong((long) value);
              }
              static int t_FuzzyQueryNode_set__prefixLength(t_FuzzyQueryNode *self, PyObject *arg, void *data)
              {
                {
                  jint value;
                  if (!parseArg(arg, "I", &value))
                  {
                    INT_CALL(self->object.setPrefixLength(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "prefixLength", arg);
                return -1;
              }

              static PyObject *t_FuzzyQueryNode_get__similarity(t_FuzzyQueryNode *self, void *data)
              {
                jfloat value;
                OBJ_CALL(value = self->object.getSimilarity());
                return PyFloat_FromDouble((double) value);
              }
              static int t_FuzzyQueryNode_set__similarity(t_FuzzyQueryNode *self, PyObject *arg, void *data)
              {
                {
                  jfloat value;
                  if (!parseArg(arg, "F", &value))
                  {
                    INT_CALL(self->object.setSimilarity(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "similarity", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {

          ::java::lang::Class *ReversePathHierarchyTokenizer::class$ = NULL;
          jmethodID *ReversePathHierarchyTokenizer::mids$ = NULL;
          bool ReversePathHierarchyTokenizer::live$ = false;
          jchar ReversePathHierarchyTokenizer::DEFAULT_DELIMITER = (jchar) 0;
          jint ReversePathHierarchyTokenizer::DEFAULT_SKIP = (jint) 0;

          jclass ReversePathHierarchyTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_8c604f56] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;I)V");
              mids$[mid_init$_e27d22ca] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;CI)V");
              mids$[mid_init$_944d83a2] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;IC)V");
              mids$[mid_init$_94478bac] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;CC)V");
              mids$[mid_init$_94f21e72] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;CCI)V");
              mids$[mid_init$_132ff91e] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;ICC)V");
              mids$[mid_init$_df655116] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;CCI)V");
              mids$[mid_init$_5df3b604] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;ICCI)V");
              mids$[mid_init$_0b338d38] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;ICCI)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_DELIMITER = env->getStaticCharField(cls, "DEFAULT_DELIMITER");
              DEFAULT_SKIP = env->getStaticIntField(cls, "DEFAULT_SKIP");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0, jint a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_8c604f56, a0.this$, a1)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0, jchar a1, jint a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_e27d22ca, a0.this$, a1, a2)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0, jint a1, jchar a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_944d83a2, a0.this$, a1, a2)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0, jchar a1, jchar a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_94478bac, a0.this$, a1, a2)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0, jchar a1, jchar a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_94f21e72, a0.this$, a1, a2, a3)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0, jint a1, jchar a2, jchar a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_132ff91e, a0.this$, a1, a2, a3)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jchar a2, jchar a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_df655116, a0.this$, a1.this$, a2, a3, a4)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0, jint a1, jchar a2, jchar a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_5df3b604, a0.this$, a1, a2, a3, a4)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jint a2, jchar a3, jchar a4, jint a5) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_0b338d38, a0.this$, a1.this$, a2, a3, a4, a5)) {}

          void ReversePathHierarchyTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean ReversePathHierarchyTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void ReversePathHierarchyTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {
          static PyObject *t_ReversePathHierarchyTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ReversePathHierarchyTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ReversePathHierarchyTokenizer_init_(t_ReversePathHierarchyTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ReversePathHierarchyTokenizer_end(t_ReversePathHierarchyTokenizer *self, PyObject *args);
          static PyObject *t_ReversePathHierarchyTokenizer_incrementToken(t_ReversePathHierarchyTokenizer *self, PyObject *args);
          static PyObject *t_ReversePathHierarchyTokenizer_reset(t_ReversePathHierarchyTokenizer *self, PyObject *args);

          static PyMethodDef t_ReversePathHierarchyTokenizer__methods_[] = {
            DECLARE_METHOD(t_ReversePathHierarchyTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReversePathHierarchyTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReversePathHierarchyTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_ReversePathHierarchyTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ReversePathHierarchyTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ReversePathHierarchyTokenizer, t_ReversePathHierarchyTokenizer, ::org::apache::lucene::analysis::Tokenizer, ReversePathHierarchyTokenizer, t_ReversePathHierarchyTokenizer_init_, 0, 0, 0, 0, 0);

          void t_ReversePathHierarchyTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(ReversePathHierarchyTokenizer), module, "ReversePathHierarchyTokenizer", 0);
          }

          void t_ReversePathHierarchyTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ReversePathHierarchyTokenizer).tp_dict, "class_", make_descriptor(ReversePathHierarchyTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ReversePathHierarchyTokenizer).tp_dict, "wrapfn_", make_descriptor(t_ReversePathHierarchyTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ReversePathHierarchyTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ReversePathHierarchyTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ReversePathHierarchyTokenizer).tp_dict, "DEFAULT_DELIMITER", make_descriptor(ReversePathHierarchyTokenizer::DEFAULT_DELIMITER));
            PyDict_SetItemString(PY_TYPE(ReversePathHierarchyTokenizer).tp_dict, "DEFAULT_SKIP", make_descriptor(ReversePathHierarchyTokenizer::DEFAULT_SKIP));
          }

          static PyObject *t_ReversePathHierarchyTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ReversePathHierarchyTokenizer::initializeClass, 1)))
              return NULL;
            return t_ReversePathHierarchyTokenizer::wrap_Object(ReversePathHierarchyTokenizer(((t_ReversePathHierarchyTokenizer *) arg)->object.this$));
          }
          static PyObject *t_ReversePathHierarchyTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ReversePathHierarchyTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ReversePathHierarchyTokenizer_init_(t_ReversePathHierarchyTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kI", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::io::Reader a0((jobject) NULL);
                jchar a1;
                jint a2;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kCI", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                jchar a2;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kIC", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                jchar a1;
                jchar a2;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kCC", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::io::Reader a0((jobject) NULL);
                jchar a1;
                jchar a2;
                jint a3;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kCCI", ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                jchar a2;
                jchar a3;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kICC", ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jchar a2;
                jchar a3;
                jint a4;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkCCI", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                jchar a2;
                jchar a3;
                jint a4;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kICCI", ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jchar a3;
                jchar a4;
                jint a5;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkICCI", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ReversePathHierarchyTokenizer_end(t_ReversePathHierarchyTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ReversePathHierarchyTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_ReversePathHierarchyTokenizer_incrementToken(t_ReversePathHierarchyTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ReversePathHierarchyTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ReversePathHierarchyTokenizer_reset(t_ReversePathHierarchyTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ReversePathHierarchyTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/StringReader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *StringReader::class$ = NULL;
    jmethodID *StringReader::mids$ = NULL;
    bool StringReader::live$ = false;

    jclass StringReader::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/StringReader");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_mark_39c7bd3c] = env->getMethodID(cls, "mark", "(I)V");
        mids$[mid_markSupported_54c6a16a] = env->getMethodID(cls, "markSupported", "()Z");
        mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
        mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");
        mids$[mid_ready_54c6a16a] = env->getMethodID(cls, "ready", "()Z");
        mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
        mids$[mid_skip_0ee6df33] = env->getMethodID(cls, "skip", "(J)J");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    StringReader::StringReader(const ::java::lang::String & a0) : ::java::io::Reader(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    void StringReader::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    void StringReader::mark(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_mark_39c7bd3c], a0);
    }

    jboolean StringReader::markSupported() const
    {
      return env->callBooleanMethod(this$, mids$[mid_markSupported_54c6a16a]);
    }

    jint StringReader::read() const
    {
      return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
    }

    jint StringReader::read(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
    }

    jboolean StringReader::ready() const
    {
      return env->callBooleanMethod(this$, mids$[mid_ready_54c6a16a]);
    }

    void StringReader::reset() const
    {
      env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
    }

    jlong StringReader::skip(jlong a0) const
    {
      return env->callLongMethod(this$, mids$[mid_skip_0ee6df33], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_StringReader_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_StringReader_instance_(PyTypeObject *type, PyObject *arg);
    static int t_StringReader_init_(t_StringReader *self, PyObject *args, PyObject *kwds);
    static PyObject *t_StringReader_close(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_mark(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_markSupported(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_read(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_ready(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_reset(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_skip(t_StringReader *self, PyObject *args);

    static PyMethodDef t_StringReader__methods_[] = {
      DECLARE_METHOD(t_StringReader, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_StringReader, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_StringReader, close, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, mark, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, markSupported, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, read, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, ready, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, reset, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, skip, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(StringReader, t_StringReader, ::java::io::Reader, StringReader, t_StringReader_init_, 0, 0, 0, 0, 0);

    void t_StringReader::install(PyObject *module)
    {
      installType(&PY_TYPE(StringReader), module, "StringReader", 0);
    }

    void t_StringReader::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(StringReader).tp_dict, "class_", make_descriptor(StringReader::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(StringReader).tp_dict, "wrapfn_", make_descriptor(t_StringReader::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(StringReader).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_StringReader_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, StringReader::initializeClass, 1)))
        return NULL;
      return t_StringReader::wrap_Object(StringReader(((t_StringReader *) arg)->object.this$));
    }
    static PyObject *t_StringReader_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, StringReader::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_StringReader_init_(t_StringReader *self, PyObject *args, PyObject *kwds)
    {
      ::java::lang::String a0((jobject) NULL);
      StringReader object((jobject) NULL);

      if (!parseArgs(args, "s", &a0))
      {
        INT_CALL(object = StringReader(a0));
        self->object = object;
      }
      else
      {
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_StringReader_close(t_StringReader *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(StringReader), (PyObject *) self, "close", args, 2);
    }

    static PyObject *t_StringReader_mark(t_StringReader *self, PyObject *args)
    {
      jint a0;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(self->object.mark(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(StringReader), (PyObject *) self, "mark", args, 2);
    }

    static PyObject *t_StringReader_markSupported(t_StringReader *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.markSupported());
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(StringReader), (PyObject *) self, "markSupported", args, 2);
    }

    static PyObject *t_StringReader_read(t_StringReader *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.read());
          return PyInt_FromLong((long) result);
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      return callSuper(&PY_TYPE(StringReader), (PyObject *) self, "read", args, 2);
    }

    static PyObject *t_StringReader_ready(t_StringReader *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.ready());
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(StringReader), (PyObject *) self, "ready", args, 2);
    }

    static PyObject *t_StringReader_reset(t_StringReader *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.reset());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(StringReader), (PyObject *) self, "reset", args, 2);
    }

    static PyObject *t_StringReader_skip(t_StringReader *self, PyObject *args)
    {
      jlong a0;
      jlong result;

      if (!parseArgs(args, "J", &a0))
      {
        OBJ_CALL(result = self->object.skip(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(StringReader), (PyObject *) self, "skip", args, 2);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/RSLPStemmerBase.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *RSLPStemmerBase::class$ = NULL;
          jmethodID *RSLPStemmerBase::mids$ = NULL;
          bool RSLPStemmerBase::live$ = false;

          jclass RSLPStemmerBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/RSLPStemmerBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_parse_7d2165b9] = env->getStaticMethodID(cls, "parse", "(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/Map;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RSLPStemmerBase::RSLPStemmerBase() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_RSLPStemmerBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RSLPStemmerBase_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RSLPStemmerBase_init_(t_RSLPStemmerBase *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_RSLPStemmerBase__methods_[] = {
            DECLARE_METHOD(t_RSLPStemmerBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RSLPStemmerBase, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RSLPStemmerBase, t_RSLPStemmerBase, ::java::lang::Object, RSLPStemmerBase, t_RSLPStemmerBase_init_, 0, 0, 0, 0, 0);

          void t_RSLPStemmerBase::install(PyObject *module)
          {
            installType(&PY_TYPE(RSLPStemmerBase), module, "RSLPStemmerBase", 0);
          }

          void t_RSLPStemmerBase::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RSLPStemmerBase).tp_dict, "class_", make_descriptor(RSLPStemmerBase::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RSLPStemmerBase).tp_dict, "wrapfn_", make_descriptor(t_RSLPStemmerBase::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RSLPStemmerBase).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RSLPStemmerBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RSLPStemmerBase::initializeClass, 1)))
              return NULL;
            return t_RSLPStemmerBase::wrap_Object(RSLPStemmerBase(((t_RSLPStemmerBase *) arg)->object.this$));
          }
          static PyObject *t_RSLPStemmerBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RSLPStemmerBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RSLPStemmerBase_init_(t_RSLPStemmerBase *self, PyObject *args, PyObject *kwds)
          {
            RSLPStemmerBase object((jobject) NULL);

            INT_CALL(object = RSLPStemmerBase());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/TypeTokenFilterFactory.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/util/Set.h"
#include "java/util/Map.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *TypeTokenFilterFactory::class$ = NULL;
          jmethodID *TypeTokenFilterFactory::mids$ = NULL;
          bool TypeTokenFilterFactory::live$ = false;

          jclass TypeTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/TypeTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getStopTypes_03e99967] = env->getMethodID(cls, "getStopTypes", "()Ljava/util/Set;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_isEnablePositionIncrements_54c6a16a] = env->getMethodID(cls, "isEnablePositionIncrements", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TypeTokenFilterFactory::TypeTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream TypeTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::java::util::Set TypeTokenFilterFactory::getStopTypes() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getStopTypes_03e99967]));
          }

          void TypeTokenFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }

          jboolean TypeTokenFilterFactory::isEnablePositionIncrements() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isEnablePositionIncrements_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_TypeTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TypeTokenFilterFactory_init_(t_TypeTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TypeTokenFilterFactory_create(t_TypeTokenFilterFactory *self, PyObject *args);
          static PyObject *t_TypeTokenFilterFactory_getStopTypes(t_TypeTokenFilterFactory *self);
          static PyObject *t_TypeTokenFilterFactory_inform(t_TypeTokenFilterFactory *self, PyObject *arg);
          static PyObject *t_TypeTokenFilterFactory_isEnablePositionIncrements(t_TypeTokenFilterFactory *self);
          static PyObject *t_TypeTokenFilterFactory_get__enablePositionIncrements(t_TypeTokenFilterFactory *self, void *data);
          static PyObject *t_TypeTokenFilterFactory_get__stopTypes(t_TypeTokenFilterFactory *self, void *data);
          static PyGetSetDef t_TypeTokenFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_TypeTokenFilterFactory, enablePositionIncrements),
            DECLARE_GET_FIELD(t_TypeTokenFilterFactory, stopTypes),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TypeTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TypeTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeTokenFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_TypeTokenFilterFactory, getStopTypes, METH_NOARGS),
            DECLARE_METHOD(t_TypeTokenFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_TypeTokenFilterFactory, isEnablePositionIncrements, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TypeTokenFilterFactory, t_TypeTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, TypeTokenFilterFactory, t_TypeTokenFilterFactory_init_, 0, 0, t_TypeTokenFilterFactory__fields_, 0, 0);

          void t_TypeTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeTokenFilterFactory), module, "TypeTokenFilterFactory", 0);
          }

          void t_TypeTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TypeTokenFilterFactory).tp_dict, "class_", make_descriptor(TypeTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TypeTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_TypeTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TypeTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TypeTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TypeTokenFilterFactory::wrap_Object(TypeTokenFilterFactory(((t_TypeTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TypeTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TypeTokenFilterFactory_init_(t_TypeTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TypeTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TypeTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TypeTokenFilterFactory_create(t_TypeTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TypeTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_TypeTokenFilterFactory_getStopTypes(t_TypeTokenFilterFactory *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.getStopTypes());
            return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_TypeTokenFilterFactory_inform(t_TypeTokenFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_TypeTokenFilterFactory_isEnablePositionIncrements(t_TypeTokenFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isEnablePositionIncrements());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_TypeTokenFilterFactory_get__enablePositionIncrements(t_TypeTokenFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isEnablePositionIncrements());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_TypeTokenFilterFactory_get__stopTypes(t_TypeTokenFilterFactory *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object.getStopTypes());
            return ::java::util::t_Set::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeParseException.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {

            ::java::lang::Class *QueryNodeParseException::class$ = NULL;
            jmethodID *QueryNodeParseException::mids$ = NULL;
            bool QueryNodeParseException::live$ = false;

            jclass QueryNodeParseException::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/QueryNodeParseException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
                mids$[mid_init$_1dde9d59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;)V");
                mids$[mid_init$_41dcc0ed] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;Ljava/lang/Throwable;)V");
                mids$[mid_getBeginColumn_54c6a179] = env->getMethodID(cls, "getBeginColumn", "()I");
                mids$[mid_getBeginLine_54c6a179] = env->getMethodID(cls, "getBeginLine", "()I");
                mids$[mid_getErrorToken_14c7b5c5] = env->getMethodID(cls, "getErrorToken", "()Ljava/lang/String;");
                mids$[mid_getQuery_e0adba2f] = env->getMethodID(cls, "getQuery", "()Ljava/lang/CharSequence;");
                mids$[mid_setNonLocalizedMessage_1dde9d59] = env->getMethodID(cls, "setNonLocalizedMessage", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;)V");
                mids$[mid_setQuery_a8afc64a] = env->getMethodID(cls, "setQuery", "(Ljava/lang/CharSequence;)V");
                mids$[mid_setErrorToken_5fdc3f48] = env->getMethodID(cls, "setErrorToken", "(Ljava/lang/String;)V");
                mids$[mid_setBeginLine_39c7bd3c] = env->getMethodID(cls, "setBeginLine", "(I)V");
                mids$[mid_setBeginColumn_39c7bd3c] = env->getMethodID(cls, "setBeginColumn", "(I)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryNodeParseException::QueryNodeParseException(const ::java::lang::Throwable & a0) : ::org::apache::lucene::queryparser::flexible::core::QueryNodeException(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

            QueryNodeParseException::QueryNodeParseException(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0) : ::org::apache::lucene::queryparser::flexible::core::QueryNodeException(env->newObject(initializeClass, &mids$, mid_init$_1dde9d59, a0.this$)) {}

            QueryNodeParseException::QueryNodeParseException(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0, const ::java::lang::Throwable & a1) : ::org::apache::lucene::queryparser::flexible::core::QueryNodeException(env->newObject(initializeClass, &mids$, mid_init$_41dcc0ed, a0.this$, a1.this$)) {}

            jint QueryNodeParseException::getBeginColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginColumn_54c6a179]);
            }

            jint QueryNodeParseException::getBeginLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginLine_54c6a179]);
            }

            ::java::lang::String QueryNodeParseException::getErrorToken() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getErrorToken_14c7b5c5]));
            }

            ::java::lang::CharSequence QueryNodeParseException::getQuery() const
            {
              return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getQuery_e0adba2f]));
            }

            void QueryNodeParseException::setNonLocalizedMessage(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNonLocalizedMessage_1dde9d59], a0.this$);
            }

            void QueryNodeParseException::setQuery(const ::java::lang::CharSequence & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setQuery_a8afc64a], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            static PyObject *t_QueryNodeParseException_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryNodeParseException_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryNodeParseException_init_(t_QueryNodeParseException *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryNodeParseException_getBeginColumn(t_QueryNodeParseException *self);
            static PyObject *t_QueryNodeParseException_getBeginLine(t_QueryNodeParseException *self);
            static PyObject *t_QueryNodeParseException_getErrorToken(t_QueryNodeParseException *self);
            static PyObject *t_QueryNodeParseException_getQuery(t_QueryNodeParseException *self);
            static PyObject *t_QueryNodeParseException_setNonLocalizedMessage(t_QueryNodeParseException *self, PyObject *arg);
            static PyObject *t_QueryNodeParseException_setQuery(t_QueryNodeParseException *self, PyObject *arg);
            static PyObject *t_QueryNodeParseException_get__beginColumn(t_QueryNodeParseException *self, void *data);
            static PyObject *t_QueryNodeParseException_get__beginLine(t_QueryNodeParseException *self, void *data);
            static PyObject *t_QueryNodeParseException_get__errorToken(t_QueryNodeParseException *self, void *data);
            static int t_QueryNodeParseException_set__nonLocalizedMessage(t_QueryNodeParseException *self, PyObject *arg, void *data);
            static PyObject *t_QueryNodeParseException_get__query(t_QueryNodeParseException *self, void *data);
            static int t_QueryNodeParseException_set__query(t_QueryNodeParseException *self, PyObject *arg, void *data);
            static PyGetSetDef t_QueryNodeParseException__fields_[] = {
              DECLARE_GET_FIELD(t_QueryNodeParseException, beginColumn),
              DECLARE_GET_FIELD(t_QueryNodeParseException, beginLine),
              DECLARE_GET_FIELD(t_QueryNodeParseException, errorToken),
              DECLARE_SET_FIELD(t_QueryNodeParseException, nonLocalizedMessage),
              DECLARE_GETSET_FIELD(t_QueryNodeParseException, query),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryNodeParseException__methods_[] = {
              DECLARE_METHOD(t_QueryNodeParseException, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeParseException, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeParseException, getBeginColumn, METH_NOARGS),
              DECLARE_METHOD(t_QueryNodeParseException, getBeginLine, METH_NOARGS),
              DECLARE_METHOD(t_QueryNodeParseException, getErrorToken, METH_NOARGS),
              DECLARE_METHOD(t_QueryNodeParseException, getQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryNodeParseException, setNonLocalizedMessage, METH_O),
              DECLARE_METHOD(t_QueryNodeParseException, setQuery, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryNodeParseException, t_QueryNodeParseException, ::org::apache::lucene::queryparser::flexible::core::QueryNodeException, QueryNodeParseException, t_QueryNodeParseException_init_, 0, 0, t_QueryNodeParseException__fields_, 0, 0);

            void t_QueryNodeParseException::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryNodeParseException), module, "QueryNodeParseException", 0);
            }

            void t_QueryNodeParseException::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryNodeParseException).tp_dict, "class_", make_descriptor(QueryNodeParseException::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryNodeParseException).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeParseException::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryNodeParseException).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryNodeParseException_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryNodeParseException::initializeClass, 1)))
                return NULL;
              return t_QueryNodeParseException::wrap_Object(QueryNodeParseException(((t_QueryNodeParseException *) arg)->object.this$));
            }
            static PyObject *t_QueryNodeParseException_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryNodeParseException::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryNodeParseException_init_(t_QueryNodeParseException *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::Throwable a0((jobject) NULL);
                  QueryNodeParseException object((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeParseException(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  QueryNodeParseException object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeParseException(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  ::java::lang::Throwable a1((jobject) NULL);
                  QueryNodeParseException object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, ::java::lang::Throwable::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = QueryNodeParseException(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryNodeParseException_getBeginColumn(t_QueryNodeParseException *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginColumn());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_QueryNodeParseException_getBeginLine(t_QueryNodeParseException *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginLine());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_QueryNodeParseException_getErrorToken(t_QueryNodeParseException *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getErrorToken());
              return j2p(result);
            }

            static PyObject *t_QueryNodeParseException_getQuery(t_QueryNodeParseException *self)
            {
              ::java::lang::CharSequence result((jobject) NULL);
              OBJ_CALL(result = self->object.getQuery());
              return ::java::lang::t_CharSequence::wrap_Object(result);
            }

            static PyObject *t_QueryNodeParseException_setNonLocalizedMessage(t_QueryNodeParseException *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNonLocalizedMessage(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setNonLocalizedMessage", arg);
              return NULL;
            }

            static PyObject *t_QueryNodeParseException_setQuery(t_QueryNodeParseException *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(self->object.setQuery(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setQuery", arg);
              return NULL;
            }

            static PyObject *t_QueryNodeParseException_get__beginColumn(t_QueryNodeParseException *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginColumn());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_QueryNodeParseException_get__beginLine(t_QueryNodeParseException *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginLine());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_QueryNodeParseException_get__errorToken(t_QueryNodeParseException *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getErrorToken());
              return j2p(value);
            }

            static int t_QueryNodeParseException_set__nonLocalizedMessage(t_QueryNodeParseException *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::messages::Message value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &value))
                {
                  INT_CALL(self->object.setNonLocalizedMessage(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nonLocalizedMessage", arg);
              return -1;
            }

            static PyObject *t_QueryNodeParseException_get__query(t_QueryNodeParseException *self, void *data)
            {
              ::java::lang::CharSequence value((jobject) NULL);
              OBJ_CALL(value = self->object.getQuery());
              return ::java::lang::t_CharSequence::wrap_Object(value);
            }
            static int t_QueryNodeParseException_set__query(t_QueryNodeParseException *self, PyObject *arg, void *data)
            {
              {
                ::java::lang::CharSequence value((jobject) NULL);
                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                {
                  INT_CALL(self->object.setQuery(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "query", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInfo$DocValuesType.h"
#include "org/apache/lucene/index/FieldInfo$IndexOptions.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FieldInfo::class$ = NULL;
        jmethodID *FieldInfo::mids$ = NULL;
        jfieldID *FieldInfo::fids$ = NULL;
        bool FieldInfo::live$ = false;

        jclass FieldInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FieldInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_09a7b3ac] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ZIZZZLorg/apache/lucene/index/FieldInfo$IndexOptions;Lorg/apache/lucene/index/FieldInfo$DocValuesType;Lorg/apache/lucene/index/FieldInfo$DocValuesType;JLjava/util/Map;)V");
            mids$[mid_attributes_db60befd] = env->getMethodID(cls, "attributes", "()Ljava/util/Map;");
            mids$[mid_getAttribute_97a5258f] = env->getMethodID(cls, "getAttribute", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getDocValuesGen_54c6a17a] = env->getMethodID(cls, "getDocValuesGen", "()J");
            mids$[mid_getDocValuesType_db3dc573] = env->getMethodID(cls, "getDocValuesType", "()Lorg/apache/lucene/index/FieldInfo$DocValuesType;");
            mids$[mid_getIndexOptions_e1b704de] = env->getMethodID(cls, "getIndexOptions", "()Lorg/apache/lucene/index/FieldInfo$IndexOptions;");
            mids$[mid_getNormType_db3dc573] = env->getMethodID(cls, "getNormType", "()Lorg/apache/lucene/index/FieldInfo$DocValuesType;");
            mids$[mid_hasDocValues_54c6a16a] = env->getMethodID(cls, "hasDocValues", "()Z");
            mids$[mid_hasNorms_54c6a16a] = env->getMethodID(cls, "hasNorms", "()Z");
            mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
            mids$[mid_hasVectors_54c6a16a] = env->getMethodID(cls, "hasVectors", "()Z");
            mids$[mid_isIndexed_54c6a16a] = env->getMethodID(cls, "isIndexed", "()Z");
            mids$[mid_omitsNorms_54c6a16a] = env->getMethodID(cls, "omitsNorms", "()Z");
            mids$[mid_putAttribute_aacea7e9] = env->getMethodID(cls, "putAttribute", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_name] = env->getFieldID(cls, "name", "Ljava/lang/String;");
            fids$[fid_number] = env->getFieldID(cls, "number", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldInfo::FieldInfo(const ::java::lang::String & a0, jboolean a1, jint a2, jboolean a3, jboolean a4, jboolean a5, const ::org::apache::lucene::index::FieldInfo$IndexOptions & a6, const ::org::apache::lucene::index::FieldInfo$DocValuesType & a7, const ::org::apache::lucene::index::FieldInfo$DocValuesType & a8, jlong a9, const ::java::util::Map & a10) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_09a7b3ac, a0.this$, a1, a2, a3, a4, a5, a6.this$, a7.this$, a8.this$, a9, a10.this$)) {}

        ::java::util::Map FieldInfo::attributes() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_attributes_db60befd]));
        }

        ::java::lang::String FieldInfo::getAttribute(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getAttribute_97a5258f], a0.this$));
        }

        jlong FieldInfo::getDocValuesGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getDocValuesGen_54c6a17a]);
        }

        ::org::apache::lucene::index::FieldInfo$DocValuesType FieldInfo::getDocValuesType() const
        {
          return ::org::apache::lucene::index::FieldInfo$DocValuesType(env->callObjectMethod(this$, mids$[mid_getDocValuesType_db3dc573]));
        }

        ::org::apache::lucene::index::FieldInfo$IndexOptions FieldInfo::getIndexOptions() const
        {
          return ::org::apache::lucene::index::FieldInfo$IndexOptions(env->callObjectMethod(this$, mids$[mid_getIndexOptions_e1b704de]));
        }

        ::org::apache::lucene::index::FieldInfo$DocValuesType FieldInfo::getNormType() const
        {
          return ::org::apache::lucene::index::FieldInfo$DocValuesType(env->callObjectMethod(this$, mids$[mid_getNormType_db3dc573]));
        }

        jboolean FieldInfo::hasDocValues() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasDocValues_54c6a16a]);
        }

        jboolean FieldInfo::hasNorms() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNorms_54c6a16a]);
        }

        jboolean FieldInfo::hasPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
        }

        jboolean FieldInfo::hasVectors() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasVectors_54c6a16a]);
        }

        jboolean FieldInfo::isIndexed() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isIndexed_54c6a16a]);
        }

        jboolean FieldInfo::omitsNorms() const
        {
          return env->callBooleanMethod(this$, mids$[mid_omitsNorms_54c6a16a]);
        }

        ::java::lang::String FieldInfo::putAttribute(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_putAttribute_aacea7e9], a0.this$, a1.this$));
        }

        ::java::lang::String FieldInfo::_get_name() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_name]));
        }

        jint FieldInfo::_get_number() const
        {
          return env->getIntField(this$, fids$[fid_number]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FieldInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldInfo_init_(t_FieldInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldInfo_attributes(t_FieldInfo *self);
        static PyObject *t_FieldInfo_getAttribute(t_FieldInfo *self, PyObject *arg);
        static PyObject *t_FieldInfo_getDocValuesGen(t_FieldInfo *self);
        static PyObject *t_FieldInfo_getDocValuesType(t_FieldInfo *self);
        static PyObject *t_FieldInfo_getIndexOptions(t_FieldInfo *self);
        static PyObject *t_FieldInfo_getNormType(t_FieldInfo *self);
        static PyObject *t_FieldInfo_hasDocValues(t_FieldInfo *self);
        static PyObject *t_FieldInfo_hasNorms(t_FieldInfo *self);
        static PyObject *t_FieldInfo_hasPayloads(t_FieldInfo *self);
        static PyObject *t_FieldInfo_hasVectors(t_FieldInfo *self);
        static PyObject *t_FieldInfo_isIndexed(t_FieldInfo *self);
        static PyObject *t_FieldInfo_omitsNorms(t_FieldInfo *self);
        static PyObject *t_FieldInfo_putAttribute(t_FieldInfo *self, PyObject *args);
        static PyObject *t_FieldInfo_get__name(t_FieldInfo *self, void *data);
        static PyObject *t_FieldInfo_get__number(t_FieldInfo *self, void *data);

        static PyObject *t_FieldInfo_get__docValuesGen(t_FieldInfo *self, void *data);
        static PyObject *t_FieldInfo_get__docValuesType(t_FieldInfo *self, void *data);
        static PyObject *t_FieldInfo_get__indexOptions(t_FieldInfo *self, void *data);
        static PyObject *t_FieldInfo_get__indexed(t_FieldInfo *self, void *data);
        static PyObject *t_FieldInfo_get__normType(t_FieldInfo *self, void *data);
        static PyGetSetDef t_FieldInfo__fields_[] = {
          DECLARE_GET_FIELD(t_FieldInfo, name),
          DECLARE_GET_FIELD(t_FieldInfo, number),
          DECLARE_GET_FIELD(t_FieldInfo, docValuesGen),
          DECLARE_GET_FIELD(t_FieldInfo, docValuesType),
          DECLARE_GET_FIELD(t_FieldInfo, indexOptions),
          DECLARE_GET_FIELD(t_FieldInfo, indexed),
          DECLARE_GET_FIELD(t_FieldInfo, normType),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldInfo__methods_[] = {
          DECLARE_METHOD(t_FieldInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo, attributes, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, getAttribute, METH_O),
          DECLARE_METHOD(t_FieldInfo, getDocValuesGen, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, getDocValuesType, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, getIndexOptions, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, getNormType, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, hasDocValues, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, hasNorms, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, hasPayloads, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, hasVectors, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, isIndexed, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, omitsNorms, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, putAttribute, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInfo, t_FieldInfo, ::java::lang::Object, FieldInfo, t_FieldInfo_init_, 0, 0, t_FieldInfo__fields_, 0, 0);

        void t_FieldInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfo), module, "FieldInfo", 0);
          PyDict_SetItemString(PY_TYPE(FieldInfo).tp_dict, "DocValuesType", make_descriptor(&PY_TYPE(FieldInfo$DocValuesType)));
          PyDict_SetItemString(PY_TYPE(FieldInfo).tp_dict, "IndexOptions", make_descriptor(&PY_TYPE(FieldInfo$IndexOptions)));
        }

        void t_FieldInfo::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInfo).tp_dict, "class_", make_descriptor(FieldInfo::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInfo).tp_dict, "wrapfn_", make_descriptor(t_FieldInfo::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfo::initializeClass, 1)))
            return NULL;
          return t_FieldInfo::wrap_Object(FieldInfo(((t_FieldInfo *) arg)->object.this$));
        }
        static PyObject *t_FieldInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldInfo_init_(t_FieldInfo *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean a1;
          jint a2;
          jboolean a3;
          jboolean a4;
          jboolean a5;
          ::org::apache::lucene::index::FieldInfo$IndexOptions a6((jobject) NULL);
          PyTypeObject **p6;
          ::org::apache::lucene::index::FieldInfo$DocValuesType a7((jobject) NULL);
          PyTypeObject **p7;
          ::org::apache::lucene::index::FieldInfo$DocValuesType a8((jobject) NULL);
          PyTypeObject **p8;
          jlong a9;
          ::java::util::Map a10((jobject) NULL);
          PyTypeObject **p10;
          FieldInfo object((jobject) NULL);

          if (!parseArgs(args, "sZIZZZKKKJK", ::org::apache::lucene::index::FieldInfo$IndexOptions::initializeClass, ::org::apache::lucene::index::FieldInfo$DocValuesType::initializeClass, ::org::apache::lucene::index::FieldInfo$DocValuesType::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &p6, ::org::apache::lucene::index::t_FieldInfo$IndexOptions::parameters_, &a7, &p7, ::org::apache::lucene::index::t_FieldInfo$DocValuesType::parameters_, &a8, &p8, ::org::apache::lucene::index::t_FieldInfo$DocValuesType::parameters_, &a9, &a10, &p10, ::java::util::t_Map::parameters_))
          {
            INT_CALL(object = FieldInfo(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldInfo_attributes(t_FieldInfo *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.attributes());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_FieldInfo_getAttribute(t_FieldInfo *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getAttribute(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAttribute", arg);
          return NULL;
        }

        static PyObject *t_FieldInfo_getDocValuesGen(t_FieldInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_FieldInfo_getDocValuesType(t_FieldInfo *self)
        {
          ::org::apache::lucene::index::FieldInfo$DocValuesType result((jobject) NULL);
          OBJ_CALL(result = self->object.getDocValuesType());
          return ::org::apache::lucene::index::t_FieldInfo$DocValuesType::wrap_Object(result);
        }

        static PyObject *t_FieldInfo_getIndexOptions(t_FieldInfo *self)
        {
          ::org::apache::lucene::index::FieldInfo$IndexOptions result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexOptions());
          return ::org::apache::lucene::index::t_FieldInfo$IndexOptions::wrap_Object(result);
        }

        static PyObject *t_FieldInfo_getNormType(t_FieldInfo *self)
        {
          ::org::apache::lucene::index::FieldInfo$DocValuesType result((jobject) NULL);
          OBJ_CALL(result = self->object.getNormType());
          return ::org::apache::lucene::index::t_FieldInfo$DocValuesType::wrap_Object(result);
        }

        static PyObject *t_FieldInfo_hasDocValues(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasDocValues());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_hasNorms(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasNorms());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_hasPayloads(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPayloads());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_hasVectors(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasVectors());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_isIndexed(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isIndexed());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_omitsNorms(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.omitsNorms());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_putAttribute(t_FieldInfo *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = self->object.putAttribute(a0, a1));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "putAttribute", args);
          return NULL;
        }

        static PyObject *t_FieldInfo_get__name(t_FieldInfo *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_name());
          return j2p(value);
        }

        static PyObject *t_FieldInfo_get__number(t_FieldInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_number());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FieldInfo_get__docValuesGen(t_FieldInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_FieldInfo_get__docValuesType(t_FieldInfo *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfo$DocValuesType value((jobject) NULL);
          OBJ_CALL(value = self->object.getDocValuesType());
          return ::org::apache::lucene::index::t_FieldInfo$DocValuesType::wrap_Object(value);
        }

        static PyObject *t_FieldInfo_get__indexOptions(t_FieldInfo *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfo$IndexOptions value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexOptions());
          return ::org::apache::lucene::index::t_FieldInfo$IndexOptions::wrap_Object(value);
        }

        static PyObject *t_FieldInfo_get__indexed(t_FieldInfo *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isIndexed());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_FieldInfo_get__normType(t_FieldInfo *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfo$DocValuesType value((jobject) NULL);
          OBJ_CALL(value = self->object.getNormType());
          return ::org::apache::lucene::index::t_FieldInfo$DocValuesType::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/ParseException.h"
#include "java/util/Locale.h"
#include "org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *EscapeQuerySyntaxImpl::class$ = NULL;
              jmethodID *EscapeQuerySyntaxImpl::mids$ = NULL;
              bool EscapeQuerySyntaxImpl::live$ = false;

              jclass EscapeQuerySyntaxImpl::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_discardEscapeChar_31714ed7] = env->getStaticMethodID(cls, "discardEscapeChar", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence;");
                  mids$[mid_escape_dd58ce7f] = env->getMethodID(cls, "escape", "(Ljava/lang/CharSequence;Ljava/util/Locale;Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;)Ljava/lang/CharSequence;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              EscapeQuerySyntaxImpl::EscapeQuerySyntaxImpl() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::util::UnescapedCharSequence EscapeQuerySyntaxImpl::discardEscapeChar(const ::java::lang::CharSequence & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return ::org::apache::lucene::queryparser::flexible::core::util::UnescapedCharSequence(env->callStaticObjectMethod(cls, mids$[mid_discardEscapeChar_31714ed7], a0.this$));
              }

              ::java::lang::CharSequence EscapeQuerySyntaxImpl::escape(const ::java::lang::CharSequence & a0, const ::java::util::Locale & a1, const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type & a2) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_escape_dd58ce7f], a0.this$, a1.this$, a2.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_EscapeQuerySyntaxImpl_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntaxImpl_instance_(PyTypeObject *type, PyObject *arg);
              static int t_EscapeQuerySyntaxImpl_init_(t_EscapeQuerySyntaxImpl *self, PyObject *args, PyObject *kwds);
              static PyObject *t_EscapeQuerySyntaxImpl_discardEscapeChar(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntaxImpl_escape(t_EscapeQuerySyntaxImpl *self, PyObject *args);

              static PyMethodDef t_EscapeQuerySyntaxImpl__methods_[] = {
                DECLARE_METHOD(t_EscapeQuerySyntaxImpl, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntaxImpl, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntaxImpl, discardEscapeChar, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntaxImpl, escape, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(EscapeQuerySyntaxImpl, t_EscapeQuerySyntaxImpl, ::java::lang::Object, EscapeQuerySyntaxImpl, t_EscapeQuerySyntaxImpl_init_, 0, 0, 0, 0, 0);

              void t_EscapeQuerySyntaxImpl::install(PyObject *module)
              {
                installType(&PY_TYPE(EscapeQuerySyntaxImpl), module, "EscapeQuerySyntaxImpl", 0);
              }

              void t_EscapeQuerySyntaxImpl::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntaxImpl).tp_dict, "class_", make_descriptor(EscapeQuerySyntaxImpl::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntaxImpl).tp_dict, "wrapfn_", make_descriptor(t_EscapeQuerySyntaxImpl::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntaxImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_EscapeQuerySyntaxImpl_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, EscapeQuerySyntaxImpl::initializeClass, 1)))
                  return NULL;
                return t_EscapeQuerySyntaxImpl::wrap_Object(EscapeQuerySyntaxImpl(((t_EscapeQuerySyntaxImpl *) arg)->object.this$));
              }
              static PyObject *t_EscapeQuerySyntaxImpl_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, EscapeQuerySyntaxImpl::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_EscapeQuerySyntaxImpl_init_(t_EscapeQuerySyntaxImpl *self, PyObject *args, PyObject *kwds)
              {
                EscapeQuerySyntaxImpl object((jobject) NULL);

                INT_CALL(object = EscapeQuerySyntaxImpl());
                self->object = object;

                return 0;
              }

              static PyObject *t_EscapeQuerySyntaxImpl_discardEscapeChar(PyTypeObject *type, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::util::UnescapedCharSequence result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::parser::EscapeQuerySyntaxImpl::discardEscapeChar(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::util::t_UnescapedCharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError(type, "discardEscapeChar", arg);
                return NULL;
              }

              static PyObject *t_EscapeQuerySyntaxImpl_escape(t_EscapeQuerySyntaxImpl *self, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::util::Locale a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "OkK", &::java::lang::PY_TYPE(CharSequence), ::java::util::Locale::initializeClass, ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::queryparser::flexible::core::parser::t_EscapeQuerySyntax$Type::parameters_))
                {
                  OBJ_CALL(result = self->object.escape(a0, a1, a2));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "escape", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *OffsetAttribute::class$ = NULL;
          jmethodID *OffsetAttribute::mids$ = NULL;
          bool OffsetAttribute::live$ = false;

          jclass OffsetAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/OffsetAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_endOffset_54c6a179] = env->getMethodID(cls, "endOffset", "()I");
              mids$[mid_setOffset_d8d154a6] = env->getMethodID(cls, "setOffset", "(II)V");
              mids$[mid_startOffset_54c6a179] = env->getMethodID(cls, "startOffset", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint OffsetAttribute::endOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_endOffset_54c6a179]);
          }

          void OffsetAttribute::setOffset(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setOffset_d8d154a6], a0, a1);
          }

          jint OffsetAttribute::startOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_startOffset_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_OffsetAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OffsetAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OffsetAttribute_endOffset(t_OffsetAttribute *self);
          static PyObject *t_OffsetAttribute_setOffset(t_OffsetAttribute *self, PyObject *args);
          static PyObject *t_OffsetAttribute_startOffset(t_OffsetAttribute *self);

          static PyMethodDef t_OffsetAttribute__methods_[] = {
            DECLARE_METHOD(t_OffsetAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetAttribute, endOffset, METH_NOARGS),
            DECLARE_METHOD(t_OffsetAttribute, setOffset, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttribute, startOffset, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(OffsetAttribute, t_OffsetAttribute, ::org::apache::lucene::util::Attribute, OffsetAttribute, abstract_init, 0, 0, 0, 0, 0);

          void t_OffsetAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(OffsetAttribute), module, "OffsetAttribute", 0);
          }

          void t_OffsetAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(OffsetAttribute).tp_dict, "class_", make_descriptor(OffsetAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(OffsetAttribute).tp_dict, "wrapfn_", make_descriptor(t_OffsetAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(OffsetAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OffsetAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OffsetAttribute::initializeClass, 1)))
              return NULL;
            return t_OffsetAttribute::wrap_Object(OffsetAttribute(((t_OffsetAttribute *) arg)->object.this$));
          }
          static PyObject *t_OffsetAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OffsetAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_OffsetAttribute_endOffset(t_OffsetAttribute *self)
          {
            jint result;
            OBJ_CALL(result = self->object.endOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_OffsetAttribute_setOffset(t_OffsetAttribute *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.setOffset(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setOffset", args);
            return NULL;
          }

          static PyObject *t_OffsetAttribute_startOffset(t_OffsetAttribute *self)
          {
            jint result;
            OBJ_CALL(result = self->object.startOffset());
            return PyInt_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester.h"
#include "java/util/Set.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/util/Version.h"
#include "java/util/List.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *BlendedInfixSuggester::class$ = NULL;
            jmethodID *BlendedInfixSuggester::mids$ = NULL;
            bool BlendedInfixSuggester::live$ = false;
            jint BlendedInfixSuggester::DEFAULT_NUM_FACTOR = (jint) 0;

            jclass BlendedInfixSuggester::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b2fef229] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_185ca32c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;ILorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;I)V");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_lookup_bb92c162] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;IZZ)Ljava/util/List;");
                mids$[mid_getTextFieldType_a2615189] = env->getMethodID(cls, "getTextFieldType", "()Lorg/apache/lucene/document/FieldType;");
                mids$[mid_createResults_dfa2a05f] = env->getMethodID(cls, "createResults", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopFieldDocs;ILjava/lang/CharSequence;ZLjava/util/Set;Ljava/lang/String;)Ljava/util/List;");
                mids$[mid_calculateCoefficient_39c7bd2e] = env->getMethodID(cls, "calculateCoefficient", "(I)D");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                DEFAULT_NUM_FACTOR = env->getStaticIntField(cls, "DEFAULT_NUM_FACTOR");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BlendedInfixSuggester::BlendedInfixSuggester(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::search::suggest::analyzing::AnalyzingInfixSuggester(env->newObject(initializeClass, &mids$, mid_init$_b2fef229, a0.this$, a1.this$, a2.this$)) {}

            BlendedInfixSuggester::BlendedInfixSuggester(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::analysis::Analyzer & a2, const ::org::apache::lucene::analysis::Analyzer & a3, jint a4, const ::org::apache::lucene::search::suggest::analyzing::BlendedInfixSuggester$BlenderType & a5, jint a6) : ::org::apache::lucene::search::suggest::analyzing::AnalyzingInfixSuggester(env->newObject(initializeClass, &mids$, mid_init$_185ca32c, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5.this$, a6)) {}

            ::java::util::List BlendedInfixSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            ::java::util::List BlendedInfixSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jint a2, jboolean a3, jboolean a4) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_bb92c162], a0.this$, a1.this$, a2, a3, a4));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_BlendedInfixSuggester_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BlendedInfixSuggester_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BlendedInfixSuggester_init_(t_BlendedInfixSuggester *self, PyObject *args, PyObject *kwds);
            static PyObject *t_BlendedInfixSuggester_lookup(t_BlendedInfixSuggester *self, PyObject *args);

            static PyMethodDef t_BlendedInfixSuggester__methods_[] = {
              DECLARE_METHOD(t_BlendedInfixSuggester, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BlendedInfixSuggester, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BlendedInfixSuggester, lookup, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BlendedInfixSuggester, t_BlendedInfixSuggester, ::org::apache::lucene::search::suggest::analyzing::AnalyzingInfixSuggester, BlendedInfixSuggester, t_BlendedInfixSuggester_init_, 0, 0, 0, 0, 0);

            void t_BlendedInfixSuggester::install(PyObject *module)
            {
              installType(&PY_TYPE(BlendedInfixSuggester), module, "BlendedInfixSuggester", 0);
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester).tp_dict, "BlenderType", make_descriptor(&PY_TYPE(BlendedInfixSuggester$BlenderType)));
            }

            void t_BlendedInfixSuggester::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester).tp_dict, "class_", make_descriptor(BlendedInfixSuggester::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester).tp_dict, "wrapfn_", make_descriptor(t_BlendedInfixSuggester::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(BlendedInfixSuggester::initializeClass);
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester).tp_dict, "DEFAULT_NUM_FACTOR", make_descriptor(BlendedInfixSuggester::DEFAULT_NUM_FACTOR));
            }

            static PyObject *t_BlendedInfixSuggester_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BlendedInfixSuggester::initializeClass, 1)))
                return NULL;
              return t_BlendedInfixSuggester::wrap_Object(BlendedInfixSuggester(((t_BlendedInfixSuggester *) arg)->object.this$));
            }
            static PyObject *t_BlendedInfixSuggester_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BlendedInfixSuggester::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BlendedInfixSuggester_init_(t_BlendedInfixSuggester *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  ::org::apache::lucene::util::Version a0((jobject) NULL);
                  PyTypeObject **p0;
                  ::org::apache::lucene::store::Directory a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  BlendedInfixSuggester object((jobject) NULL);

                  if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                  {
                    INT_CALL(object = BlendedInfixSuggester(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 7:
                {
                  ::org::apache::lucene::util::Version a0((jobject) NULL);
                  PyTypeObject **p0;
                  ::org::apache::lucene::store::Directory a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                  jint a4;
                  ::org::apache::lucene::search::suggest::analyzing::BlendedInfixSuggester$BlenderType a5((jobject) NULL);
                  PyTypeObject **p5;
                  jint a6;
                  BlendedInfixSuggester object((jobject) NULL);

                  if (!parseArgs(args, "KkkkIKI", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::search::suggest::analyzing::BlendedInfixSuggester$BlenderType::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4, &a5, &p5, ::org::apache::lucene::search::suggest::analyzing::t_BlendedInfixSuggester$BlenderType::parameters_, &a6))
                  {
                    INT_CALL(object = BlendedInfixSuggester(a0, a1, a2, a3, a4, a5, a6));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_BlendedInfixSuggester_lookup(t_BlendedInfixSuggester *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 4:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jboolean a2;
                  jint a3;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                break;
               case 5:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jint a2;
                  jboolean a3;
                  jboolean a4;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKIZZ", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3, &a4))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3, a4));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
              }

              return callSuper(&PY_TYPE(BlendedInfixSuggester), (PyObject *) self, "lookup", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonCollector.h"
#include "java/lang/Throwable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonCollector::class$ = NULL;
        jmethodID *PythonCollector::mids$ = NULL;
        bool PythonCollector::live$ = false;

        jclass PythonCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_collect_abdf2c51] = env->getMethodID(cls, "collect", "(IF)V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonCollector::PythonCollector() : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
        }

        void PythonCollector::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonCollector::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonCollector::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }

        void PythonCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonCollector_init_(t_PythonCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonCollector_collect(t_PythonCollector *self, PyObject *args);
        static PyObject *t_PythonCollector_finalize(t_PythonCollector *self);
        static PyObject *t_PythonCollector_pythonExtension(t_PythonCollector *self, PyObject *args);
        static PyObject *t_PythonCollector_setScorer(t_PythonCollector *self, PyObject *args);
        static jboolean JNICALL t_PythonCollector_acceptsDocsOutOfOrder0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonCollector_collect1(JNIEnv *jenv, jobject jobj, jint a0, jfloat a1);
        static void JNICALL t_PythonCollector_pythonDecRef2(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonCollector_setNextReader3(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonCollector_get__self(t_PythonCollector *self, void *data);
        static int t_PythonCollector_set__scorer(t_PythonCollector *self, PyObject *arg, void *data);
        static PyGetSetDef t_PythonCollector__fields_[] = {
          DECLARE_SET_FIELD(t_PythonCollector, scorer),
          DECLARE_GET_FIELD(t_PythonCollector, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonCollector__methods_[] = {
          DECLARE_METHOD(t_PythonCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonCollector, collect, METH_VARARGS),
          DECLARE_METHOD(t_PythonCollector, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonCollector, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonCollector, setScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonCollector, t_PythonCollector, ::org::apache::lucene::search::Collector, PythonCollector, t_PythonCollector_init_, 0, 0, t_PythonCollector__fields_, 0, 0);

        void t_PythonCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonCollector), module, "PythonCollector", 1);
        }

        void t_PythonCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonCollector).tp_dict, "class_", make_descriptor(PythonCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonCollector).tp_dict, "wrapfn_", make_descriptor(t_PythonCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonCollector::initializeClass);
          JNINativeMethod methods[] = {
            { "acceptsDocsOutOfOrder", "()Z", (void *) t_PythonCollector_acceptsDocsOutOfOrder0 },
            { "collect", "(IF)V", (void *) t_PythonCollector_collect1 },
            { "pythonDecRef", "()V", (void *) t_PythonCollector_pythonDecRef2 },
            { "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V", (void *) t_PythonCollector_setNextReader3 },
          };
          env->registerNatives(cls, methods, 4);
        }

        static PyObject *t_PythonCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonCollector::initializeClass, 1)))
            return NULL;
          return t_PythonCollector::wrap_Object(PythonCollector(((t_PythonCollector *) arg)->object.this$));
        }
        static PyObject *t_PythonCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonCollector_init_(t_PythonCollector *self, PyObject *args, PyObject *kwds)
        {
          PythonCollector object((jobject) NULL);

          INT_CALL(object = PythonCollector());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonCollector_collect(t_PythonCollector *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonCollector), (PyObject *) self, "collect", args, 2);
        }

        static PyObject *t_PythonCollector_finalize(t_PythonCollector *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonCollector_pythonExtension(t_PythonCollector *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonCollector_setScorer(t_PythonCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonCollector), (PyObject *) self, "setScorer", args, 2);
        }

        static jboolean JNICALL t_PythonCollector_acceptsDocsOutOfOrder0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonCollector::mids$[PythonCollector::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "acceptsDocsOutOfOrder", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("acceptsDocsOutOfOrder", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonCollector_collect1(JNIEnv *jenv, jobject jobj, jint a0, jfloat a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonCollector::mids$[PythonCollector::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "collect", "if", (int) a0, (float) a1);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonCollector_pythonDecRef2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonCollector::mids$[PythonCollector::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonCollector::mids$[PythonCollector::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static void JNICALL t_PythonCollector_setNextReader3(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonCollector::mids$[PythonCollector::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = ::org::apache::lucene::index::t_AtomicReaderContext::wrap_Object(::org::apache::lucene::index::AtomicReaderContext(a0));
          PyObject *result = PyObject_CallMethod(obj, "setNextReader", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static PyObject *t_PythonCollector_get__self(t_PythonCollector *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }

        static int t_PythonCollector_set__scorer(t_PythonCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$TermOrdValComparator.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$TermOrdValComparator::class$ = NULL;
        jmethodID *FieldComparator$TermOrdValComparator::mids$ = NULL;
        bool FieldComparator$TermOrdValComparator::live$ = false;

        jclass FieldComparator$TermOrdValComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$TermOrdValComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d40a4f2e] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;)V");
            mids$[mid_init$_cab89017] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Z)V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_compareValues_594e5ef9] = env->getMethodID(cls, "compareValues", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_7bc03dc4] = env->getMethodID(cls, "setTopValue", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_value_b57e9c3f] = env->getMethodID(cls, "value", "(I)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getSortedDocValues_59a5c92f] = env->getMethodID(cls, "getSortedDocValues", "(Lorg/apache/lucene/index/AtomicReaderContext;Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator$TermOrdValComparator::FieldComparator$TermOrdValComparator(jint a0, const ::java::lang::String & a1) : ::org::apache::lucene::search::FieldComparator(env->newObject(initializeClass, &mids$, mid_init$_d40a4f2e, a0, a1.this$)) {}

        FieldComparator$TermOrdValComparator::FieldComparator$TermOrdValComparator(jint a0, const ::java::lang::String & a1, jboolean a2) : ::org::apache::lucene::search::FieldComparator(env->newObject(initializeClass, &mids$, mid_init$_cab89017, a0, a1.this$, a2)) {}

        jint FieldComparator$TermOrdValComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$TermOrdValComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$TermOrdValComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        jint FieldComparator$TermOrdValComparator::compareValues(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compareValues_594e5ef9], a0.this$, a1.this$);
        }

        void FieldComparator$TermOrdValComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$TermOrdValComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$TermOrdValComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$TermOrdValComparator::setTopValue(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_7bc03dc4], a0.this$);
        }

        ::org::apache::lucene::util::BytesRef FieldComparator$TermOrdValComparator::value(jint a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_value_b57e9c3f], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$TermOrdValComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$TermOrdValComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$TermOrdValComparator_of_(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static int t_FieldComparator$TermOrdValComparator_init_(t_FieldComparator$TermOrdValComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator$TermOrdValComparator_compare(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermOrdValComparator_compareBottom(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermOrdValComparator_compareTop(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermOrdValComparator_compareValues(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermOrdValComparator_copy(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermOrdValComparator_setBottom(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermOrdValComparator_setNextReader(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermOrdValComparator_setTopValue(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermOrdValComparator_value(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static int t_FieldComparator$TermOrdValComparator_set__bottom(t_FieldComparator$TermOrdValComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$TermOrdValComparator_set__nextReader(t_FieldComparator$TermOrdValComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$TermOrdValComparator_set__topValue(t_FieldComparator$TermOrdValComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$TermOrdValComparator_get__parameters_(t_FieldComparator$TermOrdValComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$TermOrdValComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$TermOrdValComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$TermOrdValComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$TermOrdValComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$TermOrdValComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$TermOrdValComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, compareValues, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$TermOrdValComparator, t_FieldComparator$TermOrdValComparator, ::org::apache::lucene::search::FieldComparator, FieldComparator$TermOrdValComparator, t_FieldComparator$TermOrdValComparator_init_, 0, 0, t_FieldComparator$TermOrdValComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$TermOrdValComparator::wrap_Object(const FieldComparator$TermOrdValComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$TermOrdValComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$TermOrdValComparator *self = (t_FieldComparator$TermOrdValComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$TermOrdValComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$TermOrdValComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$TermOrdValComparator *self = (t_FieldComparator$TermOrdValComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$TermOrdValComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$TermOrdValComparator), module, "FieldComparator$TermOrdValComparator", 0);
        }

        void t_FieldComparator$TermOrdValComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$TermOrdValComparator).tp_dict, "class_", make_descriptor(FieldComparator$TermOrdValComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$TermOrdValComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$TermOrdValComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$TermOrdValComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$TermOrdValComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$TermOrdValComparator::wrap_Object(FieldComparator$TermOrdValComparator(((t_FieldComparator$TermOrdValComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$TermOrdValComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$TermOrdValComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_of_(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator$TermOrdValComparator_init_(t_FieldComparator$TermOrdValComparator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jint a0;
              ::java::lang::String a1((jobject) NULL);
              FieldComparator$TermOrdValComparator object((jobject) NULL);

              if (!parseArgs(args, "Is", &a0, &a1))
              {
                INT_CALL(object = FieldComparator$TermOrdValComparator(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::util::PY_TYPE(BytesRef);
                break;
              }
            }
            goto err;
           case 3:
            {
              jint a0;
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              FieldComparator$TermOrdValComparator object((jobject) NULL);

              if (!parseArgs(args, "IsZ", &a0, &a1, &a2))
              {
                INT_CALL(object = FieldComparator$TermOrdValComparator(a0, a1, a2));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::util::PY_TYPE(BytesRef);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_compare(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_compareBottom(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_compareTop(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_compareValues(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.compareValues(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "compareValues", args, 2);
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_copy(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_setBottom(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_setNextReader(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_setTopValue(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_value(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$TermOrdValComparator_get__parameters_(t_FieldComparator$TermOrdValComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$TermOrdValComparator_set__bottom(t_FieldComparator$TermOrdValComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$TermOrdValComparator_set__nextReader(t_FieldComparator$TermOrdValComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$TermOrdValComparator_set__topValue(t_FieldComparator$TermOrdValComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/UserInputQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/classic/QueryParser.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *UserInputQueryBuilder::class$ = NULL;
            jmethodID *UserInputQueryBuilder::mids$ = NULL;
            bool UserInputQueryBuilder::live$ = false;

            jclass UserInputQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/UserInputQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_3b88137f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/QueryParser;)V");
                mids$[mid_init$_d77cc89a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_createQueryParser_0804498e] = env->getMethodID(cls, "createQueryParser", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/queryparser/classic/QueryParser;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            UserInputQueryBuilder::UserInputQueryBuilder(const ::org::apache::lucene::queryparser::classic::QueryParser & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3b88137f, a0.this$)) {}

            UserInputQueryBuilder::UserInputQueryBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d77cc89a, a0.this$, a1.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_UserInputQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UserInputQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_UserInputQueryBuilder_init_(t_UserInputQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_UserInputQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_UserInputQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UserInputQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(UserInputQueryBuilder, t_UserInputQueryBuilder, ::java::lang::Object, UserInputQueryBuilder, t_UserInputQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_UserInputQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(UserInputQueryBuilder), module, "UserInputQueryBuilder", 0);
            }

            void t_UserInputQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(UserInputQueryBuilder).tp_dict, "class_", make_descriptor(UserInputQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(UserInputQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_UserInputQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(UserInputQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_UserInputQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, UserInputQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_UserInputQueryBuilder::wrap_Object(UserInputQueryBuilder(((t_UserInputQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_UserInputQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, UserInputQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_UserInputQueryBuilder_init_(t_UserInputQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::queryparser::classic::QueryParser a0((jobject) NULL);
                  UserInputQueryBuilder object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::QueryParser::initializeClass, &a0))
                  {
                    INT_CALL(object = UserInputQueryBuilder(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  UserInputQueryBuilder object((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = UserInputQueryBuilder(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/FloatFieldSource.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/FieldCache$FloatParser.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *FloatFieldSource::class$ = NULL;
            jmethodID *FloatFieldSource::mids$ = NULL;
            bool FloatFieldSource::live$ = false;

            jclass FloatFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/FloatFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_971bf26d] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$FloatParser;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FloatFieldSource::FloatFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            FloatFieldSource::FloatFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$FloatParser & a1) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_971bf26d, a0.this$, a1.this$)) {}

            ::java::lang::String FloatFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean FloatFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues FloatFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint FloatFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_FloatFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FloatFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FloatFieldSource_init_(t_FloatFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FloatFieldSource_description(t_FloatFieldSource *self, PyObject *args);
            static PyObject *t_FloatFieldSource_equals(t_FloatFieldSource *self, PyObject *args);
            static PyObject *t_FloatFieldSource_getValues(t_FloatFieldSource *self, PyObject *args);
            static PyObject *t_FloatFieldSource_hashCode(t_FloatFieldSource *self, PyObject *args);

            static PyMethodDef t_FloatFieldSource__methods_[] = {
              DECLARE_METHOD(t_FloatFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FloatFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FloatFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_FloatFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_FloatFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_FloatFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FloatFieldSource, t_FloatFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, FloatFieldSource, t_FloatFieldSource_init_, 0, 0, 0, 0, 0);

            void t_FloatFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(FloatFieldSource), module, "FloatFieldSource", 0);
            }

            void t_FloatFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FloatFieldSource).tp_dict, "class_", make_descriptor(FloatFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FloatFieldSource).tp_dict, "wrapfn_", make_descriptor(t_FloatFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FloatFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FloatFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FloatFieldSource::initializeClass, 1)))
                return NULL;
              return t_FloatFieldSource::wrap_Object(FloatFieldSource(((t_FloatFieldSource *) arg)->object.this$));
            }
            static PyObject *t_FloatFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FloatFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FloatFieldSource_init_(t_FloatFieldSource *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  FloatFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = FloatFieldSource(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::FieldCache$FloatParser a1((jobject) NULL);
                  FloatFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldCache$FloatParser::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = FloatFieldSource(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FloatFieldSource_description(t_FloatFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(FloatFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_FloatFieldSource_equals(t_FloatFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(FloatFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_FloatFieldSource_getValues(t_FloatFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(FloatFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_FloatFieldSource_hashCode(t_FloatFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(FloatFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/ClassicFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *ClassicFilter::class$ = NULL;
          jmethodID *ClassicFilter::mids$ = NULL;
          bool ClassicFilter::live$ = false;

          jclass ClassicFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/ClassicFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClassicFilter::ClassicFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ClassicFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_ClassicFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClassicFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClassicFilter_init_(t_ClassicFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClassicFilter_incrementToken(t_ClassicFilter *self, PyObject *args);

          static PyMethodDef t_ClassicFilter__methods_[] = {
            DECLARE_METHOD(t_ClassicFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ClassicFilter, t_ClassicFilter, ::org::apache::lucene::analysis::TokenFilter, ClassicFilter, t_ClassicFilter_init_, 0, 0, 0, 0, 0);

          void t_ClassicFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ClassicFilter), module, "ClassicFilter", 0);
          }

          void t_ClassicFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ClassicFilter).tp_dict, "class_", make_descriptor(ClassicFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ClassicFilter).tp_dict, "wrapfn_", make_descriptor(t_ClassicFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ClassicFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ClassicFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClassicFilter::initializeClass, 1)))
              return NULL;
            return t_ClassicFilter::wrap_Object(ClassicFilter(((t_ClassicFilter *) arg)->object.this$));
          }
          static PyObject *t_ClassicFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClassicFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClassicFilter_init_(t_ClassicFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ClassicFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ClassicFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClassicFilter_incrementToken(t_ClassicFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ClassicFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiNormalizationFilter::class$ = NULL;
          jmethodID *HindiNormalizationFilter::mids$ = NULL;
          bool HindiNormalizationFilter::live$ = false;

          jclass HindiNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiNormalizationFilter::HindiNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean HindiNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiNormalizationFilter_init_(t_HindiNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiNormalizationFilter_incrementToken(t_HindiNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_HindiNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_HindiNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HindiNormalizationFilter, t_HindiNormalizationFilter, ::org::apache::lucene::analysis::TokenFilter, HindiNormalizationFilter, t_HindiNormalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_HindiNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiNormalizationFilter), module, "HindiNormalizationFilter", 0);
          }

          void t_HindiNormalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HindiNormalizationFilter).tp_dict, "class_", make_descriptor(HindiNormalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HindiNormalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_HindiNormalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HindiNormalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HindiNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_HindiNormalizationFilter::wrap_Object(HindiNormalizationFilter(((t_HindiNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_HindiNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiNormalizationFilter_init_(t_HindiNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            HindiNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = HindiNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HindiNormalizationFilter_incrementToken(t_HindiNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(HindiNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *IndexOutput::class$ = NULL;
        jmethodID *IndexOutput::mids$ = NULL;
        bool IndexOutput::live$ = false;

        jclass IndexOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/IndexOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
            mids$[mid_getChecksum_54c6a17a] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_length_54c6a17a] = env->getMethodID(cls, "length", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexOutput::IndexOutput() : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void IndexOutput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void IndexOutput::flush() const
        {
          env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
        }

        jlong IndexOutput::getChecksum() const
        {
          return env->callLongMethod(this$, mids$[mid_getChecksum_54c6a17a]);
        }

        jlong IndexOutput::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_54c6a17a]);
        }

        jlong IndexOutput::length() const
        {
          return env->callLongMethod(this$, mids$[mid_length_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_IndexOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexOutput_init_(t_IndexOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexOutput_close(t_IndexOutput *self);
        static PyObject *t_IndexOutput_flush(t_IndexOutput *self);
        static PyObject *t_IndexOutput_getChecksum(t_IndexOutput *self);
        static PyObject *t_IndexOutput_getFilePointer(t_IndexOutput *self);
        static PyObject *t_IndexOutput_length(t_IndexOutput *self);
        static PyObject *t_IndexOutput_get__checksum(t_IndexOutput *self, void *data);
        static PyObject *t_IndexOutput_get__filePointer(t_IndexOutput *self, void *data);
        static PyGetSetDef t_IndexOutput__fields_[] = {
          DECLARE_GET_FIELD(t_IndexOutput, checksum),
          DECLARE_GET_FIELD(t_IndexOutput, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexOutput__methods_[] = {
          DECLARE_METHOD(t_IndexOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexOutput, close, METH_NOARGS),
          DECLARE_METHOD(t_IndexOutput, flush, METH_NOARGS),
          DECLARE_METHOD(t_IndexOutput, getChecksum, METH_NOARGS),
          DECLARE_METHOD(t_IndexOutput, getFilePointer, METH_NOARGS),
          DECLARE_METHOD(t_IndexOutput, length, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexOutput, t_IndexOutput, ::org::apache::lucene::store::DataOutput, IndexOutput, t_IndexOutput_init_, 0, 0, t_IndexOutput__fields_, 0, 0);

        void t_IndexOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexOutput), module, "IndexOutput", 0);
        }

        void t_IndexOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexOutput).tp_dict, "class_", make_descriptor(IndexOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexOutput).tp_dict, "wrapfn_", make_descriptor(t_IndexOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexOutput::initializeClass, 1)))
            return NULL;
          return t_IndexOutput::wrap_Object(IndexOutput(((t_IndexOutput *) arg)->object.this$));
        }
        static PyObject *t_IndexOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexOutput_init_(t_IndexOutput *self, PyObject *args, PyObject *kwds)
        {
          IndexOutput object((jobject) NULL);

          INT_CALL(object = IndexOutput());
          self->object = object;

          return 0;
        }

        static PyObject *t_IndexOutput_close(t_IndexOutput *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexOutput_flush(t_IndexOutput *self)
        {
          OBJ_CALL(self->object.flush());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexOutput_getChecksum(t_IndexOutput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexOutput_getFilePointer(t_IndexOutput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexOutput_length(t_IndexOutput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.length());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexOutput_get__checksum(t_IndexOutput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_IndexOutput_get__filePointer(t_IndexOutput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {

              ::java::lang::Class *FieldConfig::class$ = NULL;
              jmethodID *FieldConfig::mids$ = NULL;
              bool FieldConfig::live$ = false;

              jclass FieldConfig::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/config/FieldConfig");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                  mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FieldConfig::FieldConfig(const ::java::lang::String & a0) : ::org::apache::lucene::queryparser::flexible::core::config::AbstractQueryConfig(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

              ::java::lang::String FieldConfig::getField() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
              }

              ::java::lang::String FieldConfig::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {
              static PyObject *t_FieldConfig_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldConfig_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FieldConfig_init_(t_FieldConfig *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FieldConfig_getField(t_FieldConfig *self);
              static PyObject *t_FieldConfig_toString(t_FieldConfig *self, PyObject *args);
              static PyObject *t_FieldConfig_get__field(t_FieldConfig *self, void *data);
              static PyGetSetDef t_FieldConfig__fields_[] = {
                DECLARE_GET_FIELD(t_FieldConfig, field),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FieldConfig__methods_[] = {
                DECLARE_METHOD(t_FieldConfig, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldConfig, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldConfig, getField, METH_NOARGS),
                DECLARE_METHOD(t_FieldConfig, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldConfig, t_FieldConfig, ::org::apache::lucene::queryparser::flexible::core::config::AbstractQueryConfig, FieldConfig, t_FieldConfig_init_, 0, 0, t_FieldConfig__fields_, 0, 0);

              void t_FieldConfig::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldConfig), module, "FieldConfig", 0);
              }

              void t_FieldConfig::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldConfig).tp_dict, "class_", make_descriptor(FieldConfig::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldConfig).tp_dict, "wrapfn_", make_descriptor(t_FieldConfig::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldConfig_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldConfig::initializeClass, 1)))
                  return NULL;
                return t_FieldConfig::wrap_Object(FieldConfig(((t_FieldConfig *) arg)->object.this$));
              }
              static PyObject *t_FieldConfig_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldConfig::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FieldConfig_init_(t_FieldConfig *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::String a0((jobject) NULL);
                FieldConfig object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = FieldConfig(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FieldConfig_getField(t_FieldConfig *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return j2p(result);
              }

              static PyObject *t_FieldConfig_toString(t_FieldConfig *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(FieldConfig), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_FieldConfig_get__field(t_FieldConfig *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return j2p(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianStemmer::class$ = NULL;
          jmethodID *GalicianStemmer::mids$ = NULL;
          bool GalicianStemmer::live$ = false;

          jclass GalicianStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianStemmer::GalicianStemmer() : ::org::apache::lucene::analysis::pt::RSLPStemmerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint GalicianStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianStemmer_init_(t_GalicianStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianStemmer_stem(t_GalicianStemmer *self, PyObject *args);

          static PyMethodDef t_GalicianStemmer__methods_[] = {
            DECLARE_METHOD(t_GalicianStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GalicianStemmer, t_GalicianStemmer, ::org::apache::lucene::analysis::pt::RSLPStemmerBase, GalicianStemmer, t_GalicianStemmer_init_, 0, 0, 0, 0, 0);

          void t_GalicianStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianStemmer), module, "GalicianStemmer", 0);
          }

          void t_GalicianStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GalicianStemmer).tp_dict, "class_", make_descriptor(GalicianStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GalicianStemmer).tp_dict, "wrapfn_", make_descriptor(t_GalicianStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GalicianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GalicianStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianStemmer::initializeClass, 1)))
              return NULL;
            return t_GalicianStemmer::wrap_Object(GalicianStemmer(((t_GalicianStemmer *) arg)->object.this$));
          }
          static PyObject *t_GalicianStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianStemmer_init_(t_GalicianStemmer *self, PyObject *args, PyObject *kwds)
          {
            GalicianStemmer object((jobject) NULL);

            INT_CALL(object = GalicianStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_GalicianStemmer_stem(t_GalicianStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparatorSource.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparatorSource::class$ = NULL;
        jmethodID *FieldComparatorSource::mids$ = NULL;
        bool FieldComparatorSource::live$ = false;

        jclass FieldComparatorSource::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparatorSource");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_newComparator_0c7e6c91] = env->getMethodID(cls, "newComparator", "(Ljava/lang/String;IIZ)Lorg/apache/lucene/search/FieldComparator;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparatorSource::FieldComparatorSource() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::FieldComparator FieldComparatorSource::newComparator(const ::java::lang::String & a0, jint a1, jint a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_newComparator_0c7e6c91], a0.this$, a1, a2, a3));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparatorSource_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparatorSource_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldComparatorSource_init_(t_FieldComparatorSource *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparatorSource_newComparator(t_FieldComparatorSource *self, PyObject *args);

        static PyMethodDef t_FieldComparatorSource__methods_[] = {
          DECLARE_METHOD(t_FieldComparatorSource, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparatorSource, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparatorSource, newComparator, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparatorSource, t_FieldComparatorSource, ::java::lang::Object, FieldComparatorSource, t_FieldComparatorSource_init_, 0, 0, 0, 0, 0);

        void t_FieldComparatorSource::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparatorSource), module, "FieldComparatorSource", 0);
        }

        void t_FieldComparatorSource::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparatorSource).tp_dict, "class_", make_descriptor(FieldComparatorSource::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparatorSource).tp_dict, "wrapfn_", make_descriptor(t_FieldComparatorSource::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparatorSource).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparatorSource_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparatorSource::initializeClass, 1)))
            return NULL;
          return t_FieldComparatorSource::wrap_Object(FieldComparatorSource(((t_FieldComparatorSource *) arg)->object.this$));
        }
        static PyObject *t_FieldComparatorSource_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparatorSource::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldComparatorSource_init_(t_FieldComparatorSource *self, PyObject *args, PyObject *kwds)
        {
          FieldComparatorSource object((jobject) NULL);

          INT_CALL(object = FieldComparatorSource());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldComparatorSource_newComparator(t_FieldComparatorSource *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint a2;
          jboolean a3;
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "sIIZ", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.newComparator(a0, a1, a2, a3));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "newComparator", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/DocumentValueSourceDictionary.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *DocumentValueSourceDictionary::class$ = NULL;
          jmethodID *DocumentValueSourceDictionary::mids$ = NULL;
          bool DocumentValueSourceDictionary::live$ = false;

          jclass DocumentValueSourceDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/DocumentValueSourceDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_11b82207] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queries/function/ValueSource;)V");
              mids$[mid_init$_c3072aa9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queries/function/ValueSource;Ljava/lang/String;)V");
              mids$[mid_init$_8f8f3fa3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queries/function/ValueSource;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_getEntryIterator_23dc46b1] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DocumentValueSourceDictionary::DocumentValueSourceDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queries::function::ValueSource & a2) : ::org::apache::lucene::search::suggest::DocumentDictionary(env->newObject(initializeClass, &mids$, mid_init$_11b82207, a0.this$, a1.this$, a2.this$)) {}

          DocumentValueSourceDictionary::DocumentValueSourceDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queries::function::ValueSource & a2, const ::java::lang::String & a3) : ::org::apache::lucene::search::suggest::DocumentDictionary(env->newObject(initializeClass, &mids$, mid_init$_c3072aa9, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          DocumentValueSourceDictionary::DocumentValueSourceDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queries::function::ValueSource & a2, const ::java::lang::String & a3, const ::java::lang::String & a4) : ::org::apache::lucene::search::suggest::DocumentDictionary(env->newObject(initializeClass, &mids$, mid_init$_8f8f3fa3, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

          ::org::apache::lucene::search::suggest::InputIterator DocumentValueSourceDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_23dc46b1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_DocumentValueSourceDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DocumentValueSourceDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DocumentValueSourceDictionary_init_(t_DocumentValueSourceDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DocumentValueSourceDictionary_getEntryIterator(t_DocumentValueSourceDictionary *self, PyObject *args);
          static PyObject *t_DocumentValueSourceDictionary_get__entryIterator(t_DocumentValueSourceDictionary *self, void *data);
          static PyGetSetDef t_DocumentValueSourceDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_DocumentValueSourceDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DocumentValueSourceDictionary__methods_[] = {
            DECLARE_METHOD(t_DocumentValueSourceDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocumentValueSourceDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocumentValueSourceDictionary, getEntryIterator, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DocumentValueSourceDictionary, t_DocumentValueSourceDictionary, ::org::apache::lucene::search::suggest::DocumentDictionary, DocumentValueSourceDictionary, t_DocumentValueSourceDictionary_init_, 0, 0, t_DocumentValueSourceDictionary__fields_, 0, 0);

          void t_DocumentValueSourceDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(DocumentValueSourceDictionary), module, "DocumentValueSourceDictionary", 0);
          }

          void t_DocumentValueSourceDictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DocumentValueSourceDictionary).tp_dict, "class_", make_descriptor(DocumentValueSourceDictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DocumentValueSourceDictionary).tp_dict, "wrapfn_", make_descriptor(t_DocumentValueSourceDictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DocumentValueSourceDictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DocumentValueSourceDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DocumentValueSourceDictionary::initializeClass, 1)))
              return NULL;
            return t_DocumentValueSourceDictionary::wrap_Object(DocumentValueSourceDictionary(((t_DocumentValueSourceDictionary *) arg)->object.this$));
          }
          static PyObject *t_DocumentValueSourceDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DocumentValueSourceDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DocumentValueSourceDictionary_init_(t_DocumentValueSourceDictionary *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a2((jobject) NULL);
                DocumentValueSourceDictionary object((jobject) NULL);

                if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = DocumentValueSourceDictionary(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                DocumentValueSourceDictionary object((jobject) NULL);

                if (!parseArgs(args, "ksks", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = DocumentValueSourceDictionary(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                ::java::lang::String a4((jobject) NULL);
                DocumentValueSourceDictionary object((jobject) NULL);

                if (!parseArgs(args, "kskss", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = DocumentValueSourceDictionary(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DocumentValueSourceDictionary_getEntryIterator(t_DocumentValueSourceDictionary *self, PyObject *args)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getEntryIterator());
              return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DocumentValueSourceDictionary), (PyObject *) self, "getEntryIterator", args, 2);
          }

          static PyObject *t_DocumentValueSourceDictionary_get__entryIterator(t_DocumentValueSourceDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicNormalizationFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ar/ArabicNormalizationFilter.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicNormalizationFilterFactory::class$ = NULL;
          jmethodID *ArabicNormalizationFilterFactory::mids$ = NULL;
          bool ArabicNormalizationFilterFactory::live$ = false;

          jclass ArabicNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_4e13fbb2] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/ar/ArabicNormalizationFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicNormalizationFilterFactory::ArabicNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ar::ArabicNormalizationFilter ArabicNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::ar::ArabicNormalizationFilter(env->callObjectMethod(this$, mids$[mid_create_4e13fbb2], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory ArabicNormalizationFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicNormalizationFilterFactory_init_(t_ArabicNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicNormalizationFilterFactory_create(t_ArabicNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_ArabicNormalizationFilterFactory_getMultiTermComponent(t_ArabicNormalizationFilterFactory *self);
          static PyObject *t_ArabicNormalizationFilterFactory_get__multiTermComponent(t_ArabicNormalizationFilterFactory *self, void *data);
          static PyGetSetDef t_ArabicNormalizationFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_ArabicNormalizationFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ArabicNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ArabicNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_ArabicNormalizationFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicNormalizationFilterFactory, t_ArabicNormalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ArabicNormalizationFilterFactory, t_ArabicNormalizationFilterFactory_init_, 0, 0, t_ArabicNormalizationFilterFactory__fields_, 0, 0);

          void t_ArabicNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicNormalizationFilterFactory), module, "ArabicNormalizationFilterFactory", 0);
          }

          void t_ArabicNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicNormalizationFilterFactory).tp_dict, "class_", make_descriptor(ArabicNormalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ArabicNormalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ArabicNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ArabicNormalizationFilterFactory::wrap_Object(ArabicNormalizationFilterFactory(((t_ArabicNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ArabicNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicNormalizationFilterFactory_init_(t_ArabicNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ArabicNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ArabicNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArabicNormalizationFilterFactory_create(t_ArabicNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::ar::ArabicNormalizationFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::ar::t_ArabicNormalizationFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ArabicNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_ArabicNormalizationFilterFactory_getMultiTermComponent(t_ArabicNormalizationFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_ArabicNormalizationFilterFactory_get__multiTermComponent(t_ArabicNormalizationFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/bg/BulgarianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {

          ::java::lang::Class *BulgarianAnalyzer::class$ = NULL;
          jmethodID *BulgarianAnalyzer::mids$ = NULL;
          bool BulgarianAnalyzer::live$ = false;
          ::java::lang::String *BulgarianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass BulgarianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/bg/BulgarianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BulgarianAnalyzer::BulgarianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          BulgarianAnalyzer::BulgarianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          BulgarianAnalyzer::BulgarianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents BulgarianAnalyzer::createComponents(const ::java::lang::String & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_createComponents_1be39cae], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet BulgarianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {
          static PyObject *t_BulgarianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BulgarianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BulgarianAnalyzer_init_(t_BulgarianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BulgarianAnalyzer_createComponents(t_BulgarianAnalyzer *self, PyObject *args);
          static PyObject *t_BulgarianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_BulgarianAnalyzer_get__defaultStopSet(t_BulgarianAnalyzer *self, void *data);
          static PyGetSetDef t_BulgarianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_BulgarianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BulgarianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_BulgarianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianAnalyzer, createComponents, METH_VARARGS),
            DECLARE_METHOD(t_BulgarianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BulgarianAnalyzer, t_BulgarianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, BulgarianAnalyzer, t_BulgarianAnalyzer_init_, 0, 0, t_BulgarianAnalyzer__fields_, 0, 0);

          void t_BulgarianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(BulgarianAnalyzer), module, "BulgarianAnalyzer", 0);
          }

          void t_BulgarianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BulgarianAnalyzer).tp_dict, "class_", make_descriptor(BulgarianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BulgarianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_BulgarianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BulgarianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(BulgarianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(BulgarianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*BulgarianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_BulgarianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BulgarianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_BulgarianAnalyzer::wrap_Object(BulgarianAnalyzer(((t_BulgarianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_BulgarianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BulgarianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BulgarianAnalyzer_init_(t_BulgarianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                BulgarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = BulgarianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                BulgarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BulgarianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                BulgarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BulgarianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BulgarianAnalyzer_createComponents(t_BulgarianAnalyzer *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

            if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.createComponents(a0, a1));
              return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "createComponents", args);
            return NULL;
          }

          static PyObject *t_BulgarianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::bg::BulgarianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_BulgarianAnalyzer_get__defaultStopSet(t_BulgarianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/TruncateTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *TruncateTokenFilter::class$ = NULL;
          jmethodID *TruncateTokenFilter::mids$ = NULL;
          bool TruncateTokenFilter::live$ = false;

          jclass TruncateTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/TruncateTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TruncateTokenFilter::TruncateTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          jboolean TruncateTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_TruncateTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TruncateTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TruncateTokenFilter_init_(t_TruncateTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TruncateTokenFilter_incrementToken(t_TruncateTokenFilter *self, PyObject *args);

          static PyMethodDef t_TruncateTokenFilter__methods_[] = {
            DECLARE_METHOD(t_TruncateTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TruncateTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TruncateTokenFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TruncateTokenFilter, t_TruncateTokenFilter, ::org::apache::lucene::analysis::TokenFilter, TruncateTokenFilter, t_TruncateTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_TruncateTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TruncateTokenFilter), module, "TruncateTokenFilter", 0);
          }

          void t_TruncateTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TruncateTokenFilter).tp_dict, "class_", make_descriptor(TruncateTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TruncateTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_TruncateTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TruncateTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TruncateTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TruncateTokenFilter::initializeClass, 1)))
              return NULL;
            return t_TruncateTokenFilter::wrap_Object(TruncateTokenFilter(((t_TruncateTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_TruncateTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TruncateTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TruncateTokenFilter_init_(t_TruncateTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jint a1;
            TruncateTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              INT_CALL(object = TruncateTokenFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TruncateTokenFilter_incrementToken(t_TruncateTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TruncateTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PriorityQueue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PriorityQueue::class$ = NULL;
        jmethodID *PriorityQueue::mids$ = NULL;
        bool PriorityQueue::live$ = false;

        jclass PriorityQueue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PriorityQueue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_b3a85a05] = env->getMethodID(cls, "<init>", "(IZ)V");
            mids$[mid_add_a932a95f] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_insertWithOverflow_a932a95f] = env->getMethodID(cls, "insertWithOverflow", "(Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_pop_846352c3] = env->getMethodID(cls, "pop", "()Ljava/lang/Object;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_top_846352c3] = env->getMethodID(cls, "top", "()Ljava/lang/Object;");
            mids$[mid_updateTop_846352c3] = env->getMethodID(cls, "updateTop", "()Ljava/lang/Object;");
            mids$[mid_getSentinelObject_846352c3] = env->getMethodID(cls, "getSentinelObject", "()Ljava/lang/Object;");
            mids$[mid_getHeapArray_94e49c77] = env->getMethodID(cls, "getHeapArray", "()[Ljava/lang/Object;");
            mids$[mid_lessThan_466982fe] = env->getMethodID(cls, "lessThan", "(Ljava/lang/Object;Ljava/lang/Object;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PriorityQueue::PriorityQueue(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        PriorityQueue::PriorityQueue(jint a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b3a85a05, a0, a1)) {}

        ::java::lang::Object PriorityQueue::add(const ::java::lang::Object & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_add_a932a95f], a0.this$));
        }

        void PriorityQueue::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        ::java::lang::Object PriorityQueue::insertWithOverflow(const ::java::lang::Object & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_insertWithOverflow_a932a95f], a0.this$));
        }

        ::java::lang::Object PriorityQueue::pop() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_pop_846352c3]));
        }

        jint PriorityQueue::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        ::java::lang::Object PriorityQueue::top() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_top_846352c3]));
        }

        ::java::lang::Object PriorityQueue::updateTop() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_updateTop_846352c3]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PriorityQueue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PriorityQueue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PriorityQueue_of_(t_PriorityQueue *self, PyObject *args);
        static int t_PriorityQueue_init_(t_PriorityQueue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PriorityQueue_add(t_PriorityQueue *self, PyObject *arg);
        static PyObject *t_PriorityQueue_clear(t_PriorityQueue *self);
        static PyObject *t_PriorityQueue_insertWithOverflow(t_PriorityQueue *self, PyObject *arg);
        static PyObject *t_PriorityQueue_pop(t_PriorityQueue *self);
        static PyObject *t_PriorityQueue_size(t_PriorityQueue *self);
        static PyObject *t_PriorityQueue_top(t_PriorityQueue *self);
        static PyObject *t_PriorityQueue_updateTop(t_PriorityQueue *self);
        static PyObject *t_PriorityQueue_get__parameters_(t_PriorityQueue *self, void *data);
        static PyGetSetDef t_PriorityQueue__fields_[] = {
          DECLARE_GET_FIELD(t_PriorityQueue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PriorityQueue__methods_[] = {
          DECLARE_METHOD(t_PriorityQueue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PriorityQueue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PriorityQueue, of_, METH_VARARGS),
          DECLARE_METHOD(t_PriorityQueue, add, METH_O),
          DECLARE_METHOD(t_PriorityQueue, clear, METH_NOARGS),
          DECLARE_METHOD(t_PriorityQueue, insertWithOverflow, METH_O),
          DECLARE_METHOD(t_PriorityQueue, pop, METH_NOARGS),
          DECLARE_METHOD(t_PriorityQueue, size, METH_NOARGS),
          DECLARE_METHOD(t_PriorityQueue, top, METH_NOARGS),
          DECLARE_METHOD(t_PriorityQueue, updateTop, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PriorityQueue, t_PriorityQueue, ::java::lang::Object, PriorityQueue, t_PriorityQueue_init_, 0, 0, t_PriorityQueue__fields_, 0, 0);
        PyObject *t_PriorityQueue::wrap_Object(const PriorityQueue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_PriorityQueue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_PriorityQueue *self = (t_PriorityQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_PriorityQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_PriorityQueue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_PriorityQueue *self = (t_PriorityQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_PriorityQueue::install(PyObject *module)
        {
          installType(&PY_TYPE(PriorityQueue), module, "PriorityQueue", 0);
        }

        void t_PriorityQueue::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PriorityQueue).tp_dict, "class_", make_descriptor(PriorityQueue::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PriorityQueue).tp_dict, "wrapfn_", make_descriptor(t_PriorityQueue::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PriorityQueue).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PriorityQueue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PriorityQueue::initializeClass, 1)))
            return NULL;
          return t_PriorityQueue::wrap_Object(PriorityQueue(((t_PriorityQueue *) arg)->object.this$));
        }
        static PyObject *t_PriorityQueue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PriorityQueue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PriorityQueue_of_(t_PriorityQueue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_PriorityQueue_init_(t_PriorityQueue *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              PriorityQueue object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = PriorityQueue(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jint a0;
              jboolean a1;
              PriorityQueue object((jobject) NULL);

              if (!parseArgs(args, "IZ", &a0, &a1))
              {
                INT_CALL(object = PriorityQueue(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PriorityQueue_add(t_PriorityQueue *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(result = self->object.add(a0));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_PriorityQueue_clear(t_PriorityQueue *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_PriorityQueue_insertWithOverflow(t_PriorityQueue *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(result = self->object.insertWithOverflow(a0));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "insertWithOverflow", arg);
          return NULL;
        }

        static PyObject *t_PriorityQueue_pop(t_PriorityQueue *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.pop());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_PriorityQueue_size(t_PriorityQueue *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_PriorityQueue_top(t_PriorityQueue *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.top());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_PriorityQueue_updateTop(t_PriorityQueue *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.updateTop());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }
        static PyObject *t_PriorityQueue_get__parameters_(t_PriorityQueue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianMinimalStemmer::class$ = NULL;
          jmethodID *NorwegianMinimalStemmer::mids$ = NULL;
          bool NorwegianMinimalStemmer::live$ = false;

          jclass NorwegianMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianMinimalStemmer::NorwegianMinimalStemmer(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          jint NorwegianMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianMinimalStemmer_init_(t_NorwegianMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianMinimalStemmer_stem(t_NorwegianMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_NorwegianMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_NorwegianMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NorwegianMinimalStemmer, t_NorwegianMinimalStemmer, ::java::lang::Object, NorwegianMinimalStemmer, t_NorwegianMinimalStemmer_init_, 0, 0, 0, 0, 0);

          void t_NorwegianMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianMinimalStemmer), module, "NorwegianMinimalStemmer", 0);
          }

          void t_NorwegianMinimalStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemmer).tp_dict, "class_", make_descriptor(NorwegianMinimalStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemmer).tp_dict, "wrapfn_", make_descriptor(t_NorwegianMinimalStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NorwegianMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_NorwegianMinimalStemmer::wrap_Object(NorwegianMinimalStemmer(((t_NorwegianMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_NorwegianMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianMinimalStemmer_init_(t_NorwegianMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            NorwegianMinimalStemmer object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = NorwegianMinimalStemmer(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianMinimalStemmer_stem(t_NorwegianMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiFields.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiFields::class$ = NULL;
        jmethodID *MultiFields::mids$ = NULL;
        bool MultiFields::live$ = false;

        jclass MultiFields::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiFields");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4836fcd7] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/Fields;[Lorg/apache/lucene/index/ReaderSlice;)V");
            mids$[mid_getFields_450c502c] = env->getStaticMethodID(cls, "getFields", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/index/Fields;");
            mids$[mid_getIndexedFields_c7983645] = env->getStaticMethodID(cls, "getIndexedFields", "(Lorg/apache/lucene/index/IndexReader;)Ljava/util/Collection;");
            mids$[mid_getLiveDocs_38e907ca] = env->getStaticMethodID(cls, "getLiveDocs", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getMergedFieldInfos_27fb8e4c] = env->getStaticMethodID(cls, "getMergedFieldInfos", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getTermDocsEnum_0566f0df] = env->getStaticMethodID(cls, "getTermDocsEnum", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_getTermDocsEnum_dd660923] = env->getStaticMethodID(cls, "getTermDocsEnum", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;I)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_getTermPositionsEnum_b8773540] = env->getStaticMethodID(cls, "getTermPositionsEnum", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_getTermPositionsEnum_79e6ab0c] = env->getStaticMethodID(cls, "getTermPositionsEnum", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_getTerms_4d5aa19b] = env->getStaticMethodID(cls, "getTerms", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_terms_ee262ab4] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiFields::MultiFields(const JArray< ::org::apache::lucene::index::Fields > & a0, const JArray< ::org::apache::lucene::index::ReaderSlice > & a1) : ::org::apache::lucene::index::Fields(env->newObject(initializeClass, &mids$, mid_init$_4836fcd7, a0.this$, a1.this$)) {}

        ::org::apache::lucene::index::Fields MultiFields::getFields(const ::org::apache::lucene::index::IndexReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::Fields(env->callStaticObjectMethod(cls, mids$[mid_getFields_450c502c], a0.this$));
        }

        ::java::util::Collection MultiFields::getIndexedFields(const ::org::apache::lucene::index::IndexReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Collection(env->callStaticObjectMethod(cls, mids$[mid_getIndexedFields_c7983645], a0.this$));
        }

        ::org::apache::lucene::util::Bits MultiFields::getLiveDocs(const ::org::apache::lucene::index::IndexReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_getLiveDocs_38e907ca], a0.this$));
        }

        ::org::apache::lucene::index::FieldInfos MultiFields::getMergedFieldInfos(const ::org::apache::lucene::index::IndexReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::FieldInfos(env->callStaticObjectMethod(cls, mids$[mid_getMergedFieldInfos_27fb8e4c], a0.this$));
        }

        ::org::apache::lucene::index::DocsEnum MultiFields::getTermDocsEnum(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DocsEnum(env->callStaticObjectMethod(cls, mids$[mid_getTermDocsEnum_0566f0df], a0.this$, a1.this$, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::DocsEnum MultiFields::getTermDocsEnum(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3, jint a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DocsEnum(env->callStaticObjectMethod(cls, mids$[mid_getTermDocsEnum_dd660923], a0.this$, a1.this$, a2.this$, a3.this$, a4));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum MultiFields::getTermPositionsEnum(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callStaticObjectMethod(cls, mids$[mid_getTermPositionsEnum_b8773540], a0.this$, a1.this$, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum MultiFields::getTermPositionsEnum(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3, jint a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callStaticObjectMethod(cls, mids$[mid_getTermPositionsEnum_79e6ab0c], a0.this$, a1.this$, a2.this$, a3.this$, a4));
        }

        ::org::apache::lucene::index::Terms MultiFields::getTerms(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::Terms(env->callStaticObjectMethod(cls, mids$[mid_getTerms_4d5aa19b], a0.this$, a1.this$));
        }

        ::java::util::Iterator MultiFields::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        jint MultiFields::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        ::org::apache::lucene::index::Terms MultiFields::terms(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_ee262ab4], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiFields_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiFields_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiFields_init_(t_MultiFields *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiFields_getFields(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiFields_getIndexedFields(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiFields_getLiveDocs(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiFields_getMergedFieldInfos(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiFields_getTermDocsEnum(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiFields_getTermPositionsEnum(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiFields_getTerms(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiFields_iterator(t_MultiFields *self, PyObject *args);
        static PyObject *t_MultiFields_size(t_MultiFields *self, PyObject *args);
        static PyObject *t_MultiFields_terms(t_MultiFields *self, PyObject *args);

        static PyMethodDef t_MultiFields__methods_[] = {
          DECLARE_METHOD(t_MultiFields, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, getFields, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, getIndexedFields, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, getLiveDocs, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, getMergedFieldInfos, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, getTermDocsEnum, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, getTermPositionsEnum, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, getTerms, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, iterator, METH_VARARGS),
          DECLARE_METHOD(t_MultiFields, size, METH_VARARGS),
          DECLARE_METHOD(t_MultiFields, terms, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiFields, t_MultiFields, ::org::apache::lucene::index::Fields, MultiFields, t_MultiFields_init_, ((PyObject *(*)(t_MultiFields *)) get_iterator< t_MultiFields >), 0, 0, 0, 0);

        void t_MultiFields::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiFields), module, "MultiFields", 0);
        }

        void t_MultiFields::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiFields).tp_dict, "class_", make_descriptor(MultiFields::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiFields).tp_dict, "wrapfn_", make_descriptor(t_MultiFields::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiFields).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiFields_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiFields::initializeClass, 1)))
            return NULL;
          return t_MultiFields::wrap_Object(MultiFields(((t_MultiFields *) arg)->object.this$));
        }
        static PyObject *t_MultiFields_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiFields::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiFields_init_(t_MultiFields *self, PyObject *args, PyObject *kwds)
        {
          JArray< ::org::apache::lucene::index::Fields > a0((jobject) NULL);
          JArray< ::org::apache::lucene::index::ReaderSlice > a1((jobject) NULL);
          MultiFields object((jobject) NULL);

          if (!parseArgs(args, "[k[k", ::org::apache::lucene::index::Fields::initializeClass, ::org::apache::lucene::index::ReaderSlice::initializeClass, &a0, &a1))
          {
            INT_CALL(object = MultiFields(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiFields_getFields(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getFields(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getFields", arg);
          return NULL;
        }

        static PyObject *t_MultiFields_getIndexedFields(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::util::Collection result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getIndexedFields(a0));
            return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          PyErr_SetArgsError(type, "getIndexedFields", arg);
          return NULL;
        }

        static PyObject *t_MultiFields_getLiveDocs(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getLiveDocs(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getLiveDocs", arg);
          return NULL;
        }

        static PyObject *t_MultiFields_getMergedFieldInfos(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getMergedFieldInfos(a0));
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getMergedFieldInfos", arg);
          return NULL;
        }

        static PyObject *t_MultiFields_getTermDocsEnum(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 4:
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

              if (!parseArgs(args, "kksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getTermDocsEnum(a0, a1, a2, a3));
                return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
              }
            }
            break;
           case 5:
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              jint a4;
              ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

              if (!parseArgs(args, "kkskI", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getTermDocsEnum(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "getTermDocsEnum", args);
          return NULL;
        }

        static PyObject *t_MultiFields_getTermPositionsEnum(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 4:
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

              if (!parseArgs(args, "kksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getTermPositionsEnum(a0, a1, a2, a3));
                return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
              }
            }
            break;
           case 5:
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              jint a4;
              ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

              if (!parseArgs(args, "kkskI", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getTermPositionsEnum(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "getTermPositionsEnum", args);
          return NULL;
        }

        static PyObject *t_MultiFields_getTerms(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getTerms(a0, a1));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getTerms", args);
          return NULL;
        }

        static PyObject *t_MultiFields_iterator(t_MultiFields *self, PyObject *args)
        {
          ::java::util::Iterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::java::util::t_Iterator::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          return callSuper(&PY_TYPE(MultiFields), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_MultiFields_size(t_MultiFields *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiFields), (PyObject *) self, "size", args, 2);
        }

        static PyObject *t_MultiFields_terms(t_MultiFields *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.terms(a0));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiFields), (PyObject *) self, "terms", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *DataOutput::class$ = NULL;
        jmethodID *DataOutput::mids$ = NULL;
        bool DataOutput::live$ = false;

        jclass DataOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/DataOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_copyBytes_394617c2] = env->getMethodID(cls, "copyBytes", "(Lorg/apache/lucene/store/DataInput;J)V");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_b8354c43] = env->getMethodID(cls, "writeBytes", "([BI)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");
            mids$[mid_writeInt_39c7bd3c] = env->getMethodID(cls, "writeInt", "(I)V");
            mids$[mid_writeLong_0ee6df2f] = env->getMethodID(cls, "writeLong", "(J)V");
            mids$[mid_writeShort_3bc40c6a] = env->getMethodID(cls, "writeShort", "(S)V");
            mids$[mid_writeString_5fdc3f48] = env->getMethodID(cls, "writeString", "(Ljava/lang/String;)V");
            mids$[mid_writeStringSet_fb4f2b26] = env->getMethodID(cls, "writeStringSet", "(Ljava/util/Set;)V");
            mids$[mid_writeStringStringMap_4c9e2b1c] = env->getMethodID(cls, "writeStringStringMap", "(Ljava/util/Map;)V");
            mids$[mid_writeVInt_39c7bd3c] = env->getMethodID(cls, "writeVInt", "(I)V");
            mids$[mid_writeVLong_0ee6df2f] = env->getMethodID(cls, "writeVLong", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DataOutput::DataOutput() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void DataOutput::copyBytes(const ::org::apache::lucene::store::DataInput & a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copyBytes_394617c2], a0.this$, a1);
        }

        void DataOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_b2271687], a0);
        }

        void DataOutput::writeBytes(const JArray< jbyte > & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_b8354c43], a0.this$, a1);
        }

        void DataOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }

        void DataOutput::writeInt(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeInt_39c7bd3c], a0);
        }

        void DataOutput::writeLong(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeLong_0ee6df2f], a0);
        }

        void DataOutput::writeShort(jshort a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeShort_3bc40c6a], a0);
        }

        void DataOutput::writeString(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeString_5fdc3f48], a0.this$);
        }

        void DataOutput::writeStringSet(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeStringSet_fb4f2b26], a0.this$);
        }

        void DataOutput::writeStringStringMap(const ::java::util::Map & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeStringStringMap_4c9e2b1c], a0.this$);
        }

        void DataOutput::writeVInt(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeVInt_39c7bd3c], a0);
        }

        void DataOutput::writeVLong(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeVLong_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_DataOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DataOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DataOutput_init_(t_DataOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DataOutput_copyBytes(t_DataOutput *self, PyObject *args);
        static PyObject *t_DataOutput_writeByte(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeBytes(t_DataOutput *self, PyObject *args);
        static PyObject *t_DataOutput_writeInt(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeLong(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeShort(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeString(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeStringSet(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeStringStringMap(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeVInt(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeVLong(t_DataOutput *self, PyObject *arg);

        static PyMethodDef t_DataOutput__methods_[] = {
          DECLARE_METHOD(t_DataOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DataOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DataOutput, copyBytes, METH_VARARGS),
          DECLARE_METHOD(t_DataOutput, writeByte, METH_O),
          DECLARE_METHOD(t_DataOutput, writeBytes, METH_VARARGS),
          DECLARE_METHOD(t_DataOutput, writeInt, METH_O),
          DECLARE_METHOD(t_DataOutput, writeLong, METH_O),
          DECLARE_METHOD(t_DataOutput, writeShort, METH_O),
          DECLARE_METHOD(t_DataOutput, writeString, METH_O),
          DECLARE_METHOD(t_DataOutput, writeStringSet, METH_O),
          DECLARE_METHOD(t_DataOutput, writeStringStringMap, METH_O),
          DECLARE_METHOD(t_DataOutput, writeVInt, METH_O),
          DECLARE_METHOD(t_DataOutput, writeVLong, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DataOutput, t_DataOutput, ::java::lang::Object, DataOutput, t_DataOutput_init_, 0, 0, 0, 0, 0);

        void t_DataOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(DataOutput), module, "DataOutput", 0);
        }

        void t_DataOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DataOutput).tp_dict, "class_", make_descriptor(DataOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DataOutput).tp_dict, "wrapfn_", make_descriptor(t_DataOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DataOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DataOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DataOutput::initializeClass, 1)))
            return NULL;
          return t_DataOutput::wrap_Object(DataOutput(((t_DataOutput *) arg)->object.this$));
        }
        static PyObject *t_DataOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DataOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DataOutput_init_(t_DataOutput *self, PyObject *args, PyObject *kwds)
        {
          DataOutput object((jobject) NULL);

          INT_CALL(object = DataOutput());
          self->object = object;

          return 0;
        }

        static PyObject *t_DataOutput_copyBytes(t_DataOutput *self, PyObject *args)
        {
          ::org::apache::lucene::store::DataInput a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "kJ", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.copyBytes(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyBytes", args);
          return NULL;
        }

        static PyObject *t_DataOutput_writeByte(t_DataOutput *self, PyObject *arg)
        {
          jbyte a0;

          if (!parseArg(arg, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeByte", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeBytes(t_DataOutput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "[BI", &a0, &a1))
              {
                OBJ_CALL(self->object.writeBytes(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.writeBytes(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "writeBytes", args);
          return NULL;
        }

        static PyObject *t_DataOutput_writeInt(t_DataOutput *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.writeInt(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeInt", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeLong(t_DataOutput *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.writeLong(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeLong", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeShort(t_DataOutput *self, PyObject *arg)
        {
          jshort a0;

          if (!parseArg(arg, "S", &a0))
          {
            OBJ_CALL(self->object.writeShort(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeShort", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeString(t_DataOutput *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.writeString(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeString", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeStringSet(t_DataOutput *self, PyObject *arg)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.writeStringSet(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeStringSet", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeStringStringMap(t_DataOutput *self, PyObject *arg)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            OBJ_CALL(self->object.writeStringStringMap(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeStringStringMap", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeVInt(t_DataOutput *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.writeVInt(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeVInt", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeVLong(t_DataOutput *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.writeVLong(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeVLong", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchLightStemFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchLightStemFilterFactory::class$ = NULL;
          jmethodID *FrenchLightStemFilterFactory::mids$ = NULL;
          bool FrenchLightStemFilterFactory::live$ = false;

          jclass FrenchLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchLightStemFilterFactory::FrenchLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream FrenchLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchLightStemFilterFactory_init_(t_FrenchLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchLightStemFilterFactory_create(t_FrenchLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_FrenchLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_FrenchLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchLightStemFilterFactory, t_FrenchLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, FrenchLightStemFilterFactory, t_FrenchLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_FrenchLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchLightStemFilterFactory), module, "FrenchLightStemFilterFactory", 0);
          }

          void t_FrenchLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchLightStemFilterFactory).tp_dict, "class_", make_descriptor(FrenchLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_FrenchLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_FrenchLightStemFilterFactory::wrap_Object(FrenchLightStemFilterFactory(((t_FrenchLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_FrenchLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchLightStemFilterFactory_init_(t_FrenchLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            FrenchLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = FrenchLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FrenchLightStemFilterFactory_create(t_FrenchLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FrenchLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/HashSet.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Collection.h"
#include "java/io/Serializable.h"
#include "java/lang/Cloneable.h"
#include "java/util/Iterator.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *HashSet::class$ = NULL;
    jmethodID *HashSet::mids$ = NULL;
    bool HashSet::live$ = false;

    jclass HashSet::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/HashSet");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
        mids$[mid_init$_9bfb370d] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;)V");
        mids$[mid_init$_abdf2c51] = env->getMethodID(cls, "<init>", "(IF)V");
        mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
        mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
        mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
        mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
        mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    HashSet::HashSet() : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    HashSet::HashSet(jint a0) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

    HashSet::HashSet(const ::java::util::Collection & a0) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_9bfb370d, a0.this$)) {}

    HashSet::HashSet(jint a0, jfloat a1) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_abdf2c51, a0, a1)) {}

    jboolean HashSet::add(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_add_290588e2], a0.this$);
    }

    void HashSet::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
    }

    ::java::lang::Object HashSet::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jboolean HashSet::contains(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
    }

    jboolean HashSet::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
    }

    ::java::util::Iterator HashSet::iterator() const
    {
      return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
    }

    jboolean HashSet::remove(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
    }

    jint HashSet::size() const
    {
      return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_HashSet_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_HashSet_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_HashSet_of_(t_HashSet *self, PyObject *args);
    static int t_HashSet_init_(t_HashSet *self, PyObject *args, PyObject *kwds);
    static PyObject *t_HashSet_add(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_clear(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_clone(t_HashSet *self);
    static PyObject *t_HashSet_contains(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_isEmpty(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_iterator(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_remove(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_size(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_get__empty(t_HashSet *self, void *data);
    static PyObject *t_HashSet_get__parameters_(t_HashSet *self, void *data);
    static PyGetSetDef t_HashSet__fields_[] = {
      DECLARE_GET_FIELD(t_HashSet, empty),
      DECLARE_GET_FIELD(t_HashSet, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_HashSet__methods_[] = {
      DECLARE_METHOD(t_HashSet, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_HashSet, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_HashSet, of_, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, add, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, clear, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, clone, METH_NOARGS),
      DECLARE_METHOD(t_HashSet, contains, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, isEmpty, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, iterator, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, remove, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, size, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(HashSet, t_HashSet, ::java::util::AbstractSet, HashSet, t_HashSet_init_, ((PyObject *(*)(t_HashSet *)) get_generic_iterator< t_HashSet >), 0, t_HashSet__fields_, 0, 0);
    PyObject *t_HashSet::wrap_Object(const HashSet& object, PyTypeObject *p0)
    {
      PyObject *obj = t_HashSet::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_HashSet *self = (t_HashSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_HashSet::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_HashSet::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_HashSet *self = (t_HashSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_HashSet::install(PyObject *module)
    {
      installType(&PY_TYPE(HashSet), module, "HashSet", 0);
    }

    void t_HashSet::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(HashSet).tp_dict, "class_", make_descriptor(HashSet::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(HashSet).tp_dict, "wrapfn_", make_descriptor(t_HashSet::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(HashSet).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_HashSet_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, HashSet::initializeClass, 1)))
        return NULL;
      return t_HashSet::wrap_Object(HashSet(((t_HashSet *) arg)->object.this$));
    }
    static PyObject *t_HashSet_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, HashSet::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_HashSet_of_(t_HashSet *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static int t_HashSet_init_(t_HashSet *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          HashSet object((jobject) NULL);

          INT_CALL(object = HashSet());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          jint a0;
          HashSet object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = HashSet(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          HashSet object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            INT_CALL(object = HashSet(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          jint a0;
          jfloat a1;
          HashSet object((jobject) NULL);

          if (!parseArgs(args, "IF", &a0, &a1))
          {
            INT_CALL(object = HashSet(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_HashSet_add(t_HashSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.add(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "add", args, 2);
    }

    static PyObject *t_HashSet_clear(t_HashSet *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.clear());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "clear", args, 2);
    }

    static PyObject *t_HashSet_clone(t_HashSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_HashSet_contains(t_HashSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.contains(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "contains", args, 2);
    }

    static PyObject *t_HashSet_isEmpty(t_HashSet *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.isEmpty());
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "isEmpty", args, 2);
    }

    static PyObject *t_HashSet_iterator(t_HashSet *self, PyObject *args)
    {
      ::java::util::Iterator result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.iterator());
        return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "iterator", args, 2);
    }

    static PyObject *t_HashSet_remove(t_HashSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.remove(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "remove", args, 2);
    }

    static PyObject *t_HashSet_size(t_HashSet *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.size());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "size", args, 2);
    }
    static PyObject *t_HashSet_get__parameters_(t_HashSet *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_HashSet_get__empty(t_HashSet *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *EdgeNGramTokenFilter::class$ = NULL;
          jmethodID *EdgeNGramTokenFilter::mids$ = NULL;
          bool EdgeNGramTokenFilter::live$ = false;
          jint EdgeNGramTokenFilter::DEFAULT_MAX_GRAM_SIZE = (jint) 0;
          jint EdgeNGramTokenFilter::DEFAULT_MIN_GRAM_SIZE = (jint) 0;
          ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side *EdgeNGramTokenFilter::DEFAULT_SIDE = NULL;

          jclass EdgeNGramTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_46a9ddd5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_init$_fa7af393] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;II)V");
              mids$[mid_init$_ef953ccc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side;II)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_GRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_GRAM_SIZE");
              DEFAULT_MIN_GRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_GRAM_SIZE");
              DEFAULT_SIDE = new ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side(env->getStaticObjectField(cls, "DEFAULT_SIDE", "Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EdgeNGramTokenFilter::EdgeNGramTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_46a9ddd5, a0.this$, a1.this$, a2, a3)) {}

          EdgeNGramTokenFilter::EdgeNGramTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::java::lang::String & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_fa7af393, a0.this$, a1.this$, a2.this$, a3, a4)) {}

          EdgeNGramTokenFilter::EdgeNGramTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_ef953ccc, a0.this$, a1.this$, a2.this$, a3, a4)) {}

          jboolean EdgeNGramTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void EdgeNGramTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_EdgeNGramTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EdgeNGramTokenFilter_init_(t_EdgeNGramTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EdgeNGramTokenFilter_incrementToken(t_EdgeNGramTokenFilter *self, PyObject *args);
          static PyObject *t_EdgeNGramTokenFilter_reset(t_EdgeNGramTokenFilter *self, PyObject *args);

          static PyMethodDef t_EdgeNGramTokenFilter__methods_[] = {
            DECLARE_METHOD(t_EdgeNGramTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EdgeNGramTokenFilter, t_EdgeNGramTokenFilter, ::org::apache::lucene::analysis::TokenFilter, EdgeNGramTokenFilter, t_EdgeNGramTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_EdgeNGramTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(EdgeNGramTokenFilter), module, "EdgeNGramTokenFilter", 0);
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter).tp_dict, "Side", make_descriptor(&PY_TYPE(EdgeNGramTokenFilter$Side)));
          }

          void t_EdgeNGramTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter).tp_dict, "class_", make_descriptor(EdgeNGramTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_EdgeNGramTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(EdgeNGramTokenFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter).tp_dict, "DEFAULT_MAX_GRAM_SIZE", make_descriptor(EdgeNGramTokenFilter::DEFAULT_MAX_GRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter).tp_dict, "DEFAULT_MIN_GRAM_SIZE", make_descriptor(EdgeNGramTokenFilter::DEFAULT_MIN_GRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter).tp_dict, "DEFAULT_SIDE", make_descriptor(::org::apache::lucene::analysis::ngram::t_EdgeNGramTokenFilter$Side::wrap_Object(*EdgeNGramTokenFilter::DEFAULT_SIDE)));
          }

          static PyObject *t_EdgeNGramTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EdgeNGramTokenFilter::initializeClass, 1)))
              return NULL;
            return t_EdgeNGramTokenFilter::wrap_Object(EdgeNGramTokenFilter(((t_EdgeNGramTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_EdgeNGramTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EdgeNGramTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EdgeNGramTokenFilter_init_(t_EdgeNGramTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jint a2;
                jint a3;
                EdgeNGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  INT_CALL(object = EdgeNGramTokenFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                jint a3;
                jint a4;
                EdgeNGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KksII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = EdgeNGramTokenFilter(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side a2((jobject) NULL);
                PyTypeObject **p2;
                jint a3;
                jint a4;
                EdgeNGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkKII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::org::apache::lucene::analysis::ngram::t_EdgeNGramTokenFilter$Side::parameters_, &a3, &a4))
                {
                  INT_CALL(object = EdgeNGramTokenFilter(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EdgeNGramTokenFilter_incrementToken(t_EdgeNGramTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(EdgeNGramTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_EdgeNGramTokenFilter_reset(t_EdgeNGramTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(EdgeNGramTokenFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/DocValues.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *DocValues::class$ = NULL;
        jmethodID *DocValues::mids$ = NULL;
        bool DocValues::live$ = false;

        jclass DocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/DocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_docsWithValue_6932366e] = env->getStaticMethodID(cls, "docsWithValue", "(Lorg/apache/lucene/index/SortedDocValues;I)Lorg/apache/lucene/util/Bits;");
            mids$[mid_docsWithValue_c7ef87d6] = env->getStaticMethodID(cls, "docsWithValue", "(Lorg/apache/lucene/index/SortedNumericDocValues;I)Lorg/apache/lucene/util/Bits;");
            mids$[mid_docsWithValue_f9286ac1] = env->getStaticMethodID(cls, "docsWithValue", "(Lorg/apache/lucene/index/SortedSetDocValues;I)Lorg/apache/lucene/util/Bits;");
            mids$[mid_emptyBinary_56a19500] = env->getStaticMethodID(cls, "emptyBinary", "()Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_emptyNumeric_729438c3] = env->getStaticMethodID(cls, "emptyNumeric", "()Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_emptySorted_57832734] = env->getStaticMethodID(cls, "emptySorted", "()Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_emptySortedNumeric_68ec8b8c] = env->getStaticMethodID(cls, "emptySortedNumeric", "()Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_emptySortedSet_4bead171] = env->getStaticMethodID(cls, "emptySortedSet", "()Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getBinary_d197d479] = env->getStaticMethodID(cls, "getBinary", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getDocsWithField_b8ffc438] = env->getStaticMethodID(cls, "getDocsWithField", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNumeric_abcbf8b8] = env->getStaticMethodID(cls, "getNumeric", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSorted_e27a1341] = env->getStaticMethodID(cls, "getSorted", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumeric_593e885b] = env->getStaticMethodID(cls, "getSortedNumeric", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSet_1498712e] = env->getStaticMethodID(cls, "getSortedSet", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_singleton_9fed6638] = env->getStaticMethodID(cls, "singleton", "(Lorg/apache/lucene/index/SortedDocValues;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_singleton_082bce56] = env->getStaticMethodID(cls, "singleton", "(Lorg/apache/lucene/index/NumericDocValues;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_unwrapSingleton_c9f185f6] = env->getStaticMethodID(cls, "unwrapSingleton", "(Lorg/apache/lucene/index/SortedSetDocValues;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_unwrapSingleton_66807036] = env->getStaticMethodID(cls, "unwrapSingleton", "(Lorg/apache/lucene/index/SortedNumericDocValues;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_unwrapSingletonBits_aa3508ee] = env->getStaticMethodID(cls, "unwrapSingletonBits", "(Lorg/apache/lucene/index/SortedNumericDocValues;)Lorg/apache/lucene/util/Bits;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::Bits DocValues::docsWithValue(const ::org::apache::lucene::index::SortedDocValues & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_docsWithValue_6932366e], a0.this$, a1));
        }

        ::org::apache::lucene::util::Bits DocValues::docsWithValue(const ::org::apache::lucene::index::SortedNumericDocValues & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_docsWithValue_c7ef87d6], a0.this$, a1));
        }

        ::org::apache::lucene::util::Bits DocValues::docsWithValue(const ::org::apache::lucene::index::SortedSetDocValues & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_docsWithValue_f9286ac1], a0.this$, a1));
        }

        ::org::apache::lucene::index::BinaryDocValues DocValues::emptyBinary()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::BinaryDocValues(env->callStaticObjectMethod(cls, mids$[mid_emptyBinary_56a19500]));
        }

        ::org::apache::lucene::index::NumericDocValues DocValues::emptyNumeric()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_emptyNumeric_729438c3]));
        }

        ::org::apache::lucene::index::SortedDocValues DocValues::emptySorted()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedDocValues(env->callStaticObjectMethod(cls, mids$[mid_emptySorted_57832734]));
        }

        ::org::apache::lucene::index::SortedNumericDocValues DocValues::emptySortedNumeric()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_emptySortedNumeric_68ec8b8c]));
        }

        ::org::apache::lucene::index::SortedSetDocValues DocValues::emptySortedSet()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedSetDocValues(env->callStaticObjectMethod(cls, mids$[mid_emptySortedSet_4bead171]));
        }

        ::org::apache::lucene::index::BinaryDocValues DocValues::getBinary(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::BinaryDocValues(env->callStaticObjectMethod(cls, mids$[mid_getBinary_d197d479], a0.this$, a1.this$));
        }

        ::org::apache::lucene::util::Bits DocValues::getDocsWithField(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_getDocsWithField_b8ffc438], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::NumericDocValues DocValues::getNumeric(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_getNumeric_abcbf8b8], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedDocValues DocValues::getSorted(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSorted_e27a1341], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues DocValues::getSortedNumeric(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSortedNumeric_593e885b], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues DocValues::getSortedSet(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedSetDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSortedSet_1498712e], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues DocValues::singleton(const ::org::apache::lucene::index::SortedDocValues & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedSetDocValues(env->callStaticObjectMethod(cls, mids$[mid_singleton_9fed6638], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues DocValues::singleton(const ::org::apache::lucene::index::NumericDocValues & a0, const ::org::apache::lucene::util::Bits & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_singleton_082bce56], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedDocValues DocValues::unwrapSingleton(const ::org::apache::lucene::index::SortedSetDocValues & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedDocValues(env->callStaticObjectMethod(cls, mids$[mid_unwrapSingleton_c9f185f6], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues DocValues::unwrapSingleton(const ::org::apache::lucene::index::SortedNumericDocValues & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_unwrapSingleton_66807036], a0.this$));
        }

        ::org::apache::lucene::util::Bits DocValues::unwrapSingletonBits(const ::org::apache::lucene::index::SortedNumericDocValues & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_unwrapSingletonBits_aa3508ee], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_DocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValues_docsWithValue(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_emptyBinary(PyTypeObject *type);
        static PyObject *t_DocValues_emptyNumeric(PyTypeObject *type);
        static PyObject *t_DocValues_emptySorted(PyTypeObject *type);
        static PyObject *t_DocValues_emptySortedNumeric(PyTypeObject *type);
        static PyObject *t_DocValues_emptySortedSet(PyTypeObject *type);
        static PyObject *t_DocValues_getBinary(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_getDocsWithField(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_getNumeric(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_getSorted(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_getSortedNumeric(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_getSortedSet(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_singleton(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_unwrapSingleton(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_unwrapSingletonBits(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_DocValues__methods_[] = {
          DECLARE_METHOD(t_DocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValues, docsWithValue, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, emptyBinary, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, emptyNumeric, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, emptySorted, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, emptySortedNumeric, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, emptySortedSet, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, getBinary, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, getDocsWithField, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, getNumeric, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, getSorted, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, getSortedNumeric, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, getSortedSet, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, singleton, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, unwrapSingleton, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, unwrapSingletonBits, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocValues, t_DocValues, ::java::lang::Object, DocValues, abstract_init, 0, 0, 0, 0, 0);

        void t_DocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValues), module, "DocValues", 0);
        }

        void t_DocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocValues).tp_dict, "class_", make_descriptor(DocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocValues).tp_dict, "wrapfn_", make_descriptor(t_DocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValues::initializeClass, 1)))
            return NULL;
          return t_DocValues::wrap_Object(DocValues(((t_DocValues *) arg)->object.this$));
        }
        static PyObject *t_DocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValues_docsWithValue(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::SortedDocValues a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::util::Bits result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::SortedDocValues::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::docsWithValue(a0, a1));
                return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::SortedNumericDocValues a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::util::Bits result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::SortedNumericDocValues::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::docsWithValue(a0, a1));
                return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::SortedSetDocValues a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::util::Bits result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::SortedSetDocValues::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::docsWithValue(a0, a1));
                return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "docsWithValue", args);
          return NULL;
        }

        static PyObject *t_DocValues_emptyBinary(PyTypeObject *type)
        {
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::DocValues::emptyBinary());
          return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
        }

        static PyObject *t_DocValues_emptyNumeric(PyTypeObject *type)
        {
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::DocValues::emptyNumeric());
          return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
        }

        static PyObject *t_DocValues_emptySorted(PyTypeObject *type)
        {
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::DocValues::emptySorted());
          return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
        }

        static PyObject *t_DocValues_emptySortedNumeric(PyTypeObject *type)
        {
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::DocValues::emptySortedNumeric());
          return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
        }

        static PyObject *t_DocValues_emptySortedSet(PyTypeObject *type)
        {
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::DocValues::emptySortedSet());
          return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
        }

        static PyObject *t_DocValues_getBinary(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::getBinary(a0, a1));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getBinary", args);
          return NULL;
        }

        static PyObject *t_DocValues_getDocsWithField(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::getDocsWithField(a0, a1));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getDocsWithField", args);
          return NULL;
        }

        static PyObject *t_DocValues_getNumeric(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::getNumeric(a0, a1));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getNumeric", args);
          return NULL;
        }

        static PyObject *t_DocValues_getSorted(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::getSorted(a0, a1));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSorted", args);
          return NULL;
        }

        static PyObject *t_DocValues_getSortedNumeric(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::getSortedNumeric(a0, a1));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSortedNumeric", args);
          return NULL;
        }

        static PyObject *t_DocValues_getSortedSet(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::getSortedSet(a0, a1));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSortedSet", args);
          return NULL;
        }

        static PyObject *t_DocValues_singleton(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::SortedDocValues a0((jobject) NULL);
              ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::SortedDocValues::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::singleton(a0));
                return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::index::NumericDocValues a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::NumericDocValues::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::singleton(a0, a1));
                return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "singleton", args);
          return NULL;
        }

        static PyObject *t_DocValues_unwrapSingleton(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::SortedSetDocValues a0((jobject) NULL);
              ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::SortedSetDocValues::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::unwrapSingleton(a0));
                return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::SortedNumericDocValues a0((jobject) NULL);
              ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::SortedNumericDocValues::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::unwrapSingleton(a0));
                return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "unwrapSingleton", args);
          return NULL;
        }

        static PyObject *t_DocValues_unwrapSingletonBits(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::SortedNumericDocValues a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SortedNumericDocValues::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::unwrapSingletonBits(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "unwrapSingletonBits", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/CachedOrdinalsReader$CachedOrds.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *CachedOrdinalsReader$CachedOrds::class$ = NULL;
          jmethodID *CachedOrdinalsReader$CachedOrds::mids$ = NULL;
          jfieldID *CachedOrdinalsReader$CachedOrds::fids$ = NULL;
          bool CachedOrdinalsReader$CachedOrds::live$ = false;

          jclass CachedOrdinalsReader$CachedOrds::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/CachedOrdinalsReader$CachedOrds");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_76cf77a0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader;I)V");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              fids$ = new jfieldID[max_fid];
              fids$[fid_offsets] = env->getFieldID(cls, "offsets", "[I");
              fids$[fid_ordinals] = env->getFieldID(cls, "ordinals", "[I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CachedOrdinalsReader$CachedOrds::CachedOrdinalsReader$CachedOrds(const ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_76cf77a0, a0.this$, a1)) {}

          jlong CachedOrdinalsReader$CachedOrds::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          JArray< jint > CachedOrdinalsReader$CachedOrds::_get_offsets() const
          {
            return JArray< jint >(env->getObjectField(this$, fids$[fid_offsets]));
          }

          JArray< jint > CachedOrdinalsReader$CachedOrds::_get_ordinals() const
          {
            return JArray< jint >(env->getObjectField(this$, fids$[fid_ordinals]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_CachedOrdinalsReader$CachedOrds_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CachedOrdinalsReader$CachedOrds_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CachedOrdinalsReader$CachedOrds_init_(t_CachedOrdinalsReader$CachedOrds *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CachedOrdinalsReader$CachedOrds_ramBytesUsed(t_CachedOrdinalsReader$CachedOrds *self);
          static PyObject *t_CachedOrdinalsReader$CachedOrds_get__offsets(t_CachedOrdinalsReader$CachedOrds *self, void *data);
          static PyObject *t_CachedOrdinalsReader$CachedOrds_get__ordinals(t_CachedOrdinalsReader$CachedOrds *self, void *data);

          static PyGetSetDef t_CachedOrdinalsReader$CachedOrds__fields_[] = {
            DECLARE_GET_FIELD(t_CachedOrdinalsReader$CachedOrds, offsets),
            DECLARE_GET_FIELD(t_CachedOrdinalsReader$CachedOrds, ordinals),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CachedOrdinalsReader$CachedOrds__methods_[] = {
            DECLARE_METHOD(t_CachedOrdinalsReader$CachedOrds, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CachedOrdinalsReader$CachedOrds, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CachedOrdinalsReader$CachedOrds, ramBytesUsed, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CachedOrdinalsReader$CachedOrds, t_CachedOrdinalsReader$CachedOrds, ::java::lang::Object, CachedOrdinalsReader$CachedOrds, t_CachedOrdinalsReader$CachedOrds_init_, 0, 0, t_CachedOrdinalsReader$CachedOrds__fields_, 0, 0);

          void t_CachedOrdinalsReader$CachedOrds::install(PyObject *module)
          {
            installType(&PY_TYPE(CachedOrdinalsReader$CachedOrds), module, "CachedOrdinalsReader$CachedOrds", 0);
          }

          void t_CachedOrdinalsReader$CachedOrds::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CachedOrdinalsReader$CachedOrds).tp_dict, "class_", make_descriptor(CachedOrdinalsReader$CachedOrds::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CachedOrdinalsReader$CachedOrds).tp_dict, "wrapfn_", make_descriptor(t_CachedOrdinalsReader$CachedOrds::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CachedOrdinalsReader$CachedOrds).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CachedOrdinalsReader$CachedOrds_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CachedOrdinalsReader$CachedOrds::initializeClass, 1)))
              return NULL;
            return t_CachedOrdinalsReader$CachedOrds::wrap_Object(CachedOrdinalsReader$CachedOrds(((t_CachedOrdinalsReader$CachedOrds *) arg)->object.this$));
          }
          static PyObject *t_CachedOrdinalsReader$CachedOrds_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CachedOrdinalsReader$CachedOrds::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CachedOrdinalsReader$CachedOrds_init_(t_CachedOrdinalsReader$CachedOrds *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader a0((jobject) NULL);
            jint a1;
            CachedOrdinalsReader$CachedOrds object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader::initializeClass, &a0, &a1))
            {
              INT_CALL(object = CachedOrdinalsReader$CachedOrds(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CachedOrdinalsReader$CachedOrds_ramBytesUsed(t_CachedOrdinalsReader$CachedOrds *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_CachedOrdinalsReader$CachedOrds_get__offsets(t_CachedOrdinalsReader$CachedOrds *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_offsets());
            return value.wrap();
          }

          static PyObject *t_CachedOrdinalsReader$CachedOrds_get__ordinals(t_CachedOrdinalsReader$CachedOrds *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_ordinals());
            return value.wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishMinimalStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishMinimalStemFilter::class$ = NULL;
          jmethodID *EnglishMinimalStemFilter::mids$ = NULL;
          bool EnglishMinimalStemFilter::live$ = false;

          jclass EnglishMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishMinimalStemFilter::EnglishMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean EnglishMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishMinimalStemFilter_init_(t_EnglishMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishMinimalStemFilter_incrementToken(t_EnglishMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_EnglishMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_EnglishMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EnglishMinimalStemFilter, t_EnglishMinimalStemFilter, ::org::apache::lucene::analysis::TokenFilter, EnglishMinimalStemFilter, t_EnglishMinimalStemFilter_init_, 0, 0, 0, 0, 0);

          void t_EnglishMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishMinimalStemFilter), module, "EnglishMinimalStemFilter", 0);
          }

          void t_EnglishMinimalStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemFilter).tp_dict, "class_", make_descriptor(EnglishMinimalStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemFilter).tp_dict, "wrapfn_", make_descriptor(t_EnglishMinimalStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EnglishMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_EnglishMinimalStemFilter::wrap_Object(EnglishMinimalStemFilter(((t_EnglishMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_EnglishMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishMinimalStemFilter_init_(t_EnglishMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            EnglishMinimalStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = EnglishMinimalStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EnglishMinimalStemFilter_incrementToken(t_EnglishMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(EnglishMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanStemFilterFactory.h"
#include "org/apache/lucene/analysis/de/GermanStemFilter.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanStemFilterFactory::class$ = NULL;
          jmethodID *GermanStemFilterFactory::mids$ = NULL;
          bool GermanStemFilterFactory::live$ = false;

          jclass GermanStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_66272dff] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/de/GermanStemFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanStemFilterFactory::GermanStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::de::GermanStemFilter GermanStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::de::GermanStemFilter(env->callObjectMethod(this$, mids$[mid_create_66272dff], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanStemFilterFactory_init_(t_GermanStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanStemFilterFactory_create(t_GermanStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GermanStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GermanStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanStemFilterFactory, t_GermanStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GermanStemFilterFactory, t_GermanStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_GermanStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanStemFilterFactory), module, "GermanStemFilterFactory", 0);
          }

          void t_GermanStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanStemFilterFactory).tp_dict, "class_", make_descriptor(GermanStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GermanStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GermanStemFilterFactory::wrap_Object(GermanStemFilterFactory(((t_GermanStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GermanStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanStemFilterFactory_init_(t_GermanStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GermanStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GermanStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanStemFilterFactory_create(t_GermanStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::de::GermanStemFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::de::t_GermanStemFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GermanStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchAnalyzer::class$ = NULL;
          jmethodID *FrenchAnalyzer::mids$ = NULL;
          bool FrenchAnalyzer::live$ = false;
          ::org::apache::lucene::analysis::util::CharArraySet *FrenchAnalyzer::DEFAULT_ARTICLES = NULL;
          ::java::lang::String *FrenchAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass FrenchAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_ARTICLES = new ::org::apache::lucene::analysis::util::CharArraySet(env->getStaticObjectField(cls, "DEFAULT_ARTICLES", "Lorg/apache/lucene/analysis/util/CharArraySet;"));
              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchAnalyzer::FrenchAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          FrenchAnalyzer::FrenchAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          FrenchAnalyzer::FrenchAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet FrenchAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchAnalyzer_init_(t_FrenchAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_FrenchAnalyzer_get__defaultStopSet(t_FrenchAnalyzer *self, void *data);
          static PyGetSetDef t_FrenchAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_FrenchAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FrenchAnalyzer__methods_[] = {
            DECLARE_METHOD(t_FrenchAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchAnalyzer, t_FrenchAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, FrenchAnalyzer, t_FrenchAnalyzer_init_, 0, 0, t_FrenchAnalyzer__fields_, 0, 0);

          void t_FrenchAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchAnalyzer), module, "FrenchAnalyzer", 0);
          }

          void t_FrenchAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchAnalyzer).tp_dict, "class_", make_descriptor(FrenchAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_FrenchAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(FrenchAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(FrenchAnalyzer).tp_dict, "DEFAULT_ARTICLES", make_descriptor(::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(*FrenchAnalyzer::DEFAULT_ARTICLES)));
            PyDict_SetItemString(PY_TYPE(FrenchAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*FrenchAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_FrenchAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchAnalyzer::initializeClass, 1)))
              return NULL;
            return t_FrenchAnalyzer::wrap_Object(FrenchAnalyzer(((t_FrenchAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_FrenchAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchAnalyzer_init_(t_FrenchAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                FrenchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = FrenchAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                FrenchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = FrenchAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                FrenchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = FrenchAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FrenchAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::fr::FrenchAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_FrenchAnalyzer_get__defaultStopSet(t_FrenchAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonByteParser.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/search/FieldCache$ByteParser.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonByteParser::class$ = NULL;
        jmethodID *PythonByteParser::mids$ = NULL;
        bool PythonByteParser::live$ = false;

        jclass PythonByteParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonByteParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_parseByte_7bc03dd0] = env->getMethodID(cls, "parseByte", "(Lorg/apache/lucene/util/BytesRef;)B");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_termsEnum_fb3ac14e] = env->getMethodID(cls, "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonByteParser::PythonByteParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonByteParser::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonByteParser::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonByteParser::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonByteParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonByteParser_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonByteParser_init_(t_PythonByteParser *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonByteParser_finalize(t_PythonByteParser *self);
        static PyObject *t_PythonByteParser_pythonExtension(t_PythonByteParser *self, PyObject *args);
        static jbyte JNICALL t_PythonByteParser_parseByte0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonByteParser_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonByteParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonByteParser_get__self(t_PythonByteParser *self, void *data);
        static PyGetSetDef t_PythonByteParser__fields_[] = {
          DECLARE_GET_FIELD(t_PythonByteParser, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonByteParser__methods_[] = {
          DECLARE_METHOD(t_PythonByteParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonByteParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonByteParser, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonByteParser, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonByteParser, t_PythonByteParser, ::java::lang::Object, PythonByteParser, t_PythonByteParser_init_, 0, 0, t_PythonByteParser__fields_, 0, 0);

        void t_PythonByteParser::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonByteParser), module, "PythonByteParser", 1);
        }

        void t_PythonByteParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonByteParser).tp_dict, "class_", make_descriptor(PythonByteParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonByteParser).tp_dict, "wrapfn_", make_descriptor(t_PythonByteParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonByteParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonByteParser::initializeClass);
          JNINativeMethod methods[] = {
            { "parseByte", "(Lorg/apache/lucene/util/BytesRef;)B", (void *) t_PythonByteParser_parseByte0 },
            { "pythonDecRef", "()V", (void *) t_PythonByteParser_pythonDecRef1 },
            { "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;", (void *) t_PythonByteParser_termsEnum2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonByteParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonByteParser::initializeClass, 1)))
            return NULL;
          return t_PythonByteParser::wrap_Object(PythonByteParser(((t_PythonByteParser *) arg)->object.this$));
        }
        static PyObject *t_PythonByteParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonByteParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonByteParser_init_(t_PythonByteParser *self, PyObject *args, PyObject *kwds)
        {
          PythonByteParser object((jobject) NULL);

          INT_CALL(object = PythonByteParser());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonByteParser_finalize(t_PythonByteParser *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonByteParser_pythonExtension(t_PythonByteParser *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jbyte JNICALL t_PythonByteParser_parseByte0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonByteParser::mids$[PythonByteParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jbyte value;
          PyObject *o0 = ::org::apache::lucene::util::t_BytesRef::wrap_Object(::org::apache::lucene::util::BytesRef(a0));
          PyObject *result = PyObject_CallMethod(obj, "parseByte", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "B", &value))
          {
            throwTypeError("parseByte", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jbyte) 0;
        }

        static void JNICALL t_PythonByteParser_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonByteParser::mids$[PythonByteParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonByteParser::mids$[PythonByteParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonByteParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonByteParser::mids$[PythonByteParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::index::TermsEnum value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_Terms::wrap_Object(::org::apache::lucene::index::Terms(a0));
          PyObject *result = PyObject_CallMethod(obj, "termsEnum", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &value))
          {
            throwTypeError("termsEnum", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonByteParser_get__self(t_PythonByteParser *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BooleanClause::class$ = NULL;
        jmethodID *BooleanClause::mids$ = NULL;
        bool BooleanClause::live$ = false;

        jclass BooleanClause::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BooleanClause");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_827be425] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/BooleanClause$Occur;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getOccur_157730ed] = env->getMethodID(cls, "getOccur", "()Lorg/apache/lucene/search/BooleanClause$Occur;");
            mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isProhibited_54c6a16a] = env->getMethodID(cls, "isProhibited", "()Z");
            mids$[mid_isRequired_54c6a16a] = env->getMethodID(cls, "isRequired", "()Z");
            mids$[mid_setOccur_23bdc104] = env->getMethodID(cls, "setOccur", "(Lorg/apache/lucene/search/BooleanClause$Occur;)V");
            mids$[mid_setQuery_6e301113] = env->getMethodID(cls, "setQuery", "(Lorg/apache/lucene/search/Query;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BooleanClause::BooleanClause(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::BooleanClause$Occur & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_827be425, a0.this$, a1.this$)) {}

        jboolean BooleanClause::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::BooleanClause$Occur BooleanClause::getOccur() const
        {
          return ::org::apache::lucene::search::BooleanClause$Occur(env->callObjectMethod(this$, mids$[mid_getOccur_157730ed]));
        }

        ::org::apache::lucene::search::Query BooleanClause::getQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
        }

        jint BooleanClause::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean BooleanClause::isProhibited() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isProhibited_54c6a16a]);
        }

        jboolean BooleanClause::isRequired() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isRequired_54c6a16a]);
        }

        void BooleanClause::setOccur(const ::org::apache::lucene::search::BooleanClause$Occur & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setOccur_23bdc104], a0.this$);
        }

        void BooleanClause::setQuery(const ::org::apache::lucene::search::Query & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setQuery_6e301113], a0.this$);
        }

        ::java::lang::String BooleanClause::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BooleanClause_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanClause_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BooleanClause_init_(t_BooleanClause *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BooleanClause_equals(t_BooleanClause *self, PyObject *args);
        static PyObject *t_BooleanClause_getOccur(t_BooleanClause *self);
        static PyObject *t_BooleanClause_getQuery(t_BooleanClause *self);
        static PyObject *t_BooleanClause_hashCode(t_BooleanClause *self, PyObject *args);
        static PyObject *t_BooleanClause_isProhibited(t_BooleanClause *self);
        static PyObject *t_BooleanClause_isRequired(t_BooleanClause *self);
        static PyObject *t_BooleanClause_setOccur(t_BooleanClause *self, PyObject *arg);
        static PyObject *t_BooleanClause_setQuery(t_BooleanClause *self, PyObject *arg);
        static PyObject *t_BooleanClause_toString(t_BooleanClause *self, PyObject *args);
        static PyObject *t_BooleanClause_get__occur(t_BooleanClause *self, void *data);
        static int t_BooleanClause_set__occur(t_BooleanClause *self, PyObject *arg, void *data);
        static PyObject *t_BooleanClause_get__prohibited(t_BooleanClause *self, void *data);
        static PyObject *t_BooleanClause_get__query(t_BooleanClause *self, void *data);
        static int t_BooleanClause_set__query(t_BooleanClause *self, PyObject *arg, void *data);
        static PyObject *t_BooleanClause_get__required(t_BooleanClause *self, void *data);
        static PyGetSetDef t_BooleanClause__fields_[] = {
          DECLARE_GETSET_FIELD(t_BooleanClause, occur),
          DECLARE_GET_FIELD(t_BooleanClause, prohibited),
          DECLARE_GETSET_FIELD(t_BooleanClause, query),
          DECLARE_GET_FIELD(t_BooleanClause, required),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BooleanClause__methods_[] = {
          DECLARE_METHOD(t_BooleanClause, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanClause, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanClause, equals, METH_VARARGS),
          DECLARE_METHOD(t_BooleanClause, getOccur, METH_NOARGS),
          DECLARE_METHOD(t_BooleanClause, getQuery, METH_NOARGS),
          DECLARE_METHOD(t_BooleanClause, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BooleanClause, isProhibited, METH_NOARGS),
          DECLARE_METHOD(t_BooleanClause, isRequired, METH_NOARGS),
          DECLARE_METHOD(t_BooleanClause, setOccur, METH_O),
          DECLARE_METHOD(t_BooleanClause, setQuery, METH_O),
          DECLARE_METHOD(t_BooleanClause, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BooleanClause, t_BooleanClause, ::java::lang::Object, BooleanClause, t_BooleanClause_init_, 0, 0, t_BooleanClause__fields_, 0, 0);

        void t_BooleanClause::install(PyObject *module)
        {
          installType(&PY_TYPE(BooleanClause), module, "BooleanClause", 0);
          PyDict_SetItemString(PY_TYPE(BooleanClause).tp_dict, "Occur", make_descriptor(&PY_TYPE(BooleanClause$Occur)));
        }

        void t_BooleanClause::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BooleanClause).tp_dict, "class_", make_descriptor(BooleanClause::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BooleanClause).tp_dict, "wrapfn_", make_descriptor(t_BooleanClause::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BooleanClause).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BooleanClause_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BooleanClause::initializeClass, 1)))
            return NULL;
          return t_BooleanClause::wrap_Object(BooleanClause(((t_BooleanClause *) arg)->object.this$));
        }
        static PyObject *t_BooleanClause_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BooleanClause::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BooleanClause_init_(t_BooleanClause *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          ::org::apache::lucene::search::BooleanClause$Occur a1((jobject) NULL);
          PyTypeObject **p1;
          BooleanClause object((jobject) NULL);

          if (!parseArgs(args, "kK", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
          {
            INT_CALL(object = BooleanClause(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BooleanClause_equals(t_BooleanClause *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(BooleanClause), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BooleanClause_getOccur(t_BooleanClause *self)
        {
          ::org::apache::lucene::search::BooleanClause$Occur result((jobject) NULL);
          OBJ_CALL(result = self->object.getOccur());
          return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(result);
        }

        static PyObject *t_BooleanClause_getQuery(t_BooleanClause *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_BooleanClause_hashCode(t_BooleanClause *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BooleanClause), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BooleanClause_isProhibited(t_BooleanClause *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isProhibited());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_BooleanClause_isRequired(t_BooleanClause *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isRequired());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_BooleanClause_setOccur(t_BooleanClause *self, PyObject *arg)
        {
          ::org::apache::lucene::search::BooleanClause$Occur a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
          {
            OBJ_CALL(self->object.setOccur(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setOccur", arg);
          return NULL;
        }

        static PyObject *t_BooleanClause_setQuery(t_BooleanClause *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setQuery(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setQuery", arg);
          return NULL;
        }

        static PyObject *t_BooleanClause_toString(t_BooleanClause *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(BooleanClause), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_BooleanClause_get__occur(t_BooleanClause *self, void *data)
        {
          ::org::apache::lucene::search::BooleanClause$Occur value((jobject) NULL);
          OBJ_CALL(value = self->object.getOccur());
          return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(value);
        }
        static int t_BooleanClause_set__occur(t_BooleanClause *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::BooleanClause$Occur value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &value))
            {
              INT_CALL(self->object.setOccur(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "occur", arg);
          return -1;
        }

        static PyObject *t_BooleanClause_get__prohibited(t_BooleanClause *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isProhibited());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_BooleanClause_get__query(t_BooleanClause *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }
        static int t_BooleanClause_set__query(t_BooleanClause *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Query value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              INT_CALL(self->object.setQuery(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "query", arg);
          return -1;
        }

        static PyObject *t_BooleanClause_get__required(t_BooleanClause *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isRequired());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/OpenRangeQueryNodeProcessor.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *OpenRangeQueryNodeProcessor::class$ = NULL;
              jmethodID *OpenRangeQueryNodeProcessor::mids$ = NULL;
              bool OpenRangeQueryNodeProcessor::live$ = false;
              ::java::lang::String *OpenRangeQueryNodeProcessor::OPEN_RANGE_TOKEN = NULL;

              jclass OpenRangeQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/OpenRangeQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  OPEN_RANGE_TOKEN = new ::java::lang::String(env->getStaticObjectField(cls, "OPEN_RANGE_TOKEN", "Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              OpenRangeQueryNodeProcessor::OpenRangeQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_OpenRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_OpenRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_OpenRangeQueryNodeProcessor_init_(t_OpenRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_OpenRangeQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_OpenRangeQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_OpenRangeQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(OpenRangeQueryNodeProcessor, t_OpenRangeQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, OpenRangeQueryNodeProcessor, t_OpenRangeQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_OpenRangeQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(OpenRangeQueryNodeProcessor), module, "OpenRangeQueryNodeProcessor", 0);
              }

              void t_OpenRangeQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(OpenRangeQueryNodeProcessor).tp_dict, "class_", make_descriptor(OpenRangeQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(OpenRangeQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_OpenRangeQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(OpenRangeQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(OpenRangeQueryNodeProcessor::initializeClass);
                PyDict_SetItemString(PY_TYPE(OpenRangeQueryNodeProcessor).tp_dict, "OPEN_RANGE_TOKEN", make_descriptor(j2p(*OpenRangeQueryNodeProcessor::OPEN_RANGE_TOKEN)));
              }

              static PyObject *t_OpenRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, OpenRangeQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_OpenRangeQueryNodeProcessor::wrap_Object(OpenRangeQueryNodeProcessor(((t_OpenRangeQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_OpenRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, OpenRangeQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_OpenRangeQueryNodeProcessor_init_(t_OpenRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                OpenRangeQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = OpenRangeQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/queries/function/ValueSourceScorer.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *FunctionValues::class$ = NULL;
          jmethodID *FunctionValues::mids$ = NULL;
          bool FunctionValues::live$ = false;

          jclass FunctionValues::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/FunctionValues");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_boolVal_39c7bd30] = env->getMethodID(cls, "boolVal", "(I)Z");
              mids$[mid_byteVal_39c7bd28] = env->getMethodID(cls, "byteVal", "(I)B");
              mids$[mid_byteVal_5d2e3265] = env->getMethodID(cls, "byteVal", "(I[B)V");
              mids$[mid_bytesVal_b7fef192] = env->getMethodID(cls, "bytesVal", "(ILorg/apache/lucene/util/BytesRef;)Z");
              mids$[mid_doubleVal_39c7bd2e] = env->getMethodID(cls, "doubleVal", "(I)D");
              mids$[mid_doubleVal_08239127] = env->getMethodID(cls, "doubleVal", "(I[D)V");
              mids$[mid_exists_39c7bd30] = env->getMethodID(cls, "exists", "(I)Z");
              mids$[mid_explain_ae608291] = env->getMethodID(cls, "explain", "(I)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_floatVal_39c7bd2c] = env->getMethodID(cls, "floatVal", "(I)F");
              mids$[mid_floatVal_b130a809] = env->getMethodID(cls, "floatVal", "(I[F)V");
              mids$[mid_getRangeScorer_d201bc96] = env->getMethodID(cls, "getRangeScorer", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/queries/function/ValueSourceScorer;");
              mids$[mid_getScorer_fca96384] = env->getMethodID(cls, "getScorer", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/queries/function/ValueSourceScorer;");
              mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
              mids$[mid_intVal_39c7bd23] = env->getMethodID(cls, "intVal", "(I)I");
              mids$[mid_intVal_dd2db71e] = env->getMethodID(cls, "intVal", "(I[I)V");
              mids$[mid_longVal_39c7bd20] = env->getMethodID(cls, "longVal", "(I)J");
              mids$[mid_longVal_b24cd90d] = env->getMethodID(cls, "longVal", "(I[J)V");
              mids$[mid_numOrd_54c6a179] = env->getMethodID(cls, "numOrd", "()I");
              mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
              mids$[mid_ordVal_39c7bd23] = env->getMethodID(cls, "ordVal", "(I)I");
              mids$[mid_shortVal_39c7bd39] = env->getMethodID(cls, "shortVal", "(I)S");
              mids$[mid_shortVal_df2a0648] = env->getMethodID(cls, "shortVal", "(I[S)V");
              mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
              mids$[mid_strVal_2f05a56a] = env->getMethodID(cls, "strVal", "(I[Ljava/lang/String;)V");
              mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FunctionValues::FunctionValues() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean FunctionValues::boolVal(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_boolVal_39c7bd30], a0);
          }

          jbyte FunctionValues::byteVal(jint a0) const
          {
            return env->callByteMethod(this$, mids$[mid_byteVal_39c7bd28], a0);
          }

          void FunctionValues::byteVal(jint a0, const JArray< jbyte > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_byteVal_5d2e3265], a0, a1.this$);
          }

          jboolean FunctionValues::bytesVal(jint a0, const ::org::apache::lucene::util::BytesRef & a1) const
          {
            return env->callBooleanMethod(this$, mids$[mid_bytesVal_b7fef192], a0, a1.this$);
          }

          jdouble FunctionValues::doubleVal(jint a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_doubleVal_39c7bd2e], a0);
          }

          void FunctionValues::doubleVal(jint a0, const JArray< jdouble > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_doubleVal_08239127], a0, a1.this$);
          }

          jboolean FunctionValues::exists(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_exists_39c7bd30], a0);
          }

          ::org::apache::lucene::search::Explanation FunctionValues::explain(jint a0) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_ae608291], a0));
          }

          jfloat FunctionValues::floatVal(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_floatVal_39c7bd2c], a0);
          }

          void FunctionValues::floatVal(jint a0, const JArray< jfloat > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_floatVal_b130a809], a0, a1.this$);
          }

          ::org::apache::lucene::queries::function::ValueSourceScorer FunctionValues::getRangeScorer(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) const
          {
            return ::org::apache::lucene::queries::function::ValueSourceScorer(env->callObjectMethod(this$, mids$[mid_getRangeScorer_d201bc96], a0.this$, a1.this$, a2.this$, a3, a4));
          }

          ::org::apache::lucene::queries::function::ValueSourceScorer FunctionValues::getScorer(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::queries::function::ValueSourceScorer(env->callObjectMethod(this$, mids$[mid_getScorer_fca96384], a0.this$));
          }

          ::org::apache::lucene::queries::function::FunctionValues$ValueFiller FunctionValues::getValueFiller() const
          {
            return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
          }

          jint FunctionValues::intVal(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_intVal_39c7bd23], a0);
          }

          void FunctionValues::intVal(jint a0, const JArray< jint > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_intVal_dd2db71e], a0, a1.this$);
          }

          jlong FunctionValues::longVal(jint a0) const
          {
            return env->callLongMethod(this$, mids$[mid_longVal_39c7bd20], a0);
          }

          void FunctionValues::longVal(jint a0, const JArray< jlong > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_longVal_b24cd90d], a0, a1.this$);
          }

          jint FunctionValues::numOrd() const
          {
            return env->callIntMethod(this$, mids$[mid_numOrd_54c6a179]);
          }

          ::java::lang::Object FunctionValues::objectVal(jint a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
          }

          jint FunctionValues::ordVal(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_ordVal_39c7bd23], a0);
          }

          jshort FunctionValues::shortVal(jint a0) const
          {
            return env->callShortMethod(this$, mids$[mid_shortVal_39c7bd39], a0);
          }

          void FunctionValues::shortVal(jint a0, const JArray< jshort > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_shortVal_df2a0648], a0, a1.this$);
          }

          ::java::lang::String FunctionValues::strVal(jint a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
          }

          void FunctionValues::strVal(jint a0, const JArray< ::java::lang::String > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_strVal_2f05a56a], a0, a1.this$);
          }

          ::java::lang::String FunctionValues::toString(jint a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_FunctionValues_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FunctionValues_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FunctionValues_init_(t_FunctionValues *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FunctionValues_boolVal(t_FunctionValues *self, PyObject *arg);
          static PyObject *t_FunctionValues_byteVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_bytesVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_doubleVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_exists(t_FunctionValues *self, PyObject *arg);
          static PyObject *t_FunctionValues_explain(t_FunctionValues *self, PyObject *arg);
          static PyObject *t_FunctionValues_floatVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_getRangeScorer(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_getScorer(t_FunctionValues *self, PyObject *arg);
          static PyObject *t_FunctionValues_getValueFiller(t_FunctionValues *self);
          static PyObject *t_FunctionValues_intVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_longVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_numOrd(t_FunctionValues *self);
          static PyObject *t_FunctionValues_objectVal(t_FunctionValues *self, PyObject *arg);
          static PyObject *t_FunctionValues_ordVal(t_FunctionValues *self, PyObject *arg);
          static PyObject *t_FunctionValues_shortVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_strVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_toString(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_get__valueFiller(t_FunctionValues *self, void *data);
          static PyGetSetDef t_FunctionValues__fields_[] = {
            DECLARE_GET_FIELD(t_FunctionValues, valueFiller),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FunctionValues__methods_[] = {
            DECLARE_METHOD(t_FunctionValues, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionValues, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionValues, boolVal, METH_O),
            DECLARE_METHOD(t_FunctionValues, byteVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, bytesVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, doubleVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, exists, METH_O),
            DECLARE_METHOD(t_FunctionValues, explain, METH_O),
            DECLARE_METHOD(t_FunctionValues, floatVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, getRangeScorer, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, getScorer, METH_O),
            DECLARE_METHOD(t_FunctionValues, getValueFiller, METH_NOARGS),
            DECLARE_METHOD(t_FunctionValues, intVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, longVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, numOrd, METH_NOARGS),
            DECLARE_METHOD(t_FunctionValues, objectVal, METH_O),
            DECLARE_METHOD(t_FunctionValues, ordVal, METH_O),
            DECLARE_METHOD(t_FunctionValues, shortVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, strVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FunctionValues, t_FunctionValues, ::java::lang::Object, FunctionValues, t_FunctionValues_init_, 0, 0, t_FunctionValues__fields_, 0, 0);

          void t_FunctionValues::install(PyObject *module)
          {
            installType(&PY_TYPE(FunctionValues), module, "FunctionValues", 0);
            PyDict_SetItemString(PY_TYPE(FunctionValues).tp_dict, "ValueFiller", make_descriptor(&PY_TYPE(FunctionValues$ValueFiller)));
          }

          void t_FunctionValues::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FunctionValues).tp_dict, "class_", make_descriptor(FunctionValues::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FunctionValues).tp_dict, "wrapfn_", make_descriptor(t_FunctionValues::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FunctionValues).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FunctionValues_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FunctionValues::initializeClass, 1)))
              return NULL;
            return t_FunctionValues::wrap_Object(FunctionValues(((t_FunctionValues *) arg)->object.this$));
          }
          static PyObject *t_FunctionValues_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FunctionValues::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FunctionValues_init_(t_FunctionValues *self, PyObject *args, PyObject *kwds)
          {
            FunctionValues object((jobject) NULL);

            INT_CALL(object = FunctionValues());
            self->object = object;

            return 0;
          }

          static PyObject *t_FunctionValues_boolVal(t_FunctionValues *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.boolVal(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "boolVal", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues_byteVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jbyte result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.byteVal(a0));
                  return PyInt_FromLong((long) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jbyte > a1((jobject) NULL);

                if (!parseArgs(args, "I[B", &a0, &a1))
                {
                  OBJ_CALL(self->object.byteVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "byteVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_bytesVal(t_FunctionValues *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "Ik", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.bytesVal(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "bytesVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_doubleVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jdouble result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.doubleVal(a0));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jdouble > a1((jobject) NULL);

                if (!parseArgs(args, "I[D", &a0, &a1))
                {
                  OBJ_CALL(self->object.doubleVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "doubleVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_exists(t_FunctionValues *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.exists(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "exists", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues_explain(t_FunctionValues *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.explain(a0));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues_floatVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jfloat result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.floatVal(a0));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jfloat > a1((jobject) NULL);

                if (!parseArgs(args, "I[F", &a0, &a1))
                {
                  OBJ_CALL(self->object.floatVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "floatVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_getRangeScorer(t_FunctionValues *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            jboolean a4;
            ::org::apache::lucene::queries::function::ValueSourceScorer result((jobject) NULL);

            if (!parseArgs(args, "kssZZ", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.getRangeScorer(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::queries::function::t_ValueSourceScorer::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getRangeScorer", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_getScorer(t_FunctionValues *self, PyObject *arg)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::queries::function::ValueSourceScorer result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getScorer(a0));
              return ::org::apache::lucene::queries::function::t_ValueSourceScorer::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getScorer", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues_getValueFiller(t_FunctionValues *self)
          {
            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);
            OBJ_CALL(result = self->object.getValueFiller());
            return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
          }

          static PyObject *t_FunctionValues_intVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jint result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.intVal(a0));
                  return PyInt_FromLong((long) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jint > a1((jobject) NULL);

                if (!parseArgs(args, "I[I", &a0, &a1))
                {
                  OBJ_CALL(self->object.intVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "intVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_longVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jlong result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.longVal(a0));
                  return PyLong_FromLongLong((PY_LONG_LONG) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jlong > a1((jobject) NULL);

                if (!parseArgs(args, "I[J", &a0, &a1))
                {
                  OBJ_CALL(self->object.longVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "longVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_numOrd(t_FunctionValues *self)
          {
            jint result;
            OBJ_CALL(result = self->object.numOrd());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FunctionValues_objectVal(t_FunctionValues *self, PyObject *arg)
          {
            jint a0;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.objectVal(a0));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "objectVal", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues_ordVal(t_FunctionValues *self, PyObject *arg)
          {
            jint a0;
            jint result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.ordVal(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "ordVal", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues_shortVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jshort result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.shortVal(a0));
                  return PyInt_FromLong((long) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jshort > a1((jobject) NULL);

                if (!parseArgs(args, "I[S", &a0, &a1))
                {
                  OBJ_CALL(self->object.shortVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "shortVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_strVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.strVal(a0));
                  return j2p(result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< ::java::lang::String > a1((jobject) NULL);

                if (!parseArgs(args, "I[s", &a0, &a1))
                {
                  OBJ_CALL(self->object.strVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "strVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_toString(t_FunctionValues *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FunctionValues), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FunctionValues_get__valueFiller(t_FunctionValues *self, void *data)
          {
            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
            OBJ_CALL(value = self->object.getValueFiller());
            return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocValues$MultiSortedDocValues.h"
#include "org/apache/lucene/index/MultiDocValues$OrdinalMap.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocValues$MultiSortedDocValues::class$ = NULL;
        jmethodID *MultiDocValues$MultiSortedDocValues::mids$ = NULL;
        jfieldID *MultiDocValues$MultiSortedDocValues::fids$ = NULL;
        bool MultiDocValues$MultiSortedDocValues::live$ = false;

        jclass MultiDocValues$MultiSortedDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocValues$MultiSortedDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getOrd_39c7bd23] = env->getMethodID(cls, "getOrd", "(I)I");
            mids$[mid_getValueCount_54c6a179] = env->getMethodID(cls, "getValueCount", "()I");
            mids$[mid_lookupOrd_b57e9c3f] = env->getMethodID(cls, "lookupOrd", "(I)Lorg/apache/lucene/util/BytesRef;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docStarts] = env->getFieldID(cls, "docStarts", "[I");
            fids$[fid_mapping] = env->getFieldID(cls, "mapping", "Lorg/apache/lucene/index/MultiDocValues$OrdinalMap;");
            fids$[fid_values] = env->getFieldID(cls, "values", "[Lorg/apache/lucene/index/SortedDocValues;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint MultiDocValues$MultiSortedDocValues::getOrd(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getOrd_39c7bd23], a0);
        }

        jint MultiDocValues$MultiSortedDocValues::getValueCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getValueCount_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef MultiDocValues$MultiSortedDocValues::lookupOrd(jint a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_lookupOrd_b57e9c3f], a0));
        }

        JArray< jint > MultiDocValues$MultiSortedDocValues::_get_docStarts() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_docStarts]));
        }

        ::org::apache::lucene::index::MultiDocValues$OrdinalMap MultiDocValues$MultiSortedDocValues::_get_mapping() const
        {
          return ::org::apache::lucene::index::MultiDocValues$OrdinalMap(env->getObjectField(this$, fids$[fid_mapping]));
        }

        JArray< ::org::apache::lucene::index::SortedDocValues > MultiDocValues$MultiSortedDocValues::_get_values() const
        {
          return JArray< ::org::apache::lucene::index::SortedDocValues >(env->getObjectField(this$, fids$[fid_values]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocValues$MultiSortedDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_getOrd(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_getValueCount(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_lookupOrd(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__docStarts(t_MultiDocValues$MultiSortedDocValues *self, void *data);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__mapping(t_MultiDocValues$MultiSortedDocValues *self, void *data);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__values(t_MultiDocValues$MultiSortedDocValues *self, void *data);

        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__valueCount(t_MultiDocValues$MultiSortedDocValues *self, void *data);
        static PyGetSetDef t_MultiDocValues$MultiSortedDocValues__fields_[] = {
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedDocValues, docStarts),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedDocValues, mapping),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedDocValues, values),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedDocValues, valueCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocValues$MultiSortedDocValues__methods_[] = {
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, getOrd, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, getValueCount, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, lookupOrd, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocValues$MultiSortedDocValues, t_MultiDocValues$MultiSortedDocValues, ::org::apache::lucene::index::SortedDocValues, MultiDocValues$MultiSortedDocValues, abstract_init, 0, 0, t_MultiDocValues$MultiSortedDocValues__fields_, 0, 0);

        void t_MultiDocValues$MultiSortedDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocValues$MultiSortedDocValues), module, "MultiDocValues$MultiSortedDocValues", 0);
        }

        void t_MultiDocValues$MultiSortedDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocValues$MultiSortedDocValues).tp_dict, "class_", make_descriptor(MultiDocValues$MultiSortedDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocValues$MultiSortedDocValues).tp_dict, "wrapfn_", make_descriptor(t_MultiDocValues$MultiSortedDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocValues$MultiSortedDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocValues$MultiSortedDocValues::initializeClass, 1)))
            return NULL;
          return t_MultiDocValues$MultiSortedDocValues::wrap_Object(MultiDocValues$MultiSortedDocValues(((t_MultiDocValues$MultiSortedDocValues *) arg)->object.this$));
        }
        static PyObject *t_MultiDocValues$MultiSortedDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocValues$MultiSortedDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_getOrd(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getOrd(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocValues$MultiSortedDocValues), (PyObject *) self, "getOrd", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_getValueCount(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getValueCount());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocValues$MultiSortedDocValues), (PyObject *) self, "getValueCount", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_lookupOrd(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.lookupOrd(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiDocValues$MultiSortedDocValues), (PyObject *) self, "lookupOrd", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__docStarts(t_MultiDocValues$MultiSortedDocValues *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docStarts());
          return value.wrap();
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__mapping(t_MultiDocValues$MultiSortedDocValues *self, void *data)
        {
          ::org::apache::lucene::index::MultiDocValues$OrdinalMap value((jobject) NULL);
          OBJ_CALL(value = self->object._get_mapping());
          return ::org::apache::lucene::index::t_MultiDocValues$OrdinalMap::wrap_Object(value);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__values(t_MultiDocValues$MultiSortedDocValues *self, void *data)
        {
          JArray< ::org::apache::lucene::index::SortedDocValues > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_values());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_SortedDocValues::wrap_jobject);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__valueCount(t_MultiDocValues$MultiSortedDocValues *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getValueCount());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/OffsetLimitTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *OffsetLimitTokenFilter::class$ = NULL;
          jmethodID *OffsetLimitTokenFilter::mids$ = NULL;
          bool OffsetLimitTokenFilter::live$ = false;

          jclass OffsetLimitTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/OffsetLimitTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OffsetLimitTokenFilter::OffsetLimitTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          jboolean OffsetLimitTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void OffsetLimitTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_OffsetLimitTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OffsetLimitTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OffsetLimitTokenFilter_init_(t_OffsetLimitTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OffsetLimitTokenFilter_incrementToken(t_OffsetLimitTokenFilter *self, PyObject *args);
          static PyObject *t_OffsetLimitTokenFilter_reset(t_OffsetLimitTokenFilter *self, PyObject *args);

          static PyMethodDef t_OffsetLimitTokenFilter__methods_[] = {
            DECLARE_METHOD(t_OffsetLimitTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetLimitTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetLimitTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_OffsetLimitTokenFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(OffsetLimitTokenFilter, t_OffsetLimitTokenFilter, ::org::apache::lucene::analysis::TokenFilter, OffsetLimitTokenFilter, t_OffsetLimitTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_OffsetLimitTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(OffsetLimitTokenFilter), module, "OffsetLimitTokenFilter", 0);
          }

          void t_OffsetLimitTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(OffsetLimitTokenFilter).tp_dict, "class_", make_descriptor(OffsetLimitTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(OffsetLimitTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_OffsetLimitTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(OffsetLimitTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OffsetLimitTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OffsetLimitTokenFilter::initializeClass, 1)))
              return NULL;
            return t_OffsetLimitTokenFilter::wrap_Object(OffsetLimitTokenFilter(((t_OffsetLimitTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_OffsetLimitTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OffsetLimitTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OffsetLimitTokenFilter_init_(t_OffsetLimitTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jint a1;
            OffsetLimitTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              INT_CALL(object = OffsetLimitTokenFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_OffsetLimitTokenFilter_incrementToken(t_OffsetLimitTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(OffsetLimitTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_OffsetLimitTokenFilter_reset(t_OffsetLimitTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(OffsetLimitTokenFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.h"
#include "org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/search/SearcherFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *SearcherTaxonomyManager::class$ = NULL;
          jmethodID *SearcherTaxonomyManager::mids$ = NULL;
          bool SearcherTaxonomyManager::live$ = false;

          jclass SearcherTaxonomyManager::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c5068542] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/search/SearcherFactory;)V");
              mids$[mid_init$_4154e337] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexWriter;ZLorg/apache/lucene/search/SearcherFactory;Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter;)V");
              mids$[mid_decRef_db563eaa] = env->getMethodID(cls, "decRef", "(Lorg/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy;)V");
              mids$[mid_getRefCount_db563eb5] = env->getMethodID(cls, "getRefCount", "(Lorg/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy;)I");
              mids$[mid_tryIncRef_db563ea6] = env->getMethodID(cls, "tryIncRef", "(Lorg/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy;)Z");
              mids$[mid_refreshIfNeeded_9a7202bf] = env->getMethodID(cls, "refreshIfNeeded", "(Lorg/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy;)Lorg/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SearcherTaxonomyManager::SearcherTaxonomyManager(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::search::SearcherFactory & a2) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_c5068542, a0.this$, a1.this$, a2.this$)) {}

          SearcherTaxonomyManager::SearcherTaxonomyManager(const ::org::apache::lucene::index::IndexWriter & a0, jboolean a1, const ::org::apache::lucene::search::SearcherFactory & a2, const ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter & a3) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_4154e337, a0.this$, a1, a2.this$, a3.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_SearcherTaxonomyManager_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearcherTaxonomyManager_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearcherTaxonomyManager_of_(t_SearcherTaxonomyManager *self, PyObject *args);
          static int t_SearcherTaxonomyManager_init_(t_SearcherTaxonomyManager *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SearcherTaxonomyManager_get__parameters_(t_SearcherTaxonomyManager *self, void *data);
          static PyGetSetDef t_SearcherTaxonomyManager__fields_[] = {
            DECLARE_GET_FIELD(t_SearcherTaxonomyManager, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SearcherTaxonomyManager__methods_[] = {
            DECLARE_METHOD(t_SearcherTaxonomyManager, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearcherTaxonomyManager, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearcherTaxonomyManager, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SearcherTaxonomyManager, t_SearcherTaxonomyManager, ::org::apache::lucene::search::ReferenceManager, SearcherTaxonomyManager, t_SearcherTaxonomyManager_init_, 0, 0, t_SearcherTaxonomyManager__fields_, 0, 0);
          PyObject *t_SearcherTaxonomyManager::wrap_Object(const SearcherTaxonomyManager& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearcherTaxonomyManager::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearcherTaxonomyManager *self = (t_SearcherTaxonomyManager *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SearcherTaxonomyManager::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearcherTaxonomyManager::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearcherTaxonomyManager *self = (t_SearcherTaxonomyManager *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SearcherTaxonomyManager::install(PyObject *module)
          {
            installType(&PY_TYPE(SearcherTaxonomyManager), module, "SearcherTaxonomyManager", 0);
            PyDict_SetItemString(PY_TYPE(SearcherTaxonomyManager).tp_dict, "SearcherAndTaxonomy", make_descriptor(&PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy)));
          }

          void t_SearcherTaxonomyManager::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SearcherTaxonomyManager).tp_dict, "class_", make_descriptor(SearcherTaxonomyManager::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SearcherTaxonomyManager).tp_dict, "wrapfn_", make_descriptor(t_SearcherTaxonomyManager::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SearcherTaxonomyManager).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SearcherTaxonomyManager_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SearcherTaxonomyManager::initializeClass, 1)))
              return NULL;
            return t_SearcherTaxonomyManager::wrap_Object(SearcherTaxonomyManager(((t_SearcherTaxonomyManager *) arg)->object.this$));
          }
          static PyObject *t_SearcherTaxonomyManager_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SearcherTaxonomyManager::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SearcherTaxonomyManager_of_(t_SearcherTaxonomyManager *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SearcherTaxonomyManager_init_(t_SearcherTaxonomyManager *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::store::Directory a0((jobject) NULL);
                ::org::apache::lucene::store::Directory a1((jobject) NULL);
                ::org::apache::lucene::search::SearcherFactory a2((jobject) NULL);
                SearcherTaxonomyManager object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::search::SearcherFactory::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SearcherTaxonomyManager(a0, a1, a2));
                  self->object = object;
                  self->parameters[0] = &::org::apache::lucene::facet::taxonomy::PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy);
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
                jboolean a1;
                ::org::apache::lucene::search::SearcherFactory a2((jobject) NULL);
                ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter a3((jobject) NULL);
                SearcherTaxonomyManager object((jobject) NULL);

                if (!parseArgs(args, "kZkk", ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::search::SearcherFactory::initializeClass, ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = SearcherTaxonomyManager(a0, a1, a2, a3));
                  self->object = object;
                  self->parameters[0] = &::org::apache::lucene::facet::taxonomy::PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy);
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_SearcherTaxonomyManager_get__parameters_(t_SearcherTaxonomyManager *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternReplaceFilter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/regex/Pattern.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternReplaceFilter::class$ = NULL;
          jmethodID *PatternReplaceFilter::mids$ = NULL;
          bool PatternReplaceFilter::live$ = false;

          jclass PatternReplaceFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternReplaceFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_afb3adc3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/util/regex/Pattern;Ljava/lang/String;Z)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternReplaceFilter::PatternReplaceFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::util::regex::Pattern & a1, const ::java::lang::String & a2, jboolean a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_afb3adc3, a0.this$, a1.this$, a2.this$, a3)) {}

          jboolean PatternReplaceFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternReplaceFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternReplaceFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternReplaceFilter_init_(t_PatternReplaceFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternReplaceFilter_incrementToken(t_PatternReplaceFilter *self, PyObject *args);

          static PyMethodDef t_PatternReplaceFilter__methods_[] = {
            DECLARE_METHOD(t_PatternReplaceFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternReplaceFilter, t_PatternReplaceFilter, ::org::apache::lucene::analysis::TokenFilter, PatternReplaceFilter, t_PatternReplaceFilter_init_, 0, 0, 0, 0, 0);

          void t_PatternReplaceFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternReplaceFilter), module, "PatternReplaceFilter", 0);
          }

          void t_PatternReplaceFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternReplaceFilter).tp_dict, "class_", make_descriptor(PatternReplaceFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternReplaceFilter).tp_dict, "wrapfn_", make_descriptor(t_PatternReplaceFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternReplaceFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternReplaceFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternReplaceFilter::initializeClass, 1)))
              return NULL;
            return t_PatternReplaceFilter::wrap_Object(PatternReplaceFilter(((t_PatternReplaceFilter *) arg)->object.this$));
          }
          static PyObject *t_PatternReplaceFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternReplaceFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternReplaceFilter_init_(t_PatternReplaceFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::java::util::regex::Pattern a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            PatternReplaceFilter object((jobject) NULL);

            if (!parseArgs(args, "kksZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::regex::Pattern::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = PatternReplaceFilter(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternReplaceFilter_incrementToken(t_PatternReplaceFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PatternReplaceFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/BufferingTermFreqIteratorWrapper.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spell/TermFreqIterator.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *BufferingTermFreqIteratorWrapper::class$ = NULL;
          jmethodID *BufferingTermFreqIteratorWrapper::mids$ = NULL;
          bool BufferingTermFreqIteratorWrapper::live$ = false;

          jclass BufferingTermFreqIteratorWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/BufferingTermFreqIteratorWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b57afdd1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spell/TermFreqIterator;)V");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BufferingTermFreqIteratorWrapper::BufferingTermFreqIteratorWrapper(const ::org::apache::lucene::search::spell::TermFreqIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b57afdd1, a0.this$)) {}

          ::java::util::Comparator BufferingTermFreqIteratorWrapper::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          ::org::apache::lucene::util::BytesRef BufferingTermFreqIteratorWrapper::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          jlong BufferingTermFreqIteratorWrapper::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_BufferingTermFreqIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BufferingTermFreqIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BufferingTermFreqIteratorWrapper_init_(t_BufferingTermFreqIteratorWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BufferingTermFreqIteratorWrapper_getComparator(t_BufferingTermFreqIteratorWrapper *self);
          static PyObject *t_BufferingTermFreqIteratorWrapper_next(t_BufferingTermFreqIteratorWrapper *self);
          static PyObject *t_BufferingTermFreqIteratorWrapper_weight(t_BufferingTermFreqIteratorWrapper *self);
          static PyObject *t_BufferingTermFreqIteratorWrapper_get__comparator(t_BufferingTermFreqIteratorWrapper *self, void *data);
          static PyGetSetDef t_BufferingTermFreqIteratorWrapper__fields_[] = {
            DECLARE_GET_FIELD(t_BufferingTermFreqIteratorWrapper, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BufferingTermFreqIteratorWrapper__methods_[] = {
            DECLARE_METHOD(t_BufferingTermFreqIteratorWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BufferingTermFreqIteratorWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BufferingTermFreqIteratorWrapper, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_BufferingTermFreqIteratorWrapper, next, METH_NOARGS),
            DECLARE_METHOD(t_BufferingTermFreqIteratorWrapper, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BufferingTermFreqIteratorWrapper, t_BufferingTermFreqIteratorWrapper, ::java::lang::Object, BufferingTermFreqIteratorWrapper, t_BufferingTermFreqIteratorWrapper_init_, PyObject_SelfIter, ((PyObject *(*)(t_BufferingTermFreqIteratorWrapper *)) get_next< t_BufferingTermFreqIteratorWrapper,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_BufferingTermFreqIteratorWrapper__fields_, 0, 0);

          void t_BufferingTermFreqIteratorWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(BufferingTermFreqIteratorWrapper), module, "BufferingTermFreqIteratorWrapper", 0);
          }

          void t_BufferingTermFreqIteratorWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BufferingTermFreqIteratorWrapper).tp_dict, "class_", make_descriptor(BufferingTermFreqIteratorWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BufferingTermFreqIteratorWrapper).tp_dict, "wrapfn_", make_descriptor(t_BufferingTermFreqIteratorWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BufferingTermFreqIteratorWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BufferingTermFreqIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BufferingTermFreqIteratorWrapper::initializeClass, 1)))
              return NULL;
            return t_BufferingTermFreqIteratorWrapper::wrap_Object(BufferingTermFreqIteratorWrapper(((t_BufferingTermFreqIteratorWrapper *) arg)->object.this$));
          }
          static PyObject *t_BufferingTermFreqIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BufferingTermFreqIteratorWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BufferingTermFreqIteratorWrapper_init_(t_BufferingTermFreqIteratorWrapper *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spell::TermFreqIterator a0((jobject) NULL);
            BufferingTermFreqIteratorWrapper object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::spell::TermFreqIterator::initializeClass, &a0))
            {
              INT_CALL(object = BufferingTermFreqIteratorWrapper(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BufferingTermFreqIteratorWrapper_getComparator(t_BufferingTermFreqIteratorWrapper *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_BufferingTermFreqIteratorWrapper_next(t_BufferingTermFreqIteratorWrapper *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_BufferingTermFreqIteratorWrapper_weight(t_BufferingTermFreqIteratorWrapper *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BufferingTermFreqIteratorWrapper_get__comparator(t_BufferingTermFreqIteratorWrapper *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianMinimalStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianMinimalStemFilter::class$ = NULL;
          jmethodID *GalicianMinimalStemFilter::mids$ = NULL;
          bool GalicianMinimalStemFilter::live$ = false;

          jclass GalicianMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianMinimalStemFilter::GalicianMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean GalicianMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianMinimalStemFilter_init_(t_GalicianMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianMinimalStemFilter_incrementToken(t_GalicianMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_GalicianMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_GalicianMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GalicianMinimalStemFilter, t_GalicianMinimalStemFilter, ::org::apache::lucene::analysis::TokenFilter, GalicianMinimalStemFilter, t_GalicianMinimalStemFilter_init_, 0, 0, 0, 0, 0);

          void t_GalicianMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianMinimalStemFilter), module, "GalicianMinimalStemFilter", 0);
          }

          void t_GalicianMinimalStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemFilter).tp_dict, "class_", make_descriptor(GalicianMinimalStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemFilter).tp_dict, "wrapfn_", make_descriptor(t_GalicianMinimalStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GalicianMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_GalicianMinimalStemFilter::wrap_Object(GalicianMinimalStemFilter(((t_GalicianMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GalicianMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianMinimalStemFilter_init_(t_GalicianMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GalicianMinimalStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GalicianMinimalStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GalicianMinimalStemFilter_incrementToken(t_GalicianMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GalicianMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/BlockPackedWriter.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *BlockPackedWriter::class$ = NULL;
          jmethodID *BlockPackedWriter::mids$ = NULL;
          bool BlockPackedWriter::live$ = false;

          jclass BlockPackedWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/BlockPackedWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f4663c33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataOutput;I)V");
              mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockPackedWriter::BlockPackedWriter(const ::org::apache::lucene::store::DataOutput & a0, jint a1) : ::org::apache::lucene::util::packed::AbstractBlockPackedWriter(env->newObject(initializeClass, &mids$, mid_init$_f4663c33, a0.this$, a1)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_BlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockPackedWriter_init_(t_BlockPackedWriter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_BlockPackedWriter__methods_[] = {
            DECLARE_METHOD(t_BlockPackedWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockPackedWriter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BlockPackedWriter, t_BlockPackedWriter, ::org::apache::lucene::util::packed::AbstractBlockPackedWriter, BlockPackedWriter, t_BlockPackedWriter_init_, 0, 0, 0, 0, 0);

          void t_BlockPackedWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockPackedWriter), module, "BlockPackedWriter", 0);
          }

          void t_BlockPackedWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BlockPackedWriter).tp_dict, "class_", make_descriptor(BlockPackedWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BlockPackedWriter).tp_dict, "wrapfn_", make_descriptor(t_BlockPackedWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BlockPackedWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockPackedWriter::initializeClass, 1)))
              return NULL;
            return t_BlockPackedWriter::wrap_Object(BlockPackedWriter(((t_BlockPackedWriter *) arg)->object.this$));
          }
          static PyObject *t_BlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockPackedWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockPackedWriter_init_(t_BlockPackedWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            jint a1;
            BlockPackedWriter object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              INT_CALL(object = BlockPackedWriter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/util/Map.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {

          ::java::lang::Class *HunspellStemFilterFactory::class$ = NULL;
          jmethodID *HunspellStemFilterFactory::mids$ = NULL;
          bool HunspellStemFilterFactory::live$ = false;

          jclass HunspellStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HunspellStemFilterFactory::HunspellStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream HunspellStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          void HunspellStemFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {
          static PyObject *t_HunspellStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HunspellStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HunspellStemFilterFactory_init_(t_HunspellStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HunspellStemFilterFactory_create(t_HunspellStemFilterFactory *self, PyObject *args);
          static PyObject *t_HunspellStemFilterFactory_inform(t_HunspellStemFilterFactory *self, PyObject *arg);

          static PyMethodDef t_HunspellStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HunspellStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HunspellStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HunspellStemFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_HunspellStemFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HunspellStemFilterFactory, t_HunspellStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, HunspellStemFilterFactory, t_HunspellStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_HunspellStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HunspellStemFilterFactory), module, "HunspellStemFilterFactory", 0);
          }

          void t_HunspellStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HunspellStemFilterFactory).tp_dict, "class_", make_descriptor(HunspellStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HunspellStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_HunspellStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HunspellStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HunspellStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HunspellStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HunspellStemFilterFactory::wrap_Object(HunspellStemFilterFactory(((t_HunspellStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HunspellStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HunspellStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HunspellStemFilterFactory_init_(t_HunspellStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HunspellStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HunspellStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HunspellStemFilterFactory_create(t_HunspellStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(HunspellStemFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_HunspellStemFilterFactory_inform(t_HunspellStemFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/AfterEffect.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *AfterEffect::class$ = NULL;
          jmethodID *AfterEffect::mids$ = NULL;
          bool AfterEffect::live$ = false;

          jclass AfterEffect::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/AfterEffect");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_05d4946a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;F)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AfterEffect::AfterEffect() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation AfterEffect::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_05d4946a], a0.this$, a1));
          }

          jfloat AfterEffect::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String AfterEffect::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/similarities/AfterEffect$NoAfterEffect.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_AfterEffect_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AfterEffect_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AfterEffect_init_(t_AfterEffect *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AfterEffect_explain(t_AfterEffect *self, PyObject *args);
          static PyObject *t_AfterEffect_score(t_AfterEffect *self, PyObject *args);
          static PyObject *t_AfterEffect_toString(t_AfterEffect *self, PyObject *args);

          static PyMethodDef t_AfterEffect__methods_[] = {
            DECLARE_METHOD(t_AfterEffect, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffect, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffect, explain, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffect, score, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffect, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AfterEffect, t_AfterEffect, ::java::lang::Object, AfterEffect, t_AfterEffect_init_, 0, 0, 0, 0, 0);

          void t_AfterEffect::install(PyObject *module)
          {
            installType(&PY_TYPE(AfterEffect), module, "AfterEffect", 0);
            PyDict_SetItemString(PY_TYPE(AfterEffect).tp_dict, "NoAfterEffect", make_descriptor(&PY_TYPE(AfterEffect$NoAfterEffect)));
          }

          void t_AfterEffect::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AfterEffect).tp_dict, "class_", make_descriptor(AfterEffect::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AfterEffect).tp_dict, "wrapfn_", make_descriptor(t_AfterEffect::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AfterEffect).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AfterEffect_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AfterEffect::initializeClass, 1)))
              return NULL;
            return t_AfterEffect::wrap_Object(AfterEffect(((t_AfterEffect *) arg)->object.this$));
          }
          static PyObject *t_AfterEffect_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AfterEffect::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AfterEffect_init_(t_AfterEffect *self, PyObject *args, PyObject *kwds)
          {
            AfterEffect object((jobject) NULL);

            INT_CALL(object = AfterEffect());
            self->object = object;

            return 0;
          }

          static PyObject *t_AfterEffect_explain(t_AfterEffect *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_AfterEffect_score(t_AfterEffect *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "score", args);
            return NULL;
          }

          static PyObject *t_AfterEffect_toString(t_AfterEffect *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(AfterEffect), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/path/PathHierarchyTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {

          ::java::lang::Class *PathHierarchyTokenizer::class$ = NULL;
          jmethodID *PathHierarchyTokenizer::mids$ = NULL;
          bool PathHierarchyTokenizer::live$ = false;
          jchar PathHierarchyTokenizer::DEFAULT_DELIMITER = (jchar) 0;
          jint PathHierarchyTokenizer::DEFAULT_SKIP = (jint) 0;

          jclass PathHierarchyTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/path/PathHierarchyTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_8c604f56] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;I)V");
              mids$[mid_init$_944d83a2] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;IC)V");
              mids$[mid_init$_94478bac] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;CC)V");
              mids$[mid_init$_94f21e72] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;CCI)V");
              mids$[mid_init$_df655116] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;CCI)V");
              mids$[mid_init$_5df3b604] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;ICCI)V");
              mids$[mid_init$_0b338d38] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;ICCI)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_DELIMITER = env->getStaticCharField(cls, "DEFAULT_DELIMITER");
              DEFAULT_SKIP = env->getStaticIntField(cls, "DEFAULT_SKIP");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::java::io::Reader & a0, jint a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_8c604f56, a0.this$, a1)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::java::io::Reader & a0, jint a1, jchar a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_944d83a2, a0.this$, a1, a2)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::java::io::Reader & a0, jchar a1, jchar a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_94478bac, a0.this$, a1, a2)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::java::io::Reader & a0, jchar a1, jchar a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_94f21e72, a0.this$, a1, a2, a3)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jchar a2, jchar a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_df655116, a0.this$, a1.this$, a2, a3, a4)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::java::io::Reader & a0, jint a1, jchar a2, jchar a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_5df3b604, a0.this$, a1, a2, a3, a4)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jint a2, jchar a3, jchar a4, jint a5) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_0b338d38, a0.this$, a1.this$, a2, a3, a4, a5)) {}

          void PathHierarchyTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean PathHierarchyTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void PathHierarchyTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {
          static PyObject *t_PathHierarchyTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PathHierarchyTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PathHierarchyTokenizer_init_(t_PathHierarchyTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PathHierarchyTokenizer_end(t_PathHierarchyTokenizer *self, PyObject *args);
          static PyObject *t_PathHierarchyTokenizer_incrementToken(t_PathHierarchyTokenizer *self, PyObject *args);
          static PyObject *t_PathHierarchyTokenizer_reset(t_PathHierarchyTokenizer *self, PyObject *args);

          static PyMethodDef t_PathHierarchyTokenizer__methods_[] = {
            DECLARE_METHOD(t_PathHierarchyTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PathHierarchyTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PathHierarchyTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_PathHierarchyTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_PathHierarchyTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PathHierarchyTokenizer, t_PathHierarchyTokenizer, ::org::apache::lucene::analysis::Tokenizer, PathHierarchyTokenizer, t_PathHierarchyTokenizer_init_, 0, 0, 0, 0, 0);

          void t_PathHierarchyTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(PathHierarchyTokenizer), module, "PathHierarchyTokenizer", 0);
          }

          void t_PathHierarchyTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizer).tp_dict, "class_", make_descriptor(PathHierarchyTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizer).tp_dict, "wrapfn_", make_descriptor(t_PathHierarchyTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PathHierarchyTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizer).tp_dict, "DEFAULT_DELIMITER", make_descriptor(PathHierarchyTokenizer::DEFAULT_DELIMITER));
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizer).tp_dict, "DEFAULT_SKIP", make_descriptor(PathHierarchyTokenizer::DEFAULT_SKIP));
          }

          static PyObject *t_PathHierarchyTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PathHierarchyTokenizer::initializeClass, 1)))
              return NULL;
            return t_PathHierarchyTokenizer::wrap_Object(PathHierarchyTokenizer(((t_PathHierarchyTokenizer *) arg)->object.this$));
          }
          static PyObject *t_PathHierarchyTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PathHierarchyTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PathHierarchyTokenizer_init_(t_PathHierarchyTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kI", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                jchar a2;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kIC", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                jchar a1;
                jchar a2;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kCC", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::io::Reader a0((jobject) NULL);
                jchar a1;
                jchar a2;
                jint a3;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kCCI", ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jchar a2;
                jchar a3;
                jint a4;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkCCI", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                jchar a2;
                jchar a3;
                jint a4;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kICCI", ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jchar a3;
                jchar a4;
                jint a5;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkICCI", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PathHierarchyTokenizer_end(t_PathHierarchyTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PathHierarchyTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_PathHierarchyTokenizer_incrementToken(t_PathHierarchyTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PathHierarchyTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_PathHierarchyTokenizer_reset(t_PathHierarchyTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PathHierarchyTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Runtime.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/Thread.h"
#include "java/io/File.h"
#include "java/io/OutputStream.h"
#include "java/io/InputStream.h"
#include "java/lang/Process.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Runtime::class$ = NULL;
    jmethodID *Runtime::mids$ = NULL;
    bool Runtime::live$ = false;

    jclass Runtime::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Runtime");

        mids$ = new jmethodID[max_mid];
        mids$[mid_addShutdownHook_cfc68b69] = env->getMethodID(cls, "addShutdownHook", "(Ljava/lang/Thread;)V");
        mids$[mid_availableProcessors_54c6a179] = env->getMethodID(cls, "availableProcessors", "()I");
        mids$[mid_exec_cb215688] = env->getMethodID(cls, "exec", "([Ljava/lang/String;)Ljava/lang/Process;");
        mids$[mid_exec_a3a0dfc8] = env->getMethodID(cls, "exec", "(Ljava/lang/String;)Ljava/lang/Process;");
        mids$[mid_exec_d0c45a12] = env->getMethodID(cls, "exec", "([Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Process;");
        mids$[mid_exec_dfe32e32] = env->getMethodID(cls, "exec", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Process;");
        mids$[mid_exec_e1ed077f] = env->getMethodID(cls, "exec", "(Ljava/lang/String;[Ljava/lang/String;Ljava/io/File;)Ljava/lang/Process;");
        mids$[mid_exec_5726a223] = env->getMethodID(cls, "exec", "([Ljava/lang/String;[Ljava/lang/String;Ljava/io/File;)Ljava/lang/Process;");
        mids$[mid_exit_39c7bd3c] = env->getMethodID(cls, "exit", "(I)V");
        mids$[mid_freeMemory_54c6a17a] = env->getMethodID(cls, "freeMemory", "()J");
        mids$[mid_gc_54c6a166] = env->getMethodID(cls, "gc", "()V");
        mids$[mid_getLocalizedInputStream_04932eef] = env->getMethodID(cls, "getLocalizedInputStream", "(Ljava/io/InputStream;)Ljava/io/InputStream;");
        mids$[mid_getLocalizedOutputStream_97714a3f] = env->getMethodID(cls, "getLocalizedOutputStream", "(Ljava/io/OutputStream;)Ljava/io/OutputStream;");
        mids$[mid_getRuntime_620bf90f] = env->getStaticMethodID(cls, "getRuntime", "()Ljava/lang/Runtime;");
        mids$[mid_halt_39c7bd3c] = env->getMethodID(cls, "halt", "(I)V");
        mids$[mid_load_5fdc3f48] = env->getMethodID(cls, "load", "(Ljava/lang/String;)V");
        mids$[mid_loadLibrary_5fdc3f48] = env->getMethodID(cls, "loadLibrary", "(Ljava/lang/String;)V");
        mids$[mid_maxMemory_54c6a17a] = env->getMethodID(cls, "maxMemory", "()J");
        mids$[mid_removeShutdownHook_cfc68b65] = env->getMethodID(cls, "removeShutdownHook", "(Ljava/lang/Thread;)Z");
        mids$[mid_runFinalization_54c6a166] = env->getMethodID(cls, "runFinalization", "()V");
        mids$[mid_runFinalizersOnExit_bb0c767f] = env->getStaticMethodID(cls, "runFinalizersOnExit", "(Z)V");
        mids$[mid_totalMemory_54c6a17a] = env->getMethodID(cls, "totalMemory", "()J");
        mids$[mid_traceInstructions_bb0c767f] = env->getMethodID(cls, "traceInstructions", "(Z)V");
        mids$[mid_traceMethodCalls_bb0c767f] = env->getMethodID(cls, "traceMethodCalls", "(Z)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    void Runtime::addShutdownHook(const ::java::lang::Thread & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_addShutdownHook_cfc68b69], a0.this$);
    }

    jint Runtime::availableProcessors() const
    {
      return env->callIntMethod(this$, mids$[mid_availableProcessors_54c6a179]);
    }

    ::java::lang::Process Runtime::exec(const JArray< ::java::lang::String > & a0) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_cb215688], a0.this$));
    }

    ::java::lang::Process Runtime::exec(const ::java::lang::String & a0) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_a3a0dfc8], a0.this$));
    }

    ::java::lang::Process Runtime::exec(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_d0c45a12], a0.this$, a1.this$));
    }

    ::java::lang::Process Runtime::exec(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_dfe32e32], a0.this$, a1.this$));
    }

    ::java::lang::Process Runtime::exec(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1, const ::java::io::File & a2) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_e1ed077f], a0.this$, a1.this$, a2.this$));
    }

    ::java::lang::Process Runtime::exec(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1, const ::java::io::File & a2) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_5726a223], a0.this$, a1.this$, a2.this$));
    }

    void Runtime::exit(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_exit_39c7bd3c], a0);
    }

    jlong Runtime::freeMemory() const
    {
      return env->callLongMethod(this$, mids$[mid_freeMemory_54c6a17a]);
    }

    void Runtime::gc() const
    {
      env->callVoidMethod(this$, mids$[mid_gc_54c6a166]);
    }

    ::java::io::InputStream Runtime::getLocalizedInputStream(const ::java::io::InputStream & a0) const
    {
      return ::java::io::InputStream(env->callObjectMethod(this$, mids$[mid_getLocalizedInputStream_04932eef], a0.this$));
    }

    ::java::io::OutputStream Runtime::getLocalizedOutputStream(const ::java::io::OutputStream & a0) const
    {
      return ::java::io::OutputStream(env->callObjectMethod(this$, mids$[mid_getLocalizedOutputStream_97714a3f], a0.this$));
    }

    Runtime Runtime::getRuntime()
    {
      jclass cls = env->getClass(initializeClass);
      return Runtime(env->callStaticObjectMethod(cls, mids$[mid_getRuntime_620bf90f]));
    }

    void Runtime::halt(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_halt_39c7bd3c], a0);
    }

    void Runtime::load(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_load_5fdc3f48], a0.this$);
    }

    void Runtime::loadLibrary(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_loadLibrary_5fdc3f48], a0.this$);
    }

    jlong Runtime::maxMemory() const
    {
      return env->callLongMethod(this$, mids$[mid_maxMemory_54c6a17a]);
    }

    jboolean Runtime::removeShutdownHook(const ::java::lang::Thread & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_removeShutdownHook_cfc68b65], a0.this$);
    }

    void Runtime::runFinalization() const
    {
      env->callVoidMethod(this$, mids$[mid_runFinalization_54c6a166]);
    }

    void Runtime::runFinalizersOnExit(jboolean a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_runFinalizersOnExit_bb0c767f], a0);
    }

    jlong Runtime::totalMemory() const
    {
      return env->callLongMethod(this$, mids$[mid_totalMemory_54c6a17a]);
    }

    void Runtime::traceInstructions(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_traceInstructions_bb0c767f], a0);
    }

    void Runtime::traceMethodCalls(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_traceMethodCalls_bb0c767f], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Runtime_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Runtime_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Runtime_addShutdownHook(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_availableProcessors(t_Runtime *self);
    static PyObject *t_Runtime_exec(t_Runtime *self, PyObject *args);
    static PyObject *t_Runtime_exit(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_freeMemory(t_Runtime *self);
    static PyObject *t_Runtime_gc(t_Runtime *self);
    static PyObject *t_Runtime_getLocalizedInputStream(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_getLocalizedOutputStream(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_getRuntime(PyTypeObject *type);
    static PyObject *t_Runtime_halt(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_load(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_loadLibrary(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_maxMemory(t_Runtime *self);
    static PyObject *t_Runtime_removeShutdownHook(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_runFinalization(t_Runtime *self);
    static PyObject *t_Runtime_runFinalizersOnExit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Runtime_totalMemory(t_Runtime *self);
    static PyObject *t_Runtime_traceInstructions(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_traceMethodCalls(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_get__runtime(t_Runtime *self, void *data);
    static PyGetSetDef t_Runtime__fields_[] = {
      DECLARE_GET_FIELD(t_Runtime, runtime),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Runtime__methods_[] = {
      DECLARE_METHOD(t_Runtime, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Runtime, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Runtime, addShutdownHook, METH_O),
      DECLARE_METHOD(t_Runtime, availableProcessors, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, exec, METH_VARARGS),
      DECLARE_METHOD(t_Runtime, exit, METH_O),
      DECLARE_METHOD(t_Runtime, freeMemory, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, gc, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, getLocalizedInputStream, METH_O),
      DECLARE_METHOD(t_Runtime, getLocalizedOutputStream, METH_O),
      DECLARE_METHOD(t_Runtime, getRuntime, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Runtime, halt, METH_O),
      DECLARE_METHOD(t_Runtime, load, METH_O),
      DECLARE_METHOD(t_Runtime, loadLibrary, METH_O),
      DECLARE_METHOD(t_Runtime, maxMemory, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, removeShutdownHook, METH_O),
      DECLARE_METHOD(t_Runtime, runFinalization, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, runFinalizersOnExit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Runtime, totalMemory, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, traceInstructions, METH_O),
      DECLARE_METHOD(t_Runtime, traceMethodCalls, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Runtime, t_Runtime, ::java::lang::Object, Runtime, abstract_init, 0, 0, t_Runtime__fields_, 0, 0);

    void t_Runtime::install(PyObject *module)
    {
      installType(&PY_TYPE(Runtime), module, "Runtime", 0);
    }

    void t_Runtime::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Runtime).tp_dict, "class_", make_descriptor(Runtime::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Runtime).tp_dict, "wrapfn_", make_descriptor(t_Runtime::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Runtime).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Runtime_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Runtime::initializeClass, 1)))
        return NULL;
      return t_Runtime::wrap_Object(Runtime(((t_Runtime *) arg)->object.this$));
    }
    static PyObject *t_Runtime_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Runtime::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Runtime_addShutdownHook(t_Runtime *self, PyObject *arg)
    {
      ::java::lang::Thread a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::lang::Thread::initializeClass, &a0))
      {
        OBJ_CALL(self->object.addShutdownHook(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "addShutdownHook", arg);
      return NULL;
    }

    static PyObject *t_Runtime_availableProcessors(t_Runtime *self)
    {
      jint result;
      OBJ_CALL(result = self->object.availableProcessors());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Runtime_exec(t_Runtime *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< ::java::lang::String > a0((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "[s", &a0))
          {
            OBJ_CALL(result = self->object.exec(a0));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.exec(a0));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          JArray< ::java::lang::String > a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "[s[s", &a0, &a1))
          {
            OBJ_CALL(result = self->object.exec(a0, a1));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "s[s", &a0, &a1))
          {
            OBJ_CALL(result = self->object.exec(a0, a1));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::io::File a2((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "s[sk", ::java::io::File::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.exec(a0, a1, a2));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
        {
          JArray< ::java::lang::String > a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::io::File a2((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "[s[sk", ::java::io::File::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.exec(a0, a1, a2));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "exec", args);
      return NULL;
    }

    static PyObject *t_Runtime_exit(t_Runtime *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.exit(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "exit", arg);
      return NULL;
    }

    static PyObject *t_Runtime_freeMemory(t_Runtime *self)
    {
      jlong result;
      OBJ_CALL(result = self->object.freeMemory());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_Runtime_gc(t_Runtime *self)
    {
      OBJ_CALL(self->object.gc());
      Py_RETURN_NONE;
    }

    static PyObject *t_Runtime_getLocalizedInputStream(t_Runtime *self, PyObject *arg)
    {
      ::java::io::InputStream a0((jobject) NULL);
      ::java::io::InputStream result((jobject) NULL);

      if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
      {
        OBJ_CALL(result = self->object.getLocalizedInputStream(a0));
        return ::java::io::t_InputStream::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "getLocalizedInputStream", arg);
      return NULL;
    }

    static PyObject *t_Runtime_getLocalizedOutputStream(t_Runtime *self, PyObject *arg)
    {
      ::java::io::OutputStream a0((jobject) NULL);
      ::java::io::OutputStream result((jobject) NULL);

      if (!parseArg(arg, "k", ::java::io::OutputStream::initializeClass, &a0))
      {
        OBJ_CALL(result = self->object.getLocalizedOutputStream(a0));
        return ::java::io::t_OutputStream::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "getLocalizedOutputStream", arg);
      return NULL;
    }

    static PyObject *t_Runtime_getRuntime(PyTypeObject *type)
    {
      Runtime result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::Runtime::getRuntime());
      return t_Runtime::wrap_Object(result);
    }

    static PyObject *t_Runtime_halt(t_Runtime *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.halt(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "halt", arg);
      return NULL;
    }

    static PyObject *t_Runtime_load(t_Runtime *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.load(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "load", arg);
      return NULL;
    }

    static PyObject *t_Runtime_loadLibrary(t_Runtime *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.loadLibrary(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "loadLibrary", arg);
      return NULL;
    }

    static PyObject *t_Runtime_maxMemory(t_Runtime *self)
    {
      jlong result;
      OBJ_CALL(result = self->object.maxMemory());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_Runtime_removeShutdownHook(t_Runtime *self, PyObject *arg)
    {
      ::java::lang::Thread a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "k", ::java::lang::Thread::initializeClass, &a0))
      {
        OBJ_CALL(result = self->object.removeShutdownHook(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "removeShutdownHook", arg);
      return NULL;
    }

    static PyObject *t_Runtime_runFinalization(t_Runtime *self)
    {
      OBJ_CALL(self->object.runFinalization());
      Py_RETURN_NONE;
    }

    static PyObject *t_Runtime_runFinalizersOnExit(PyTypeObject *type, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(::java::lang::Runtime::runFinalizersOnExit(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "runFinalizersOnExit", arg);
      return NULL;
    }

    static PyObject *t_Runtime_totalMemory(t_Runtime *self)
    {
      jlong result;
      OBJ_CALL(result = self->object.totalMemory());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_Runtime_traceInstructions(t_Runtime *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.traceInstructions(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "traceInstructions", arg);
      return NULL;
    }

    static PyObject *t_Runtime_traceMethodCalls(t_Runtime *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.traceMethodCalls(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "traceMethodCalls", arg);
      return NULL;
    }

    static PyObject *t_Runtime_get__runtime(t_Runtime *self, void *data)
    {
      Runtime value((jobject) NULL);
      OBJ_CALL(value = self->object.getRuntime());
      return t_Runtime::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/lang/Runnable.h"
#include "java/util/concurrent/ScheduledExecutorService.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {
    namespace concurrent {

      ::java::lang::Class *Executors::class$ = NULL;
      jmethodID *Executors::mids$ = NULL;
      bool Executors::live$ = false;

      jclass Executors::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("java/util/concurrent/Executors");

          mids$ = new jmethodID[max_mid];
          mids$[mid_callable_a93e49d5] = env->getStaticMethodID(cls, "callable", "(Ljava/lang/Runnable;)Ljava/util/concurrent/Callable;");
          mids$[mid_callable_27f60351] = env->getStaticMethodID(cls, "callable", "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Callable;");
          mids$[mid_defaultThreadFactory_1a8a37c6] = env->getStaticMethodID(cls, "defaultThreadFactory", "()Ljava/util/concurrent/ThreadFactory;");
          mids$[mid_newCachedThreadPool_7959084a] = env->getStaticMethodID(cls, "newCachedThreadPool", "()Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newCachedThreadPool_ef1f74b9] = env->getStaticMethodID(cls, "newCachedThreadPool", "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newFixedThreadPool_8e681bb4] = env->getStaticMethodID(cls, "newFixedThreadPool", "(I)Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newFixedThreadPool_366a7197] = env->getStaticMethodID(cls, "newFixedThreadPool", "(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newScheduledThreadPool_86106422] = env->getStaticMethodID(cls, "newScheduledThreadPool", "(I)Ljava/util/concurrent/ScheduledExecutorService;");
          mids$[mid_newScheduledThreadPool_6380c25f] = env->getStaticMethodID(cls, "newScheduledThreadPool", "(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;");
          mids$[mid_newSingleThreadExecutor_7959084a] = env->getStaticMethodID(cls, "newSingleThreadExecutor", "()Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newSingleThreadExecutor_ef1f74b9] = env->getStaticMethodID(cls, "newSingleThreadExecutor", "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newSingleThreadScheduledExecutor_2e78bbb0] = env->getStaticMethodID(cls, "newSingleThreadScheduledExecutor", "()Ljava/util/concurrent/ScheduledExecutorService;");
          mids$[mid_newSingleThreadScheduledExecutor_e92dd26d] = env->getStaticMethodID(cls, "newSingleThreadScheduledExecutor", "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;");
          mids$[mid_privilegedCallable_9221e3a3] = env->getStaticMethodID(cls, "privilegedCallable", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;");
          mids$[mid_privilegedCallableUsingCurrentClassLoader_9221e3a3] = env->getStaticMethodID(cls, "privilegedCallableUsingCurrentClassLoader", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;");
          mids$[mid_privilegedThreadFactory_1a8a37c6] = env->getStaticMethodID(cls, "privilegedThreadFactory", "()Ljava/util/concurrent/ThreadFactory;");
          mids$[mid_unconfigurableExecutorService_d4c55b25] = env->getStaticMethodID(cls, "unconfigurableExecutorService", "(Ljava/util/concurrent/ExecutorService;)Ljava/util/concurrent/ExecutorService;");
          mids$[mid_unconfigurableScheduledExecutorService_afd7b7c3] = env->getStaticMethodID(cls, "unconfigurableScheduledExecutorService", "(Ljava/util/concurrent/ScheduledExecutorService;)Ljava/util/concurrent/ScheduledExecutorService;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ::java::util::concurrent::Callable Executors::callable(const ::java::lang::Runnable & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::Callable(env->callStaticObjectMethod(cls, mids$[mid_callable_a93e49d5], a0.this$));
      }

      ::java::util::concurrent::Callable Executors::callable(const ::java::lang::Runnable & a0, const ::java::lang::Object & a1)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::Callable(env->callStaticObjectMethod(cls, mids$[mid_callable_27f60351], a0.this$, a1.this$));
      }

      ::java::util::concurrent::ThreadFactory Executors::defaultThreadFactory()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ThreadFactory(env->callStaticObjectMethod(cls, mids$[mid_defaultThreadFactory_1a8a37c6]));
      }

      ::java::util::concurrent::ExecutorService Executors::newCachedThreadPool()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newCachedThreadPool_7959084a]));
      }

      ::java::util::concurrent::ExecutorService Executors::newCachedThreadPool(const ::java::util::concurrent::ThreadFactory & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newCachedThreadPool_ef1f74b9], a0.this$));
      }

      ::java::util::concurrent::ExecutorService Executors::newFixedThreadPool(jint a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newFixedThreadPool_8e681bb4], a0));
      }

      ::java::util::concurrent::ExecutorService Executors::newFixedThreadPool(jint a0, const ::java::util::concurrent::ThreadFactory & a1)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newFixedThreadPool_366a7197], a0, a1.this$));
      }

      ::java::util::concurrent::ScheduledExecutorService Executors::newScheduledThreadPool(jint a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ScheduledExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newScheduledThreadPool_86106422], a0));
      }

      ::java::util::concurrent::ScheduledExecutorService Executors::newScheduledThreadPool(jint a0, const ::java::util::concurrent::ThreadFactory & a1)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ScheduledExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newScheduledThreadPool_6380c25f], a0, a1.this$));
      }

      ::java::util::concurrent::ExecutorService Executors::newSingleThreadExecutor()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newSingleThreadExecutor_7959084a]));
      }

      ::java::util::concurrent::ExecutorService Executors::newSingleThreadExecutor(const ::java::util::concurrent::ThreadFactory & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newSingleThreadExecutor_ef1f74b9], a0.this$));
      }

      ::java::util::concurrent::ScheduledExecutorService Executors::newSingleThreadScheduledExecutor()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ScheduledExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newSingleThreadScheduledExecutor_2e78bbb0]));
      }

      ::java::util::concurrent::ScheduledExecutorService Executors::newSingleThreadScheduledExecutor(const ::java::util::concurrent::ThreadFactory & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ScheduledExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newSingleThreadScheduledExecutor_e92dd26d], a0.this$));
      }

      ::java::util::concurrent::Callable Executors::privilegedCallable(const ::java::util::concurrent::Callable & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::Callable(env->callStaticObjectMethod(cls, mids$[mid_privilegedCallable_9221e3a3], a0.this$));
      }

      ::java::util::concurrent::Callable Executors::privilegedCallableUsingCurrentClassLoader(const ::java::util::concurrent::Callable & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::Callable(env->callStaticObjectMethod(cls, mids$[mid_privilegedCallableUsingCurrentClassLoader_9221e3a3], a0.this$));
      }

      ::java::util::concurrent::ThreadFactory Executors::privilegedThreadFactory()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ThreadFactory(env->callStaticObjectMethod(cls, mids$[mid_privilegedThreadFactory_1a8a37c6]));
      }

      ::java::util::concurrent::ExecutorService Executors::unconfigurableExecutorService(const ::java::util::concurrent::ExecutorService & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_unconfigurableExecutorService_d4c55b25], a0.this$));
      }

      ::java::util::concurrent::ScheduledExecutorService Executors::unconfigurableScheduledExecutorService(const ::java::util::concurrent::ScheduledExecutorService & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ScheduledExecutorService(env->callStaticObjectMethod(cls, mids$[mid_unconfigurableScheduledExecutorService_afd7b7c3], a0.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    namespace concurrent {
      static PyObject *t_Executors_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Executors_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Executors_callable(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_defaultThreadFactory(PyTypeObject *type);
      static PyObject *t_Executors_newCachedThreadPool(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_newFixedThreadPool(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_newScheduledThreadPool(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_newSingleThreadExecutor(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_newSingleThreadScheduledExecutor(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_privilegedCallable(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Executors_privilegedCallableUsingCurrentClassLoader(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Executors_privilegedThreadFactory(PyTypeObject *type);
      static PyObject *t_Executors_unconfigurableExecutorService(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Executors_unconfigurableScheduledExecutorService(PyTypeObject *type, PyObject *arg);

      static PyMethodDef t_Executors__methods_[] = {
        DECLARE_METHOD(t_Executors, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Executors, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Executors, callable, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, defaultThreadFactory, METH_NOARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, newCachedThreadPool, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, newFixedThreadPool, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, newScheduledThreadPool, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, newSingleThreadExecutor, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, newSingleThreadScheduledExecutor, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, privilegedCallable, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Executors, privilegedCallableUsingCurrentClassLoader, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Executors, privilegedThreadFactory, METH_NOARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, unconfigurableExecutorService, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Executors, unconfigurableScheduledExecutorService, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Executors, t_Executors, ::java::lang::Object, Executors, abstract_init, 0, 0, 0, 0, 0);

      void t_Executors::install(PyObject *module)
      {
        installType(&PY_TYPE(Executors), module, "Executors", 0);
      }

      void t_Executors::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Executors).tp_dict, "class_", make_descriptor(Executors::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Executors).tp_dict, "wrapfn_", make_descriptor(t_Executors::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Executors).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Executors_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Executors::initializeClass, 1)))
          return NULL;
        return t_Executors::wrap_Object(Executors(((t_Executors *) arg)->object.this$));
      }
      static PyObject *t_Executors_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Executors::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_Executors_callable(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::lang::Runnable a0((jobject) NULL);
            ::java::util::concurrent::Callable result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::lang::Runnable::initializeClass, &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::callable(a0));
              return ::java::util::concurrent::t_Callable::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }
          }
          break;
         case 2:
          {
            ::java::lang::Runnable a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::util::concurrent::Callable result((jobject) NULL);

            if (!parseArgs(args, "ko", ::java::lang::Runnable::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::callable(a0, a1));
              return ::java::util::concurrent::t_Callable::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "callable", args);
        return NULL;
      }

      static PyObject *t_Executors_defaultThreadFactory(PyTypeObject *type)
      {
        ::java::util::concurrent::ThreadFactory result((jobject) NULL);
        OBJ_CALL(result = ::java::util::concurrent::Executors::defaultThreadFactory());
        return ::java::util::concurrent::t_ThreadFactory::wrap_Object(result);
      }

      static PyObject *t_Executors_newCachedThreadPool(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            ::java::util::concurrent::ExecutorService result((jobject) NULL);
            OBJ_CALL(result = ::java::util::concurrent::Executors::newCachedThreadPool());
            return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
          }
          break;
         case 1:
          {
            ::java::util::concurrent::ThreadFactory a0((jobject) NULL);
            ::java::util::concurrent::ExecutorService result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::util::concurrent::ThreadFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newCachedThreadPool(a0));
              return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "newCachedThreadPool", args);
        return NULL;
      }

      static PyObject *t_Executors_newFixedThreadPool(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            jint a0;
            ::java::util::concurrent::ExecutorService result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newFixedThreadPool(a0));
              return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
            }
          }
          break;
         case 2:
          {
            jint a0;
            ::java::util::concurrent::ThreadFactory a1((jobject) NULL);
            ::java::util::concurrent::ExecutorService result((jobject) NULL);

            if (!parseArgs(args, "Ik", ::java::util::concurrent::ThreadFactory::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newFixedThreadPool(a0, a1));
              return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "newFixedThreadPool", args);
        return NULL;
      }

      static PyObject *t_Executors_newScheduledThreadPool(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            jint a0;
            ::java::util::concurrent::ScheduledExecutorService result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newScheduledThreadPool(a0));
              return ::java::util::concurrent::t_ScheduledExecutorService::wrap_Object(result);
            }
          }
          break;
         case 2:
          {
            jint a0;
            ::java::util::concurrent::ThreadFactory a1((jobject) NULL);
            ::java::util::concurrent::ScheduledExecutorService result((jobject) NULL);

            if (!parseArgs(args, "Ik", ::java::util::concurrent::ThreadFactory::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newScheduledThreadPool(a0, a1));
              return ::java::util::concurrent::t_ScheduledExecutorService::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "newScheduledThreadPool", args);
        return NULL;
      }

      static PyObject *t_Executors_newSingleThreadExecutor(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            ::java::util::concurrent::ExecutorService result((jobject) NULL);
            OBJ_CALL(result = ::java::util::concurrent::Executors::newSingleThreadExecutor());
            return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
          }
          break;
         case 1:
          {
            ::java::util::concurrent::ThreadFactory a0((jobject) NULL);
            ::java::util::concurrent::ExecutorService result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::util::concurrent::ThreadFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newSingleThreadExecutor(a0));
              return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "newSingleThreadExecutor", args);
        return NULL;
      }

      static PyObject *t_Executors_newSingleThreadScheduledExecutor(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            ::java::util::concurrent::ScheduledExecutorService result((jobject) NULL);
            OBJ_CALL(result = ::java::util::concurrent::Executors::newSingleThreadScheduledExecutor());
            return ::java::util::concurrent::t_ScheduledExecutorService::wrap_Object(result);
          }
          break;
         case 1:
          {
            ::java::util::concurrent::ThreadFactory a0((jobject) NULL);
            ::java::util::concurrent::ScheduledExecutorService result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::util::concurrent::ThreadFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newSingleThreadScheduledExecutor(a0));
              return ::java::util::concurrent::t_ScheduledExecutorService::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "newSingleThreadScheduledExecutor", args);
        return NULL;
      }

      static PyObject *t_Executors_privilegedCallable(PyTypeObject *type, PyObject *arg)
      {
        ::java::util::concurrent::Callable a0((jobject) NULL);
        PyTypeObject **p0;
        ::java::util::concurrent::Callable result((jobject) NULL);

        if (!parseArg(arg, "K", ::java::util::concurrent::Callable::initializeClass, &a0, &p0, ::java::util::concurrent::t_Callable::parameters_))
        {
          OBJ_CALL(result = ::java::util::concurrent::Executors::privilegedCallable(a0));
          return ::java::util::concurrent::t_Callable::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "privilegedCallable", arg);
        return NULL;
      }

      static PyObject *t_Executors_privilegedCallableUsingCurrentClassLoader(PyTypeObject *type, PyObject *arg)
      {
        ::java::util::concurrent::Callable a0((jobject) NULL);
        PyTypeObject **p0;
        ::java::util::concurrent::Callable result((jobject) NULL);

        if (!parseArg(arg, "K", ::java::util::concurrent::Callable::initializeClass, &a0, &p0, ::java::util::concurrent::t_Callable::parameters_))
        {
          OBJ_CALL(result = ::java::util::concurrent::Executors::privilegedCallableUsingCurrentClassLoader(a0));
          return ::java::util::concurrent::t_Callable::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "privilegedCallableUsingCurrentClassLoader", arg);
        return NULL;
      }

      static PyObject *t_Executors_privilegedThreadFactory(PyTypeObject *type)
      {
        ::java::util::concurrent::ThreadFactory result((jobject) NULL);
        OBJ_CALL(result = ::java::util::concurrent::Executors::privilegedThreadFactory());
        return ::java::util::concurrent::t_ThreadFactory::wrap_Object(result);
      }

      static PyObject *t_Executors_unconfigurableExecutorService(PyTypeObject *type, PyObject *arg)
      {
        ::java::util::concurrent::ExecutorService a0((jobject) NULL);
        ::java::util::concurrent::ExecutorService result((jobject) NULL);

        if (!parseArg(arg, "k", ::java::util::concurrent::ExecutorService::initializeClass, &a0))
        {
          OBJ_CALL(result = ::java::util::concurrent::Executors::unconfigurableExecutorService(a0));
          return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "unconfigurableExecutorService", arg);
        return NULL;
      }

      static PyObject *t_Executors_unconfigurableScheduledExecutorService(PyTypeObject *type, PyObject *arg)
      {
        ::java::util::concurrent::ScheduledExecutorService a0((jobject) NULL);
        ::java::util::concurrent::ScheduledExecutorService result((jobject) NULL);

        if (!parseArg(arg, "k", ::java::util::concurrent::ScheduledExecutorService::initializeClass, &a0))
        {
          OBJ_CALL(result = ::java::util::concurrent::Executors::unconfigurableScheduledExecutorService(a0));
          return ::java::util::concurrent::t_ScheduledExecutorService::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "unconfigurableScheduledExecutorService", arg);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCacheRangeFilter.h"
#include "org/apache/lucene/search/FieldCache$ShortParser.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/FieldCache$ByteParser.h"
#include "java/lang/Integer.h"
#include "java/lang/Double.h"
#include "java/lang/Short.h"
#include "org/apache/lucene/search/FieldCache$FloatParser.h"
#include "org/apache/lucene/search/FieldCache$IntParser.h"
#include "java/lang/String.h"
#include "java/lang/Byte.h"
#include "java/lang/Object.h"
#include "java/lang/Long.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/FieldCache$DoubleParser.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/lang/Float.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "org/apache/lucene/search/FieldCache$LongParser.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCacheRangeFilter::class$ = NULL;
        jmethodID *FieldCacheRangeFilter::mids$ = NULL;
        bool FieldCacheRangeFilter::live$ = false;

        jclass FieldCacheRangeFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCacheRangeFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_getLowerVal_846352c3] = env->getMethodID(cls, "getLowerVal", "()Ljava/lang/Object;");
            mids$[mid_getParser_6ee4ab67] = env->getMethodID(cls, "getParser", "()Lorg/apache/lucene/search/FieldCache$Parser;");
            mids$[mid_getUpperVal_846352c3] = env->getMethodID(cls, "getUpperVal", "()Ljava/lang/Object;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_includesLower_54c6a16a] = env->getMethodID(cls, "includesLower", "()Z");
            mids$[mid_includesUpper_54c6a16a] = env->getMethodID(cls, "includesUpper", "()Z");
            mids$[mid_newByteRange_16d27fcb] = env->getStaticMethodID(cls, "newByteRange", "(Ljava/lang/String;Ljava/lang/Byte;Ljava/lang/Byte;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newByteRange_8dbc9d65] = env->getStaticMethodID(cls, "newByteRange", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$ByteParser;Ljava/lang/Byte;Ljava/lang/Byte;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newBytesRefRange_ada19313] = env->getStaticMethodID(cls, "newBytesRefRange", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newDoubleRange_1f46882f] = env->getStaticMethodID(cls, "newDoubleRange", "(Ljava/lang/String;Ljava/lang/Double;Ljava/lang/Double;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newDoubleRange_45b4662e] = env->getStaticMethodID(cls, "newDoubleRange", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$DoubleParser;Ljava/lang/Double;Ljava/lang/Double;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newFloatRange_6957c90b] = env->getStaticMethodID(cls, "newFloatRange", "(Ljava/lang/String;Ljava/lang/Float;Ljava/lang/Float;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newFloatRange_ec92e8b8] = env->getStaticMethodID(cls, "newFloatRange", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$FloatParser;Ljava/lang/Float;Ljava/lang/Float;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newIntRange_dee3e03b] = env->getStaticMethodID(cls, "newIntRange", "(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newIntRange_6952cfdf] = env->getStaticMethodID(cls, "newIntRange", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$IntParser;Ljava/lang/Integer;Ljava/lang/Integer;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newLongRange_48e495eb] = env->getStaticMethodID(cls, "newLongRange", "(Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Long;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newLongRange_51d4b8f9] = env->getStaticMethodID(cls, "newLongRange", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$LongParser;Ljava/lang/Long;Ljava/lang/Long;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newShortRange_89cd93a7] = env->getStaticMethodID(cls, "newShortRange", "(Ljava/lang/String;Ljava/lang/Short;Ljava/lang/Short;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newShortRange_d637c7bc] = env->getStaticMethodID(cls, "newShortRange", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$ShortParser;Ljava/lang/Short;Ljava/lang/Short;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newStringRange_05fb19b7] = env->getStaticMethodID(cls, "newStringRange", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean FieldCacheRangeFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet FieldCacheRangeFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::java::lang::String FieldCacheRangeFilter::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
        }

        ::java::lang::Object FieldCacheRangeFilter::getLowerVal() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getLowerVal_846352c3]));
        }

        ::org::apache::lucene::search::FieldCache$Parser FieldCacheRangeFilter::getParser() const
        {
          return ::org::apache::lucene::search::FieldCache$Parser(env->callObjectMethod(this$, mids$[mid_getParser_6ee4ab67]));
        }

        ::java::lang::Object FieldCacheRangeFilter::getUpperVal() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getUpperVal_846352c3]));
        }

        jint FieldCacheRangeFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean FieldCacheRangeFilter::includesLower() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesLower_54c6a16a]);
        }

        jboolean FieldCacheRangeFilter::includesUpper() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesUpper_54c6a16a]);
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newByteRange(const ::java::lang::String & a0, const ::java::lang::Byte & a1, const ::java::lang::Byte & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newByteRange_16d27fcb], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newByteRange(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$ByteParser & a1, const ::java::lang::Byte & a2, const ::java::lang::Byte & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newByteRange_8dbc9d65], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newBytesRefRange(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::util::BytesRef & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newBytesRefRange_ada19313], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newDoubleRange(const ::java::lang::String & a0, const ::java::lang::Double & a1, const ::java::lang::Double & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newDoubleRange_1f46882f], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newDoubleRange(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$DoubleParser & a1, const ::java::lang::Double & a2, const ::java::lang::Double & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newDoubleRange_45b4662e], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newFloatRange(const ::java::lang::String & a0, const ::java::lang::Float & a1, const ::java::lang::Float & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newFloatRange_6957c90b], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newFloatRange(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$FloatParser & a1, const ::java::lang::Float & a2, const ::java::lang::Float & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newFloatRange_ec92e8b8], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newIntRange(const ::java::lang::String & a0, const ::java::lang::Integer & a1, const ::java::lang::Integer & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newIntRange_dee3e03b], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newIntRange(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$IntParser & a1, const ::java::lang::Integer & a2, const ::java::lang::Integer & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newIntRange_6952cfdf], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newLongRange(const ::java::lang::String & a0, const ::java::lang::Long & a1, const ::java::lang::Long & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newLongRange_48e495eb], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newLongRange(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$LongParser & a1, const ::java::lang::Long & a2, const ::java::lang::Long & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newLongRange_51d4b8f9], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newShortRange(const ::java::lang::String & a0, const ::java::lang::Short & a1, const ::java::lang::Short & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newShortRange_89cd93a7], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newShortRange(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$ShortParser & a1, const ::java::lang::Short & a2, const ::java::lang::Short & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newShortRange_d637c7bc], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newStringRange(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newStringRange_05fb19b7], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        ::java::lang::String FieldCacheRangeFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCacheRangeFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheRangeFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheRangeFilter_of_(t_FieldCacheRangeFilter *self, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_equals(t_FieldCacheRangeFilter *self, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_getDocIdSet(t_FieldCacheRangeFilter *self, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_getField(t_FieldCacheRangeFilter *self);
        static PyObject *t_FieldCacheRangeFilter_getLowerVal(t_FieldCacheRangeFilter *self);
        static PyObject *t_FieldCacheRangeFilter_getParser(t_FieldCacheRangeFilter *self);
        static PyObject *t_FieldCacheRangeFilter_getUpperVal(t_FieldCacheRangeFilter *self);
        static PyObject *t_FieldCacheRangeFilter_hashCode(t_FieldCacheRangeFilter *self, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_includesLower(t_FieldCacheRangeFilter *self);
        static PyObject *t_FieldCacheRangeFilter_includesUpper(t_FieldCacheRangeFilter *self);
        static PyObject *t_FieldCacheRangeFilter_newByteRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_newBytesRefRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_newDoubleRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_newFloatRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_newIntRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_newLongRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_newShortRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_newStringRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_toString(t_FieldCacheRangeFilter *self, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_get__field(t_FieldCacheRangeFilter *self, void *data);
        static PyObject *t_FieldCacheRangeFilter_get__lowerVal(t_FieldCacheRangeFilter *self, void *data);
        static PyObject *t_FieldCacheRangeFilter_get__parser(t_FieldCacheRangeFilter *self, void *data);
        static PyObject *t_FieldCacheRangeFilter_get__upperVal(t_FieldCacheRangeFilter *self, void *data);
        static PyObject *t_FieldCacheRangeFilter_get__parameters_(t_FieldCacheRangeFilter *self, void *data);
        static PyGetSetDef t_FieldCacheRangeFilter__fields_[] = {
          DECLARE_GET_FIELD(t_FieldCacheRangeFilter, field),
          DECLARE_GET_FIELD(t_FieldCacheRangeFilter, lowerVal),
          DECLARE_GET_FIELD(t_FieldCacheRangeFilter, parser),
          DECLARE_GET_FIELD(t_FieldCacheRangeFilter, upperVal),
          DECLARE_GET_FIELD(t_FieldCacheRangeFilter, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldCacheRangeFilter__methods_[] = {
          DECLARE_METHOD(t_FieldCacheRangeFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, getField, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, getLowerVal, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, getParser, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, getUpperVal, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, includesLower, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, includesUpper, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newByteRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newBytesRefRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newDoubleRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newFloatRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newIntRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newLongRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newShortRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newStringRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheRangeFilter, t_FieldCacheRangeFilter, ::org::apache::lucene::search::Filter, FieldCacheRangeFilter, abstract_init, 0, 0, t_FieldCacheRangeFilter__fields_, 0, 0);
        PyObject *t_FieldCacheRangeFilter::wrap_Object(const FieldCacheRangeFilter& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldCacheRangeFilter::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldCacheRangeFilter *self = (t_FieldCacheRangeFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldCacheRangeFilter::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldCacheRangeFilter::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldCacheRangeFilter *self = (t_FieldCacheRangeFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldCacheRangeFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheRangeFilter), module, "FieldCacheRangeFilter", 0);
        }

        void t_FieldCacheRangeFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheRangeFilter).tp_dict, "class_", make_descriptor(FieldCacheRangeFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheRangeFilter).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheRangeFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheRangeFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCacheRangeFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheRangeFilter::initializeClass, 1)))
            return NULL;
          return t_FieldCacheRangeFilter::wrap_Object(FieldCacheRangeFilter(((t_FieldCacheRangeFilter *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheRangeFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheRangeFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCacheRangeFilter_of_(t_FieldCacheRangeFilter *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldCacheRangeFilter_equals(t_FieldCacheRangeFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FieldCacheRangeFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FieldCacheRangeFilter_getDocIdSet(t_FieldCacheRangeFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldCacheRangeFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_FieldCacheRangeFilter_getField(t_FieldCacheRangeFilter *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_FieldCacheRangeFilter_getLowerVal(t_FieldCacheRangeFilter *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getLowerVal());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_FieldCacheRangeFilter_getParser(t_FieldCacheRangeFilter *self)
        {
          ::org::apache::lucene::search::FieldCache$Parser result((jobject) NULL);
          OBJ_CALL(result = self->object.getParser());
          return ::org::apache::lucene::search::t_FieldCache$Parser::wrap_Object(result);
        }

        static PyObject *t_FieldCacheRangeFilter_getUpperVal(t_FieldCacheRangeFilter *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getUpperVal());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_FieldCacheRangeFilter_hashCode(t_FieldCacheRangeFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldCacheRangeFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FieldCacheRangeFilter_includesLower(t_FieldCacheRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesLower());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldCacheRangeFilter_includesUpper(t_FieldCacheRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesUpper());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldCacheRangeFilter_newByteRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Byte a1((jobject) NULL);
              ::java::lang::Byte a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Byte), &::java::lang::PY_TYPE(Byte), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newByteRange(a0, a1, a2, a3, a4));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Byte));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$ByteParser a1((jobject) NULL);
              ::java::lang::Byte a2((jobject) NULL);
              ::java::lang::Byte a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "skOOZZ", ::org::apache::lucene::search::FieldCache$ByteParser::initializeClass, &::java::lang::PY_TYPE(Byte), &::java::lang::PY_TYPE(Byte), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newByteRange(a0, a1, a2, a3, a4, a5));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Byte));
              }
            }
          }

          PyErr_SetArgsError(type, "newByteRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_newBytesRefRange(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          FieldCacheRangeFilter result((jobject) NULL);

          if (!parseArgs(args, "skkZZ", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newBytesRefRange(a0, a1, a2, a3, a4));
            return t_FieldCacheRangeFilter::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          PyErr_SetArgsError(type, "newBytesRefRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_newDoubleRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Double a1((jobject) NULL);
              ::java::lang::Double a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Double), &::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newDoubleRange(a0, a1, a2, a3, a4));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Double));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$DoubleParser a1((jobject) NULL);
              ::java::lang::Double a2((jobject) NULL);
              ::java::lang::Double a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "skOOZZ", ::org::apache::lucene::search::FieldCache$DoubleParser::initializeClass, &::java::lang::PY_TYPE(Double), &::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newDoubleRange(a0, a1, a2, a3, a4, a5));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Double));
              }
            }
          }

          PyErr_SetArgsError(type, "newDoubleRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_newFloatRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Float a1((jobject) NULL);
              ::java::lang::Float a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Float), &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newFloatRange(a0, a1, a2, a3, a4));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Float));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$FloatParser a1((jobject) NULL);
              ::java::lang::Float a2((jobject) NULL);
              ::java::lang::Float a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "skOOZZ", ::org::apache::lucene::search::FieldCache$FloatParser::initializeClass, &::java::lang::PY_TYPE(Float), &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newFloatRange(a0, a1, a2, a3, a4, a5));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Float));
              }
            }
          }

          PyErr_SetArgsError(type, "newFloatRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_newIntRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Integer a1((jobject) NULL);
              ::java::lang::Integer a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Integer), &::java::lang::PY_TYPE(Integer), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newIntRange(a0, a1, a2, a3, a4));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$IntParser a1((jobject) NULL);
              ::java::lang::Integer a2((jobject) NULL);
              ::java::lang::Integer a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "skOOZZ", ::org::apache::lucene::search::FieldCache$IntParser::initializeClass, &::java::lang::PY_TYPE(Integer), &::java::lang::PY_TYPE(Integer), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newIntRange(a0, a1, a2, a3, a4, a5));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
              }
            }
          }

          PyErr_SetArgsError(type, "newIntRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_newLongRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Long a1((jobject) NULL);
              ::java::lang::Long a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newLongRange(a0, a1, a2, a3, a4));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Long));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$LongParser a1((jobject) NULL);
              ::java::lang::Long a2((jobject) NULL);
              ::java::lang::Long a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "skOOZZ", ::org::apache::lucene::search::FieldCache$LongParser::initializeClass, &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newLongRange(a0, a1, a2, a3, a4, a5));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Long));
              }
            }
          }

          PyErr_SetArgsError(type, "newLongRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_newShortRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Short a1((jobject) NULL);
              ::java::lang::Short a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Short), &::java::lang::PY_TYPE(Short), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newShortRange(a0, a1, a2, a3, a4));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Short));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$ShortParser a1((jobject) NULL);
              ::java::lang::Short a2((jobject) NULL);
              ::java::lang::Short a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "skOOZZ", ::org::apache::lucene::search::FieldCache$ShortParser::initializeClass, &::java::lang::PY_TYPE(Short), &::java::lang::PY_TYPE(Short), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newShortRange(a0, a1, a2, a3, a4, a5));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Short));
              }
            }
          }

          PyErr_SetArgsError(type, "newShortRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_newStringRange(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          FieldCacheRangeFilter result((jobject) NULL);

          if (!parseArgs(args, "sssZZ", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newStringRange(a0, a1, a2, a3, a4));
            return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          PyErr_SetArgsError(type, "newStringRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_toString(t_FieldCacheRangeFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldCacheRangeFilter), (PyObject *) self, "toString", args, 2);
        }
        static PyObject *t_FieldCacheRangeFilter_get__parameters_(t_FieldCacheRangeFilter *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_FieldCacheRangeFilter_get__field(t_FieldCacheRangeFilter *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }

        static PyObject *t_FieldCacheRangeFilter_get__lowerVal(t_FieldCacheRangeFilter *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getLowerVal());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_FieldCacheRangeFilter_get__parser(t_FieldCacheRangeFilter *self, void *data)
        {
          ::org::apache::lucene::search::FieldCache$Parser value((jobject) NULL);
          OBJ_CALL(value = self->object.getParser());
          return ::org::apache::lucene::search::t_FieldCache$Parser::wrap_Object(value);
        }

        static PyObject *t_FieldCacheRangeFilter_get__upperVal(t_FieldCacheRangeFilter *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getUpperVal());
          return ::java::lang::t_Object::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharArrayMap$EntryIterator.h"
#include "java/util/Map$Entry.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharArrayMap$EntryIterator::class$ = NULL;
          jmethodID *CharArrayMap$EntryIterator::mids$ = NULL;
          bool CharArrayMap$EntryIterator::live$ = false;

          jclass CharArrayMap$EntryIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharArrayMap$EntryIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_currentValue_846352c3] = env->getMethodID(cls, "currentValue", "()Ljava/lang/Object;");
              mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
              mids$[mid_next_2971780b] = env->getMethodID(cls, "next", "()Ljava/util/Map$Entry;");
              mids$[mid_nextKey_dab10e7f] = env->getMethodID(cls, "nextKey", "()[C");
              mids$[mid_nextKeyString_14c7b5c5] = env->getMethodID(cls, "nextKeyString", "()Ljava/lang/String;");
              mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");
              mids$[mid_setValue_a932a95f] = env->getMethodID(cls, "setValue", "(Ljava/lang/Object;)Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Object CharArrayMap$EntryIterator::currentValue() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_currentValue_846352c3]));
          }

          jboolean CharArrayMap$EntryIterator::hasNext() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasNext_54c6a16a]);
          }

          ::java::util::Map$Entry CharArrayMap$EntryIterator::next() const
          {
            return ::java::util::Map$Entry(env->callObjectMethod(this$, mids$[mid_next_2971780b]));
          }

          JArray< jchar > CharArrayMap$EntryIterator::nextKey() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_nextKey_dab10e7f]));
          }

          ::java::lang::String CharArrayMap$EntryIterator::nextKeyString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_nextKeyString_14c7b5c5]));
          }

          void CharArrayMap$EntryIterator::remove() const
          {
            env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
          }

          ::java::lang::Object CharArrayMap$EntryIterator::setValue(const ::java::lang::Object & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_setValue_a932a95f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharArrayMap$EntryIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMap$EntryIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMap$EntryIterator_of_(t_CharArrayMap$EntryIterator *self, PyObject *args);
          static PyObject *t_CharArrayMap$EntryIterator_currentValue(t_CharArrayMap$EntryIterator *self);
          static PyObject *t_CharArrayMap$EntryIterator_hasNext(t_CharArrayMap$EntryIterator *self);
          static PyObject *t_CharArrayMap$EntryIterator_next(t_CharArrayMap$EntryIterator *self);
          static PyObject *t_CharArrayMap$EntryIterator_nextKey(t_CharArrayMap$EntryIterator *self);
          static PyObject *t_CharArrayMap$EntryIterator_nextKeyString(t_CharArrayMap$EntryIterator *self);
          static PyObject *t_CharArrayMap$EntryIterator_remove(t_CharArrayMap$EntryIterator *self);
          static PyObject *t_CharArrayMap$EntryIterator_setValue(t_CharArrayMap$EntryIterator *self, PyObject *arg);
          static int t_CharArrayMap$EntryIterator_set__value(t_CharArrayMap$EntryIterator *self, PyObject *arg, void *data);
          static PyObject *t_CharArrayMap$EntryIterator_get__parameters_(t_CharArrayMap$EntryIterator *self, void *data);
          static PyGetSetDef t_CharArrayMap$EntryIterator__fields_[] = {
            DECLARE_SET_FIELD(t_CharArrayMap$EntryIterator, value),
            DECLARE_GET_FIELD(t_CharArrayMap$EntryIterator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharArrayMap$EntryIterator__methods_[] = {
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, of_, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, currentValue, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, hasNext, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, next, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, nextKey, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, nextKeyString, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, remove, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, setValue, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharArrayMap$EntryIterator, t_CharArrayMap$EntryIterator, ::java::lang::Object, CharArrayMap$EntryIterator, abstract_init, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Iterator *)) get_generic_iterator_next< ::java::util::t_Iterator,::java::util::t_Map$Entry >), t_CharArrayMap$EntryIterator__fields_, 0, 0);
          PyObject *t_CharArrayMap$EntryIterator::wrap_Object(const CharArrayMap$EntryIterator& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArrayMap$EntryIterator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArrayMap$EntryIterator *self = (t_CharArrayMap$EntryIterator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CharArrayMap$EntryIterator::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArrayMap$EntryIterator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArrayMap$EntryIterator *self = (t_CharArrayMap$EntryIterator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CharArrayMap$EntryIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(CharArrayMap$EntryIterator), module, "CharArrayMap$EntryIterator", 0);
          }

          void t_CharArrayMap$EntryIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharArrayMap$EntryIterator).tp_dict, "class_", make_descriptor(CharArrayMap$EntryIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharArrayMap$EntryIterator).tp_dict, "wrapfn_", make_descriptor(t_CharArrayMap$EntryIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharArrayMap$EntryIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharArrayMap$EntryIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharArrayMap$EntryIterator::initializeClass, 1)))
              return NULL;
            return t_CharArrayMap$EntryIterator::wrap_Object(CharArrayMap$EntryIterator(((t_CharArrayMap$EntryIterator *) arg)->object.this$));
          }
          static PyObject *t_CharArrayMap$EntryIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharArrayMap$EntryIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharArrayMap$EntryIterator_of_(t_CharArrayMap$EntryIterator *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_CharArrayMap$EntryIterator_currentValue(t_CharArrayMap$EntryIterator *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.currentValue());
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_CharArrayMap$EntryIterator_hasNext(t_CharArrayMap$EntryIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasNext());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_CharArrayMap$EntryIterator_next(t_CharArrayMap$EntryIterator *self)
          {
            ::java::util::Map$Entry result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::java::util::t_Map$Entry::wrap_Object(result, &::java::lang::PY_TYPE(Object), self->parameters[0]);
          }

          static PyObject *t_CharArrayMap$EntryIterator_nextKey(t_CharArrayMap$EntryIterator *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.nextKey());
            return result.wrap();
          }

          static PyObject *t_CharArrayMap$EntryIterator_nextKeyString(t_CharArrayMap$EntryIterator *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.nextKeyString());
            return j2p(result);
          }

          static PyObject *t_CharArrayMap$EntryIterator_remove(t_CharArrayMap$EntryIterator *self)
          {
            OBJ_CALL(self->object.remove());
            Py_RETURN_NONE;
          }

          static PyObject *t_CharArrayMap$EntryIterator_setValue(t_CharArrayMap$EntryIterator *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "o", &a0))
            {
              OBJ_CALL(result = self->object.setValue(a0));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setValue", arg);
            return NULL;
          }
          static PyObject *t_CharArrayMap$EntryIterator_get__parameters_(t_CharArrayMap$EntryIterator *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_CharArrayMap$EntryIterator_set__value(t_CharArrayMap$EntryIterator *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::Object value((jobject) NULL);
              if (!parseArg(arg, "o", &value))
              {
                INT_CALL(self->object.setValue(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/HyphenationTree.h"
#include "java/io/PrintStream.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/compound/hyphenation/PatternConsumer.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/compound/hyphenation/Hyphenation.h"
#include "java/io/File.h"
#include "java/util/ArrayList.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *HyphenationTree::class$ = NULL;
            jmethodID *HyphenationTree::mids$ = NULL;
            bool HyphenationTree::live$ = false;

            jclass HyphenationTree::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/HyphenationTree");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_addClass_5fdc3f48] = env->getMethodID(cls, "addClass", "(Ljava/lang/String;)V");
                mids$[mid_addException_069f7243] = env->getMethodID(cls, "addException", "(Ljava/lang/String;Ljava/util/ArrayList;)V");
                mids$[mid_addPattern_4a264742] = env->getMethodID(cls, "addPattern", "(Ljava/lang/String;Ljava/lang/String;)V");
                mids$[mid_findPattern_97a5258f] = env->getMethodID(cls, "findPattern", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_hyphenate_b8db7bec] = env->getMethodID(cls, "hyphenate", "(Ljava/lang/String;II)Lorg/apache/lucene/analysis/compound/hyphenation/Hyphenation;");
                mids$[mid_hyphenate_bc347fb6] = env->getMethodID(cls, "hyphenate", "([CIIII)Lorg/apache/lucene/analysis/compound/hyphenation/Hyphenation;");
                mids$[mid_loadPatterns_c3dacf57] = env->getMethodID(cls, "loadPatterns", "(Ljava/io/File;)V");
                mids$[mid_printStats_1b7c898b] = env->getMethodID(cls, "printStats", "(Ljava/io/PrintStream;)V");
                mids$[mid_getValues_b4292e98] = env->getMethodID(cls, "getValues", "(I)[B");
                mids$[mid_packValues_5fdc3f57] = env->getMethodID(cls, "packValues", "(Ljava/lang/String;)I");
                mids$[mid_unpackValues_141401b3] = env->getMethodID(cls, "unpackValues", "(I)Ljava/lang/String;");
                mids$[mid_hstrcmp_aa5dc2ed] = env->getMethodID(cls, "hstrcmp", "([CI[CI)I");
                mids$[mid_searchPatterns_fa7f9f9d] = env->getMethodID(cls, "searchPatterns", "([CI[B)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            HyphenationTree::HyphenationTree() : ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            void HyphenationTree::addClass(const ::java::lang::String & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addClass_5fdc3f48], a0.this$);
            }

            void HyphenationTree::addException(const ::java::lang::String & a0, const ::java::util::ArrayList & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addException_069f7243], a0.this$, a1.this$);
            }

            void HyphenationTree::addPattern(const ::java::lang::String & a0, const ::java::lang::String & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addPattern_4a264742], a0.this$, a1.this$);
            }

            ::java::lang::String HyphenationTree::findPattern(const ::java::lang::String & a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_findPattern_97a5258f], a0.this$));
            }

            ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation HyphenationTree::hyphenate(const ::java::lang::String & a0, jint a1, jint a2) const
            {
              return ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation(env->callObjectMethod(this$, mids$[mid_hyphenate_b8db7bec], a0.this$, a1, a2));
            }

            ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation HyphenationTree::hyphenate(const JArray< jchar > & a0, jint a1, jint a2, jint a3, jint a4) const
            {
              return ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation(env->callObjectMethod(this$, mids$[mid_hyphenate_bc347fb6], a0.this$, a1, a2, a3, a4));
            }

            void HyphenationTree::loadPatterns(const ::java::io::File & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_loadPatterns_c3dacf57], a0.this$);
            }

            void HyphenationTree::printStats(const ::java::io::PrintStream & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_printStats_1b7c898b], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_HyphenationTree_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_HyphenationTree_instance_(PyTypeObject *type, PyObject *arg);
            static int t_HyphenationTree_init_(t_HyphenationTree *self, PyObject *args, PyObject *kwds);
            static PyObject *t_HyphenationTree_addClass(t_HyphenationTree *self, PyObject *arg);
            static PyObject *t_HyphenationTree_addException(t_HyphenationTree *self, PyObject *args);
            static PyObject *t_HyphenationTree_addPattern(t_HyphenationTree *self, PyObject *args);
            static PyObject *t_HyphenationTree_findPattern(t_HyphenationTree *self, PyObject *arg);
            static PyObject *t_HyphenationTree_hyphenate(t_HyphenationTree *self, PyObject *args);
            static PyObject *t_HyphenationTree_loadPatterns(t_HyphenationTree *self, PyObject *arg);
            static PyObject *t_HyphenationTree_printStats(t_HyphenationTree *self, PyObject *args);

            static PyMethodDef t_HyphenationTree__methods_[] = {
              DECLARE_METHOD(t_HyphenationTree, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_HyphenationTree, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_HyphenationTree, addClass, METH_O),
              DECLARE_METHOD(t_HyphenationTree, addException, METH_VARARGS),
              DECLARE_METHOD(t_HyphenationTree, addPattern, METH_VARARGS),
              DECLARE_METHOD(t_HyphenationTree, findPattern, METH_O),
              DECLARE_METHOD(t_HyphenationTree, hyphenate, METH_VARARGS),
              DECLARE_METHOD(t_HyphenationTree, loadPatterns, METH_O),
              DECLARE_METHOD(t_HyphenationTree, printStats, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(HyphenationTree, t_HyphenationTree, ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree, HyphenationTree, t_HyphenationTree_init_, 0, 0, 0, 0, 0);

            void t_HyphenationTree::install(PyObject *module)
            {
              installType(&PY_TYPE(HyphenationTree), module, "HyphenationTree", 0);
            }

            void t_HyphenationTree::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(HyphenationTree).tp_dict, "class_", make_descriptor(HyphenationTree::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(HyphenationTree).tp_dict, "wrapfn_", make_descriptor(t_HyphenationTree::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(HyphenationTree).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_HyphenationTree_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, HyphenationTree::initializeClass, 1)))
                return NULL;
              return t_HyphenationTree::wrap_Object(HyphenationTree(((t_HyphenationTree *) arg)->object.this$));
            }
            static PyObject *t_HyphenationTree_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, HyphenationTree::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_HyphenationTree_init_(t_HyphenationTree *self, PyObject *args, PyObject *kwds)
            {
              HyphenationTree object((jobject) NULL);

              INT_CALL(object = HyphenationTree());
              self->object = object;

              return 0;
            }

            static PyObject *t_HyphenationTree_addClass(t_HyphenationTree *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(self->object.addClass(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addClass", arg);
              return NULL;
            }

            static PyObject *t_HyphenationTree_addException(t_HyphenationTree *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::ArrayList a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "sK", ::java::util::ArrayList::initializeClass, &a0, &a1, &p1, ::java::util::t_ArrayList::parameters_))
              {
                OBJ_CALL(self->object.addException(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addException", args);
              return NULL;
            }

            static PyObject *t_HyphenationTree_addPattern(t_HyphenationTree *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(self->object.addPattern(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addPattern", args);
              return NULL;
            }

            static PyObject *t_HyphenationTree_findPattern(t_HyphenationTree *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.findPattern(a0));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "findPattern", arg);
              return NULL;
            }

            static PyObject *t_HyphenationTree_hyphenate(t_HyphenationTree *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  ::java::lang::String a0((jobject) NULL);
                  jint a1;
                  jint a2;
                  ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation result((jobject) NULL);

                  if (!parseArgs(args, "sII", &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = self->object.hyphenate(a0, a1, a2));
                    return ::org::apache::lucene::analysis::compound::hyphenation::t_Hyphenation::wrap_Object(result);
                  }
                }
                break;
               case 5:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  jint a2;
                  jint a3;
                  jint a4;
                  ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation result((jobject) NULL);

                  if (!parseArgs(args, "[CIIII", &a0, &a1, &a2, &a3, &a4))
                  {
                    OBJ_CALL(result = self->object.hyphenate(a0, a1, a2, a3, a4));
                    return ::org::apache::lucene::analysis::compound::hyphenation::t_Hyphenation::wrap_Object(result);
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "hyphenate", args);
              return NULL;
            }

            static PyObject *t_HyphenationTree_loadPatterns(t_HyphenationTree *self, PyObject *arg)
            {
              ::java::io::File a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::File::initializeClass, &a0))
              {
                OBJ_CALL(self->object.loadPatterns(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "loadPatterns", arg);
              return NULL;
            }

            static PyObject *t_HyphenationTree_printStats(t_HyphenationTree *self, PyObject *args)
            {
              ::java::io::PrintStream a0((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::PrintStream::initializeClass, &a0))
              {
                OBJ_CALL(self->object.printStats(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(HyphenationTree), (PyObject *) self, "printStats", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Gener.h"
#include "org/egothor/stemmer/Trie.h"
#include "org/egothor/stemmer/Row.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Gener::class$ = NULL;
      jmethodID *Gener::mids$ = NULL;
      bool Gener::live$ = false;

      jclass Gener::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Gener");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_eat_9f3e69e2] = env->getMethodID(cls, "eat", "(Lorg/egothor/stemmer/Row;[I)Z");
          mids$[mid_optimize_c26c0475] = env->getMethodID(cls, "optimize", "(Lorg/egothor/stemmer/Trie;)Lorg/egothor/stemmer/Trie;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Gener::Gener() : ::org::egothor::stemmer::Reduce(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      jboolean Gener::eat(const ::org::egothor::stemmer::Row & a0, const JArray< jint > & a1) const
      {
        return env->callBooleanMethod(this$, mids$[mid_eat_9f3e69e2], a0.this$, a1.this$);
      }

      ::org::egothor::stemmer::Trie Gener::optimize(const ::org::egothor::stemmer::Trie & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_optimize_c26c0475], a0.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Gener_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Gener_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Gener_init_(t_Gener *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Gener_eat(t_Gener *self, PyObject *args);
      static PyObject *t_Gener_optimize(t_Gener *self, PyObject *args);

      static PyMethodDef t_Gener__methods_[] = {
        DECLARE_METHOD(t_Gener, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Gener, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Gener, eat, METH_VARARGS),
        DECLARE_METHOD(t_Gener, optimize, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Gener, t_Gener, ::org::egothor::stemmer::Reduce, Gener, t_Gener_init_, 0, 0, 0, 0, 0);

      void t_Gener::install(PyObject *module)
      {
        installType(&PY_TYPE(Gener), module, "Gener", 0);
      }

      void t_Gener::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Gener).tp_dict, "class_", make_descriptor(Gener::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Gener).tp_dict, "wrapfn_", make_descriptor(t_Gener::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Gener).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Gener_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Gener::initializeClass, 1)))
          return NULL;
        return t_Gener::wrap_Object(Gener(((t_Gener *) arg)->object.this$));
      }
      static PyObject *t_Gener_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Gener::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Gener_init_(t_Gener *self, PyObject *args, PyObject *kwds)
      {
        Gener object((jobject) NULL);

        INT_CALL(object = Gener());
        self->object = object;

        return 0;
      }

      static PyObject *t_Gener_eat(t_Gener *self, PyObject *args)
      {
        ::org::egothor::stemmer::Row a0((jobject) NULL);
        JArray< jint > a1((jobject) NULL);
        jboolean result;

        if (!parseArgs(args, "k[I", ::org::egothor::stemmer::Row::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.eat(a0, a1));
          Py_RETURN_BOOL(result);
        }

        PyErr_SetArgsError((PyObject *) self, "eat", args);
        return NULL;
      }

      static PyObject *t_Gener_optimize(t_Gener *self, PyObject *args)
      {
        ::org::egothor::stemmer::Trie a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArgs(args, "k", ::org::egothor::stemmer::Trie::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.optimize(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(Gener), (PyObject *) self, "optimize", args, 2);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanMinimalStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanMinimalStemFilter::class$ = NULL;
          jmethodID *GermanMinimalStemFilter::mids$ = NULL;
          bool GermanMinimalStemFilter::live$ = false;

          jclass GermanMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanMinimalStemFilter::GermanMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean GermanMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanMinimalStemFilter_init_(t_GermanMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanMinimalStemFilter_incrementToken(t_GermanMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_GermanMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_GermanMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanMinimalStemFilter, t_GermanMinimalStemFilter, ::org::apache::lucene::analysis::TokenFilter, GermanMinimalStemFilter, t_GermanMinimalStemFilter_init_, 0, 0, 0, 0, 0);

          void t_GermanMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanMinimalStemFilter), module, "GermanMinimalStemFilter", 0);
          }

          void t_GermanMinimalStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemFilter).tp_dict, "class_", make_descriptor(GermanMinimalStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemFilter).tp_dict, "wrapfn_", make_descriptor(t_GermanMinimalStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_GermanMinimalStemFilter::wrap_Object(GermanMinimalStemFilter(((t_GermanMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GermanMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanMinimalStemFilter_init_(t_GermanMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GermanMinimalStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GermanMinimalStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanMinimalStemFilter_incrementToken(t_GermanMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GermanMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/NumericRangeFilterBuilder.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *NumericRangeFilterBuilder::class$ = NULL;
            jmethodID *NumericRangeFilterBuilder::mids$ = NULL;
            bool NumericRangeFilterBuilder::live$ = false;

            jclass NumericRangeFilterBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/NumericRangeFilterBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_setStrictMode_bb0c767f] = env->getMethodID(cls, "setStrictMode", "(Z)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            NumericRangeFilterBuilder::NumericRangeFilterBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            void NumericRangeFilterBuilder::setStrictMode(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setStrictMode_bb0c767f], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_NumericRangeFilterBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NumericRangeFilterBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_NumericRangeFilterBuilder_init_(t_NumericRangeFilterBuilder *self, PyObject *args, PyObject *kwds);
            static PyObject *t_NumericRangeFilterBuilder_setStrictMode(t_NumericRangeFilterBuilder *self, PyObject *arg);
            static int t_NumericRangeFilterBuilder_set__strictMode(t_NumericRangeFilterBuilder *self, PyObject *arg, void *data);
            static PyGetSetDef t_NumericRangeFilterBuilder__fields_[] = {
              DECLARE_SET_FIELD(t_NumericRangeFilterBuilder, strictMode),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_NumericRangeFilterBuilder__methods_[] = {
              DECLARE_METHOD(t_NumericRangeFilterBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NumericRangeFilterBuilder, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NumericRangeFilterBuilder, setStrictMode, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NumericRangeFilterBuilder, t_NumericRangeFilterBuilder, ::java::lang::Object, NumericRangeFilterBuilder, t_NumericRangeFilterBuilder_init_, 0, 0, t_NumericRangeFilterBuilder__fields_, 0, 0);

            void t_NumericRangeFilterBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(NumericRangeFilterBuilder), module, "NumericRangeFilterBuilder", 0);
            }

            void t_NumericRangeFilterBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NumericRangeFilterBuilder).tp_dict, "class_", make_descriptor(NumericRangeFilterBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NumericRangeFilterBuilder).tp_dict, "wrapfn_", make_descriptor(t_NumericRangeFilterBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NumericRangeFilterBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NumericRangeFilterBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NumericRangeFilterBuilder::initializeClass, 1)))
                return NULL;
              return t_NumericRangeFilterBuilder::wrap_Object(NumericRangeFilterBuilder(((t_NumericRangeFilterBuilder *) arg)->object.this$));
            }
            static PyObject *t_NumericRangeFilterBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NumericRangeFilterBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_NumericRangeFilterBuilder_init_(t_NumericRangeFilterBuilder *self, PyObject *args, PyObject *kwds)
            {
              NumericRangeFilterBuilder object((jobject) NULL);

              INT_CALL(object = NumericRangeFilterBuilder());
              self->object = object;

              return 0;
            }

            static PyObject *t_NumericRangeFilterBuilder_setStrictMode(t_NumericRangeFilterBuilder *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setStrictMode(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setStrictMode", arg);
              return NULL;
            }

            static int t_NumericRangeFilterBuilder_set__strictMode(t_NumericRangeFilterBuilder *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setStrictMode(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "strictMode", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/Writer.h"
#include "java/io/IOException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "java/lang/Appendable.h"
#include "java/io/Flushable.h"
#include "java/lang/String.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *Writer::class$ = NULL;
    jmethodID *Writer::mids$ = NULL;
    bool Writer::live$ = false;

    jclass Writer::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/Writer");

        mids$ = new jmethodID[max_mid];
        mids$[mid_append_368f1679] = env->getMethodID(cls, "append", "(C)Ljava/io/Writer;");
        mids$[mid_append_31d2f801] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Ljava/io/Writer;");
        mids$[mid_append_b3d4aa31] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Ljava/io/Writer;");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
        mids$[mid_write_5fdc3f48] = env->getMethodID(cls, "write", "(Ljava/lang/String;)V");
        mids$[mid_write_39c7bd3c] = env->getMethodID(cls, "write", "(I)V");
        mids$[mid_write_700e23d6] = env->getMethodID(cls, "write", "([C)V");
        mids$[mid_write_6f0bb356] = env->getMethodID(cls, "write", "([CII)V");
        mids$[mid_write_555f322c] = env->getMethodID(cls, "write", "(Ljava/lang/String;II)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Writer Writer::append(jchar a0) const
    {
      return Writer(env->callObjectMethod(this$, mids$[mid_append_368f1679], a0));
    }

    Writer Writer::append(const ::java::lang::CharSequence & a0) const
    {
      return Writer(env->callObjectMethod(this$, mids$[mid_append_31d2f801], a0.this$));
    }

    Writer Writer::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
    {
      return Writer(env->callObjectMethod(this$, mids$[mid_append_b3d4aa31], a0.this$, a1, a2));
    }

    void Writer::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    void Writer::flush() const
    {
      env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
    }

    void Writer::write(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_5fdc3f48], a0.this$);
    }

    void Writer::write(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_39c7bd3c], a0);
    }

    void Writer::write(const JArray< jchar > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_700e23d6], a0.this$);
    }

    void Writer::write(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_6f0bb356], a0.this$, a1, a2);
    }

    void Writer::write(const ::java::lang::String & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_555f322c], a0.this$, a1, a2);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_Writer_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Writer_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Writer_append(t_Writer *self, PyObject *args);
    static PyObject *t_Writer_close(t_Writer *self);
    static PyObject *t_Writer_flush(t_Writer *self);
    static PyObject *t_Writer_write(t_Writer *self, PyObject *args);

    static PyMethodDef t_Writer__methods_[] = {
      DECLARE_METHOD(t_Writer, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Writer, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Writer, append, METH_VARARGS),
      DECLARE_METHOD(t_Writer, close, METH_NOARGS),
      DECLARE_METHOD(t_Writer, flush, METH_NOARGS),
      DECLARE_METHOD(t_Writer, write, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Writer, t_Writer, ::java::lang::Object, Writer, abstract_init, 0, 0, 0, 0, 0);

    void t_Writer::install(PyObject *module)
    {
      installType(&PY_TYPE(Writer), module, "Writer", 0);
    }

    void t_Writer::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Writer).tp_dict, "class_", make_descriptor(Writer::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Writer).tp_dict, "wrapfn_", make_descriptor(t_Writer::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Writer).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Writer_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Writer::initializeClass, 1)))
        return NULL;
      return t_Writer::wrap_Object(Writer(((t_Writer *) arg)->object.this$));
    }
    static PyObject *t_Writer_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Writer::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Writer_append(t_Writer *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          Writer result((jobject) NULL);

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_Writer::wrap_Object(result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          Writer result((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_Writer::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint a2;
          Writer result((jobject) NULL);

          if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.append(a0, a1, a2));
            return t_Writer::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "append", args);
      return NULL;
    }

    static PyObject *t_Writer_close(t_Writer *self)
    {
      OBJ_CALL(self->object.close());
      Py_RETURN_NONE;
    }

    static PyObject *t_Writer_flush(t_Writer *self)
    {
      OBJ_CALL(self->object.flush());
      Py_RETURN_NONE;
    }

    static PyObject *t_Writer_write(t_Writer *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "sII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "write", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ScoringRewrite.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ScoringRewrite::class$ = NULL;
        jmethodID *ScoringRewrite::mids$ = NULL;
        bool ScoringRewrite::live$ = false;
        ::org::apache::lucene::search::MultiTermQuery$RewriteMethod *ScoringRewrite::CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE = NULL;
        ScoringRewrite *ScoringRewrite::SCORING_BOOLEAN_QUERY_REWRITE = NULL;

        jclass ScoringRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ScoringRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_rewrite_925c5bbc] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/Query;");
            mids$[mid_checkMaxClauseCount_39c7bd3c] = env->getMethodID(cls, "checkMaxClauseCount", "(I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE = new ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->getStaticObjectField(cls, "CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE", "Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;"));
            SCORING_BOOLEAN_QUERY_REWRITE = new ScoringRewrite(env->getStaticObjectField(cls, "SCORING_BOOLEAN_QUERY_REWRITE", "Lorg/apache/lucene/search/ScoringRewrite;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ScoringRewrite::ScoringRewrite() : ::org::apache::lucene::search::TermCollectingRewrite(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::Query ScoringRewrite::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_925c5bbc], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ScoringRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ScoringRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ScoringRewrite_of_(t_ScoringRewrite *self, PyObject *args);
        static int t_ScoringRewrite_init_(t_ScoringRewrite *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ScoringRewrite_rewrite(t_ScoringRewrite *self, PyObject *args);
        static PyObject *t_ScoringRewrite_get__parameters_(t_ScoringRewrite *self, void *data);
        static PyGetSetDef t_ScoringRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_ScoringRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ScoringRewrite__methods_[] = {
          DECLARE_METHOD(t_ScoringRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoringRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoringRewrite, of_, METH_VARARGS),
          DECLARE_METHOD(t_ScoringRewrite, rewrite, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ScoringRewrite, t_ScoringRewrite, ::org::apache::lucene::search::TermCollectingRewrite, ScoringRewrite, t_ScoringRewrite_init_, 0, 0, t_ScoringRewrite__fields_, 0, 0);
        PyObject *t_ScoringRewrite::wrap_Object(const ScoringRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ScoringRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ScoringRewrite *self = (t_ScoringRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ScoringRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ScoringRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ScoringRewrite *self = (t_ScoringRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ScoringRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(ScoringRewrite), module, "ScoringRewrite", 0);
        }

        void t_ScoringRewrite::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ScoringRewrite).tp_dict, "class_", make_descriptor(ScoringRewrite::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ScoringRewrite).tp_dict, "wrapfn_", make_descriptor(t_ScoringRewrite::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ScoringRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(ScoringRewrite::initializeClass);
          PyDict_SetItemString(PY_TYPE(ScoringRewrite).tp_dict, "CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE", make_descriptor(::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(*ScoringRewrite::CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE)));
          PyDict_SetItemString(PY_TYPE(ScoringRewrite).tp_dict, "SCORING_BOOLEAN_QUERY_REWRITE", make_descriptor(t_ScoringRewrite::wrap_Object(*ScoringRewrite::SCORING_BOOLEAN_QUERY_REWRITE)));
        }

        static PyObject *t_ScoringRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ScoringRewrite::initializeClass, 1)))
            return NULL;
          return t_ScoringRewrite::wrap_Object(ScoringRewrite(((t_ScoringRewrite *) arg)->object.this$));
        }
        static PyObject *t_ScoringRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ScoringRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ScoringRewrite_of_(t_ScoringRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ScoringRewrite_init_(t_ScoringRewrite *self, PyObject *args, PyObject *kwds)
        {
          ScoringRewrite object((jobject) NULL);

          INT_CALL(object = ScoringRewrite());
          self->object = object;

          return 0;
        }

        static PyObject *t_ScoringRewrite_rewrite(t_ScoringRewrite *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.rewrite(a0, a1));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ScoringRewrite), (PyObject *) self, "rewrite", args, 2);
        }
        static PyObject *t_ScoringRewrite_get__parameters_(t_ScoringRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/StopFilterFactory.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *StopFilterFactory::class$ = NULL;
          jmethodID *StopFilterFactory::mids$ = NULL;
          bool StopFilterFactory::live$ = false;
          ::java::lang::String *StopFilterFactory::FORMAT_SNOWBALL = NULL;
          ::java::lang::String *StopFilterFactory::FORMAT_WORDSET = NULL;

          jclass StopFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/StopFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getStopWords_d2d3505c] = env->getMethodID(cls, "getStopWords", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_isEnablePositionIncrements_54c6a16a] = env->getMethodID(cls, "isEnablePositionIncrements", "()Z");
              mids$[mid_isIgnoreCase_54c6a16a] = env->getMethodID(cls, "isIgnoreCase", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              FORMAT_SNOWBALL = new ::java::lang::String(env->getStaticObjectField(cls, "FORMAT_SNOWBALL", "Ljava/lang/String;"));
              FORMAT_WORDSET = new ::java::lang::String(env->getStaticObjectField(cls, "FORMAT_WORDSET", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StopFilterFactory::StopFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream StopFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet StopFilterFactory::getStopWords() const
          {
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callObjectMethod(this$, mids$[mid_getStopWords_d2d3505c]));
          }

          void StopFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }

          jboolean StopFilterFactory::isEnablePositionIncrements() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isEnablePositionIncrements_54c6a16a]);
          }

          jboolean StopFilterFactory::isIgnoreCase() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreCase_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_StopFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StopFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StopFilterFactory_init_(t_StopFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StopFilterFactory_create(t_StopFilterFactory *self, PyObject *args);
          static PyObject *t_StopFilterFactory_getStopWords(t_StopFilterFactory *self);
          static PyObject *t_StopFilterFactory_inform(t_StopFilterFactory *self, PyObject *arg);
          static PyObject *t_StopFilterFactory_isEnablePositionIncrements(t_StopFilterFactory *self);
          static PyObject *t_StopFilterFactory_isIgnoreCase(t_StopFilterFactory *self);
          static PyObject *t_StopFilterFactory_get__enablePositionIncrements(t_StopFilterFactory *self, void *data);
          static PyObject *t_StopFilterFactory_get__ignoreCase(t_StopFilterFactory *self, void *data);
          static PyObject *t_StopFilterFactory_get__stopWords(t_StopFilterFactory *self, void *data);
          static PyGetSetDef t_StopFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_StopFilterFactory, enablePositionIncrements),
            DECLARE_GET_FIELD(t_StopFilterFactory, ignoreCase),
            DECLARE_GET_FIELD(t_StopFilterFactory, stopWords),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StopFilterFactory__methods_[] = {
            DECLARE_METHOD(t_StopFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_StopFilterFactory, getStopWords, METH_NOARGS),
            DECLARE_METHOD(t_StopFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_StopFilterFactory, isEnablePositionIncrements, METH_NOARGS),
            DECLARE_METHOD(t_StopFilterFactory, isIgnoreCase, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StopFilterFactory, t_StopFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, StopFilterFactory, t_StopFilterFactory_init_, 0, 0, t_StopFilterFactory__fields_, 0, 0);

          void t_StopFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(StopFilterFactory), module, "StopFilterFactory", 0);
          }

          void t_StopFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StopFilterFactory).tp_dict, "class_", make_descriptor(StopFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StopFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_StopFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StopFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(StopFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(StopFilterFactory).tp_dict, "FORMAT_SNOWBALL", make_descriptor(j2p(*StopFilterFactory::FORMAT_SNOWBALL)));
            PyDict_SetItemString(PY_TYPE(StopFilterFactory).tp_dict, "FORMAT_WORDSET", make_descriptor(j2p(*StopFilterFactory::FORMAT_WORDSET)));
          }

          static PyObject *t_StopFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StopFilterFactory::initializeClass, 1)))
              return NULL;
            return t_StopFilterFactory::wrap_Object(StopFilterFactory(((t_StopFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_StopFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StopFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StopFilterFactory_init_(t_StopFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            StopFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = StopFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StopFilterFactory_create(t_StopFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StopFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_StopFilterFactory_getStopWords(t_StopFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = self->object.getStopWords());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_StopFilterFactory_inform(t_StopFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_StopFilterFactory_isEnablePositionIncrements(t_StopFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isEnablePositionIncrements());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_StopFilterFactory_isIgnoreCase(t_StopFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreCase());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_StopFilterFactory_get__enablePositionIncrements(t_StopFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isEnablePositionIncrements());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_StopFilterFactory_get__ignoreCase(t_StopFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreCase());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_StopFilterFactory_get__stopWords(t_StopFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getStopWords());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeError.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/queryparser/flexible/messages/NLSException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {

            ::java::lang::Class *QueryNodeError::class$ = NULL;
            jmethodID *QueryNodeError::mids$ = NULL;
            bool QueryNodeError::live$ = false;

            jclass QueryNodeError::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/QueryNodeError");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
                mids$[mid_init$_1dde9d59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;)V");
                mids$[mid_init$_41dcc0ed] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;Ljava/lang/Throwable;)V");
                mids$[mid_getMessageObject_1bceed44] = env->getMethodID(cls, "getMessageObject", "()Lorg/apache/lucene/queryparser/flexible/messages/Message;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryNodeError::QueryNodeError(const ::java::lang::Throwable & a0) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

            QueryNodeError::QueryNodeError(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_1dde9d59, a0.this$)) {}

            QueryNodeError::QueryNodeError(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0, const ::java::lang::Throwable & a1) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_41dcc0ed, a0.this$, a1.this$)) {}

            ::org::apache::lucene::queryparser::flexible::messages::Message QueryNodeError::getMessageObject() const
            {
              return ::org::apache::lucene::queryparser::flexible::messages::Message(env->callObjectMethod(this$, mids$[mid_getMessageObject_1bceed44]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            static PyObject *t_QueryNodeError_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryNodeError_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryNodeError_init_(t_QueryNodeError *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryNodeError_getMessageObject(t_QueryNodeError *self);
            static PyObject *t_QueryNodeError_get__messageObject(t_QueryNodeError *self, void *data);
            static PyGetSetDef t_QueryNodeError__fields_[] = {
              DECLARE_GET_FIELD(t_QueryNodeError, messageObject),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryNodeError__methods_[] = {
              DECLARE_METHOD(t_QueryNodeError, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeError, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeError, getMessageObject, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryNodeError, t_QueryNodeError, ::java::lang::Error, QueryNodeError, t_QueryNodeError_init_, 0, 0, t_QueryNodeError__fields_, 0, 0);

            void t_QueryNodeError::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryNodeError), module, "QueryNodeError", 0);
            }

            void t_QueryNodeError::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryNodeError).tp_dict, "class_", make_descriptor(QueryNodeError::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryNodeError).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeError::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryNodeError).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryNodeError_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryNodeError::initializeClass, 1)))
                return NULL;
              return t_QueryNodeError::wrap_Object(QueryNodeError(((t_QueryNodeError *) arg)->object.this$));
            }
            static PyObject *t_QueryNodeError_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryNodeError::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryNodeError_init_(t_QueryNodeError *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::Throwable a0((jobject) NULL);
                  QueryNodeError object((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeError(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  QueryNodeError object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeError(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  ::java::lang::Throwable a1((jobject) NULL);
                  QueryNodeError object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, ::java::lang::Throwable::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = QueryNodeError(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryNodeError_getMessageObject(t_QueryNodeError *self)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message result((jobject) NULL);
              OBJ_CALL(result = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(result);
            }

            static PyObject *t_QueryNodeError_get__messageObject(t_QueryNodeError *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message value((jobject) NULL);
              OBJ_CALL(value = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FieldInvertState::class$ = NULL;
        jmethodID *FieldInvertState::mids$ = NULL;
        bool FieldInvertState::live$ = false;

        jclass FieldInvertState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FieldInvertState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_9f4a1ba9] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;IIIIF)V");
            mids$[mid_getAttributeSource_f901022b] = env->getMethodID(cls, "getAttributeSource", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_getBoost_54c6a176] = env->getMethodID(cls, "getBoost", "()F");
            mids$[mid_getLength_54c6a179] = env->getMethodID(cls, "getLength", "()I");
            mids$[mid_getMaxTermFrequency_54c6a179] = env->getMethodID(cls, "getMaxTermFrequency", "()I");
            mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
            mids$[mid_getNumOverlap_54c6a179] = env->getMethodID(cls, "getNumOverlap", "()I");
            mids$[mid_getOffset_54c6a179] = env->getMethodID(cls, "getOffset", "()I");
            mids$[mid_getPosition_54c6a179] = env->getMethodID(cls, "getPosition", "()I");
            mids$[mid_getUniqueTermCount_54c6a179] = env->getMethodID(cls, "getUniqueTermCount", "()I");
            mids$[mid_setBoost_06298cab] = env->getMethodID(cls, "setBoost", "(F)V");
            mids$[mid_setLength_39c7bd3c] = env->getMethodID(cls, "setLength", "(I)V");
            mids$[mid_setNumOverlap_39c7bd3c] = env->getMethodID(cls, "setNumOverlap", "(I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldInvertState::FieldInvertState(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        FieldInvertState::FieldInvertState(const ::java::lang::String & a0, jint a1, jint a2, jint a3, jint a4, jfloat a5) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9f4a1ba9, a0.this$, a1, a2, a3, a4, a5)) {}

        ::org::apache::lucene::util::AttributeSource FieldInvertState::getAttributeSource() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_getAttributeSource_f901022b]));
        }

        jfloat FieldInvertState::getBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getBoost_54c6a176]);
        }

        jint FieldInvertState::getLength() const
        {
          return env->callIntMethod(this$, mids$[mid_getLength_54c6a179]);
        }

        jint FieldInvertState::getMaxTermFrequency() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxTermFrequency_54c6a179]);
        }

        ::java::lang::String FieldInvertState::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
        }

        jint FieldInvertState::getNumOverlap() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumOverlap_54c6a179]);
        }

        jint FieldInvertState::getOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_getOffset_54c6a179]);
        }

        jint FieldInvertState::getPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_getPosition_54c6a179]);
        }

        jint FieldInvertState::getUniqueTermCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getUniqueTermCount_54c6a179]);
        }

        void FieldInvertState::setBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBoost_06298cab], a0);
        }

        void FieldInvertState::setLength(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLength_39c7bd3c], a0);
        }

        void FieldInvertState::setNumOverlap(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNumOverlap_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FieldInvertState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInvertState_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldInvertState_init_(t_FieldInvertState *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldInvertState_getAttributeSource(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getBoost(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getLength(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getMaxTermFrequency(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getName(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getNumOverlap(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getOffset(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getPosition(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getUniqueTermCount(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_setBoost(t_FieldInvertState *self, PyObject *arg);
        static PyObject *t_FieldInvertState_setLength(t_FieldInvertState *self, PyObject *arg);
        static PyObject *t_FieldInvertState_setNumOverlap(t_FieldInvertState *self, PyObject *arg);
        static PyObject *t_FieldInvertState_get__attributeSource(t_FieldInvertState *self, void *data);
        static PyObject *t_FieldInvertState_get__boost(t_FieldInvertState *self, void *data);
        static int t_FieldInvertState_set__boost(t_FieldInvertState *self, PyObject *arg, void *data);
        static PyObject *t_FieldInvertState_get__length(t_FieldInvertState *self, void *data);
        static int t_FieldInvertState_set__length(t_FieldInvertState *self, PyObject *arg, void *data);
        static PyObject *t_FieldInvertState_get__maxTermFrequency(t_FieldInvertState *self, void *data);
        static PyObject *t_FieldInvertState_get__name(t_FieldInvertState *self, void *data);
        static PyObject *t_FieldInvertState_get__numOverlap(t_FieldInvertState *self, void *data);
        static int t_FieldInvertState_set__numOverlap(t_FieldInvertState *self, PyObject *arg, void *data);
        static PyObject *t_FieldInvertState_get__offset(t_FieldInvertState *self, void *data);
        static PyObject *t_FieldInvertState_get__position(t_FieldInvertState *self, void *data);
        static PyObject *t_FieldInvertState_get__uniqueTermCount(t_FieldInvertState *self, void *data);
        static PyGetSetDef t_FieldInvertState__fields_[] = {
          DECLARE_GET_FIELD(t_FieldInvertState, attributeSource),
          DECLARE_GETSET_FIELD(t_FieldInvertState, boost),
          DECLARE_GETSET_FIELD(t_FieldInvertState, length),
          DECLARE_GET_FIELD(t_FieldInvertState, maxTermFrequency),
          DECLARE_GET_FIELD(t_FieldInvertState, name),
          DECLARE_GETSET_FIELD(t_FieldInvertState, numOverlap),
          DECLARE_GET_FIELD(t_FieldInvertState, offset),
          DECLARE_GET_FIELD(t_FieldInvertState, position),
          DECLARE_GET_FIELD(t_FieldInvertState, uniqueTermCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldInvertState__methods_[] = {
          DECLARE_METHOD(t_FieldInvertState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInvertState, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInvertState, getAttributeSource, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getBoost, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getLength, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getMaxTermFrequency, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getName, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getNumOverlap, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getOffset, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getPosition, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getUniqueTermCount, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, setBoost, METH_O),
          DECLARE_METHOD(t_FieldInvertState, setLength, METH_O),
          DECLARE_METHOD(t_FieldInvertState, setNumOverlap, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInvertState, t_FieldInvertState, ::java::lang::Object, FieldInvertState, t_FieldInvertState_init_, 0, 0, t_FieldInvertState__fields_, 0, 0);

        void t_FieldInvertState::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInvertState), module, "FieldInvertState", 0);
        }

        void t_FieldInvertState::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInvertState).tp_dict, "class_", make_descriptor(FieldInvertState::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInvertState).tp_dict, "wrapfn_", make_descriptor(t_FieldInvertState::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInvertState).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldInvertState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInvertState::initializeClass, 1)))
            return NULL;
          return t_FieldInvertState::wrap_Object(FieldInvertState(((t_FieldInvertState *) arg)->object.this$));
        }
        static PyObject *t_FieldInvertState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInvertState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldInvertState_init_(t_FieldInvertState *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              FieldInvertState object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = FieldInvertState(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint a4;
              jfloat a5;
              FieldInvertState object((jobject) NULL);

              if (!parseArgs(args, "sIIIIF", &a0, &a1, &a2, &a3, &a4, &a5))
              {
                INT_CALL(object = FieldInvertState(a0, a1, a2, a3, a4, a5));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldInvertState_getAttributeSource(t_FieldInvertState *self)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);
          OBJ_CALL(result = self->object.getAttributeSource());
          return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
        }

        static PyObject *t_FieldInvertState_getBoost(t_FieldInvertState *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_FieldInvertState_getLength(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getLength());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_getMaxTermFrequency(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxTermFrequency());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_getName(t_FieldInvertState *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }

        static PyObject *t_FieldInvertState_getNumOverlap(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumOverlap());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_getOffset(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getOffset());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_getPosition(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPosition());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_getUniqueTermCount(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getUniqueTermCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_setBoost(t_FieldInvertState *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBoost", arg);
          return NULL;
        }

        static PyObject *t_FieldInvertState_setLength(t_FieldInvertState *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setLength(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLength", arg);
          return NULL;
        }

        static PyObject *t_FieldInvertState_setNumOverlap(t_FieldInvertState *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setNumOverlap(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setNumOverlap", arg);
          return NULL;
        }

        static PyObject *t_FieldInvertState_get__attributeSource(t_FieldInvertState *self, void *data)
        {
          ::org::apache::lucene::util::AttributeSource value((jobject) NULL);
          OBJ_CALL(value = self->object.getAttributeSource());
          return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(value);
        }

        static PyObject *t_FieldInvertState_get__boost(t_FieldInvertState *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getBoost());
          return PyFloat_FromDouble((double) value);
        }
        static int t_FieldInvertState_set__boost(t_FieldInvertState *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setBoost(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "boost", arg);
          return -1;
        }

        static PyObject *t_FieldInvertState_get__length(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getLength());
          return PyInt_FromLong((long) value);
        }
        static int t_FieldInvertState_set__length(t_FieldInvertState *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setLength(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "length", arg);
          return -1;
        }

        static PyObject *t_FieldInvertState_get__maxTermFrequency(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxTermFrequency());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FieldInvertState_get__name(t_FieldInvertState *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }

        static PyObject *t_FieldInvertState_get__numOverlap(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumOverlap());
          return PyInt_FromLong((long) value);
        }
        static int t_FieldInvertState_set__numOverlap(t_FieldInvertState *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setNumOverlap(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "numOverlap", arg);
          return -1;
        }

        static PyObject *t_FieldInvertState_get__offset(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getOffset());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FieldInvertState_get__position(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPosition());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FieldInvertState_get__uniqueTermCount(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getUniqueTermCount());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *Term::class$ = NULL;
        jmethodID *Term::mids$ = NULL;
        bool Term::live$ = false;

        jclass Term::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/Term");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_bytes_4ae19461] = env->getMethodID(cls, "bytes", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_compareTo_7eca6a9e] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/index/Term;)I");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_field_14c7b5c5] = env->getMethodID(cls, "field", "()Ljava/lang/String;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_text_14c7b5c5] = env->getMethodID(cls, "text", "()Ljava/lang/String;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toString_edfda73b] = env->getStaticMethodID(cls, "toString", "(Lorg/apache/lucene/util/BytesRef;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Term::Term(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        Term::Term(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

        Term::Term(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}

        ::org::apache::lucene::util::BytesRef Term::bytes() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_bytes_4ae19461]));
        }

        jint Term::compareTo(const Term & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_7eca6a9e], a0.this$);
        }

        jboolean Term::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::lang::String Term::field() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_field_14c7b5c5]));
        }

        jint Term::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String Term::text() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_text_14c7b5c5]));
        }

        ::java::lang::String Term::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String Term::toString(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_edfda73b], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_Term_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Term_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Term_init_(t_Term *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Term_bytes(t_Term *self);
        static PyObject *t_Term_compareTo(t_Term *self, PyObject *arg);
        static PyObject *t_Term_equals(t_Term *self, PyObject *args);
        static PyObject *t_Term_field(t_Term *self);
        static PyObject *t_Term_hashCode(t_Term *self, PyObject *args);
        static PyObject *t_Term_text(t_Term *self);
        static PyObject *t_Term_toString(t_Term *self, PyObject *args);
        static PyObject *t_Term_toString_(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_Term__methods_[] = {
          DECLARE_METHOD(t_Term, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Term, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Term, bytes, METH_NOARGS),
          DECLARE_METHOD(t_Term, compareTo, METH_O),
          DECLARE_METHOD(t_Term, equals, METH_VARARGS),
          DECLARE_METHOD(t_Term, field, METH_NOARGS),
          DECLARE_METHOD(t_Term, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_Term, text, METH_NOARGS),
          DECLARE_METHOD(t_Term, toString, METH_VARARGS),
          DECLARE_METHOD(t_Term, toString_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Term, t_Term, ::java::lang::Object, Term, t_Term_init_, 0, 0, 0, 0, 0);

        void t_Term::install(PyObject *module)
        {
          installType(&PY_TYPE(Term), module, "Term", 0);
        }

        void t_Term::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Term).tp_dict, "class_", make_descriptor(Term::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Term).tp_dict, "wrapfn_", make_descriptor(t_Term::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Term).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Term_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Term::initializeClass, 1)))
            return NULL;
          return t_Term::wrap_Object(Term(((t_Term *) arg)->object.this$));
        }
        static PyObject *t_Term_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Term::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Term_init_(t_Term *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              Term object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = Term(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              Term object((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                INT_CALL(object = Term(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              Term object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = Term(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Term_bytes(t_Term *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.bytes());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_Term_compareTo(t_Term *self, PyObject *arg)
        {
          Term a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_Term_equals(t_Term *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(Term), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Term_field(t_Term *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.field());
          return j2p(result);
        }

        static PyObject *t_Term_hashCode(t_Term *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(Term), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Term_text(t_Term *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.text());
          return j2p(result);
        }

        static PyObject *t_Term_toString(t_Term *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(Term), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Term_toString_(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::Term::toString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "toString_", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sinks/TokenRangeSinkFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {

          ::java::lang::Class *TokenRangeSinkFilter::class$ = NULL;
          jmethodID *TokenRangeSinkFilter::mids$ = NULL;
          bool TokenRangeSinkFilter::live$ = false;

          jclass TokenRangeSinkFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sinks/TokenRangeSinkFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_accept_aea2d6e6] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/AttributeSource;)Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenRangeSinkFilter::TokenRangeSinkFilter(jint a0, jint a1) : ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

          jboolean TokenRangeSinkFilter::accept(const ::org::apache::lucene::util::AttributeSource & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_aea2d6e6], a0.this$);
          }

          void TokenRangeSinkFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {
          static PyObject *t_TokenRangeSinkFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenRangeSinkFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenRangeSinkFilter_init_(t_TokenRangeSinkFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenRangeSinkFilter_accept(t_TokenRangeSinkFilter *self, PyObject *args);
          static PyObject *t_TokenRangeSinkFilter_reset(t_TokenRangeSinkFilter *self, PyObject *args);

          static PyMethodDef t_TokenRangeSinkFilter__methods_[] = {
            DECLARE_METHOD(t_TokenRangeSinkFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenRangeSinkFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenRangeSinkFilter, accept, METH_VARARGS),
            DECLARE_METHOD(t_TokenRangeSinkFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenRangeSinkFilter, t_TokenRangeSinkFilter, ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter, TokenRangeSinkFilter, t_TokenRangeSinkFilter_init_, 0, 0, 0, 0, 0);

          void t_TokenRangeSinkFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenRangeSinkFilter), module, "TokenRangeSinkFilter", 0);
          }

          void t_TokenRangeSinkFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenRangeSinkFilter).tp_dict, "class_", make_descriptor(TokenRangeSinkFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenRangeSinkFilter).tp_dict, "wrapfn_", make_descriptor(t_TokenRangeSinkFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenRangeSinkFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenRangeSinkFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenRangeSinkFilter::initializeClass, 1)))
              return NULL;
            return t_TokenRangeSinkFilter::wrap_Object(TokenRangeSinkFilter(((t_TokenRangeSinkFilter *) arg)->object.this$));
          }
          static PyObject *t_TokenRangeSinkFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenRangeSinkFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenRangeSinkFilter_init_(t_TokenRangeSinkFilter *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            TokenRangeSinkFilter object((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              INT_CALL(object = TokenRangeSinkFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenRangeSinkFilter_accept(t_TokenRangeSinkFilter *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeSource a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeSource::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.accept(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TokenRangeSinkFilter), (PyObject *) self, "accept", args, 2);
          }

          static PyObject *t_TokenRangeSinkFilter_reset(t_TokenRangeSinkFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(TokenRangeSinkFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/MultiFacets.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "java/lang/Number.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *MultiFacets::class$ = NULL;
        jmethodID *MultiFacets::mids$ = NULL;
        bool MultiFacets::live$ = false;

        jclass MultiFacets::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/MultiFacets");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
            mids$[mid_init$_5c6c1e1e] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;Lorg/apache/lucene/facet/Facets;)V");
            mids$[mid_getAllDims_cdc2a528] = env->getMethodID(cls, "getAllDims", "(I)Ljava/util/List;");
            mids$[mid_getSpecificValue_8ecbcac9] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
            mids$[mid_getTopChildren_37e8c044] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiFacets::MultiFacets(const ::java::util::Map & a0) : ::org::apache::lucene::facet::Facets(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

        MultiFacets::MultiFacets(const ::java::util::Map & a0, const ::org::apache::lucene::facet::Facets & a1) : ::org::apache::lucene::facet::Facets(env->newObject(initializeClass, &mids$, mid_init$_5c6c1e1e, a0.this$, a1.this$)) {}

        ::java::util::List MultiFacets::getAllDims(jint a0) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getAllDims_cdc2a528], a0));
        }

        ::java::lang::Number MultiFacets::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_8ecbcac9], a0.this$, a1.this$));
        }

        ::org::apache::lucene::facet::FacetResult MultiFacets::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
        {
          return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_37e8c044], a0, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_MultiFacets_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiFacets_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiFacets_init_(t_MultiFacets *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiFacets_getAllDims(t_MultiFacets *self, PyObject *args);
        static PyObject *t_MultiFacets_getSpecificValue(t_MultiFacets *self, PyObject *args);
        static PyObject *t_MultiFacets_getTopChildren(t_MultiFacets *self, PyObject *args);

        static PyMethodDef t_MultiFacets__methods_[] = {
          DECLARE_METHOD(t_MultiFacets, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFacets, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFacets, getAllDims, METH_VARARGS),
          DECLARE_METHOD(t_MultiFacets, getSpecificValue, METH_VARARGS),
          DECLARE_METHOD(t_MultiFacets, getTopChildren, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiFacets, t_MultiFacets, ::org::apache::lucene::facet::Facets, MultiFacets, t_MultiFacets_init_, 0, 0, 0, 0, 0);

        void t_MultiFacets::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiFacets), module, "MultiFacets", 0);
        }

        void t_MultiFacets::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiFacets).tp_dict, "class_", make_descriptor(MultiFacets::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiFacets).tp_dict, "wrapfn_", make_descriptor(t_MultiFacets::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiFacets).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiFacets_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiFacets::initializeClass, 1)))
            return NULL;
          return t_MultiFacets::wrap_Object(MultiFacets(((t_MultiFacets *) arg)->object.this$));
        }
        static PyObject *t_MultiFacets_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiFacets::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiFacets_init_(t_MultiFacets *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              MultiFacets object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
              {
                INT_CALL(object = MultiFacets(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::facet::Facets a1((jobject) NULL);
              MultiFacets object((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::facet::Facets::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                INT_CALL(object = MultiFacets(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiFacets_getAllDims(t_MultiFacets *self, PyObject *args)
        {
          jint a0;
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getAllDims(a0));
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetResult));
          }

          return callSuper(&PY_TYPE(MultiFacets), (PyObject *) self, "getAllDims", args, 2);
        }

        static PyObject *t_MultiFacets_getSpecificValue(t_MultiFacets *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::lang::Number result((jobject) NULL);

          if (!parseArgs(args, "s[s", &a0, &a1))
          {
            OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
            return ::java::lang::t_Number::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiFacets), (PyObject *) self, "getSpecificValue", args, 2);
        }

        static PyObject *t_MultiFacets_getTopChildren(t_MultiFacets *self, PyObject *args)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::String > a2((jobject) NULL);
          ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

          if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
            return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiFacets), (PyObject *) self, "getTopChildren", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/LetterTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *LetterTokenizer::class$ = NULL;
          jmethodID *LetterTokenizer::mids$ = NULL;
          bool LetterTokenizer::live$ = false;

          jclass LetterTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/LetterTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LetterTokenizer::LetterTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          LetterTokenizer::LetterTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_LetterTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LetterTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LetterTokenizer_init_(t_LetterTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_LetterTokenizer__methods_[] = {
            DECLARE_METHOD(t_LetterTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LetterTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LetterTokenizer, t_LetterTokenizer, ::org::apache::lucene::analysis::util::CharTokenizer, LetterTokenizer, t_LetterTokenizer_init_, 0, 0, 0, 0, 0);

          void t_LetterTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(LetterTokenizer), module, "LetterTokenizer", 0);
          }

          void t_LetterTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LetterTokenizer).tp_dict, "class_", make_descriptor(LetterTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LetterTokenizer).tp_dict, "wrapfn_", make_descriptor(t_LetterTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LetterTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LetterTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LetterTokenizer::initializeClass, 1)))
              return NULL;
            return t_LetterTokenizer::wrap_Object(LetterTokenizer(((t_LetterTokenizer *) arg)->object.this$));
          }
          static PyObject *t_LetterTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LetterTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LetterTokenizer_init_(t_LetterTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                LetterTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = LetterTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                LetterTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = LetterTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/BreakIterator.h"
#include "java/util/Locale.h"
#include "java/lang/Class.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *BreakIterator::class$ = NULL;
    jmethodID *BreakIterator::mids$ = NULL;
    bool BreakIterator::live$ = false;
    jint BreakIterator::DONE = (jint) 0;

    jclass BreakIterator::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/BreakIterator");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_current_54c6a179] = env->getMethodID(cls, "current", "()I");
        mids$[mid_first_54c6a179] = env->getMethodID(cls, "first", "()I");
        mids$[mid_following_39c7bd23] = env->getMethodID(cls, "following", "(I)I");
        mids$[mid_getAvailableLocales_59cb5b46] = env->getStaticMethodID(cls, "getAvailableLocales", "()[Ljava/util/Locale;");
        mids$[mid_getCharacterInstance_91cbbddf] = env->getStaticMethodID(cls, "getCharacterInstance", "()Ljava/text/BreakIterator;");
        mids$[mid_getCharacterInstance_09bf44ce] = env->getStaticMethodID(cls, "getCharacterInstance", "(Ljava/util/Locale;)Ljava/text/BreakIterator;");
        mids$[mid_getLineInstance_91cbbddf] = env->getStaticMethodID(cls, "getLineInstance", "()Ljava/text/BreakIterator;");
        mids$[mid_getLineInstance_09bf44ce] = env->getStaticMethodID(cls, "getLineInstance", "(Ljava/util/Locale;)Ljava/text/BreakIterator;");
        mids$[mid_getSentenceInstance_91cbbddf] = env->getStaticMethodID(cls, "getSentenceInstance", "()Ljava/text/BreakIterator;");
        mids$[mid_getSentenceInstance_09bf44ce] = env->getStaticMethodID(cls, "getSentenceInstance", "(Ljava/util/Locale;)Ljava/text/BreakIterator;");
        mids$[mid_getWordInstance_91cbbddf] = env->getStaticMethodID(cls, "getWordInstance", "()Ljava/text/BreakIterator;");
        mids$[mid_getWordInstance_09bf44ce] = env->getStaticMethodID(cls, "getWordInstance", "(Ljava/util/Locale;)Ljava/text/BreakIterator;");
        mids$[mid_isBoundary_39c7bd30] = env->getMethodID(cls, "isBoundary", "(I)Z");
        mids$[mid_last_54c6a179] = env->getMethodID(cls, "last", "()I");
        mids$[mid_next_54c6a179] = env->getMethodID(cls, "next", "()I");
        mids$[mid_next_39c7bd23] = env->getMethodID(cls, "next", "(I)I");
        mids$[mid_preceding_39c7bd23] = env->getMethodID(cls, "preceding", "(I)I");
        mids$[mid_previous_54c6a179] = env->getMethodID(cls, "previous", "()I");
        mids$[mid_setText_5fdc3f48] = env->getMethodID(cls, "setText", "(Ljava/lang/String;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        DONE = env->getStaticIntField(cls, "DONE");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::lang::Object BreakIterator::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jint BreakIterator::current() const
    {
      return env->callIntMethod(this$, mids$[mid_current_54c6a179]);
    }

    jint BreakIterator::first() const
    {
      return env->callIntMethod(this$, mids$[mid_first_54c6a179]);
    }

    jint BreakIterator::following(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_following_39c7bd23], a0);
    }

    JArray< ::java::util::Locale > BreakIterator::getAvailableLocales()
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::util::Locale >(env->callStaticObjectMethod(cls, mids$[mid_getAvailableLocales_59cb5b46]));
    }

    BreakIterator BreakIterator::getCharacterInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getCharacterInstance_91cbbddf]));
    }

    BreakIterator BreakIterator::getCharacterInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getCharacterInstance_09bf44ce], a0.this$));
    }

    BreakIterator BreakIterator::getLineInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getLineInstance_91cbbddf]));
    }

    BreakIterator BreakIterator::getLineInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getLineInstance_09bf44ce], a0.this$));
    }

    BreakIterator BreakIterator::getSentenceInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getSentenceInstance_91cbbddf]));
    }

    BreakIterator BreakIterator::getSentenceInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getSentenceInstance_09bf44ce], a0.this$));
    }

    BreakIterator BreakIterator::getWordInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getWordInstance_91cbbddf]));
    }

    BreakIterator BreakIterator::getWordInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getWordInstance_09bf44ce], a0.this$));
    }

    jboolean BreakIterator::isBoundary(jint a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_isBoundary_39c7bd30], a0);
    }

    jint BreakIterator::last() const
    {
      return env->callIntMethod(this$, mids$[mid_last_54c6a179]);
    }

    jint BreakIterator::next() const
    {
      return env->callIntMethod(this$, mids$[mid_next_54c6a179]);
    }

    jint BreakIterator::next(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_next_39c7bd23], a0);
    }

    jint BreakIterator::preceding(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_preceding_39c7bd23], a0);
    }

    jint BreakIterator::previous() const
    {
      return env->callIntMethod(this$, mids$[mid_previous_54c6a179]);
    }

    void BreakIterator::setText(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setText_5fdc3f48], a0.this$);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_BreakIterator_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_BreakIterator_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_BreakIterator_clone(t_BreakIterator *self);
    static PyObject *t_BreakIterator_current(t_BreakIterator *self);
    static PyObject *t_BreakIterator_first(t_BreakIterator *self);
    static PyObject *t_BreakIterator_following(t_BreakIterator *self, PyObject *arg);
    static PyObject *t_BreakIterator_getAvailableLocales(PyTypeObject *type);
    static PyObject *t_BreakIterator_getCharacterInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_BreakIterator_getLineInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_BreakIterator_getSentenceInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_BreakIterator_getWordInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_BreakIterator_isBoundary(t_BreakIterator *self, PyObject *arg);
    static PyObject *t_BreakIterator_last(t_BreakIterator *self);
    static PyObject *t_BreakIterator_next(t_BreakIterator *self, PyObject *args);
    static PyObject *t_BreakIterator_preceding(t_BreakIterator *self, PyObject *arg);
    static PyObject *t_BreakIterator_previous(t_BreakIterator *self);
    static PyObject *t_BreakIterator_setText(t_BreakIterator *self, PyObject *arg);
    static PyObject *t_BreakIterator_get__availableLocales(t_BreakIterator *self, void *data);
    static PyObject *t_BreakIterator_get__characterInstance(t_BreakIterator *self, void *data);
    static PyObject *t_BreakIterator_get__lineInstance(t_BreakIterator *self, void *data);
    static PyObject *t_BreakIterator_get__sentenceInstance(t_BreakIterator *self, void *data);
    static int t_BreakIterator_set__text(t_BreakIterator *self, PyObject *arg, void *data);
    static PyObject *t_BreakIterator_get__wordInstance(t_BreakIterator *self, void *data);
    static PyGetSetDef t_BreakIterator__fields_[] = {
      DECLARE_GET_FIELD(t_BreakIterator, availableLocales),
      DECLARE_GET_FIELD(t_BreakIterator, characterInstance),
      DECLARE_GET_FIELD(t_BreakIterator, lineInstance),
      DECLARE_GET_FIELD(t_BreakIterator, sentenceInstance),
      DECLARE_SET_FIELD(t_BreakIterator, text),
      DECLARE_GET_FIELD(t_BreakIterator, wordInstance),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_BreakIterator__methods_[] = {
      DECLARE_METHOD(t_BreakIterator, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, clone, METH_NOARGS),
      DECLARE_METHOD(t_BreakIterator, current, METH_NOARGS),
      DECLARE_METHOD(t_BreakIterator, first, METH_NOARGS),
      DECLARE_METHOD(t_BreakIterator, following, METH_O),
      DECLARE_METHOD(t_BreakIterator, getAvailableLocales, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, getCharacterInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, getLineInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, getSentenceInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, getWordInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, isBoundary, METH_O),
      DECLARE_METHOD(t_BreakIterator, last, METH_NOARGS),
      DECLARE_METHOD(t_BreakIterator, next, METH_VARARGS),
      DECLARE_METHOD(t_BreakIterator, preceding, METH_O),
      DECLARE_METHOD(t_BreakIterator, previous, METH_NOARGS),
      DECLARE_METHOD(t_BreakIterator, setText, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(BreakIterator, t_BreakIterator, ::java::lang::Object, BreakIterator, abstract_init, 0, 0, t_BreakIterator__fields_, 0, 0);

    void t_BreakIterator::install(PyObject *module)
    {
      installType(&PY_TYPE(BreakIterator), module, "BreakIterator", 0);
    }

    void t_BreakIterator::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(BreakIterator).tp_dict, "class_", make_descriptor(BreakIterator::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(BreakIterator).tp_dict, "wrapfn_", make_descriptor(t_BreakIterator::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(BreakIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
      env->getClass(BreakIterator::initializeClass);
      PyDict_SetItemString(PY_TYPE(BreakIterator).tp_dict, "DONE", make_descriptor(BreakIterator::DONE));
    }

    static PyObject *t_BreakIterator_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, BreakIterator::initializeClass, 1)))
        return NULL;
      return t_BreakIterator::wrap_Object(BreakIterator(((t_BreakIterator *) arg)->object.this$));
    }
    static PyObject *t_BreakIterator_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, BreakIterator::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_BreakIterator_clone(t_BreakIterator *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_BreakIterator_current(t_BreakIterator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.current());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_BreakIterator_first(t_BreakIterator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.first());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_BreakIterator_following(t_BreakIterator *self, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.following(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "following", arg);
      return NULL;
    }

    static PyObject *t_BreakIterator_getAvailableLocales(PyTypeObject *type)
    {
      JArray< ::java::util::Locale > result((jobject) NULL);
      OBJ_CALL(result = ::java::text::BreakIterator::getAvailableLocales());
      return JArray<jobject>(result.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_BreakIterator_getCharacterInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          BreakIterator result((jobject) NULL);
          OBJ_CALL(result = ::java::text::BreakIterator::getCharacterInstance());
          return t_BreakIterator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          BreakIterator result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::BreakIterator::getCharacterInstance(a0));
            return t_BreakIterator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getCharacterInstance", args);
      return NULL;
    }

    static PyObject *t_BreakIterator_getLineInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          BreakIterator result((jobject) NULL);
          OBJ_CALL(result = ::java::text::BreakIterator::getLineInstance());
          return t_BreakIterator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          BreakIterator result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::BreakIterator::getLineInstance(a0));
            return t_BreakIterator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getLineInstance", args);
      return NULL;
    }

    static PyObject *t_BreakIterator_getSentenceInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          BreakIterator result((jobject) NULL);
          OBJ_CALL(result = ::java::text::BreakIterator::getSentenceInstance());
          return t_BreakIterator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          BreakIterator result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::BreakIterator::getSentenceInstance(a0));
            return t_BreakIterator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getSentenceInstance", args);
      return NULL;
    }

    static PyObject *t_BreakIterator_getWordInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          BreakIterator result((jobject) NULL);
          OBJ_CALL(result = ::java::text::BreakIterator::getWordInstance());
          return t_BreakIterator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          BreakIterator result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::BreakIterator::getWordInstance(a0));
            return t_BreakIterator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getWordInstance", args);
      return NULL;
    }

    static PyObject *t_BreakIterator_isBoundary(t_BreakIterator *self, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.isBoundary(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "isBoundary", arg);
      return NULL;
    }

    static PyObject *t_BreakIterator_last(t_BreakIterator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.last());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_BreakIterator_next(t_BreakIterator *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.next());
          return PyInt_FromLong((long) result);
        }
        break;
       case 1:
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.next(a0));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "next", args);
      return NULL;
    }

    static PyObject *t_BreakIterator_preceding(t_BreakIterator *self, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.preceding(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "preceding", arg);
      return NULL;
    }

    static PyObject *t_BreakIterator_previous(t_BreakIterator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.previous());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_BreakIterator_setText(t_BreakIterator *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setText(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setText", arg);
      return NULL;
    }

    static PyObject *t_BreakIterator_get__availableLocales(t_BreakIterator *self, void *data)
    {
      JArray< ::java::util::Locale > value((jobject) NULL);
      OBJ_CALL(value = self->object.getAvailableLocales());
      return JArray<jobject>(value.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_BreakIterator_get__characterInstance(t_BreakIterator *self, void *data)
    {
      BreakIterator value((jobject) NULL);
      OBJ_CALL(value = self->object.getCharacterInstance());
      return t_BreakIterator::wrap_Object(value);
    }

    static PyObject *t_BreakIterator_get__lineInstance(t_BreakIterator *self, void *data)
    {
      BreakIterator value((jobject) NULL);
      OBJ_CALL(value = self->object.getLineInstance());
      return t_BreakIterator::wrap_Object(value);
    }

    static PyObject *t_BreakIterator_get__sentenceInstance(t_BreakIterator *self, void *data)
    {
      BreakIterator value((jobject) NULL);
      OBJ_CALL(value = self->object.getSentenceInstance());
      return t_BreakIterator::wrap_Object(value);
    }

    static int t_BreakIterator_set__text(t_BreakIterator *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setText(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "text", arg);
      return -1;
    }

    static PyObject *t_BreakIterator_get__wordInstance(t_BreakIterator *self, void *data)
    {
      BreakIterator value((jobject) NULL);
      OBJ_CALL(value = self->object.getWordInstance());
      return t_BreakIterator::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sinks/DateRecognizerSinkFilter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "java/text/DateFormat.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {

          ::java::lang::Class *DateRecognizerSinkFilter::class$ = NULL;
          jmethodID *DateRecognizerSinkFilter::mids$ = NULL;
          bool DateRecognizerSinkFilter::live$ = false;
          ::java::lang::String *DateRecognizerSinkFilter::DATE_TYPE = NULL;

          jclass DateRecognizerSinkFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sinks/DateRecognizerSinkFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_0105dadb] = env->getMethodID(cls, "<init>", "(Ljava/text/DateFormat;)V");
              mids$[mid_accept_aea2d6e6] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/AttributeSource;)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DATE_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "DATE_TYPE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DateRecognizerSinkFilter::DateRecognizerSinkFilter() : ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          DateRecognizerSinkFilter::DateRecognizerSinkFilter(const ::java::text::DateFormat & a0) : ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter(env->newObject(initializeClass, &mids$, mid_init$_0105dadb, a0.this$)) {}

          jboolean DateRecognizerSinkFilter::accept(const ::org::apache::lucene::util::AttributeSource & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_aea2d6e6], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {
          static PyObject *t_DateRecognizerSinkFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DateRecognizerSinkFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DateRecognizerSinkFilter_init_(t_DateRecognizerSinkFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DateRecognizerSinkFilter_accept(t_DateRecognizerSinkFilter *self, PyObject *args);

          static PyMethodDef t_DateRecognizerSinkFilter__methods_[] = {
            DECLARE_METHOD(t_DateRecognizerSinkFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DateRecognizerSinkFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DateRecognizerSinkFilter, accept, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DateRecognizerSinkFilter, t_DateRecognizerSinkFilter, ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter, DateRecognizerSinkFilter, t_DateRecognizerSinkFilter_init_, 0, 0, 0, 0, 0);

          void t_DateRecognizerSinkFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(DateRecognizerSinkFilter), module, "DateRecognizerSinkFilter", 0);
          }

          void t_DateRecognizerSinkFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DateRecognizerSinkFilter).tp_dict, "class_", make_descriptor(DateRecognizerSinkFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DateRecognizerSinkFilter).tp_dict, "wrapfn_", make_descriptor(t_DateRecognizerSinkFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DateRecognizerSinkFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DateRecognizerSinkFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(DateRecognizerSinkFilter).tp_dict, "DATE_TYPE", make_descriptor(j2p(*DateRecognizerSinkFilter::DATE_TYPE)));
          }

          static PyObject *t_DateRecognizerSinkFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DateRecognizerSinkFilter::initializeClass, 1)))
              return NULL;
            return t_DateRecognizerSinkFilter::wrap_Object(DateRecognizerSinkFilter(((t_DateRecognizerSinkFilter *) arg)->object.this$));
          }
          static PyObject *t_DateRecognizerSinkFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DateRecognizerSinkFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DateRecognizerSinkFilter_init_(t_DateRecognizerSinkFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                DateRecognizerSinkFilter object((jobject) NULL);

                INT_CALL(object = DateRecognizerSinkFilter());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::text::DateFormat a0((jobject) NULL);
                DateRecognizerSinkFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::text::DateFormat::initializeClass, &a0))
                {
                  INT_CALL(object = DateRecognizerSinkFilter(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DateRecognizerSinkFilter_accept(t_DateRecognizerSinkFilter *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeSource a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeSource::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.accept(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(DateRecognizerSinkFilter), (PyObject *) self, "accept", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractDistinctValuesCollector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractDistinctValuesCollector::class$ = NULL;
          jmethodID *AbstractDistinctValuesCollector::mids$ = NULL;
          bool AbstractDistinctValuesCollector::live$ = false;

          jclass AbstractDistinctValuesCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractDistinctValuesCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_getGroups_87851566] = env->getMethodID(cls, "getGroups", "()Ljava/util/List;");
              mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractDistinctValuesCollector::AbstractDistinctValuesCollector() : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean AbstractDistinctValuesCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          ::java::util::List AbstractDistinctValuesCollector::getGroups() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getGroups_87851566]));
          }

          void AbstractDistinctValuesCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/grouping/AbstractDistinctValuesCollector$GroupCount.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractDistinctValuesCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractDistinctValuesCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractDistinctValuesCollector_of_(t_AbstractDistinctValuesCollector *self, PyObject *args);
          static int t_AbstractDistinctValuesCollector_init_(t_AbstractDistinctValuesCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractDistinctValuesCollector_acceptsDocsOutOfOrder(t_AbstractDistinctValuesCollector *self, PyObject *args);
          static PyObject *t_AbstractDistinctValuesCollector_getGroups(t_AbstractDistinctValuesCollector *self);
          static PyObject *t_AbstractDistinctValuesCollector_setScorer(t_AbstractDistinctValuesCollector *self, PyObject *args);
          static PyObject *t_AbstractDistinctValuesCollector_get__groups(t_AbstractDistinctValuesCollector *self, void *data);
          static int t_AbstractDistinctValuesCollector_set__scorer(t_AbstractDistinctValuesCollector *self, PyObject *arg, void *data);
          static PyObject *t_AbstractDistinctValuesCollector_get__parameters_(t_AbstractDistinctValuesCollector *self, void *data);
          static PyGetSetDef t_AbstractDistinctValuesCollector__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractDistinctValuesCollector, groups),
            DECLARE_SET_FIELD(t_AbstractDistinctValuesCollector, scorer),
            DECLARE_GET_FIELD(t_AbstractDistinctValuesCollector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractDistinctValuesCollector__methods_[] = {
            DECLARE_METHOD(t_AbstractDistinctValuesCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractDistinctValuesCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractDistinctValuesCollector, of_, METH_VARARGS),
            DECLARE_METHOD(t_AbstractDistinctValuesCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_AbstractDistinctValuesCollector, getGroups, METH_NOARGS),
            DECLARE_METHOD(t_AbstractDistinctValuesCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractDistinctValuesCollector, t_AbstractDistinctValuesCollector, ::org::apache::lucene::search::Collector, AbstractDistinctValuesCollector, t_AbstractDistinctValuesCollector_init_, 0, 0, t_AbstractDistinctValuesCollector__fields_, 0, 0);
          PyObject *t_AbstractDistinctValuesCollector::wrap_Object(const AbstractDistinctValuesCollector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractDistinctValuesCollector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractDistinctValuesCollector *self = (t_AbstractDistinctValuesCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractDistinctValuesCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractDistinctValuesCollector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractDistinctValuesCollector *self = (t_AbstractDistinctValuesCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractDistinctValuesCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractDistinctValuesCollector), module, "AbstractDistinctValuesCollector", 0);
            PyDict_SetItemString(PY_TYPE(AbstractDistinctValuesCollector).tp_dict, "GroupCount", make_descriptor(&PY_TYPE(AbstractDistinctValuesCollector$GroupCount)));
          }

          void t_AbstractDistinctValuesCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractDistinctValuesCollector).tp_dict, "class_", make_descriptor(AbstractDistinctValuesCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractDistinctValuesCollector).tp_dict, "wrapfn_", make_descriptor(t_AbstractDistinctValuesCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractDistinctValuesCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractDistinctValuesCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractDistinctValuesCollector::initializeClass, 1)))
              return NULL;
            return t_AbstractDistinctValuesCollector::wrap_Object(AbstractDistinctValuesCollector(((t_AbstractDistinctValuesCollector *) arg)->object.this$));
          }
          static PyObject *t_AbstractDistinctValuesCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractDistinctValuesCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractDistinctValuesCollector_of_(t_AbstractDistinctValuesCollector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_AbstractDistinctValuesCollector_init_(t_AbstractDistinctValuesCollector *self, PyObject *args, PyObject *kwds)
          {
            AbstractDistinctValuesCollector object((jobject) NULL);

            INT_CALL(object = AbstractDistinctValuesCollector());
            self->object = object;

            return 0;
          }

          static PyObject *t_AbstractDistinctValuesCollector_acceptsDocsOutOfOrder(t_AbstractDistinctValuesCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractDistinctValuesCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_AbstractDistinctValuesCollector_getGroups(t_AbstractDistinctValuesCollector *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getGroups());
            return ::java::util::t_List::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_AbstractDistinctValuesCollector_setScorer(t_AbstractDistinctValuesCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorer a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractDistinctValuesCollector), (PyObject *) self, "setScorer", args, 2);
          }
          static PyObject *t_AbstractDistinctValuesCollector_get__parameters_(t_AbstractDistinctValuesCollector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_AbstractDistinctValuesCollector_get__groups(t_AbstractDistinctValuesCollector *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getGroups());
            return ::java::util::t_List::wrap_Object(value);
          }

          static int t_AbstractDistinctValuesCollector_set__scorer(t_AbstractDistinctValuesCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/LockObtainFailedException.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *LockObtainFailedException::class$ = NULL;
        jmethodID *LockObtainFailedException::mids$ = NULL;
        bool LockObtainFailedException::live$ = false;

        jclass LockObtainFailedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/LockObtainFailedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LockObtainFailedException::LockObtainFailedException(const ::java::lang::String & a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        LockObtainFailedException::LockObtainFailedException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_LockObtainFailedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LockObtainFailedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LockObtainFailedException_init_(t_LockObtainFailedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_LockObtainFailedException__methods_[] = {
          DECLARE_METHOD(t_LockObtainFailedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockObtainFailedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LockObtainFailedException, t_LockObtainFailedException, ::java::io::IOException, LockObtainFailedException, t_LockObtainFailedException_init_, 0, 0, 0, 0, 0);

        void t_LockObtainFailedException::install(PyObject *module)
        {
          installType(&PY_TYPE(LockObtainFailedException), module, "LockObtainFailedException", 0);
        }

        void t_LockObtainFailedException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LockObtainFailedException).tp_dict, "class_", make_descriptor(LockObtainFailedException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LockObtainFailedException).tp_dict, "wrapfn_", make_descriptor(t_LockObtainFailedException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LockObtainFailedException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LockObtainFailedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LockObtainFailedException::initializeClass, 1)))
            return NULL;
          return t_LockObtainFailedException::wrap_Object(LockObtainFailedException(((t_LockObtainFailedException *) arg)->object.this$));
        }
        static PyObject *t_LockObtainFailedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LockObtainFailedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LockObtainFailedException_init_(t_LockObtainFailedException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              LockObtainFailedException object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = LockObtainFailedException(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Throwable a1((jobject) NULL);
              LockObtainFailedException object((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
              {
                INT_CALL(object = LockObtainFailedException(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BoostAttributeImpl.h"
#include "org/apache/lucene/search/BoostAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BoostAttributeImpl::class$ = NULL;
        jmethodID *BoostAttributeImpl::mids$ = NULL;
        bool BoostAttributeImpl::live$ = false;

        jclass BoostAttributeImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BoostAttributeImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_getBoost_54c6a176] = env->getMethodID(cls, "getBoost", "()F");
            mids$[mid_setBoost_06298cab] = env->getMethodID(cls, "setBoost", "(F)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BoostAttributeImpl::BoostAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void BoostAttributeImpl::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        void BoostAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
        }

        jfloat BoostAttributeImpl::getBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getBoost_54c6a176]);
        }

        void BoostAttributeImpl::setBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBoost_06298cab], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BoostAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BoostAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BoostAttributeImpl_init_(t_BoostAttributeImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BoostAttributeImpl_clear(t_BoostAttributeImpl *self, PyObject *args);
        static PyObject *t_BoostAttributeImpl_copyTo(t_BoostAttributeImpl *self, PyObject *args);
        static PyObject *t_BoostAttributeImpl_getBoost(t_BoostAttributeImpl *self);
        static PyObject *t_BoostAttributeImpl_setBoost(t_BoostAttributeImpl *self, PyObject *arg);
        static PyObject *t_BoostAttributeImpl_get__boost(t_BoostAttributeImpl *self, void *data);
        static int t_BoostAttributeImpl_set__boost(t_BoostAttributeImpl *self, PyObject *arg, void *data);
        static PyGetSetDef t_BoostAttributeImpl__fields_[] = {
          DECLARE_GETSET_FIELD(t_BoostAttributeImpl, boost),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BoostAttributeImpl__methods_[] = {
          DECLARE_METHOD(t_BoostAttributeImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostAttributeImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostAttributeImpl, clear, METH_VARARGS),
          DECLARE_METHOD(t_BoostAttributeImpl, copyTo, METH_VARARGS),
          DECLARE_METHOD(t_BoostAttributeImpl, getBoost, METH_NOARGS),
          DECLARE_METHOD(t_BoostAttributeImpl, setBoost, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BoostAttributeImpl, t_BoostAttributeImpl, ::org::apache::lucene::util::AttributeImpl, BoostAttributeImpl, t_BoostAttributeImpl_init_, 0, 0, t_BoostAttributeImpl__fields_, 0, 0);

        void t_BoostAttributeImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(BoostAttributeImpl), module, "BoostAttributeImpl", 0);
        }

        void t_BoostAttributeImpl::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BoostAttributeImpl).tp_dict, "class_", make_descriptor(BoostAttributeImpl::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BoostAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_BoostAttributeImpl::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BoostAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BoostAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BoostAttributeImpl::initializeClass, 1)))
            return NULL;
          return t_BoostAttributeImpl::wrap_Object(BoostAttributeImpl(((t_BoostAttributeImpl *) arg)->object.this$));
        }
        static PyObject *t_BoostAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BoostAttributeImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BoostAttributeImpl_init_(t_BoostAttributeImpl *self, PyObject *args, PyObject *kwds)
        {
          BoostAttributeImpl object((jobject) NULL);

          INT_CALL(object = BoostAttributeImpl());
          self->object = object;

          return 0;
        }

        static PyObject *t_BoostAttributeImpl_clear(t_BoostAttributeImpl *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BoostAttributeImpl), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_BoostAttributeImpl_copyTo(t_BoostAttributeImpl *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BoostAttributeImpl), (PyObject *) self, "copyTo", args, 2);
        }

        static PyObject *t_BoostAttributeImpl_getBoost(t_BoostAttributeImpl *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_BoostAttributeImpl_setBoost(t_BoostAttributeImpl *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBoost", arg);
          return NULL;
        }

        static PyObject *t_BoostAttributeImpl_get__boost(t_BoostAttributeImpl *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getBoost());
          return PyFloat_FromDouble((double) value);
        }
        static int t_BoostAttributeImpl_set__boost(t_BoostAttributeImpl *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setBoost(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "boost", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$Builder.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *StemmerOverrideFilter$Builder::class$ = NULL;
          jmethodID *StemmerOverrideFilter$Builder::mids$ = NULL;
          bool StemmerOverrideFilter$Builder::live$ = false;

          jclass StemmerOverrideFilter$Builder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$Builder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
              mids$[mid_add_db1d05a2] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Z");
              mids$[mid_build_c052cd10] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StemmerOverrideFilter$Builder::StemmerOverrideFilter$Builder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          StemmerOverrideFilter$Builder::StemmerOverrideFilter$Builder(jboolean a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

          jboolean StemmerOverrideFilter$Builder::add(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
          {
            return env->callBooleanMethod(this$, mids$[mid_add_db1d05a2], a0.this$, a1.this$);
          }

          ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap StemmerOverrideFilter$Builder::build() const
          {
            return ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap(env->callObjectMethod(this$, mids$[mid_build_c052cd10]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_StemmerOverrideFilter$Builder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerOverrideFilter$Builder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StemmerOverrideFilter$Builder_init_(t_StemmerOverrideFilter$Builder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StemmerOverrideFilter$Builder_add(t_StemmerOverrideFilter$Builder *self, PyObject *args);
          static PyObject *t_StemmerOverrideFilter$Builder_build(t_StemmerOverrideFilter$Builder *self);

          static PyMethodDef t_StemmerOverrideFilter$Builder__methods_[] = {
            DECLARE_METHOD(t_StemmerOverrideFilter$Builder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter$Builder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter$Builder, add, METH_VARARGS),
            DECLARE_METHOD(t_StemmerOverrideFilter$Builder, build, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StemmerOverrideFilter$Builder, t_StemmerOverrideFilter$Builder, ::java::lang::Object, StemmerOverrideFilter$Builder, t_StemmerOverrideFilter$Builder_init_, 0, 0, 0, 0, 0);

          void t_StemmerOverrideFilter$Builder::install(PyObject *module)
          {
            installType(&PY_TYPE(StemmerOverrideFilter$Builder), module, "StemmerOverrideFilter$Builder", 0);
          }

          void t_StemmerOverrideFilter$Builder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter$Builder).tp_dict, "class_", make_descriptor(StemmerOverrideFilter$Builder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter$Builder).tp_dict, "wrapfn_", make_descriptor(t_StemmerOverrideFilter$Builder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter$Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StemmerOverrideFilter$Builder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StemmerOverrideFilter$Builder::initializeClass, 1)))
              return NULL;
            return t_StemmerOverrideFilter$Builder::wrap_Object(StemmerOverrideFilter$Builder(((t_StemmerOverrideFilter$Builder *) arg)->object.this$));
          }
          static PyObject *t_StemmerOverrideFilter$Builder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StemmerOverrideFilter$Builder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StemmerOverrideFilter$Builder_init_(t_StemmerOverrideFilter$Builder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                StemmerOverrideFilter$Builder object((jobject) NULL);

                INT_CALL(object = StemmerOverrideFilter$Builder());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jboolean a0;
                StemmerOverrideFilter$Builder object((jobject) NULL);

                if (!parseArgs(args, "Z", &a0))
                {
                  INT_CALL(object = StemmerOverrideFilter$Builder(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StemmerOverrideFilter$Builder_add(t_StemmerOverrideFilter$Builder *self, PyObject *args)
          {
            ::java::lang::CharSequence a0((jobject) NULL);
            ::java::lang::CharSequence a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_StemmerOverrideFilter$Builder_build(t_StemmerOverrideFilter$Builder *self)
          {
            ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap result((jobject) NULL);
            OBJ_CALL(result = self->object.build());
            return ::org::apache::lucene::analysis::miscellaneous::t_StemmerOverrideFilter$StemmerOverrideMap::wrap_Object(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/MultiLevelSkipListReader.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *MultiLevelSkipListReader::class$ = NULL;
        jmethodID *MultiLevelSkipListReader::mids$ = NULL;
        bool MultiLevelSkipListReader::live$ = false;

        jclass MultiLevelSkipListReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/MultiLevelSkipListReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getDoc_54c6a179] = env->getMethodID(cls, "getDoc", "()I");
            mids$[mid_init_25d05c8f] = env->getMethodID(cls, "init", "(JI)V");
            mids$[mid_skipTo_39c7bd23] = env->getMethodID(cls, "skipTo", "(I)I");
            mids$[mid_seekChild_39c7bd3c] = env->getMethodID(cls, "seekChild", "(I)V");
            mids$[mid_setLastSkipData_39c7bd3c] = env->getMethodID(cls, "setLastSkipData", "(I)V");
            mids$[mid_readSkipData_5203bb2b] = env->getMethodID(cls, "readSkipData", "(ILorg/apache/lucene/store/IndexInput;)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void MultiLevelSkipListReader::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jint MultiLevelSkipListReader::getDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_getDoc_54c6a179]);
        }

        void MultiLevelSkipListReader::init(jlong a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_init_25d05c8f], a0, a1);
        }

        jint MultiLevelSkipListReader::skipTo(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_skipTo_39c7bd23], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_MultiLevelSkipListReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiLevelSkipListReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiLevelSkipListReader_close(t_MultiLevelSkipListReader *self);
        static PyObject *t_MultiLevelSkipListReader_getDoc(t_MultiLevelSkipListReader *self);
        static PyObject *t_MultiLevelSkipListReader_init(t_MultiLevelSkipListReader *self, PyObject *args);
        static PyObject *t_MultiLevelSkipListReader_skipTo(t_MultiLevelSkipListReader *self, PyObject *arg);
        static PyObject *t_MultiLevelSkipListReader_get__doc(t_MultiLevelSkipListReader *self, void *data);
        static PyGetSetDef t_MultiLevelSkipListReader__fields_[] = {
          DECLARE_GET_FIELD(t_MultiLevelSkipListReader, doc),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiLevelSkipListReader__methods_[] = {
          DECLARE_METHOD(t_MultiLevelSkipListReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiLevelSkipListReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiLevelSkipListReader, close, METH_NOARGS),
          DECLARE_METHOD(t_MultiLevelSkipListReader, getDoc, METH_NOARGS),
          DECLARE_METHOD(t_MultiLevelSkipListReader, init, METH_VARARGS),
          DECLARE_METHOD(t_MultiLevelSkipListReader, skipTo, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiLevelSkipListReader, t_MultiLevelSkipListReader, ::java::lang::Object, MultiLevelSkipListReader, abstract_init, 0, 0, t_MultiLevelSkipListReader__fields_, 0, 0);

        void t_MultiLevelSkipListReader::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiLevelSkipListReader), module, "MultiLevelSkipListReader", 0);
        }

        void t_MultiLevelSkipListReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiLevelSkipListReader).tp_dict, "class_", make_descriptor(MultiLevelSkipListReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiLevelSkipListReader).tp_dict, "wrapfn_", make_descriptor(t_MultiLevelSkipListReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiLevelSkipListReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiLevelSkipListReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiLevelSkipListReader::initializeClass, 1)))
            return NULL;
          return t_MultiLevelSkipListReader::wrap_Object(MultiLevelSkipListReader(((t_MultiLevelSkipListReader *) arg)->object.this$));
        }
        static PyObject *t_MultiLevelSkipListReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiLevelSkipListReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiLevelSkipListReader_close(t_MultiLevelSkipListReader *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_MultiLevelSkipListReader_getDoc(t_MultiLevelSkipListReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getDoc());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MultiLevelSkipListReader_init(t_MultiLevelSkipListReader *self, PyObject *args)
        {
          jlong a0;
          jint a1;

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(self->object.init(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "init", args);
          return NULL;
        }

        static PyObject *t_MultiLevelSkipListReader_skipTo(t_MultiLevelSkipListReader *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.skipTo(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "skipTo", arg);
          return NULL;
        }

        static PyObject *t_MultiLevelSkipListReader_get__doc(t_MultiLevelSkipListReader *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDoc());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/CatalanStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *CatalanStemmer::class$ = NULL;
        jmethodID *CatalanStemmer::mids$ = NULL;
        bool CatalanStemmer::live$ = false;

        jclass CatalanStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/CatalanStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CatalanStemmer::CatalanStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean CatalanStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint CatalanStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean CatalanStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_CatalanStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CatalanStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CatalanStemmer_init_(t_CatalanStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CatalanStemmer_equals(t_CatalanStemmer *self, PyObject *args);
        static PyObject *t_CatalanStemmer_hashCode(t_CatalanStemmer *self, PyObject *args);
        static PyObject *t_CatalanStemmer_stem(t_CatalanStemmer *self, PyObject *args);

        static PyMethodDef t_CatalanStemmer__methods_[] = {
          DECLARE_METHOD(t_CatalanStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CatalanStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CatalanStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_CatalanStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_CatalanStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CatalanStemmer, t_CatalanStemmer, ::org::tartarus::snowball::SnowballProgram, CatalanStemmer, t_CatalanStemmer_init_, 0, 0, 0, 0, 0);

        void t_CatalanStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(CatalanStemmer), module, "CatalanStemmer", 0);
        }

        void t_CatalanStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CatalanStemmer).tp_dict, "class_", make_descriptor(CatalanStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CatalanStemmer).tp_dict, "wrapfn_", make_descriptor(t_CatalanStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CatalanStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CatalanStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CatalanStemmer::initializeClass, 1)))
            return NULL;
          return t_CatalanStemmer::wrap_Object(CatalanStemmer(((t_CatalanStemmer *) arg)->object.this$));
        }
        static PyObject *t_CatalanStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CatalanStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CatalanStemmer_init_(t_CatalanStemmer *self, PyObject *args, PyObject *kwds)
        {
          CatalanStemmer object((jobject) NULL);

          INT_CALL(object = CatalanStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_CatalanStemmer_equals(t_CatalanStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CatalanStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_CatalanStemmer_hashCode(t_CatalanStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(CatalanStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_CatalanStemmer_stem(t_CatalanStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CatalanStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueStr.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueStr::class$ = NULL;
          jmethodID *MutableValueStr::mids$ = NULL;
          jfieldID *MutableValueStr::fids$ = NULL;
          bool MutableValueStr::live$ = false;

          jclass MutableValueStr::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueStr");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_290588f1] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_d590ce7c] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_290588e2] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueStr::MutableValueStr() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint MutableValueStr::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_290588f1], a0.this$);
          }

          void MutableValueStr::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d590ce7c], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueStr::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          jboolean MutableValueStr::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_290588e2], a0.this$);
          }

          jint MutableValueStr::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::Object MutableValueStr::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }

          ::org::apache::lucene::util::BytesRef MutableValueStr::_get_value() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_value]));
          }

          void MutableValueStr::_set_value(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            env->setObjectField(this$, fids$[fid_value], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueStr_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueStr_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueStr_init_(t_MutableValueStr *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueStr_compareSameType(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_copy(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_duplicate(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_equalsSameType(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_hashCode(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_toObject(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_get__value(t_MutableValueStr *self, void *data);
          static int t_MutableValueStr_set__value(t_MutableValueStr *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueStr__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueStr, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueStr__methods_[] = {
            DECLARE_METHOD(t_MutableValueStr, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueStr, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueStr, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueStr, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueStr, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueStr, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueStr, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueStr, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValueStr, t_MutableValueStr, ::org::apache::lucene::util::mutable$::MutableValue, MutableValueStr, t_MutableValueStr_init_, 0, 0, t_MutableValueStr__fields_, 0, 0);

          void t_MutableValueStr::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueStr), module, "MutableValueStr", 0);
          }

          void t_MutableValueStr::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValueStr).tp_dict, "class_", make_descriptor(MutableValueStr::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValueStr).tp_dict, "wrapfn_", make_descriptor(t_MutableValueStr::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValueStr).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueStr_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueStr::initializeClass, 1)))
              return NULL;
            return t_MutableValueStr::wrap_Object(MutableValueStr(((t_MutableValueStr *) arg)->object.this$));
          }
          static PyObject *t_MutableValueStr_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueStr::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueStr_init_(t_MutableValueStr *self, PyObject *args, PyObject *kwds)
          {
            MutableValueStr object((jobject) NULL);

            INT_CALL(object = MutableValueStr());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueStr_compareSameType(t_MutableValueStr *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueStr), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueStr_copy(t_MutableValueStr *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MutableValueStr), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueStr_duplicate(t_MutableValueStr *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueStr), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueStr_equalsSameType(t_MutableValueStr *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MutableValueStr), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueStr_hashCode(t_MutableValueStr *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueStr), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueStr_toObject(t_MutableValueStr *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueStr), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueStr_get__value(t_MutableValueStr *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_value());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
          static int t_MutableValueStr_set__value(t_MutableValueStr *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/AbstractSet.h"
#include "java/util/Collection.h"
#include "java/lang/Object.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *AbstractSet::class$ = NULL;
    jmethodID *AbstractSet::mids$ = NULL;
    bool AbstractSet::live$ = false;

    jclass AbstractSet::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/AbstractSet");

        mids$ = new jmethodID[max_mid];
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_removeAll_9bfb3701] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jboolean AbstractSet::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jint AbstractSet::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jboolean AbstractSet::removeAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_removeAll_9bfb3701], a0.this$);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_AbstractSet_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractSet_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractSet_of_(t_AbstractSet *self, PyObject *args);
    static PyObject *t_AbstractSet_equals(t_AbstractSet *self, PyObject *args);
    static PyObject *t_AbstractSet_hashCode(t_AbstractSet *self, PyObject *args);
    static PyObject *t_AbstractSet_removeAll(t_AbstractSet *self, PyObject *args);
    static PyObject *t_AbstractSet_get__parameters_(t_AbstractSet *self, void *data);
    static PyGetSetDef t_AbstractSet__fields_[] = {
      DECLARE_GET_FIELD(t_AbstractSet, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_AbstractSet__methods_[] = {
      DECLARE_METHOD(t_AbstractSet, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractSet, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractSet, of_, METH_VARARGS),
      DECLARE_METHOD(t_AbstractSet, equals, METH_VARARGS),
      DECLARE_METHOD(t_AbstractSet, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_AbstractSet, removeAll, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(AbstractSet, t_AbstractSet, ::java::util::AbstractCollection, AbstractSet, abstract_init, 0, 0, t_AbstractSet__fields_, 0, 0);
    PyObject *t_AbstractSet::wrap_Object(const AbstractSet& object, PyTypeObject *p0)
    {
      PyObject *obj = t_AbstractSet::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractSet *self = (t_AbstractSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_AbstractSet::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_AbstractSet::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractSet *self = (t_AbstractSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_AbstractSet::install(PyObject *module)
    {
      installType(&PY_TYPE(AbstractSet), module, "AbstractSet", 0);
    }

    void t_AbstractSet::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(AbstractSet).tp_dict, "class_", make_descriptor(AbstractSet::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(AbstractSet).tp_dict, "wrapfn_", make_descriptor(t_AbstractSet::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(AbstractSet).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_AbstractSet_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, AbstractSet::initializeClass, 1)))
        return NULL;
      return t_AbstractSet::wrap_Object(AbstractSet(((t_AbstractSet *) arg)->object.this$));
    }
    static PyObject *t_AbstractSet_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, AbstractSet::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_AbstractSet_of_(t_AbstractSet *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_AbstractSet_equals(t_AbstractSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(AbstractSet), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_AbstractSet_hashCode(t_AbstractSet *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(AbstractSet), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_AbstractSet_removeAll(t_AbstractSet *self, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.removeAll(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(AbstractSet), (PyObject *) self, "removeAll", args, 2);
    }
    static PyObject *t_AbstractSet_get__parameters_(t_AbstractSet *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Builder$UnCompiledNode.h"
#include "org/apache/lucene/util/fst/Builder.h"
#include "org/apache/lucene/util/fst/Builder$Arc.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Builder$UnCompiledNode::class$ = NULL;
          jmethodID *Builder$UnCompiledNode::mids$ = NULL;
          jfieldID *Builder$UnCompiledNode::fids$ = NULL;
          bool Builder$UnCompiledNode::live$ = false;

          jclass Builder$UnCompiledNode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Builder$UnCompiledNode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_343134b4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/Builder;I)V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_getLastOutput_29be6a55] = env->getMethodID(cls, "getLastOutput", "(I)Ljava/lang/Object;");
              mids$[mid_isCompiled_54c6a16a] = env->getMethodID(cls, "isCompiled", "()Z");
              mids$[mid_prependOutput_290588ee] = env->getMethodID(cls, "prependOutput", "(Ljava/lang/Object;)V");
              mids$[mid_setLastOutput_f7cd74a4] = env->getMethodID(cls, "setLastOutput", "(ILjava/lang/Object;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_arcs] = env->getFieldID(cls, "arcs", "[Lorg/apache/lucene/util/fst/Builder$Arc;");
              fids$[fid_depth] = env->getFieldID(cls, "depth", "I");
              fids$[fid_inputCount] = env->getFieldID(cls, "inputCount", "J");
              fids$[fid_isFinal] = env->getFieldID(cls, "isFinal", "Z");
              fids$[fid_numArcs] = env->getFieldID(cls, "numArcs", "I");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Builder$UnCompiledNode::Builder$UnCompiledNode(const ::org::apache::lucene::util::fst::Builder & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_343134b4, a0.this$, a1)) {}

          void Builder$UnCompiledNode::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          ::java::lang::Object Builder$UnCompiledNode::getLastOutput(jint a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getLastOutput_29be6a55], a0));
          }

          jboolean Builder$UnCompiledNode::isCompiled() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isCompiled_54c6a16a]);
          }

          void Builder$UnCompiledNode::prependOutput(const ::java::lang::Object & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_prependOutput_290588ee], a0.this$);
          }

          void Builder$UnCompiledNode::setLastOutput(jint a0, const ::java::lang::Object & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setLastOutput_f7cd74a4], a0, a1.this$);
          }

          JArray< ::org::apache::lucene::util::fst::Builder$Arc > Builder$UnCompiledNode::_get_arcs() const
          {
            return JArray< ::org::apache::lucene::util::fst::Builder$Arc >(env->getObjectField(this$, fids$[fid_arcs]));
          }

          void Builder$UnCompiledNode::_set_arcs(const JArray< ::org::apache::lucene::util::fst::Builder$Arc > & a0) const
          {
            env->setObjectField(this$, fids$[fid_arcs], a0.this$);
          }

          jint Builder$UnCompiledNode::_get_depth() const
          {
            return env->getIntField(this$, fids$[fid_depth]);
          }

          jlong Builder$UnCompiledNode::_get_inputCount() const
          {
            return env->getLongField(this$, fids$[fid_inputCount]);
          }

          void Builder$UnCompiledNode::_set_inputCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_inputCount], a0);
          }

          jboolean Builder$UnCompiledNode::_get_isFinal() const
          {
            return env->getBooleanField(this$, fids$[fid_isFinal]);
          }

          void Builder$UnCompiledNode::_set_isFinal(jboolean a0) const
          {
            env->setBooleanField(this$, fids$[fid_isFinal], a0);
          }

          jint Builder$UnCompiledNode::_get_numArcs() const
          {
            return env->getIntField(this$, fids$[fid_numArcs]);
          }

          void Builder$UnCompiledNode::_set_numArcs(jint a0) const
          {
            env->setIntField(this$, fids$[fid_numArcs], a0);
          }

          ::java::lang::Object Builder$UnCompiledNode::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }

          void Builder$UnCompiledNode::_set_output(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_output], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Builder$UnCompiledNode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder$UnCompiledNode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder$UnCompiledNode_of_(t_Builder$UnCompiledNode *self, PyObject *args);
          static int t_Builder$UnCompiledNode_init_(t_Builder$UnCompiledNode *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Builder$UnCompiledNode_clear(t_Builder$UnCompiledNode *self);
          static PyObject *t_Builder$UnCompiledNode_getLastOutput(t_Builder$UnCompiledNode *self, PyObject *arg);
          static PyObject *t_Builder$UnCompiledNode_isCompiled(t_Builder$UnCompiledNode *self);
          static PyObject *t_Builder$UnCompiledNode_prependOutput(t_Builder$UnCompiledNode *self, PyObject *arg);
          static PyObject *t_Builder$UnCompiledNode_setLastOutput(t_Builder$UnCompiledNode *self, PyObject *args);
          static PyObject *t_Builder$UnCompiledNode_get__arcs(t_Builder$UnCompiledNode *self, void *data);
          static int t_Builder$UnCompiledNode_set__arcs(t_Builder$UnCompiledNode *self, PyObject *arg, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__depth(t_Builder$UnCompiledNode *self, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__inputCount(t_Builder$UnCompiledNode *self, void *data);
          static int t_Builder$UnCompiledNode_set__inputCount(t_Builder$UnCompiledNode *self, PyObject *arg, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__isFinal(t_Builder$UnCompiledNode *self, void *data);
          static int t_Builder$UnCompiledNode_set__isFinal(t_Builder$UnCompiledNode *self, PyObject *arg, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__numArcs(t_Builder$UnCompiledNode *self, void *data);
          static int t_Builder$UnCompiledNode_set__numArcs(t_Builder$UnCompiledNode *self, PyObject *arg, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__output(t_Builder$UnCompiledNode *self, void *data);
          static int t_Builder$UnCompiledNode_set__output(t_Builder$UnCompiledNode *self, PyObject *arg, void *data);

          static PyObject *t_Builder$UnCompiledNode_get__compiled(t_Builder$UnCompiledNode *self, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__parameters_(t_Builder$UnCompiledNode *self, void *data);
          static PyGetSetDef t_Builder$UnCompiledNode__fields_[] = {
            DECLARE_GETSET_FIELD(t_Builder$UnCompiledNode, arcs),
            DECLARE_GET_FIELD(t_Builder$UnCompiledNode, depth),
            DECLARE_GETSET_FIELD(t_Builder$UnCompiledNode, inputCount),
            DECLARE_GETSET_FIELD(t_Builder$UnCompiledNode, isFinal),
            DECLARE_GETSET_FIELD(t_Builder$UnCompiledNode, numArcs),
            DECLARE_GETSET_FIELD(t_Builder$UnCompiledNode, output),
            DECLARE_GET_FIELD(t_Builder$UnCompiledNode, compiled),
            DECLARE_GET_FIELD(t_Builder$UnCompiledNode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Builder$UnCompiledNode__methods_[] = {
            DECLARE_METHOD(t_Builder$UnCompiledNode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder$UnCompiledNode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder$UnCompiledNode, of_, METH_VARARGS),
            DECLARE_METHOD(t_Builder$UnCompiledNode, clear, METH_NOARGS),
            DECLARE_METHOD(t_Builder$UnCompiledNode, getLastOutput, METH_O),
            DECLARE_METHOD(t_Builder$UnCompiledNode, isCompiled, METH_NOARGS),
            DECLARE_METHOD(t_Builder$UnCompiledNode, prependOutput, METH_O),
            DECLARE_METHOD(t_Builder$UnCompiledNode, setLastOutput, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Builder$UnCompiledNode, t_Builder$UnCompiledNode, ::java::lang::Object, Builder$UnCompiledNode, t_Builder$UnCompiledNode_init_, 0, 0, t_Builder$UnCompiledNode__fields_, 0, 0);
          PyObject *t_Builder$UnCompiledNode::wrap_Object(const Builder$UnCompiledNode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder$UnCompiledNode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder$UnCompiledNode *self = (t_Builder$UnCompiledNode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Builder$UnCompiledNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder$UnCompiledNode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder$UnCompiledNode *self = (t_Builder$UnCompiledNode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Builder$UnCompiledNode::install(PyObject *module)
          {
            installType(&PY_TYPE(Builder$UnCompiledNode), module, "Builder$UnCompiledNode", 0);
          }

          void t_Builder$UnCompiledNode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Builder$UnCompiledNode).tp_dict, "class_", make_descriptor(Builder$UnCompiledNode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Builder$UnCompiledNode).tp_dict, "wrapfn_", make_descriptor(t_Builder$UnCompiledNode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Builder$UnCompiledNode).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Builder$UnCompiledNode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Builder$UnCompiledNode::initializeClass, 1)))
              return NULL;
            return t_Builder$UnCompiledNode::wrap_Object(Builder$UnCompiledNode(((t_Builder$UnCompiledNode *) arg)->object.this$));
          }
          static PyObject *t_Builder$UnCompiledNode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Builder$UnCompiledNode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Builder$UnCompiledNode_of_(t_Builder$UnCompiledNode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Builder$UnCompiledNode_init_(t_Builder$UnCompiledNode *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::Builder a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            Builder$UnCompiledNode object((jobject) NULL);

            if (!parseArgs(args, "KI", ::org::apache::lucene::util::fst::Builder::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_Builder::parameters_, &a1))
            {
              INT_CALL(object = Builder$UnCompiledNode(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Builder$UnCompiledNode_clear(t_Builder$UnCompiledNode *self)
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          static PyObject *t_Builder$UnCompiledNode_getLastOutput(t_Builder$UnCompiledNode *self, PyObject *arg)
          {
            jint a0;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getLastOutput(a0));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getLastOutput", arg);
            return NULL;
          }

          static PyObject *t_Builder$UnCompiledNode_isCompiled(t_Builder$UnCompiledNode *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isCompiled());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Builder$UnCompiledNode_prependOutput(t_Builder$UnCompiledNode *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);

            if (!parseArg(arg, "O", self->parameters[0], &a0))
            {
              OBJ_CALL(self->object.prependOutput(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "prependOutput", arg);
            return NULL;
          }

          static PyObject *t_Builder$UnCompiledNode_setLastOutput(t_Builder$UnCompiledNode *self, PyObject *args)
          {
            jint a0;
            ::java::lang::Object a1((jobject) NULL);

            if (!parseArgs(args, "IO", self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(self->object.setLastOutput(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLastOutput", args);
            return NULL;
          }
          static PyObject *t_Builder$UnCompiledNode_get__parameters_(t_Builder$UnCompiledNode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Builder$UnCompiledNode_get__arcs(t_Builder$UnCompiledNode *self, void *data)
          {
            JArray< ::org::apache::lucene::util::fst::Builder$Arc > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_arcs());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::util::fst::t_Builder$Arc::wrap_jobject);
          }
          static int t_Builder$UnCompiledNode_set__arcs(t_Builder$UnCompiledNode *self, PyObject *arg, void *data)
          {
            JArray< ::org::apache::lucene::util::fst::Builder$Arc > value((jobject) NULL);
            if (!parseArg(arg, "[k", ::org::apache::lucene::util::fst::Builder$Arc::initializeClass, &value))
            {
              INT_CALL(self->object._set_arcs(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "arcs", arg);
            return -1;
          }

          static PyObject *t_Builder$UnCompiledNode_get__depth(t_Builder$UnCompiledNode *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_depth());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Builder$UnCompiledNode_get__inputCount(t_Builder$UnCompiledNode *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_inputCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Builder$UnCompiledNode_set__inputCount(t_Builder$UnCompiledNode *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_inputCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "inputCount", arg);
            return -1;
          }

          static PyObject *t_Builder$UnCompiledNode_get__isFinal(t_Builder$UnCompiledNode *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_isFinal());
            Py_RETURN_BOOL(value);
          }
          static int t_Builder$UnCompiledNode_set__isFinal(t_Builder$UnCompiledNode *self, PyObject *arg, void *data)
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object._set_isFinal(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "isFinal", arg);
            return -1;
          }

          static PyObject *t_Builder$UnCompiledNode_get__numArcs(t_Builder$UnCompiledNode *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_numArcs());
            return PyInt_FromLong((long) value);
          }
          static int t_Builder$UnCompiledNode_set__numArcs(t_Builder$UnCompiledNode *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_numArcs(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "numArcs", arg);
            return -1;
          }

          static PyObject *t_Builder$UnCompiledNode_get__output(t_Builder$UnCompiledNode *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_Builder$UnCompiledNode_set__output(t_Builder$UnCompiledNode *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_output(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "output", arg);
            return -1;
          }

          static PyObject *t_Builder$UnCompiledNode_get__compiled(t_Builder$UnCompiledNode *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isCompiled());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *CompiledAutomaton$AUTOMATON_TYPE::class$ = NULL;
          jmethodID *CompiledAutomaton$AUTOMATON_TYPE::mids$ = NULL;
          bool CompiledAutomaton$AUTOMATON_TYPE::live$ = false;
          CompiledAutomaton$AUTOMATON_TYPE *CompiledAutomaton$AUTOMATON_TYPE::ALL = NULL;
          CompiledAutomaton$AUTOMATON_TYPE *CompiledAutomaton$AUTOMATON_TYPE::NONE = NULL;
          CompiledAutomaton$AUTOMATON_TYPE *CompiledAutomaton$AUTOMATON_TYPE::NORMAL = NULL;
          CompiledAutomaton$AUTOMATON_TYPE *CompiledAutomaton$AUTOMATON_TYPE::PREFIX$ = NULL;
          CompiledAutomaton$AUTOMATON_TYPE *CompiledAutomaton$AUTOMATON_TYPE::SINGLE = NULL;

          jclass CompiledAutomaton$AUTOMATON_TYPE::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_9a95b48c] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;");
              mids$[mid_values_9a1b8d3a] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ALL = new CompiledAutomaton$AUTOMATON_TYPE(env->getStaticObjectField(cls, "ALL", "Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;"));
              NONE = new CompiledAutomaton$AUTOMATON_TYPE(env->getStaticObjectField(cls, "NONE", "Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;"));
              NORMAL = new CompiledAutomaton$AUTOMATON_TYPE(env->getStaticObjectField(cls, "NORMAL", "Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;"));
              PREFIX$ = new CompiledAutomaton$AUTOMATON_TYPE(env->getStaticObjectField(cls, "PREFIX", "Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;"));
              SINGLE = new CompiledAutomaton$AUTOMATON_TYPE(env->getStaticObjectField(cls, "SINGLE", "Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompiledAutomaton$AUTOMATON_TYPE CompiledAutomaton$AUTOMATON_TYPE::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return CompiledAutomaton$AUTOMATON_TYPE(env->callStaticObjectMethod(cls, mids$[mid_valueOf_9a95b48c], a0.this$));
          }

          JArray< CompiledAutomaton$AUTOMATON_TYPE > CompiledAutomaton$AUTOMATON_TYPE::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< CompiledAutomaton$AUTOMATON_TYPE >(env->callStaticObjectMethod(cls, mids$[mid_values_9a1b8d3a]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_of_(t_CompiledAutomaton$AUTOMATON_TYPE *self, PyObject *args);
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_values(PyTypeObject *type);
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_get__parameters_(t_CompiledAutomaton$AUTOMATON_TYPE *self, void *data);
          static PyGetSetDef t_CompiledAutomaton$AUTOMATON_TYPE__fields_[] = {
            DECLARE_GET_FIELD(t_CompiledAutomaton$AUTOMATON_TYPE, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CompiledAutomaton$AUTOMATON_TYPE__methods_[] = {
            DECLARE_METHOD(t_CompiledAutomaton$AUTOMATON_TYPE, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompiledAutomaton$AUTOMATON_TYPE, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompiledAutomaton$AUTOMATON_TYPE, of_, METH_VARARGS),
            DECLARE_METHOD(t_CompiledAutomaton$AUTOMATON_TYPE, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_CompiledAutomaton$AUTOMATON_TYPE, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompiledAutomaton$AUTOMATON_TYPE, t_CompiledAutomaton$AUTOMATON_TYPE, ::java::lang::Enum, CompiledAutomaton$AUTOMATON_TYPE, abstract_init, 0, 0, t_CompiledAutomaton$AUTOMATON_TYPE__fields_, 0, 0);
          PyObject *t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(const CompiledAutomaton$AUTOMATON_TYPE& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CompiledAutomaton$AUTOMATON_TYPE *self = (t_CompiledAutomaton$AUTOMATON_TYPE *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CompiledAutomaton$AUTOMATON_TYPE::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CompiledAutomaton$AUTOMATON_TYPE::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CompiledAutomaton$AUTOMATON_TYPE *self = (t_CompiledAutomaton$AUTOMATON_TYPE *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CompiledAutomaton$AUTOMATON_TYPE::install(PyObject *module)
          {
            installType(&PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE), module, "CompiledAutomaton$AUTOMATON_TYPE", 0);
          }

          void t_CompiledAutomaton$AUTOMATON_TYPE::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "class_", make_descriptor(CompiledAutomaton$AUTOMATON_TYPE::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "wrapfn_", make_descriptor(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CompiledAutomaton$AUTOMATON_TYPE::initializeClass);
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "ALL", make_descriptor(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(*CompiledAutomaton$AUTOMATON_TYPE::ALL)));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "NONE", make_descriptor(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(*CompiledAutomaton$AUTOMATON_TYPE::NONE)));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "NORMAL", make_descriptor(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(*CompiledAutomaton$AUTOMATON_TYPE::NORMAL)));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "PREFIX", make_descriptor(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(*CompiledAutomaton$AUTOMATON_TYPE::PREFIX$)));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "SINGLE", make_descriptor(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(*CompiledAutomaton$AUTOMATON_TYPE::SINGLE)));
          }

          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompiledAutomaton$AUTOMATON_TYPE::initializeClass, 1)))
              return NULL;
            return t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(CompiledAutomaton$AUTOMATON_TYPE(((t_CompiledAutomaton$AUTOMATON_TYPE *) arg)->object.this$));
          }
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompiledAutomaton$AUTOMATON_TYPE::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_of_(t_CompiledAutomaton$AUTOMATON_TYPE *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            CompiledAutomaton$AUTOMATON_TYPE result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::CompiledAutomaton$AUTOMATON_TYPE::valueOf(a0));
              return t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_values(PyTypeObject *type)
          {
            JArray< CompiledAutomaton$AUTOMATON_TYPE > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::automaton::CompiledAutomaton$AUTOMATON_TYPE::values());
            return JArray<jobject>(result.this$).wrap(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_jobject);
          }
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_get__parameters_(t_CompiledAutomaton$AUTOMATON_TYPE *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PrefixTermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PrefixTermsEnum::class$ = NULL;
        jmethodID *PrefixTermsEnum::mids$ = NULL;
        bool PrefixTermsEnum::live$ = false;

        jclass PrefixTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PrefixTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_acc8615c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_accept_30bc08e1] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/FilteredTermsEnum$AcceptStatus;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PrefixTermsEnum::PrefixTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::index::FilteredTermsEnum(env->newObject(initializeClass, &mids$, mid_init$_acc8615c, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PrefixTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrefixTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PrefixTermsEnum_init_(t_PrefixTermsEnum *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_PrefixTermsEnum__methods_[] = {
          DECLARE_METHOD(t_PrefixTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixTermsEnum, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PrefixTermsEnum, t_PrefixTermsEnum, ::org::apache::lucene::index::FilteredTermsEnum, PrefixTermsEnum, t_PrefixTermsEnum_init_, 0, 0, 0, 0, 0);

        void t_PrefixTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(PrefixTermsEnum), module, "PrefixTermsEnum", 0);
        }

        void t_PrefixTermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PrefixTermsEnum).tp_dict, "class_", make_descriptor(PrefixTermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PrefixTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_PrefixTermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PrefixTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PrefixTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PrefixTermsEnum::initializeClass, 1)))
            return NULL;
          return t_PrefixTermsEnum::wrap_Object(PrefixTermsEnum(((t_PrefixTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_PrefixTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PrefixTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PrefixTermsEnum_init_(t_PrefixTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          PrefixTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::TermsEnum::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            INT_CALL(object = PrefixTermsEnum(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetCounts.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacetCounts::class$ = NULL;
          jmethodID *TaxonomyFacetCounts::mids$ = NULL;
          bool TaxonomyFacetCounts::live$ = false;

          jclass TaxonomyFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_50be664b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/OrdinalsReader;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyFacetCounts::TaxonomyFacetCounts(const ::org::apache::lucene::facet::taxonomy::OrdinalsReader & a0, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a1, const ::org::apache::lucene::facet::FacetsConfig & a2, const ::org::apache::lucene::facet::FacetsCollector & a3) : ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_50be664b, a0.this$, a1.this$, a2.this$, a3.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyFacetCounts_init_(t_TaxonomyFacetCounts *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_TaxonomyFacetCounts__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetCounts, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyFacetCounts, t_TaxonomyFacetCounts, ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets, TaxonomyFacetCounts, t_TaxonomyFacetCounts_init_, 0, 0, 0, 0, 0);

          void t_TaxonomyFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacetCounts), module, "TaxonomyFacetCounts", 0);
          }

          void t_TaxonomyFacetCounts::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetCounts).tp_dict, "class_", make_descriptor(TaxonomyFacetCounts::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetCounts).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyFacetCounts::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetCounts).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacetCounts::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacetCounts::wrap_Object(TaxonomyFacetCounts(((t_TaxonomyFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyFacetCounts_init_(t_TaxonomyFacetCounts *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader a0((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::TaxonomyReader a1((jobject) NULL);
            ::org::apache::lucene::facet::FacetsConfig a2((jobject) NULL);
            ::org::apache::lucene::facet::FacetsCollector a3((jobject) NULL);
            TaxonomyFacetCounts object((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::facet::taxonomy::OrdinalsReader::initializeClass, ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = TaxonomyFacetCounts(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/SyntaxParser.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeParseException.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/CharStream.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/ParseException.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/Token.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserConstants.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *StandardSyntaxParser::class$ = NULL;
              jmethodID *StandardSyntaxParser::mids$ = NULL;
              jfieldID *StandardSyntaxParser::fids$ = NULL;
              bool StandardSyntaxParser::live$ = false;

              jclass StandardSyntaxParser::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_8af5fa89] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;)V");
                  mids$[mid_init$_491f91b2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager;)V");
                  mids$[mid_Clause_9709215a] = env->getMethodID(cls, "Clause", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_ConjQuery_9709215a] = env->getMethodID(cls, "ConjQuery", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_Conjunction_54c6a179] = env->getMethodID(cls, "Conjunction", "()I");
                  mids$[mid_DisjQuery_9709215a] = env->getMethodID(cls, "DisjQuery", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_ModClause_9709215a] = env->getMethodID(cls, "ModClause", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_Modifiers_511690a9] = env->getMethodID(cls, "Modifiers", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;");
                  mids$[mid_Query_9709215a] = env->getMethodID(cls, "Query", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_ReInit_491f91b2] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager;)V");
                  mids$[mid_ReInit_8af5fa89] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;)V");
                  mids$[mid_Term_9709215a] = env->getMethodID(cls, "Term", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_TopLevelQuery_9709215a] = env->getMethodID(cls, "TopLevelQuery", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_disable_tracing_54c6a166] = env->getMethodID(cls, "disable_tracing", "()V");
                  mids$[mid_enable_tracing_54c6a166] = env->getMethodID(cls, "enable_tracing", "()V");
                  mids$[mid_generateParseException_4481d278] = env->getMethodID(cls, "generateParseException", "()Lorg/apache/lucene/queryparser/flexible/standard/parser/ParseException;");
                  mids$[mid_getNextToken_5eb4cff8] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  mids$[mid_getToken_24cc8f6e] = env->getMethodID(cls, "getToken", "(I)Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  mids$[mid_parse_051054be] = env->getMethodID(cls, "parse", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  fids$ = new jfieldID[max_fid];
                  fids$[fid_jj_nt] = env->getFieldID(cls, "jj_nt", "Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  fids$[fid_token] = env->getFieldID(cls, "token", "Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  fids$[fid_token_source] = env->getFieldID(cls, "token_source", "Lorg/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardSyntaxParser::StandardSyntaxParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              StandardSyntaxParser::StandardSyntaxParser(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8af5fa89, a0.this$)) {}

              StandardSyntaxParser::StandardSyntaxParser(const ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_491f91b2, a0.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::Clause(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_Clause_9709215a], a0.this$));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::ConjQuery(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_ConjQuery_9709215a], a0.this$));
              }

              jint StandardSyntaxParser::Conjunction() const
              {
                return env->callIntMethod(this$, mids$[mid_Conjunction_54c6a179]);
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::DisjQuery(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_DisjQuery_9709215a], a0.this$));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::ModClause(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_ModClause_9709215a], a0.this$));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier StandardSyntaxParser::Modifiers() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier(env->callObjectMethod(this$, mids$[mid_Modifiers_511690a9]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::Query(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_Query_9709215a], a0.this$));
              }

              void StandardSyntaxParser::ReInit(const ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_ReInit_491f91b2], a0.this$);
              }

              void StandardSyntaxParser::ReInit(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_ReInit_8af5fa89], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::Term(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_Term_9709215a], a0.this$));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::TopLevelQuery(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_TopLevelQuery_9709215a], a0.this$));
              }

              void StandardSyntaxParser::disable_tracing() const
              {
                env->callVoidMethod(this$, mids$[mid_disable_tracing_54c6a166]);
              }

              void StandardSyntaxParser::enable_tracing() const
              {
                env->callVoidMethod(this$, mids$[mid_enable_tracing_54c6a166]);
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::ParseException StandardSyntaxParser::generateParseException() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::ParseException(env->callObjectMethod(this$, mids$[mid_generateParseException_4481d278]));
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token StandardSyntaxParser::getNextToken() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_5eb4cff8]));
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token StandardSyntaxParser::getToken(jint a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->callObjectMethod(this$, mids$[mid_getToken_24cc8f6e], a0));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::parse(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_parse_051054be], a0.this$, a1.this$));
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token StandardSyntaxParser::_get_jj_nt() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->getObjectField(this$, fids$[fid_jj_nt]));
              }

              void StandardSyntaxParser::_set_jj_nt(const ::org::apache::lucene::queryparser::flexible::standard::parser::Token & a0) const
              {
                env->setObjectField(this$, fids$[fid_jj_nt], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token StandardSyntaxParser::_get_token() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->getObjectField(this$, fids$[fid_token]));
              }

              void StandardSyntaxParser::_set_token(const ::org::apache::lucene::queryparser::flexible::standard::parser::Token & a0) const
              {
                env->setObjectField(this$, fids$[fid_token], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager StandardSyntaxParser::_get_token_source() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager(env->getObjectField(this$, fids$[fid_token_source]));
              }

              void StandardSyntaxParser::_set_token_source(const ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager & a0) const
              {
                env->setObjectField(this$, fids$[fid_token_source], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_StandardSyntaxParser_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardSyntaxParser_init_(t_StandardSyntaxParser *self, PyObject *args, PyObject *kwds);
              static PyObject *t_StandardSyntaxParser_Clause(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_ConjQuery(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_Conjunction(t_StandardSyntaxParser *self);
              static PyObject *t_StandardSyntaxParser_DisjQuery(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_ModClause(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_Modifiers(t_StandardSyntaxParser *self);
              static PyObject *t_StandardSyntaxParser_Query(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_ReInit(t_StandardSyntaxParser *self, PyObject *args);
              static PyObject *t_StandardSyntaxParser_Term(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_TopLevelQuery(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_disable_tracing(t_StandardSyntaxParser *self);
              static PyObject *t_StandardSyntaxParser_enable_tracing(t_StandardSyntaxParser *self);
              static PyObject *t_StandardSyntaxParser_generateParseException(t_StandardSyntaxParser *self);
              static PyObject *t_StandardSyntaxParser_getNextToken(t_StandardSyntaxParser *self);
              static PyObject *t_StandardSyntaxParser_getToken(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_parse(t_StandardSyntaxParser *self, PyObject *args);
              static PyObject *t_StandardSyntaxParser_get__jj_nt(t_StandardSyntaxParser *self, void *data);
              static int t_StandardSyntaxParser_set__jj_nt(t_StandardSyntaxParser *self, PyObject *arg, void *data);
              static PyObject *t_StandardSyntaxParser_get__token(t_StandardSyntaxParser *self, void *data);
              static int t_StandardSyntaxParser_set__token(t_StandardSyntaxParser *self, PyObject *arg, void *data);
              static PyObject *t_StandardSyntaxParser_get__token_source(t_StandardSyntaxParser *self, void *data);
              static int t_StandardSyntaxParser_set__token_source(t_StandardSyntaxParser *self, PyObject *arg, void *data);

              static PyObject *t_StandardSyntaxParser_get__nextToken(t_StandardSyntaxParser *self, void *data);
              static PyGetSetDef t_StandardSyntaxParser__fields_[] = {
                DECLARE_GETSET_FIELD(t_StandardSyntaxParser, jj_nt),
                DECLARE_GETSET_FIELD(t_StandardSyntaxParser, token),
                DECLARE_GETSET_FIELD(t_StandardSyntaxParser, token_source),
                DECLARE_GET_FIELD(t_StandardSyntaxParser, nextToken),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_StandardSyntaxParser__methods_[] = {
                DECLARE_METHOD(t_StandardSyntaxParser, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardSyntaxParser, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardSyntaxParser, Clause, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, ConjQuery, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, Conjunction, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, DisjQuery, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, ModClause, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, Modifiers, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, Query, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, ReInit, METH_VARARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, Term, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, TopLevelQuery, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, disable_tracing, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, enable_tracing, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, generateParseException, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, getNextToken, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, getToken, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, parse, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardSyntaxParser, t_StandardSyntaxParser, ::java::lang::Object, StandardSyntaxParser, t_StandardSyntaxParser_init_, 0, 0, t_StandardSyntaxParser__fields_, 0, 0);

              void t_StandardSyntaxParser::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardSyntaxParser), module, "StandardSyntaxParser", 0);
              }

              void t_StandardSyntaxParser::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParser).tp_dict, "class_", make_descriptor(StandardSyntaxParser::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParser).tp_dict, "wrapfn_", make_descriptor(t_StandardSyntaxParser::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParser).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardSyntaxParser_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardSyntaxParser::initializeClass, 1)))
                  return NULL;
                return t_StandardSyntaxParser::wrap_Object(StandardSyntaxParser(((t_StandardSyntaxParser *) arg)->object.this$));
              }
              static PyObject *t_StandardSyntaxParser_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardSyntaxParser::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardSyntaxParser_init_(t_StandardSyntaxParser *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    StandardSyntaxParser object((jobject) NULL);

                    INT_CALL(object = StandardSyntaxParser());
                    self->object = object;
                    break;
                  }
                  goto err;
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);
                    StandardSyntaxParser object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0))
                    {
                      INT_CALL(object = StandardSyntaxParser(a0));
                      self->object = object;
                      break;
                    }
                  }
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager a0((jobject) NULL);
                    StandardSyntaxParser object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager::initializeClass, &a0))
                    {
                      INT_CALL(object = StandardSyntaxParser(a0));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_StandardSyntaxParser_Clause(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.Clause(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "Clause", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_ConjQuery(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.ConjQuery(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "ConjQuery", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_Conjunction(t_StandardSyntaxParser *self)
              {
                jint result;
                OBJ_CALL(result = self->object.Conjunction());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_StandardSyntaxParser_DisjQuery(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.DisjQuery(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "DisjQuery", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_ModClause(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.ModClause(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "ModClause", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_Modifiers(t_StandardSyntaxParser *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier result((jobject) NULL);
                OBJ_CALL(result = self->object.Modifiers());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_ModifierQueryNode$Modifier::wrap_Object(result);
              }

              static PyObject *t_StandardSyntaxParser_Query(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.Query(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "Query", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_ReInit(t_StandardSyntaxParser *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager a0((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager::initializeClass, &a0))
                    {
                      OBJ_CALL(self->object.ReInit(a0));
                      Py_RETURN_NONE;
                    }
                  }
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0))
                    {
                      OBJ_CALL(self->object.ReInit(a0));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "ReInit", args);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_Term(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.Term(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "Term", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_TopLevelQuery(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.TopLevelQuery(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "TopLevelQuery", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_disable_tracing(t_StandardSyntaxParser *self)
              {
                OBJ_CALL(self->object.disable_tracing());
                Py_RETURN_NONE;
              }

              static PyObject *t_StandardSyntaxParser_enable_tracing(t_StandardSyntaxParser *self)
              {
                OBJ_CALL(self->object.enable_tracing());
                Py_RETURN_NONE;
              }

              static PyObject *t_StandardSyntaxParser_generateParseException(t_StandardSyntaxParser *self)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::ParseException result((jobject) NULL);
                OBJ_CALL(result = self->object.generateParseException());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_ParseException::wrap_Object(result);
              }

              static PyObject *t_StandardSyntaxParser_getNextToken(t_StandardSyntaxParser *self)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token result((jobject) NULL);
                OBJ_CALL(result = self->object.getNextToken());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(result);
              }

              static PyObject *t_StandardSyntaxParser_getToken(t_StandardSyntaxParser *self, PyObject *arg)
              {
                jint a0;
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token result((jobject) NULL);

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.getToken(a0));
                  return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "getToken", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_parse(t_StandardSyntaxParser *self, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                {
                  OBJ_CALL(result = self->object.parse(a0, a1));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "parse", args);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_get__jj_nt(t_StandardSyntaxParser *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                OBJ_CALL(value = self->object._get_jj_nt());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(value);
              }
              static int t_StandardSyntaxParser_set__jj_nt(t_StandardSyntaxParser *self, PyObject *arg, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::Token::initializeClass, &value))
                {
                  INT_CALL(self->object._set_jj_nt(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "jj_nt", arg);
                return -1;
              }

              static PyObject *t_StandardSyntaxParser_get__token(t_StandardSyntaxParser *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                OBJ_CALL(value = self->object._get_token());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(value);
              }
              static int t_StandardSyntaxParser_set__token(t_StandardSyntaxParser *self, PyObject *arg, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::Token::initializeClass, &value))
                {
                  INT_CALL(self->object._set_token(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "token", arg);
                return -1;
              }

              static PyObject *t_StandardSyntaxParser_get__token_source(t_StandardSyntaxParser *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager value((jobject) NULL);
                OBJ_CALL(value = self->object._get_token_source());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_StandardSyntaxParserTokenManager::wrap_Object(value);
              }
              static int t_StandardSyntaxParser_set__token_source(t_StandardSyntaxParser *self, PyObject *arg, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager::initializeClass, &value))
                {
                  INT_CALL(self->object._set_token_source(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "token_source", arg);
                return -1;
              }

              static PyObject *t_StandardSyntaxParser_get__nextToken(t_StandardSyntaxParser *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                OBJ_CALL(value = self->object.getNextToken());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *MultiTermAwareComponent::class$ = NULL;
          jmethodID *MultiTermAwareComponent::mids$ = NULL;
          bool MultiTermAwareComponent::live$ = false;

          jclass MultiTermAwareComponent::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/MultiTermAwareComponent");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory MultiTermAwareComponent::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_MultiTermAwareComponent_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MultiTermAwareComponent_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MultiTermAwareComponent_getMultiTermComponent(t_MultiTermAwareComponent *self);
          static PyObject *t_MultiTermAwareComponent_get__multiTermComponent(t_MultiTermAwareComponent *self, void *data);
          static PyGetSetDef t_MultiTermAwareComponent__fields_[] = {
            DECLARE_GET_FIELD(t_MultiTermAwareComponent, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MultiTermAwareComponent__methods_[] = {
            DECLARE_METHOD(t_MultiTermAwareComponent, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MultiTermAwareComponent, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MultiTermAwareComponent, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MultiTermAwareComponent, t_MultiTermAwareComponent, ::java::lang::Object, MultiTermAwareComponent, abstract_init, 0, 0, t_MultiTermAwareComponent__fields_, 0, 0);

          void t_MultiTermAwareComponent::install(PyObject *module)
          {
            installType(&PY_TYPE(MultiTermAwareComponent), module, "MultiTermAwareComponent", 0);
          }

          void t_MultiTermAwareComponent::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MultiTermAwareComponent).tp_dict, "class_", make_descriptor(MultiTermAwareComponent::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MultiTermAwareComponent).tp_dict, "wrapfn_", make_descriptor(t_MultiTermAwareComponent::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MultiTermAwareComponent).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MultiTermAwareComponent_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MultiTermAwareComponent::initializeClass, 1)))
              return NULL;
            return t_MultiTermAwareComponent::wrap_Object(MultiTermAwareComponent(((t_MultiTermAwareComponent *) arg)->object.this$));
          }
          static PyObject *t_MultiTermAwareComponent_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MultiTermAwareComponent::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_MultiTermAwareComponent_getMultiTermComponent(t_MultiTermAwareComponent *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_MultiTermAwareComponent_get__multiTermComponent(t_MultiTermAwareComponent *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RAMDirectory.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RAMDirectory::class$ = NULL;
        jmethodID *RAMDirectory::mids$ = NULL;
        bool RAMDirectory::live$ = false;

        jclass RAMDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RAMDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_7b526946] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getLockID_14c7b5c5] = env->getMethodID(cls, "getLockID", "()Ljava/lang/String;");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_newRAMFile_a5af5448] = env->getMethodID(cls, "newRAMFile", "()Lorg/apache/lucene/store/RAMFile;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RAMDirectory::RAMDirectory() : ::org::apache::lucene::store::BaseDirectory(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        RAMDirectory::RAMDirectory(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::store::IOContext & a1) : ::org::apache::lucene::store::BaseDirectory(env->newObject(initializeClass, &mids$, mid_init$_7b526946, a0.this$, a1.this$)) {}

        void RAMDirectory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::store::IndexOutput RAMDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void RAMDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        jboolean RAMDirectory::fileExists(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fileExists_5fdc3f44], a0.this$);
        }

        jlong RAMDirectory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_5fdc3f54], a0.this$);
        }

        ::java::lang::String RAMDirectory::getLockID() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLockID_14c7b5c5]));
        }

        JArray< ::java::lang::String > RAMDirectory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_2e6d5245]));
        }

        ::org::apache::lucene::store::IndexInput RAMDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }

        jlong RAMDirectory::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        void RAMDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RAMDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RAMDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RAMDirectory_init_(t_RAMDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RAMDirectory_close(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_createOutput(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_deleteFile(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_fileExists(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_fileLength(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_getLockID(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_listAll(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_openInput(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_ramBytesUsed(t_RAMDirectory *self);
        static PyObject *t_RAMDirectory_sync(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_get__lockID(t_RAMDirectory *self, void *data);
        static PyGetSetDef t_RAMDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_RAMDirectory, lockID),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RAMDirectory__methods_[] = {
          DECLARE_METHOD(t_RAMDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMDirectory, close, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, fileExists, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, fileLength, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, getLockID, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, listAll, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_RAMDirectory, sync, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RAMDirectory, t_RAMDirectory, ::org::apache::lucene::store::BaseDirectory, RAMDirectory, t_RAMDirectory_init_, 0, 0, t_RAMDirectory__fields_, 0, 0);

        void t_RAMDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(RAMDirectory), module, "RAMDirectory", 0);
        }

        void t_RAMDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RAMDirectory).tp_dict, "class_", make_descriptor(RAMDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RAMDirectory).tp_dict, "wrapfn_", make_descriptor(t_RAMDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RAMDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RAMDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RAMDirectory::initializeClass, 1)))
            return NULL;
          return t_RAMDirectory::wrap_Object(RAMDirectory(((t_RAMDirectory *) arg)->object.this$));
        }
        static PyObject *t_RAMDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RAMDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RAMDirectory_init_(t_RAMDirectory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              RAMDirectory object((jobject) NULL);

              INT_CALL(object = RAMDirectory());
              self->object = object;
              break;
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::store::IOContext a1((jobject) NULL);
              RAMDirectory object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
              {
                INT_CALL(object = RAMDirectory(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RAMDirectory_close(t_RAMDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_RAMDirectory_createOutput(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_RAMDirectory_deleteFile(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_RAMDirectory_fileExists(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileExists(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "fileExists", args, 2);
        }

        static PyObject *t_RAMDirectory_fileLength(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "fileLength", args, 2);
        }

        static PyObject *t_RAMDirectory_getLockID(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLockID());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "getLockID", args, 2);
        }

        static PyObject *t_RAMDirectory_listAll(t_RAMDirectory *self, PyObject *args)
        {
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.listAll());
            return JArray<jstring>(result.this$).wrap();
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "listAll", args, 2);
        }

        static PyObject *t_RAMDirectory_openInput(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_RAMDirectory_ramBytesUsed(t_RAMDirectory *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RAMDirectory_sync(t_RAMDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_RAMDirectory_get__lockID(t_RAMDirectory *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockID());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/FlagsAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *FlagsAttribute::class$ = NULL;
          jmethodID *FlagsAttribute::mids$ = NULL;
          bool FlagsAttribute::live$ = false;

          jclass FlagsAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/FlagsAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getFlags_54c6a179] = env->getMethodID(cls, "getFlags", "()I");
              mids$[mid_setFlags_39c7bd3c] = env->getMethodID(cls, "setFlags", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint FlagsAttribute::getFlags() const
          {
            return env->callIntMethod(this$, mids$[mid_getFlags_54c6a179]);
          }

          void FlagsAttribute::setFlags(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFlags_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_FlagsAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FlagsAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FlagsAttribute_getFlags(t_FlagsAttribute *self);
          static PyObject *t_FlagsAttribute_setFlags(t_FlagsAttribute *self, PyObject *arg);
          static PyObject *t_FlagsAttribute_get__flags(t_FlagsAttribute *self, void *data);
          static int t_FlagsAttribute_set__flags(t_FlagsAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_FlagsAttribute__fields_[] = {
            DECLARE_GETSET_FIELD(t_FlagsAttribute, flags),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FlagsAttribute__methods_[] = {
            DECLARE_METHOD(t_FlagsAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FlagsAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FlagsAttribute, getFlags, METH_NOARGS),
            DECLARE_METHOD(t_FlagsAttribute, setFlags, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FlagsAttribute, t_FlagsAttribute, ::org::apache::lucene::util::Attribute, FlagsAttribute, abstract_init, 0, 0, t_FlagsAttribute__fields_, 0, 0);

          void t_FlagsAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(FlagsAttribute), module, "FlagsAttribute", 0);
          }

          void t_FlagsAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FlagsAttribute).tp_dict, "class_", make_descriptor(FlagsAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FlagsAttribute).tp_dict, "wrapfn_", make_descriptor(t_FlagsAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FlagsAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FlagsAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FlagsAttribute::initializeClass, 1)))
              return NULL;
            return t_FlagsAttribute::wrap_Object(FlagsAttribute(((t_FlagsAttribute *) arg)->object.this$));
          }
          static PyObject *t_FlagsAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FlagsAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FlagsAttribute_getFlags(t_FlagsAttribute *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getFlags());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FlagsAttribute_setFlags(t_FlagsAttribute *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setFlags(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFlags", arg);
            return NULL;
          }

          static PyObject *t_FlagsAttribute_get__flags(t_FlagsAttribute *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getFlags());
            return PyInt_FromLong((long) value);
          }
          static int t_FlagsAttribute_set__flags(t_FlagsAttribute *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setFlags(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "flags", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonIterator.h"
#include "java/lang/Throwable.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonIterator::class$ = NULL;
        jmethodID *PythonIterator::mids$ = NULL;
        bool PythonIterator::live$ = false;

        jclass PythonIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
            mids$[mid_next_846352c3] = env->getMethodID(cls, "next", "()Ljava/lang/Object;");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonIterator::PythonIterator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonIterator::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonIterator::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonIterator::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }

        void PythonIterator::remove() const
        {
          env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonIterator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonIterator_init_(t_PythonIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonIterator_finalize(t_PythonIterator *self);
        static PyObject *t_PythonIterator_pythonExtension(t_PythonIterator *self, PyObject *args);
        static PyObject *t_PythonIterator_remove(t_PythonIterator *self);
        static jboolean JNICALL t_PythonIterator_hasNext0(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonIterator_next1(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonIterator_pythonDecRef2(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonIterator_get__self(t_PythonIterator *self, void *data);
        static PyGetSetDef t_PythonIterator__fields_[] = {
          DECLARE_GET_FIELD(t_PythonIterator, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonIterator__methods_[] = {
          DECLARE_METHOD(t_PythonIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIterator, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonIterator, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonIterator, remove, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonIterator, t_PythonIterator, ::java::lang::Object, PythonIterator, t_PythonIterator_init_, PyObject_SelfIter, get_extension_next, t_PythonIterator__fields_, 0, 0);

        void t_PythonIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonIterator), module, "PythonIterator", 1);
        }

        void t_PythonIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonIterator).tp_dict, "class_", make_descriptor(PythonIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonIterator).tp_dict, "wrapfn_", make_descriptor(t_PythonIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonIterator::initializeClass);
          JNINativeMethod methods[] = {
            { "hasNext", "()Z", (void *) t_PythonIterator_hasNext0 },
            { "next", "()Ljava/lang/Object;", (void *) t_PythonIterator_next1 },
            { "pythonDecRef", "()V", (void *) t_PythonIterator_pythonDecRef2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonIterator::initializeClass, 1)))
            return NULL;
          return t_PythonIterator::wrap_Object(PythonIterator(((t_PythonIterator *) arg)->object.this$));
        }
        static PyObject *t_PythonIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonIterator_init_(t_PythonIterator *self, PyObject *args, PyObject *kwds)
        {
          PythonIterator object((jobject) NULL);

          INT_CALL(object = PythonIterator());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonIterator_finalize(t_PythonIterator *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonIterator_pythonExtension(t_PythonIterator *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonIterator_remove(t_PythonIterator *self)
        {
          OBJ_CALL(self->object.remove());
          Py_RETURN_NONE;
        }

        static jboolean JNICALL t_PythonIterator_hasNext0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIterator::mids$[PythonIterator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "hasNext", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("hasNext", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jobject JNICALL t_PythonIterator_next1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIterator::mids$[PythonIterator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::lang::Object value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "next", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "o", &value))
          {
            throwTypeError("next", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonIterator_pythonDecRef2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIterator::mids$[PythonIterator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonIterator::mids$[PythonIterator::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonIterator_get__self(t_PythonIterator *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharTokenizer::class$ = NULL;
          jmethodID *CharTokenizer::mids$ = NULL;
          bool CharTokenizer::live$ = false;

          jclass CharTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_normalize_39c7bd23] = env->getMethodID(cls, "normalize", "(I)I");
              mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharTokenizer::CharTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          CharTokenizer::CharTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}

          void CharTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean CharTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void CharTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CharTokenizer_init_(t_CharTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharTokenizer_end(t_CharTokenizer *self, PyObject *args);
          static PyObject *t_CharTokenizer_incrementToken(t_CharTokenizer *self, PyObject *args);
          static PyObject *t_CharTokenizer_reset(t_CharTokenizer *self, PyObject *args);

          static PyMethodDef t_CharTokenizer__methods_[] = {
            DECLARE_METHOD(t_CharTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_CharTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_CharTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharTokenizer, t_CharTokenizer, ::org::apache::lucene::analysis::Tokenizer, CharTokenizer, t_CharTokenizer_init_, 0, 0, 0, 0, 0);

          void t_CharTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(CharTokenizer), module, "CharTokenizer", 0);
          }

          void t_CharTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharTokenizer).tp_dict, "class_", make_descriptor(CharTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharTokenizer).tp_dict, "wrapfn_", make_descriptor(t_CharTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharTokenizer::initializeClass, 1)))
              return NULL;
            return t_CharTokenizer::wrap_Object(CharTokenizer(((t_CharTokenizer *) arg)->object.this$));
          }
          static PyObject *t_CharTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CharTokenizer_init_(t_CharTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                CharTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = CharTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                CharTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = CharTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CharTokenizer_end(t_CharTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_CharTokenizer_incrementToken(t_CharTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CharTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_CharTokenizer_reset(t_CharTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$Shorts.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$Shorts::class$ = NULL;
        jmethodID *FieldCache$Shorts::mids$ = NULL;
        bool FieldCache$Shorts::live$ = false;
        FieldCache$Shorts *FieldCache$Shorts::EMPTY = NULL;

        jclass FieldCache$Shorts::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$Shorts");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_39c7bd39] = env->getMethodID(cls, "get", "(I)S");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new FieldCache$Shorts(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/FieldCache$Shorts;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$Shorts::FieldCache$Shorts() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jshort FieldCache$Shorts::get(jint a0) const
        {
          return env->callShortMethod(this$, mids$[mid_get_39c7bd39], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$Shorts_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Shorts_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$Shorts_init_(t_FieldCache$Shorts *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$Shorts_get(t_FieldCache$Shorts *self, PyObject *arg);

        static PyMethodDef t_FieldCache$Shorts__methods_[] = {
          DECLARE_METHOD(t_FieldCache$Shorts, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Shorts, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Shorts, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$Shorts, t_FieldCache$Shorts, ::java::lang::Object, FieldCache$Shorts, t_FieldCache$Shorts_init_, 0, 0, 0, 0, 0);

        void t_FieldCache$Shorts::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$Shorts), module, "FieldCache$Shorts", 0);
        }

        void t_FieldCache$Shorts::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$Shorts).tp_dict, "class_", make_descriptor(FieldCache$Shorts::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$Shorts).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$Shorts::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$Shorts).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCache$Shorts::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCache$Shorts).tp_dict, "EMPTY", make_descriptor(t_FieldCache$Shorts::wrap_Object(*FieldCache$Shorts::EMPTY)));
        }

        static PyObject *t_FieldCache$Shorts_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$Shorts::initializeClass, 1)))
            return NULL;
          return t_FieldCache$Shorts::wrap_Object(FieldCache$Shorts(((t_FieldCache$Shorts *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$Shorts_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$Shorts::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$Shorts_init_(t_FieldCache$Shorts *self, PyObject *args, PyObject *kwds)
        {
          FieldCache$Shorts object((jobject) NULL);

          INT_CALL(object = FieldCache$Shorts());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCache$Shorts_get(t_FieldCache$Shorts *self, PyObject *arg)
        {
          jint a0;
          jshort result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/PrefixWildcardQueryNode.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode.h"
#include "java/lang/CloneNotSupportedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *PrefixWildcardQueryNode::class$ = NULL;
              jmethodID *PrefixWildcardQueryNode::mids$ = NULL;
              bool PrefixWildcardQueryNode::live$ = false;

              jclass PrefixWildcardQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/PrefixWildcardQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_ddeda85c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode;)V");
                  mids$[mid_init$_ddd81d4e] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;II)V");
                  mids$[mid_cloneTree_45dffc2c] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/standard/nodes/PrefixWildcardQueryNode;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PrefixWildcardQueryNode::PrefixWildcardQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode & a0) : ::org::apache::lucene::queryparser::flexible::standard::nodes::WildcardQueryNode(env->newObject(initializeClass, &mids$, mid_init$_ddeda85c, a0.this$)) {}

              PrefixWildcardQueryNode::PrefixWildcardQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jint a2, jint a3) : ::org::apache::lucene::queryparser::flexible::standard::nodes::WildcardQueryNode(env->newObject(initializeClass, &mids$, mid_init$_ddd81d4e, a0.this$, a1.this$, a2, a3)) {}

              PrefixWildcardQueryNode PrefixWildcardQueryNode::cloneTree() const
              {
                return PrefixWildcardQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_45dffc2c]));
              }

              ::java::lang::String PrefixWildcardQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_PrefixWildcardQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PrefixWildcardQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PrefixWildcardQueryNode_init_(t_PrefixWildcardQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PrefixWildcardQueryNode_cloneTree(t_PrefixWildcardQueryNode *self, PyObject *args);
              static PyObject *t_PrefixWildcardQueryNode_toString(t_PrefixWildcardQueryNode *self, PyObject *args);

              static PyMethodDef t_PrefixWildcardQueryNode__methods_[] = {
                DECLARE_METHOD(t_PrefixWildcardQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PrefixWildcardQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PrefixWildcardQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_PrefixWildcardQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PrefixWildcardQueryNode, t_PrefixWildcardQueryNode, ::org::apache::lucene::queryparser::flexible::standard::nodes::WildcardQueryNode, PrefixWildcardQueryNode, t_PrefixWildcardQueryNode_init_, 0, 0, 0, 0, 0);

              void t_PrefixWildcardQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(PrefixWildcardQueryNode), module, "PrefixWildcardQueryNode", 0);
              }

              void t_PrefixWildcardQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PrefixWildcardQueryNode).tp_dict, "class_", make_descriptor(PrefixWildcardQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PrefixWildcardQueryNode).tp_dict, "wrapfn_", make_descriptor(t_PrefixWildcardQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PrefixWildcardQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PrefixWildcardQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PrefixWildcardQueryNode::initializeClass, 1)))
                  return NULL;
                return t_PrefixWildcardQueryNode::wrap_Object(PrefixWildcardQueryNode(((t_PrefixWildcardQueryNode *) arg)->object.this$));
              }
              static PyObject *t_PrefixWildcardQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PrefixWildcardQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PrefixWildcardQueryNode_init_(t_PrefixWildcardQueryNode *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode a0((jobject) NULL);
                    PrefixWildcardQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode::initializeClass, &a0))
                    {
                      INT_CALL(object = PrefixWildcardQueryNode(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 4:
                  {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    ::java::lang::CharSequence a1((jobject) NULL);
                    jint a2;
                    jint a3;
                    PrefixWildcardQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "OOII", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                    {
                      INT_CALL(object = PrefixWildcardQueryNode(a0, a1, a2, a3));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_PrefixWildcardQueryNode_cloneTree(t_PrefixWildcardQueryNode *self, PyObject *args)
              {
                PrefixWildcardQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_PrefixWildcardQueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(PrefixWildcardQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_PrefixWildcardQueryNode_toString(t_PrefixWildcardQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(PrefixWildcardQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OpenBitSetIterator.h"
#include "org/apache/lucene/util/OpenBitSet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OpenBitSetIterator::class$ = NULL;
        jmethodID *OpenBitSetIterator::mids$ = NULL;
        bool OpenBitSetIterator::live$ = false;

        jclass OpenBitSetIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OpenBitSetIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c2540e4f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_init$_ce93dbcb] = env->getMethodID(cls, "<init>", "([JI)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OpenBitSetIterator::OpenBitSetIterator(const ::org::apache::lucene::util::OpenBitSet & a0) : ::org::apache::lucene::search::DocIdSetIterator(env->newObject(initializeClass, &mids$, mid_init$_c2540e4f, a0.this$)) {}

        OpenBitSetIterator::OpenBitSetIterator(const JArray< jlong > & a0, jint a1) : ::org::apache::lucene::search::DocIdSetIterator(env->newObject(initializeClass, &mids$, mid_init$_ce93dbcb, a0.this$, a1)) {}

        jint OpenBitSetIterator::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jlong OpenBitSetIterator::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint OpenBitSetIterator::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint OpenBitSetIterator::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OpenBitSetIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OpenBitSetIterator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OpenBitSetIterator_init_(t_OpenBitSetIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OpenBitSetIterator_advance(t_OpenBitSetIterator *self, PyObject *args);
        static PyObject *t_OpenBitSetIterator_cost(t_OpenBitSetIterator *self, PyObject *args);
        static PyObject *t_OpenBitSetIterator_docID(t_OpenBitSetIterator *self, PyObject *args);
        static PyObject *t_OpenBitSetIterator_nextDoc(t_OpenBitSetIterator *self, PyObject *args);

        static PyMethodDef t_OpenBitSetIterator__methods_[] = {
          DECLARE_METHOD(t_OpenBitSetIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSetIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSetIterator, advance, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSetIterator, cost, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSetIterator, docID, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSetIterator, nextDoc, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OpenBitSetIterator, t_OpenBitSetIterator, ::org::apache::lucene::search::DocIdSetIterator, OpenBitSetIterator, t_OpenBitSetIterator_init_, 0, 0, 0, 0, 0);

        void t_OpenBitSetIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(OpenBitSetIterator), module, "OpenBitSetIterator", 0);
        }

        void t_OpenBitSetIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OpenBitSetIterator).tp_dict, "class_", make_descriptor(OpenBitSetIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OpenBitSetIterator).tp_dict, "wrapfn_", make_descriptor(t_OpenBitSetIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OpenBitSetIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OpenBitSetIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OpenBitSetIterator::initializeClass, 1)))
            return NULL;
          return t_OpenBitSetIterator::wrap_Object(OpenBitSetIterator(((t_OpenBitSetIterator *) arg)->object.this$));
        }
        static PyObject *t_OpenBitSetIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OpenBitSetIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OpenBitSetIterator_init_(t_OpenBitSetIterator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::OpenBitSet a0((jobject) NULL);
              OpenBitSetIterator object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::OpenBitSet::initializeClass, &a0))
              {
                INT_CALL(object = OpenBitSetIterator(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              OpenBitSetIterator object((jobject) NULL);

              if (!parseArgs(args, "[JI", &a0, &a1))
              {
                INT_CALL(object = OpenBitSetIterator(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OpenBitSetIterator_advance(t_OpenBitSetIterator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(OpenBitSetIterator), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_OpenBitSetIterator_cost(t_OpenBitSetIterator *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(OpenBitSetIterator), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_OpenBitSetIterator_docID(t_OpenBitSetIterator *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(OpenBitSetIterator), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_OpenBitSetIterator_nextDoc(t_OpenBitSetIterator *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(OpenBitSetIterator), (PyObject *) self, "nextDoc", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene41/Lucene41PostingsFormat.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {

          ::java::lang::Class *Lucene41PostingsFormat::class$ = NULL;
          jmethodID *Lucene41PostingsFormat::mids$ = NULL;
          bool Lucene41PostingsFormat::live$ = false;
          jint Lucene41PostingsFormat::BLOCK_SIZE = (jint) 0;
          ::java::lang::String *Lucene41PostingsFormat::DOC_EXTENSION = NULL;
          ::java::lang::String *Lucene41PostingsFormat::PAY_EXTENSION = NULL;
          ::java::lang::String *Lucene41PostingsFormat::POS_EXTENSION = NULL;

          jclass Lucene41PostingsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene41/Lucene41PostingsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_fieldsConsumer_a15793c6] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
              mids$[mid_fieldsProducer_c86c62bc] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              BLOCK_SIZE = env->getStaticIntField(cls, "BLOCK_SIZE");
              DOC_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "DOC_EXTENSION", "Ljava/lang/String;"));
              PAY_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "PAY_EXTENSION", "Ljava/lang/String;"));
              POS_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "POS_EXTENSION", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene41PostingsFormat::Lucene41PostingsFormat() : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          Lucene41PostingsFormat::Lucene41PostingsFormat(jint a0, jint a1) : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

          ::org::apache::lucene::codecs::FieldsConsumer Lucene41PostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_a15793c6], a0.this$));
          }

          ::org::apache::lucene::codecs::FieldsProducer Lucene41PostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c86c62bc], a0.this$));
          }

          ::java::lang::String Lucene41PostingsFormat::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {
          static PyObject *t_Lucene41PostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene41PostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene41PostingsFormat_init_(t_Lucene41PostingsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene41PostingsFormat_fieldsConsumer(t_Lucene41PostingsFormat *self, PyObject *args);
          static PyObject *t_Lucene41PostingsFormat_fieldsProducer(t_Lucene41PostingsFormat *self, PyObject *args);
          static PyObject *t_Lucene41PostingsFormat_toString(t_Lucene41PostingsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene41PostingsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene41PostingsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsFormat, fieldsProducer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsFormat, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene41PostingsFormat, t_Lucene41PostingsFormat, ::org::apache::lucene::codecs::PostingsFormat, Lucene41PostingsFormat, t_Lucene41PostingsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene41PostingsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene41PostingsFormat), module, "Lucene41PostingsFormat", 0);
          }

          void t_Lucene41PostingsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsFormat).tp_dict, "class_", make_descriptor(Lucene41PostingsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene41PostingsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene41PostingsFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsFormat).tp_dict, "BLOCK_SIZE", make_descriptor(Lucene41PostingsFormat::BLOCK_SIZE));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsFormat).tp_dict, "DOC_EXTENSION", make_descriptor(j2p(*Lucene41PostingsFormat::DOC_EXTENSION)));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsFormat).tp_dict, "PAY_EXTENSION", make_descriptor(j2p(*Lucene41PostingsFormat::PAY_EXTENSION)));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsFormat).tp_dict, "POS_EXTENSION", make_descriptor(j2p(*Lucene41PostingsFormat::POS_EXTENSION)));
          }

          static PyObject *t_Lucene41PostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene41PostingsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene41PostingsFormat::wrap_Object(Lucene41PostingsFormat(((t_Lucene41PostingsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene41PostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene41PostingsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene41PostingsFormat_init_(t_Lucene41PostingsFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Lucene41PostingsFormat object((jobject) NULL);

                INT_CALL(object = Lucene41PostingsFormat());
                self->object = object;
                break;
              }
              goto err;
             case 2:
              {
                jint a0;
                jint a1;
                Lucene41PostingsFormat object((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  INT_CALL(object = Lucene41PostingsFormat(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene41PostingsFormat_fieldsConsumer(t_Lucene41PostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_Lucene41PostingsFormat_fieldsProducer(t_Lucene41PostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }

          static PyObject *t_Lucene41PostingsFormat_toString(t_Lucene41PostingsFormat *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsFormat), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "org/apache/lucene/facet/FacetsCollector$MatchingDocs.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/search/TopFieldDocs.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetsCollector::class$ = NULL;
        jmethodID *FacetsCollector::mids$ = NULL;
        bool FacetsCollector::live$ = false;

        jclass FacetsCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetsCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_getKeepScores_54c6a16a] = env->getMethodID(cls, "getKeepScores", "()Z");
            mids$[mid_getMatchingDocs_87851566] = env->getMethodID(cls, "getMatchingDocs", "()Ljava/util/List;");
            mids$[mid_search_670d4dc3] = env->getStaticMethodID(cls, "search", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Query;ILorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_search_904a71a9] = env->getStaticMethodID(cls, "search", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_search_d8966278] = env->getStaticMethodID(cls, "search", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;Lorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_search_c564507a] = env->getStaticMethodID(cls, "search", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;ZZLorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_searchAfter_4ab72933] = env->getMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;ILorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_be14f375] = env->getStaticMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_8d45b2eb] = env->getStaticMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;Lorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_b14f4589] = env->getStaticMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;ZZLorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_createDocs_04d72adb] = env->getMethodID(cls, "createDocs", "(I)Lorg/apache/lucene/facet/FacetsCollector$Docs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetsCollector::FacetsCollector() : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        FacetsCollector::FacetsCollector(jboolean a0) : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

        jboolean FacetsCollector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        void FacetsCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
        }

        jboolean FacetsCollector::getKeepScores() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getKeepScores_54c6a16a]);
        }

        ::java::util::List FacetsCollector::getMatchingDocs() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getMatchingDocs_87851566]));
        }

        ::org::apache::lucene::search::TopDocs FacetsCollector::search(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Query & a1, jint a2, const ::org::apache::lucene::search::Collector & a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopDocs(env->callStaticObjectMethod(cls, mids$[mid_search_670d4dc3], a0.this$, a1.this$, a2, a3.this$));
        }

        ::org::apache::lucene::search::TopDocs FacetsCollector::search(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::Filter & a2, jint a3, const ::org::apache::lucene::search::Collector & a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopDocs(env->callStaticObjectMethod(cls, mids$[mid_search_904a71a9], a0.this$, a1.this$, a2.this$, a3, a4.this$));
        }

        ::org::apache::lucene::search::TopFieldDocs FacetsCollector::search(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::Filter & a2, jint a3, const ::org::apache::lucene::search::Sort & a4, const ::org::apache::lucene::search::Collector & a5)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopFieldDocs(env->callStaticObjectMethod(cls, mids$[mid_search_d8966278], a0.this$, a1.this$, a2.this$, a3, a4.this$, a5.this$));
        }

        ::org::apache::lucene::search::TopFieldDocs FacetsCollector::search(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::Filter & a2, jint a3, const ::org::apache::lucene::search::Sort & a4, jboolean a5, jboolean a6, const ::org::apache::lucene::search::Collector & a7)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopFieldDocs(env->callStaticObjectMethod(cls, mids$[mid_search_c564507a], a0.this$, a1.this$, a2.this$, a3, a4.this$, a5, a6, a7.this$));
        }

        ::org::apache::lucene::search::TopDocs FacetsCollector::searchAfter(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreDoc & a1, const ::org::apache::lucene::search::Query & a2, jint a3, const ::org::apache::lucene::search::Collector & a4) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_searchAfter_4ab72933], a0.this$, a1.this$, a2.this$, a3, a4.this$));
        }

        ::org::apache::lucene::search::TopDocs FacetsCollector::searchAfter(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreDoc & a1, const ::org::apache::lucene::search::Query & a2, const ::org::apache::lucene::search::Filter & a3, jint a4, const ::org::apache::lucene::search::Collector & a5)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopDocs(env->callStaticObjectMethod(cls, mids$[mid_searchAfter_be14f375], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5.this$));
        }

        ::org::apache::lucene::search::TopDocs FacetsCollector::searchAfter(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreDoc & a1, const ::org::apache::lucene::search::Query & a2, const ::org::apache::lucene::search::Filter & a3, jint a4, const ::org::apache::lucene::search::Sort & a5, const ::org::apache::lucene::search::Collector & a6)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopDocs(env->callStaticObjectMethod(cls, mids$[mid_searchAfter_8d45b2eb], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5.this$, a6.this$));
        }

        ::org::apache::lucene::search::TopDocs FacetsCollector::searchAfter(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreDoc & a1, const ::org::apache::lucene::search::Query & a2, const ::org::apache::lucene::search::Filter & a3, jint a4, const ::org::apache::lucene::search::Sort & a5, jboolean a6, jboolean a7, const ::org::apache::lucene::search::Collector & a8)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopDocs(env->callStaticObjectMethod(cls, mids$[mid_searchAfter_b14f4589], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5.this$, a6, a7, a8.this$));
        }

        void FacetsCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }

        void FacetsCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetsCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetsCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetsCollector_init_(t_FacetsCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetsCollector_acceptsDocsOutOfOrder(t_FacetsCollector *self, PyObject *args);
        static PyObject *t_FacetsCollector_collect(t_FacetsCollector *self, PyObject *args);
        static PyObject *t_FacetsCollector_getKeepScores(t_FacetsCollector *self);
        static PyObject *t_FacetsCollector_getMatchingDocs(t_FacetsCollector *self);
        static PyObject *t_FacetsCollector_search(PyTypeObject *type, PyObject *args);
        static PyObject *t_FacetsCollector_searchAfter(t_FacetsCollector *self, PyObject *args);
        static PyObject *t_FacetsCollector_searchAfter_(PyTypeObject *type, PyObject *args);
        static PyObject *t_FacetsCollector_setNextReader(t_FacetsCollector *self, PyObject *args);
        static PyObject *t_FacetsCollector_setScorer(t_FacetsCollector *self, PyObject *args);
        static PyObject *t_FacetsCollector_get__keepScores(t_FacetsCollector *self, void *data);
        static PyObject *t_FacetsCollector_get__matchingDocs(t_FacetsCollector *self, void *data);
        static int t_FacetsCollector_set__nextReader(t_FacetsCollector *self, PyObject *arg, void *data);
        static int t_FacetsCollector_set__scorer(t_FacetsCollector *self, PyObject *arg, void *data);
        static PyGetSetDef t_FacetsCollector__fields_[] = {
          DECLARE_GET_FIELD(t_FacetsCollector, keepScores),
          DECLARE_GET_FIELD(t_FacetsCollector, matchingDocs),
          DECLARE_SET_FIELD(t_FacetsCollector, nextReader),
          DECLARE_SET_FIELD(t_FacetsCollector, scorer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetsCollector__methods_[] = {
          DECLARE_METHOD(t_FacetsCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsCollector, acceptsDocsOutOfOrder, METH_VARARGS),
          DECLARE_METHOD(t_FacetsCollector, collect, METH_VARARGS),
          DECLARE_METHOD(t_FacetsCollector, getKeepScores, METH_NOARGS),
          DECLARE_METHOD(t_FacetsCollector, getMatchingDocs, METH_NOARGS),
          DECLARE_METHOD(t_FacetsCollector, search, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FacetsCollector, searchAfter, METH_VARARGS),
          DECLARE_METHOD(t_FacetsCollector, searchAfter_, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FacetsCollector, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FacetsCollector, setScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FacetsCollector, t_FacetsCollector, ::org::apache::lucene::search::Collector, FacetsCollector, t_FacetsCollector_init_, 0, 0, t_FacetsCollector__fields_, 0, 0);

        void t_FacetsCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetsCollector), module, "FacetsCollector", 0);
          PyDict_SetItemString(PY_TYPE(FacetsCollector).tp_dict, "MatchingDocs", make_descriptor(&PY_TYPE(FacetsCollector$MatchingDocs)));
        }

        void t_FacetsCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FacetsCollector).tp_dict, "class_", make_descriptor(FacetsCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FacetsCollector).tp_dict, "wrapfn_", make_descriptor(t_FacetsCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FacetsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FacetsCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetsCollector::initializeClass, 1)))
            return NULL;
          return t_FacetsCollector::wrap_Object(FacetsCollector(((t_FacetsCollector *) arg)->object.this$));
        }
        static PyObject *t_FacetsCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetsCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetsCollector_init_(t_FacetsCollector *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              FacetsCollector object((jobject) NULL);

              INT_CALL(object = FacetsCollector());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              jboolean a0;
              FacetsCollector object((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                INT_CALL(object = FacetsCollector(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FacetsCollector_acceptsDocsOutOfOrder(t_FacetsCollector *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FacetsCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
        }

        static PyObject *t_FacetsCollector_collect(t_FacetsCollector *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FacetsCollector), (PyObject *) self, "collect", args, 2);
        }

        static PyObject *t_FacetsCollector_getKeepScores(t_FacetsCollector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getKeepScores());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FacetsCollector_getMatchingDocs(t_FacetsCollector *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.getMatchingDocs());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetsCollector$MatchingDocs));
        }

        static PyObject *t_FacetsCollector_search(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 4:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::Collector a3((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkIk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::search(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 5:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              ::org::apache::lucene::search::Filter a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::Collector a4((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkIk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::search(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 6:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              ::org::apache::lucene::search::Filter a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::Sort a4((jobject) NULL);
              ::org::apache::lucene::search::Collector a5((jobject) NULL);
              ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkIkk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::search(a0, a1, a2, a3, a4, a5));
                return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
              }
            }
            break;
           case 8:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              ::org::apache::lucene::search::Filter a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::Sort a4((jobject) NULL);
              jboolean a5;
              jboolean a6;
              ::org::apache::lucene::search::Collector a7((jobject) NULL);
              ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkIkZZk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::search(a0, a1, a2, a3, a4, a5, a6, a7));
                return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "search", args);
          return NULL;
        }

        static PyObject *t_FacetsCollector_searchAfter(t_FacetsCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreDoc a1((jobject) NULL);
          ::org::apache::lucene::search::Query a2((jobject) NULL);
          jint a3;
          ::org::apache::lucene::search::Collector a4((jobject) NULL);
          ::org::apache::lucene::search::TopDocs result((jobject) NULL);

          if (!parseArgs(args, "kkkIk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = self->object.searchAfter(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "searchAfter", args);
          return NULL;
        }

        static PyObject *t_FacetsCollector_searchAfter_(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 6:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::ScoreDoc a1((jobject) NULL);
              ::org::apache::lucene::search::Query a2((jobject) NULL);
              ::org::apache::lucene::search::Filter a3((jobject) NULL);
              jint a4;
              ::org::apache::lucene::search::Collector a5((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkkIk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::searchAfter(a0, a1, a2, a3, a4, a5));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 7:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::ScoreDoc a1((jobject) NULL);
              ::org::apache::lucene::search::Query a2((jobject) NULL);
              ::org::apache::lucene::search::Filter a3((jobject) NULL);
              jint a4;
              ::org::apache::lucene::search::Sort a5((jobject) NULL);
              ::org::apache::lucene::search::Collector a6((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkkIkk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::searchAfter(a0, a1, a2, a3, a4, a5, a6));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 9:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::ScoreDoc a1((jobject) NULL);
              ::org::apache::lucene::search::Query a2((jobject) NULL);
              ::org::apache::lucene::search::Filter a3((jobject) NULL);
              jint a4;
              ::org::apache::lucene::search::Sort a5((jobject) NULL);
              jboolean a6;
              jboolean a7;
              ::org::apache::lucene::search::Collector a8((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkkIkZZk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::searchAfter(a0, a1, a2, a3, a4, a5, a6, a7, a8));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "searchAfter_", args);
          return NULL;
        }

        static PyObject *t_FacetsCollector_setNextReader(t_FacetsCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FacetsCollector), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FacetsCollector_setScorer(t_FacetsCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FacetsCollector), (PyObject *) self, "setScorer", args, 2);
        }

        static PyObject *t_FacetsCollector_get__keepScores(t_FacetsCollector *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getKeepScores());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_FacetsCollector_get__matchingDocs(t_FacetsCollector *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getMatchingDocs());
          return ::java::util::t_List::wrap_Object(value);
        }

        static int t_FacetsCollector_set__nextReader(t_FacetsCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FacetsCollector_set__scorer(t_FacetsCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserConstants.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *StandardSyntaxParserConstants::class$ = NULL;
              jmethodID *StandardSyntaxParserConstants::mids$ = NULL;
              bool StandardSyntaxParserConstants::live$ = false;
              jint StandardSyntaxParserConstants::AND = (jint) 0;
              jint StandardSyntaxParserConstants::Boost = (jint) 0;
              jint StandardSyntaxParserConstants::CARAT = (jint) 0;
              jint StandardSyntaxParserConstants::DEFAULT = (jint) 0;
              jint StandardSyntaxParserConstants::EOF = (jint) 0;
              jint StandardSyntaxParserConstants::FUZZY_SLOP = (jint) 0;
              jint StandardSyntaxParserConstants::LPAREN = (jint) 0;
              jint StandardSyntaxParserConstants::MINUS = (jint) 0;
              jint StandardSyntaxParserConstants::NOT = (jint) 0;
              jint StandardSyntaxParserConstants::NUMBER = (jint) 0;
              jint StandardSyntaxParserConstants::OP_COLON = (jint) 0;
              jint StandardSyntaxParserConstants::OP_EQUAL = (jint) 0;
              jint StandardSyntaxParserConstants::OP_LESSTHAN = (jint) 0;
              jint StandardSyntaxParserConstants::OP_LESSTHANEQ = (jint) 0;
              jint StandardSyntaxParserConstants::OP_MORETHAN = (jint) 0;
              jint StandardSyntaxParserConstants::OP_MORETHANEQ = (jint) 0;
              jint StandardSyntaxParserConstants::OR = (jint) 0;
              jint StandardSyntaxParserConstants::PLUS = (jint) 0;
              jint StandardSyntaxParserConstants::QUOTED = (jint) 0;
              jint StandardSyntaxParserConstants::RANGEEX_END = (jint) 0;
              jint StandardSyntaxParserConstants::RANGEEX_START = (jint) 0;
              jint StandardSyntaxParserConstants::RANGEIN_END = (jint) 0;
              jint StandardSyntaxParserConstants::RANGEIN_START = (jint) 0;
              jint StandardSyntaxParserConstants::RANGE_GOOP = (jint) 0;
              jint StandardSyntaxParserConstants::RANGE_QUOTED = (jint) 0;
              jint StandardSyntaxParserConstants::RANGE_TO = (jint) 0;
              jint StandardSyntaxParserConstants::REGEXPTERM = (jint) 0;
              jint StandardSyntaxParserConstants::RPAREN = (jint) 0;
              jint StandardSyntaxParserConstants::Range = (jint) 0;
              jint StandardSyntaxParserConstants::TERM = (jint) 0;
              jint StandardSyntaxParserConstants::_ESCAPED_CHAR = (jint) 0;
              jint StandardSyntaxParserConstants::_NUM_CHAR = (jint) 0;
              jint StandardSyntaxParserConstants::_QUOTED_CHAR = (jint) 0;
              jint StandardSyntaxParserConstants::_TERM_CHAR = (jint) 0;
              jint StandardSyntaxParserConstants::_TERM_START_CHAR = (jint) 0;
              jint StandardSyntaxParserConstants::_WHITESPACE = (jint) 0;
              JArray< ::java::lang::String > *StandardSyntaxParserConstants::tokenImage = NULL;

              jclass StandardSyntaxParserConstants::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserConstants");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  AND = env->getStaticIntField(cls, "AND");
                  Boost = env->getStaticIntField(cls, "Boost");
                  CARAT = env->getStaticIntField(cls, "CARAT");
                  DEFAULT = env->getStaticIntField(cls, "DEFAULT");
                  EOF = env->getStaticIntField(cls, "EOF");
                  FUZZY_SLOP = env->getStaticIntField(cls, "FUZZY_SLOP");
                  LPAREN = env->getStaticIntField(cls, "LPAREN");
                  MINUS = env->getStaticIntField(cls, "MINUS");
                  NOT = env->getStaticIntField(cls, "NOT");
                  NUMBER = env->getStaticIntField(cls, "NUMBER");
                  OP_COLON = env->getStaticIntField(cls, "OP_COLON");
                  OP_EQUAL = env->getStaticIntField(cls, "OP_EQUAL");
                  OP_LESSTHAN = env->getStaticIntField(cls, "OP_LESSTHAN");
                  OP_LESSTHANEQ = env->getStaticIntField(cls, "OP_LESSTHANEQ");
                  OP_MORETHAN = env->getStaticIntField(cls, "OP_MORETHAN");
                  OP_MORETHANEQ = env->getStaticIntField(cls, "OP_MORETHANEQ");
                  OR = env->getStaticIntField(cls, "OR");
                  PLUS = env->getStaticIntField(cls, "PLUS");
                  QUOTED = env->getStaticIntField(cls, "QUOTED");
                  RANGEEX_END = env->getStaticIntField(cls, "RANGEEX_END");
                  RANGEEX_START = env->getStaticIntField(cls, "RANGEEX_START");
                  RANGEIN_END = env->getStaticIntField(cls, "RANGEIN_END");
                  RANGEIN_START = env->getStaticIntField(cls, "RANGEIN_START");
                  RANGE_GOOP = env->getStaticIntField(cls, "RANGE_GOOP");
                  RANGE_QUOTED = env->getStaticIntField(cls, "RANGE_QUOTED");
                  RANGE_TO = env->getStaticIntField(cls, "RANGE_TO");
                  REGEXPTERM = env->getStaticIntField(cls, "REGEXPTERM");
                  RPAREN = env->getStaticIntField(cls, "RPAREN");
                  Range = env->getStaticIntField(cls, "Range");
                  TERM = env->getStaticIntField(cls, "TERM");
                  _ESCAPED_CHAR = env->getStaticIntField(cls, "_ESCAPED_CHAR");
                  _NUM_CHAR = env->getStaticIntField(cls, "_NUM_CHAR");
                  _QUOTED_CHAR = env->getStaticIntField(cls, "_QUOTED_CHAR");
                  _TERM_CHAR = env->getStaticIntField(cls, "_TERM_CHAR");
                  _TERM_START_CHAR = env->getStaticIntField(cls, "_TERM_START_CHAR");
                  _WHITESPACE = env->getStaticIntField(cls, "_WHITESPACE");
                  tokenImage = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "tokenImage", "[Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_StandardSyntaxParserConstants_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardSyntaxParserConstants_instance_(PyTypeObject *type, PyObject *arg);

              static PyMethodDef t_StandardSyntaxParserConstants__methods_[] = {
                DECLARE_METHOD(t_StandardSyntaxParserConstants, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardSyntaxParserConstants, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardSyntaxParserConstants, t_StandardSyntaxParserConstants, ::java::lang::Object, StandardSyntaxParserConstants, abstract_init, 0, 0, 0, 0, 0);

              void t_StandardSyntaxParserConstants::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardSyntaxParserConstants), module, "StandardSyntaxParserConstants", 0);
              }

              void t_StandardSyntaxParserConstants::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "class_", make_descriptor(StandardSyntaxParserConstants::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "wrapfn_", make_descriptor(t_StandardSyntaxParserConstants::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(StandardSyntaxParserConstants::initializeClass);
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "AND", make_descriptor(StandardSyntaxParserConstants::AND));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "Boost", make_descriptor(StandardSyntaxParserConstants::Boost));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "CARAT", make_descriptor(StandardSyntaxParserConstants::CARAT));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "DEFAULT", make_descriptor(StandardSyntaxParserConstants::DEFAULT));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "EOF", make_descriptor(StandardSyntaxParserConstants::EOF));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "FUZZY_SLOP", make_descriptor(StandardSyntaxParserConstants::FUZZY_SLOP));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "LPAREN", make_descriptor(StandardSyntaxParserConstants::LPAREN));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "MINUS", make_descriptor(StandardSyntaxParserConstants::MINUS));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "NOT", make_descriptor(StandardSyntaxParserConstants::NOT));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "NUMBER", make_descriptor(StandardSyntaxParserConstants::NUMBER));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "OP_COLON", make_descriptor(StandardSyntaxParserConstants::OP_COLON));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "OP_EQUAL", make_descriptor(StandardSyntaxParserConstants::OP_EQUAL));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "OP_LESSTHAN", make_descriptor(StandardSyntaxParserConstants::OP_LESSTHAN));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "OP_LESSTHANEQ", make_descriptor(StandardSyntaxParserConstants::OP_LESSTHANEQ));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "OP_MORETHAN", make_descriptor(StandardSyntaxParserConstants::OP_MORETHAN));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "OP_MORETHANEQ", make_descriptor(StandardSyntaxParserConstants::OP_MORETHANEQ));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "OR", make_descriptor(StandardSyntaxParserConstants::OR));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "PLUS", make_descriptor(StandardSyntaxParserConstants::PLUS));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "QUOTED", make_descriptor(StandardSyntaxParserConstants::QUOTED));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RANGEEX_END", make_descriptor(StandardSyntaxParserConstants::RANGEEX_END));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RANGEEX_START", make_descriptor(StandardSyntaxParserConstants::RANGEEX_START));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RANGEIN_END", make_descriptor(StandardSyntaxParserConstants::RANGEIN_END));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RANGEIN_START", make_descriptor(StandardSyntaxParserConstants::RANGEIN_START));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RANGE_GOOP", make_descriptor(StandardSyntaxParserConstants::RANGE_GOOP));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RANGE_QUOTED", make_descriptor(StandardSyntaxParserConstants::RANGE_QUOTED));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RANGE_TO", make_descriptor(StandardSyntaxParserConstants::RANGE_TO));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "REGEXPTERM", make_descriptor(StandardSyntaxParserConstants::REGEXPTERM));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RPAREN", make_descriptor(StandardSyntaxParserConstants::RPAREN));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "Range", make_descriptor(StandardSyntaxParserConstants::Range));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "TERM", make_descriptor(StandardSyntaxParserConstants::TERM));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "_ESCAPED_CHAR", make_descriptor(StandardSyntaxParserConstants::_ESCAPED_CHAR));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "_NUM_CHAR", make_descriptor(StandardSyntaxParserConstants::_NUM_CHAR));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "_QUOTED_CHAR", make_descriptor(StandardSyntaxParserConstants::_QUOTED_CHAR));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "_TERM_CHAR", make_descriptor(StandardSyntaxParserConstants::_TERM_CHAR));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "_TERM_START_CHAR", make_descriptor(StandardSyntaxParserConstants::_TERM_START_CHAR));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "_WHITESPACE", make_descriptor(StandardSyntaxParserConstants::_WHITESPACE));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "tokenImage", make_descriptor(JArray<jstring>(StandardSyntaxParserConstants::tokenImage->this$).wrap()));
              }

              static PyObject *t_StandardSyntaxParserConstants_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardSyntaxParserConstants::initializeClass, 1)))
                  return NULL;
                return t_StandardSyntaxParserConstants::wrap_Object(StandardSyntaxParserConstants(((t_StandardSyntaxParserConstants *) arg)->object.this$));
              }
              static PyObject *t_StandardSyntaxParserConstants_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardSyntaxParserConstants::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/builders/QueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace builders {

              ::java::lang::Class *QueryBuilder::class$ = NULL;
              jmethodID *QueryBuilder::mids$ = NULL;
              bool QueryBuilder::live$ = false;

              jclass QueryBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/builders/QueryBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_build_30efaf9c] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Ljava/lang/Object;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::Object QueryBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_build_30efaf9c], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace builders {
              static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryBuilder_build(t_QueryBuilder *self, PyObject *arg);

              static PyMethodDef t_QueryBuilder__methods_[] = {
                DECLARE_METHOD(t_QueryBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryBuilder, t_QueryBuilder, ::java::lang::Object, QueryBuilder, abstract_init, 0, 0, 0, 0, 0);

              void t_QueryBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryBuilder), module, "QueryBuilder", 0);
              }

              void t_QueryBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "class_", make_descriptor(QueryBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_QueryBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryBuilder::initializeClass, 1)))
                  return NULL;
                return t_QueryBuilder::wrap_Object(QueryBuilder(((t_QueryBuilder *) arg)->object.this$));
              }
              static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_QueryBuilder_build(t_QueryBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::java::lang::t_Object::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonDoubleParser.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/search/FieldCache$DoubleParser.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonDoubleParser::class$ = NULL;
        jmethodID *PythonDoubleParser::mids$ = NULL;
        bool PythonDoubleParser::live$ = false;

        jclass PythonDoubleParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonDoubleParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_parseDouble_7bc03dd6] = env->getMethodID(cls, "parseDouble", "(Lorg/apache/lucene/util/BytesRef;)D");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_termsEnum_fb3ac14e] = env->getMethodID(cls, "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonDoubleParser::PythonDoubleParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonDoubleParser::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonDoubleParser::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonDoubleParser::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonDoubleParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonDoubleParser_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonDoubleParser_init_(t_PythonDoubleParser *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonDoubleParser_finalize(t_PythonDoubleParser *self);
        static PyObject *t_PythonDoubleParser_pythonExtension(t_PythonDoubleParser *self, PyObject *args);
        static jdouble JNICALL t_PythonDoubleParser_parseDouble0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonDoubleParser_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonDoubleParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonDoubleParser_get__self(t_PythonDoubleParser *self, void *data);
        static PyGetSetDef t_PythonDoubleParser__fields_[] = {
          DECLARE_GET_FIELD(t_PythonDoubleParser, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonDoubleParser__methods_[] = {
          DECLARE_METHOD(t_PythonDoubleParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonDoubleParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonDoubleParser, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonDoubleParser, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonDoubleParser, t_PythonDoubleParser, ::java::lang::Object, PythonDoubleParser, t_PythonDoubleParser_init_, 0, 0, t_PythonDoubleParser__fields_, 0, 0);

        void t_PythonDoubleParser::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonDoubleParser), module, "PythonDoubleParser", 1);
        }

        void t_PythonDoubleParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonDoubleParser).tp_dict, "class_", make_descriptor(PythonDoubleParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonDoubleParser).tp_dict, "wrapfn_", make_descriptor(t_PythonDoubleParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonDoubleParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonDoubleParser::initializeClass);
          JNINativeMethod methods[] = {
            { "parseDouble", "(Lorg/apache/lucene/util/BytesRef;)D", (void *) t_PythonDoubleParser_parseDouble0 },
            { "pythonDecRef", "()V", (void *) t_PythonDoubleParser_pythonDecRef1 },
            { "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;", (void *) t_PythonDoubleParser_termsEnum2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonDoubleParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonDoubleParser::initializeClass, 1)))
            return NULL;
          return t_PythonDoubleParser::wrap_Object(PythonDoubleParser(((t_PythonDoubleParser *) arg)->object.this$));
        }
        static PyObject *t_PythonDoubleParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonDoubleParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonDoubleParser_init_(t_PythonDoubleParser *self, PyObject *args, PyObject *kwds)
        {
          PythonDoubleParser object((jobject) NULL);

          INT_CALL(object = PythonDoubleParser());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonDoubleParser_finalize(t_PythonDoubleParser *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonDoubleParser_pythonExtension(t_PythonDoubleParser *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jdouble JNICALL t_PythonDoubleParser_parseDouble0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDoubleParser::mids$[PythonDoubleParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jdouble value;
          PyObject *o0 = ::org::apache::lucene::util::t_BytesRef::wrap_Object(::org::apache::lucene::util::BytesRef(a0));
          PyObject *result = PyObject_CallMethod(obj, "parseDouble", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "D", &value))
          {
            throwTypeError("parseDouble", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jdouble) 0;
        }

        static void JNICALL t_PythonDoubleParser_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDoubleParser::mids$[PythonDoubleParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonDoubleParser::mids$[PythonDoubleParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonDoubleParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDoubleParser::mids$[PythonDoubleParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::index::TermsEnum value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_Terms::wrap_Object(::org::apache::lucene::index::Terms(a0));
          PyObject *result = PyObject_CallMethod(obj, "termsEnum", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &value))
          {
            throwTypeError("termsEnum", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonDoubleParser_get__self(t_PythonDoubleParser *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/PerFieldAnalyzerWrapper.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *PerFieldAnalyzerWrapper::class$ = NULL;
          jmethodID *PerFieldAnalyzerWrapper::mids$ = NULL;
          bool PerFieldAnalyzerWrapper::live$ = false;

          jclass PerFieldAnalyzerWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/PerFieldAnalyzerWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init$_b5f2d646] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/util/Map;)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_getWrappedAnalyzer_29a2299f] = env->getMethodID(cls, "getWrappedAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PerFieldAnalyzerWrapper::PerFieldAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}

          PerFieldAnalyzerWrapper::PerFieldAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::util::Map & a1) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_b5f2d646, a0.this$, a1.this$)) {}

          ::java::lang::String PerFieldAnalyzerWrapper::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_PerFieldAnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PerFieldAnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PerFieldAnalyzerWrapper_init_(t_PerFieldAnalyzerWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PerFieldAnalyzerWrapper_toString(t_PerFieldAnalyzerWrapper *self, PyObject *args);

          static PyMethodDef t_PerFieldAnalyzerWrapper__methods_[] = {
            DECLARE_METHOD(t_PerFieldAnalyzerWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldAnalyzerWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldAnalyzerWrapper, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PerFieldAnalyzerWrapper, t_PerFieldAnalyzerWrapper, ::org::apache::lucene::analysis::AnalyzerWrapper, PerFieldAnalyzerWrapper, t_PerFieldAnalyzerWrapper_init_, 0, 0, 0, 0, 0);

          void t_PerFieldAnalyzerWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(PerFieldAnalyzerWrapper), module, "PerFieldAnalyzerWrapper", 0);
          }

          void t_PerFieldAnalyzerWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PerFieldAnalyzerWrapper).tp_dict, "class_", make_descriptor(PerFieldAnalyzerWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PerFieldAnalyzerWrapper).tp_dict, "wrapfn_", make_descriptor(t_PerFieldAnalyzerWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PerFieldAnalyzerWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PerFieldAnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PerFieldAnalyzerWrapper::initializeClass, 1)))
              return NULL;
            return t_PerFieldAnalyzerWrapper::wrap_Object(PerFieldAnalyzerWrapper(((t_PerFieldAnalyzerWrapper *) arg)->object.this$));
          }
          static PyObject *t_PerFieldAnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PerFieldAnalyzerWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PerFieldAnalyzerWrapper_init_(t_PerFieldAnalyzerWrapper *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                PerFieldAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                {
                  INT_CALL(object = PerFieldAnalyzerWrapper(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                PerFieldAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  INT_CALL(object = PerFieldAnalyzerWrapper(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PerFieldAnalyzerWrapper_toString(t_PerFieldAnalyzerWrapper *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PerFieldAnalyzerWrapper), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$ProximityType.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ProximityQueryNode$ProximityType::class$ = NULL;
              jmethodID *ProximityQueryNode$ProximityType::mids$ = NULL;
              bool ProximityQueryNode$ProximityType::live$ = false;

              jclass ProximityQueryNode$ProximityType::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$ProximityType");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f6618874] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;)V");
                  mids$[mid_init$_4097b5f6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;I)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ProximityQueryNode$ProximityType::ProximityQueryNode$ProximityType(const ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f6618874, a0.this$)) {}

              ProximityQueryNode$ProximityType::ProximityQueryNode$ProximityType(const ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4097b5f6, a0.this$, a1)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ProximityQueryNode$ProximityType_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ProximityQueryNode$ProximityType_instance_(PyTypeObject *type, PyObject *arg);
              static int t_ProximityQueryNode$ProximityType_init_(t_ProximityQueryNode$ProximityType *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_ProximityQueryNode$ProximityType__methods_[] = {
                DECLARE_METHOD(t_ProximityQueryNode$ProximityType, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode$ProximityType, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ProximityQueryNode$ProximityType, t_ProximityQueryNode$ProximityType, ::java::lang::Object, ProximityQueryNode$ProximityType, t_ProximityQueryNode$ProximityType_init_, 0, 0, 0, 0, 0);

              void t_ProximityQueryNode$ProximityType::install(PyObject *module)
              {
                installType(&PY_TYPE(ProximityQueryNode$ProximityType), module, "ProximityQueryNode$ProximityType", 0);
              }

              void t_ProximityQueryNode$ProximityType::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$ProximityType).tp_dict, "class_", make_descriptor(ProximityQueryNode$ProximityType::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$ProximityType).tp_dict, "wrapfn_", make_descriptor(t_ProximityQueryNode$ProximityType::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$ProximityType).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ProximityQueryNode$ProximityType_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ProximityQueryNode$ProximityType::initializeClass, 1)))
                  return NULL;
                return t_ProximityQueryNode$ProximityType::wrap_Object(ProximityQueryNode$ProximityType(((t_ProximityQueryNode$ProximityType *) arg)->object.this$));
              }
              static PyObject *t_ProximityQueryNode$ProximityType_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ProximityQueryNode$ProximityType::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_ProximityQueryNode$ProximityType_init_(t_ProximityQueryNode$ProximityType *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type a0((jobject) NULL);
                    PyTypeObject **p0;
                    ProximityQueryNode$ProximityType object((jobject) NULL);

                    if (!parseArgs(args, "K", ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::parameters_))
                    {
                      INT_CALL(object = ProximityQueryNode$ProximityType(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 2:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type a0((jobject) NULL);
                    PyTypeObject **p0;
                    jint a1;
                    ProximityQueryNode$ProximityType object((jobject) NULL);

                    if (!parseArgs(args, "KI", ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::parameters_, &a1))
                    {
                      INT_CALL(object = ProximityQueryNode$ProximityType(a0, a1));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Counter::class$ = NULL;
        jmethodID *Counter::mids$ = NULL;
        bool Counter::live$ = false;

        jclass Counter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Counter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_addAndGet_0ee6df33] = env->getMethodID(cls, "addAndGet", "(J)J");
            mids$[mid_get_54c6a17a] = env->getMethodID(cls, "get", "()J");
            mids$[mid_newCounter_781dd30a] = env->getStaticMethodID(cls, "newCounter", "()Lorg/apache/lucene/util/Counter;");
            mids$[mid_newCounter_aad2ede1] = env->getStaticMethodID(cls, "newCounter", "(Z)Lorg/apache/lucene/util/Counter;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Counter::Counter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jlong Counter::addAndGet(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_addAndGet_0ee6df33], a0);
        }

        jlong Counter::get() const
        {
          return env->callLongMethod(this$, mids$[mid_get_54c6a17a]);
        }

        Counter Counter::newCounter()
        {
          jclass cls = env->getClass(initializeClass);
          return Counter(env->callStaticObjectMethod(cls, mids$[mid_newCounter_781dd30a]));
        }

        Counter Counter::newCounter(jboolean a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Counter(env->callStaticObjectMethod(cls, mids$[mid_newCounter_aad2ede1], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Counter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Counter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Counter_init_(t_Counter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Counter_addAndGet(t_Counter *self, PyObject *arg);
        static PyObject *t_Counter_get(t_Counter *self);
        static PyObject *t_Counter_newCounter(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_Counter__methods_[] = {
          DECLARE_METHOD(t_Counter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Counter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Counter, addAndGet, METH_O),
          DECLARE_METHOD(t_Counter, get, METH_NOARGS),
          DECLARE_METHOD(t_Counter, newCounter, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Counter, t_Counter, ::java::lang::Object, Counter, t_Counter_init_, 0, 0, 0, 0, 0);

        void t_Counter::install(PyObject *module)
        {
          installType(&PY_TYPE(Counter), module, "Counter", 0);
        }

        void t_Counter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Counter).tp_dict, "class_", make_descriptor(Counter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Counter).tp_dict, "wrapfn_", make_descriptor(t_Counter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Counter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Counter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Counter::initializeClass, 1)))
            return NULL;
          return t_Counter::wrap_Object(Counter(((t_Counter *) arg)->object.this$));
        }
        static PyObject *t_Counter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Counter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Counter_init_(t_Counter *self, PyObject *args, PyObject *kwds)
        {
          Counter object((jobject) NULL);

          INT_CALL(object = Counter());
          self->object = object;

          return 0;
        }

        static PyObject *t_Counter_addAndGet(t_Counter *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.addAndGet(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "addAndGet", arg);
          return NULL;
        }

        static PyObject *t_Counter_get(t_Counter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.get());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_Counter_newCounter(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              Counter result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::util::Counter::newCounter());
              return t_Counter::wrap_Object(result);
            }
            break;
           case 1:
            {
              jboolean a0;
              Counter result((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::Counter::newCounter(a0));
                return t_Counter::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newCounter", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LengthFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LengthFilter::class$ = NULL;
          jmethodID *LengthFilter::mids$ = NULL;
          bool LengthFilter::live$ = false;

          jclass LengthFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LengthFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_46a9ddd5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_init$_c7851d0e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;ZLorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_accept_54c6a16a] = env->getMethodID(cls, "accept", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LengthFilter::LengthFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_46a9ddd5, a0.this$, a1.this$, a2, a3)) {}

          LengthFilter::LengthFilter(const ::org::apache::lucene::util::Version & a0, jboolean a1, const ::org::apache::lucene::analysis::TokenStream & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7851d0e, a0.this$, a1, a2.this$, a3, a4)) {}

          jboolean LengthFilter::accept() const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LengthFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LengthFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LengthFilter_init_(t_LengthFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LengthFilter_accept(t_LengthFilter *self);

          static PyMethodDef t_LengthFilter__methods_[] = {
            DECLARE_METHOD(t_LengthFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LengthFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LengthFilter, accept, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LengthFilter, t_LengthFilter, ::org::apache::lucene::analysis::util::FilteringTokenFilter, LengthFilter, t_LengthFilter_init_, 0, 0, 0, 0, 0);

          void t_LengthFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(LengthFilter), module, "LengthFilter", 0);
          }

          void t_LengthFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LengthFilter).tp_dict, "class_", make_descriptor(LengthFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LengthFilter).tp_dict, "wrapfn_", make_descriptor(t_LengthFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LengthFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LengthFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LengthFilter::initializeClass, 1)))
              return NULL;
            return t_LengthFilter::wrap_Object(LengthFilter(((t_LengthFilter *) arg)->object.this$));
          }
          static PyObject *t_LengthFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LengthFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LengthFilter_init_(t_LengthFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jint a2;
                jint a3;
                LengthFilter object((jobject) NULL);

                if (!parseArgs(args, "KkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  INT_CALL(object = LengthFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean a1;
                ::org::apache::lucene::analysis::TokenStream a2((jobject) NULL);
                jint a3;
                jint a4;
                LengthFilter object((jobject) NULL);

                if (!parseArgs(args, "KZkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = LengthFilter(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LengthFilter_accept(t_LengthFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.accept());
            Py_RETURN_BOOL(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanLightStemFilter::class$ = NULL;
          jmethodID *GermanLightStemFilter::mids$ = NULL;
          bool GermanLightStemFilter::live$ = false;

          jclass GermanLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanLightStemFilter::GermanLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean GermanLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanLightStemFilter_init_(t_GermanLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanLightStemFilter_incrementToken(t_GermanLightStemFilter *self, PyObject *args);

          static PyMethodDef t_GermanLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_GermanLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanLightStemFilter, t_GermanLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, GermanLightStemFilter, t_GermanLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_GermanLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanLightStemFilter), module, "GermanLightStemFilter", 0);
          }

          void t_GermanLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanLightStemFilter).tp_dict, "class_", make_descriptor(GermanLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_GermanLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_GermanLightStemFilter::wrap_Object(GermanLightStemFilter(((t_GermanLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GermanLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanLightStemFilter_init_(t_GermanLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GermanLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GermanLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanLightStemFilter_incrementToken(t_GermanLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GermanLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/BufferedUpdatesStream$ApplyDeletesResult.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *BufferedUpdatesStream$ApplyDeletesResult::class$ = NULL;
        jmethodID *BufferedUpdatesStream$ApplyDeletesResult::mids$ = NULL;
        jfieldID *BufferedUpdatesStream$ApplyDeletesResult::fids$ = NULL;
        bool BufferedUpdatesStream$ApplyDeletesResult::live$ = false;

        jclass BufferedUpdatesStream$ApplyDeletesResult::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/BufferedUpdatesStream$ApplyDeletesResult");

            fids$ = new jfieldID[max_fid];
            fids$[fid_allDeleted] = env->getFieldID(cls, "allDeleted", "Ljava/util/List;");
            fids$[fid_anyDeletes] = env->getFieldID(cls, "anyDeletes", "Z");
            fids$[fid_gen] = env->getFieldID(cls, "gen", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::List BufferedUpdatesStream$ApplyDeletesResult::_get_allDeleted() const
        {
          return ::java::util::List(env->getObjectField(this$, fids$[fid_allDeleted]));
        }

        jboolean BufferedUpdatesStream$ApplyDeletesResult::_get_anyDeletes() const
        {
          return env->getBooleanField(this$, fids$[fid_anyDeletes]);
        }

        jlong BufferedUpdatesStream$ApplyDeletesResult::_get_gen() const
        {
          return env->getLongField(this$, fids$[fid_gen]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_get__allDeleted(t_BufferedUpdatesStream$ApplyDeletesResult *self, void *data);
        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_get__anyDeletes(t_BufferedUpdatesStream$ApplyDeletesResult *self, void *data);
        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_get__gen(t_BufferedUpdatesStream$ApplyDeletesResult *self, void *data);

        static PyGetSetDef t_BufferedUpdatesStream$ApplyDeletesResult__fields_[] = {
          DECLARE_GET_FIELD(t_BufferedUpdatesStream$ApplyDeletesResult, allDeleted),
          DECLARE_GET_FIELD(t_BufferedUpdatesStream$ApplyDeletesResult, anyDeletes),
          DECLARE_GET_FIELD(t_BufferedUpdatesStream$ApplyDeletesResult, gen),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BufferedUpdatesStream$ApplyDeletesResult__methods_[] = {
          DECLARE_METHOD(t_BufferedUpdatesStream$ApplyDeletesResult, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedUpdatesStream$ApplyDeletesResult, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BufferedUpdatesStream$ApplyDeletesResult, t_BufferedUpdatesStream$ApplyDeletesResult, ::java::lang::Object, BufferedUpdatesStream$ApplyDeletesResult, abstract_init, 0, 0, t_BufferedUpdatesStream$ApplyDeletesResult__fields_, 0, 0);

        void t_BufferedUpdatesStream$ApplyDeletesResult::install(PyObject *module)
        {
          installType(&PY_TYPE(BufferedUpdatesStream$ApplyDeletesResult), module, "BufferedUpdatesStream$ApplyDeletesResult", 0);
        }

        void t_BufferedUpdatesStream$ApplyDeletesResult::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BufferedUpdatesStream$ApplyDeletesResult).tp_dict, "class_", make_descriptor(BufferedUpdatesStream$ApplyDeletesResult::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BufferedUpdatesStream$ApplyDeletesResult).tp_dict, "wrapfn_", make_descriptor(t_BufferedUpdatesStream$ApplyDeletesResult::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BufferedUpdatesStream$ApplyDeletesResult).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BufferedUpdatesStream$ApplyDeletesResult::initializeClass, 1)))
            return NULL;
          return t_BufferedUpdatesStream$ApplyDeletesResult::wrap_Object(BufferedUpdatesStream$ApplyDeletesResult(((t_BufferedUpdatesStream$ApplyDeletesResult *) arg)->object.this$));
        }
        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BufferedUpdatesStream$ApplyDeletesResult::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_get__allDeleted(t_BufferedUpdatesStream$ApplyDeletesResult *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object._get_allDeleted());
          return ::java::util::t_List::wrap_Object(value);
        }

        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_get__anyDeletes(t_BufferedUpdatesStream$ApplyDeletesResult *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_anyDeletes());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_get__gen(t_BufferedUpdatesStream$ApplyDeletesResult *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_gen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilteredDocIdSet.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilteredDocIdSet::class$ = NULL;
        jmethodID *FilteredDocIdSet::mids$ = NULL;
        bool FilteredDocIdSet::live$ = false;

        jclass FilteredDocIdSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilteredDocIdSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_52bc98cb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/DocIdSet;)V");
            mids$[mid_bits_03c2457d] = env->getMethodID(cls, "bits", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_match_39c7bd30] = env->getMethodID(cls, "match", "(I)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilteredDocIdSet::FilteredDocIdSet(const ::org::apache::lucene::search::DocIdSet & a0) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_52bc98cb, a0.this$)) {}

        ::org::apache::lucene::util::Bits FilteredDocIdSet::bits() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_bits_03c2457d]));
        }

        jboolean FilteredDocIdSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        ::org::apache::lucene::search::DocIdSetIterator FilteredDocIdSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
        }

        jlong FilteredDocIdSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilteredDocIdSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilteredDocIdSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilteredDocIdSet_init_(t_FilteredDocIdSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilteredDocIdSet_bits(t_FilteredDocIdSet *self, PyObject *args);
        static PyObject *t_FilteredDocIdSet_isCacheable(t_FilteredDocIdSet *self, PyObject *args);
        static PyObject *t_FilteredDocIdSet_iterator(t_FilteredDocIdSet *self, PyObject *args);
        static PyObject *t_FilteredDocIdSet_ramBytesUsed(t_FilteredDocIdSet *self, PyObject *args);
        static PyObject *t_FilteredDocIdSet_get__cacheable(t_FilteredDocIdSet *self, void *data);
        static PyGetSetDef t_FilteredDocIdSet__fields_[] = {
          DECLARE_GET_FIELD(t_FilteredDocIdSet, cacheable),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilteredDocIdSet__methods_[] = {
          DECLARE_METHOD(t_FilteredDocIdSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredDocIdSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredDocIdSet, bits, METH_VARARGS),
          DECLARE_METHOD(t_FilteredDocIdSet, isCacheable, METH_VARARGS),
          DECLARE_METHOD(t_FilteredDocIdSet, iterator, METH_VARARGS),
          DECLARE_METHOD(t_FilteredDocIdSet, ramBytesUsed, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilteredDocIdSet, t_FilteredDocIdSet, ::org::apache::lucene::search::DocIdSet, FilteredDocIdSet, t_FilteredDocIdSet_init_, 0, 0, t_FilteredDocIdSet__fields_, 0, 0);

        void t_FilteredDocIdSet::install(PyObject *module)
        {
          installType(&PY_TYPE(FilteredDocIdSet), module, "FilteredDocIdSet", 0);
        }

        void t_FilteredDocIdSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilteredDocIdSet).tp_dict, "class_", make_descriptor(FilteredDocIdSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilteredDocIdSet).tp_dict, "wrapfn_", make_descriptor(t_FilteredDocIdSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilteredDocIdSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilteredDocIdSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilteredDocIdSet::initializeClass, 1)))
            return NULL;
          return t_FilteredDocIdSet::wrap_Object(FilteredDocIdSet(((t_FilteredDocIdSet *) arg)->object.this$));
        }
        static PyObject *t_FilteredDocIdSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilteredDocIdSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilteredDocIdSet_init_(t_FilteredDocIdSet *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::DocIdSet a0((jobject) NULL);
          FilteredDocIdSet object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSet::initializeClass, &a0))
          {
            INT_CALL(object = FilteredDocIdSet(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilteredDocIdSet_bits(t_FilteredDocIdSet *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.bits());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSet), (PyObject *) self, "bits", args, 2);
        }

        static PyObject *t_FilteredDocIdSet_isCacheable(t_FilteredDocIdSet *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCacheable());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSet), (PyObject *) self, "isCacheable", args, 2);
        }

        static PyObject *t_FilteredDocIdSet_iterator(t_FilteredDocIdSet *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_FilteredDocIdSet_ramBytesUsed(t_FilteredDocIdSet *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSet), (PyObject *) self, "ramBytesUsed", args, 2);
        }

        static PyObject *t_FilteredDocIdSet_get__cacheable(t_FilteredDocIdSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/EliasFanoDocIdSet.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *EliasFanoDocIdSet::class$ = NULL;
          jmethodID *EliasFanoDocIdSet::mids$ = NULL;
          bool EliasFanoDocIdSet::live$ = false;

          jclass EliasFanoDocIdSet::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/EliasFanoDocIdSet");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_encodeFromDisi_c2b5607d] = env->getMethodID(cls, "encodeFromDisi", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
              mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_sufficientlySmallerThanBitSet_a7e12ca8] = env->getStaticMethodID(cls, "sufficientlySmallerThanBitSet", "(JJ)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EliasFanoDocIdSet::EliasFanoDocIdSet(jint a0, jint a1) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

          void EliasFanoDocIdSet::encodeFromDisi(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_encodeFromDisi_c2b5607d], a0.this$);
          }

          jboolean EliasFanoDocIdSet::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint EliasFanoDocIdSet::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jboolean EliasFanoDocIdSet::isCacheable() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
          }

          ::org::apache::lucene::search::DocIdSetIterator EliasFanoDocIdSet::iterator() const
          {
            return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
          }

          jlong EliasFanoDocIdSet::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jboolean EliasFanoDocIdSet::sufficientlySmallerThanBitSet(jlong a0, jlong a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_sufficientlySmallerThanBitSet_a7e12ca8], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_EliasFanoDocIdSet_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EliasFanoDocIdSet_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EliasFanoDocIdSet_init_(t_EliasFanoDocIdSet *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EliasFanoDocIdSet_encodeFromDisi(t_EliasFanoDocIdSet *self, PyObject *arg);
          static PyObject *t_EliasFanoDocIdSet_equals(t_EliasFanoDocIdSet *self, PyObject *args);
          static PyObject *t_EliasFanoDocIdSet_hashCode(t_EliasFanoDocIdSet *self, PyObject *args);
          static PyObject *t_EliasFanoDocIdSet_isCacheable(t_EliasFanoDocIdSet *self, PyObject *args);
          static PyObject *t_EliasFanoDocIdSet_iterator(t_EliasFanoDocIdSet *self, PyObject *args);
          static PyObject *t_EliasFanoDocIdSet_ramBytesUsed(t_EliasFanoDocIdSet *self, PyObject *args);
          static PyObject *t_EliasFanoDocIdSet_sufficientlySmallerThanBitSet(PyTypeObject *type, PyObject *args);
          static PyObject *t_EliasFanoDocIdSet_get__cacheable(t_EliasFanoDocIdSet *self, void *data);
          static PyGetSetDef t_EliasFanoDocIdSet__fields_[] = {
            DECLARE_GET_FIELD(t_EliasFanoDocIdSet, cacheable),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_EliasFanoDocIdSet__methods_[] = {
            DECLARE_METHOD(t_EliasFanoDocIdSet, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EliasFanoDocIdSet, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EliasFanoDocIdSet, encodeFromDisi, METH_O),
            DECLARE_METHOD(t_EliasFanoDocIdSet, equals, METH_VARARGS),
            DECLARE_METHOD(t_EliasFanoDocIdSet, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_EliasFanoDocIdSet, isCacheable, METH_VARARGS),
            DECLARE_METHOD(t_EliasFanoDocIdSet, iterator, METH_VARARGS),
            DECLARE_METHOD(t_EliasFanoDocIdSet, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_EliasFanoDocIdSet, sufficientlySmallerThanBitSet, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EliasFanoDocIdSet, t_EliasFanoDocIdSet, ::org::apache::lucene::search::DocIdSet, EliasFanoDocIdSet, t_EliasFanoDocIdSet_init_, 0, 0, t_EliasFanoDocIdSet__fields_, 0, 0);

          void t_EliasFanoDocIdSet::install(PyObject *module)
          {
            installType(&PY_TYPE(EliasFanoDocIdSet), module, "EliasFanoDocIdSet", 0);
          }

          void t_EliasFanoDocIdSet::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EliasFanoDocIdSet).tp_dict, "class_", make_descriptor(EliasFanoDocIdSet::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EliasFanoDocIdSet).tp_dict, "wrapfn_", make_descriptor(t_EliasFanoDocIdSet::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EliasFanoDocIdSet).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EliasFanoDocIdSet_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EliasFanoDocIdSet::initializeClass, 1)))
              return NULL;
            return t_EliasFanoDocIdSet::wrap_Object(EliasFanoDocIdSet(((t_EliasFanoDocIdSet *) arg)->object.this$));
          }
          static PyObject *t_EliasFanoDocIdSet_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EliasFanoDocIdSet::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EliasFanoDocIdSet_init_(t_EliasFanoDocIdSet *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            EliasFanoDocIdSet object((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              INT_CALL(object = EliasFanoDocIdSet(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EliasFanoDocIdSet_encodeFromDisi(t_EliasFanoDocIdSet *self, PyObject *arg)
          {
            ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
            {
              OBJ_CALL(self->object.encodeFromDisi(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "encodeFromDisi", arg);
            return NULL;
          }

          static PyObject *t_EliasFanoDocIdSet_equals(t_EliasFanoDocIdSet *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(EliasFanoDocIdSet), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_EliasFanoDocIdSet_hashCode(t_EliasFanoDocIdSet *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(EliasFanoDocIdSet), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_EliasFanoDocIdSet_isCacheable(t_EliasFanoDocIdSet *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.isCacheable());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(EliasFanoDocIdSet), (PyObject *) self, "isCacheable", args, 2);
          }

          static PyObject *t_EliasFanoDocIdSet_iterator(t_EliasFanoDocIdSet *self, PyObject *args)
          {
            ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.iterator());
              return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(EliasFanoDocIdSet), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_EliasFanoDocIdSet_ramBytesUsed(t_EliasFanoDocIdSet *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(EliasFanoDocIdSet), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_EliasFanoDocIdSet_sufficientlySmallerThanBitSet(PyTypeObject *type, PyObject *args)
          {
            jlong a0;
            jlong a1;
            jboolean result;

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::EliasFanoDocIdSet::sufficientlySmallerThanBitSet(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "sufficientlySmallerThanBitSet", args);
            return NULL;
          }

          static PyObject *t_EliasFanoDocIdSet_get__cacheable(t_EliasFanoDocIdSet *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isCacheable());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/OutputStreamIndexOutput.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *OutputStreamIndexOutput::class$ = NULL;
        jmethodID *OutputStreamIndexOutput::mids$ = NULL;
        bool OutputStreamIndexOutput::live$ = false;

        jclass OutputStreamIndexOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/OutputStreamIndexOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_20acd1f6] = env->getMethodID(cls, "<init>", "(Ljava/io/OutputStream;I)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
            mids$[mid_getChecksum_54c6a17a] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OutputStreamIndexOutput::OutputStreamIndexOutput(const ::java::io::OutputStream & a0, jint a1) : ::org::apache::lucene::store::IndexOutput(env->newObject(initializeClass, &mids$, mid_init$_20acd1f6, a0.this$, a1)) {}

        void OutputStreamIndexOutput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void OutputStreamIndexOutput::flush() const
        {
          env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
        }

        jlong OutputStreamIndexOutput::getChecksum() const
        {
          return env->callLongMethod(this$, mids$[mid_getChecksum_54c6a17a]);
        }

        jlong OutputStreamIndexOutput::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_54c6a17a]);
        }

        void OutputStreamIndexOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_b2271687], a0);
        }

        void OutputStreamIndexOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_OutputStreamIndexOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OutputStreamIndexOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OutputStreamIndexOutput_init_(t_OutputStreamIndexOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OutputStreamIndexOutput_close(t_OutputStreamIndexOutput *self, PyObject *args);
        static PyObject *t_OutputStreamIndexOutput_flush(t_OutputStreamIndexOutput *self, PyObject *args);
        static PyObject *t_OutputStreamIndexOutput_getChecksum(t_OutputStreamIndexOutput *self, PyObject *args);
        static PyObject *t_OutputStreamIndexOutput_getFilePointer(t_OutputStreamIndexOutput *self, PyObject *args);
        static PyObject *t_OutputStreamIndexOutput_writeByte(t_OutputStreamIndexOutput *self, PyObject *args);
        static PyObject *t_OutputStreamIndexOutput_writeBytes(t_OutputStreamIndexOutput *self, PyObject *args);
        static PyObject *t_OutputStreamIndexOutput_get__checksum(t_OutputStreamIndexOutput *self, void *data);
        static PyObject *t_OutputStreamIndexOutput_get__filePointer(t_OutputStreamIndexOutput *self, void *data);
        static PyGetSetDef t_OutputStreamIndexOutput__fields_[] = {
          DECLARE_GET_FIELD(t_OutputStreamIndexOutput, checksum),
          DECLARE_GET_FIELD(t_OutputStreamIndexOutput, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_OutputStreamIndexOutput__methods_[] = {
          DECLARE_METHOD(t_OutputStreamIndexOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, close, METH_VARARGS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, flush, METH_VARARGS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, getChecksum, METH_VARARGS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, getFilePointer, METH_VARARGS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OutputStreamIndexOutput, t_OutputStreamIndexOutput, ::org::apache::lucene::store::IndexOutput, OutputStreamIndexOutput, t_OutputStreamIndexOutput_init_, 0, 0, t_OutputStreamIndexOutput__fields_, 0, 0);

        void t_OutputStreamIndexOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(OutputStreamIndexOutput), module, "OutputStreamIndexOutput", 0);
        }

        void t_OutputStreamIndexOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OutputStreamIndexOutput).tp_dict, "class_", make_descriptor(OutputStreamIndexOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OutputStreamIndexOutput).tp_dict, "wrapfn_", make_descriptor(t_OutputStreamIndexOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OutputStreamIndexOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OutputStreamIndexOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OutputStreamIndexOutput::initializeClass, 1)))
            return NULL;
          return t_OutputStreamIndexOutput::wrap_Object(OutputStreamIndexOutput(((t_OutputStreamIndexOutput *) arg)->object.this$));
        }
        static PyObject *t_OutputStreamIndexOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OutputStreamIndexOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OutputStreamIndexOutput_init_(t_OutputStreamIndexOutput *self, PyObject *args, PyObject *kwds)
        {
          ::java::io::OutputStream a0((jobject) NULL);
          jint a1;
          OutputStreamIndexOutput object((jobject) NULL);

          if (!parseArgs(args, "kI", ::java::io::OutputStream::initializeClass, &a0, &a1))
          {
            INT_CALL(object = OutputStreamIndexOutput(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OutputStreamIndexOutput_close(t_OutputStreamIndexOutput *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(OutputStreamIndexOutput), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_OutputStreamIndexOutput_flush(t_OutputStreamIndexOutput *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.flush());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(OutputStreamIndexOutput), (PyObject *) self, "flush", args, 2);
        }

        static PyObject *t_OutputStreamIndexOutput_getChecksum(t_OutputStreamIndexOutput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getChecksum());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(OutputStreamIndexOutput), (PyObject *) self, "getChecksum", args, 2);
        }

        static PyObject *t_OutputStreamIndexOutput_getFilePointer(t_OutputStreamIndexOutput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFilePointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(OutputStreamIndexOutput), (PyObject *) self, "getFilePointer", args, 2);
        }

        static PyObject *t_OutputStreamIndexOutput_writeByte(t_OutputStreamIndexOutput *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(OutputStreamIndexOutput), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_OutputStreamIndexOutput_writeBytes(t_OutputStreamIndexOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(OutputStreamIndexOutput), (PyObject *) self, "writeBytes", args, 2);
        }

        static PyObject *t_OutputStreamIndexOutput_get__checksum(t_OutputStreamIndexOutput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_OutputStreamIndexOutput_get__filePointer(t_OutputStreamIndexOutput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/LovinsStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *LovinsStemmer::class$ = NULL;
        jmethodID *LovinsStemmer::mids$ = NULL;
        bool LovinsStemmer::live$ = false;

        jclass LovinsStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/LovinsStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LovinsStemmer::LovinsStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean LovinsStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint LovinsStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean LovinsStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_LovinsStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LovinsStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LovinsStemmer_init_(t_LovinsStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LovinsStemmer_equals(t_LovinsStemmer *self, PyObject *args);
        static PyObject *t_LovinsStemmer_hashCode(t_LovinsStemmer *self, PyObject *args);
        static PyObject *t_LovinsStemmer_stem(t_LovinsStemmer *self, PyObject *args);

        static PyMethodDef t_LovinsStemmer__methods_[] = {
          DECLARE_METHOD(t_LovinsStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LovinsStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LovinsStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_LovinsStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_LovinsStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LovinsStemmer, t_LovinsStemmer, ::org::tartarus::snowball::SnowballProgram, LovinsStemmer, t_LovinsStemmer_init_, 0, 0, 0, 0, 0);

        void t_LovinsStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(LovinsStemmer), module, "LovinsStemmer", 0);
        }

        void t_LovinsStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LovinsStemmer).tp_dict, "class_", make_descriptor(LovinsStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LovinsStemmer).tp_dict, "wrapfn_", make_descriptor(t_LovinsStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LovinsStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LovinsStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LovinsStemmer::initializeClass, 1)))
            return NULL;
          return t_LovinsStemmer::wrap_Object(LovinsStemmer(((t_LovinsStemmer *) arg)->object.this$));
        }
        static PyObject *t_LovinsStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LovinsStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LovinsStemmer_init_(t_LovinsStemmer *self, PyObject *args, PyObject *kwds)
        {
          LovinsStemmer object((jobject) NULL);

          INT_CALL(object = LovinsStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_LovinsStemmer_equals(t_LovinsStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(LovinsStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_LovinsStemmer_hashCode(t_LovinsStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(LovinsStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_LovinsStemmer_stem(t_LovinsStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(LovinsStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$Bytes.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$Bytes::class$ = NULL;
        jmethodID *FieldCache$Bytes::mids$ = NULL;
        bool FieldCache$Bytes::live$ = false;
        FieldCache$Bytes *FieldCache$Bytes::EMPTY = NULL;

        jclass FieldCache$Bytes::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$Bytes");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_39c7bd28] = env->getMethodID(cls, "get", "(I)B");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new FieldCache$Bytes(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/FieldCache$Bytes;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$Bytes::FieldCache$Bytes() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jbyte FieldCache$Bytes::get(jint a0) const
        {
          return env->callByteMethod(this$, mids$[mid_get_39c7bd28], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$Bytes_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Bytes_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$Bytes_init_(t_FieldCache$Bytes *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$Bytes_get(t_FieldCache$Bytes *self, PyObject *arg);

        static PyMethodDef t_FieldCache$Bytes__methods_[] = {
          DECLARE_METHOD(t_FieldCache$Bytes, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Bytes, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Bytes, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$Bytes, t_FieldCache$Bytes, ::java::lang::Object, FieldCache$Bytes, t_FieldCache$Bytes_init_, 0, 0, 0, 0, 0);

        void t_FieldCache$Bytes::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$Bytes), module, "FieldCache$Bytes", 0);
        }

        void t_FieldCache$Bytes::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$Bytes).tp_dict, "class_", make_descriptor(FieldCache$Bytes::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$Bytes).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$Bytes::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$Bytes).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCache$Bytes::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCache$Bytes).tp_dict, "EMPTY", make_descriptor(t_FieldCache$Bytes::wrap_Object(*FieldCache$Bytes::EMPTY)));
        }

        static PyObject *t_FieldCache$Bytes_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$Bytes::initializeClass, 1)))
            return NULL;
          return t_FieldCache$Bytes::wrap_Object(FieldCache$Bytes(((t_FieldCache$Bytes *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$Bytes_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$Bytes::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$Bytes_init_(t_FieldCache$Bytes *self, PyObject *args, PyObject *kwds)
        {
          FieldCache$Bytes object((jobject) NULL);

          INT_CALL(object = FieldCache$Bytes());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCache$Bytes_get(t_FieldCache$Bytes *self, PyObject *arg)
        {
          jint a0;
          jbyte result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/BoostQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *BoostQueryNodeProcessor::class$ = NULL;
              jmethodID *BoostQueryNodeProcessor::mids$ = NULL;
              bool BoostQueryNodeProcessor::live$ = false;

              jclass BoostQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/BoostQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BoostQueryNodeProcessor::BoostQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_BoostQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BoostQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BoostQueryNodeProcessor_init_(t_BoostQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_BoostQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_BoostQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BoostQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BoostQueryNodeProcessor, t_BoostQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, BoostQueryNodeProcessor, t_BoostQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_BoostQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(BoostQueryNodeProcessor), module, "BoostQueryNodeProcessor", 0);
              }

              void t_BoostQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BoostQueryNodeProcessor).tp_dict, "class_", make_descriptor(BoostQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BoostQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_BoostQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BoostQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BoostQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BoostQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_BoostQueryNodeProcessor::wrap_Object(BoostQueryNodeProcessor(((t_BoostQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_BoostQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BoostQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BoostQueryNodeProcessor_init_(t_BoostQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                BoostQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = BoostQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RateLimiter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RateLimiter::class$ = NULL;
        jmethodID *RateLimiter::mids$ = NULL;
        bool RateLimiter::live$ = false;

        jclass RateLimiter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RateLimiter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getMbPerSec_54c6a174] = env->getMethodID(cls, "getMbPerSec", "()D");
            mids$[mid_getMinPauseCheckBytes_54c6a17a] = env->getMethodID(cls, "getMinPauseCheckBytes", "()J");
            mids$[mid_pause_0ee6df33] = env->getMethodID(cls, "pause", "(J)J");
            mids$[mid_setMbPerSec_5d1c7645] = env->getMethodID(cls, "setMbPerSec", "(D)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RateLimiter::RateLimiter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jdouble RateLimiter::getMbPerSec() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMbPerSec_54c6a174]);
        }

        jlong RateLimiter::getMinPauseCheckBytes() const
        {
          return env->callLongMethod(this$, mids$[mid_getMinPauseCheckBytes_54c6a17a]);
        }

        jlong RateLimiter::pause(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_pause_0ee6df33], a0);
        }

        void RateLimiter::setMbPerSec(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMbPerSec_5d1c7645], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/store/RateLimiter$SimpleRateLimiter.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RateLimiter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RateLimiter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RateLimiter_init_(t_RateLimiter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RateLimiter_getMbPerSec(t_RateLimiter *self);
        static PyObject *t_RateLimiter_getMinPauseCheckBytes(t_RateLimiter *self);
        static PyObject *t_RateLimiter_pause(t_RateLimiter *self, PyObject *arg);
        static PyObject *t_RateLimiter_setMbPerSec(t_RateLimiter *self, PyObject *arg);
        static PyObject *t_RateLimiter_get__mbPerSec(t_RateLimiter *self, void *data);
        static int t_RateLimiter_set__mbPerSec(t_RateLimiter *self, PyObject *arg, void *data);
        static PyObject *t_RateLimiter_get__minPauseCheckBytes(t_RateLimiter *self, void *data);
        static PyGetSetDef t_RateLimiter__fields_[] = {
          DECLARE_GETSET_FIELD(t_RateLimiter, mbPerSec),
          DECLARE_GET_FIELD(t_RateLimiter, minPauseCheckBytes),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RateLimiter__methods_[] = {
          DECLARE_METHOD(t_RateLimiter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimiter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimiter, getMbPerSec, METH_NOARGS),
          DECLARE_METHOD(t_RateLimiter, getMinPauseCheckBytes, METH_NOARGS),
          DECLARE_METHOD(t_RateLimiter, pause, METH_O),
          DECLARE_METHOD(t_RateLimiter, setMbPerSec, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RateLimiter, t_RateLimiter, ::java::lang::Object, RateLimiter, t_RateLimiter_init_, 0, 0, t_RateLimiter__fields_, 0, 0);

        void t_RateLimiter::install(PyObject *module)
        {
          installType(&PY_TYPE(RateLimiter), module, "RateLimiter", 0);
          PyDict_SetItemString(PY_TYPE(RateLimiter).tp_dict, "SimpleRateLimiter", make_descriptor(&PY_TYPE(RateLimiter$SimpleRateLimiter)));
        }

        void t_RateLimiter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RateLimiter).tp_dict, "class_", make_descriptor(RateLimiter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RateLimiter).tp_dict, "wrapfn_", make_descriptor(t_RateLimiter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RateLimiter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RateLimiter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RateLimiter::initializeClass, 1)))
            return NULL;
          return t_RateLimiter::wrap_Object(RateLimiter(((t_RateLimiter *) arg)->object.this$));
        }
        static PyObject *t_RateLimiter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RateLimiter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RateLimiter_init_(t_RateLimiter *self, PyObject *args, PyObject *kwds)
        {
          RateLimiter object((jobject) NULL);

          INT_CALL(object = RateLimiter());
          self->object = object;

          return 0;
        }

        static PyObject *t_RateLimiter_getMbPerSec(t_RateLimiter *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMbPerSec());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_RateLimiter_getMinPauseCheckBytes(t_RateLimiter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getMinPauseCheckBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RateLimiter_pause(t_RateLimiter *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.pause(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "pause", arg);
          return NULL;
        }

        static PyObject *t_RateLimiter_setMbPerSec(t_RateLimiter *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setMbPerSec(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMbPerSec", arg);
          return NULL;
        }

        static PyObject *t_RateLimiter_get__mbPerSec(t_RateLimiter *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMbPerSec());
          return PyFloat_FromDouble((double) value);
        }
        static int t_RateLimiter_set__mbPerSec(t_RateLimiter *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMbPerSec(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mbPerSec", arg);
          return -1;
        }

        static PyObject *t_RateLimiter_get__minPauseCheckBytes(t_RateLimiter *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getMinPauseCheckBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/term/TermDistinctValuesCollector.h"
#include "org/apache/lucene/search/grouping/term/TermDistinctValuesCollector$GroupCount.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "java/util/List.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {

            ::java::lang::Class *TermDistinctValuesCollector::class$ = NULL;
            jmethodID *TermDistinctValuesCollector::mids$ = NULL;
            bool TermDistinctValuesCollector::live$ = false;

            jclass TermDistinctValuesCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/term/TermDistinctValuesCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_e9bd6d29] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/util/Collection;)V");
                mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
                mids$[mid_getGroups_87851566] = env->getMethodID(cls, "getGroups", "()Ljava/util/List;");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermDistinctValuesCollector::TermDistinctValuesCollector(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2) : ::org::apache::lucene::search::grouping::AbstractDistinctValuesCollector(env->newObject(initializeClass, &mids$, mid_init$_e9bd6d29, a0.this$, a1.this$, a2.this$)) {}

            void TermDistinctValuesCollector::collect(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
            }

            ::java::util::List TermDistinctValuesCollector::getGroups() const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getGroups_87851566]));
            }

            void TermDistinctValuesCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {
            static PyObject *t_TermDistinctValuesCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermDistinctValuesCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermDistinctValuesCollector_of_(t_TermDistinctValuesCollector *self, PyObject *args);
            static int t_TermDistinctValuesCollector_init_(t_TermDistinctValuesCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TermDistinctValuesCollector_collect(t_TermDistinctValuesCollector *self, PyObject *args);
            static PyObject *t_TermDistinctValuesCollector_getGroups(t_TermDistinctValuesCollector *self, PyObject *args);
            static PyObject *t_TermDistinctValuesCollector_setNextReader(t_TermDistinctValuesCollector *self, PyObject *args);
            static PyObject *t_TermDistinctValuesCollector_get__groups(t_TermDistinctValuesCollector *self, void *data);
            static int t_TermDistinctValuesCollector_set__nextReader(t_TermDistinctValuesCollector *self, PyObject *arg, void *data);
            static PyObject *t_TermDistinctValuesCollector_get__parameters_(t_TermDistinctValuesCollector *self, void *data);
            static PyGetSetDef t_TermDistinctValuesCollector__fields_[] = {
              DECLARE_GET_FIELD(t_TermDistinctValuesCollector, groups),
              DECLARE_SET_FIELD(t_TermDistinctValuesCollector, nextReader),
              DECLARE_GET_FIELD(t_TermDistinctValuesCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TermDistinctValuesCollector__methods_[] = {
              DECLARE_METHOD(t_TermDistinctValuesCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermDistinctValuesCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermDistinctValuesCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_TermDistinctValuesCollector, collect, METH_VARARGS),
              DECLARE_METHOD(t_TermDistinctValuesCollector, getGroups, METH_VARARGS),
              DECLARE_METHOD(t_TermDistinctValuesCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermDistinctValuesCollector, t_TermDistinctValuesCollector, ::org::apache::lucene::search::grouping::AbstractDistinctValuesCollector, TermDistinctValuesCollector, t_TermDistinctValuesCollector_init_, 0, 0, t_TermDistinctValuesCollector__fields_, 0, 0);
            PyObject *t_TermDistinctValuesCollector::wrap_Object(const TermDistinctValuesCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermDistinctValuesCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermDistinctValuesCollector *self = (t_TermDistinctValuesCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_TermDistinctValuesCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermDistinctValuesCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermDistinctValuesCollector *self = (t_TermDistinctValuesCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_TermDistinctValuesCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(TermDistinctValuesCollector), module, "TermDistinctValuesCollector", 0);
              PyDict_SetItemString(PY_TYPE(TermDistinctValuesCollector).tp_dict, "GroupCount", make_descriptor(&PY_TYPE(TermDistinctValuesCollector$GroupCount)));
            }

            void t_TermDistinctValuesCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermDistinctValuesCollector).tp_dict, "class_", make_descriptor(TermDistinctValuesCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermDistinctValuesCollector).tp_dict, "wrapfn_", make_descriptor(t_TermDistinctValuesCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermDistinctValuesCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermDistinctValuesCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermDistinctValuesCollector::initializeClass, 1)))
                return NULL;
              return t_TermDistinctValuesCollector::wrap_Object(TermDistinctValuesCollector(((t_TermDistinctValuesCollector *) arg)->object.this$));
            }
            static PyObject *t_TermDistinctValuesCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermDistinctValuesCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TermDistinctValuesCollector_of_(t_TermDistinctValuesCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_TermDistinctValuesCollector_init_(t_TermDistinctValuesCollector *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::util::Collection a2((jobject) NULL);
              PyTypeObject **p2;
              TermDistinctValuesCollector object((jobject) NULL);

              if (!parseArgs(args, "ssK", ::java::util::Collection::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Collection::parameters_))
              {
                INT_CALL(object = TermDistinctValuesCollector(a0, a1, a2));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::search::grouping::term::PY_TYPE(TermDistinctValuesCollector$GroupCount);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TermDistinctValuesCollector_collect(t_TermDistinctValuesCollector *self, PyObject *args)
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.collect(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TermDistinctValuesCollector), (PyObject *) self, "collect", args, 2);
            }

            static PyObject *t_TermDistinctValuesCollector_getGroups(t_TermDistinctValuesCollector *self, PyObject *args)
            {
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getGroups());
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::grouping::term::PY_TYPE(TermDistinctValuesCollector$GroupCount));
              }

              return callSuper(&PY_TYPE(TermDistinctValuesCollector), (PyObject *) self, "getGroups", args, 2);
            }

            static PyObject *t_TermDistinctValuesCollector_setNextReader(t_TermDistinctValuesCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TermDistinctValuesCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_TermDistinctValuesCollector_get__parameters_(t_TermDistinctValuesCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static PyObject *t_TermDistinctValuesCollector_get__groups(t_TermDistinctValuesCollector *self, void *data)
            {
              ::java::util::List value((jobject) NULL);
              OBJ_CALL(value = self->object.getGroups());
              return ::java::util::t_List::wrap_Object(value);
            }

            static int t_TermDistinctValuesCollector_set__nextReader(t_TermDistinctValuesCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Outputs.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Outputs::class$ = NULL;
          jmethodID *Outputs::mids$ = NULL;
          bool Outputs::live$ = false;

          jclass Outputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Outputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_add_537d5bdf] = env->getMethodID(cls, "add", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_common_537d5bdf] = env->getMethodID(cls, "common", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_getNoOutput_846352c3] = env->getMethodID(cls, "getNoOutput", "()Ljava/lang/Object;");
              mids$[mid_merge_537d5bdf] = env->getMethodID(cls, "merge", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_outputToString_c9db4eed] = env->getMethodID(cls, "outputToString", "(Ljava/lang/Object;)Ljava/lang/String;");
              mids$[mid_ramBytesUsed_290588f2] = env->getMethodID(cls, "ramBytesUsed", "(Ljava/lang/Object;)J");
              mids$[mid_read_7d5f44e2] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Ljava/lang/Object;");
              mids$[mid_readFinalOutput_7d5f44e2] = env->getMethodID(cls, "readFinalOutput", "(Lorg/apache/lucene/store/DataInput;)Ljava/lang/Object;");
              mids$[mid_skipFinalOutput_f5d6a551] = env->getMethodID(cls, "skipFinalOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_skipOutput_f5d6a551] = env->getMethodID(cls, "skipOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_subtract_537d5bdf] = env->getMethodID(cls, "subtract", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_write_208ac1fb] = env->getMethodID(cls, "write", "(Ljava/lang/Object;Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_writeFinalOutput_208ac1fb] = env->getMethodID(cls, "writeFinalOutput", "(Ljava/lang/Object;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Outputs::Outputs() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::Object Outputs::add(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_add_537d5bdf], a0.this$, a1.this$));
          }

          ::java::lang::Object Outputs::common(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_common_537d5bdf], a0.this$, a1.this$));
          }

          ::java::lang::Object Outputs::getNoOutput() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getNoOutput_846352c3]));
          }

          ::java::lang::Object Outputs::merge(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_merge_537d5bdf], a0.this$, a1.this$));
          }

          ::java::lang::String Outputs::outputToString(const ::java::lang::Object & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_c9db4eed], a0.this$));
          }

          jlong Outputs::ramBytesUsed(const ::java::lang::Object & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_290588f2], a0.this$);
          }

          ::java::lang::Object Outputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_read_7d5f44e2], a0.this$));
          }

          ::java::lang::Object Outputs::readFinalOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_readFinalOutput_7d5f44e2], a0.this$));
          }

          void Outputs::skipFinalOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipFinalOutput_f5d6a551], a0.this$);
          }

          void Outputs::skipOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipOutput_f5d6a551], a0.this$);
          }

          ::java::lang::Object Outputs::subtract(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_subtract_537d5bdf], a0.this$, a1.this$));
          }

          void Outputs::write(const ::java::lang::Object & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_208ac1fb], a0.this$, a1.this$);
          }

          void Outputs::writeFinalOutput(const ::java::lang::Object & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_writeFinalOutput_208ac1fb], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Outputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Outputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Outputs_of_(t_Outputs *self, PyObject *args);
          static int t_Outputs_init_(t_Outputs *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Outputs_add(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_common(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_getNoOutput(t_Outputs *self);
          static PyObject *t_Outputs_merge(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_outputToString(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_ramBytesUsed(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_read(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_readFinalOutput(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_skipFinalOutput(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_skipOutput(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_subtract(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_write(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_writeFinalOutput(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_get__noOutput(t_Outputs *self, void *data);
          static PyObject *t_Outputs_get__parameters_(t_Outputs *self, void *data);
          static PyGetSetDef t_Outputs__fields_[] = {
            DECLARE_GET_FIELD(t_Outputs, noOutput),
            DECLARE_GET_FIELD(t_Outputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Outputs__methods_[] = {
            DECLARE_METHOD(t_Outputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Outputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Outputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, add, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, common, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, getNoOutput, METH_NOARGS),
            DECLARE_METHOD(t_Outputs, merge, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, outputToString, METH_O),
            DECLARE_METHOD(t_Outputs, ramBytesUsed, METH_O),
            DECLARE_METHOD(t_Outputs, read, METH_O),
            DECLARE_METHOD(t_Outputs, readFinalOutput, METH_O),
            DECLARE_METHOD(t_Outputs, skipFinalOutput, METH_O),
            DECLARE_METHOD(t_Outputs, skipOutput, METH_O),
            DECLARE_METHOD(t_Outputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, write, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, writeFinalOutput, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Outputs, t_Outputs, ::java::lang::Object, Outputs, t_Outputs_init_, 0, 0, t_Outputs__fields_, 0, 0);
          PyObject *t_Outputs::wrap_Object(const Outputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Outputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Outputs *self = (t_Outputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Outputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Outputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Outputs *self = (t_Outputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Outputs::install(PyObject *module)
          {
            installType(&PY_TYPE(Outputs), module, "Outputs", 0);
          }

          void t_Outputs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Outputs).tp_dict, "class_", make_descriptor(Outputs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Outputs).tp_dict, "wrapfn_", make_descriptor(t_Outputs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Outputs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Outputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Outputs::initializeClass, 1)))
              return NULL;
            return t_Outputs::wrap_Object(Outputs(((t_Outputs *) arg)->object.this$));
          }
          static PyObject *t_Outputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Outputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Outputs_of_(t_Outputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Outputs_init_(t_Outputs *self, PyObject *args, PyObject *kwds)
          {
            Outputs object((jobject) NULL);

            INT_CALL(object = Outputs());
            self->object = object;

            return 0;
          }

          static PyObject *t_Outputs_add(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_Outputs_common(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "common", args);
            return NULL;
          }

          static PyObject *t_Outputs_getNoOutput(t_Outputs *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.getNoOutput());
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_Outputs_merge(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(result = self->object.merge(a0, a1));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "merge", args);
            return NULL;
          }

          static PyObject *t_Outputs_outputToString(t_Outputs *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "O", self->parameters[0], &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "outputToString", arg);
            return NULL;
          }

          static PyObject *t_Outputs_ramBytesUsed(t_Outputs *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);
            jlong result;

            if (!parseArg(arg, "O", self->parameters[0], &a0))
            {
              OBJ_CALL(result = self->object.ramBytesUsed(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "ramBytesUsed", arg);
            return NULL;
          }

          static PyObject *t_Outputs_read(t_Outputs *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "read", arg);
            return NULL;
          }

          static PyObject *t_Outputs_readFinalOutput(t_Outputs *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.readFinalOutput(a0));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "readFinalOutput", arg);
            return NULL;
          }

          static PyObject *t_Outputs_skipFinalOutput(t_Outputs *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipFinalOutput(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "skipFinalOutput", arg);
            return NULL;
          }

          static PyObject *t_Outputs_skipOutput(t_Outputs *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipOutput(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "skipOutput", arg);
            return NULL;
          }

          static PyObject *t_Outputs_subtract(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subtract", args);
            return NULL;
          }

          static PyObject *t_Outputs_write(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "Ok", self->parameters[0], ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "write", args);
            return NULL;
          }

          static PyObject *t_Outputs_writeFinalOutput(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "Ok", self->parameters[0], ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.writeFinalOutput(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "writeFinalOutput", args);
            return NULL;
          }
          static PyObject *t_Outputs_get__parameters_(t_Outputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Outputs_get__noOutput(t_Outputs *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternReplaceFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/pattern/PatternReplaceFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternReplaceFilterFactory::class$ = NULL;
          jmethodID *PatternReplaceFilterFactory::mids$ = NULL;
          bool PatternReplaceFilterFactory::live$ = false;

          jclass PatternReplaceFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternReplaceFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_d0c93252] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/pattern/PatternReplaceFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternReplaceFilterFactory::PatternReplaceFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::pattern::PatternReplaceFilter PatternReplaceFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::pattern::PatternReplaceFilter(env->callObjectMethod(this$, mids$[mid_create_d0c93252], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternReplaceFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternReplaceFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternReplaceFilterFactory_init_(t_PatternReplaceFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternReplaceFilterFactory_create(t_PatternReplaceFilterFactory *self, PyObject *args);

          static PyMethodDef t_PatternReplaceFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PatternReplaceFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternReplaceFilterFactory, t_PatternReplaceFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PatternReplaceFilterFactory, t_PatternReplaceFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PatternReplaceFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternReplaceFilterFactory), module, "PatternReplaceFilterFactory", 0);
          }

          void t_PatternReplaceFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternReplaceFilterFactory).tp_dict, "class_", make_descriptor(PatternReplaceFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternReplaceFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PatternReplaceFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternReplaceFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternReplaceFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternReplaceFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PatternReplaceFilterFactory::wrap_Object(PatternReplaceFilterFactory(((t_PatternReplaceFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PatternReplaceFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternReplaceFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternReplaceFilterFactory_init_(t_PatternReplaceFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PatternReplaceFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PatternReplaceFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternReplaceFilterFactory_create(t_PatternReplaceFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::pattern::PatternReplaceFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::pattern::t_PatternReplaceFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PatternReplaceFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/ClassicAnalyzer.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *ClassicAnalyzer::class$ = NULL;
          jmethodID *ClassicAnalyzer::mids$ = NULL;
          bool ClassicAnalyzer::live$ = false;
          jint ClassicAnalyzer::DEFAULT_MAX_TOKEN_LENGTH = (jint) 0;
          ::org::apache::lucene::analysis::util::CharArraySet *ClassicAnalyzer::STOP_WORDS_SET = NULL;

          jclass ClassicAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/ClassicAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getMaxTokenLength_54c6a179] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_setMaxTokenLength_39c7bd3c] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_TOKEN_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_TOKEN_LENGTH");
              STOP_WORDS_SET = new ::org::apache::lucene::analysis::util::CharArraySet(env->getStaticObjectField(cls, "STOP_WORDS_SET", "Lorg/apache/lucene/analysis/util/CharArraySet;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClassicAnalyzer::ClassicAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          ClassicAnalyzer::ClassicAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          ClassicAnalyzer::ClassicAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          jint ClassicAnalyzer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_54c6a179]);
          }

          void ClassicAnalyzer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_ClassicAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClassicAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClassicAnalyzer_init_(t_ClassicAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClassicAnalyzer_getMaxTokenLength(t_ClassicAnalyzer *self);
          static PyObject *t_ClassicAnalyzer_setMaxTokenLength(t_ClassicAnalyzer *self, PyObject *arg);
          static PyObject *t_ClassicAnalyzer_get__maxTokenLength(t_ClassicAnalyzer *self, void *data);
          static int t_ClassicAnalyzer_set__maxTokenLength(t_ClassicAnalyzer *self, PyObject *arg, void *data);
          static PyGetSetDef t_ClassicAnalyzer__fields_[] = {
            DECLARE_GETSET_FIELD(t_ClassicAnalyzer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ClassicAnalyzer__methods_[] = {
            DECLARE_METHOD(t_ClassicAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicAnalyzer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_ClassicAnalyzer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ClassicAnalyzer, t_ClassicAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, ClassicAnalyzer, t_ClassicAnalyzer_init_, 0, 0, t_ClassicAnalyzer__fields_, 0, 0);

          void t_ClassicAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(ClassicAnalyzer), module, "ClassicAnalyzer", 0);
          }

          void t_ClassicAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ClassicAnalyzer).tp_dict, "class_", make_descriptor(ClassicAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ClassicAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_ClassicAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ClassicAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ClassicAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ClassicAnalyzer).tp_dict, "DEFAULT_MAX_TOKEN_LENGTH", make_descriptor(ClassicAnalyzer::DEFAULT_MAX_TOKEN_LENGTH));
            PyDict_SetItemString(PY_TYPE(ClassicAnalyzer).tp_dict, "STOP_WORDS_SET", make_descriptor(::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(*ClassicAnalyzer::STOP_WORDS_SET)));
          }

          static PyObject *t_ClassicAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClassicAnalyzer::initializeClass, 1)))
              return NULL;
            return t_ClassicAnalyzer::wrap_Object(ClassicAnalyzer(((t_ClassicAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_ClassicAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClassicAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClassicAnalyzer_init_(t_ClassicAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ClassicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = ClassicAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                ClassicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = ClassicAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ClassicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ClassicAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClassicAnalyzer_getMaxTokenLength(t_ClassicAnalyzer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_ClassicAnalyzer_setMaxTokenLength(t_ClassicAnalyzer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_ClassicAnalyzer_get__maxTokenLength(t_ClassicAnalyzer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) value);
          }
          static int t_ClassicAnalyzer_set__maxTokenLength(t_ClassicAnalyzer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/Token.h"
#include "java/lang/String.h"
#include "java/io/Serializable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *Token::class$ = NULL;
              jmethodID *Token::mids$ = NULL;
              jfieldID *Token::fids$ = NULL;
              bool Token::live$ = false;

              jclass Token::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/Token");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                  mids$[mid_init$_d40a4f2e] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;)V");
                  mids$[mid_getValue_846352c3] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
                  mids$[mid_newToken_24cc8f6e] = env->getStaticMethodID(cls, "newToken", "(I)Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  mids$[mid_newToken_b48de57c] = env->getStaticMethodID(cls, "newToken", "(ILjava/lang/String;)Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  fids$ = new jfieldID[max_fid];
                  fids$[fid_beginColumn] = env->getFieldID(cls, "beginColumn", "I");
                  fids$[fid_beginLine] = env->getFieldID(cls, "beginLine", "I");
                  fids$[fid_endColumn] = env->getFieldID(cls, "endColumn", "I");
                  fids$[fid_endLine] = env->getFieldID(cls, "endLine", "I");
                  fids$[fid_image] = env->getFieldID(cls, "image", "Ljava/lang/String;");
                  fids$[fid_kind] = env->getFieldID(cls, "kind", "I");
                  fids$[fid_next] = env->getFieldID(cls, "next", "Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  fids$[fid_specialToken] = env->getFieldID(cls, "specialToken", "Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              Token::Token() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              Token::Token(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

              Token::Token(jint a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d40a4f2e, a0, a1.this$)) {}

              ::java::lang::Object Token::getValue() const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_846352c3]));
              }

              Token Token::newToken(jint a0)
              {
                jclass cls = env->getClass(initializeClass);
                return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_24cc8f6e], a0));
              }

              Token Token::newToken(jint a0, const ::java::lang::String & a1)
              {
                jclass cls = env->getClass(initializeClass);
                return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_b48de57c], a0, a1.this$));
              }

              ::java::lang::String Token::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }

              jint Token::_get_beginColumn() const
              {
                return env->getIntField(this$, fids$[fid_beginColumn]);
              }

              void Token::_set_beginColumn(jint a0) const
              {
                env->setIntField(this$, fids$[fid_beginColumn], a0);
              }

              jint Token::_get_beginLine() const
              {
                return env->getIntField(this$, fids$[fid_beginLine]);
              }

              void Token::_set_beginLine(jint a0) const
              {
                env->setIntField(this$, fids$[fid_beginLine], a0);
              }

              jint Token::_get_endColumn() const
              {
                return env->getIntField(this$, fids$[fid_endColumn]);
              }

              void Token::_set_endColumn(jint a0) const
              {
                env->setIntField(this$, fids$[fid_endColumn], a0);
              }

              jint Token::_get_endLine() const
              {
                return env->getIntField(this$, fids$[fid_endLine]);
              }

              void Token::_set_endLine(jint a0) const
              {
                env->setIntField(this$, fids$[fid_endLine], a0);
              }

              ::java::lang::String Token::_get_image() const
              {
                return ::java::lang::String(env->getObjectField(this$, fids$[fid_image]));
              }

              void Token::_set_image(const ::java::lang::String & a0) const
              {
                env->setObjectField(this$, fids$[fid_image], a0.this$);
              }

              jint Token::_get_kind() const
              {
                return env->getIntField(this$, fids$[fid_kind]);
              }

              void Token::_set_kind(jint a0) const
              {
                env->setIntField(this$, fids$[fid_kind], a0);
              }

              Token Token::_get_next() const
              {
                return Token(env->getObjectField(this$, fids$[fid_next]));
              }

              void Token::_set_next(const Token & a0) const
              {
                env->setObjectField(this$, fids$[fid_next], a0.this$);
              }

              Token Token::_get_specialToken() const
              {
                return Token(env->getObjectField(this$, fids$[fid_specialToken]));
              }

              void Token::_set_specialToken(const Token & a0) const
              {
                env->setObjectField(this$, fids$[fid_specialToken], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg);
              static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds);
              static PyObject *t_Token_getValue(t_Token *self);
              static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args);
              static PyObject *t_Token_toString(t_Token *self, PyObject *args);
              static PyObject *t_Token_get__beginColumn(t_Token *self, void *data);
              static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__beginLine(t_Token *self, void *data);
              static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__endColumn(t_Token *self, void *data);
              static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__endLine(t_Token *self, void *data);
              static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__image(t_Token *self, void *data);
              static int t_Token_set__image(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__kind(t_Token *self, void *data);
              static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__next(t_Token *self, void *data);
              static int t_Token_set__next(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__specialToken(t_Token *self, void *data);
              static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data);

              static PyObject *t_Token_get__value(t_Token *self, void *data);
              static PyGetSetDef t_Token__fields_[] = {
                DECLARE_GETSET_FIELD(t_Token, beginColumn),
                DECLARE_GETSET_FIELD(t_Token, beginLine),
                DECLARE_GETSET_FIELD(t_Token, endColumn),
                DECLARE_GETSET_FIELD(t_Token, endLine),
                DECLARE_GETSET_FIELD(t_Token, image),
                DECLARE_GETSET_FIELD(t_Token, kind),
                DECLARE_GETSET_FIELD(t_Token, next),
                DECLARE_GETSET_FIELD(t_Token, specialToken),
                DECLARE_GET_FIELD(t_Token, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_Token__methods_[] = {
                DECLARE_METHOD(t_Token, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_Token, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_Token, getValue, METH_NOARGS),
                DECLARE_METHOD(t_Token, newToken, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_Token, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(Token, t_Token, ::java::lang::Object, Token, t_Token_init_, 0, 0, t_Token__fields_, 0, 0);

              void t_Token::install(PyObject *module)
              {
                installType(&PY_TYPE(Token), module, "Token", 0);
              }

              void t_Token::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(Token).tp_dict, "class_", make_descriptor(Token::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(Token).tp_dict, "wrapfn_", make_descriptor(t_Token::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(Token).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, Token::initializeClass, 1)))
                  return NULL;
                return t_Token::wrap_Object(Token(((t_Token *) arg)->object.this$));
              }
              static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, Token::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    Token object((jobject) NULL);

                    INT_CALL(object = Token());
                    self->object = object;
                    break;
                  }
                  goto err;
                 case 1:
                  {
                    jint a0;
                    Token object((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                      INT_CALL(object = Token(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 2:
                  {
                    jint a0;
                    ::java::lang::String a1((jobject) NULL);
                    Token object((jobject) NULL);

                    if (!parseArgs(args, "Is", &a0, &a1))
                    {
                      INT_CALL(object = Token(a0, a1));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_Token_getValue(t_Token *self)
              {
                ::java::lang::Object result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return ::java::lang::t_Object::wrap_Object(result);
              }

              static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    jint a0;
                    Token result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                      OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::parser::Token::newToken(a0));
                      return t_Token::wrap_Object(result);
                    }
                  }
                  break;
                 case 2:
                  {
                    jint a0;
                    ::java::lang::String a1((jobject) NULL);
                    Token result((jobject) NULL);

                    if (!parseArgs(args, "Is", &a0, &a1))
                    {
                      OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::parser::Token::newToken(a0, a1));
                      return t_Token::wrap_Object(result);
                    }
                  }
                }

                PyErr_SetArgsError(type, "newToken", args);
                return NULL;
              }

              static PyObject *t_Token_toString(t_Token *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(Token), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_Token_get__beginColumn(t_Token *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object._get_beginColumn());
                return PyInt_FromLong((long) value);
              }
              static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data)
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object._set_beginColumn(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "beginColumn", arg);
                return -1;
              }

              static PyObject *t_Token_get__beginLine(t_Token *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object._get_beginLine());
                return PyInt_FromLong((long) value);
              }
              static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data)
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object._set_beginLine(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "beginLine", arg);
                return -1;
              }

              static PyObject *t_Token_get__endColumn(t_Token *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object._get_endColumn());
                return PyInt_FromLong((long) value);
              }
              static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data)
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object._set_endColumn(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "endColumn", arg);
                return -1;
              }

              static PyObject *t_Token_get__endLine(t_Token *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object._get_endLine());
                return PyInt_FromLong((long) value);
              }
              static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data)
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object._set_endLine(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "endLine", arg);
                return -1;
              }

              static PyObject *t_Token_get__image(t_Token *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object._get_image());
                return j2p(value);
              }
              static int t_Token_set__image(t_Token *self, PyObject *arg, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                if (!parseArg(arg, "s", &value))
                {
                  INT_CALL(self->object._set_image(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "image", arg);
                return -1;
              }

              static PyObject *t_Token_get__kind(t_Token *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object._get_kind());
                return PyInt_FromLong((long) value);
              }
              static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data)
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object._set_kind(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "kind", arg);
                return -1;
              }

              static PyObject *t_Token_get__next(t_Token *self, void *data)
              {
                Token value((jobject) NULL);
                OBJ_CALL(value = self->object._get_next());
                return t_Token::wrap_Object(value);
              }
              static int t_Token_set__next(t_Token *self, PyObject *arg, void *data)
              {
                Token value((jobject) NULL);
                if (!parseArg(arg, "k", Token::initializeClass, &value))
                {
                  INT_CALL(self->object._set_next(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "next", arg);
                return -1;
              }

              static PyObject *t_Token_get__specialToken(t_Token *self, void *data)
              {
                Token value((jobject) NULL);
                OBJ_CALL(value = self->object._get_specialToken());
                return t_Token::wrap_Object(value);
              }
              static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data)
              {
                Token value((jobject) NULL);
                if (!parseArg(arg, "k", Token::initializeClass, &value))
                {
                  INT_CALL(self->object._set_specialToken(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "specialToken", arg);
                return -1;
              }

              static PyObject *t_Token_get__value(t_Token *self, void *data)
              {
                ::java::lang::Object value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_Object::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/CodepointCountFilterFactory.h"
#include "org/apache/lucene/analysis/miscellaneous/CodepointCountFilter.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *CodepointCountFilterFactory::class$ = NULL;
          jmethodID *CodepointCountFilterFactory::mids$ = NULL;
          bool CodepointCountFilterFactory::live$ = false;
          ::java::lang::String *CodepointCountFilterFactory::MAX_KEY = NULL;
          ::java::lang::String *CodepointCountFilterFactory::MIN_KEY = NULL;

          jclass CodepointCountFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/CodepointCountFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_0d6a0318] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/CodepointCountFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAX_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_KEY", "Ljava/lang/String;"));
              MIN_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MIN_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CodepointCountFilterFactory::CodepointCountFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::CodepointCountFilter CodepointCountFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::CodepointCountFilter(env->callObjectMethod(this$, mids$[mid_create_0d6a0318], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_CodepointCountFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CodepointCountFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CodepointCountFilterFactory_init_(t_CodepointCountFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CodepointCountFilterFactory_create(t_CodepointCountFilterFactory *self, PyObject *args);

          static PyMethodDef t_CodepointCountFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CodepointCountFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CodepointCountFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CodepointCountFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CodepointCountFilterFactory, t_CodepointCountFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, CodepointCountFilterFactory, t_CodepointCountFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_CodepointCountFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CodepointCountFilterFactory), module, "CodepointCountFilterFactory", 0);
          }

          void t_CodepointCountFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CodepointCountFilterFactory).tp_dict, "class_", make_descriptor(CodepointCountFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CodepointCountFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CodepointCountFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CodepointCountFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CodepointCountFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(CodepointCountFilterFactory).tp_dict, "MAX_KEY", make_descriptor(j2p(*CodepointCountFilterFactory::MAX_KEY)));
            PyDict_SetItemString(PY_TYPE(CodepointCountFilterFactory).tp_dict, "MIN_KEY", make_descriptor(j2p(*CodepointCountFilterFactory::MIN_KEY)));
          }

          static PyObject *t_CodepointCountFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CodepointCountFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CodepointCountFilterFactory::wrap_Object(CodepointCountFilterFactory(((t_CodepointCountFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CodepointCountFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CodepointCountFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CodepointCountFilterFactory_init_(t_CodepointCountFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CodepointCountFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CodepointCountFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CodepointCountFilterFactory_create(t_CodepointCountFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::CodepointCountFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_CodepointCountFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CodepointCountFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/UnicodeUtil.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *UnicodeUtil::class$ = NULL;
        jmethodID *UnicodeUtil::mids$ = NULL;
        bool UnicodeUtil::live$ = false;
        ::org::apache::lucene::util::BytesRef *UnicodeUtil::BIG_TERM = NULL;
        jint UnicodeUtil::UNI_REPLACEMENT_CHAR = (jint) 0;
        jint UnicodeUtil::UNI_SUR_HIGH_END = (jint) 0;
        jint UnicodeUtil::UNI_SUR_HIGH_START = (jint) 0;
        jint UnicodeUtil::UNI_SUR_LOW_END = (jint) 0;
        jint UnicodeUtil::UNI_SUR_LOW_START = (jint) 0;

        jclass UnicodeUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/UnicodeUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_UTF16toUTF8_08c4d28c] = env->getStaticMethodID(cls, "UTF16toUTF8", "(Ljava/lang/CharSequence;IILorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_UTF16toUTF8_edea5d3c] = env->getStaticMethodID(cls, "UTF16toUTF8", "([CIILorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_UTF8toUTF16_5b2f2c58] = env->getStaticMethodID(cls, "UTF8toUTF16", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/CharsRef;)V");
            mids$[mid_UTF8toUTF16_3aa183dd] = env->getStaticMethodID(cls, "UTF8toUTF16", "([BIILorg/apache/lucene/util/CharsRef;)V");
            mids$[mid_UTF8toUTF32_079b7c7a] = env->getStaticMethodID(cls, "UTF8toUTF32", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/IntsRef;)V");
            mids$[mid_codePointCount_7bc03ddb] = env->getStaticMethodID(cls, "codePointCount", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_newString_3ade3c03] = env->getStaticMethodID(cls, "newString", "([III)Ljava/lang/String;");
            mids$[mid_toHexString_97a5258f] = env->getStaticMethodID(cls, "toHexString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_validUTF16String_a8afc646] = env->getStaticMethodID(cls, "validUTF16String", "(Ljava/lang/CharSequence;)Z");
            mids$[mid_validUTF16String_ec6430f8] = env->getStaticMethodID(cls, "validUTF16String", "([CI)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            BIG_TERM = new ::org::apache::lucene::util::BytesRef(env->getStaticObjectField(cls, "BIG_TERM", "Lorg/apache/lucene/util/BytesRef;"));
            UNI_REPLACEMENT_CHAR = env->getStaticIntField(cls, "UNI_REPLACEMENT_CHAR");
            UNI_SUR_HIGH_END = env->getStaticIntField(cls, "UNI_SUR_HIGH_END");
            UNI_SUR_HIGH_START = env->getStaticIntField(cls, "UNI_SUR_HIGH_START");
            UNI_SUR_LOW_END = env->getStaticIntField(cls, "UNI_SUR_LOW_END");
            UNI_SUR_LOW_START = env->getStaticIntField(cls, "UNI_SUR_LOW_START");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void UnicodeUtil::UTF16toUTF8(const ::java::lang::CharSequence & a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_UTF16toUTF8_08c4d28c], a0.this$, a1, a2, a3.this$);
        }

        void UnicodeUtil::UTF16toUTF8(const JArray< jchar > & a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_UTF16toUTF8_edea5d3c], a0.this$, a1, a2, a3.this$);
        }

        void UnicodeUtil::UTF8toUTF16(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::CharsRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_UTF8toUTF16_5b2f2c58], a0.this$, a1.this$);
        }

        void UnicodeUtil::UTF8toUTF16(const JArray< jbyte > & a0, jint a1, jint a2, const ::org::apache::lucene::util::CharsRef & a3)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_UTF8toUTF16_3aa183dd], a0.this$, a1, a2, a3.this$);
        }

        void UnicodeUtil::UTF8toUTF32(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::IntsRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_UTF8toUTF32_079b7c7a], a0.this$, a1.this$);
        }

        jint UnicodeUtil::codePointCount(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_codePointCount_7bc03ddb], a0.this$);
        }

        ::java::lang::String UnicodeUtil::newString(const JArray< jint > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_newString_3ade3c03], a0.this$, a1, a2));
        }

        ::java::lang::String UnicodeUtil::toHexString(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_97a5258f], a0.this$));
        }

        jboolean UnicodeUtil::validUTF16String(const ::java::lang::CharSequence & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_validUTF16String_a8afc646], a0.this$);
        }

        jboolean UnicodeUtil::validUTF16String(const JArray< jchar > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_validUTF16String_ec6430f8], a0.this$, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_UnicodeUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_UnicodeUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_UnicodeUtil_UTF16toUTF8(PyTypeObject *type, PyObject *args);
        static PyObject *t_UnicodeUtil_UTF8toUTF16(PyTypeObject *type, PyObject *args);
        static PyObject *t_UnicodeUtil_UTF8toUTF32(PyTypeObject *type, PyObject *args);
        static PyObject *t_UnicodeUtil_codePointCount(PyTypeObject *type, PyObject *arg);
        static PyObject *t_UnicodeUtil_newString(PyTypeObject *type, PyObject *args);
        static PyObject *t_UnicodeUtil_toHexString(PyTypeObject *type, PyObject *arg);
        static PyObject *t_UnicodeUtil_validUTF16String(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_UnicodeUtil__methods_[] = {
          DECLARE_METHOD(t_UnicodeUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, UTF16toUTF8, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, UTF8toUTF16, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, UTF8toUTF32, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, codePointCount, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, newString, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, toHexString, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, validUTF16String, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(UnicodeUtil, t_UnicodeUtil, ::java::lang::Object, UnicodeUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_UnicodeUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(UnicodeUtil), module, "UnicodeUtil", 0);
        }

        void t_UnicodeUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "class_", make_descriptor(UnicodeUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "wrapfn_", make_descriptor(t_UnicodeUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(UnicodeUtil::initializeClass);
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "BIG_TERM", make_descriptor(::org::apache::lucene::util::t_BytesRef::wrap_Object(*UnicodeUtil::BIG_TERM)));
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "UNI_REPLACEMENT_CHAR", make_descriptor(UnicodeUtil::UNI_REPLACEMENT_CHAR));
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "UNI_SUR_HIGH_END", make_descriptor(UnicodeUtil::UNI_SUR_HIGH_END));
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "UNI_SUR_HIGH_START", make_descriptor(UnicodeUtil::UNI_SUR_HIGH_START));
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "UNI_SUR_LOW_END", make_descriptor(UnicodeUtil::UNI_SUR_LOW_END));
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "UNI_SUR_LOW_START", make_descriptor(UnicodeUtil::UNI_SUR_LOW_START));
        }

        static PyObject *t_UnicodeUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, UnicodeUtil::initializeClass, 1)))
            return NULL;
          return t_UnicodeUtil::wrap_Object(UnicodeUtil(((t_UnicodeUtil *) arg)->object.this$));
        }
        static PyObject *t_UnicodeUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, UnicodeUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_UnicodeUtil_UTF16toUTF8(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 4:
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jint a1;
              jint a2;
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

              if (!parseArgs(args, "OIIk", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(::org::apache::lucene::util::UnicodeUtil::UTF16toUTF8(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

              if (!parseArgs(args, "[CIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(::org::apache::lucene::util::UnicodeUtil::UTF16toUTF8(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "UTF16toUTF8", args);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_UTF8toUTF16(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::util::CharsRef a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(::org::apache::lucene::util::UnicodeUtil::UTF8toUTF16(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 4:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              ::org::apache::lucene::util::CharsRef a3((jobject) NULL);

              if (!parseArgs(args, "[BIIk", ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(::org::apache::lucene::util::UnicodeUtil::UTF8toUTF16(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "UTF8toUTF16", args);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_UTF8toUTF32(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::IntsRef a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::org::apache::lucene::util::UnicodeUtil::UTF8toUTF32(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "UTF8toUTF32", args);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_codePointCount(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::codePointCount(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "codePointCount", arg);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_newString(PyTypeObject *type, PyObject *args)
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[III", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::newString(a0, a1, a2));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "newString", args);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_toHexString(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::toHexString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "toHexString", arg);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_validUTF16String(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::validUTF16String(a0));
                Py_RETURN_BOOL(result);
              }
            }
            break;
           case 2:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jboolean result;

              if (!parseArgs(args, "[CI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::validUTF16String(a0, a1));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError(type, "validUTF16String", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/TrimFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *TrimFilter::class$ = NULL;
          jmethodID *TrimFilter::mids$ = NULL;
          bool TrimFilter::live$ = false;

          jclass TrimFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/TrimFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_db34a9b2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Z)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TrimFilter::TrimFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          TrimFilter::TrimFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_db34a9b2, a0.this$, a1.this$, a2)) {}

          jboolean TrimFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_TrimFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TrimFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TrimFilter_init_(t_TrimFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TrimFilter_incrementToken(t_TrimFilter *self, PyObject *args);

          static PyMethodDef t_TrimFilter__methods_[] = {
            DECLARE_METHOD(t_TrimFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TrimFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TrimFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TrimFilter, t_TrimFilter, ::org::apache::lucene::analysis::TokenFilter, TrimFilter, t_TrimFilter_init_, 0, 0, 0, 0, 0);

          void t_TrimFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TrimFilter), module, "TrimFilter", 0);
          }

          void t_TrimFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TrimFilter).tp_dict, "class_", make_descriptor(TrimFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TrimFilter).tp_dict, "wrapfn_", make_descriptor(t_TrimFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TrimFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TrimFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TrimFilter::initializeClass, 1)))
              return NULL;
            return t_TrimFilter::wrap_Object(TrimFilter(((t_TrimFilter *) arg)->object.this$));
          }
          static PyObject *t_TrimFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TrimFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TrimFilter_init_(t_TrimFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                TrimFilter object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = TrimFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jboolean a2;
                TrimFilter object((jobject) NULL);

                if (!parseArgs(args, "KkZ", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = TrimFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TrimFilter_incrementToken(t_TrimFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TrimFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/RegexpQueryNode.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/TextableQueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *RegexpQueryNode::class$ = NULL;
              jmethodID *RegexpQueryNode::mids$ = NULL;
              bool RegexpQueryNode::live$ = false;

              jclass RegexpQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/RegexpQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_ddd81d4e] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;II)V");
                  mids$[mid_cloneTree_6f121059] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/standard/nodes/RegexpQueryNode;");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getFieldAsString_14c7b5c5] = env->getMethodID(cls, "getFieldAsString", "()Ljava/lang/String;");
                  mids$[mid_getText_e0adba2f] = env->getMethodID(cls, "getText", "()Ljava/lang/CharSequence;");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_setText_a8afc64a] = env->getMethodID(cls, "setText", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_textToBytesRef_4ae19461] = env->getMethodID(cls, "textToBytesRef", "()Lorg/apache/lucene/util/BytesRef;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              RegexpQueryNode::RegexpQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jint a2, jint a3) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_ddd81d4e, a0.this$, a1.this$, a2, a3)) {}

              RegexpQueryNode RegexpQueryNode::cloneTree() const
              {
                return RegexpQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_6f121059]));
              }

              ::java::lang::CharSequence RegexpQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              ::java::lang::String RegexpQueryNode::getFieldAsString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldAsString_14c7b5c5]));
              }

              ::java::lang::CharSequence RegexpQueryNode::getText() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getText_e0adba2f]));
              }

              void RegexpQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              void RegexpQueryNode::setText(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setText_a8afc64a], a0.this$);
              }

              ::org::apache::lucene::util::BytesRef RegexpQueryNode::textToBytesRef() const
              {
                return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_textToBytesRef_4ae19461]));
              }

              ::java::lang::CharSequence RegexpQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String RegexpQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_RegexpQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RegexpQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_RegexpQueryNode_init_(t_RegexpQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_RegexpQueryNode_cloneTree(t_RegexpQueryNode *self, PyObject *args);
              static PyObject *t_RegexpQueryNode_getField(t_RegexpQueryNode *self);
              static PyObject *t_RegexpQueryNode_getFieldAsString(t_RegexpQueryNode *self);
              static PyObject *t_RegexpQueryNode_getText(t_RegexpQueryNode *self);
              static PyObject *t_RegexpQueryNode_setField(t_RegexpQueryNode *self, PyObject *arg);
              static PyObject *t_RegexpQueryNode_setText(t_RegexpQueryNode *self, PyObject *arg);
              static PyObject *t_RegexpQueryNode_textToBytesRef(t_RegexpQueryNode *self);
              static PyObject *t_RegexpQueryNode_toQueryString(t_RegexpQueryNode *self, PyObject *args);
              static PyObject *t_RegexpQueryNode_toString(t_RegexpQueryNode *self, PyObject *args);
              static PyObject *t_RegexpQueryNode_get__field(t_RegexpQueryNode *self, void *data);
              static int t_RegexpQueryNode_set__field(t_RegexpQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_RegexpQueryNode_get__fieldAsString(t_RegexpQueryNode *self, void *data);
              static PyObject *t_RegexpQueryNode_get__text(t_RegexpQueryNode *self, void *data);
              static int t_RegexpQueryNode_set__text(t_RegexpQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_RegexpQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_RegexpQueryNode, field),
                DECLARE_GET_FIELD(t_RegexpQueryNode, fieldAsString),
                DECLARE_GETSET_FIELD(t_RegexpQueryNode, text),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_RegexpQueryNode__methods_[] = {
                DECLARE_METHOD(t_RegexpQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RegexpQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RegexpQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_RegexpQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_RegexpQueryNode, getFieldAsString, METH_NOARGS),
                DECLARE_METHOD(t_RegexpQueryNode, getText, METH_NOARGS),
                DECLARE_METHOD(t_RegexpQueryNode, setField, METH_O),
                DECLARE_METHOD(t_RegexpQueryNode, setText, METH_O),
                DECLARE_METHOD(t_RegexpQueryNode, textToBytesRef, METH_NOARGS),
                DECLARE_METHOD(t_RegexpQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_RegexpQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(RegexpQueryNode, t_RegexpQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, RegexpQueryNode, t_RegexpQueryNode_init_, 0, 0, t_RegexpQueryNode__fields_, 0, 0);

              void t_RegexpQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(RegexpQueryNode), module, "RegexpQueryNode", 0);
              }

              void t_RegexpQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(RegexpQueryNode).tp_dict, "class_", make_descriptor(RegexpQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(RegexpQueryNode).tp_dict, "wrapfn_", make_descriptor(t_RegexpQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(RegexpQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_RegexpQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, RegexpQueryNode::initializeClass, 1)))
                  return NULL;
                return t_RegexpQueryNode::wrap_Object(RegexpQueryNode(((t_RegexpQueryNode *) arg)->object.this$));
              }
              static PyObject *t_RegexpQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, RegexpQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_RegexpQueryNode_init_(t_RegexpQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                jint a2;
                jint a3;
                RegexpQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OOII", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = RegexpQueryNode(a0, a1, a2, a3));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_RegexpQueryNode_cloneTree(t_RegexpQueryNode *self, PyObject *args)
              {
                RegexpQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_RegexpQueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(RegexpQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_RegexpQueryNode_getField(t_RegexpQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_RegexpQueryNode_getFieldAsString(t_RegexpQueryNode *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getFieldAsString());
                return j2p(result);
              }

              static PyObject *t_RegexpQueryNode_getText(t_RegexpQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_RegexpQueryNode_setField(t_RegexpQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_RegexpQueryNode_setText(t_RegexpQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setText(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setText", arg);
                return NULL;
              }

              static PyObject *t_RegexpQueryNode_textToBytesRef(t_RegexpQueryNode *self)
              {
                ::org::apache::lucene::util::BytesRef result((jobject) NULL);
                OBJ_CALL(result = self->object.textToBytesRef());
                return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
              }

              static PyObject *t_RegexpQueryNode_toQueryString(t_RegexpQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(RegexpQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_RegexpQueryNode_toString(t_RegexpQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(RegexpQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_RegexpQueryNode_get__field(t_RegexpQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_RegexpQueryNode_set__field(t_RegexpQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_RegexpQueryNode_get__fieldAsString(t_RegexpQueryNode *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getFieldAsString());
                return j2p(value);
              }

              static PyObject *t_RegexpQueryNode_get__text(t_RegexpQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_RegexpQueryNode_set__text(t_RegexpQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setText(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "text", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$postfix_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$postfix_return::class$ = NULL;
          jmethodID *JavascriptParser$postfix_return::mids$ = NULL;
          bool JavascriptParser$postfix_return::live$ = false;

          jclass JavascriptParser$postfix_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$postfix_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$postfix_return::JavascriptParser$postfix_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$postfix_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$postfix_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$postfix_return_init_(t_JavascriptParser$postfix_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$postfix_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$postfix_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$postfix_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$postfix_return, t_JavascriptParser$postfix_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$postfix_return, t_JavascriptParser$postfix_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$postfix_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$postfix_return), module, "JavascriptParser$postfix_return", 0);
          }

          void t_JavascriptParser$postfix_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$postfix_return).tp_dict, "class_", make_descriptor(JavascriptParser$postfix_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$postfix_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$postfix_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$postfix_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$postfix_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$postfix_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$postfix_return::wrap_Object(JavascriptParser$postfix_return(((t_JavascriptParser$postfix_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$postfix_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$postfix_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$postfix_return_init_(t_JavascriptParser$postfix_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$postfix_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$postfix_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/es/SpanishLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {

          ::java::lang::Class *SpanishLightStemmer::class$ = NULL;
          jmethodID *SpanishLightStemmer::mids$ = NULL;
          bool SpanishLightStemmer::live$ = false;

          jclass SpanishLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/es/SpanishLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanishLightStemmer::SpanishLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint SpanishLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {
          static PyObject *t_SpanishLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanishLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanishLightStemmer_init_(t_SpanishLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanishLightStemmer_stem(t_SpanishLightStemmer *self, PyObject *args);

          static PyMethodDef t_SpanishLightStemmer__methods_[] = {
            DECLARE_METHOD(t_SpanishLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanishLightStemmer, t_SpanishLightStemmer, ::java::lang::Object, SpanishLightStemmer, t_SpanishLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_SpanishLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanishLightStemmer), module, "SpanishLightStemmer", 0);
          }

          void t_SpanishLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanishLightStemmer).tp_dict, "class_", make_descriptor(SpanishLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanishLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_SpanishLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanishLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanishLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanishLightStemmer::initializeClass, 1)))
              return NULL;
            return t_SpanishLightStemmer::wrap_Object(SpanishLightStemmer(((t_SpanishLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_SpanishLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanishLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanishLightStemmer_init_(t_SpanishLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            SpanishLightStemmer object((jobject) NULL);

            INT_CALL(object = SpanishLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_SpanishLightStemmer_stem(t_SpanishLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/DrillSideways$DrillSidewaysResult.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "org/apache/lucene/facet/Facets.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *DrillSideways$DrillSidewaysResult::class$ = NULL;
        jmethodID *DrillSideways$DrillSidewaysResult::mids$ = NULL;
        jfieldID *DrillSideways$DrillSidewaysResult::fids$ = NULL;
        bool DrillSideways$DrillSidewaysResult::live$ = false;

        jclass DrillSideways$DrillSidewaysResult::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/DrillSideways$DrillSidewaysResult");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_34005d2b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/Facets;Lorg/apache/lucene/search/TopDocs;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_facets] = env->getFieldID(cls, "facets", "Lorg/apache/lucene/facet/Facets;");
            fids$[fid_hits] = env->getFieldID(cls, "hits", "Lorg/apache/lucene/search/TopDocs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DrillSideways$DrillSidewaysResult::DrillSideways$DrillSidewaysResult(const ::org::apache::lucene::facet::Facets & a0, const ::org::apache::lucene::search::TopDocs & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_34005d2b, a0.this$, a1.this$)) {}

        ::org::apache::lucene::facet::Facets DrillSideways$DrillSidewaysResult::_get_facets() const
        {
          return ::org::apache::lucene::facet::Facets(env->getObjectField(this$, fids$[fid_facets]));
        }

        ::org::apache::lucene::search::TopDocs DrillSideways$DrillSidewaysResult::_get_hits() const
        {
          return ::org::apache::lucene::search::TopDocs(env->getObjectField(this$, fids$[fid_hits]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_DrillSideways$DrillSidewaysResult_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DrillSideways$DrillSidewaysResult_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DrillSideways$DrillSidewaysResult_init_(t_DrillSideways$DrillSidewaysResult *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DrillSideways$DrillSidewaysResult_get__facets(t_DrillSideways$DrillSidewaysResult *self, void *data);
        static PyObject *t_DrillSideways$DrillSidewaysResult_get__hits(t_DrillSideways$DrillSidewaysResult *self, void *data);

        static PyGetSetDef t_DrillSideways$DrillSidewaysResult__fields_[] = {
          DECLARE_GET_FIELD(t_DrillSideways$DrillSidewaysResult, facets),
          DECLARE_GET_FIELD(t_DrillSideways$DrillSidewaysResult, hits),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DrillSideways$DrillSidewaysResult__methods_[] = {
          DECLARE_METHOD(t_DrillSideways$DrillSidewaysResult, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DrillSideways$DrillSidewaysResult, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DrillSideways$DrillSidewaysResult, t_DrillSideways$DrillSidewaysResult, ::java::lang::Object, DrillSideways$DrillSidewaysResult, t_DrillSideways$DrillSidewaysResult_init_, 0, 0, t_DrillSideways$DrillSidewaysResult__fields_, 0, 0);

        void t_DrillSideways$DrillSidewaysResult::install(PyObject *module)
        {
          installType(&PY_TYPE(DrillSideways$DrillSidewaysResult), module, "DrillSideways$DrillSidewaysResult", 0);
        }

        void t_DrillSideways$DrillSidewaysResult::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DrillSideways$DrillSidewaysResult).tp_dict, "class_", make_descriptor(DrillSideways$DrillSidewaysResult::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DrillSideways$DrillSidewaysResult).tp_dict, "wrapfn_", make_descriptor(t_DrillSideways$DrillSidewaysResult::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DrillSideways$DrillSidewaysResult).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DrillSideways$DrillSidewaysResult_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DrillSideways$DrillSidewaysResult::initializeClass, 1)))
            return NULL;
          return t_DrillSideways$DrillSidewaysResult::wrap_Object(DrillSideways$DrillSidewaysResult(((t_DrillSideways$DrillSidewaysResult *) arg)->object.this$));
        }
        static PyObject *t_DrillSideways$DrillSidewaysResult_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DrillSideways$DrillSidewaysResult::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DrillSideways$DrillSidewaysResult_init_(t_DrillSideways$DrillSidewaysResult *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::facet::Facets a0((jobject) NULL);
          ::org::apache::lucene::search::TopDocs a1((jobject) NULL);
          DrillSideways$DrillSidewaysResult object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::facet::Facets::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1))
          {
            INT_CALL(object = DrillSideways$DrillSidewaysResult(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DrillSideways$DrillSidewaysResult_get__facets(t_DrillSideways$DrillSidewaysResult *self, void *data)
        {
          ::org::apache::lucene::facet::Facets value((jobject) NULL);
          OBJ_CALL(value = self->object._get_facets());
          return ::org::apache::lucene::facet::t_Facets::wrap_Object(value);
        }

        static PyObject *t_DrillSideways$DrillSidewaysResult_get__hits(t_DrillSideways$DrillSidewaysResult *self, void *data)
        {
          ::org::apache::lucene::search::TopDocs value((jobject) NULL);
          OBJ_CALL(value = self->object._get_hits());
          return ::org::apache::lucene::search::t_TopDocs::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/analysis/PythonAnalyzer.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {

        ::java::lang::Class *PythonAnalyzer::class$ = NULL;
        jmethodID *PythonAnalyzer::mids$ = NULL;
        bool PythonAnalyzer::live$ = false;

        jclass PythonAnalyzer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/analysis/PythonAnalyzer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonAnalyzer::PythonAnalyzer() : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonAnalyzer::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonAnalyzer::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonAnalyzer::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {
        static PyObject *t_PythonAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonAnalyzer_init_(t_PythonAnalyzer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonAnalyzer_finalize(t_PythonAnalyzer *self);
        static PyObject *t_PythonAnalyzer_pythonExtension(t_PythonAnalyzer *self, PyObject *args);
        static jobject JNICALL t_PythonAnalyzer_createComponents0(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
        static void JNICALL t_PythonAnalyzer_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonAnalyzer_get__self(t_PythonAnalyzer *self, void *data);
        static PyGetSetDef t_PythonAnalyzer__fields_[] = {
          DECLARE_GET_FIELD(t_PythonAnalyzer, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonAnalyzer__methods_[] = {
          DECLARE_METHOD(t_PythonAnalyzer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonAnalyzer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonAnalyzer, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonAnalyzer, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonAnalyzer, t_PythonAnalyzer, ::org::apache::lucene::analysis::Analyzer, PythonAnalyzer, t_PythonAnalyzer_init_, 0, 0, t_PythonAnalyzer__fields_, 0, 0);

        void t_PythonAnalyzer::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonAnalyzer), module, "PythonAnalyzer", 1);
        }

        void t_PythonAnalyzer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonAnalyzer).tp_dict, "class_", make_descriptor(PythonAnalyzer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_PythonAnalyzer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonAnalyzer::initializeClass);
          JNINativeMethod methods[] = {
            { "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;", (void *) t_PythonAnalyzer_createComponents0 },
            { "pythonDecRef", "()V", (void *) t_PythonAnalyzer_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonAnalyzer::initializeClass, 1)))
            return NULL;
          return t_PythonAnalyzer::wrap_Object(PythonAnalyzer(((t_PythonAnalyzer *) arg)->object.this$));
        }
        static PyObject *t_PythonAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonAnalyzer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonAnalyzer_init_(t_PythonAnalyzer *self, PyObject *args, PyObject *kwds)
        {
          PythonAnalyzer object((jobject) NULL);

          INT_CALL(object = PythonAnalyzer());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonAnalyzer_finalize(t_PythonAnalyzer *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonAnalyzer_pythonExtension(t_PythonAnalyzer *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jobject JNICALL t_PythonAnalyzer_createComponents0(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAnalyzer::mids$[PythonAnalyzer::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *o1 = ::java::io::t_Reader::wrap_Object(::java::io::Reader(a1));
          PyObject *result = PyObject_CallMethod(obj, "createComponents", "OO", o0, o1);
          Py_DECREF(o0);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents::initializeClass, &value))
          {
            throwTypeError("createComponents", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonAnalyzer_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAnalyzer::mids$[PythonAnalyzer::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonAnalyzer::mids$[PythonAnalyzer::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonAnalyzer_get__self(t_PythonAnalyzer *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *RuntimeException::class$ = NULL;
    jmethodID *RuntimeException::mids$ = NULL;
    bool RuntimeException::live$ = false;

    jclass RuntimeException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/RuntimeException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    RuntimeException::RuntimeException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    RuntimeException::RuntimeException(const ::java::lang::Throwable & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

    RuntimeException::RuntimeException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    RuntimeException::RuntimeException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_RuntimeException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_RuntimeException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_RuntimeException_init_(t_RuntimeException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_RuntimeException__methods_[] = {
      DECLARE_METHOD(t_RuntimeException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_RuntimeException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(RuntimeException, t_RuntimeException, ::java::lang::Exception, RuntimeException, t_RuntimeException_init_, 0, 0, 0, 0, 0);

    void t_RuntimeException::install(PyObject *module)
    {
      installType(&PY_TYPE(RuntimeException), module, "RuntimeException", 0);
    }

    void t_RuntimeException::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(RuntimeException).tp_dict, "class_", make_descriptor(RuntimeException::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(RuntimeException).tp_dict, "wrapfn_", make_descriptor(t_RuntimeException::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(RuntimeException).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_RuntimeException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, RuntimeException::initializeClass, 1)))
        return NULL;
      return t_RuntimeException::wrap_Object(RuntimeException(((t_RuntimeException *) arg)->object.this$));
    }
    static PyObject *t_RuntimeException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, RuntimeException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_RuntimeException_init_(t_RuntimeException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          RuntimeException object((jobject) NULL);

          INT_CALL(object = RuntimeException());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::Throwable a0((jobject) NULL);
          RuntimeException object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            INT_CALL(object = RuntimeException(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          RuntimeException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = RuntimeException(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Throwable a1((jobject) NULL);
          RuntimeException object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = RuntimeException(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetsConfig$DimConfig.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetsConfig$DimConfig::class$ = NULL;
        jmethodID *FacetsConfig$DimConfig::mids$ = NULL;
        jfieldID *FacetsConfig$DimConfig::fids$ = NULL;
        bool FacetsConfig$DimConfig::live$ = false;

        jclass FacetsConfig$DimConfig::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetsConfig$DimConfig");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_hierarchical] = env->getFieldID(cls, "hierarchical", "Z");
            fids$[fid_indexFieldName] = env->getFieldID(cls, "indexFieldName", "Ljava/lang/String;");
            fids$[fid_multiValued] = env->getFieldID(cls, "multiValued", "Z");
            fids$[fid_requireDimCount] = env->getFieldID(cls, "requireDimCount", "Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetsConfig$DimConfig::FacetsConfig$DimConfig() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean FacetsConfig$DimConfig::_get_hierarchical() const
        {
          return env->getBooleanField(this$, fids$[fid_hierarchical]);
        }

        void FacetsConfig$DimConfig::_set_hierarchical(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_hierarchical], a0);
        }

        ::java::lang::String FacetsConfig$DimConfig::_get_indexFieldName() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_indexFieldName]));
        }

        void FacetsConfig$DimConfig::_set_indexFieldName(const ::java::lang::String & a0) const
        {
          env->setObjectField(this$, fids$[fid_indexFieldName], a0.this$);
        }

        jboolean FacetsConfig$DimConfig::_get_multiValued() const
        {
          return env->getBooleanField(this$, fids$[fid_multiValued]);
        }

        void FacetsConfig$DimConfig::_set_multiValued(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_multiValued], a0);
        }

        jboolean FacetsConfig$DimConfig::_get_requireDimCount() const
        {
          return env->getBooleanField(this$, fids$[fid_requireDimCount]);
        }

        void FacetsConfig$DimConfig::_set_requireDimCount(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_requireDimCount], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetsConfig$DimConfig_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetsConfig$DimConfig_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetsConfig$DimConfig_init_(t_FacetsConfig$DimConfig *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetsConfig$DimConfig_get__hierarchical(t_FacetsConfig$DimConfig *self, void *data);
        static int t_FacetsConfig$DimConfig_set__hierarchical(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data);
        static PyObject *t_FacetsConfig$DimConfig_get__indexFieldName(t_FacetsConfig$DimConfig *self, void *data);
        static int t_FacetsConfig$DimConfig_set__indexFieldName(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data);
        static PyObject *t_FacetsConfig$DimConfig_get__multiValued(t_FacetsConfig$DimConfig *self, void *data);
        static int t_FacetsConfig$DimConfig_set__multiValued(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data);
        static PyObject *t_FacetsConfig$DimConfig_get__requireDimCount(t_FacetsConfig$DimConfig *self, void *data);
        static int t_FacetsConfig$DimConfig_set__requireDimCount(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data);

        static PyGetSetDef t_FacetsConfig$DimConfig__fields_[] = {
          DECLARE_GETSET_FIELD(t_FacetsConfig$DimConfig, hierarchical),
          DECLARE_GETSET_FIELD(t_FacetsConfig$DimConfig, indexFieldName),
          DECLARE_GETSET_FIELD(t_FacetsConfig$DimConfig, multiValued),
          DECLARE_GETSET_FIELD(t_FacetsConfig$DimConfig, requireDimCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetsConfig$DimConfig__methods_[] = {
          DECLARE_METHOD(t_FacetsConfig$DimConfig, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsConfig$DimConfig, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FacetsConfig$DimConfig, t_FacetsConfig$DimConfig, ::java::lang::Object, FacetsConfig$DimConfig, t_FacetsConfig$DimConfig_init_, 0, 0, t_FacetsConfig$DimConfig__fields_, 0, 0);

        void t_FacetsConfig$DimConfig::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetsConfig$DimConfig), module, "FacetsConfig$DimConfig", 0);
        }

        void t_FacetsConfig$DimConfig::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FacetsConfig$DimConfig).tp_dict, "class_", make_descriptor(FacetsConfig$DimConfig::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FacetsConfig$DimConfig).tp_dict, "wrapfn_", make_descriptor(t_FacetsConfig$DimConfig::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FacetsConfig$DimConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FacetsConfig$DimConfig_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetsConfig$DimConfig::initializeClass, 1)))
            return NULL;
          return t_FacetsConfig$DimConfig::wrap_Object(FacetsConfig$DimConfig(((t_FacetsConfig$DimConfig *) arg)->object.this$));
        }
        static PyObject *t_FacetsConfig$DimConfig_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetsConfig$DimConfig::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetsConfig$DimConfig_init_(t_FacetsConfig$DimConfig *self, PyObject *args, PyObject *kwds)
        {
          FacetsConfig$DimConfig object((jobject) NULL);

          INT_CALL(object = FacetsConfig$DimConfig());
          self->object = object;

          return 0;
        }

        static PyObject *t_FacetsConfig$DimConfig_get__hierarchical(t_FacetsConfig$DimConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_hierarchical());
          Py_RETURN_BOOL(value);
        }
        static int t_FacetsConfig$DimConfig_set__hierarchical(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_hierarchical(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "hierarchical", arg);
          return -1;
        }

        static PyObject *t_FacetsConfig$DimConfig_get__indexFieldName(t_FacetsConfig$DimConfig *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_indexFieldName());
          return j2p(value);
        }
        static int t_FacetsConfig$DimConfig_set__indexFieldName(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          if (!parseArg(arg, "s", &value))
          {
            INT_CALL(self->object._set_indexFieldName(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "indexFieldName", arg);
          return -1;
        }

        static PyObject *t_FacetsConfig$DimConfig_get__multiValued(t_FacetsConfig$DimConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_multiValued());
          Py_RETURN_BOOL(value);
        }
        static int t_FacetsConfig$DimConfig_set__multiValued(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_multiValued(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "multiValued", arg);
          return -1;
        }

        static PyObject *t_FacetsConfig$DimConfig_get__requireDimCount(t_FacetsConfig$DimConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_requireDimCount());
          Py_RETURN_BOOL(value);
        }
        static int t_FacetsConfig$DimConfig_set__requireDimCount(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_requireDimCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "requireDimCount", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/QueryParser$Operator.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *QueryParser$Operator::class$ = NULL;
          jmethodID *QueryParser$Operator::mids$ = NULL;
          bool QueryParser$Operator::live$ = false;
          QueryParser$Operator *QueryParser$Operator::AND = NULL;
          QueryParser$Operator *QueryParser$Operator::OR = NULL;

          jclass QueryParser$Operator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/QueryParser$Operator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_7436fa4b] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;");
              mids$[mid_values_6ed7a6cd] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              AND = new QueryParser$Operator(env->getStaticObjectField(cls, "AND", "Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;"));
              OR = new QueryParser$Operator(env->getStaticObjectField(cls, "OR", "Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryParser$Operator QueryParser$Operator::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return QueryParser$Operator(env->callStaticObjectMethod(cls, mids$[mid_valueOf_7436fa4b], a0.this$));
          }

          JArray< QueryParser$Operator > QueryParser$Operator::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< QueryParser$Operator >(env->callStaticObjectMethod(cls, mids$[mid_values_6ed7a6cd]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_QueryParser$Operator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParser$Operator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParser$Operator_of_(t_QueryParser$Operator *self, PyObject *args);
          static PyObject *t_QueryParser$Operator_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_QueryParser$Operator_values(PyTypeObject *type);
          static PyObject *t_QueryParser$Operator_get__parameters_(t_QueryParser$Operator *self, void *data);
          static PyGetSetDef t_QueryParser$Operator__fields_[] = {
            DECLARE_GET_FIELD(t_QueryParser$Operator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryParser$Operator__methods_[] = {
            DECLARE_METHOD(t_QueryParser$Operator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParser$Operator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParser$Operator, of_, METH_VARARGS),
            DECLARE_METHOD(t_QueryParser$Operator, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_QueryParser$Operator, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryParser$Operator, t_QueryParser$Operator, ::java::lang::Enum, QueryParser$Operator, abstract_init, 0, 0, t_QueryParser$Operator__fields_, 0, 0);
          PyObject *t_QueryParser$Operator::wrap_Object(const QueryParser$Operator& object, PyTypeObject *p0)
          {
            PyObject *obj = t_QueryParser$Operator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_QueryParser$Operator *self = (t_QueryParser$Operator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_QueryParser$Operator::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_QueryParser$Operator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_QueryParser$Operator *self = (t_QueryParser$Operator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_QueryParser$Operator::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryParser$Operator), module, "QueryParser$Operator", 0);
          }

          void t_QueryParser$Operator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryParser$Operator).tp_dict, "class_", make_descriptor(QueryParser$Operator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryParser$Operator).tp_dict, "wrapfn_", make_descriptor(t_QueryParser$Operator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryParser$Operator).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(QueryParser$Operator::initializeClass);
            PyDict_SetItemString(PY_TYPE(QueryParser$Operator).tp_dict, "AND", make_descriptor(t_QueryParser$Operator::wrap_Object(*QueryParser$Operator::AND)));
            PyDict_SetItemString(PY_TYPE(QueryParser$Operator).tp_dict, "OR", make_descriptor(t_QueryParser$Operator::wrap_Object(*QueryParser$Operator::OR)));
          }

          static PyObject *t_QueryParser$Operator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryParser$Operator::initializeClass, 1)))
              return NULL;
            return t_QueryParser$Operator::wrap_Object(QueryParser$Operator(((t_QueryParser$Operator *) arg)->object.this$));
          }
          static PyObject *t_QueryParser$Operator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryParser$Operator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_QueryParser$Operator_of_(t_QueryParser$Operator *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_QueryParser$Operator_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            QueryParser$Operator result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::QueryParser$Operator::valueOf(a0));
              return t_QueryParser$Operator::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_QueryParser$Operator_values(PyTypeObject *type)
          {
            JArray< QueryParser$Operator > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::QueryParser$Operator::values());
            return JArray<jobject>(result.this$).wrap(t_QueryParser$Operator::wrap_jobject);
          }
          static PyObject *t_QueryParser$Operator_get__parameters_(t_QueryParser$Operator *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/RunAutomaton.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *RunAutomaton::class$ = NULL;
          jmethodID *RunAutomaton::mids$ = NULL;
          bool RunAutomaton::live$ = false;

          jclass RunAutomaton::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/RunAutomaton");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_930c56a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;IZ)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getCharIntervals_dab10e75] = env->getMethodID(cls, "getCharIntervals", "()[I");
              mids$[mid_getInitialState_54c6a179] = env->getMethodID(cls, "getInitialState", "()I");
              mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isAccept_39c7bd30] = env->getMethodID(cls, "isAccept", "(I)Z");
              mids$[mid_step_d8d154b9] = env->getMethodID(cls, "step", "(II)I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RunAutomaton::RunAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_930c56a3, a0.this$, a1, a2)) {}

          jboolean RunAutomaton::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          JArray< jint > RunAutomaton::getCharIntervals() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getCharIntervals_dab10e75]));
          }

          jint RunAutomaton::getInitialState() const
          {
            return env->callIntMethod(this$, mids$[mid_getInitialState_54c6a179]);
          }

          jint RunAutomaton::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
          }

          jint RunAutomaton::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jboolean RunAutomaton::isAccept(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isAccept_39c7bd30], a0);
          }

          jint RunAutomaton::step(jint a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_step_d8d154b9], a0, a1);
          }

          ::java::lang::String RunAutomaton::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_RunAutomaton_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RunAutomaton_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RunAutomaton_init_(t_RunAutomaton *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RunAutomaton_equals(t_RunAutomaton *self, PyObject *args);
          static PyObject *t_RunAutomaton_getCharIntervals(t_RunAutomaton *self);
          static PyObject *t_RunAutomaton_getInitialState(t_RunAutomaton *self);
          static PyObject *t_RunAutomaton_getSize(t_RunAutomaton *self);
          static PyObject *t_RunAutomaton_hashCode(t_RunAutomaton *self, PyObject *args);
          static PyObject *t_RunAutomaton_isAccept(t_RunAutomaton *self, PyObject *arg);
          static PyObject *t_RunAutomaton_step(t_RunAutomaton *self, PyObject *args);
          static PyObject *t_RunAutomaton_toString(t_RunAutomaton *self, PyObject *args);
          static PyObject *t_RunAutomaton_get__charIntervals(t_RunAutomaton *self, void *data);
          static PyObject *t_RunAutomaton_get__initialState(t_RunAutomaton *self, void *data);
          static PyObject *t_RunAutomaton_get__size(t_RunAutomaton *self, void *data);
          static PyGetSetDef t_RunAutomaton__fields_[] = {
            DECLARE_GET_FIELD(t_RunAutomaton, charIntervals),
            DECLARE_GET_FIELD(t_RunAutomaton, initialState),
            DECLARE_GET_FIELD(t_RunAutomaton, size),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_RunAutomaton__methods_[] = {
            DECLARE_METHOD(t_RunAutomaton, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RunAutomaton, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RunAutomaton, equals, METH_VARARGS),
            DECLARE_METHOD(t_RunAutomaton, getCharIntervals, METH_NOARGS),
            DECLARE_METHOD(t_RunAutomaton, getInitialState, METH_NOARGS),
            DECLARE_METHOD(t_RunAutomaton, getSize, METH_NOARGS),
            DECLARE_METHOD(t_RunAutomaton, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_RunAutomaton, isAccept, METH_O),
            DECLARE_METHOD(t_RunAutomaton, step, METH_VARARGS),
            DECLARE_METHOD(t_RunAutomaton, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RunAutomaton, t_RunAutomaton, ::java::lang::Object, RunAutomaton, t_RunAutomaton_init_, 0, 0, t_RunAutomaton__fields_, 0, 0);

          void t_RunAutomaton::install(PyObject *module)
          {
            installType(&PY_TYPE(RunAutomaton), module, "RunAutomaton", 0);
          }

          void t_RunAutomaton::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RunAutomaton).tp_dict, "class_", make_descriptor(RunAutomaton::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RunAutomaton).tp_dict, "wrapfn_", make_descriptor(t_RunAutomaton::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RunAutomaton).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RunAutomaton_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RunAutomaton::initializeClass, 1)))
              return NULL;
            return t_RunAutomaton::wrap_Object(RunAutomaton(((t_RunAutomaton *) arg)->object.this$));
          }
          static PyObject *t_RunAutomaton_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RunAutomaton::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RunAutomaton_init_(t_RunAutomaton *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jint a1;
            jboolean a2;
            RunAutomaton object((jobject) NULL);

            if (!parseArgs(args, "kIZ", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = RunAutomaton(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RunAutomaton_equals(t_RunAutomaton *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(RunAutomaton), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_RunAutomaton_getCharIntervals(t_RunAutomaton *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.getCharIntervals());
            return result.wrap();
          }

          static PyObject *t_RunAutomaton_getInitialState(t_RunAutomaton *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getInitialState());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_RunAutomaton_getSize(t_RunAutomaton *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_RunAutomaton_hashCode(t_RunAutomaton *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(RunAutomaton), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_RunAutomaton_isAccept(t_RunAutomaton *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.isAccept(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isAccept", arg);
            return NULL;
          }

          static PyObject *t_RunAutomaton_step(t_RunAutomaton *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.step(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "step", args);
            return NULL;
          }

          static PyObject *t_RunAutomaton_toString(t_RunAutomaton *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(RunAutomaton), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_RunAutomaton_get__charIntervals(t_RunAutomaton *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object.getCharIntervals());
            return value.wrap();
          }

          static PyObject *t_RunAutomaton_get__initialState(t_RunAutomaton *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getInitialState());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_RunAutomaton_get__size(t_RunAutomaton *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanOrQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/TermContext.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanOrQuery::class$ = NULL;
          jmethodID *SpanOrQuery::mids$ = NULL;
          bool SpanOrQuery::live$ = false;

          jclass SpanOrQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanOrQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_272f3877] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/spans/SpanQuery;)V");
              mids$[mid_addClause_056c1897] = env->getMethodID(cls, "addClause", "(Lorg/apache/lucene/search/spans/SpanQuery;)V");
              mids$[mid_clone_4d61402f] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/spans/SpanOrQuery;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getClauses_19569402] = env->getMethodID(cls, "getClauses", "()[Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanOrQuery::SpanOrQuery(const JArray< ::org::apache::lucene::search::spans::SpanQuery > & a0) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_272f3877, a0.this$)) {}

          void SpanOrQuery::addClause(const ::org::apache::lucene::search::spans::SpanQuery & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_addClause_056c1897], a0.this$);
          }

          SpanOrQuery SpanOrQuery::clone() const
          {
            return SpanOrQuery(env->callObjectMethod(this$, mids$[mid_clone_4d61402f]));
          }

          jboolean SpanOrQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void SpanOrQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          JArray< ::org::apache::lucene::search::spans::SpanQuery > SpanOrQuery::getClauses() const
          {
            return JArray< ::org::apache::lucene::search::spans::SpanQuery >(env->callObjectMethod(this$, mids$[mid_getClauses_19569402]));
          }

          ::java::lang::String SpanOrQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::search::spans::Spans SpanOrQuery::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }

          jint SpanOrQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query SpanOrQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String SpanOrQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanOrQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanOrQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanOrQuery_init_(t_SpanOrQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanOrQuery_addClause(t_SpanOrQuery *self, PyObject *arg);
          static PyObject *t_SpanOrQuery_clone(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_equals(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_extractTerms(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_getClauses(t_SpanOrQuery *self);
          static PyObject *t_SpanOrQuery_getField(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_getSpans(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_hashCode(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_rewrite(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_toString(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_get__clauses(t_SpanOrQuery *self, void *data);
          static PyObject *t_SpanOrQuery_get__field(t_SpanOrQuery *self, void *data);
          static PyGetSetDef t_SpanOrQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanOrQuery, clauses),
            DECLARE_GET_FIELD(t_SpanOrQuery, field),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanOrQuery__methods_[] = {
            DECLARE_METHOD(t_SpanOrQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanOrQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanOrQuery, addClause, METH_O),
            DECLARE_METHOD(t_SpanOrQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, getClauses, METH_NOARGS),
            DECLARE_METHOD(t_SpanOrQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanOrQuery, t_SpanOrQuery, ::org::apache::lucene::search::spans::SpanQuery, SpanOrQuery, t_SpanOrQuery_init_, 0, 0, t_SpanOrQuery__fields_, 0, 0);

          void t_SpanOrQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanOrQuery), module, "SpanOrQuery", 0);
          }

          void t_SpanOrQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanOrQuery).tp_dict, "class_", make_descriptor(SpanOrQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanOrQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanOrQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanOrQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanOrQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanOrQuery::initializeClass, 1)))
              return NULL;
            return t_SpanOrQuery::wrap_Object(SpanOrQuery(((t_SpanOrQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanOrQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanOrQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanOrQuery_init_(t_SpanOrQuery *self, PyObject *args, PyObject *kwds)
          {
            JArray< ::org::apache::lucene::search::spans::SpanQuery > a0((jobject) NULL);
            SpanOrQuery object((jobject) NULL);

            if (!parseArgs(args, "[k", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0))
            {
              INT_CALL(object = SpanOrQuery(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanOrQuery_addClause(t_SpanOrQuery *self, PyObject *arg)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0))
            {
              OBJ_CALL(self->object.addClause(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addClause", arg);
            return NULL;
          }

          static PyObject *t_SpanOrQuery_clone(t_SpanOrQuery *self, PyObject *args)
          {
            SpanOrQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_SpanOrQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SpanOrQuery_equals(t_SpanOrQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanOrQuery_extractTerms(t_SpanOrQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_SpanOrQuery_getClauses(t_SpanOrQuery *self)
          {
            JArray< ::org::apache::lucene::search::spans::SpanQuery > result((jobject) NULL);
            OBJ_CALL(result = self->object.getClauses());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spans::t_SpanQuery::wrap_jobject);
          }

          static PyObject *t_SpanOrQuery_getField(t_SpanOrQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanOrQuery_getSpans(t_SpanOrQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanOrQuery_hashCode(t_SpanOrQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanOrQuery_rewrite(t_SpanOrQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_SpanOrQuery_toString(t_SpanOrQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SpanOrQuery_get__clauses(t_SpanOrQuery *self, void *data)
          {
            JArray< ::org::apache::lucene::search::spans::SpanQuery > value((jobject) NULL);
            OBJ_CALL(value = self->object.getClauses());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::spans::t_SpanQuery::wrap_jobject);
          }

          static PyObject *t_SpanOrQuery_get__field(t_SpanOrQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/idversion/IDVersionPostingsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace idversion {

          ::java::lang::Class *IDVersionPostingsFormat::class$ = NULL;
          jmethodID *IDVersionPostingsFormat::mids$ = NULL;
          bool IDVersionPostingsFormat::live$ = false;
          jlong IDVersionPostingsFormat::MAX_VERSION = (jlong) 0;
          jlong IDVersionPostingsFormat::MIN_VERSION = (jlong) 0;

          jclass IDVersionPostingsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/idversion/IDVersionPostingsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_bytesToLong_7bc03dd8] = env->getStaticMethodID(cls, "bytesToLong", "(Lorg/apache/lucene/util/BytesRef;)J");
              mids$[mid_fieldsConsumer_a15793c6] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
              mids$[mid_fieldsProducer_c86c62bc] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
              mids$[mid_longToBytes_57875143] = env->getStaticMethodID(cls, "longToBytes", "(JLorg/apache/lucene/util/BytesRef;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAX_VERSION = env->getStaticLongField(cls, "MAX_VERSION");
              MIN_VERSION = env->getStaticLongField(cls, "MIN_VERSION");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IDVersionPostingsFormat::IDVersionPostingsFormat() : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          IDVersionPostingsFormat::IDVersionPostingsFormat(jint a0, jint a1) : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

          jlong IDVersionPostingsFormat::bytesToLong(const ::org::apache::lucene::util::BytesRef & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticLongMethod(cls, mids$[mid_bytesToLong_7bc03dd8], a0.this$);
          }

          ::org::apache::lucene::codecs::FieldsConsumer IDVersionPostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_a15793c6], a0.this$));
          }

          ::org::apache::lucene::codecs::FieldsProducer IDVersionPostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c86c62bc], a0.this$));
          }

          void IDVersionPostingsFormat::longToBytes(jlong a0, const ::org::apache::lucene::util::BytesRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_longToBytes_57875143], a0, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace idversion {
          static PyObject *t_IDVersionPostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IDVersionPostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IDVersionPostingsFormat_init_(t_IDVersionPostingsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IDVersionPostingsFormat_bytesToLong(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IDVersionPostingsFormat_fieldsConsumer(t_IDVersionPostingsFormat *self, PyObject *args);
          static PyObject *t_IDVersionPostingsFormat_fieldsProducer(t_IDVersionPostingsFormat *self, PyObject *args);
          static PyObject *t_IDVersionPostingsFormat_longToBytes(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_IDVersionPostingsFormat__methods_[] = {
            DECLARE_METHOD(t_IDVersionPostingsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IDVersionPostingsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IDVersionPostingsFormat, bytesToLong, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IDVersionPostingsFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionPostingsFormat, fieldsProducer, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionPostingsFormat, longToBytes, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IDVersionPostingsFormat, t_IDVersionPostingsFormat, ::org::apache::lucene::codecs::PostingsFormat, IDVersionPostingsFormat, t_IDVersionPostingsFormat_init_, 0, 0, 0, 0, 0);

          void t_IDVersionPostingsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(IDVersionPostingsFormat), module, "IDVersionPostingsFormat", 0);
          }

          void t_IDVersionPostingsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IDVersionPostingsFormat).tp_dict, "class_", make_descriptor(IDVersionPostingsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IDVersionPostingsFormat).tp_dict, "wrapfn_", make_descriptor(t_IDVersionPostingsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IDVersionPostingsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(IDVersionPostingsFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(IDVersionPostingsFormat).tp_dict, "MAX_VERSION", make_descriptor(IDVersionPostingsFormat::MAX_VERSION));
            PyDict_SetItemString(PY_TYPE(IDVersionPostingsFormat).tp_dict, "MIN_VERSION", make_descriptor(IDVersionPostingsFormat::MIN_VERSION));
          }

          static PyObject *t_IDVersionPostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IDVersionPostingsFormat::initializeClass, 1)))
              return NULL;
            return t_IDVersionPostingsFormat::wrap_Object(IDVersionPostingsFormat(((t_IDVersionPostingsFormat *) arg)->object.this$));
          }
          static PyObject *t_IDVersionPostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IDVersionPostingsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IDVersionPostingsFormat_init_(t_IDVersionPostingsFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                IDVersionPostingsFormat object((jobject) NULL);

                INT_CALL(object = IDVersionPostingsFormat());
                self->object = object;
                break;
              }
              goto err;
             case 2:
              {
                jint a0;
                jint a1;
                IDVersionPostingsFormat object((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  INT_CALL(object = IDVersionPostingsFormat(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IDVersionPostingsFormat_bytesToLong(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jlong result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::idversion::IDVersionPostingsFormat::bytesToLong(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError(type, "bytesToLong", arg);
            return NULL;
          }

          static PyObject *t_IDVersionPostingsFormat_fieldsConsumer(t_IDVersionPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionPostingsFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_IDVersionPostingsFormat_fieldsProducer(t_IDVersionPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionPostingsFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }

          static PyObject *t_IDVersionPostingsFormat_longToBytes(PyTypeObject *type, PyObject *args)
          {
            jlong a0;
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);

            if (!parseArgs(args, "Jk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(::org::apache::lucene::codecs::idversion::IDVersionPostingsFormat::longToBytes(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "longToBytes", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *TotalTermFreqValueSource::class$ = NULL;
            jmethodID *TotalTermFreqValueSource::mids$ = NULL;
            bool TotalTermFreqValueSource::live$ = false;

            jclass TotalTermFreqValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b45b6622] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TotalTermFreqValueSource::TotalTermFreqValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_b45b6622, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            void TotalTermFreqValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String TotalTermFreqValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean TotalTermFreqValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues TotalTermFreqValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint TotalTermFreqValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String TotalTermFreqValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_TotalTermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TotalTermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TotalTermFreqValueSource_init_(t_TotalTermFreqValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TotalTermFreqValueSource_createWeight(t_TotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_TotalTermFreqValueSource_description(t_TotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_TotalTermFreqValueSource_equals(t_TotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_TotalTermFreqValueSource_getValues(t_TotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_TotalTermFreqValueSource_hashCode(t_TotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_TotalTermFreqValueSource_name(t_TotalTermFreqValueSource *self);

            static PyMethodDef t_TotalTermFreqValueSource__methods_[] = {
              DECLARE_METHOD(t_TotalTermFreqValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TotalTermFreqValueSource, t_TotalTermFreqValueSource, ::org::apache::lucene::queries::function::ValueSource, TotalTermFreqValueSource, t_TotalTermFreqValueSource_init_, 0, 0, 0, 0, 0);

            void t_TotalTermFreqValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(TotalTermFreqValueSource), module, "TotalTermFreqValueSource", 0);
            }

            void t_TotalTermFreqValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TotalTermFreqValueSource).tp_dict, "class_", make_descriptor(TotalTermFreqValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TotalTermFreqValueSource).tp_dict, "wrapfn_", make_descriptor(t_TotalTermFreqValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TotalTermFreqValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TotalTermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TotalTermFreqValueSource::initializeClass, 1)))
                return NULL;
              return t_TotalTermFreqValueSource::wrap_Object(TotalTermFreqValueSource(((t_TotalTermFreqValueSource *) arg)->object.this$));
            }
            static PyObject *t_TotalTermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TotalTermFreqValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TotalTermFreqValueSource_init_(t_TotalTermFreqValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              TotalTermFreqValueSource object((jobject) NULL);

              if (!parseArgs(args, "sssk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = TotalTermFreqValueSource(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TotalTermFreqValueSource_createWeight(t_TotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TotalTermFreqValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_TotalTermFreqValueSource_description(t_TotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(TotalTermFreqValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_TotalTermFreqValueSource_equals(t_TotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(TotalTermFreqValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_TotalTermFreqValueSource_getValues(t_TotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(TotalTermFreqValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_TotalTermFreqValueSource_hashCode(t_TotalTermFreqValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(TotalTermFreqValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_TotalTermFreqValueSource_name(t_TotalTermFreqValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/BaseDirectory.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *BaseDirectory::class$ = NULL;
        jmethodID *BaseDirectory::mids$ = NULL;
        bool BaseDirectory::live$ = false;

        jclass BaseDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/BaseDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_getLockFactory_e4e9c36d] = env->getMethodID(cls, "getLockFactory", "()Lorg/apache/lucene/store/LockFactory;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_setLockFactory_9892eb8c] = env->getMethodID(cls, "setLockFactory", "(Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_ensureOpen_54c6a166] = env->getMethodID(cls, "ensureOpen", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void BaseDirectory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        ::org::apache::lucene::store::LockFactory BaseDirectory::getLockFactory() const
        {
          return ::org::apache::lucene::store::LockFactory(env->callObjectMethod(this$, mids$[mid_getLockFactory_e4e9c36d]));
        }

        ::org::apache::lucene::store::Lock BaseDirectory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }

        void BaseDirectory::setLockFactory(const ::org::apache::lucene::store::LockFactory & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLockFactory_9892eb8c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_BaseDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BaseDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BaseDirectory_clearLock(t_BaseDirectory *self, PyObject *args);
        static PyObject *t_BaseDirectory_getLockFactory(t_BaseDirectory *self, PyObject *args);
        static PyObject *t_BaseDirectory_makeLock(t_BaseDirectory *self, PyObject *args);
        static PyObject *t_BaseDirectory_setLockFactory(t_BaseDirectory *self, PyObject *args);
        static PyObject *t_BaseDirectory_get__lockFactory(t_BaseDirectory *self, void *data);
        static int t_BaseDirectory_set__lockFactory(t_BaseDirectory *self, PyObject *arg, void *data);
        static PyGetSetDef t_BaseDirectory__fields_[] = {
          DECLARE_GETSET_FIELD(t_BaseDirectory, lockFactory),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BaseDirectory__methods_[] = {
          DECLARE_METHOD(t_BaseDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BaseDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BaseDirectory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_BaseDirectory, getLockFactory, METH_VARARGS),
          DECLARE_METHOD(t_BaseDirectory, makeLock, METH_VARARGS),
          DECLARE_METHOD(t_BaseDirectory, setLockFactory, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BaseDirectory, t_BaseDirectory, ::org::apache::lucene::store::Directory, BaseDirectory, abstract_init, 0, 0, t_BaseDirectory__fields_, 0, 0);

        void t_BaseDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(BaseDirectory), module, "BaseDirectory", 0);
        }

        void t_BaseDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BaseDirectory).tp_dict, "class_", make_descriptor(BaseDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BaseDirectory).tp_dict, "wrapfn_", make_descriptor(t_BaseDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BaseDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BaseDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BaseDirectory::initializeClass, 1)))
            return NULL;
          return t_BaseDirectory::wrap_Object(BaseDirectory(((t_BaseDirectory *) arg)->object.this$));
        }
        static PyObject *t_BaseDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BaseDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BaseDirectory_clearLock(t_BaseDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BaseDirectory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_BaseDirectory_getLockFactory(t_BaseDirectory *self, PyObject *args)
        {
          ::org::apache::lucene::store::LockFactory result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLockFactory());
            return ::org::apache::lucene::store::t_LockFactory::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BaseDirectory), (PyObject *) self, "getLockFactory", args, 2);
        }

        static PyObject *t_BaseDirectory_makeLock(t_BaseDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BaseDirectory), (PyObject *) self, "makeLock", args, 2);
        }

        static PyObject *t_BaseDirectory_setLockFactory(t_BaseDirectory *self, PyObject *args)
        {
          ::org::apache::lucene::store::LockFactory a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setLockFactory(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BaseDirectory), (PyObject *) self, "setLockFactory", args, 2);
        }

        static PyObject *t_BaseDirectory_get__lockFactory(t_BaseDirectory *self, void *data)
        {
          ::org::apache::lucene::store::LockFactory value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockFactory());
          return ::org::apache::lucene::store::t_LockFactory::wrap_Object(value);
        }
        static int t_BaseDirectory_set__lockFactory(t_BaseDirectory *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::store::LockFactory value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &value))
            {
              INT_CALL(self->object.setLockFactory(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "lockFactory", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/TokenMgrError.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *TokenMgrError::class$ = NULL;
          jmethodID *TokenMgrError::mids$ = NULL;
          bool TokenMgrError::live$ = false;

          jclass TokenMgrError::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/TokenMgrError");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
              mids$[mid_init$_8aaeec67] = env->getMethodID(cls, "<init>", "(ZIIILjava/lang/String;CI)V");
              mids$[mid_getMessage_14c7b5c5] = env->getMethodID(cls, "getMessage", "()Ljava/lang/String;");
              mids$[mid_LexicalError_e888c5f6] = env->getStaticMethodID(cls, "LexicalError", "(ZIIILjava/lang/String;C)Ljava/lang/String;");
              mids$[mid_addEscapes_97a5258f] = env->getStaticMethodID(cls, "addEscapes", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenMgrError::TokenMgrError() : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          TokenMgrError::TokenMgrError(const ::java::lang::String & a0, jint a1) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

          TokenMgrError::TokenMgrError(jboolean a0, jint a1, jint a2, jint a3, const ::java::lang::String & a4, jchar a5, jint a6) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_8aaeec67, a0, a1, a2, a3, a4.this$, a5, a6)) {}

          ::java::lang::String TokenMgrError::getMessage() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMessage_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args);
          static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data);
          static PyGetSetDef t_TokenMgrError__fields_[] = {
            DECLARE_GET_FIELD(t_TokenMgrError, message),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TokenMgrError__methods_[] = {
            DECLARE_METHOD(t_TokenMgrError, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenMgrError, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenMgrError, getMessage, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenMgrError, t_TokenMgrError, ::java::lang::Error, TokenMgrError, t_TokenMgrError_init_, 0, 0, t_TokenMgrError__fields_, 0, 0);

          void t_TokenMgrError::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenMgrError), module, "TokenMgrError", 0);
          }

          void t_TokenMgrError::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "class_", make_descriptor(TokenMgrError::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "wrapfn_", make_descriptor(t_TokenMgrError::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenMgrError::initializeClass, 1)))
              return NULL;
            return t_TokenMgrError::wrap_Object(TokenMgrError(((t_TokenMgrError *) arg)->object.this$));
          }
          static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenMgrError::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                TokenMgrError object((jobject) NULL);

                INT_CALL(object = TokenMgrError());
                self->object = object;
                break;
              }
              goto err;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                TokenMgrError object((jobject) NULL);

                if (!parseArgs(args, "sI", &a0, &a1))
                {
                  INT_CALL(object = TokenMgrError(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 7:
              {
                jboolean a0;
                jint a1;
                jint a2;
                jint a3;
                ::java::lang::String a4((jobject) NULL);
                jchar a5;
                jint a6;
                TokenMgrError object((jobject) NULL);

                if (!parseArgs(args, "ZIIIsCI", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                {
                  INT_CALL(object = TokenMgrError(a0, a1, a2, a3, a4, a5, a6));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getMessage());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(TokenMgrError), (PyObject *) self, "getMessage", args, 2);
          }

          static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getMessage());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/NumericTokenStream.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *NumericTokenStream::class$ = NULL;
        jmethodID *NumericTokenStream::mids$ = NULL;
        bool NumericTokenStream::live$ = false;
        ::java::lang::String *NumericTokenStream::TOKEN_TYPE_FULL_PREC = NULL;
        ::java::lang::String *NumericTokenStream::TOKEN_TYPE_LOWER_PREC = NULL;

        jclass NumericTokenStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/NumericTokenStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_f6b58e9c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;I)V");
            mids$[mid_getPrecisionStep_54c6a179] = env->getMethodID(cls, "getPrecisionStep", "()I");
            mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_setDoubleValue_9f5ef2d6] = env->getMethodID(cls, "setDoubleValue", "(D)Lorg/apache/lucene/analysis/NumericTokenStream;");
            mids$[mid_setFloatValue_e2936734] = env->getMethodID(cls, "setFloatValue", "(F)Lorg/apache/lucene/analysis/NumericTokenStream;");
            mids$[mid_setIntValue_ca7ab323] = env->getMethodID(cls, "setIntValue", "(I)Lorg/apache/lucene/analysis/NumericTokenStream;");
            mids$[mid_setLongValue_c6439648] = env->getMethodID(cls, "setLongValue", "(J)Lorg/apache/lucene/analysis/NumericTokenStream;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TOKEN_TYPE_FULL_PREC = new ::java::lang::String(env->getStaticObjectField(cls, "TOKEN_TYPE_FULL_PREC", "Ljava/lang/String;"));
            TOKEN_TYPE_LOWER_PREC = new ::java::lang::String(env->getStaticObjectField(cls, "TOKEN_TYPE_LOWER_PREC", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NumericTokenStream::NumericTokenStream() : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        NumericTokenStream::NumericTokenStream(jint a0) : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        NumericTokenStream::NumericTokenStream(const ::org::apache::lucene::util::AttributeFactory & a0, jint a1) : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_f6b58e9c, a0.this$, a1)) {}

        jint NumericTokenStream::getPrecisionStep() const
        {
          return env->callIntMethod(this$, mids$[mid_getPrecisionStep_54c6a179]);
        }

        jboolean NumericTokenStream::incrementToken() const
        {
          return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
        }

        void NumericTokenStream::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }

        NumericTokenStream NumericTokenStream::setDoubleValue(jdouble a0) const
        {
          return NumericTokenStream(env->callObjectMethod(this$, mids$[mid_setDoubleValue_9f5ef2d6], a0));
        }

        NumericTokenStream NumericTokenStream::setFloatValue(jfloat a0) const
        {
          return NumericTokenStream(env->callObjectMethod(this$, mids$[mid_setFloatValue_e2936734], a0));
        }

        NumericTokenStream NumericTokenStream::setIntValue(jint a0) const
        {
          return NumericTokenStream(env->callObjectMethod(this$, mids$[mid_setIntValue_ca7ab323], a0));
        }

        NumericTokenStream NumericTokenStream::setLongValue(jlong a0) const
        {
          return NumericTokenStream(env->callObjectMethod(this$, mids$[mid_setLongValue_c6439648], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/NumericTokenStream$NumericTermAttributeImpl.h"
#include "org/apache/lucene/analysis/NumericTokenStream$NumericTermAttribute.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_NumericTokenStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericTokenStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NumericTokenStream_init_(t_NumericTokenStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NumericTokenStream_getPrecisionStep(t_NumericTokenStream *self);
        static PyObject *t_NumericTokenStream_incrementToken(t_NumericTokenStream *self, PyObject *args);
        static PyObject *t_NumericTokenStream_reset(t_NumericTokenStream *self, PyObject *args);
        static PyObject *t_NumericTokenStream_setDoubleValue(t_NumericTokenStream *self, PyObject *arg);
        static PyObject *t_NumericTokenStream_setFloatValue(t_NumericTokenStream *self, PyObject *arg);
        static PyObject *t_NumericTokenStream_setIntValue(t_NumericTokenStream *self, PyObject *arg);
        static PyObject *t_NumericTokenStream_setLongValue(t_NumericTokenStream *self, PyObject *arg);
        static int t_NumericTokenStream_set__doubleValue(t_NumericTokenStream *self, PyObject *arg, void *data);
        static int t_NumericTokenStream_set__floatValue(t_NumericTokenStream *self, PyObject *arg, void *data);
        static int t_NumericTokenStream_set__intValue(t_NumericTokenStream *self, PyObject *arg, void *data);
        static int t_NumericTokenStream_set__longValue(t_NumericTokenStream *self, PyObject *arg, void *data);
        static PyObject *t_NumericTokenStream_get__precisionStep(t_NumericTokenStream *self, void *data);
        static PyGetSetDef t_NumericTokenStream__fields_[] = {
          DECLARE_SET_FIELD(t_NumericTokenStream, doubleValue),
          DECLARE_SET_FIELD(t_NumericTokenStream, floatValue),
          DECLARE_SET_FIELD(t_NumericTokenStream, intValue),
          DECLARE_SET_FIELD(t_NumericTokenStream, longValue),
          DECLARE_GET_FIELD(t_NumericTokenStream, precisionStep),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NumericTokenStream__methods_[] = {
          DECLARE_METHOD(t_NumericTokenStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericTokenStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericTokenStream, getPrecisionStep, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream, incrementToken, METH_VARARGS),
          DECLARE_METHOD(t_NumericTokenStream, reset, METH_VARARGS),
          DECLARE_METHOD(t_NumericTokenStream, setDoubleValue, METH_O),
          DECLARE_METHOD(t_NumericTokenStream, setFloatValue, METH_O),
          DECLARE_METHOD(t_NumericTokenStream, setIntValue, METH_O),
          DECLARE_METHOD(t_NumericTokenStream, setLongValue, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericTokenStream, t_NumericTokenStream, ::org::apache::lucene::analysis::TokenStream, NumericTokenStream, t_NumericTokenStream_init_, 0, 0, t_NumericTokenStream__fields_, 0, 0);

        void t_NumericTokenStream::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericTokenStream), module, "NumericTokenStream", 0);
          PyDict_SetItemString(PY_TYPE(NumericTokenStream).tp_dict, "NumericTermAttributeImpl", make_descriptor(&PY_TYPE(NumericTokenStream$NumericTermAttributeImpl)));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream).tp_dict, "NumericTermAttribute", make_descriptor(&PY_TYPE(NumericTokenStream$NumericTermAttribute)));
        }

        void t_NumericTokenStream::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericTokenStream).tp_dict, "class_", make_descriptor(NumericTokenStream::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream).tp_dict, "wrapfn_", make_descriptor(t_NumericTokenStream::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(NumericTokenStream::initializeClass);
          PyDict_SetItemString(PY_TYPE(NumericTokenStream).tp_dict, "TOKEN_TYPE_FULL_PREC", make_descriptor(j2p(*NumericTokenStream::TOKEN_TYPE_FULL_PREC)));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream).tp_dict, "TOKEN_TYPE_LOWER_PREC", make_descriptor(j2p(*NumericTokenStream::TOKEN_TYPE_LOWER_PREC)));
        }

        static PyObject *t_NumericTokenStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericTokenStream::initializeClass, 1)))
            return NULL;
          return t_NumericTokenStream::wrap_Object(NumericTokenStream(((t_NumericTokenStream *) arg)->object.this$));
        }
        static PyObject *t_NumericTokenStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericTokenStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NumericTokenStream_init_(t_NumericTokenStream *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              NumericTokenStream object((jobject) NULL);

              INT_CALL(object = NumericTokenStream());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              jint a0;
              NumericTokenStream object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = NumericTokenStream(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
              jint a1;
              NumericTokenStream object((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = NumericTokenStream(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NumericTokenStream_getPrecisionStep(t_NumericTokenStream *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPrecisionStep());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericTokenStream_incrementToken(t_NumericTokenStream *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.incrementToken());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(NumericTokenStream), (PyObject *) self, "incrementToken", args, 2);
        }

        static PyObject *t_NumericTokenStream_reset(t_NumericTokenStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NumericTokenStream), (PyObject *) self, "reset", args, 2);
        }

        static PyObject *t_NumericTokenStream_setDoubleValue(t_NumericTokenStream *self, PyObject *arg)
        {
          jdouble a0;
          NumericTokenStream result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setDoubleValue(a0));
            return t_NumericTokenStream::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setDoubleValue", arg);
          return NULL;
        }

        static PyObject *t_NumericTokenStream_setFloatValue(t_NumericTokenStream *self, PyObject *arg)
        {
          jfloat a0;
          NumericTokenStream result((jobject) NULL);

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = self->object.setFloatValue(a0));
            return t_NumericTokenStream::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setFloatValue", arg);
          return NULL;
        }

        static PyObject *t_NumericTokenStream_setIntValue(t_NumericTokenStream *self, PyObject *arg)
        {
          jint a0;
          NumericTokenStream result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setIntValue(a0));
            return t_NumericTokenStream::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setIntValue", arg);
          return NULL;
        }

        static PyObject *t_NumericTokenStream_setLongValue(t_NumericTokenStream *self, PyObject *arg)
        {
          jlong a0;
          NumericTokenStream result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.setLongValue(a0));
            return t_NumericTokenStream::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setLongValue", arg);
          return NULL;
        }

        static int t_NumericTokenStream_set__doubleValue(t_NumericTokenStream *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setDoubleValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "doubleValue", arg);
          return -1;
        }

        static int t_NumericTokenStream_set__floatValue(t_NumericTokenStream *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setFloatValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "floatValue", arg);
          return -1;
        }

        static int t_NumericTokenStream_set__intValue(t_NumericTokenStream *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setIntValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "intValue", arg);
          return -1;
        }

        static int t_NumericTokenStream_set__longValue(t_NumericTokenStream *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setLongValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "longValue", arg);
          return -1;
        }

        static PyObject *t_NumericTokenStream_get__precisionStep(t_NumericTokenStream *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPrecisionStep());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/Comparable.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor.h"
#include "org/apache/lucene/queryparser/surround/query/DistanceSubQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SimpleTerm::class$ = NULL;
            jmethodID *SimpleTerm::mids$ = NULL;
            bool SimpleTerm::live$ = false;

            jclass SimpleTerm::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SimpleTerm");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
                mids$[mid_addSpanQueries_0564f431] = env->getMethodID(cls, "addSpanQueries", "(Lorg/apache/lucene/queryparser/surround/query/SpanNearClauseFactory;)V");
                mids$[mid_compareTo_a1a1be24] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/queryparser/surround/query/SimpleTerm;)I");
                mids$[mid_distanceSubQueryNotAllowed_14c7b5c5] = env->getMethodID(cls, "distanceSubQueryNotAllowed", "()Ljava/lang/String;");
                mids$[mid_getFieldOperator_14c7b5c5] = env->getMethodID(cls, "getFieldOperator", "()Ljava/lang/String;");
                mids$[mid_getQuote_14c7b5c5] = env->getMethodID(cls, "getQuote", "()Ljava/lang/String;");
                mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_toStringUnquoted_14c7b5c5] = env->getMethodID(cls, "toStringUnquoted", "()Ljava/lang/String;");
                mids$[mid_visitMatchingTerms_330199a1] = env->getMethodID(cls, "visitMatchingTerms", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor;)V");
                mids$[mid_suffixToString_9f94ae34] = env->getMethodID(cls, "suffixToString", "(Ljava/lang/StringBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SimpleTerm::SimpleTerm(jboolean a0) : ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

            void SimpleTerm::addSpanQueries(const ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addSpanQueries_0564f431], a0.this$);
            }

            jint SimpleTerm::compareTo(const SimpleTerm & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_compareTo_a1a1be24], a0.this$);
            }

            ::java::lang::String SimpleTerm::distanceSubQueryNotAllowed() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_distanceSubQueryNotAllowed_14c7b5c5]));
            }

            ::java::lang::String SimpleTerm::getFieldOperator() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldOperator_14c7b5c5]));
            }

            ::java::lang::String SimpleTerm::getQuote() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getQuote_14c7b5c5]));
            }

            ::org::apache::lucene::search::Query SimpleTerm::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30], a0.this$, a1.this$));
            }

            ::java::lang::String SimpleTerm::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }

            ::java::lang::String SimpleTerm::toStringUnquoted() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringUnquoted_14c7b5c5]));
            }

            void SimpleTerm::visitMatchingTerms(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor & a2) const
            {
              env->callVoidMethod(this$, mids$[mid_visitMatchingTerms_330199a1], a0.this$, a1.this$, a2.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SimpleTerm_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SimpleTerm_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SimpleTerm_init_(t_SimpleTerm *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SimpleTerm_addSpanQueries(t_SimpleTerm *self, PyObject *arg);
            static PyObject *t_SimpleTerm_compareTo(t_SimpleTerm *self, PyObject *arg);
            static PyObject *t_SimpleTerm_distanceSubQueryNotAllowed(t_SimpleTerm *self);
            static PyObject *t_SimpleTerm_getFieldOperator(t_SimpleTerm *self);
            static PyObject *t_SimpleTerm_getQuote(t_SimpleTerm *self);
            static PyObject *t_SimpleTerm_makeLuceneQueryFieldNoBoost(t_SimpleTerm *self, PyObject *args);
            static PyObject *t_SimpleTerm_toString(t_SimpleTerm *self, PyObject *args);
            static PyObject *t_SimpleTerm_toStringUnquoted(t_SimpleTerm *self);
            static PyObject *t_SimpleTerm_visitMatchingTerms(t_SimpleTerm *self, PyObject *args);
            static PyObject *t_SimpleTerm_get__fieldOperator(t_SimpleTerm *self, void *data);
            static PyObject *t_SimpleTerm_get__quote(t_SimpleTerm *self, void *data);
            static PyGetSetDef t_SimpleTerm__fields_[] = {
              DECLARE_GET_FIELD(t_SimpleTerm, fieldOperator),
              DECLARE_GET_FIELD(t_SimpleTerm, quote),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SimpleTerm__methods_[] = {
              DECLARE_METHOD(t_SimpleTerm, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleTerm, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleTerm, addSpanQueries, METH_O),
              DECLARE_METHOD(t_SimpleTerm, compareTo, METH_O),
              DECLARE_METHOD(t_SimpleTerm, distanceSubQueryNotAllowed, METH_NOARGS),
              DECLARE_METHOD(t_SimpleTerm, getFieldOperator, METH_NOARGS),
              DECLARE_METHOD(t_SimpleTerm, getQuote, METH_NOARGS),
              DECLARE_METHOD(t_SimpleTerm, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              DECLARE_METHOD(t_SimpleTerm, toString, METH_VARARGS),
              DECLARE_METHOD(t_SimpleTerm, toStringUnquoted, METH_NOARGS),
              DECLARE_METHOD(t_SimpleTerm, visitMatchingTerms, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SimpleTerm, t_SimpleTerm, ::org::apache::lucene::queryparser::surround::query::SrndQuery, SimpleTerm, t_SimpleTerm_init_, 0, 0, t_SimpleTerm__fields_, 0, 0);

            void t_SimpleTerm::install(PyObject *module)
            {
              installType(&PY_TYPE(SimpleTerm), module, "SimpleTerm", 0);
              PyDict_SetItemString(PY_TYPE(SimpleTerm).tp_dict, "MatchingTermVisitor", make_descriptor(&PY_TYPE(SimpleTerm$MatchingTermVisitor)));
            }

            void t_SimpleTerm::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SimpleTerm).tp_dict, "class_", make_descriptor(SimpleTerm::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SimpleTerm).tp_dict, "wrapfn_", make_descriptor(t_SimpleTerm::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SimpleTerm).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SimpleTerm_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SimpleTerm::initializeClass, 1)))
                return NULL;
              return t_SimpleTerm::wrap_Object(SimpleTerm(((t_SimpleTerm *) arg)->object.this$));
            }
            static PyObject *t_SimpleTerm_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SimpleTerm::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SimpleTerm_init_(t_SimpleTerm *self, PyObject *args, PyObject *kwds)
            {
              jboolean a0;
              SimpleTerm object((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                INT_CALL(object = SimpleTerm(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SimpleTerm_addSpanQueries(t_SimpleTerm *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addSpanQueries(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addSpanQueries", arg);
              return NULL;
            }

            static PyObject *t_SimpleTerm_compareTo(t_SimpleTerm *self, PyObject *arg)
            {
              SimpleTerm a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", SimpleTerm::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.compareTo(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
              return NULL;
            }

            static PyObject *t_SimpleTerm_distanceSubQueryNotAllowed(t_SimpleTerm *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.distanceSubQueryNotAllowed());
              return j2p(result);
            }

            static PyObject *t_SimpleTerm_getFieldOperator(t_SimpleTerm *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getFieldOperator());
              return j2p(result);
            }

            static PyObject *t_SimpleTerm_getQuote(t_SimpleTerm *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getQuote());
              return j2p(result);
            }

            static PyObject *t_SimpleTerm_makeLuceneQueryFieldNoBoost(t_SimpleTerm *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(SimpleTerm), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }

            static PyObject *t_SimpleTerm_toString(t_SimpleTerm *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SimpleTerm), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_SimpleTerm_toStringUnquoted(t_SimpleTerm *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.toStringUnquoted());
              return j2p(result);
            }

            static PyObject *t_SimpleTerm_visitMatchingTerms(t_SimpleTerm *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor a2((jobject) NULL);

              if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.visitMatchingTerms(a0, a1, a2));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "visitMatchingTerms", args);
              return NULL;
            }

            static PyObject *t_SimpleTerm_get__fieldOperator(t_SimpleTerm *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getFieldOperator());
              return j2p(value);
            }

            static PyObject *t_SimpleTerm_get__quote(t_SimpleTerm *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getQuote());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/DocValuesOrdinalsReader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *DocValuesOrdinalsReader::class$ = NULL;
          jmethodID *DocValuesOrdinalsReader::mids$ = NULL;
          bool DocValuesOrdinalsReader::live$ = false;

          jclass DocValuesOrdinalsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/DocValuesOrdinalsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_getIndexFieldName_14c7b5c5] = env->getMethodID(cls, "getIndexFieldName", "()Ljava/lang/String;");
              mids$[mid_getReader_7c7f912a] = env->getMethodID(cls, "getReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader;");
              mids$[mid_decode_079b7c7a] = env->getMethodID(cls, "decode", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/IntsRef;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DocValuesOrdinalsReader::DocValuesOrdinalsReader() : ::org::apache::lucene::facet::taxonomy::OrdinalsReader(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          DocValuesOrdinalsReader::DocValuesOrdinalsReader(const ::java::lang::String & a0) : ::org::apache::lucene::facet::taxonomy::OrdinalsReader(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          ::java::lang::String DocValuesOrdinalsReader::getIndexFieldName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getIndexFieldName_14c7b5c5]));
          }

          ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader DocValuesOrdinalsReader::getReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            return ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader(env->callObjectMethod(this$, mids$[mid_getReader_7c7f912a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_DocValuesOrdinalsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DocValuesOrdinalsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DocValuesOrdinalsReader_init_(t_DocValuesOrdinalsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DocValuesOrdinalsReader_getIndexFieldName(t_DocValuesOrdinalsReader *self, PyObject *args);
          static PyObject *t_DocValuesOrdinalsReader_getReader(t_DocValuesOrdinalsReader *self, PyObject *args);
          static PyObject *t_DocValuesOrdinalsReader_get__indexFieldName(t_DocValuesOrdinalsReader *self, void *data);
          static PyGetSetDef t_DocValuesOrdinalsReader__fields_[] = {
            DECLARE_GET_FIELD(t_DocValuesOrdinalsReader, indexFieldName),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DocValuesOrdinalsReader__methods_[] = {
            DECLARE_METHOD(t_DocValuesOrdinalsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocValuesOrdinalsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocValuesOrdinalsReader, getIndexFieldName, METH_VARARGS),
            DECLARE_METHOD(t_DocValuesOrdinalsReader, getReader, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DocValuesOrdinalsReader, t_DocValuesOrdinalsReader, ::org::apache::lucene::facet::taxonomy::OrdinalsReader, DocValuesOrdinalsReader, t_DocValuesOrdinalsReader_init_, 0, 0, t_DocValuesOrdinalsReader__fields_, 0, 0);

          void t_DocValuesOrdinalsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(DocValuesOrdinalsReader), module, "DocValuesOrdinalsReader", 0);
          }

          void t_DocValuesOrdinalsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DocValuesOrdinalsReader).tp_dict, "class_", make_descriptor(DocValuesOrdinalsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DocValuesOrdinalsReader).tp_dict, "wrapfn_", make_descriptor(t_DocValuesOrdinalsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DocValuesOrdinalsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DocValuesOrdinalsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DocValuesOrdinalsReader::initializeClass, 1)))
              return NULL;
            return t_DocValuesOrdinalsReader::wrap_Object(DocValuesOrdinalsReader(((t_DocValuesOrdinalsReader *) arg)->object.this$));
          }
          static PyObject *t_DocValuesOrdinalsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DocValuesOrdinalsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DocValuesOrdinalsReader_init_(t_DocValuesOrdinalsReader *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                DocValuesOrdinalsReader object((jobject) NULL);

                INT_CALL(object = DocValuesOrdinalsReader());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                DocValuesOrdinalsReader object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = DocValuesOrdinalsReader(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DocValuesOrdinalsReader_getIndexFieldName(t_DocValuesOrdinalsReader *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getIndexFieldName());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DocValuesOrdinalsReader), (PyObject *) self, "getIndexFieldName", args, 2);
          }

          static PyObject *t_DocValuesOrdinalsReader_getReader(t_DocValuesOrdinalsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getReader(a0));
              return ::org::apache::lucene::facet::taxonomy::t_OrdinalsReader$OrdinalsSegmentReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DocValuesOrdinalsReader), (PyObject *) self, "getReader", args, 2);
          }

          static PyObject *t_DocValuesOrdinalsReader_get__indexFieldName(t_DocValuesOrdinalsReader *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getIndexFieldName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/GroupQueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *GroupQueryNodeProcessor::class$ = NULL;
              jmethodID *GroupQueryNodeProcessor::mids$ = NULL;
              bool GroupQueryNodeProcessor::live$ = false;

              jclass GroupQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/GroupQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_getQueryConfigHandler_3636d8c3] = env->getMethodID(cls, "getQueryConfigHandler", "()Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setQueryConfigHandler_0b1f7132] = env->getMethodID(cls, "setQueryConfigHandler", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              GroupQueryNodeProcessor::GroupQueryNodeProcessor() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler GroupQueryNodeProcessor::getQueryConfigHandler() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->callObjectMethod(this$, mids$[mid_getQueryConfigHandler_3636d8c3]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode GroupQueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }

              void GroupQueryNodeProcessor::setQueryConfigHandler(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setQueryConfigHandler_0b1f7132], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_GroupQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_GroupQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_GroupQueryNodeProcessor_init_(t_GroupQueryNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_GroupQueryNodeProcessor_getQueryConfigHandler(t_GroupQueryNodeProcessor *self);
              static PyObject *t_GroupQueryNodeProcessor_process(t_GroupQueryNodeProcessor *self, PyObject *arg);
              static PyObject *t_GroupQueryNodeProcessor_setQueryConfigHandler(t_GroupQueryNodeProcessor *self, PyObject *arg);
              static PyObject *t_GroupQueryNodeProcessor_get__queryConfigHandler(t_GroupQueryNodeProcessor *self, void *data);
              static int t_GroupQueryNodeProcessor_set__queryConfigHandler(t_GroupQueryNodeProcessor *self, PyObject *arg, void *data);
              static PyGetSetDef t_GroupQueryNodeProcessor__fields_[] = {
                DECLARE_GETSET_FIELD(t_GroupQueryNodeProcessor, queryConfigHandler),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_GroupQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_GroupQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_GroupQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_GroupQueryNodeProcessor, getQueryConfigHandler, METH_NOARGS),
                DECLARE_METHOD(t_GroupQueryNodeProcessor, process, METH_O),
                DECLARE_METHOD(t_GroupQueryNodeProcessor, setQueryConfigHandler, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(GroupQueryNodeProcessor, t_GroupQueryNodeProcessor, ::java::lang::Object, GroupQueryNodeProcessor, t_GroupQueryNodeProcessor_init_, 0, 0, t_GroupQueryNodeProcessor__fields_, 0, 0);

              void t_GroupQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(GroupQueryNodeProcessor), module, "GroupQueryNodeProcessor", 0);
              }

              void t_GroupQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(GroupQueryNodeProcessor).tp_dict, "class_", make_descriptor(GroupQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(GroupQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_GroupQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(GroupQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_GroupQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, GroupQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_GroupQueryNodeProcessor::wrap_Object(GroupQueryNodeProcessor(((t_GroupQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_GroupQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, GroupQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_GroupQueryNodeProcessor_init_(t_GroupQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                GroupQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = GroupQueryNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_GroupQueryNodeProcessor_getQueryConfigHandler(t_GroupQueryNodeProcessor *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler result((jobject) NULL);
                OBJ_CALL(result = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(result);
              }

              static PyObject *t_GroupQueryNodeProcessor_process(t_GroupQueryNodeProcessor *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "process", arg);
                return NULL;
              }

              static PyObject *t_GroupQueryNodeProcessor_setQueryConfigHandler(t_GroupQueryNodeProcessor *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setQueryConfigHandler(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setQueryConfigHandler", arg);
                return NULL;
              }

              static PyObject *t_GroupQueryNodeProcessor_get__queryConfigHandler(t_GroupQueryNodeProcessor *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                OBJ_CALL(value = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(value);
              }
              static int t_GroupQueryNodeProcessor_set__queryConfigHandler(t_GroupQueryNodeProcessor *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &value))
                  {
                    INT_CALL(self->object.setQueryConfigHandler(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "queryConfigHandler", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldValueHitQueue$Entry.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldValueHitQueue$Entry::class$ = NULL;
        jmethodID *FieldValueHitQueue$Entry::mids$ = NULL;
        jfieldID *FieldValueHitQueue$Entry::fids$ = NULL;
        bool FieldValueHitQueue$Entry::live$ = false;

        jclass FieldValueHitQueue$Entry::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldValueHitQueue$Entry");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a74e6883] = env->getMethodID(cls, "<init>", "(IIF)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_slot] = env->getFieldID(cls, "slot", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldValueHitQueue$Entry::FieldValueHitQueue$Entry(jint a0, jint a1, jfloat a2) : ::org::apache::lucene::search::ScoreDoc(env->newObject(initializeClass, &mids$, mid_init$_a74e6883, a0, a1, a2)) {}

        ::java::lang::String FieldValueHitQueue$Entry::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jint FieldValueHitQueue$Entry::_get_slot() const
        {
          return env->getIntField(this$, fids$[fid_slot]);
        }

        void FieldValueHitQueue$Entry::_set_slot(jint a0) const
        {
          env->setIntField(this$, fids$[fid_slot], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldValueHitQueue$Entry_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldValueHitQueue$Entry_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldValueHitQueue$Entry_of_(t_FieldValueHitQueue$Entry *self, PyObject *args);
        static int t_FieldValueHitQueue$Entry_init_(t_FieldValueHitQueue$Entry *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldValueHitQueue$Entry_toString(t_FieldValueHitQueue$Entry *self, PyObject *args);
        static PyObject *t_FieldValueHitQueue$Entry_get__slot(t_FieldValueHitQueue$Entry *self, void *data);
        static int t_FieldValueHitQueue$Entry_set__slot(t_FieldValueHitQueue$Entry *self, PyObject *arg, void *data);

        static PyObject *t_FieldValueHitQueue$Entry_get__parameters_(t_FieldValueHitQueue$Entry *self, void *data);
        static PyGetSetDef t_FieldValueHitQueue$Entry__fields_[] = {
          DECLARE_GETSET_FIELD(t_FieldValueHitQueue$Entry, slot),
          DECLARE_GET_FIELD(t_FieldValueHitQueue$Entry, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldValueHitQueue$Entry__methods_[] = {
          DECLARE_METHOD(t_FieldValueHitQueue$Entry, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldValueHitQueue$Entry, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldValueHitQueue$Entry, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldValueHitQueue$Entry, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldValueHitQueue$Entry, t_FieldValueHitQueue$Entry, ::org::apache::lucene::search::ScoreDoc, FieldValueHitQueue$Entry, t_FieldValueHitQueue$Entry_init_, 0, 0, t_FieldValueHitQueue$Entry__fields_, 0, 0);
        PyObject *t_FieldValueHitQueue$Entry::wrap_Object(const FieldValueHitQueue$Entry& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldValueHitQueue$Entry::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldValueHitQueue$Entry *self = (t_FieldValueHitQueue$Entry *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldValueHitQueue$Entry::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldValueHitQueue$Entry::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldValueHitQueue$Entry *self = (t_FieldValueHitQueue$Entry *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldValueHitQueue$Entry::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldValueHitQueue$Entry), module, "FieldValueHitQueue$Entry", 0);
        }

        void t_FieldValueHitQueue$Entry::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldValueHitQueue$Entry).tp_dict, "class_", make_descriptor(FieldValueHitQueue$Entry::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldValueHitQueue$Entry).tp_dict, "wrapfn_", make_descriptor(t_FieldValueHitQueue$Entry::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldValueHitQueue$Entry).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldValueHitQueue$Entry_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldValueHitQueue$Entry::initializeClass, 1)))
            return NULL;
          return t_FieldValueHitQueue$Entry::wrap_Object(FieldValueHitQueue$Entry(((t_FieldValueHitQueue$Entry *) arg)->object.this$));
        }
        static PyObject *t_FieldValueHitQueue$Entry_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldValueHitQueue$Entry::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldValueHitQueue$Entry_of_(t_FieldValueHitQueue$Entry *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldValueHitQueue$Entry_init_(t_FieldValueHitQueue$Entry *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jint a1;
          jfloat a2;
          FieldValueHitQueue$Entry object((jobject) NULL);

          if (!parseArgs(args, "IIF", &a0, &a1, &a2))
          {
            INT_CALL(object = FieldValueHitQueue$Entry(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldValueHitQueue$Entry_toString(t_FieldValueHitQueue$Entry *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldValueHitQueue$Entry), (PyObject *) self, "toString", args, 2);
        }
        static PyObject *t_FieldValueHitQueue$Entry_get__parameters_(t_FieldValueHitQueue$Entry *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_FieldValueHitQueue$Entry_get__slot(t_FieldValueHitQueue$Entry *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_slot());
          return PyInt_FromLong((long) value);
        }
        static int t_FieldValueHitQueue$Entry_set__slot(t_FieldValueHitQueue$Entry *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_slot(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "slot", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/FileInputStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/File.h"
#include "java/io/FileDescriptor.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *FileInputStream::class$ = NULL;
    jmethodID *FileInputStream::mids$ = NULL;
    bool FileInputStream::live$ = false;

    jclass FileInputStream::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/FileInputStream");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_698067a0] = env->getMethodID(cls, "<init>", "(Ljava/io/FileDescriptor;)V");
        mids$[mid_available_54c6a179] = env->getMethodID(cls, "available", "()I");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_getFD_94738b01] = env->getMethodID(cls, "getFD", "()Ljava/io/FileDescriptor;");
        mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
        mids$[mid_read_49b4f134] = env->getMethodID(cls, "read", "([B)I");
        mids$[mid_read_86f44340] = env->getMethodID(cls, "read", "([BII)I");
        mids$[mid_skip_0ee6df33] = env->getMethodID(cls, "skip", "(J)J");
        mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    FileInputStream::FileInputStream(const ::java::io::File & a0) : ::java::io::InputStream(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

    FileInputStream::FileInputStream(const ::java::lang::String & a0) : ::java::io::InputStream(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    FileInputStream::FileInputStream(const ::java::io::FileDescriptor & a0) : ::java::io::InputStream(env->newObject(initializeClass, &mids$, mid_init$_698067a0, a0.this$)) {}

    jint FileInputStream::available() const
    {
      return env->callIntMethod(this$, mids$[mid_available_54c6a179]);
    }

    void FileInputStream::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    ::java::io::FileDescriptor FileInputStream::getFD() const
    {
      return ::java::io::FileDescriptor(env->callObjectMethod(this$, mids$[mid_getFD_94738b01]));
    }

    jint FileInputStream::read() const
    {
      return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
    }

    jint FileInputStream::read(const JArray< jbyte > & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_read_49b4f134], a0.this$);
    }

    jint FileInputStream::read(const JArray< jbyte > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_86f44340], a0.this$, a1, a2);
    }

    jlong FileInputStream::skip(jlong a0) const
    {
      return env->callLongMethod(this$, mids$[mid_skip_0ee6df33], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_FileInputStream_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_FileInputStream_instance_(PyTypeObject *type, PyObject *arg);
    static int t_FileInputStream_init_(t_FileInputStream *self, PyObject *args, PyObject *kwds);
    static PyObject *t_FileInputStream_available(t_FileInputStream *self, PyObject *args);
    static PyObject *t_FileInputStream_close(t_FileInputStream *self, PyObject *args);
    static PyObject *t_FileInputStream_getFD(t_FileInputStream *self);
    static PyObject *t_FileInputStream_read(t_FileInputStream *self, PyObject *args);
    static PyObject *t_FileInputStream_skip(t_FileInputStream *self, PyObject *args);
    static PyObject *t_FileInputStream_get__fD(t_FileInputStream *self, void *data);
    static PyGetSetDef t_FileInputStream__fields_[] = {
      DECLARE_GET_FIELD(t_FileInputStream, fD),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_FileInputStream__methods_[] = {
      DECLARE_METHOD(t_FileInputStream, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_FileInputStream, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_FileInputStream, available, METH_VARARGS),
      DECLARE_METHOD(t_FileInputStream, close, METH_VARARGS),
      DECLARE_METHOD(t_FileInputStream, getFD, METH_NOARGS),
      DECLARE_METHOD(t_FileInputStream, read, METH_VARARGS),
      DECLARE_METHOD(t_FileInputStream, skip, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(FileInputStream, t_FileInputStream, ::java::io::InputStream, FileInputStream, t_FileInputStream_init_, 0, 0, t_FileInputStream__fields_, 0, 0);

    void t_FileInputStream::install(PyObject *module)
    {
      installType(&PY_TYPE(FileInputStream), module, "FileInputStream", 0);
    }

    void t_FileInputStream::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(FileInputStream).tp_dict, "class_", make_descriptor(FileInputStream::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(FileInputStream).tp_dict, "wrapfn_", make_descriptor(t_FileInputStream::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(FileInputStream).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_FileInputStream_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, FileInputStream::initializeClass, 1)))
        return NULL;
      return t_FileInputStream::wrap_Object(FileInputStream(((t_FileInputStream *) arg)->object.this$));
    }
    static PyObject *t_FileInputStream_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, FileInputStream::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_FileInputStream_init_(t_FileInputStream *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::io::File a0((jobject) NULL);
          FileInputStream object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
          {
            INT_CALL(object = FileInputStream(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          FileInputStream object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = FileInputStream(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::io::FileDescriptor a0((jobject) NULL);
          FileInputStream object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::FileDescriptor::initializeClass, &a0))
          {
            INT_CALL(object = FileInputStream(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_FileInputStream_available(t_FileInputStream *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.available());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(FileInputStream), (PyObject *) self, "available", args, 2);
    }

    static PyObject *t_FileInputStream_close(t_FileInputStream *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(FileInputStream), (PyObject *) self, "close", args, 2);
    }

    static PyObject *t_FileInputStream_getFD(t_FileInputStream *self)
    {
      ::java::io::FileDescriptor result((jobject) NULL);
      OBJ_CALL(result = self->object.getFD());
      return ::java::io::t_FileDescriptor::wrap_Object(result);
    }

    static PyObject *t_FileInputStream_read(t_FileInputStream *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.read());
          return PyInt_FromLong((long) result);
        }
        break;
       case 1:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(result = self->object.read(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      return callSuper(&PY_TYPE(FileInputStream), (PyObject *) self, "read", args, 2);
    }

    static PyObject *t_FileInputStream_skip(t_FileInputStream *self, PyObject *args)
    {
      jlong a0;
      jlong result;

      if (!parseArgs(args, "J", &a0))
      {
        OBJ_CALL(result = self->object.skip(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(FileInputStream), (PyObject *) self, "skip", args, 2);
    }

    static PyObject *t_FileInputStream_get__fD(t_FileInputStream *self, void *data)
    {
      ::java::io::FileDescriptor value((jobject) NULL);
      OBJ_CALL(value = self->object.getFD());
      return ::java::io::t_FileDescriptor::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterDocsAndPositionsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterAtomicReader$FilterDocsAndPositionsEnum::class$ = NULL;
        jmethodID *FilterAtomicReader$FilterDocsAndPositionsEnum::mids$ = NULL;
        bool FilterAtomicReader$FilterDocsAndPositionsEnum::live$ = false;

        jclass FilterAtomicReader$FilterDocsAndPositionsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterAtomicReader$FilterDocsAndPositionsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9604ac16] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/DocsAndPositionsEnum;)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_attributes_f901022b] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_endOffset_54c6a179] = env->getMethodID(cls, "endOffset", "()I");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_getPayload_4ae19461] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_nextPosition_54c6a179] = env->getMethodID(cls, "nextPosition", "()I");
            mids$[mid_startOffset_54c6a179] = env->getMethodID(cls, "startOffset", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterAtomicReader$FilterDocsAndPositionsEnum::FilterAtomicReader$FilterDocsAndPositionsEnum(const ::org::apache::lucene::index::DocsAndPositionsEnum & a0) : ::org::apache::lucene::index::DocsAndPositionsEnum(env->newObject(initializeClass, &mids$, mid_init$_9604ac16, a0.this$)) {}

        jint FilterAtomicReader$FilterDocsAndPositionsEnum::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        ::org::apache::lucene::util::AttributeSource FilterAtomicReader$FilterDocsAndPositionsEnum::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_f901022b]));
        }

        jlong FilterAtomicReader$FilterDocsAndPositionsEnum::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint FilterAtomicReader$FilterDocsAndPositionsEnum::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint FilterAtomicReader$FilterDocsAndPositionsEnum::endOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_endOffset_54c6a179]);
        }

        jint FilterAtomicReader$FilterDocsAndPositionsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef FilterAtomicReader$FilterDocsAndPositionsEnum::getPayload() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_4ae19461]));
        }

        jint FilterAtomicReader$FilterDocsAndPositionsEnum::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }

        jint FilterAtomicReader$FilterDocsAndPositionsEnum::nextPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_nextPosition_54c6a179]);
        }

        jint FilterAtomicReader$FilterDocsAndPositionsEnum::startOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_startOffset_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterAtomicReader$FilterDocsAndPositionsEnum_init_(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_advance(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_attributes(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_cost(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_docID(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_endOffset(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_freq(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_getPayload(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_nextDoc(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_nextPosition(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_startOffset(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_get__payload(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, void *data);
        static PyGetSetDef t_FilterAtomicReader$FilterDocsAndPositionsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, payload),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterAtomicReader$FilterDocsAndPositionsEnum__methods_[] = {
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, advance, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, attributes, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, cost, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, docID, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, endOffset, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, freq, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, getPayload, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, nextPosition, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, startOffset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum, t_FilterAtomicReader$FilterDocsAndPositionsEnum, ::org::apache::lucene::index::DocsAndPositionsEnum, FilterAtomicReader$FilterDocsAndPositionsEnum, t_FilterAtomicReader$FilterDocsAndPositionsEnum_init_, 0, 0, t_FilterAtomicReader$FilterDocsAndPositionsEnum__fields_, 0, 0);

        void t_FilterAtomicReader$FilterDocsAndPositionsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), module, "FilterAtomicReader$FilterDocsAndPositionsEnum", 0);
        }

        void t_FilterAtomicReader$FilterDocsAndPositionsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum).tp_dict, "class_", make_descriptor(FilterAtomicReader$FilterDocsAndPositionsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum).tp_dict, "wrapfn_", make_descriptor(t_FilterAtomicReader$FilterDocsAndPositionsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterAtomicReader$FilterDocsAndPositionsEnum::initializeClass, 1)))
            return NULL;
          return t_FilterAtomicReader$FilterDocsAndPositionsEnum::wrap_Object(FilterAtomicReader$FilterDocsAndPositionsEnum(((t_FilterAtomicReader$FilterDocsAndPositionsEnum *) arg)->object.this$));
        }
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterAtomicReader$FilterDocsAndPositionsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterAtomicReader$FilterDocsAndPositionsEnum_init_(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::DocsAndPositionsEnum a0((jobject) NULL);
          FilterAtomicReader$FilterDocsAndPositionsEnum object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0))
          {
            INT_CALL(object = FilterAtomicReader$FilterDocsAndPositionsEnum(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_advance(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_attributes(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.attributes());
            return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "attributes", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_cost(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_docID(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_endOffset(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.endOffset());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "endOffset", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_freq(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_getPayload(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "getPayload", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_nextDoc(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_nextPosition(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextPosition());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "nextPosition", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_startOffset(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.startOffset());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "startOffset", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_get__payload(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SlowCompositeReaderWrapper.h"
#include "org/apache/lucene/index/AtomicReader$CoreClosedListener.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SlowCompositeReaderWrapper::class$ = NULL;
        jmethodID *SlowCompositeReaderWrapper::mids$ = NULL;
        bool SlowCompositeReaderWrapper::live$ = false;

        jclass SlowCompositeReaderWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SlowCompositeReaderWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addCoreClosedListener_cbc2818f] = env->getMethodID(cls, "addCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_document_a2ea3ebe] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_fields_77db581d] = env->getMethodID(cls, "fields", "()Lorg/apache/lucene/index/Fields;");
            mids$[mid_getBinaryDocValues_ecab96be] = env->getMethodID(cls, "getBinaryDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getCombinedCoreAndDeletesKey_846352c3] = env->getMethodID(cls, "getCombinedCoreAndDeletesKey", "()Ljava/lang/Object;");
            mids$[mid_getCoreCacheKey_846352c3] = env->getMethodID(cls, "getCoreCacheKey", "()Ljava/lang/Object;");
            mids$[mid_getDocsWithField_e1c6a7db] = env->getMethodID(cls, "getDocsWithField", "(Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getFieldInfos_9ba20825] = env->getMethodID(cls, "getFieldInfos", "()Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getLiveDocs_03c2457d] = env->getMethodID(cls, "getLiveDocs", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNormValues_d2b19f49] = env->getMethodID(cls, "getNormValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getNumericDocValues_d2b19f49] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSortedDocValues_7b8b1a0a] = env->getMethodID(cls, "getSortedDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumericDocValues_37cd1812] = env->getMethodID(cls, "getSortedNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetDocValues_43e0e807] = env->getMethodID(cls, "getSortedSetDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getTermVectors_ef1c9c73] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_removeCoreClosedListener_cbc2818f] = env->getMethodID(cls, "removeCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_wrap_b2ba15f1] = env->getStaticMethodID(cls, "wrap", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/index/AtomicReader;");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void SlowCompositeReaderWrapper::addCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addCoreClosedListener_cbc2818f], a0.this$);
        }

        void SlowCompositeReaderWrapper::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        void SlowCompositeReaderWrapper::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_document_a2ea3ebe], a0, a1.this$);
        }

        ::org::apache::lucene::index::Fields SlowCompositeReaderWrapper::fields() const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_fields_77db581d]));
        }

        ::org::apache::lucene::index::BinaryDocValues SlowCompositeReaderWrapper::getBinaryDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinaryDocValues_ecab96be], a0.this$));
        }

        ::java::lang::Object SlowCompositeReaderWrapper::getCombinedCoreAndDeletesKey() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getCombinedCoreAndDeletesKey_846352c3]));
        }

        ::java::lang::Object SlowCompositeReaderWrapper::getCoreCacheKey() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getCoreCacheKey_846352c3]));
        }

        ::org::apache::lucene::util::Bits SlowCompositeReaderWrapper::getDocsWithField(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getDocsWithField_e1c6a7db], a0.this$));
        }

        ::org::apache::lucene::index::FieldInfos SlowCompositeReaderWrapper::getFieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_getFieldInfos_9ba20825]));
        }

        ::org::apache::lucene::util::Bits SlowCompositeReaderWrapper::getLiveDocs() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getLiveDocs_03c2457d]));
        }

        ::org::apache::lucene::index::NumericDocValues SlowCompositeReaderWrapper::getNormValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNormValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues SlowCompositeReaderWrapper::getNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumericDocValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::SortedDocValues SlowCompositeReaderWrapper::getSortedDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSortedDocValues_7b8b1a0a], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues SlowCompositeReaderWrapper::getSortedNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumericDocValues_37cd1812], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues SlowCompositeReaderWrapper::getSortedSetDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSetDocValues_43e0e807], a0.this$));
        }

        ::org::apache::lucene::index::Fields SlowCompositeReaderWrapper::getTermVectors(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_ef1c9c73], a0));
        }

        jint SlowCompositeReaderWrapper::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        jint SlowCompositeReaderWrapper::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }

        void SlowCompositeReaderWrapper::removeCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeCoreClosedListener_cbc2818f], a0.this$);
        }

        ::java::lang::String SlowCompositeReaderWrapper::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::org::apache::lucene::index::AtomicReader SlowCompositeReaderWrapper::wrap(const ::org::apache::lucene::index::IndexReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::AtomicReader(env->callStaticObjectMethod(cls, mids$[mid_wrap_b2ba15f1], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SlowCompositeReaderWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SlowCompositeReaderWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SlowCompositeReaderWrapper_addCoreClosedListener(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_checkIntegrity(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_document(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_fields(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getBinaryDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getCombinedCoreAndDeletesKey(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getCoreCacheKey(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getDocsWithField(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getFieldInfos(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getLiveDocs(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getNormValues(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getNumericDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getSortedDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getSortedNumericDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getSortedSetDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getTermVectors(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_maxDoc(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_numDocs(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_removeCoreClosedListener(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_toString(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_wrap(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SlowCompositeReaderWrapper_get__combinedCoreAndDeletesKey(t_SlowCompositeReaderWrapper *self, void *data);
        static PyObject *t_SlowCompositeReaderWrapper_get__coreCacheKey(t_SlowCompositeReaderWrapper *self, void *data);
        static PyObject *t_SlowCompositeReaderWrapper_get__fieldInfos(t_SlowCompositeReaderWrapper *self, void *data);
        static PyObject *t_SlowCompositeReaderWrapper_get__liveDocs(t_SlowCompositeReaderWrapper *self, void *data);
        static PyGetSetDef t_SlowCompositeReaderWrapper__fields_[] = {
          DECLARE_GET_FIELD(t_SlowCompositeReaderWrapper, combinedCoreAndDeletesKey),
          DECLARE_GET_FIELD(t_SlowCompositeReaderWrapper, coreCacheKey),
          DECLARE_GET_FIELD(t_SlowCompositeReaderWrapper, fieldInfos),
          DECLARE_GET_FIELD(t_SlowCompositeReaderWrapper, liveDocs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SlowCompositeReaderWrapper__methods_[] = {
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, addCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, checkIntegrity, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, document, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, fields, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getBinaryDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getCombinedCoreAndDeletesKey, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getCoreCacheKey, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getDocsWithField, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getFieldInfos, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getNormValues, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getSortedDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getSortedNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getSortedSetDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getTermVectors, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, maxDoc, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, numDocs, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, removeCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, toString, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, wrap, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SlowCompositeReaderWrapper, t_SlowCompositeReaderWrapper, ::org::apache::lucene::index::AtomicReader, SlowCompositeReaderWrapper, abstract_init, 0, 0, t_SlowCompositeReaderWrapper__fields_, 0, 0);

        void t_SlowCompositeReaderWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(SlowCompositeReaderWrapper), module, "SlowCompositeReaderWrapper", 0);
        }

        void t_SlowCompositeReaderWrapper::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SlowCompositeReaderWrapper).tp_dict, "class_", make_descriptor(SlowCompositeReaderWrapper::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SlowCompositeReaderWrapper).tp_dict, "wrapfn_", make_descriptor(t_SlowCompositeReaderWrapper::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SlowCompositeReaderWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SlowCompositeReaderWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SlowCompositeReaderWrapper::initializeClass, 1)))
            return NULL;
          return t_SlowCompositeReaderWrapper::wrap_Object(SlowCompositeReaderWrapper(((t_SlowCompositeReaderWrapper *) arg)->object.this$));
        }
        static PyObject *t_SlowCompositeReaderWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SlowCompositeReaderWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SlowCompositeReaderWrapper_addCoreClosedListener(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "addCoreClosedListener", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_checkIntegrity(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.checkIntegrity());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "checkIntegrity", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_document(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.document(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "document", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_fields(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.fields());
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "fields", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getBinaryDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryDocValues(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getBinaryDocValues", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getCombinedCoreAndDeletesKey(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getCombinedCoreAndDeletesKey());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getCombinedCoreAndDeletesKey", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getCoreCacheKey(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getCoreCacheKey());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getCoreCacheKey", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getDocsWithField(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocsWithField(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getDocsWithField", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getFieldInfos(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFieldInfos());
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getFieldInfos", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getLiveDocs(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLiveDocs());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getLiveDocs", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getNormValues(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNormValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getNormValues", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getNumericDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNumericDocValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getNumericDocValues", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getSortedDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedDocValues(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getSortedDocValues", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getSortedNumericDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumericDocValues(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getSortedNumericDocValues", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getSortedSetDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedSetDocValues(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getSortedSetDocValues", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getTermVectors(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTermVectors(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getTermVectors", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_maxDoc(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.maxDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "maxDoc", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_numDocs(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numDocs());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "numDocs", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_removeCoreClosedListener(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.removeCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "removeCoreClosedListener", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_toString(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_wrap(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::index::AtomicReader result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::SlowCompositeReaderWrapper::wrap(a0));
            return ::org::apache::lucene::index::t_AtomicReader::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "wrap", arg);
          return NULL;
        }

        static PyObject *t_SlowCompositeReaderWrapper_get__combinedCoreAndDeletesKey(t_SlowCompositeReaderWrapper *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getCombinedCoreAndDeletesKey());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_SlowCompositeReaderWrapper_get__coreCacheKey(t_SlowCompositeReaderWrapper *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getCoreCacheKey());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_SlowCompositeReaderWrapper_get__fieldInfos(t_SlowCompositeReaderWrapper *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_SlowCompositeReaderWrapper_get__liveDocs(t_SlowCompositeReaderWrapper *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cn/ChineseTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/cn/ChineseTokenizer.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {

          ::java::lang::Class *ChineseTokenizerFactory::class$ = NULL;
          jmethodID *ChineseTokenizerFactory::mids$ = NULL;
          bool ChineseTokenizerFactory::live$ = false;

          jclass ChineseTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cn/ChineseTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_3378b1fc] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/cn/ChineseTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ChineseTokenizerFactory::ChineseTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::cn::ChineseTokenizer ChineseTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::cn::ChineseTokenizer(env->callObjectMethod(this$, mids$[mid_create_3378b1fc], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {
          static PyObject *t_ChineseTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ChineseTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ChineseTokenizerFactory_init_(t_ChineseTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ChineseTokenizerFactory_create(t_ChineseTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_ChineseTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_ChineseTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ChineseTokenizerFactory, t_ChineseTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, ChineseTokenizerFactory, t_ChineseTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_ChineseTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ChineseTokenizerFactory), module, "ChineseTokenizerFactory", 0);
          }

          void t_ChineseTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ChineseTokenizerFactory).tp_dict, "class_", make_descriptor(ChineseTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ChineseTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_ChineseTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ChineseTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ChineseTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ChineseTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_ChineseTokenizerFactory::wrap_Object(ChineseTokenizerFactory(((t_ChineseTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_ChineseTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ChineseTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ChineseTokenizerFactory_init_(t_ChineseTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ChineseTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ChineseTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ChineseTokenizerFactory_create(t_ChineseTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::cn::ChineseTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::cn::t_ChineseTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ChineseTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanPositionCheckQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/TermContext.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanPositionCheckQuery::class$ = NULL;
          jmethodID *SpanPositionCheckQuery::mids$ = NULL;
          bool SpanPositionCheckQuery::live$ = false;

          jclass SpanPositionCheckQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanPositionCheckQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_056c1897] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;)V");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getMatch_d3aa0332] = env->getMethodID(cls, "getMatch", "()Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_acceptPosition_5342f73f] = env->getMethodID(cls, "acceptPosition", "(Lorg/apache/lucene/search/spans/Spans;)Lorg/apache/lucene/search/spans/SpanPositionCheckQuery$AcceptStatus;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanPositionCheckQuery::SpanPositionCheckQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_056c1897, a0.this$)) {}

          void SpanPositionCheckQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          ::java::lang::String SpanPositionCheckQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::search::spans::SpanQuery SpanPositionCheckQuery::getMatch() const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_getMatch_d3aa0332]));
          }

          ::org::apache::lucene::search::spans::Spans SpanPositionCheckQuery::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::search::Query SpanPositionCheckQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanPositionCheckQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanPositionCheckQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanPositionCheckQuery_init_(t_SpanPositionCheckQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanPositionCheckQuery_extractTerms(t_SpanPositionCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPositionCheckQuery_getField(t_SpanPositionCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPositionCheckQuery_getMatch(t_SpanPositionCheckQuery *self);
          static PyObject *t_SpanPositionCheckQuery_getSpans(t_SpanPositionCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPositionCheckQuery_rewrite(t_SpanPositionCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPositionCheckQuery_get__field(t_SpanPositionCheckQuery *self, void *data);
          static PyObject *t_SpanPositionCheckQuery_get__match(t_SpanPositionCheckQuery *self, void *data);
          static PyGetSetDef t_SpanPositionCheckQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanPositionCheckQuery, field),
            DECLARE_GET_FIELD(t_SpanPositionCheckQuery, match),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanPositionCheckQuery__methods_[] = {
            DECLARE_METHOD(t_SpanPositionCheckQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, getMatch, METH_NOARGS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, rewrite, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanPositionCheckQuery, t_SpanPositionCheckQuery, ::org::apache::lucene::search::spans::SpanQuery, SpanPositionCheckQuery, t_SpanPositionCheckQuery_init_, 0, 0, t_SpanPositionCheckQuery__fields_, 0, 0);

          void t_SpanPositionCheckQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanPositionCheckQuery), module, "SpanPositionCheckQuery", 0);
          }

          void t_SpanPositionCheckQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanPositionCheckQuery).tp_dict, "class_", make_descriptor(SpanPositionCheckQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanPositionCheckQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanPositionCheckQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanPositionCheckQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanPositionCheckQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanPositionCheckQuery::initializeClass, 1)))
              return NULL;
            return t_SpanPositionCheckQuery::wrap_Object(SpanPositionCheckQuery(((t_SpanPositionCheckQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanPositionCheckQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanPositionCheckQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanPositionCheckQuery_init_(t_SpanPositionCheckQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            SpanPositionCheckQuery object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0))
            {
              INT_CALL(object = SpanPositionCheckQuery(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanPositionCheckQuery_extractTerms(t_SpanPositionCheckQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SpanPositionCheckQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_SpanPositionCheckQuery_getField(t_SpanPositionCheckQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanPositionCheckQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanPositionCheckQuery_getMatch(t_SpanPositionCheckQuery *self)
          {
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);
            OBJ_CALL(result = self->object.getMatch());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
          }

          static PyObject *t_SpanPositionCheckQuery_getSpans(t_SpanPositionCheckQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanPositionCheckQuery), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanPositionCheckQuery_rewrite(t_SpanPositionCheckQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanPositionCheckQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_SpanPositionCheckQuery_get__field(t_SpanPositionCheckQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SpanPositionCheckQuery_get__match(t_SpanPositionCheckQuery *self, void *data)
          {
            ::org::apache::lucene::search::spans::SpanQuery value((jobject) NULL);
            OBJ_CALL(value = self->object.getMatch());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/MaxPayloadFunction.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *MaxPayloadFunction::class$ = NULL;
          jmethodID *MaxPayloadFunction::mids$ = NULL;
          bool MaxPayloadFunction::live$ = false;

          jclass MaxPayloadFunction::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/MaxPayloadFunction");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_currentScore_9fe8c3f6] = env->getMethodID(cls, "currentScore", "(ILjava/lang/String;IIIFF)F");
              mids$[mid_docScore_08788a8d] = env->getMethodID(cls, "docScore", "(ILjava/lang/String;IF)F");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MaxPayloadFunction::MaxPayloadFunction() : ::org::apache::lucene::search::payloads::PayloadFunction(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat MaxPayloadFunction::currentScore(jint a0, const ::java::lang::String & a1, jint a2, jint a3, jint a4, jfloat a5, jfloat a6) const
          {
            return env->callFloatMethod(this$, mids$[mid_currentScore_9fe8c3f6], a0, a1.this$, a2, a3, a4, a5, a6);
          }

          jfloat MaxPayloadFunction::docScore(jint a0, const ::java::lang::String & a1, jint a2, jfloat a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_docScore_08788a8d], a0, a1.this$, a2, a3);
          }

          jboolean MaxPayloadFunction::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint MaxPayloadFunction::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_MaxPayloadFunction_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MaxPayloadFunction_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MaxPayloadFunction_init_(t_MaxPayloadFunction *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MaxPayloadFunction_currentScore(t_MaxPayloadFunction *self, PyObject *args);
          static PyObject *t_MaxPayloadFunction_docScore(t_MaxPayloadFunction *self, PyObject *args);
          static PyObject *t_MaxPayloadFunction_equals(t_MaxPayloadFunction *self, PyObject *args);
          static PyObject *t_MaxPayloadFunction_hashCode(t_MaxPayloadFunction *self, PyObject *args);

          static PyMethodDef t_MaxPayloadFunction__methods_[] = {
            DECLARE_METHOD(t_MaxPayloadFunction, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MaxPayloadFunction, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MaxPayloadFunction, currentScore, METH_VARARGS),
            DECLARE_METHOD(t_MaxPayloadFunction, docScore, METH_VARARGS),
            DECLARE_METHOD(t_MaxPayloadFunction, equals, METH_VARARGS),
            DECLARE_METHOD(t_MaxPayloadFunction, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MaxPayloadFunction, t_MaxPayloadFunction, ::org::apache::lucene::search::payloads::PayloadFunction, MaxPayloadFunction, t_MaxPayloadFunction_init_, 0, 0, 0, 0, 0);

          void t_MaxPayloadFunction::install(PyObject *module)
          {
            installType(&PY_TYPE(MaxPayloadFunction), module, "MaxPayloadFunction", 0);
          }

          void t_MaxPayloadFunction::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MaxPayloadFunction).tp_dict, "class_", make_descriptor(MaxPayloadFunction::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MaxPayloadFunction).tp_dict, "wrapfn_", make_descriptor(t_MaxPayloadFunction::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MaxPayloadFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MaxPayloadFunction_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MaxPayloadFunction::initializeClass, 1)))
              return NULL;
            return t_MaxPayloadFunction::wrap_Object(MaxPayloadFunction(((t_MaxPayloadFunction *) arg)->object.this$));
          }
          static PyObject *t_MaxPayloadFunction_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MaxPayloadFunction::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MaxPayloadFunction_init_(t_MaxPayloadFunction *self, PyObject *args, PyObject *kwds)
          {
            MaxPayloadFunction object((jobject) NULL);

            INT_CALL(object = MaxPayloadFunction());
            self->object = object;

            return 0;
          }

          static PyObject *t_MaxPayloadFunction_currentScore(t_MaxPayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jint a3;
            jint a4;
            jfloat a5;
            jfloat a6;
            jfloat result;

            if (!parseArgs(args, "IsIIIFF", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              OBJ_CALL(result = self->object.currentScore(a0, a1, a2, a3, a4, a5, a6));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(MaxPayloadFunction), (PyObject *) self, "currentScore", args, 2);
          }

          static PyObject *t_MaxPayloadFunction_docScore(t_MaxPayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jfloat a3;
            jfloat result;

            if (!parseArgs(args, "IsIF", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.docScore(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(MaxPayloadFunction), (PyObject *) self, "docScore", args, 2);
          }

          static PyObject *t_MaxPayloadFunction_equals(t_MaxPayloadFunction *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MaxPayloadFunction), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_MaxPayloadFunction_hashCode(t_MaxPayloadFunction *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MaxPayloadFunction), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/MonotonicBlockPackedReader.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *MonotonicBlockPackedReader::class$ = NULL;
          jmethodID *MonotonicBlockPackedReader::mids$ = NULL;
          bool MonotonicBlockPackedReader::live$ = false;

          jclass MonotonicBlockPackedReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/MonotonicBlockPackedReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_get_0ee6df33] = env->getMethodID(cls, "get", "(J)J");
              mids$[mid_of_796f5dbd] = env->getStaticMethodID(cls, "of", "(Lorg/apache/lucene/store/IndexInput;IIJZ)Lorg/apache/lucene/util/packed/MonotonicBlockPackedReader;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");
              mids$[mid_decodeDelta_0ee6df33] = env->getMethodID(cls, "decodeDelta", "(J)J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jlong MonotonicBlockPackedReader::get(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_0ee6df33], a0);
          }

          MonotonicBlockPackedReader MonotonicBlockPackedReader::of(const ::org::apache::lucene::store::IndexInput & a0, jint a1, jint a2, jlong a3, jboolean a4)
          {
            jclass cls = env->getClass(initializeClass);
            return MonotonicBlockPackedReader(env->callStaticObjectMethod(cls, mids$[mid_of_796f5dbd], a0.this$, a1, a2, a3, a4));
          }

          jlong MonotonicBlockPackedReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jlong MonotonicBlockPackedReader::size() const
          {
            return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_MonotonicBlockPackedReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MonotonicBlockPackedReader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MonotonicBlockPackedReader_get(t_MonotonicBlockPackedReader *self, PyObject *args);
          static PyObject *t_MonotonicBlockPackedReader_of(PyTypeObject *type, PyObject *args);
          static PyObject *t_MonotonicBlockPackedReader_ramBytesUsed(t_MonotonicBlockPackedReader *self);
          static PyObject *t_MonotonicBlockPackedReader_size(t_MonotonicBlockPackedReader *self);

          static PyMethodDef t_MonotonicBlockPackedReader__methods_[] = {
            DECLARE_METHOD(t_MonotonicBlockPackedReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MonotonicBlockPackedReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MonotonicBlockPackedReader, get, METH_VARARGS),
            DECLARE_METHOD(t_MonotonicBlockPackedReader, of, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_MonotonicBlockPackedReader, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_MonotonicBlockPackedReader, size, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MonotonicBlockPackedReader, t_MonotonicBlockPackedReader, ::org::apache::lucene::util::LongValues, MonotonicBlockPackedReader, abstract_init, 0, 0, 0, 0, 0);

          void t_MonotonicBlockPackedReader::install(PyObject *module)
          {
            installType(&PY_TYPE(MonotonicBlockPackedReader), module, "MonotonicBlockPackedReader", 0);
          }

          void t_MonotonicBlockPackedReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MonotonicBlockPackedReader).tp_dict, "class_", make_descriptor(MonotonicBlockPackedReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MonotonicBlockPackedReader).tp_dict, "wrapfn_", make_descriptor(t_MonotonicBlockPackedReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MonotonicBlockPackedReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MonotonicBlockPackedReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MonotonicBlockPackedReader::initializeClass, 1)))
              return NULL;
            return t_MonotonicBlockPackedReader::wrap_Object(MonotonicBlockPackedReader(((t_MonotonicBlockPackedReader *) arg)->object.this$));
          }
          static PyObject *t_MonotonicBlockPackedReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MonotonicBlockPackedReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_MonotonicBlockPackedReader_get(t_MonotonicBlockPackedReader *self, PyObject *args)
          {
            jlong a0;
            jlong result;

            if (!parseArgs(args, "J", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(MonotonicBlockPackedReader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_MonotonicBlockPackedReader_of(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            jint a1;
            jint a2;
            jlong a3;
            jboolean a4;
            MonotonicBlockPackedReader result((jobject) NULL);

            if (!parseArgs(args, "kIIJZ", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::MonotonicBlockPackedReader::of(a0, a1, a2, a3, a4));
              return t_MonotonicBlockPackedReader::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "of", args);
            return NULL;
          }

          static PyObject *t_MonotonicBlockPackedReader_ramBytesUsed(t_MonotonicBlockPackedReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_MonotonicBlockPackedReader_size(t_MonotonicBlockPackedReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldQuery::class$ = NULL;
          jmethodID *FieldQuery::mids$ = NULL;
          bool FieldQuery::live$ = false;

          jclass FieldQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getFieldTermMap_e027f4d1] = env->getMethodID(cls, "getFieldTermMap", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap;");
              mids$[mid_searchPhrase_361b35e4] = env->getMethodID(cls, "searchPhrase", "(Ljava/lang/String;Ljava/util/List;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap;");
              mids$[mid_applyParentBoost_aaf01f72] = env->getMethodID(cls, "applyParentBoost", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Query;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap FieldQuery::getFieldTermMap(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap(env->callObjectMethod(this$, mids$[mid_getFieldTermMap_e027f4d1], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap FieldQuery::searchPhrase(const ::java::lang::String & a0, const ::java::util::List & a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap(env->callObjectMethod(this$, mids$[mid_searchPhrase_361b35e4], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldQuery_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldQuery_getFieldTermMap(t_FieldQuery *self, PyObject *args);
          static PyObject *t_FieldQuery_searchPhrase(t_FieldQuery *self, PyObject *args);

          static PyMethodDef t_FieldQuery__methods_[] = {
            DECLARE_METHOD(t_FieldQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldQuery, getFieldTermMap, METH_VARARGS),
            DECLARE_METHOD(t_FieldQuery, searchPhrase, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldQuery, t_FieldQuery, ::java::lang::Object, FieldQuery, abstract_init, 0, 0, 0, 0, 0);

          void t_FieldQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldQuery), module, "FieldQuery", 0);
            PyDict_SetItemString(PY_TYPE(FieldQuery).tp_dict, "QueryPhraseMap", make_descriptor(&PY_TYPE(FieldQuery$QueryPhraseMap)));
          }

          void t_FieldQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldQuery).tp_dict, "class_", make_descriptor(FieldQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldQuery).tp_dict, "wrapfn_", make_descriptor(t_FieldQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldQuery::initializeClass, 1)))
              return NULL;
            return t_FieldQuery::wrap_Object(FieldQuery(((t_FieldQuery *) arg)->object.this$));
          }
          static PyObject *t_FieldQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FieldQuery_getFieldTermMap(t_FieldQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getFieldTermMap(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldQuery$QueryPhraseMap::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldTermMap", args);
            return NULL;
          }

          static PyObject *t_FieldQuery_searchPhrase(t_FieldQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::List a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.searchPhrase(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldQuery$QueryPhraseMap::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "searchPhrase", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/TermSpans.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *TermSpans::class$ = NULL;
          jmethodID *TermSpans::mids$ = NULL;
          bool TermSpans::live$ = false;
          TermSpans *TermSpans::EMPTY_TERM_SPANS = NULL;

          jclass TermSpans::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/TermSpans");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_33ebef71] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/DocsAndPositionsEnum;Lorg/apache/lucene/index/Term;)V");
              mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_doc_54c6a179] = env->getMethodID(cls, "doc", "()I");
              mids$[mid_end_54c6a179] = env->getMethodID(cls, "end", "()I");
              mids$[mid_getPayload_2d2d7de4] = env->getMethodID(cls, "getPayload", "()Ljava/util/Collection;");
              mids$[mid_getPostings_548e5d87] = env->getMethodID(cls, "getPostings", "()Lorg/apache/lucene/index/DocsAndPositionsEnum;");
              mids$[mid_isPayloadAvailable_54c6a16a] = env->getMethodID(cls, "isPayloadAvailable", "()Z");
              mids$[mid_next_54c6a16a] = env->getMethodID(cls, "next", "()Z");
              mids$[mid_skipTo_39c7bd30] = env->getMethodID(cls, "skipTo", "(I)Z");
              mids$[mid_start_54c6a179] = env->getMethodID(cls, "start", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              EMPTY_TERM_SPANS = new TermSpans(env->getStaticObjectField(cls, "EMPTY_TERM_SPANS", "Lorg/apache/lucene/search/spans/TermSpans;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TermSpans::TermSpans(const ::org::apache::lucene::index::DocsAndPositionsEnum & a0, const ::org::apache::lucene::index::Term & a1) : ::org::apache::lucene::search::spans::Spans(env->newObject(initializeClass, &mids$, mid_init$_33ebef71, a0.this$, a1.this$)) {}

          jlong TermSpans::cost() const
          {
            return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
          }

          jint TermSpans::doc() const
          {
            return env->callIntMethod(this$, mids$[mid_doc_54c6a179]);
          }

          jint TermSpans::end() const
          {
            return env->callIntMethod(this$, mids$[mid_end_54c6a179]);
          }

          ::java::util::Collection TermSpans::getPayload() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getPayload_2d2d7de4]));
          }

          ::org::apache::lucene::index::DocsAndPositionsEnum TermSpans::getPostings() const
          {
            return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_getPostings_548e5d87]));
          }

          jboolean TermSpans::isPayloadAvailable() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPayloadAvailable_54c6a16a]);
          }

          jboolean TermSpans::next() const
          {
            return env->callBooleanMethod(this$, mids$[mid_next_54c6a16a]);
          }

          jboolean TermSpans::skipTo(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_skipTo_39c7bd30], a0);
          }

          jint TermSpans::start() const
          {
            return env->callIntMethod(this$, mids$[mid_start_54c6a179]);
          }

          ::java::lang::String TermSpans::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_TermSpans_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermSpans_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TermSpans_init_(t_TermSpans *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TermSpans_cost(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_doc(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_end(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_getPayload(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_getPostings(t_TermSpans *self);
          static PyObject *t_TermSpans_isPayloadAvailable(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_next(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_skipTo(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_start(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_toString(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_get__payload(t_TermSpans *self, void *data);
          static PyObject *t_TermSpans_get__payloadAvailable(t_TermSpans *self, void *data);
          static PyObject *t_TermSpans_get__postings(t_TermSpans *self, void *data);
          static PyGetSetDef t_TermSpans__fields_[] = {
            DECLARE_GET_FIELD(t_TermSpans, payload),
            DECLARE_GET_FIELD(t_TermSpans, payloadAvailable),
            DECLARE_GET_FIELD(t_TermSpans, postings),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TermSpans__methods_[] = {
            DECLARE_METHOD(t_TermSpans, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermSpans, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermSpans, cost, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, doc, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, end, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, getPayload, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, getPostings, METH_NOARGS),
            DECLARE_METHOD(t_TermSpans, isPayloadAvailable, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, next, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, skipTo, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, start, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TermSpans, t_TermSpans, ::org::apache::lucene::search::spans::Spans, TermSpans, t_TermSpans_init_, 0, 0, t_TermSpans__fields_, 0, 0);

          void t_TermSpans::install(PyObject *module)
          {
            installType(&PY_TYPE(TermSpans), module, "TermSpans", 0);
          }

          void t_TermSpans::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TermSpans).tp_dict, "class_", make_descriptor(TermSpans::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TermSpans).tp_dict, "wrapfn_", make_descriptor(t_TermSpans::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TermSpans).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(TermSpans::initializeClass);
            PyDict_SetItemString(PY_TYPE(TermSpans).tp_dict, "EMPTY_TERM_SPANS", make_descriptor(t_TermSpans::wrap_Object(*TermSpans::EMPTY_TERM_SPANS)));
          }

          static PyObject *t_TermSpans_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TermSpans::initializeClass, 1)))
              return NULL;
            return t_TermSpans::wrap_Object(TermSpans(((t_TermSpans *) arg)->object.this$));
          }
          static PyObject *t_TermSpans_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TermSpans::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TermSpans_init_(t_TermSpans *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::DocsAndPositionsEnum a0((jobject) NULL);
            ::org::apache::lucene::index::Term a1((jobject) NULL);
            TermSpans object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
            {
              INT_CALL(object = TermSpans(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TermSpans_cost(t_TermSpans *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.cost());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "cost", args, 2);
          }

          static PyObject *t_TermSpans_doc(t_TermSpans *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.doc());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "doc", args, 2);
          }

          static PyObject *t_TermSpans_end(t_TermSpans *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.end());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_TermSpans_getPayload(t_TermSpans *self, PyObject *args)
          {
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getPayload());
              return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "getPayload", args, 2);
          }

          static PyObject *t_TermSpans_getPostings(t_TermSpans *self)
          {
            ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);
            OBJ_CALL(result = self->object.getPostings());
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
          }

          static PyObject *t_TermSpans_isPayloadAvailable(t_TermSpans *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.isPayloadAvailable());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "isPayloadAvailable", args, 2);
          }

          static PyObject *t_TermSpans_next(t_TermSpans *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.next());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_TermSpans_skipTo(t_TermSpans *self, PyObject *args)
          {
            jint a0;
            jboolean result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.skipTo(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "skipTo", args, 2);
          }

          static PyObject *t_TermSpans_start(t_TermSpans *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.start());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "start", args, 2);
          }

          static PyObject *t_TermSpans_toString(t_TermSpans *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_TermSpans_get__payload(t_TermSpans *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getPayload());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static PyObject *t_TermSpans_get__payloadAvailable(t_TermSpans *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPayloadAvailable());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_TermSpans_get__postings(t_TermSpans *self, void *data)
          {
            ::org::apache::lucene::index::DocsAndPositionsEnum value((jobject) NULL);
            OBJ_CALL(value = self->object.getPostings());
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/SingleFunction.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *SingleFunction::class$ = NULL;
            jmethodID *SingleFunction::mids$ = NULL;
            bool SingleFunction::live$ = false;

            jclass SingleFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/SingleFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SingleFunction::SingleFunction(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            void SingleFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String SingleFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean SingleFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jint SingleFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_SingleFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SingleFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SingleFunction_init_(t_SingleFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SingleFunction_createWeight(t_SingleFunction *self, PyObject *args);
            static PyObject *t_SingleFunction_description(t_SingleFunction *self, PyObject *args);
            static PyObject *t_SingleFunction_equals(t_SingleFunction *self, PyObject *args);
            static PyObject *t_SingleFunction_hashCode(t_SingleFunction *self, PyObject *args);

            static PyMethodDef t_SingleFunction__methods_[] = {
              DECLARE_METHOD(t_SingleFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SingleFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SingleFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_SingleFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_SingleFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_SingleFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SingleFunction, t_SingleFunction, ::org::apache::lucene::queries::function::ValueSource, SingleFunction, t_SingleFunction_init_, 0, 0, 0, 0, 0);

            void t_SingleFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(SingleFunction), module, "SingleFunction", 0);
            }

            void t_SingleFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SingleFunction).tp_dict, "class_", make_descriptor(SingleFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SingleFunction).tp_dict, "wrapfn_", make_descriptor(t_SingleFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SingleFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SingleFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SingleFunction::initializeClass, 1)))
                return NULL;
              return t_SingleFunction::wrap_Object(SingleFunction(((t_SingleFunction *) arg)->object.this$));
            }
            static PyObject *t_SingleFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SingleFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SingleFunction_init_(t_SingleFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              SingleFunction object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = SingleFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SingleFunction_createWeight(t_SingleFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SingleFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_SingleFunction_description(t_SingleFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SingleFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_SingleFunction_equals(t_SingleFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(SingleFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_SingleFunction_hashCode(t_SingleFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(SingleFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/br/BrazilianStemmer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {

          ::java::lang::Class *BrazilianStemmer::class$ = NULL;
          jmethodID *BrazilianStemmer::mids$ = NULL;
          bool BrazilianStemmer::live$ = false;

          jclass BrazilianStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/br/BrazilianStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_log_14c7b5c5] = env->getMethodID(cls, "log", "()Ljava/lang/String;");
              mids$[mid_stem_97a5258f] = env->getMethodID(cls, "stem", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BrazilianStemmer::BrazilianStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::String BrazilianStemmer::log() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_log_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {
          static PyObject *t_BrazilianStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BrazilianStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BrazilianStemmer_init_(t_BrazilianStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BrazilianStemmer_log(t_BrazilianStemmer *self);

          static PyMethodDef t_BrazilianStemmer__methods_[] = {
            DECLARE_METHOD(t_BrazilianStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemmer, log, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BrazilianStemmer, t_BrazilianStemmer, ::java::lang::Object, BrazilianStemmer, t_BrazilianStemmer_init_, 0, 0, 0, 0, 0);

          void t_BrazilianStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(BrazilianStemmer), module, "BrazilianStemmer", 0);
          }

          void t_BrazilianStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BrazilianStemmer).tp_dict, "class_", make_descriptor(BrazilianStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BrazilianStemmer).tp_dict, "wrapfn_", make_descriptor(t_BrazilianStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BrazilianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BrazilianStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BrazilianStemmer::initializeClass, 1)))
              return NULL;
            return t_BrazilianStemmer::wrap_Object(BrazilianStemmer(((t_BrazilianStemmer *) arg)->object.this$));
          }
          static PyObject *t_BrazilianStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BrazilianStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BrazilianStemmer_init_(t_BrazilianStemmer *self, PyObject *args, PyObject *kwds)
          {
            BrazilianStemmer object((jobject) NULL);

            INT_CALL(object = BrazilianStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_BrazilianStemmer_log(t_BrazilianStemmer *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.log());
            return j2p(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/TopGroups$ScoreMergeMode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *TopGroups$ScoreMergeMode::class$ = NULL;
          jmethodID *TopGroups$ScoreMergeMode::mids$ = NULL;
          bool TopGroups$ScoreMergeMode::live$ = false;
          TopGroups$ScoreMergeMode *TopGroups$ScoreMergeMode::Avg = NULL;
          TopGroups$ScoreMergeMode *TopGroups$ScoreMergeMode::None = NULL;
          TopGroups$ScoreMergeMode *TopGroups$ScoreMergeMode::Total = NULL;

          jclass TopGroups$ScoreMergeMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/TopGroups$ScoreMergeMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_10e490e6] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;");
              mids$[mid_values_88270724] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              Avg = new TopGroups$ScoreMergeMode(env->getStaticObjectField(cls, "Avg", "Lorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;"));
              None = new TopGroups$ScoreMergeMode(env->getStaticObjectField(cls, "None", "Lorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;"));
              Total = new TopGroups$ScoreMergeMode(env->getStaticObjectField(cls, "Total", "Lorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TopGroups$ScoreMergeMode TopGroups$ScoreMergeMode::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return TopGroups$ScoreMergeMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_10e490e6], a0.this$));
          }

          JArray< TopGroups$ScoreMergeMode > TopGroups$ScoreMergeMode::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< TopGroups$ScoreMergeMode >(env->callStaticObjectMethod(cls, mids$[mid_values_88270724]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_TopGroups$ScoreMergeMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TopGroups$ScoreMergeMode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TopGroups$ScoreMergeMode_of_(t_TopGroups$ScoreMergeMode *self, PyObject *args);
          static PyObject *t_TopGroups$ScoreMergeMode_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_TopGroups$ScoreMergeMode_values(PyTypeObject *type);
          static PyObject *t_TopGroups$ScoreMergeMode_get__parameters_(t_TopGroups$ScoreMergeMode *self, void *data);
          static PyGetSetDef t_TopGroups$ScoreMergeMode__fields_[] = {
            DECLARE_GET_FIELD(t_TopGroups$ScoreMergeMode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TopGroups$ScoreMergeMode__methods_[] = {
            DECLARE_METHOD(t_TopGroups$ScoreMergeMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TopGroups$ScoreMergeMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TopGroups$ScoreMergeMode, of_, METH_VARARGS),
            DECLARE_METHOD(t_TopGroups$ScoreMergeMode, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_TopGroups$ScoreMergeMode, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TopGroups$ScoreMergeMode, t_TopGroups$ScoreMergeMode, ::java::lang::Enum, TopGroups$ScoreMergeMode, abstract_init, 0, 0, t_TopGroups$ScoreMergeMode__fields_, 0, 0);
          PyObject *t_TopGroups$ScoreMergeMode::wrap_Object(const TopGroups$ScoreMergeMode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_TopGroups$ScoreMergeMode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_TopGroups$ScoreMergeMode *self = (t_TopGroups$ScoreMergeMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_TopGroups$ScoreMergeMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_TopGroups$ScoreMergeMode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_TopGroups$ScoreMergeMode *self = (t_TopGroups$ScoreMergeMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_TopGroups$ScoreMergeMode::install(PyObject *module)
          {
            installType(&PY_TYPE(TopGroups$ScoreMergeMode), module, "TopGroups$ScoreMergeMode", 0);
          }

          void t_TopGroups$ScoreMergeMode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TopGroups$ScoreMergeMode).tp_dict, "class_", make_descriptor(TopGroups$ScoreMergeMode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TopGroups$ScoreMergeMode).tp_dict, "wrapfn_", make_descriptor(t_TopGroups$ScoreMergeMode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TopGroups$ScoreMergeMode).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(TopGroups$ScoreMergeMode::initializeClass);
            PyDict_SetItemString(PY_TYPE(TopGroups$ScoreMergeMode).tp_dict, "Avg", make_descriptor(t_TopGroups$ScoreMergeMode::wrap_Object(*TopGroups$ScoreMergeMode::Avg)));
            PyDict_SetItemString(PY_TYPE(TopGroups$ScoreMergeMode).tp_dict, "None", make_descriptor(t_TopGroups$ScoreMergeMode::wrap_Object(*TopGroups$ScoreMergeMode::None)));
            PyDict_SetItemString(PY_TYPE(TopGroups$ScoreMergeMode).tp_dict, "Total", make_descriptor(t_TopGroups$ScoreMergeMode::wrap_Object(*TopGroups$ScoreMergeMode::Total)));
          }

          static PyObject *t_TopGroups$ScoreMergeMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TopGroups$ScoreMergeMode::initializeClass, 1)))
              return NULL;
            return t_TopGroups$ScoreMergeMode::wrap_Object(TopGroups$ScoreMergeMode(((t_TopGroups$ScoreMergeMode *) arg)->object.this$));
          }
          static PyObject *t_TopGroups$ScoreMergeMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TopGroups$ScoreMergeMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TopGroups$ScoreMergeMode_of_(t_TopGroups$ScoreMergeMode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_TopGroups$ScoreMergeMode_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            TopGroups$ScoreMergeMode result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::grouping::TopGroups$ScoreMergeMode::valueOf(a0));
              return t_TopGroups$ScoreMergeMode::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_TopGroups$ScoreMergeMode_values(PyTypeObject *type)
          {
            JArray< TopGroups$ScoreMergeMode > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::search::grouping::TopGroups$ScoreMergeMode::values());
            return JArray<jobject>(result.this$).wrap(t_TopGroups$ScoreMergeMode::wrap_jobject);
          }
          static PyObject *t_TopGroups$ScoreMergeMode_get__parameters_(t_TopGroups$ScoreMergeMode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *LockFactory::class$ = NULL;
        jmethodID *LockFactory::mids$ = NULL;
        bool LockFactory::live$ = false;

        jclass LockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/LockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_getLockPrefix_14c7b5c5] = env->getMethodID(cls, "getLockPrefix", "()Ljava/lang/String;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_setLockPrefix_5fdc3f48] = env->getMethodID(cls, "setLockPrefix", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LockFactory::LockFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void LockFactory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        ::java::lang::String LockFactory::getLockPrefix() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLockPrefix_14c7b5c5]));
        }

        ::org::apache::lucene::store::Lock LockFactory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }

        void LockFactory::setLockPrefix(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLockPrefix_5fdc3f48], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_LockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LockFactory_init_(t_LockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LockFactory_clearLock(t_LockFactory *self, PyObject *arg);
        static PyObject *t_LockFactory_getLockPrefix(t_LockFactory *self);
        static PyObject *t_LockFactory_makeLock(t_LockFactory *self, PyObject *arg);
        static PyObject *t_LockFactory_setLockPrefix(t_LockFactory *self, PyObject *arg);
        static PyObject *t_LockFactory_get__lockPrefix(t_LockFactory *self, void *data);
        static int t_LockFactory_set__lockPrefix(t_LockFactory *self, PyObject *arg, void *data);
        static PyGetSetDef t_LockFactory__fields_[] = {
          DECLARE_GETSET_FIELD(t_LockFactory, lockPrefix),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LockFactory__methods_[] = {
          DECLARE_METHOD(t_LockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockFactory, clearLock, METH_O),
          DECLARE_METHOD(t_LockFactory, getLockPrefix, METH_NOARGS),
          DECLARE_METHOD(t_LockFactory, makeLock, METH_O),
          DECLARE_METHOD(t_LockFactory, setLockPrefix, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LockFactory, t_LockFactory, ::java::lang::Object, LockFactory, t_LockFactory_init_, 0, 0, t_LockFactory__fields_, 0, 0);

        void t_LockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(LockFactory), module, "LockFactory", 0);
        }

        void t_LockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LockFactory).tp_dict, "class_", make_descriptor(LockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LockFactory).tp_dict, "wrapfn_", make_descriptor(t_LockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LockFactory::initializeClass, 1)))
            return NULL;
          return t_LockFactory::wrap_Object(LockFactory(((t_LockFactory *) arg)->object.this$));
        }
        static PyObject *t_LockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LockFactory_init_(t_LockFactory *self, PyObject *args, PyObject *kwds)
        {
          LockFactory object((jobject) NULL);

          INT_CALL(object = LockFactory());
          self->object = object;

          return 0;
        }

        static PyObject *t_LockFactory_clearLock(t_LockFactory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "clearLock", arg);
          return NULL;
        }

        static PyObject *t_LockFactory_getLockPrefix(t_LockFactory *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getLockPrefix());
          return j2p(result);
        }

        static PyObject *t_LockFactory_makeLock(t_LockFactory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "makeLock", arg);
          return NULL;
        }

        static PyObject *t_LockFactory_setLockPrefix(t_LockFactory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.setLockPrefix(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLockPrefix", arg);
          return NULL;
        }

        static PyObject *t_LockFactory_get__lockPrefix(t_LockFactory *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockPrefix());
          return j2p(value);
        }
        static int t_LockFactory_set__lockPrefix(t_LockFactory *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::String value((jobject) NULL);
            if (!parseArg(arg, "s", &value))
            {
              INT_CALL(self->object.setLockPrefix(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "lockPrefix", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/AssociationFacetField.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *AssociationFacetField::class$ = NULL;
          jmethodID *AssociationFacetField::mids$ = NULL;
          jfieldID *AssociationFacetField::fids$ = NULL;
          bool AssociationFacetField::live$ = false;
          ::org::apache::lucene::document::FieldType *AssociationFacetField::TYPE = NULL;

          jclass AssociationFacetField::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/AssociationFacetField");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d63aecac] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRef;Ljava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_assoc] = env->getFieldID(cls, "assoc", "Lorg/apache/lucene/util/BytesRef;");
              fids$[fid_dim] = env->getFieldID(cls, "dim", "Ljava/lang/String;");
              fids$[fid_path] = env->getFieldID(cls, "path", "[Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AssociationFacetField::AssociationFacetField(const ::org::apache::lucene::util::BytesRef & a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_d63aecac, a0.this$, a1.this$, a2.this$)) {}

          ::java::lang::String AssociationFacetField::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::org::apache::lucene::util::BytesRef AssociationFacetField::_get_assoc() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_assoc]));
          }

          ::java::lang::String AssociationFacetField::_get_dim() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_dim]));
          }

          JArray< ::java::lang::String > AssociationFacetField::_get_path() const
          {
            return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_path]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_AssociationFacetField_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AssociationFacetField_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AssociationFacetField_init_(t_AssociationFacetField *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AssociationFacetField_toString(t_AssociationFacetField *self, PyObject *args);
          static PyObject *t_AssociationFacetField_get__assoc(t_AssociationFacetField *self, void *data);
          static PyObject *t_AssociationFacetField_get__dim(t_AssociationFacetField *self, void *data);
          static PyObject *t_AssociationFacetField_get__path(t_AssociationFacetField *self, void *data);

          static PyGetSetDef t_AssociationFacetField__fields_[] = {
            DECLARE_GET_FIELD(t_AssociationFacetField, assoc),
            DECLARE_GET_FIELD(t_AssociationFacetField, dim),
            DECLARE_GET_FIELD(t_AssociationFacetField, path),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AssociationFacetField__methods_[] = {
            DECLARE_METHOD(t_AssociationFacetField, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AssociationFacetField, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AssociationFacetField, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AssociationFacetField, t_AssociationFacetField, ::org::apache::lucene::document::Field, AssociationFacetField, t_AssociationFacetField_init_, 0, 0, t_AssociationFacetField__fields_, 0, 0);

          void t_AssociationFacetField::install(PyObject *module)
          {
            installType(&PY_TYPE(AssociationFacetField), module, "AssociationFacetField", 0);
          }

          void t_AssociationFacetField::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AssociationFacetField).tp_dict, "class_", make_descriptor(AssociationFacetField::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AssociationFacetField).tp_dict, "wrapfn_", make_descriptor(t_AssociationFacetField::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AssociationFacetField).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(AssociationFacetField::initializeClass);
            PyDict_SetItemString(PY_TYPE(AssociationFacetField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*AssociationFacetField::TYPE)));
          }

          static PyObject *t_AssociationFacetField_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AssociationFacetField::initializeClass, 1)))
              return NULL;
            return t_AssociationFacetField::wrap_Object(AssociationFacetField(((t_AssociationFacetField *) arg)->object.this$));
          }
          static PyObject *t_AssociationFacetField_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AssociationFacetField::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AssociationFacetField_init_(t_AssociationFacetField *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            AssociationFacetField object((jobject) NULL);

            if (!parseArgs(args, "ks[s", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = AssociationFacetField(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AssociationFacetField_toString(t_AssociationFacetField *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(AssociationFacetField), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_AssociationFacetField_get__assoc(t_AssociationFacetField *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_assoc());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_AssociationFacetField_get__dim(t_AssociationFacetField *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_dim());
            return j2p(value);
          }

          static PyObject *t_AssociationFacetField_get__path(t_AssociationFacetField *self, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_path());
            return JArray<jstring>(value.this$).wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OpenBitSetDISI.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OpenBitSetDISI::class$ = NULL;
        jmethodID *OpenBitSetDISI::mids$ = NULL;
        bool OpenBitSetDISI::live$ = false;

        jclass OpenBitSetDISI::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OpenBitSetDISI");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_3742065d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/DocIdSetIterator;I)V");
            mids$[mid_inPlaceAnd_c2b5607d] = env->getMethodID(cls, "inPlaceAnd", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_inPlaceNot_c2b5607d] = env->getMethodID(cls, "inPlaceNot", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_inPlaceOr_c2b5607d] = env->getMethodID(cls, "inPlaceOr", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_inPlaceXor_c2b5607d] = env->getMethodID(cls, "inPlaceXor", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OpenBitSetDISI::OpenBitSetDISI(jint a0) : ::org::apache::lucene::util::OpenBitSet(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        OpenBitSetDISI::OpenBitSetDISI(const ::org::apache::lucene::search::DocIdSetIterator & a0, jint a1) : ::org::apache::lucene::util::OpenBitSet(env->newObject(initializeClass, &mids$, mid_init$_3742065d, a0.this$, a1)) {}

        void OpenBitSetDISI::inPlaceAnd(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_inPlaceAnd_c2b5607d], a0.this$);
        }

        void OpenBitSetDISI::inPlaceNot(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_inPlaceNot_c2b5607d], a0.this$);
        }

        void OpenBitSetDISI::inPlaceOr(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_inPlaceOr_c2b5607d], a0.this$);
        }

        void OpenBitSetDISI::inPlaceXor(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_inPlaceXor_c2b5607d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OpenBitSetDISI_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OpenBitSetDISI_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OpenBitSetDISI_init_(t_OpenBitSetDISI *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OpenBitSetDISI_inPlaceAnd(t_OpenBitSetDISI *self, PyObject *arg);
        static PyObject *t_OpenBitSetDISI_inPlaceNot(t_OpenBitSetDISI *self, PyObject *arg);
        static PyObject *t_OpenBitSetDISI_inPlaceOr(t_OpenBitSetDISI *self, PyObject *arg);
        static PyObject *t_OpenBitSetDISI_inPlaceXor(t_OpenBitSetDISI *self, PyObject *arg);

        static PyMethodDef t_OpenBitSetDISI__methods_[] = {
          DECLARE_METHOD(t_OpenBitSetDISI, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSetDISI, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSetDISI, inPlaceAnd, METH_O),
          DECLARE_METHOD(t_OpenBitSetDISI, inPlaceNot, METH_O),
          DECLARE_METHOD(t_OpenBitSetDISI, inPlaceOr, METH_O),
          DECLARE_METHOD(t_OpenBitSetDISI, inPlaceXor, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OpenBitSetDISI, t_OpenBitSetDISI, ::org::apache::lucene::util::OpenBitSet, OpenBitSetDISI, t_OpenBitSetDISI_init_, 0, 0, 0, 0, 0);

        void t_OpenBitSetDISI::install(PyObject *module)
        {
          installType(&PY_TYPE(OpenBitSetDISI), module, "OpenBitSetDISI", 0);
        }

        void t_OpenBitSetDISI::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OpenBitSetDISI).tp_dict, "class_", make_descriptor(OpenBitSetDISI::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OpenBitSetDISI).tp_dict, "wrapfn_", make_descriptor(t_OpenBitSetDISI::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OpenBitSetDISI).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OpenBitSetDISI_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OpenBitSetDISI::initializeClass, 1)))
            return NULL;
          return t_OpenBitSetDISI::wrap_Object(OpenBitSetDISI(((t_OpenBitSetDISI *) arg)->object.this$));
        }
        static PyObject *t_OpenBitSetDISI_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OpenBitSetDISI::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OpenBitSetDISI_init_(t_OpenBitSetDISI *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              OpenBitSetDISI object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = OpenBitSetDISI(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);
              jint a1;
              OpenBitSetDISI object((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0, &a1))
              {
                INT_CALL(object = OpenBitSetDISI(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OpenBitSetDISI_inPlaceAnd(t_OpenBitSetDISI *self, PyObject *arg)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
          {
            OBJ_CALL(self->object.inPlaceAnd(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "inPlaceAnd", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSetDISI_inPlaceNot(t_OpenBitSetDISI *self, PyObject *arg)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
          {
            OBJ_CALL(self->object.inPlaceNot(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "inPlaceNot", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSetDISI_inPlaceOr(t_OpenBitSetDISI *self, PyObject *arg)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
          {
            OBJ_CALL(self->object.inPlaceOr(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "inPlaceOr", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSetDISI_inPlaceXor(t_OpenBitSetDISI *self, PyObject *arg)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
          {
            OBJ_CALL(self->object.inPlaceXor(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "inPlaceXor", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/util/Locale.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {

            ::java::lang::Class *Message::class$ = NULL;
            jmethodID *Message::mids$ = NULL;
            bool Message::live$ = false;

            jclass Message::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/messages/Message");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getArguments_94e49c77] = env->getMethodID(cls, "getArguments", "()[Ljava/lang/Object;");
                mids$[mid_getKey_14c7b5c5] = env->getMethodID(cls, "getKey", "()Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_14c7b5c5] = env->getMethodID(cls, "getLocalizedMessage", "()Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_c0fb304e] = env->getMethodID(cls, "getLocalizedMessage", "(Ljava/util/Locale;)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JArray< ::java::lang::Object > Message::getArguments() const
            {
              return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_getArguments_94e49c77]));
            }

            ::java::lang::String Message::getKey() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getKey_14c7b5c5]));
            }

            ::java::lang::String Message::getLocalizedMessage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_14c7b5c5]));
            }

            ::java::lang::String Message::getLocalizedMessage(const ::java::util::Locale & a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_c0fb304e], a0.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {
            static PyObject *t_Message_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Message_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Message_getArguments(t_Message *self);
            static PyObject *t_Message_getKey(t_Message *self);
            static PyObject *t_Message_getLocalizedMessage(t_Message *self, PyObject *args);
            static PyObject *t_Message_get__arguments(t_Message *self, void *data);
            static PyObject *t_Message_get__key(t_Message *self, void *data);
            static PyObject *t_Message_get__localizedMessage(t_Message *self, void *data);
            static PyGetSetDef t_Message__fields_[] = {
              DECLARE_GET_FIELD(t_Message, arguments),
              DECLARE_GET_FIELD(t_Message, key),
              DECLARE_GET_FIELD(t_Message, localizedMessage),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_Message__methods_[] = {
              DECLARE_METHOD(t_Message, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Message, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Message, getArguments, METH_NOARGS),
              DECLARE_METHOD(t_Message, getKey, METH_NOARGS),
              DECLARE_METHOD(t_Message, getLocalizedMessage, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(Message, t_Message, ::java::lang::Object, Message, abstract_init, 0, 0, t_Message__fields_, 0, 0);

            void t_Message::install(PyObject *module)
            {
              installType(&PY_TYPE(Message), module, "Message", 0);
            }

            void t_Message::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(Message).tp_dict, "class_", make_descriptor(Message::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(Message).tp_dict, "wrapfn_", make_descriptor(t_Message::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(Message).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_Message_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, Message::initializeClass, 1)))
                return NULL;
              return t_Message::wrap_Object(Message(((t_Message *) arg)->object.this$));
            }
            static PyObject *t_Message_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, Message::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_Message_getArguments(t_Message *self)
            {
              JArray< ::java::lang::Object > result((jobject) NULL);
              OBJ_CALL(result = self->object.getArguments());
              return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
            }

            static PyObject *t_Message_getKey(t_Message *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getKey());
              return j2p(result);
            }

            static PyObject *t_Message_getLocalizedMessage(t_Message *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  ::java::lang::String result((jobject) NULL);
                  OBJ_CALL(result = self->object.getLocalizedMessage());
                  return j2p(result);
                }
                break;
               case 1:
                {
                  ::java::util::Locale a0((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
                  {
                    OBJ_CALL(result = self->object.getLocalizedMessage(a0));
                    return j2p(result);
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "getLocalizedMessage", args);
              return NULL;
            }

            static PyObject *t_Message_get__arguments(t_Message *self, void *data)
            {
              JArray< ::java::lang::Object > value((jobject) NULL);
              OBJ_CALL(value = self->object.getArguments());
              return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
            }

            static PyObject *t_Message_get__key(t_Message *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getKey());
              return j2p(value);
            }

            static PyObject *t_Message_get__localizedMessage(t_Message *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getLocalizedMessage());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/WeightedSpanTerm.h"
#include "org/apache/lucene/search/highlight/PositionSpan.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *WeightedSpanTerm::class$ = NULL;
          jmethodID *WeightedSpanTerm::mids$ = NULL;
          bool WeightedSpanTerm::live$ = false;

          jclass WeightedSpanTerm::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/WeightedSpanTerm");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f3ab5075] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;)V");
              mids$[mid_init$_126740fe] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;Z)V");
              mids$[mid_addPositionSpans_1fde8fc3] = env->getMethodID(cls, "addPositionSpans", "(Ljava/util/List;)V");
              mids$[mid_checkPosition_39c7bd30] = env->getMethodID(cls, "checkPosition", "(I)Z");
              mids$[mid_getPositionSpans_87851566] = env->getMethodID(cls, "getPositionSpans", "()Ljava/util/List;");
              mids$[mid_isPositionSensitive_54c6a16a] = env->getMethodID(cls, "isPositionSensitive", "()Z");
              mids$[mid_setPositionSensitive_bb0c767f] = env->getMethodID(cls, "setPositionSensitive", "(Z)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WeightedSpanTerm::WeightedSpanTerm(jfloat a0, const ::java::lang::String & a1) : ::org::apache::lucene::search::highlight::WeightedTerm(env->newObject(initializeClass, &mids$, mid_init$_f3ab5075, a0, a1.this$)) {}

          WeightedSpanTerm::WeightedSpanTerm(jfloat a0, const ::java::lang::String & a1, jboolean a2) : ::org::apache::lucene::search::highlight::WeightedTerm(env->newObject(initializeClass, &mids$, mid_init$_126740fe, a0, a1.this$, a2)) {}

          void WeightedSpanTerm::addPositionSpans(const ::java::util::List & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_addPositionSpans_1fde8fc3], a0.this$);
          }

          jboolean WeightedSpanTerm::checkPosition(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_checkPosition_39c7bd30], a0);
          }

          ::java::util::List WeightedSpanTerm::getPositionSpans() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getPositionSpans_87851566]));
          }

          jboolean WeightedSpanTerm::isPositionSensitive() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPositionSensitive_54c6a16a]);
          }

          void WeightedSpanTerm::setPositionSensitive(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionSensitive_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_WeightedSpanTerm_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WeightedSpanTerm_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WeightedSpanTerm_init_(t_WeightedSpanTerm *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WeightedSpanTerm_addPositionSpans(t_WeightedSpanTerm *self, PyObject *arg);
          static PyObject *t_WeightedSpanTerm_checkPosition(t_WeightedSpanTerm *self, PyObject *arg);
          static PyObject *t_WeightedSpanTerm_getPositionSpans(t_WeightedSpanTerm *self);
          static PyObject *t_WeightedSpanTerm_isPositionSensitive(t_WeightedSpanTerm *self);
          static PyObject *t_WeightedSpanTerm_setPositionSensitive(t_WeightedSpanTerm *self, PyObject *arg);
          static PyObject *t_WeightedSpanTerm_get__positionSensitive(t_WeightedSpanTerm *self, void *data);
          static int t_WeightedSpanTerm_set__positionSensitive(t_WeightedSpanTerm *self, PyObject *arg, void *data);
          static PyObject *t_WeightedSpanTerm_get__positionSpans(t_WeightedSpanTerm *self, void *data);
          static PyGetSetDef t_WeightedSpanTerm__fields_[] = {
            DECLARE_GETSET_FIELD(t_WeightedSpanTerm, positionSensitive),
            DECLARE_GET_FIELD(t_WeightedSpanTerm, positionSpans),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_WeightedSpanTerm__methods_[] = {
            DECLARE_METHOD(t_WeightedSpanTerm, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedSpanTerm, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedSpanTerm, addPositionSpans, METH_O),
            DECLARE_METHOD(t_WeightedSpanTerm, checkPosition, METH_O),
            DECLARE_METHOD(t_WeightedSpanTerm, getPositionSpans, METH_NOARGS),
            DECLARE_METHOD(t_WeightedSpanTerm, isPositionSensitive, METH_NOARGS),
            DECLARE_METHOD(t_WeightedSpanTerm, setPositionSensitive, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WeightedSpanTerm, t_WeightedSpanTerm, ::org::apache::lucene::search::highlight::WeightedTerm, WeightedSpanTerm, t_WeightedSpanTerm_init_, 0, 0, t_WeightedSpanTerm__fields_, 0, 0);

          void t_WeightedSpanTerm::install(PyObject *module)
          {
            installType(&PY_TYPE(WeightedSpanTerm), module, "WeightedSpanTerm", 0);
          }

          void t_WeightedSpanTerm::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WeightedSpanTerm).tp_dict, "class_", make_descriptor(WeightedSpanTerm::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WeightedSpanTerm).tp_dict, "wrapfn_", make_descriptor(t_WeightedSpanTerm::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WeightedSpanTerm).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WeightedSpanTerm_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WeightedSpanTerm::initializeClass, 1)))
              return NULL;
            return t_WeightedSpanTerm::wrap_Object(WeightedSpanTerm(((t_WeightedSpanTerm *) arg)->object.this$));
          }
          static PyObject *t_WeightedSpanTerm_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WeightedSpanTerm::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WeightedSpanTerm_init_(t_WeightedSpanTerm *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jfloat a0;
                ::java::lang::String a1((jobject) NULL);
                WeightedSpanTerm object((jobject) NULL);

                if (!parseArgs(args, "Fs", &a0, &a1))
                {
                  INT_CALL(object = WeightedSpanTerm(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                jfloat a0;
                ::java::lang::String a1((jobject) NULL);
                jboolean a2;
                WeightedSpanTerm object((jobject) NULL);

                if (!parseArgs(args, "FsZ", &a0, &a1, &a2))
                {
                  INT_CALL(object = WeightedSpanTerm(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WeightedSpanTerm_addPositionSpans(t_WeightedSpanTerm *self, PyObject *arg)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(self->object.addPositionSpans(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addPositionSpans", arg);
            return NULL;
          }

          static PyObject *t_WeightedSpanTerm_checkPosition(t_WeightedSpanTerm *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.checkPosition(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "checkPosition", arg);
            return NULL;
          }

          static PyObject *t_WeightedSpanTerm_getPositionSpans(t_WeightedSpanTerm *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getPositionSpans());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::highlight::PY_TYPE(PositionSpan));
          }

          static PyObject *t_WeightedSpanTerm_isPositionSensitive(t_WeightedSpanTerm *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isPositionSensitive());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_WeightedSpanTerm_setPositionSensitive(t_WeightedSpanTerm *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setPositionSensitive(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionSensitive", arg);
            return NULL;
          }

          static PyObject *t_WeightedSpanTerm_get__positionSensitive(t_WeightedSpanTerm *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPositionSensitive());
            Py_RETURN_BOOL(value);
          }
          static int t_WeightedSpanTerm_set__positionSensitive(t_WeightedSpanTerm *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setPositionSensitive(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionSensitive", arg);
            return -1;
          }

          static PyObject *t_WeightedSpanTerm_get__positionSpans(t_WeightedSpanTerm *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getPositionSpans());
            return ::java::util::t_List::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/IntFieldSource.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/FieldCache$IntParser.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *IntFieldSource::class$ = NULL;
            jmethodID *IntFieldSource::mids$ = NULL;
            bool IntFieldSource::live$ = false;

            jclass IntFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/IntFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_6da5ba0c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$IntParser;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            IntFieldSource::IntFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            IntFieldSource::IntFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$IntParser & a1) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_6da5ba0c, a0.this$, a1.this$)) {}

            ::java::lang::String IntFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean IntFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues IntFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint IntFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_IntFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_IntFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_IntFieldSource_init_(t_IntFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_IntFieldSource_description(t_IntFieldSource *self, PyObject *args);
            static PyObject *t_IntFieldSource_equals(t_IntFieldSource *self, PyObject *args);
            static PyObject *t_IntFieldSource_getValues(t_IntFieldSource *self, PyObject *args);
            static PyObject *t_IntFieldSource_hashCode(t_IntFieldSource *self, PyObject *args);

            static PyMethodDef t_IntFieldSource__methods_[] = {
              DECLARE_METHOD(t_IntFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IntFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IntFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_IntFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_IntFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_IntFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(IntFieldSource, t_IntFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, IntFieldSource, t_IntFieldSource_init_, 0, 0, 0, 0, 0);

            void t_IntFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(IntFieldSource), module, "IntFieldSource", 0);
            }

            void t_IntFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(IntFieldSource).tp_dict, "class_", make_descriptor(IntFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(IntFieldSource).tp_dict, "wrapfn_", make_descriptor(t_IntFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(IntFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_IntFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, IntFieldSource::initializeClass, 1)))
                return NULL;
              return t_IntFieldSource::wrap_Object(IntFieldSource(((t_IntFieldSource *) arg)->object.this$));
            }
            static PyObject *t_IntFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, IntFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_IntFieldSource_init_(t_IntFieldSource *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  IntFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = IntFieldSource(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::FieldCache$IntParser a1((jobject) NULL);
                  IntFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldCache$IntParser::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = IntFieldSource(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_IntFieldSource_description(t_IntFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(IntFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_IntFieldSource_equals(t_IntFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(IntFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_IntFieldSource_getValues(t_IntFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(IntFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_IntFieldSource_hashCode(t_IntFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(IntFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MultiFunction$Values.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "org/apache/lucene/queries/function/valuesource/MultiFunction.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MultiFunction$Values::class$ = NULL;
            jmethodID *MultiFunction$Values::mids$ = NULL;
            bool MultiFunction$Values::live$ = false;

            jclass MultiFunction$Values::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MultiFunction$Values");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b691fe3f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/valuesource/MultiFunction;[Lorg/apache/lucene/queries/function/FunctionValues;)V");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MultiFunction$Values::MultiFunction$Values(const ::org::apache::lucene::queries::function::valuesource::MultiFunction & a0, const JArray< ::org::apache::lucene::queries::function::FunctionValues > & a1) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_b691fe3f, a0.this$, a1.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller MultiFunction$Values::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            ::java::lang::String MultiFunction$Values::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MultiFunction$Values_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MultiFunction$Values_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MultiFunction$Values_init_(t_MultiFunction$Values *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MultiFunction$Values_getValueFiller(t_MultiFunction$Values *self, PyObject *args);
            static PyObject *t_MultiFunction$Values_toString(t_MultiFunction$Values *self, PyObject *args);
            static PyObject *t_MultiFunction$Values_get__valueFiller(t_MultiFunction$Values *self, void *data);
            static PyGetSetDef t_MultiFunction$Values__fields_[] = {
              DECLARE_GET_FIELD(t_MultiFunction$Values, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_MultiFunction$Values__methods_[] = {
              DECLARE_METHOD(t_MultiFunction$Values, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction$Values, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction$Values, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_MultiFunction$Values, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MultiFunction$Values, t_MultiFunction$Values, ::org::apache::lucene::queries::function::FunctionValues, MultiFunction$Values, t_MultiFunction$Values_init_, 0, 0, t_MultiFunction$Values__fields_, 0, 0);

            void t_MultiFunction$Values::install(PyObject *module)
            {
              installType(&PY_TYPE(MultiFunction$Values), module, "MultiFunction$Values", 0);
            }

            void t_MultiFunction$Values::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MultiFunction$Values).tp_dict, "class_", make_descriptor(MultiFunction$Values::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MultiFunction$Values).tp_dict, "wrapfn_", make_descriptor(t_MultiFunction$Values::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MultiFunction$Values).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MultiFunction$Values_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MultiFunction$Values::initializeClass, 1)))
                return NULL;
              return t_MultiFunction$Values::wrap_Object(MultiFunction$Values(((t_MultiFunction$Values *) arg)->object.this$));
            }
            static PyObject *t_MultiFunction$Values_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MultiFunction$Values::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MultiFunction$Values_init_(t_MultiFunction$Values *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::valuesource::MultiFunction a0((jobject) NULL);
              JArray< ::org::apache::lucene::queries::function::FunctionValues > a1((jobject) NULL);
              MultiFunction$Values object((jobject) NULL);

              if (!parseArgs(args, "k[k", ::org::apache::lucene::queries::function::valuesource::MultiFunction::initializeClass, ::org::apache::lucene::queries::function::FunctionValues::initializeClass, &a0, &a1))
              {
                INT_CALL(object = MultiFunction$Values(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_MultiFunction$Values_getValueFiller(t_MultiFunction$Values *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(MultiFunction$Values), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_MultiFunction$Values_toString(t_MultiFunction$Values *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(MultiFunction$Values), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_MultiFunction$Values_get__valueFiller(t_MultiFunction$Values *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/th/ThaiTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {

          ::java::lang::Class *ThaiTokenizerFactory::class$ = NULL;
          jmethodID *ThaiTokenizerFactory::mids$ = NULL;
          bool ThaiTokenizerFactory::live$ = false;

          jclass ThaiTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/th/ThaiTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_e51780e9] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Tokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ThaiTokenizerFactory::ThaiTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::Tokenizer ThaiTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_e51780e9], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {
          static PyObject *t_ThaiTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ThaiTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ThaiTokenizerFactory_init_(t_ThaiTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ThaiTokenizerFactory_create(t_ThaiTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_ThaiTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_ThaiTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ThaiTokenizerFactory, t_ThaiTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, ThaiTokenizerFactory, t_ThaiTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_ThaiTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ThaiTokenizerFactory), module, "ThaiTokenizerFactory", 0);
          }

          void t_ThaiTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ThaiTokenizerFactory).tp_dict, "class_", make_descriptor(ThaiTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ThaiTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_ThaiTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ThaiTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ThaiTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ThaiTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_ThaiTokenizerFactory::wrap_Object(ThaiTokenizerFactory(((t_ThaiTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_ThaiTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ThaiTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ThaiTokenizerFactory_init_(t_ThaiTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ThaiTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ThaiTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ThaiTokenizerFactory_create(t_ThaiTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ThaiTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoWriter.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {

          ::java::lang::Class *Lucene46SegmentInfoWriter::class$ = NULL;
          jmethodID *Lucene46SegmentInfoWriter::mids$ = NULL;
          bool Lucene46SegmentInfoWriter::live$ = false;

          jclass Lucene46SegmentInfoWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_write_3589180f] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene46SegmentInfoWriter::Lucene46SegmentInfoWriter() : ::org::apache::lucene::codecs::SegmentInfoWriter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void Lucene46SegmentInfoWriter::write(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_write_3589180f], a0.this$, a1.this$, a2.this$, a3.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {
          static PyObject *t_Lucene46SegmentInfoWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene46SegmentInfoWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene46SegmentInfoWriter_init_(t_Lucene46SegmentInfoWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene46SegmentInfoWriter_write(t_Lucene46SegmentInfoWriter *self, PyObject *args);

          static PyMethodDef t_Lucene46SegmentInfoWriter__methods_[] = {
            DECLARE_METHOD(t_Lucene46SegmentInfoWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46SegmentInfoWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46SegmentInfoWriter, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene46SegmentInfoWriter, t_Lucene46SegmentInfoWriter, ::org::apache::lucene::codecs::SegmentInfoWriter, Lucene46SegmentInfoWriter, t_Lucene46SegmentInfoWriter_init_, 0, 0, 0, 0, 0);

          void t_Lucene46SegmentInfoWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene46SegmentInfoWriter), module, "Lucene46SegmentInfoWriter", 0);
          }

          void t_Lucene46SegmentInfoWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoWriter).tp_dict, "class_", make_descriptor(Lucene46SegmentInfoWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoWriter).tp_dict, "wrapfn_", make_descriptor(t_Lucene46SegmentInfoWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene46SegmentInfoWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene46SegmentInfoWriter::initializeClass, 1)))
              return NULL;
            return t_Lucene46SegmentInfoWriter::wrap_Object(Lucene46SegmentInfoWriter(((t_Lucene46SegmentInfoWriter *) arg)->object.this$));
          }
          static PyObject *t_Lucene46SegmentInfoWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene46SegmentInfoWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene46SegmentInfoWriter_init_(t_Lucene46SegmentInfoWriter *self, PyObject *args, PyObject *kwds)
          {
            Lucene46SegmentInfoWriter object((jobject) NULL);

            INT_CALL(object = Lucene46SegmentInfoWriter());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene46SegmentInfoWriter_write(t_Lucene46SegmentInfoWriter *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.write(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene46SegmentInfoWriter), (PyObject *) self, "write", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanOrTermsBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanOrTermsBuilder::class$ = NULL;
            jmethodID *SpanOrTermsBuilder::mids$ = NULL;
            bool SpanOrTermsBuilder::live$ = false;

            jclass SpanOrTermsBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanOrTermsBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanOrTermsBuilder::SpanOrTermsBuilder(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanOrTermsBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanOrTermsBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanOrTermsBuilder_init_(t_SpanOrTermsBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanOrTermsBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanOrTermsBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanOrTermsBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanOrTermsBuilder, t_SpanOrTermsBuilder, ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase, SpanOrTermsBuilder, t_SpanOrTermsBuilder_init_, 0, 0, 0, 0, 0);

            void t_SpanOrTermsBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanOrTermsBuilder), module, "SpanOrTermsBuilder", 0);
            }

            void t_SpanOrTermsBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanOrTermsBuilder).tp_dict, "class_", make_descriptor(SpanOrTermsBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanOrTermsBuilder).tp_dict, "wrapfn_", make_descriptor(t_SpanOrTermsBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanOrTermsBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanOrTermsBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanOrTermsBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanOrTermsBuilder::wrap_Object(SpanOrTermsBuilder(((t_SpanOrTermsBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanOrTermsBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanOrTermsBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanOrTermsBuilder_init_(t_SpanOrTermsBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
              SpanOrTermsBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
              {
                INT_CALL(object = SpanOrTermsBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/CustomScoreQuery.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/queries/function/FunctionQuery.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *CustomScoreQuery::class$ = NULL;
        jmethodID *CustomScoreQuery::mids$ = NULL;
        bool CustomScoreQuery::live$ = false;

        jclass CustomScoreQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/CustomScoreQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e301113] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
            mids$[mid_init$_bf3fc62f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;[Lorg/apache/lucene/queries/function/FunctionQuery;)V");
            mids$[mid_init$_02f9eae9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/queries/function/FunctionQuery;)V");
            mids$[mid_clone_c1341b71] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/queries/CustomScoreQuery;");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getScoringQueries_e66abcfa] = env->getMethodID(cls, "getScoringQueries", "()[Lorg/apache/lucene/search/Query;");
            mids$[mid_getSubQuery_97e3851a] = env->getMethodID(cls, "getSubQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isStrict_54c6a16a] = env->getMethodID(cls, "isStrict", "()Z");
            mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setStrict_bb0c767f] = env->getMethodID(cls, "setStrict", "(Z)V");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getCustomScoreProvider_a7245052] = env->getMethodID(cls, "getCustomScoreProvider", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/CustomScoreProvider;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CustomScoreQuery::CustomScoreQuery(const ::org::apache::lucene::search::Query & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_6e301113, a0.this$)) {}

        CustomScoreQuery::CustomScoreQuery(const ::org::apache::lucene::search::Query & a0, const JArray< ::org::apache::lucene::queries::function::FunctionQuery > & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_bf3fc62f, a0.this$, a1.this$)) {}

        CustomScoreQuery::CustomScoreQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::queries::function::FunctionQuery & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_02f9eae9, a0.this$, a1.this$)) {}

        CustomScoreQuery CustomScoreQuery::clone() const
        {
          return CustomScoreQuery(env->callObjectMethod(this$, mids$[mid_clone_c1341b71]));
        }

        ::org::apache::lucene::search::Weight CustomScoreQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean CustomScoreQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void CustomScoreQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        JArray< ::org::apache::lucene::search::Query > CustomScoreQuery::getScoringQueries() const
        {
          return JArray< ::org::apache::lucene::search::Query >(env->callObjectMethod(this$, mids$[mid_getScoringQueries_e66abcfa]));
        }

        ::org::apache::lucene::search::Query CustomScoreQuery::getSubQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getSubQuery_97e3851a]));
        }

        jint CustomScoreQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean CustomScoreQuery::isStrict() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isStrict_54c6a16a]);
        }

        ::java::lang::String CustomScoreQuery::name() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
        }

        ::org::apache::lucene::search::Query CustomScoreQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        void CustomScoreQuery::setStrict(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStrict_bb0c767f], a0);
        }

        ::java::lang::String CustomScoreQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_CustomScoreQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CustomScoreQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CustomScoreQuery_init_(t_CustomScoreQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CustomScoreQuery_clone(t_CustomScoreQuery *self, PyObject *args);
        static PyObject *t_CustomScoreQuery_createWeight(t_CustomScoreQuery *self, PyObject *args);
        static PyObject *t_CustomScoreQuery_equals(t_CustomScoreQuery *self, PyObject *args);
        static PyObject *t_CustomScoreQuery_extractTerms(t_CustomScoreQuery *self, PyObject *args);
        static PyObject *t_CustomScoreQuery_getScoringQueries(t_CustomScoreQuery *self);
        static PyObject *t_CustomScoreQuery_getSubQuery(t_CustomScoreQuery *self);
        static PyObject *t_CustomScoreQuery_hashCode(t_CustomScoreQuery *self, PyObject *args);
        static PyObject *t_CustomScoreQuery_isStrict(t_CustomScoreQuery *self);
        static PyObject *t_CustomScoreQuery_name(t_CustomScoreQuery *self);
        static PyObject *t_CustomScoreQuery_rewrite(t_CustomScoreQuery *self, PyObject *args);
        static PyObject *t_CustomScoreQuery_setStrict(t_CustomScoreQuery *self, PyObject *arg);
        static PyObject *t_CustomScoreQuery_toString(t_CustomScoreQuery *self, PyObject *args);
        static PyObject *t_CustomScoreQuery_get__scoringQueries(t_CustomScoreQuery *self, void *data);
        static PyObject *t_CustomScoreQuery_get__strict(t_CustomScoreQuery *self, void *data);
        static int t_CustomScoreQuery_set__strict(t_CustomScoreQuery *self, PyObject *arg, void *data);
        static PyObject *t_CustomScoreQuery_get__subQuery(t_CustomScoreQuery *self, void *data);
        static PyGetSetDef t_CustomScoreQuery__fields_[] = {
          DECLARE_GET_FIELD(t_CustomScoreQuery, scoringQueries),
          DECLARE_GETSET_FIELD(t_CustomScoreQuery, strict),
          DECLARE_GET_FIELD(t_CustomScoreQuery, subQuery),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CustomScoreQuery__methods_[] = {
          DECLARE_METHOD(t_CustomScoreQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CustomScoreQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CustomScoreQuery, clone, METH_VARARGS),
          DECLARE_METHOD(t_CustomScoreQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_CustomScoreQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_CustomScoreQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_CustomScoreQuery, getScoringQueries, METH_NOARGS),
          DECLARE_METHOD(t_CustomScoreQuery, getSubQuery, METH_NOARGS),
          DECLARE_METHOD(t_CustomScoreQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_CustomScoreQuery, isStrict, METH_NOARGS),
          DECLARE_METHOD(t_CustomScoreQuery, name, METH_NOARGS),
          DECLARE_METHOD(t_CustomScoreQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_CustomScoreQuery, setStrict, METH_O),
          DECLARE_METHOD(t_CustomScoreQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CustomScoreQuery, t_CustomScoreQuery, ::org::apache::lucene::search::Query, CustomScoreQuery, t_CustomScoreQuery_init_, 0, 0, t_CustomScoreQuery__fields_, 0, 0);

        void t_CustomScoreQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(CustomScoreQuery), module, "CustomScoreQuery", 0);
        }

        void t_CustomScoreQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CustomScoreQuery).tp_dict, "class_", make_descriptor(CustomScoreQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CustomScoreQuery).tp_dict, "wrapfn_", make_descriptor(t_CustomScoreQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CustomScoreQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CustomScoreQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CustomScoreQuery::initializeClass, 1)))
            return NULL;
          return t_CustomScoreQuery::wrap_Object(CustomScoreQuery(((t_CustomScoreQuery *) arg)->object.this$));
        }
        static PyObject *t_CustomScoreQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CustomScoreQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CustomScoreQuery_init_(t_CustomScoreQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              CustomScoreQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                INT_CALL(object = CustomScoreQuery(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              JArray< ::org::apache::lucene::queries::function::FunctionQuery > a1((jobject) NULL);
              CustomScoreQuery object((jobject) NULL);

              if (!parseArgs(args, "k[k", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::queries::function::FunctionQuery::initializeClass, &a0, &a1))
              {
                INT_CALL(object = CustomScoreQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionQuery a1((jobject) NULL);
              CustomScoreQuery object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::queries::function::FunctionQuery::initializeClass, &a0, &a1))
              {
                INT_CALL(object = CustomScoreQuery(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CustomScoreQuery_clone(t_CustomScoreQuery *self, PyObject *args)
        {
          CustomScoreQuery result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_CustomScoreQuery::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CustomScoreQuery), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_CustomScoreQuery_createWeight(t_CustomScoreQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CustomScoreQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_CustomScoreQuery_equals(t_CustomScoreQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CustomScoreQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_CustomScoreQuery_extractTerms(t_CustomScoreQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CustomScoreQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_CustomScoreQuery_getScoringQueries(t_CustomScoreQuery *self)
        {
          JArray< ::org::apache::lucene::search::Query > result((jobject) NULL);
          OBJ_CALL(result = self->object.getScoringQueries());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::t_Query::wrap_jobject);
        }

        static PyObject *t_CustomScoreQuery_getSubQuery(t_CustomScoreQuery *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_CustomScoreQuery_hashCode(t_CustomScoreQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(CustomScoreQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_CustomScoreQuery_isStrict(t_CustomScoreQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isStrict());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_CustomScoreQuery_name(t_CustomScoreQuery *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.name());
          return j2p(result);
        }

        static PyObject *t_CustomScoreQuery_rewrite(t_CustomScoreQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CustomScoreQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_CustomScoreQuery_setStrict(t_CustomScoreQuery *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setStrict(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStrict", arg);
          return NULL;
        }

        static PyObject *t_CustomScoreQuery_toString(t_CustomScoreQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(CustomScoreQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CustomScoreQuery_get__scoringQueries(t_CustomScoreQuery *self, void *data)
        {
          JArray< ::org::apache::lucene::search::Query > value((jobject) NULL);
          OBJ_CALL(value = self->object.getScoringQueries());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_Query::wrap_jobject);
        }

        static PyObject *t_CustomScoreQuery_get__strict(t_CustomScoreQuery *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isStrict());
          Py_RETURN_BOOL(value);
        }
        static int t_CustomScoreQuery_set__strict(t_CustomScoreQuery *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setStrict(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "strict", arg);
          return -1;
        }

        static PyObject *t_CustomScoreQuery_get__subQuery(t_CustomScoreQuery *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TwoPhaseCommitTool.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "org/apache/lucene/index/TwoPhaseCommitTool$PrepareCommitFailException.h"
#include "org/apache/lucene/index/TwoPhaseCommitTool$CommitFailException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TwoPhaseCommitTool::class$ = NULL;
        jmethodID *TwoPhaseCommitTool::mids$ = NULL;
        bool TwoPhaseCommitTool::live$ = false;

        jclass TwoPhaseCommitTool::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TwoPhaseCommitTool");

            mids$ = new jmethodID[max_mid];
            mids$[mid_execute_9f61f519] = env->getStaticMethodID(cls, "execute", "([Lorg/apache/lucene/index/TwoPhaseCommit;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TwoPhaseCommitTool::execute(const JArray< ::org::apache::lucene::index::TwoPhaseCommit > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_execute_9f61f519], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TwoPhaseCommitTool_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommitTool_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommitTool_execute(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_TwoPhaseCommitTool__methods_[] = {
          DECLARE_METHOD(t_TwoPhaseCommitTool, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommitTool, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommitTool, execute, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TwoPhaseCommitTool, t_TwoPhaseCommitTool, ::java::lang::Object, TwoPhaseCommitTool, abstract_init, 0, 0, 0, 0, 0);

        void t_TwoPhaseCommitTool::install(PyObject *module)
        {
          installType(&PY_TYPE(TwoPhaseCommitTool), module, "TwoPhaseCommitTool", 0);
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool).tp_dict, "CommitFailException", make_descriptor(&PY_TYPE(TwoPhaseCommitTool$CommitFailException)));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool).tp_dict, "PrepareCommitFailException", make_descriptor(&PY_TYPE(TwoPhaseCommitTool$PrepareCommitFailException)));
        }

        void t_TwoPhaseCommitTool::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool).tp_dict, "class_", make_descriptor(TwoPhaseCommitTool::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool).tp_dict, "wrapfn_", make_descriptor(t_TwoPhaseCommitTool::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TwoPhaseCommitTool_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TwoPhaseCommitTool::initializeClass, 1)))
            return NULL;
          return t_TwoPhaseCommitTool::wrap_Object(TwoPhaseCommitTool(((t_TwoPhaseCommitTool *) arg)->object.this$));
        }
        static PyObject *t_TwoPhaseCommitTool_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TwoPhaseCommitTool::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TwoPhaseCommitTool_execute(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::org::apache::lucene::index::TwoPhaseCommit > a0((jobject) NULL);

          if (!parseArg(arg, "[k", ::org::apache::lucene::index::TwoPhaseCommit::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::TwoPhaseCommitTool::execute(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "execute", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/DirectReader.h"
#include "org/apache/lucene/store/RandomAccessInput.h"
#include "org/apache/lucene/util/LongValues.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *DirectReader::class$ = NULL;
          jmethodID *DirectReader::mids$ = NULL;
          bool DirectReader::live$ = false;

          jclass DirectReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/DirectReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getInstance_9b696251] = env->getStaticMethodID(cls, "getInstance", "(Lorg/apache/lucene/store/RandomAccessInput;I)Lorg/apache/lucene/util/LongValues;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DirectReader::DirectReader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::LongValues DirectReader::getInstance(const ::org::apache::lucene::store::RandomAccessInput & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::LongValues(env->callStaticObjectMethod(cls, mids$[mid_getInstance_9b696251], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_DirectReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DirectReader_init_(t_DirectReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DirectReader_getInstance(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_DirectReader__methods_[] = {
            DECLARE_METHOD(t_DirectReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectReader, getInstance, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DirectReader, t_DirectReader, ::java::lang::Object, DirectReader, t_DirectReader_init_, 0, 0, 0, 0, 0);

          void t_DirectReader::install(PyObject *module)
          {
            installType(&PY_TYPE(DirectReader), module, "DirectReader", 0);
          }

          void t_DirectReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DirectReader).tp_dict, "class_", make_descriptor(DirectReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DirectReader).tp_dict, "wrapfn_", make_descriptor(t_DirectReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DirectReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DirectReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DirectReader::initializeClass, 1)))
              return NULL;
            return t_DirectReader::wrap_Object(DirectReader(((t_DirectReader *) arg)->object.this$));
          }
          static PyObject *t_DirectReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DirectReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DirectReader_init_(t_DirectReader *self, PyObject *args, PyObject *kwds)
          {
            DirectReader object((jobject) NULL);

            INT_CALL(object = DirectReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_DirectReader_getInstance(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::RandomAccessInput a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::util::LongValues result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::store::RandomAccessInput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::DirectReader::getInstance(a0, a1));
              return ::org::apache::lucene::util::t_LongValues::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getInstance", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/PayloadEncoder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *PayloadEncoder::class$ = NULL;
          jmethodID *PayloadEncoder::mids$ = NULL;
          bool PayloadEncoder::live$ = false;

          jclass PayloadEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/PayloadEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_encode_09e96eed] = env->getMethodID(cls, "encode", "([C)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_encode_871544e1] = env->getMethodID(cls, "encode", "([CII)Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::BytesRef PayloadEncoder::encode(const JArray< jchar > & a0) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_09e96eed], a0.this$));
          }

          ::org::apache::lucene::util::BytesRef PayloadEncoder::encode(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_871544e1], a0.this$, a1, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_PayloadEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadEncoder_encode(t_PayloadEncoder *self, PyObject *args);

          static PyMethodDef t_PayloadEncoder__methods_[] = {
            DECLARE_METHOD(t_PayloadEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadEncoder, encode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadEncoder, t_PayloadEncoder, ::java::lang::Object, PayloadEncoder, abstract_init, 0, 0, 0, 0, 0);

          void t_PayloadEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadEncoder), module, "PayloadEncoder", 0);
          }

          void t_PayloadEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadEncoder).tp_dict, "class_", make_descriptor(PayloadEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadEncoder).tp_dict, "wrapfn_", make_descriptor(t_PayloadEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadEncoder::initializeClass, 1)))
              return NULL;
            return t_PayloadEncoder::wrap_Object(PayloadEncoder(((t_PayloadEncoder *) arg)->object.this$));
          }
          static PyObject *t_PayloadEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PayloadEncoder_encode(t_PayloadEncoder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< jchar > a0((jobject) NULL);
                ::org::apache::lucene::util::BytesRef result((jobject) NULL);

                if (!parseArgs(args, "[C", &a0))
                {
                  OBJ_CALL(result = self->object.encode(a0));
                  return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                ::org::apache::lucene::util::BytesRef result((jobject) NULL);

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.encode(a0, a1, a2));
                  return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "encode", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/BreakIteratorBoundaryScanner.h"
#include "java/text/BreakIterator.h"
#include "org/apache/lucene/search/vectorhighlight/BoundaryScanner.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *BreakIteratorBoundaryScanner::class$ = NULL;
          jmethodID *BreakIteratorBoundaryScanner::mids$ = NULL;
          bool BreakIteratorBoundaryScanner::live$ = false;

          jclass BreakIteratorBoundaryScanner::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/BreakIteratorBoundaryScanner");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_918887c2] = env->getMethodID(cls, "<init>", "(Ljava/text/BreakIterator;)V");
              mids$[mid_findEndOffset_f3d950f1] = env->getMethodID(cls, "findEndOffset", "(Ljava/lang/StringBuilder;I)I");
              mids$[mid_findStartOffset_f3d950f1] = env->getMethodID(cls, "findStartOffset", "(Ljava/lang/StringBuilder;I)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BreakIteratorBoundaryScanner::BreakIteratorBoundaryScanner(const ::java::text::BreakIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_918887c2, a0.this$)) {}

          jint BreakIteratorBoundaryScanner::findEndOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findEndOffset_f3d950f1], a0.this$, a1);
          }

          jint BreakIteratorBoundaryScanner::findStartOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findStartOffset_f3d950f1], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_BreakIteratorBoundaryScanner_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BreakIteratorBoundaryScanner_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BreakIteratorBoundaryScanner_init_(t_BreakIteratorBoundaryScanner *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BreakIteratorBoundaryScanner_findEndOffset(t_BreakIteratorBoundaryScanner *self, PyObject *args);
          static PyObject *t_BreakIteratorBoundaryScanner_findStartOffset(t_BreakIteratorBoundaryScanner *self, PyObject *args);

          static PyMethodDef t_BreakIteratorBoundaryScanner__methods_[] = {
            DECLARE_METHOD(t_BreakIteratorBoundaryScanner, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BreakIteratorBoundaryScanner, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BreakIteratorBoundaryScanner, findEndOffset, METH_VARARGS),
            DECLARE_METHOD(t_BreakIteratorBoundaryScanner, findStartOffset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BreakIteratorBoundaryScanner, t_BreakIteratorBoundaryScanner, ::java::lang::Object, BreakIteratorBoundaryScanner, t_BreakIteratorBoundaryScanner_init_, 0, 0, 0, 0, 0);

          void t_BreakIteratorBoundaryScanner::install(PyObject *module)
          {
            installType(&PY_TYPE(BreakIteratorBoundaryScanner), module, "BreakIteratorBoundaryScanner", 0);
          }

          void t_BreakIteratorBoundaryScanner::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BreakIteratorBoundaryScanner).tp_dict, "class_", make_descriptor(BreakIteratorBoundaryScanner::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BreakIteratorBoundaryScanner).tp_dict, "wrapfn_", make_descriptor(t_BreakIteratorBoundaryScanner::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BreakIteratorBoundaryScanner).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BreakIteratorBoundaryScanner_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BreakIteratorBoundaryScanner::initializeClass, 1)))
              return NULL;
            return t_BreakIteratorBoundaryScanner::wrap_Object(BreakIteratorBoundaryScanner(((t_BreakIteratorBoundaryScanner *) arg)->object.this$));
          }
          static PyObject *t_BreakIteratorBoundaryScanner_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BreakIteratorBoundaryScanner::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BreakIteratorBoundaryScanner_init_(t_BreakIteratorBoundaryScanner *self, PyObject *args, PyObject *kwds)
          {
            ::java::text::BreakIterator a0((jobject) NULL);
            BreakIteratorBoundaryScanner object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::text::BreakIterator::initializeClass, &a0))
            {
              INT_CALL(object = BreakIteratorBoundaryScanner(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BreakIteratorBoundaryScanner_findEndOffset(t_BreakIteratorBoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findEndOffset(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findEndOffset", args);
            return NULL;
          }

          static PyObject *t_BreakIteratorBoundaryScanner_findStartOffset(t_BreakIteratorBoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findStartOffset(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findStartOffset", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/TernaryTree$Iterator.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/compound/hyphenation/TernaryTree.h"
#include "java/util/Enumeration.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *TernaryTree$Iterator::class$ = NULL;
            jmethodID *TernaryTree$Iterator::mids$ = NULL;
            bool TernaryTree$Iterator::live$ = false;

            jclass TernaryTree$Iterator::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/TernaryTree$Iterator");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_fe795a01] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/compound/hyphenation/TernaryTree;)V");
                mids$[mid_getValue_54c6a173] = env->getMethodID(cls, "getValue", "()C");
                mids$[mid_hasMoreElements_54c6a16a] = env->getMethodID(cls, "hasMoreElements", "()Z");
                mids$[mid_nextElement_14c7b5c5] = env->getMethodID(cls, "nextElement", "()Ljava/lang/String;");
                mids$[mid_rewind_54c6a166] = env->getMethodID(cls, "rewind", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TernaryTree$Iterator::TernaryTree$Iterator(const ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_fe795a01, a0.this$)) {}

            jchar TernaryTree$Iterator::getValue() const
            {
              return env->callCharMethod(this$, mids$[mid_getValue_54c6a173]);
            }

            jboolean TernaryTree$Iterator::hasMoreElements() const
            {
              return env->callBooleanMethod(this$, mids$[mid_hasMoreElements_54c6a16a]);
            }

            ::java::lang::String TernaryTree$Iterator::nextElement() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_nextElement_14c7b5c5]));
            }

            void TernaryTree$Iterator::rewind() const
            {
              env->callVoidMethod(this$, mids$[mid_rewind_54c6a166]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_TernaryTree$Iterator_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TernaryTree$Iterator_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TernaryTree$Iterator_init_(t_TernaryTree$Iterator *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TernaryTree$Iterator_getValue(t_TernaryTree$Iterator *self);
            static PyObject *t_TernaryTree$Iterator_hasMoreElements(t_TernaryTree$Iterator *self);
            static PyObject *t_TernaryTree$Iterator_nextElement(t_TernaryTree$Iterator *self);
            static PyObject *t_TernaryTree$Iterator_rewind(t_TernaryTree$Iterator *self);
            static PyObject *t_TernaryTree$Iterator_get__value(t_TernaryTree$Iterator *self, void *data);
            static PyGetSetDef t_TernaryTree$Iterator__fields_[] = {
              DECLARE_GET_FIELD(t_TernaryTree$Iterator, value),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TernaryTree$Iterator__methods_[] = {
              DECLARE_METHOD(t_TernaryTree$Iterator, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree$Iterator, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree$Iterator, getValue, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree$Iterator, hasMoreElements, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree$Iterator, nextElement, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree$Iterator, rewind, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TernaryTree$Iterator, t_TernaryTree$Iterator, ::java::lang::Object, TernaryTree$Iterator, t_TernaryTree$Iterator_init_, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Enumeration *)) get_enumeration_next< ::java::util::t_Enumeration,::java::lang::t_String >), t_TernaryTree$Iterator__fields_, 0, 0);

            void t_TernaryTree$Iterator::install(PyObject *module)
            {
              installType(&PY_TYPE(TernaryTree$Iterator), module, "TernaryTree$Iterator", 0);
            }

            void t_TernaryTree$Iterator::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TernaryTree$Iterator).tp_dict, "class_", make_descriptor(TernaryTree$Iterator::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TernaryTree$Iterator).tp_dict, "wrapfn_", make_descriptor(t_TernaryTree$Iterator::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TernaryTree$Iterator).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TernaryTree$Iterator_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TernaryTree$Iterator::initializeClass, 1)))
                return NULL;
              return t_TernaryTree$Iterator::wrap_Object(TernaryTree$Iterator(((t_TernaryTree$Iterator *) arg)->object.this$));
            }
            static PyObject *t_TernaryTree$Iterator_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TernaryTree$Iterator::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TernaryTree$Iterator_init_(t_TernaryTree$Iterator *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree a0((jobject) NULL);
              TernaryTree$Iterator object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::initializeClass, &a0))
              {
                INT_CALL(object = TernaryTree$Iterator(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TernaryTree$Iterator_getValue(t_TernaryTree$Iterator *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.getValue());
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            static PyObject *t_TernaryTree$Iterator_hasMoreElements(t_TernaryTree$Iterator *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.hasMoreElements());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_TernaryTree$Iterator_nextElement(t_TernaryTree$Iterator *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.nextElement());
              return j2p(result);
            }

            static PyObject *t_TernaryTree$Iterator_rewind(t_TernaryTree$Iterator *self)
            {
              OBJ_CALL(self->object.rewind());
              Py_RETURN_NONE;
            }

            static PyObject *t_TernaryTree$Iterator_get__value(t_TernaryTree$Iterator *self, void *data)
            {
              jchar value;
              OBJ_CALL(value = self->object.getValue());
              return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/PersistentSnapshotDeletionPolicy.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/IndexWriterConfig$OpenMode.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *PersistentSnapshotDeletionPolicy::class$ = NULL;
        jmethodID *PersistentSnapshotDeletionPolicy::mids$ = NULL;
        bool PersistentSnapshotDeletionPolicy::live$ = false;
        ::java::lang::String *PersistentSnapshotDeletionPolicy::SNAPSHOTS_PREFIX = NULL;

        jclass PersistentSnapshotDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/PersistentSnapshotDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_12208c4a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexDeletionPolicy;Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_init$_7f5c9dc9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexDeletionPolicy;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;)V");
            mids$[mid_getLastSaveFile_14c7b5c5] = env->getMethodID(cls, "getLastSaveFile", "()Ljava/lang/String;");
            mids$[mid_release_fecc65d3] = env->getMethodID(cls, "release", "(Lorg/apache/lucene/index/IndexCommit;)V");
            mids$[mid_release_0ee6df2f] = env->getMethodID(cls, "release", "(J)V");
            mids$[mid_snapshot_09307276] = env->getMethodID(cls, "snapshot", "()Lorg/apache/lucene/index/IndexCommit;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            SNAPSHOTS_PREFIX = new ::java::lang::String(env->getStaticObjectField(cls, "SNAPSHOTS_PREFIX", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PersistentSnapshotDeletionPolicy::PersistentSnapshotDeletionPolicy(const ::org::apache::lucene::index::IndexDeletionPolicy & a0, const ::org::apache::lucene::store::Directory & a1) : ::org::apache::lucene::index::SnapshotDeletionPolicy(env->newObject(initializeClass, &mids$, mid_init$_12208c4a, a0.this$, a1.this$)) {}

        PersistentSnapshotDeletionPolicy::PersistentSnapshotDeletionPolicy(const ::org::apache::lucene::index::IndexDeletionPolicy & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::index::IndexWriterConfig$OpenMode & a2) : ::org::apache::lucene::index::SnapshotDeletionPolicy(env->newObject(initializeClass, &mids$, mid_init$_7f5c9dc9, a0.this$, a1.this$, a2.this$)) {}

        ::java::lang::String PersistentSnapshotDeletionPolicy::getLastSaveFile() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLastSaveFile_14c7b5c5]));
        }

        void PersistentSnapshotDeletionPolicy::release(const ::org::apache::lucene::index::IndexCommit & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_release_fecc65d3], a0.this$);
        }

        void PersistentSnapshotDeletionPolicy::release(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_release_0ee6df2f], a0);
        }

        ::org::apache::lucene::index::IndexCommit PersistentSnapshotDeletionPolicy::snapshot() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_snapshot_09307276]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_PersistentSnapshotDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PersistentSnapshotDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PersistentSnapshotDeletionPolicy_init_(t_PersistentSnapshotDeletionPolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PersistentSnapshotDeletionPolicy_getLastSaveFile(t_PersistentSnapshotDeletionPolicy *self);
        static PyObject *t_PersistentSnapshotDeletionPolicy_release(t_PersistentSnapshotDeletionPolicy *self, PyObject *args);
        static PyObject *t_PersistentSnapshotDeletionPolicy_snapshot(t_PersistentSnapshotDeletionPolicy *self, PyObject *args);
        static PyObject *t_PersistentSnapshotDeletionPolicy_get__lastSaveFile(t_PersistentSnapshotDeletionPolicy *self, void *data);
        static PyGetSetDef t_PersistentSnapshotDeletionPolicy__fields_[] = {
          DECLARE_GET_FIELD(t_PersistentSnapshotDeletionPolicy, lastSaveFile),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PersistentSnapshotDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_PersistentSnapshotDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PersistentSnapshotDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PersistentSnapshotDeletionPolicy, getLastSaveFile, METH_NOARGS),
          DECLARE_METHOD(t_PersistentSnapshotDeletionPolicy, release, METH_VARARGS),
          DECLARE_METHOD(t_PersistentSnapshotDeletionPolicy, snapshot, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PersistentSnapshotDeletionPolicy, t_PersistentSnapshotDeletionPolicy, ::org::apache::lucene::index::SnapshotDeletionPolicy, PersistentSnapshotDeletionPolicy, t_PersistentSnapshotDeletionPolicy_init_, 0, 0, t_PersistentSnapshotDeletionPolicy__fields_, 0, 0);

        void t_PersistentSnapshotDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(PersistentSnapshotDeletionPolicy), module, "PersistentSnapshotDeletionPolicy", 0);
        }

        void t_PersistentSnapshotDeletionPolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PersistentSnapshotDeletionPolicy).tp_dict, "class_", make_descriptor(PersistentSnapshotDeletionPolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PersistentSnapshotDeletionPolicy).tp_dict, "wrapfn_", make_descriptor(t_PersistentSnapshotDeletionPolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PersistentSnapshotDeletionPolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(PersistentSnapshotDeletionPolicy::initializeClass);
          PyDict_SetItemString(PY_TYPE(PersistentSnapshotDeletionPolicy).tp_dict, "SNAPSHOTS_PREFIX", make_descriptor(j2p(*PersistentSnapshotDeletionPolicy::SNAPSHOTS_PREFIX)));
        }

        static PyObject *t_PersistentSnapshotDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PersistentSnapshotDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_PersistentSnapshotDeletionPolicy::wrap_Object(PersistentSnapshotDeletionPolicy(((t_PersistentSnapshotDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_PersistentSnapshotDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PersistentSnapshotDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PersistentSnapshotDeletionPolicy_init_(t_PersistentSnapshotDeletionPolicy *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::IndexDeletionPolicy a0((jobject) NULL);
              ::org::apache::lucene::store::Directory a1((jobject) NULL);
              PersistentSnapshotDeletionPolicy object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexDeletionPolicy::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = PersistentSnapshotDeletionPolicy(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::index::IndexDeletionPolicy a0((jobject) NULL);
              ::org::apache::lucene::store::Directory a1((jobject) NULL);
              ::org::apache::lucene::index::IndexWriterConfig$OpenMode a2((jobject) NULL);
              PyTypeObject **p2;
              PersistentSnapshotDeletionPolicy object((jobject) NULL);

              if (!parseArgs(args, "kkK", ::org::apache::lucene::index::IndexDeletionPolicy::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::IndexWriterConfig$OpenMode::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::parameters_))
              {
                INT_CALL(object = PersistentSnapshotDeletionPolicy(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PersistentSnapshotDeletionPolicy_getLastSaveFile(t_PersistentSnapshotDeletionPolicy *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getLastSaveFile());
          return j2p(result);
        }

        static PyObject *t_PersistentSnapshotDeletionPolicy_release(t_PersistentSnapshotDeletionPolicy *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0))
              {
                OBJ_CALL(self->object.release(a0));
                Py_RETURN_NONE;
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.release(a0));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(&PY_TYPE(PersistentSnapshotDeletionPolicy), (PyObject *) self, "release", args, 2);
        }

        static PyObject *t_PersistentSnapshotDeletionPolicy_snapshot(t_PersistentSnapshotDeletionPolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.snapshot());
            return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(PersistentSnapshotDeletionPolicy), (PyObject *) self, "snapshot", args, 2);
        }

        static PyObject *t_PersistentSnapshotDeletionPolicy_get__lastSaveFile(t_PersistentSnapshotDeletionPolicy *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getLastSaveFile());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Map.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {

          ::java::lang::Class *SortedSetDocValuesReaderState::class$ = NULL;
          jmethodID *SortedSetDocValuesReaderState::mids$ = NULL;
          bool SortedSetDocValuesReaderState::live$ = false;

          jclass SortedSetDocValuesReaderState::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getDocValues_4bead171] = env->getMethodID(cls, "getDocValues", "()Lorg/apache/lucene/index/SortedSetDocValues;");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getOrdRange_73e2ee38] = env->getMethodID(cls, "getOrdRange", "(Ljava/lang/String;)Lorg/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange;");
              mids$[mid_getOrigReader_94bbd010] = env->getMethodID(cls, "getOrigReader", "()Lorg/apache/lucene/index/IndexReader;");
              mids$[mid_getPrefixToOrdRange_db60befd] = env->getMethodID(cls, "getPrefixToOrdRange", "()Ljava/util/Map;");
              mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::index::SortedSetDocValues SortedSetDocValuesReaderState::getDocValues() const
          {
            return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getDocValues_4bead171]));
          }

          ::java::lang::String SortedSetDocValuesReaderState::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange SortedSetDocValuesReaderState::getOrdRange(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange(env->callObjectMethod(this$, mids$[mid_getOrdRange_73e2ee38], a0.this$));
          }

          ::org::apache::lucene::index::IndexReader SortedSetDocValuesReaderState::getOrigReader() const
          {
            return ::org::apache::lucene::index::IndexReader(env->callObjectMethod(this$, mids$[mid_getOrigReader_94bbd010]));
          }

          ::java::util::Map SortedSetDocValuesReaderState::getPrefixToOrdRange() const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getPrefixToOrdRange_db60befd]));
          }

          jint SortedSetDocValuesReaderState::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {
          static PyObject *t_SortedSetDocValuesReaderState_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetDocValuesReaderState_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetDocValuesReaderState_getDocValues(t_SortedSetDocValuesReaderState *self);
          static PyObject *t_SortedSetDocValuesReaderState_getField(t_SortedSetDocValuesReaderState *self);
          static PyObject *t_SortedSetDocValuesReaderState_getOrdRange(t_SortedSetDocValuesReaderState *self, PyObject *arg);
          static PyObject *t_SortedSetDocValuesReaderState_getOrigReader(t_SortedSetDocValuesReaderState *self);
          static PyObject *t_SortedSetDocValuesReaderState_getPrefixToOrdRange(t_SortedSetDocValuesReaderState *self);
          static PyObject *t_SortedSetDocValuesReaderState_getSize(t_SortedSetDocValuesReaderState *self);
          static PyObject *t_SortedSetDocValuesReaderState_get__docValues(t_SortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_SortedSetDocValuesReaderState_get__field(t_SortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_SortedSetDocValuesReaderState_get__origReader(t_SortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_SortedSetDocValuesReaderState_get__prefixToOrdRange(t_SortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_SortedSetDocValuesReaderState_get__size(t_SortedSetDocValuesReaderState *self, void *data);
          static PyGetSetDef t_SortedSetDocValuesReaderState__fields_[] = {
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState, docValues),
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState, field),
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState, origReader),
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState, prefixToOrdRange),
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState, size),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedSetDocValuesReaderState__methods_[] = {
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getDocValues, METH_NOARGS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getField, METH_NOARGS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getOrdRange, METH_O),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getOrigReader, METH_NOARGS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getPrefixToOrdRange, METH_NOARGS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getSize, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedSetDocValuesReaderState, t_SortedSetDocValuesReaderState, ::java::lang::Object, SortedSetDocValuesReaderState, abstract_init, 0, 0, t_SortedSetDocValuesReaderState__fields_, 0, 0);

          void t_SortedSetDocValuesReaderState::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedSetDocValuesReaderState), module, "SortedSetDocValuesReaderState", 0);
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesReaderState).tp_dict, "OrdRange", make_descriptor(&PY_TYPE(SortedSetDocValuesReaderState$OrdRange)));
          }

          void t_SortedSetDocValuesReaderState::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesReaderState).tp_dict, "class_", make_descriptor(SortedSetDocValuesReaderState::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesReaderState).tp_dict, "wrapfn_", make_descriptor(t_SortedSetDocValuesReaderState::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesReaderState).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedSetDocValuesReaderState_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedSetDocValuesReaderState::initializeClass, 1)))
              return NULL;
            return t_SortedSetDocValuesReaderState::wrap_Object(SortedSetDocValuesReaderState(((t_SortedSetDocValuesReaderState *) arg)->object.this$));
          }
          static PyObject *t_SortedSetDocValuesReaderState_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedSetDocValuesReaderState::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SortedSetDocValuesReaderState_getDocValues(t_SortedSetDocValuesReaderState *self)
          {
            ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);
            OBJ_CALL(result = self->object.getDocValues());
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          static PyObject *t_SortedSetDocValuesReaderState_getField(t_SortedSetDocValuesReaderState *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getField());
            return j2p(result);
          }

          static PyObject *t_SortedSetDocValuesReaderState_getOrdRange(t_SortedSetDocValuesReaderState *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getOrdRange(a0));
              return ::org::apache::lucene::facet::sortedset::t_SortedSetDocValuesReaderState$OrdRange::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getOrdRange", arg);
            return NULL;
          }

          static PyObject *t_SortedSetDocValuesReaderState_getOrigReader(t_SortedSetDocValuesReaderState *self)
          {
            ::org::apache::lucene::index::IndexReader result((jobject) NULL);
            OBJ_CALL(result = self->object.getOrigReader());
            return ::org::apache::lucene::index::t_IndexReader::wrap_Object(result);
          }

          static PyObject *t_SortedSetDocValuesReaderState_getPrefixToOrdRange(t_SortedSetDocValuesReaderState *self)
          {
            ::java::util::Map result((jobject) NULL);
            OBJ_CALL(result = self->object.getPrefixToOrdRange());
            return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::org::apache::lucene::facet::sortedset::PY_TYPE(SortedSetDocValuesReaderState$OrdRange));
          }

          static PyObject *t_SortedSetDocValuesReaderState_getSize(t_SortedSetDocValuesReaderState *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_SortedSetDocValuesReaderState_get__docValues(t_SortedSetDocValuesReaderState *self, void *data)
          {
            ::org::apache::lucene::index::SortedSetDocValues value((jobject) NULL);
            OBJ_CALL(value = self->object.getDocValues());
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(value);
          }

          static PyObject *t_SortedSetDocValuesReaderState_get__field(t_SortedSetDocValuesReaderState *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SortedSetDocValuesReaderState_get__origReader(t_SortedSetDocValuesReaderState *self, void *data)
          {
            ::org::apache::lucene::index::IndexReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getOrigReader());
            return ::org::apache::lucene::index::t_IndexReader::wrap_Object(value);
          }

          static PyObject *t_SortedSetDocValuesReaderState_get__prefixToOrdRange(t_SortedSetDocValuesReaderState *self, void *data)
          {
            ::java::util::Map value((jobject) NULL);
            OBJ_CALL(value = self->object.getPrefixToOrdRange());
            return ::java::util::t_Map::wrap_Object(value);
          }

          static PyObject *t_SortedSetDocValuesReaderState_get__size(t_SortedSetDocValuesReaderState *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *Field$Store::class$ = NULL;
        jmethodID *Field$Store::mids$ = NULL;
        bool Field$Store::live$ = false;
        Field$Store *Field$Store::NO = NULL;
        Field$Store *Field$Store::YES = NULL;

        jclass Field$Store::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/Field$Store");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_7fd4bea4] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/document/Field$Store;");
            mids$[mid_values_ca930bca] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/document/Field$Store;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            NO = new Field$Store(env->getStaticObjectField(cls, "NO", "Lorg/apache/lucene/document/Field$Store;"));
            YES = new Field$Store(env->getStaticObjectField(cls, "YES", "Lorg/apache/lucene/document/Field$Store;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Field$Store Field$Store::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Field$Store(env->callStaticObjectMethod(cls, mids$[mid_valueOf_7fd4bea4], a0.this$));
        }

        JArray< Field$Store > Field$Store::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< Field$Store >(env->callStaticObjectMethod(cls, mids$[mid_values_ca930bca]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_Field$Store_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field$Store_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field$Store_of_(t_Field$Store *self, PyObject *args);
        static PyObject *t_Field$Store_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_Field$Store_values(PyTypeObject *type);
        static PyObject *t_Field$Store_get__parameters_(t_Field$Store *self, void *data);
        static PyGetSetDef t_Field$Store__fields_[] = {
          DECLARE_GET_FIELD(t_Field$Store, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Field$Store__methods_[] = {
          DECLARE_METHOD(t_Field$Store, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field$Store, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field$Store, of_, METH_VARARGS),
          DECLARE_METHOD(t_Field$Store, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Field$Store, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Field$Store, t_Field$Store, ::java::lang::Enum, Field$Store, abstract_init, 0, 0, t_Field$Store__fields_, 0, 0);
        PyObject *t_Field$Store::wrap_Object(const Field$Store& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Field$Store::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Field$Store *self = (t_Field$Store *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_Field$Store::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Field$Store::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Field$Store *self = (t_Field$Store *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_Field$Store::install(PyObject *module)
        {
          installType(&PY_TYPE(Field$Store), module, "Field$Store", 0);
        }

        void t_Field$Store::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Field$Store).tp_dict, "class_", make_descriptor(Field$Store::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Field$Store).tp_dict, "wrapfn_", make_descriptor(t_Field$Store::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Field$Store).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Field$Store::initializeClass);
          PyDict_SetItemString(PY_TYPE(Field$Store).tp_dict, "NO", make_descriptor(t_Field$Store::wrap_Object(*Field$Store::NO)));
          PyDict_SetItemString(PY_TYPE(Field$Store).tp_dict, "YES", make_descriptor(t_Field$Store::wrap_Object(*Field$Store::YES)));
        }

        static PyObject *t_Field$Store_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Field$Store::initializeClass, 1)))
            return NULL;
          return t_Field$Store::wrap_Object(Field$Store(((t_Field$Store *) arg)->object.this$));
        }
        static PyObject *t_Field$Store_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Field$Store::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Field$Store_of_(t_Field$Store *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_Field$Store_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          Field$Store result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::Field$Store::valueOf(a0));
            return t_Field$Store::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_Field$Store_values(PyTypeObject *type)
        {
          JArray< Field$Store > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::document::Field$Store::values());
          return JArray<jobject>(result.this$).wrap(t_Field$Store::wrap_jobject);
        }
        static PyObject *t_Field$Store_get__parameters_(t_Field$Store *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/NearSpansUnordered.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/search/spans/SpanNearQuery.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *NearSpansUnordered::class$ = NULL;
          jmethodID *NearSpansUnordered::mids$ = NULL;
          bool NearSpansUnordered::live$ = false;

          jclass NearSpansUnordered::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/NearSpansUnordered");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a9b434a2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanNearQuery;Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)V");
              mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_doc_54c6a179] = env->getMethodID(cls, "doc", "()I");
              mids$[mid_end_54c6a179] = env->getMethodID(cls, "end", "()I");
              mids$[mid_getPayload_2d2d7de4] = env->getMethodID(cls, "getPayload", "()Ljava/util/Collection;");
              mids$[mid_getSubSpans_dd49b8eb] = env->getMethodID(cls, "getSubSpans", "()[Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_isPayloadAvailable_54c6a16a] = env->getMethodID(cls, "isPayloadAvailable", "()Z");
              mids$[mid_next_54c6a16a] = env->getMethodID(cls, "next", "()Z");
              mids$[mid_skipTo_39c7bd30] = env->getMethodID(cls, "skipTo", "(I)Z");
              mids$[mid_start_54c6a179] = env->getMethodID(cls, "start", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NearSpansUnordered::NearSpansUnordered(const ::org::apache::lucene::search::spans::SpanNearQuery & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1, const ::org::apache::lucene::util::Bits & a2, const ::java::util::Map & a3) : ::org::apache::lucene::search::spans::Spans(env->newObject(initializeClass, &mids$, mid_init$_a9b434a2, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          jlong NearSpansUnordered::cost() const
          {
            return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
          }

          jint NearSpansUnordered::doc() const
          {
            return env->callIntMethod(this$, mids$[mid_doc_54c6a179]);
          }

          jint NearSpansUnordered::end() const
          {
            return env->callIntMethod(this$, mids$[mid_end_54c6a179]);
          }

          ::java::util::Collection NearSpansUnordered::getPayload() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getPayload_2d2d7de4]));
          }

          JArray< ::org::apache::lucene::search::spans::Spans > NearSpansUnordered::getSubSpans() const
          {
            return JArray< ::org::apache::lucene::search::spans::Spans >(env->callObjectMethod(this$, mids$[mid_getSubSpans_dd49b8eb]));
          }

          jboolean NearSpansUnordered::isPayloadAvailable() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPayloadAvailable_54c6a16a]);
          }

          jboolean NearSpansUnordered::next() const
          {
            return env->callBooleanMethod(this$, mids$[mid_next_54c6a16a]);
          }

          jboolean NearSpansUnordered::skipTo(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_skipTo_39c7bd30], a0);
          }

          jint NearSpansUnordered::start() const
          {
            return env->callIntMethod(this$, mids$[mid_start_54c6a179]);
          }

          ::java::lang::String NearSpansUnordered::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_NearSpansUnordered_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NearSpansUnordered_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NearSpansUnordered_init_(t_NearSpansUnordered *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NearSpansUnordered_cost(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_doc(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_end(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_getPayload(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_getSubSpans(t_NearSpansUnordered *self);
          static PyObject *t_NearSpansUnordered_isPayloadAvailable(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_next(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_skipTo(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_start(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_toString(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_get__payload(t_NearSpansUnordered *self, void *data);
          static PyObject *t_NearSpansUnordered_get__payloadAvailable(t_NearSpansUnordered *self, void *data);
          static PyObject *t_NearSpansUnordered_get__subSpans(t_NearSpansUnordered *self, void *data);
          static PyGetSetDef t_NearSpansUnordered__fields_[] = {
            DECLARE_GET_FIELD(t_NearSpansUnordered, payload),
            DECLARE_GET_FIELD(t_NearSpansUnordered, payloadAvailable),
            DECLARE_GET_FIELD(t_NearSpansUnordered, subSpans),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NearSpansUnordered__methods_[] = {
            DECLARE_METHOD(t_NearSpansUnordered, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NearSpansUnordered, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NearSpansUnordered, cost, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, doc, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, end, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, getPayload, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, getSubSpans, METH_NOARGS),
            DECLARE_METHOD(t_NearSpansUnordered, isPayloadAvailable, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, next, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, skipTo, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, start, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NearSpansUnordered, t_NearSpansUnordered, ::org::apache::lucene::search::spans::Spans, NearSpansUnordered, t_NearSpansUnordered_init_, 0, 0, t_NearSpansUnordered__fields_, 0, 0);

          void t_NearSpansUnordered::install(PyObject *module)
          {
            installType(&PY_TYPE(NearSpansUnordered), module, "NearSpansUnordered", 0);
          }

          void t_NearSpansUnordered::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NearSpansUnordered).tp_dict, "class_", make_descriptor(NearSpansUnordered::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NearSpansUnordered).tp_dict, "wrapfn_", make_descriptor(t_NearSpansUnordered::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NearSpansUnordered).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NearSpansUnordered_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NearSpansUnordered::initializeClass, 1)))
              return NULL;
            return t_NearSpansUnordered::wrap_Object(NearSpansUnordered(((t_NearSpansUnordered *) arg)->object.this$));
          }
          static PyObject *t_NearSpansUnordered_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NearSpansUnordered::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NearSpansUnordered_init_(t_NearSpansUnordered *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanNearQuery a0((jobject) NULL);
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::util::Bits a2((jobject) NULL);
            ::java::util::Map a3((jobject) NULL);
            PyTypeObject **p3;
            NearSpansUnordered object((jobject) NULL);

            if (!parseArgs(args, "kkkK", ::org::apache::lucene::search::spans::SpanNearQuery::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = NearSpansUnordered(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NearSpansUnordered_cost(t_NearSpansUnordered *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.cost());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "cost", args, 2);
          }

          static PyObject *t_NearSpansUnordered_doc(t_NearSpansUnordered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.doc());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "doc", args, 2);
          }

          static PyObject *t_NearSpansUnordered_end(t_NearSpansUnordered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.end());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_NearSpansUnordered_getPayload(t_NearSpansUnordered *self, PyObject *args)
          {
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getPayload());
              return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "getPayload", args, 2);
          }

          static PyObject *t_NearSpansUnordered_getSubSpans(t_NearSpansUnordered *self)
          {
            JArray< ::org::apache::lucene::search::spans::Spans > result((jobject) NULL);
            OBJ_CALL(result = self->object.getSubSpans());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spans::t_Spans::wrap_jobject);
          }

          static PyObject *t_NearSpansUnordered_isPayloadAvailable(t_NearSpansUnordered *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.isPayloadAvailable());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "isPayloadAvailable", args, 2);
          }

          static PyObject *t_NearSpansUnordered_next(t_NearSpansUnordered *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.next());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_NearSpansUnordered_skipTo(t_NearSpansUnordered *self, PyObject *args)
          {
            jint a0;
            jboolean result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.skipTo(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "skipTo", args, 2);
          }

          static PyObject *t_NearSpansUnordered_start(t_NearSpansUnordered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.start());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "start", args, 2);
          }

          static PyObject *t_NearSpansUnordered_toString(t_NearSpansUnordered *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_NearSpansUnordered_get__payload(t_NearSpansUnordered *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getPayload());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static PyObject *t_NearSpansUnordered_get__payloadAvailable(t_NearSpansUnordered *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPayloadAvailable());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_NearSpansUnordered_get__subSpans(t_NearSpansUnordered *self, void *data)
          {
            JArray< ::org::apache::lucene::search::spans::Spans > value((jobject) NULL);
            OBJ_CALL(value = self->object.getSubSpans());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::spans::t_Spans::wrap_jobject);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/index/MergeState.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingTermVectorsWriter::class$ = NULL;
          jmethodID *CompressingTermVectorsWriter::mids$ = NULL;
          bool CompressingTermVectorsWriter::live$ = false;

          jclass CompressingTermVectorsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_999e6287] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;I)V");
              mids$[mid_abort_54c6a166] = env->getMethodID(cls, "abort", "()V");
              mids$[mid_addPosition_ffd34a92] = env->getMethodID(cls, "addPosition", "(IIILorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_addProx_395d0aa2] = env->getMethodID(cls, "addProx", "(ILorg/apache/lucene/store/DataInput;Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_finish_48f050c2] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
              mids$[mid_finishDocument_54c6a166] = env->getMethodID(cls, "finishDocument", "()V");
              mids$[mid_finishField_54c6a166] = env->getMethodID(cls, "finishField", "()V");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_merge_fd0cfdeb] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)I");
              mids$[mid_startDocument_39c7bd3c] = env->getMethodID(cls, "startDocument", "(I)V");
              mids$[mid_startField_07c4def5] = env->getMethodID(cls, "startField", "(Lorg/apache/lucene/index/FieldInfo;IZZZ)V");
              mids$[mid_startTerm_738fc2ce] = env->getMethodID(cls, "startTerm", "(Lorg/apache/lucene/util/BytesRef;I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingTermVectorsWriter::CompressingTermVectorsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3, const ::java::lang::String & a4, const ::org::apache::lucene::codecs::compressing::CompressionMode & a5, jint a6) : ::org::apache::lucene::codecs::TermVectorsWriter(env->newObject(initializeClass, &mids$, mid_init$_999e6287, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6)) {}

          void CompressingTermVectorsWriter::abort() const
          {
            env->callVoidMethod(this$, mids$[mid_abort_54c6a166]);
          }

          void CompressingTermVectorsWriter::addPosition(jint a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addPosition_ffd34a92], a0, a1, a2, a3.this$);
          }

          void CompressingTermVectorsWriter::addProx(jint a0, const ::org::apache::lucene::store::DataInput & a1, const ::org::apache::lucene::store::DataInput & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_addProx_395d0aa2], a0, a1.this$, a2.this$);
          }

          void CompressingTermVectorsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void CompressingTermVectorsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_finish_48f050c2], a0.this$, a1);
          }

          void CompressingTermVectorsWriter::finishDocument() const
          {
            env->callVoidMethod(this$, mids$[mid_finishDocument_54c6a166]);
          }

          void CompressingTermVectorsWriter::finishField() const
          {
            env->callVoidMethod(this$, mids$[mid_finishField_54c6a166]);
          }

          ::java::util::Comparator CompressingTermVectorsWriter::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          jint CompressingTermVectorsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_merge_fd0cfdeb], a0.this$);
          }

          void CompressingTermVectorsWriter::startDocument(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_startDocument_39c7bd3c], a0);
          }

          void CompressingTermVectorsWriter::startField(const ::org::apache::lucene::index::FieldInfo & a0, jint a1, jboolean a2, jboolean a3, jboolean a4) const
          {
            env->callVoidMethod(this$, mids$[mid_startField_07c4def5], a0.this$, a1, a2, a3, a4);
          }

          void CompressingTermVectorsWriter::startTerm(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_startTerm_738fc2ce], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingTermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingTermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompressingTermVectorsWriter_init_(t_CompressingTermVectorsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompressingTermVectorsWriter_abort(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_addPosition(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_addProx(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_close(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_finish(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_finishDocument(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_finishField(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_getComparator(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_merge(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_startDocument(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_startField(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_startTerm(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_get__comparator(t_CompressingTermVectorsWriter *self, void *data);
          static PyGetSetDef t_CompressingTermVectorsWriter__fields_[] = {
            DECLARE_GET_FIELD(t_CompressingTermVectorsWriter, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CompressingTermVectorsWriter__methods_[] = {
            DECLARE_METHOD(t_CompressingTermVectorsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, abort, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, addPosition, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, addProx, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, finish, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, finishDocument, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, finishField, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, getComparator, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, merge, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, startDocument, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, startField, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, startTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingTermVectorsWriter, t_CompressingTermVectorsWriter, ::org::apache::lucene::codecs::TermVectorsWriter, CompressingTermVectorsWriter, t_CompressingTermVectorsWriter_init_, 0, 0, t_CompressingTermVectorsWriter__fields_, 0, 0);

          void t_CompressingTermVectorsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingTermVectorsWriter), module, "CompressingTermVectorsWriter", 0);
          }

          void t_CompressingTermVectorsWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsWriter).tp_dict, "class_", make_descriptor(CompressingTermVectorsWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsWriter).tp_dict, "wrapfn_", make_descriptor(t_CompressingTermVectorsWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingTermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingTermVectorsWriter::initializeClass, 1)))
              return NULL;
            return t_CompressingTermVectorsWriter::wrap_Object(CompressingTermVectorsWriter(((t_CompressingTermVectorsWriter *) arg)->object.this$));
          }
          static PyObject *t_CompressingTermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingTermVectorsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompressingTermVectorsWriter_init_(t_CompressingTermVectorsWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::java::lang::String a4((jobject) NULL);
            ::org::apache::lucene::codecs::compressing::CompressionMode a5((jobject) NULL);
            jint a6;
            CompressingTermVectorsWriter object((jobject) NULL);

            if (!parseArgs(args, "kkskskI", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              INT_CALL(object = CompressingTermVectorsWriter(a0, a1, a2, a3, a4, a5, a6));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompressingTermVectorsWriter_abort(t_CompressingTermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.abort());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "abort", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_addPosition(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

            if (!parseArgs(args, "IIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.addPosition(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "addPosition", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_addProx(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::store::DataInput a1((jobject) NULL);
            ::org::apache::lucene::store::DataInput a2((jobject) NULL);

            if (!parseArgs(args, "Ikk", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.addProx(a0, a1, a2));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "addProx", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_close(t_CompressingTermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_finish(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.finish(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "finish", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_finishDocument(t_CompressingTermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishDocument());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "finishDocument", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_finishField(t_CompressingTermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishField());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "finishField", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_getComparator(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            ::java::util::Comparator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "getComparator", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_merge(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::MergeState a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.merge(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "merge", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_startDocument(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.startDocument(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "startDocument", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_startField(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            jint a1;
            jboolean a2;
            jboolean a3;
            jboolean a4;

            if (!parseArgs(args, "kIZZZ", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.startField(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "startField", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_startTerm(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.startTerm(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "startTerm", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_get__comparator(t_CompressingTermVectorsWriter *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/MapOfSets.h"
#include "java/util/Set.h"
#include "java/util/Map.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *MapOfSets::class$ = NULL;
        jmethodID *MapOfSets::mids$ = NULL;
        bool MapOfSets::live$ = false;

        jclass MapOfSets::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/MapOfSets");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
            mids$[mid_getMap_db60befd] = env->getMethodID(cls, "getMap", "()Ljava/util/Map;");
            mids$[mid_put_466982ed] = env->getMethodID(cls, "put", "(Ljava/lang/Object;Ljava/lang/Object;)I");
            mids$[mid_putAll_bdc4f4b6] = env->getMethodID(cls, "putAll", "(Ljava/lang/Object;Ljava/util/Collection;)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MapOfSets::MapOfSets(const ::java::util::Map & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

        ::java::util::Map MapOfSets::getMap() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getMap_db60befd]));
        }

        jint MapOfSets::put(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_put_466982ed], a0.this$, a1.this$);
        }

        jint MapOfSets::putAll(const ::java::lang::Object & a0, const ::java::util::Collection & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_putAll_bdc4f4b6], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_MapOfSets_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MapOfSets_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MapOfSets_of_(t_MapOfSets *self, PyObject *args);
        static int t_MapOfSets_init_(t_MapOfSets *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MapOfSets_getMap(t_MapOfSets *self);
        static PyObject *t_MapOfSets_put(t_MapOfSets *self, PyObject *args);
        static PyObject *t_MapOfSets_putAll(t_MapOfSets *self, PyObject *args);
        static PyObject *t_MapOfSets_get__map(t_MapOfSets *self, void *data);
        static PyObject *t_MapOfSets_get__parameters_(t_MapOfSets *self, void *data);
        static PyGetSetDef t_MapOfSets__fields_[] = {
          DECLARE_GET_FIELD(t_MapOfSets, map),
          DECLARE_GET_FIELD(t_MapOfSets, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MapOfSets__methods_[] = {
          DECLARE_METHOD(t_MapOfSets, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MapOfSets, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MapOfSets, of_, METH_VARARGS),
          DECLARE_METHOD(t_MapOfSets, getMap, METH_NOARGS),
          DECLARE_METHOD(t_MapOfSets, put, METH_VARARGS),
          DECLARE_METHOD(t_MapOfSets, putAll, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MapOfSets, t_MapOfSets, ::java::lang::Object, MapOfSets, t_MapOfSets_init_, 0, 0, t_MapOfSets__fields_, 0, 0);
        PyObject *t_MapOfSets::wrap_Object(const MapOfSets& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_MapOfSets::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MapOfSets *self = (t_MapOfSets *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        PyObject *t_MapOfSets::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_MapOfSets::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MapOfSets *self = (t_MapOfSets *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        void t_MapOfSets::install(PyObject *module)
        {
          installType(&PY_TYPE(MapOfSets), module, "MapOfSets", 0);
        }

        void t_MapOfSets::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MapOfSets).tp_dict, "class_", make_descriptor(MapOfSets::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MapOfSets).tp_dict, "wrapfn_", make_descriptor(t_MapOfSets::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MapOfSets).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MapOfSets_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MapOfSets::initializeClass, 1)))
            return NULL;
          return t_MapOfSets::wrap_Object(MapOfSets(((t_MapOfSets *) arg)->object.this$));
        }
        static PyObject *t_MapOfSets_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MapOfSets::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MapOfSets_of_(t_MapOfSets *self, PyObject *args)
        {
          if (!parseArg(args, "T", 2, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MapOfSets_init_(t_MapOfSets *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;
          MapOfSets object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            INT_CALL(object = MapOfSets(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MapOfSets_getMap(t_MapOfSets *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getMap());
          return ::java::util::t_Map::wrap_Object(result);
        }

        static PyObject *t_MapOfSets_put(t_MapOfSets *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
          {
            OBJ_CALL(result = self->object.put(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "put", args);
          return NULL;
        }

        static PyObject *t_MapOfSets_putAll(t_MapOfSets *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::util::Collection a1((jobject) NULL);
          PyTypeObject **p1;
          jint result;

          if (!parseArgs(args, "OK", self->parameters[0], ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(result = self->object.putAll(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "putAll", args);
          return NULL;
        }
        static PyObject *t_MapOfSets_get__parameters_(t_MapOfSets *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_MapOfSets_get__map(t_MapOfSets *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getMap());
          return ::java::util::t_Map::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsFormat.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/StoredFieldsWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40StoredFieldsFormat::class$ = NULL;
          jmethodID *Lucene40StoredFieldsFormat::mids$ = NULL;
          bool Lucene40StoredFieldsFormat::live$ = false;

          jclass Lucene40StoredFieldsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsReader_bbe26ec4] = env->getMethodID(cls, "fieldsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsReader;");
              mids$[mid_fieldsWriter_c73cceda] = env->getMethodID(cls, "fieldsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40StoredFieldsFormat::Lucene40StoredFieldsFormat() : ::org::apache::lucene::codecs::StoredFieldsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::StoredFieldsReader Lucene40StoredFieldsFormat::fieldsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_fieldsReader_bbe26ec4], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::codecs::StoredFieldsWriter Lucene40StoredFieldsFormat::fieldsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::codecs::StoredFieldsWriter(env->callObjectMethod(this$, mids$[mid_fieldsWriter_c73cceda], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40StoredFieldsFormat_init_(t_Lucene40StoredFieldsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40StoredFieldsFormat_fieldsReader(t_Lucene40StoredFieldsFormat *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsFormat_fieldsWriter(t_Lucene40StoredFieldsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene40StoredFieldsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40StoredFieldsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40StoredFieldsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40StoredFieldsFormat, fieldsReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsFormat, fieldsWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40StoredFieldsFormat, t_Lucene40StoredFieldsFormat, ::org::apache::lucene::codecs::StoredFieldsFormat, Lucene40StoredFieldsFormat, t_Lucene40StoredFieldsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene40StoredFieldsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40StoredFieldsFormat), module, "Lucene40StoredFieldsFormat", 0);
          }

          void t_Lucene40StoredFieldsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsFormat).tp_dict, "class_", make_descriptor(Lucene40StoredFieldsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40StoredFieldsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40StoredFieldsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40StoredFieldsFormat::wrap_Object(Lucene40StoredFieldsFormat(((t_Lucene40StoredFieldsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40StoredFieldsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40StoredFieldsFormat_init_(t_Lucene40StoredFieldsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40StoredFieldsFormat object((jobject) NULL);

            INT_CALL(object = Lucene40StoredFieldsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40StoredFieldsFormat_fieldsReader(t_Lucene40StoredFieldsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.fieldsReader(a0, a1, a2, a3));
              return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsFormat), (PyObject *) self, "fieldsReader", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsFormat_fieldsWriter(t_Lucene40StoredFieldsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::codecs::StoredFieldsWriter result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.fieldsWriter(a0, a1, a2));
              return ::org::apache::lucene::codecs::t_StoredFieldsWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsFormat), (PyObject *) self, "fieldsWriter", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fi/FinnishLightStemFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {

          ::java::lang::Class *FinnishLightStemFilterFactory::class$ = NULL;
          jmethodID *FinnishLightStemFilterFactory::mids$ = NULL;
          bool FinnishLightStemFilterFactory::live$ = false;

          jclass FinnishLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fi/FinnishLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FinnishLightStemFilterFactory::FinnishLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream FinnishLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {
          static PyObject *t_FinnishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FinnishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FinnishLightStemFilterFactory_init_(t_FinnishLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FinnishLightStemFilterFactory_create(t_FinnishLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_FinnishLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_FinnishLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FinnishLightStemFilterFactory, t_FinnishLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, FinnishLightStemFilterFactory, t_FinnishLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_FinnishLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(FinnishLightStemFilterFactory), module, "FinnishLightStemFilterFactory", 0);
          }

          void t_FinnishLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FinnishLightStemFilterFactory).tp_dict, "class_", make_descriptor(FinnishLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FinnishLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_FinnishLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FinnishLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FinnishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FinnishLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_FinnishLightStemFilterFactory::wrap_Object(FinnishLightStemFilterFactory(((t_FinnishLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_FinnishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FinnishLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FinnishLightStemFilterFactory_init_(t_FinnishLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            FinnishLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = FinnishLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FinnishLightStemFilterFactory_create(t_FinnishLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FinnishLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/lang/String.h"
#include "java/lang/Number.h"
#include "org/apache/lucene/facet/LabelAndValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetResult::class$ = NULL;
        jmethodID *FacetResult::mids$ = NULL;
        jfieldID *FacetResult::fids$ = NULL;
        bool FacetResult::live$ = false;

        jclass FacetResult::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetResult");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4b7182dd] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/Number;[Lorg/apache/lucene/facet/LabelAndValue;I)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_childCount] = env->getFieldID(cls, "childCount", "I");
            fids$[fid_dim] = env->getFieldID(cls, "dim", "Ljava/lang/String;");
            fids$[fid_labelValues] = env->getFieldID(cls, "labelValues", "[Lorg/apache/lucene/facet/LabelAndValue;");
            fids$[fid_path] = env->getFieldID(cls, "path", "[Ljava/lang/String;");
            fids$[fid_value] = env->getFieldID(cls, "value", "Ljava/lang/Number;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetResult::FacetResult(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1, const ::java::lang::Number & a2, const JArray< ::org::apache::lucene::facet::LabelAndValue > & a3, jint a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4b7182dd, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

        jboolean FacetResult::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint FacetResult::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String FacetResult::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jint FacetResult::_get_childCount() const
        {
          return env->getIntField(this$, fids$[fid_childCount]);
        }

        ::java::lang::String FacetResult::_get_dim() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_dim]));
        }

        JArray< ::org::apache::lucene::facet::LabelAndValue > FacetResult::_get_labelValues() const
        {
          return JArray< ::org::apache::lucene::facet::LabelAndValue >(env->getObjectField(this$, fids$[fid_labelValues]));
        }

        JArray< ::java::lang::String > FacetResult::_get_path() const
        {
          return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_path]));
        }

        ::java::lang::Number FacetResult::_get_value() const
        {
          return ::java::lang::Number(env->getObjectField(this$, fids$[fid_value]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetResult_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetResult_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetResult_init_(t_FacetResult *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetResult_equals(t_FacetResult *self, PyObject *args);
        static PyObject *t_FacetResult_hashCode(t_FacetResult *self, PyObject *args);
        static PyObject *t_FacetResult_toString(t_FacetResult *self, PyObject *args);
        static PyObject *t_FacetResult_get__childCount(t_FacetResult *self, void *data);
        static PyObject *t_FacetResult_get__dim(t_FacetResult *self, void *data);
        static PyObject *t_FacetResult_get__labelValues(t_FacetResult *self, void *data);
        static PyObject *t_FacetResult_get__path(t_FacetResult *self, void *data);
        static PyObject *t_FacetResult_get__value(t_FacetResult *self, void *data);

        static PyGetSetDef t_FacetResult__fields_[] = {
          DECLARE_GET_FIELD(t_FacetResult, childCount),
          DECLARE_GET_FIELD(t_FacetResult, dim),
          DECLARE_GET_FIELD(t_FacetResult, labelValues),
          DECLARE_GET_FIELD(t_FacetResult, path),
          DECLARE_GET_FIELD(t_FacetResult, value),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetResult__methods_[] = {
          DECLARE_METHOD(t_FacetResult, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetResult, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetResult, equals, METH_VARARGS),
          DECLARE_METHOD(t_FacetResult, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FacetResult, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FacetResult, t_FacetResult, ::java::lang::Object, FacetResult, t_FacetResult_init_, 0, 0, t_FacetResult__fields_, 0, 0);

        void t_FacetResult::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetResult), module, "FacetResult", 0);
        }

        void t_FacetResult::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FacetResult).tp_dict, "class_", make_descriptor(FacetResult::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FacetResult).tp_dict, "wrapfn_", make_descriptor(t_FacetResult::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FacetResult).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FacetResult_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetResult::initializeClass, 1)))
            return NULL;
          return t_FacetResult::wrap_Object(FacetResult(((t_FacetResult *) arg)->object.this$));
        }
        static PyObject *t_FacetResult_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetResult::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetResult_init_(t_FacetResult *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::lang::Number a2((jobject) NULL);
          JArray< ::org::apache::lucene::facet::LabelAndValue > a3((jobject) NULL);
          jint a4;
          FacetResult object((jobject) NULL);

          if (!parseArgs(args, "s[sO[kI", &::java::lang::PY_TYPE(Number), ::org::apache::lucene::facet::LabelAndValue::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = FacetResult(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FacetResult_equals(t_FacetResult *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FacetResult), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FacetResult_hashCode(t_FacetResult *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FacetResult), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FacetResult_toString(t_FacetResult *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FacetResult), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FacetResult_get__childCount(t_FacetResult *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_childCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FacetResult_get__dim(t_FacetResult *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_dim());
          return j2p(value);
        }

        static PyObject *t_FacetResult_get__labelValues(t_FacetResult *self, void *data)
        {
          JArray< ::org::apache::lucene::facet::LabelAndValue > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_labelValues());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::facet::t_LabelAndValue::wrap_jobject);
        }

        static PyObject *t_FacetResult_get__path(t_FacetResult *self, void *data)
        {
          JArray< ::java::lang::String > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_path());
          return JArray<jstring>(value.this$).wrap();
        }

        static PyObject *t_FacetResult_get__value(t_FacetResult *self, void *data)
        {
          ::java::lang::Number value((jobject) NULL);
          OBJ_CALL(value = self->object._get_value());
          return ::java::lang::t_Number::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/PostingsBaseFormat.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *PostingsBaseFormat::class$ = NULL;
        jmethodID *PostingsBaseFormat::mids$ = NULL;
        jfieldID *PostingsBaseFormat::fids$ = NULL;
        bool PostingsBaseFormat::live$ = false;

        jclass PostingsBaseFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/PostingsBaseFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_postingsReaderBase_927fb3f2] = env->getMethodID(cls, "postingsReaderBase", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/PostingsReaderBase;");
            mids$[mid_postingsWriterBase_c1fe85c2] = env->getMethodID(cls, "postingsWriterBase", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/PostingsWriterBase;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_name] = env->getFieldID(cls, "name", "Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::PostingsReaderBase PostingsBaseFormat::postingsReaderBase(const ::org::apache::lucene::index::SegmentReadState & a0) const
        {
          return ::org::apache::lucene::codecs::PostingsReaderBase(env->callObjectMethod(this$, mids$[mid_postingsReaderBase_927fb3f2], a0.this$));
        }

        ::org::apache::lucene::codecs::PostingsWriterBase PostingsBaseFormat::postingsWriterBase(const ::org::apache::lucene::index::SegmentWriteState & a0) const
        {
          return ::org::apache::lucene::codecs::PostingsWriterBase(env->callObjectMethod(this$, mids$[mid_postingsWriterBase_c1fe85c2], a0.this$));
        }

        ::java::lang::String PostingsBaseFormat::_get_name() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_name]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_PostingsBaseFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsBaseFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsBaseFormat_postingsReaderBase(t_PostingsBaseFormat *self, PyObject *arg);
        static PyObject *t_PostingsBaseFormat_postingsWriterBase(t_PostingsBaseFormat *self, PyObject *arg);
        static PyObject *t_PostingsBaseFormat_get__name(t_PostingsBaseFormat *self, void *data);

        static PyGetSetDef t_PostingsBaseFormat__fields_[] = {
          DECLARE_GET_FIELD(t_PostingsBaseFormat, name),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PostingsBaseFormat__methods_[] = {
          DECLARE_METHOD(t_PostingsBaseFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsBaseFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsBaseFormat, postingsReaderBase, METH_O),
          DECLARE_METHOD(t_PostingsBaseFormat, postingsWriterBase, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PostingsBaseFormat, t_PostingsBaseFormat, ::java::lang::Object, PostingsBaseFormat, abstract_init, 0, 0, t_PostingsBaseFormat__fields_, 0, 0);

        void t_PostingsBaseFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(PostingsBaseFormat), module, "PostingsBaseFormat", 0);
        }

        void t_PostingsBaseFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PostingsBaseFormat).tp_dict, "class_", make_descriptor(PostingsBaseFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PostingsBaseFormat).tp_dict, "wrapfn_", make_descriptor(t_PostingsBaseFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PostingsBaseFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PostingsBaseFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PostingsBaseFormat::initializeClass, 1)))
            return NULL;
          return t_PostingsBaseFormat::wrap_Object(PostingsBaseFormat(((t_PostingsBaseFormat *) arg)->object.this$));
        }
        static PyObject *t_PostingsBaseFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PostingsBaseFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PostingsBaseFormat_postingsReaderBase(t_PostingsBaseFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
          ::org::apache::lucene::codecs::PostingsReaderBase result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.postingsReaderBase(a0));
            return ::org::apache::lucene::codecs::t_PostingsReaderBase::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "postingsReaderBase", arg);
          return NULL;
        }

        static PyObject *t_PostingsBaseFormat_postingsWriterBase(t_PostingsBaseFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
          ::org::apache::lucene::codecs::PostingsWriterBase result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.postingsWriterBase(a0));
            return ::org::apache::lucene::codecs::t_PostingsWriterBase::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "postingsWriterBase", arg);
          return NULL;
        }

        static PyObject *t_PostingsBaseFormat_get__name(t_PostingsBaseFormat *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_name());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiTerms.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiTerms::class$ = NULL;
        jmethodID *MultiTerms::mids$ = NULL;
        bool MultiTerms::live$ = false;

        jclass MultiTerms::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiTerms");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_cc1bf630] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/Terms;[Lorg/apache/lucene/index/ReaderSlice;)V");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_getDocCount_54c6a179] = env->getMethodID(cls, "getDocCount", "()I");
            mids$[mid_getMax_4ae19461] = env->getMethodID(cls, "getMax", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getMin_4ae19461] = env->getMethodID(cls, "getMin", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getSubSlices_df2851e8] = env->getMethodID(cls, "getSubSlices", "()[Lorg/apache/lucene/index/ReaderSlice;");
            mids$[mid_getSubTerms_a3c12bfa] = env->getMethodID(cls, "getSubTerms", "()[Lorg/apache/lucene/index/Terms;");
            mids$[mid_getSumDocFreq_54c6a17a] = env->getMethodID(cls, "getSumDocFreq", "()J");
            mids$[mid_getSumTotalTermFreq_54c6a17a] = env->getMethodID(cls, "getSumTotalTermFreq", "()J");
            mids$[mid_hasFreqs_54c6a16a] = env->getMethodID(cls, "hasFreqs", "()Z");
            mids$[mid_hasOffsets_54c6a16a] = env->getMethodID(cls, "hasOffsets", "()Z");
            mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
            mids$[mid_hasPositions_54c6a16a] = env->getMethodID(cls, "hasPositions", "()Z");
            mids$[mid_intersect_b8f2b1bc] = env->getMethodID(cls, "intersect", "(Lorg/apache/lucene/util/automaton/CompiledAutomaton;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_iterator_d737078b] = env->getMethodID(cls, "iterator", "(Lorg/apache/lucene/index/TermsEnum;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTerms::MultiTerms(const JArray< ::org::apache::lucene::index::Terms > & a0, const JArray< ::org::apache::lucene::index::ReaderSlice > & a1) : ::org::apache::lucene::index::Terms(env->newObject(initializeClass, &mids$, mid_init$_cc1bf630, a0.this$, a1.this$)) {}

        ::java::util::Comparator MultiTerms::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        jint MultiTerms::getDocCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef MultiTerms::getMax() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMax_4ae19461]));
        }

        ::org::apache::lucene::util::BytesRef MultiTerms::getMin() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMin_4ae19461]));
        }

        JArray< ::org::apache::lucene::index::ReaderSlice > MultiTerms::getSubSlices() const
        {
          return JArray< ::org::apache::lucene::index::ReaderSlice >(env->callObjectMethod(this$, mids$[mid_getSubSlices_df2851e8]));
        }

        JArray< ::org::apache::lucene::index::Terms > MultiTerms::getSubTerms() const
        {
          return JArray< ::org::apache::lucene::index::Terms >(env->callObjectMethod(this$, mids$[mid_getSubTerms_a3c12bfa]));
        }

        jlong MultiTerms::getSumDocFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_54c6a17a]);
        }

        jlong MultiTerms::getSumTotalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_54c6a17a]);
        }

        jboolean MultiTerms::hasFreqs() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasFreqs_54c6a16a]);
        }

        jboolean MultiTerms::hasOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasOffsets_54c6a16a]);
        }

        jboolean MultiTerms::hasPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
        }

        jboolean MultiTerms::hasPositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPositions_54c6a16a]);
        }

        ::org::apache::lucene::index::TermsEnum MultiTerms::intersect(const ::org::apache::lucene::util::automaton::CompiledAutomaton & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_intersect_b8f2b1bc], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::TermsEnum MultiTerms::iterator(const ::org::apache::lucene::index::TermsEnum & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_iterator_d737078b], a0.this$));
        }

        jlong MultiTerms::size() const
        {
          return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiTerms_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTerms_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiTerms_init_(t_MultiTerms *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTerms_getComparator(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_getDocCount(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_getMax(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_getMin(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_getSubSlices(t_MultiTerms *self);
        static PyObject *t_MultiTerms_getSubTerms(t_MultiTerms *self);
        static PyObject *t_MultiTerms_getSumDocFreq(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_getSumTotalTermFreq(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_hasFreqs(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_hasOffsets(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_hasPayloads(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_hasPositions(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_intersect(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_iterator(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_size(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_get__comparator(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__docCount(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__max(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__min(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__subSlices(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__subTerms(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__sumDocFreq(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__sumTotalTermFreq(t_MultiTerms *self, void *data);
        static PyGetSetDef t_MultiTerms__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTerms, comparator),
          DECLARE_GET_FIELD(t_MultiTerms, docCount),
          DECLARE_GET_FIELD(t_MultiTerms, max),
          DECLARE_GET_FIELD(t_MultiTerms, min),
          DECLARE_GET_FIELD(t_MultiTerms, subSlices),
          DECLARE_GET_FIELD(t_MultiTerms, subTerms),
          DECLARE_GET_FIELD(t_MultiTerms, sumDocFreq),
          DECLARE_GET_FIELD(t_MultiTerms, sumTotalTermFreq),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTerms__methods_[] = {
          DECLARE_METHOD(t_MultiTerms, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTerms, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTerms, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, getDocCount, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, getMax, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, getMin, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, getSubSlices, METH_NOARGS),
          DECLARE_METHOD(t_MultiTerms, getSubTerms, METH_NOARGS),
          DECLARE_METHOD(t_MultiTerms, getSumDocFreq, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, getSumTotalTermFreq, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, hasFreqs, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, hasOffsets, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, hasPayloads, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, hasPositions, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, intersect, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, iterator, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, size, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTerms, t_MultiTerms, ::org::apache::lucene::index::Terms, MultiTerms, t_MultiTerms_init_, 0, 0, t_MultiTerms__fields_, 0, 0);

        void t_MultiTerms::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTerms), module, "MultiTerms", 0);
        }

        void t_MultiTerms::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTerms).tp_dict, "class_", make_descriptor(MultiTerms::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTerms).tp_dict, "wrapfn_", make_descriptor(t_MultiTerms::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTerms).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTerms_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTerms::initializeClass, 1)))
            return NULL;
          return t_MultiTerms::wrap_Object(MultiTerms(((t_MultiTerms *) arg)->object.this$));
        }
        static PyObject *t_MultiTerms_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTerms::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiTerms_init_(t_MultiTerms *self, PyObject *args, PyObject *kwds)
        {
          JArray< ::org::apache::lucene::index::Terms > a0((jobject) NULL);
          JArray< ::org::apache::lucene::index::ReaderSlice > a1((jobject) NULL);
          MultiTerms object((jobject) NULL);

          if (!parseArgs(args, "[k[k", ::org::apache::lucene::index::Terms::initializeClass, ::org::apache::lucene::index::ReaderSlice::initializeClass, &a0, &a1))
          {
            INT_CALL(object = MultiTerms(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiTerms_getComparator(t_MultiTerms *self, PyObject *args)
        {
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_MultiTerms_getDocCount(t_MultiTerms *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getDocCount());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "getDocCount", args, 2);
        }

        static PyObject *t_MultiTerms_getMax(t_MultiTerms *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMax());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "getMax", args, 2);
        }

        static PyObject *t_MultiTerms_getMin(t_MultiTerms *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMin());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "getMin", args, 2);
        }

        static PyObject *t_MultiTerms_getSubSlices(t_MultiTerms *self)
        {
          JArray< ::org::apache::lucene::index::ReaderSlice > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubSlices());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_ReaderSlice::wrap_jobject);
        }

        static PyObject *t_MultiTerms_getSubTerms(t_MultiTerms *self)
        {
          JArray< ::org::apache::lucene::index::Terms > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubTerms());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_Terms::wrap_jobject);
        }

        static PyObject *t_MultiTerms_getSumDocFreq(t_MultiTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getSumDocFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "getSumDocFreq", args, 2);
        }

        static PyObject *t_MultiTerms_getSumTotalTermFreq(t_MultiTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getSumTotalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "getSumTotalTermFreq", args, 2);
        }

        static PyObject *t_MultiTerms_hasFreqs(t_MultiTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasFreqs());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "hasFreqs", args, 2);
        }

        static PyObject *t_MultiTerms_hasOffsets(t_MultiTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasOffsets());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "hasOffsets", args, 2);
        }

        static PyObject *t_MultiTerms_hasPayloads(t_MultiTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "hasPayloads", args, 2);
        }

        static PyObject *t_MultiTerms_hasPositions(t_MultiTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasPositions());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "hasPositions", args, 2);
        }

        static PyObject *t_MultiTerms_intersect(t_MultiTerms *self, PyObject *args)
        {
          ::org::apache::lucene::util::automaton::CompiledAutomaton a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::CompiledAutomaton::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.intersect(a0, a1));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "intersect", args, 2);
        }

        static PyObject *t_MultiTerms_iterator(t_MultiTerms *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.iterator(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_MultiTerms_size(t_MultiTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "size", args, 2);
        }

        static PyObject *t_MultiTerms_get__comparator(t_MultiTerms *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_MultiTerms_get__docCount(t_MultiTerms *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDocCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_MultiTerms_get__max(t_MultiTerms *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getMax());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_MultiTerms_get__min(t_MultiTerms *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getMin());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_MultiTerms_get__subSlices(t_MultiTerms *self, void *data)
        {
          JArray< ::org::apache::lucene::index::ReaderSlice > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubSlices());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_ReaderSlice::wrap_jobject);
        }

        static PyObject *t_MultiTerms_get__subTerms(t_MultiTerms *self, void *data)
        {
          JArray< ::org::apache::lucene::index::Terms > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubTerms());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_Terms::wrap_jobject);
        }

        static PyObject *t_MultiTerms_get__sumDocFreq(t_MultiTerms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumDocFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_MultiTerms_get__sumTotalTermFreq(t_MultiTerms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumTotalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Normalization$NoNormalization.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Normalization$NoNormalization::class$ = NULL;
          jmethodID *Normalization$NoNormalization::mids$ = NULL;
          bool Normalization$NoNormalization::live$ = false;

          jclass Normalization$NoNormalization::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Normalization$NoNormalization");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_aa9c2b5b] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_tfn_63482206] = env->getMethodID(cls, "tfn", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Normalization$NoNormalization::Normalization$NoNormalization() : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation Normalization$NoNormalization::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_aa9c2b5b], a0.this$, a1, a2));
          }

          jfloat Normalization$NoNormalization::tfn(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_tfn_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String Normalization$NoNormalization::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Normalization$NoNormalization_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Normalization$NoNormalization_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Normalization$NoNormalization_init_(t_Normalization$NoNormalization *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Normalization$NoNormalization_explain(t_Normalization$NoNormalization *self, PyObject *args);
          static PyObject *t_Normalization$NoNormalization_tfn(t_Normalization$NoNormalization *self, PyObject *args);
          static PyObject *t_Normalization$NoNormalization_toString(t_Normalization$NoNormalization *self, PyObject *args);

          static PyMethodDef t_Normalization$NoNormalization__methods_[] = {
            DECLARE_METHOD(t_Normalization$NoNormalization, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Normalization$NoNormalization, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Normalization$NoNormalization, explain, METH_VARARGS),
            DECLARE_METHOD(t_Normalization$NoNormalization, tfn, METH_VARARGS),
            DECLARE_METHOD(t_Normalization$NoNormalization, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Normalization$NoNormalization, t_Normalization$NoNormalization, ::org::apache::lucene::search::similarities::Normalization, Normalization$NoNormalization, t_Normalization$NoNormalization_init_, 0, 0, 0, 0, 0);

          void t_Normalization$NoNormalization::install(PyObject *module)
          {
            installType(&PY_TYPE(Normalization$NoNormalization), module, "Normalization$NoNormalization", 0);
          }

          void t_Normalization$NoNormalization::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Normalization$NoNormalization).tp_dict, "class_", make_descriptor(Normalization$NoNormalization::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Normalization$NoNormalization).tp_dict, "wrapfn_", make_descriptor(t_Normalization$NoNormalization::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Normalization$NoNormalization).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Normalization$NoNormalization_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Normalization$NoNormalization::initializeClass, 1)))
              return NULL;
            return t_Normalization$NoNormalization::wrap_Object(Normalization$NoNormalization(((t_Normalization$NoNormalization *) arg)->object.this$));
          }
          static PyObject *t_Normalization$NoNormalization_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Normalization$NoNormalization::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Normalization$NoNormalization_init_(t_Normalization$NoNormalization *self, PyObject *args, PyObject *kwds)
          {
            Normalization$NoNormalization object((jobject) NULL);

            INT_CALL(object = Normalization$NoNormalization());
            self->object = object;

            return 0;
          }

          static PyObject *t_Normalization$NoNormalization_explain(t_Normalization$NoNormalization *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.explain(a0, a1, a2));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Normalization$NoNormalization), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_Normalization$NoNormalization_tfn(t_Normalization$NoNormalization *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.tfn(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(Normalization$NoNormalization), (PyObject *) self, "tfn", args, 2);
          }

          static PyObject *t_Normalization$NoNormalization_toString(t_Normalization$NoNormalization *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Normalization$NoNormalization), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/IBSimilarity.h"
#include "org/apache/lucene/search/similarities/Normalization.h"
#include "org/apache/lucene/search/similarities/Lambda.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/Distribution.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *IBSimilarity::class$ = NULL;
          jmethodID *IBSimilarity::mids$ = NULL;
          bool IBSimilarity::live$ = false;

          jclass IBSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/IBSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c1a9dba4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/Distribution;Lorg/apache/lucene/search/similarities/Lambda;Lorg/apache/lucene/search/similarities/Normalization;)V");
              mids$[mid_getDistribution_997d9b00] = env->getMethodID(cls, "getDistribution", "()Lorg/apache/lucene/search/similarities/Distribution;");
              mids$[mid_getLambda_c82cedff] = env->getMethodID(cls, "getLambda", "()Lorg/apache/lucene/search/similarities/Lambda;");
              mids$[mid_getNormalization_d2e76e28] = env->getMethodID(cls, "getNormalization", "()Lorg/apache/lucene/search/similarities/Normalization;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_explain_347d95f8] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Explanation;Lorg/apache/lucene/search/similarities/BasicStats;IFF)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IBSimilarity::IBSimilarity(const ::org::apache::lucene::search::similarities::Distribution & a0, const ::org::apache::lucene::search::similarities::Lambda & a1, const ::org::apache::lucene::search::similarities::Normalization & a2) : ::org::apache::lucene::search::similarities::SimilarityBase(env->newObject(initializeClass, &mids$, mid_init$_c1a9dba4, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::similarities::Distribution IBSimilarity::getDistribution() const
          {
            return ::org::apache::lucene::search::similarities::Distribution(env->callObjectMethod(this$, mids$[mid_getDistribution_997d9b00]));
          }

          ::org::apache::lucene::search::similarities::Lambda IBSimilarity::getLambda() const
          {
            return ::org::apache::lucene::search::similarities::Lambda(env->callObjectMethod(this$, mids$[mid_getLambda_c82cedff]));
          }

          ::org::apache::lucene::search::similarities::Normalization IBSimilarity::getNormalization() const
          {
            return ::org::apache::lucene::search::similarities::Normalization(env->callObjectMethod(this$, mids$[mid_getNormalization_d2e76e28]));
          }

          ::java::lang::String IBSimilarity::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_IBSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IBSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IBSimilarity_init_(t_IBSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IBSimilarity_getDistribution(t_IBSimilarity *self);
          static PyObject *t_IBSimilarity_getLambda(t_IBSimilarity *self);
          static PyObject *t_IBSimilarity_getNormalization(t_IBSimilarity *self);
          static PyObject *t_IBSimilarity_toString(t_IBSimilarity *self, PyObject *args);
          static PyObject *t_IBSimilarity_get__distribution(t_IBSimilarity *self, void *data);
          static PyObject *t_IBSimilarity_get__lambda(t_IBSimilarity *self, void *data);
          static PyObject *t_IBSimilarity_get__normalization(t_IBSimilarity *self, void *data);
          static PyGetSetDef t_IBSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_IBSimilarity, distribution),
            DECLARE_GET_FIELD(t_IBSimilarity, lambda),
            DECLARE_GET_FIELD(t_IBSimilarity, normalization),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IBSimilarity__methods_[] = {
            DECLARE_METHOD(t_IBSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IBSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IBSimilarity, getDistribution, METH_NOARGS),
            DECLARE_METHOD(t_IBSimilarity, getLambda, METH_NOARGS),
            DECLARE_METHOD(t_IBSimilarity, getNormalization, METH_NOARGS),
            DECLARE_METHOD(t_IBSimilarity, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IBSimilarity, t_IBSimilarity, ::org::apache::lucene::search::similarities::SimilarityBase, IBSimilarity, t_IBSimilarity_init_, 0, 0, t_IBSimilarity__fields_, 0, 0);

          void t_IBSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(IBSimilarity), module, "IBSimilarity", 0);
          }

          void t_IBSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IBSimilarity).tp_dict, "class_", make_descriptor(IBSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IBSimilarity).tp_dict, "wrapfn_", make_descriptor(t_IBSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IBSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IBSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IBSimilarity::initializeClass, 1)))
              return NULL;
            return t_IBSimilarity::wrap_Object(IBSimilarity(((t_IBSimilarity *) arg)->object.this$));
          }
          static PyObject *t_IBSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IBSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IBSimilarity_init_(t_IBSimilarity *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::similarities::Distribution a0((jobject) NULL);
            ::org::apache::lucene::search::similarities::Lambda a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Normalization a2((jobject) NULL);
            IBSimilarity object((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::search::similarities::Distribution::initializeClass, ::org::apache::lucene::search::similarities::Lambda::initializeClass, ::org::apache::lucene::search::similarities::Normalization::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = IBSimilarity(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IBSimilarity_getDistribution(t_IBSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::Distribution result((jobject) NULL);
            OBJ_CALL(result = self->object.getDistribution());
            return ::org::apache::lucene::search::similarities::t_Distribution::wrap_Object(result);
          }

          static PyObject *t_IBSimilarity_getLambda(t_IBSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::Lambda result((jobject) NULL);
            OBJ_CALL(result = self->object.getLambda());
            return ::org::apache::lucene::search::similarities::t_Lambda::wrap_Object(result);
          }

          static PyObject *t_IBSimilarity_getNormalization(t_IBSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::Normalization result((jobject) NULL);
            OBJ_CALL(result = self->object.getNormalization());
            return ::org::apache::lucene::search::similarities::t_Normalization::wrap_Object(result);
          }

          static PyObject *t_IBSimilarity_toString(t_IBSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(IBSimilarity), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_IBSimilarity_get__distribution(t_IBSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::Distribution value((jobject) NULL);
            OBJ_CALL(value = self->object.getDistribution());
            return ::org::apache::lucene::search::similarities::t_Distribution::wrap_Object(value);
          }

          static PyObject *t_IBSimilarity_get__lambda(t_IBSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::Lambda value((jobject) NULL);
            OBJ_CALL(value = self->object.getLambda());
            return ::org::apache::lucene::search::similarities::t_Lambda::wrap_Object(value);
          }

          static PyObject *t_IBSimilarity_get__normalization(t_IBSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::Normalization value((jobject) NULL);
            OBJ_CALL(value = self->object.getNormalization());
            return ::org::apache::lucene::search::similarities::t_Normalization::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ValueQueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *FieldValuePairQueryNode::class$ = NULL;
              jmethodID *FieldValuePairQueryNode::mids$ = NULL;
              bool FieldValuePairQueryNode::live$ = false;

              jclass FieldValuePairQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_FieldValuePairQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldValuePairQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldValuePairQueryNode_of_(t_FieldValuePairQueryNode *self, PyObject *args);
              static PyObject *t_FieldValuePairQueryNode_get__parameters_(t_FieldValuePairQueryNode *self, void *data);
              static PyGetSetDef t_FieldValuePairQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_FieldValuePairQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FieldValuePairQueryNode__methods_[] = {
                DECLARE_METHOD(t_FieldValuePairQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldValuePairQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldValuePairQueryNode, of_, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldValuePairQueryNode, t_FieldValuePairQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldableNode, FieldValuePairQueryNode, abstract_init, 0, 0, t_FieldValuePairQueryNode__fields_, 0, 0);
              PyObject *t_FieldValuePairQueryNode::wrap_Object(const FieldValuePairQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_FieldValuePairQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_FieldValuePairQueryNode *self = (t_FieldValuePairQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_FieldValuePairQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_FieldValuePairQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_FieldValuePairQueryNode *self = (t_FieldValuePairQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_FieldValuePairQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldValuePairQueryNode), module, "FieldValuePairQueryNode", 0);
              }

              void t_FieldValuePairQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldValuePairQueryNode).tp_dict, "class_", make_descriptor(FieldValuePairQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldValuePairQueryNode).tp_dict, "wrapfn_", make_descriptor(t_FieldValuePairQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldValuePairQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldValuePairQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldValuePairQueryNode::initializeClass, 1)))
                  return NULL;
                return t_FieldValuePairQueryNode::wrap_Object(FieldValuePairQueryNode(((t_FieldValuePairQueryNode *) arg)->object.this$));
              }
              static PyObject *t_FieldValuePairQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldValuePairQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_FieldValuePairQueryNode_of_(t_FieldValuePairQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }
              static PyObject *t_FieldValuePairQueryNode_get__parameters_(t_FieldValuePairQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/LowerCaseFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/core/LowerCaseFilter.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *LowerCaseFilterFactory::class$ = NULL;
          jmethodID *LowerCaseFilterFactory::mids$ = NULL;
          bool LowerCaseFilterFactory::live$ = false;

          jclass LowerCaseFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/LowerCaseFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_40083866] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/core/LowerCaseFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LowerCaseFilterFactory::LowerCaseFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::core::LowerCaseFilter LowerCaseFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::core::LowerCaseFilter(env->callObjectMethod(this$, mids$[mid_create_40083866], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory LowerCaseFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_LowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LowerCaseFilterFactory_init_(t_LowerCaseFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LowerCaseFilterFactory_create(t_LowerCaseFilterFactory *self, PyObject *args);
          static PyObject *t_LowerCaseFilterFactory_getMultiTermComponent(t_LowerCaseFilterFactory *self);
          static PyObject *t_LowerCaseFilterFactory_get__multiTermComponent(t_LowerCaseFilterFactory *self, void *data);
          static PyGetSetDef t_LowerCaseFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_LowerCaseFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LowerCaseFilterFactory__methods_[] = {
            DECLARE_METHOD(t_LowerCaseFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_LowerCaseFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LowerCaseFilterFactory, t_LowerCaseFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, LowerCaseFilterFactory, t_LowerCaseFilterFactory_init_, 0, 0, t_LowerCaseFilterFactory__fields_, 0, 0);

          void t_LowerCaseFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LowerCaseFilterFactory), module, "LowerCaseFilterFactory", 0);
          }

          void t_LowerCaseFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LowerCaseFilterFactory).tp_dict, "class_", make_descriptor(LowerCaseFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LowerCaseFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_LowerCaseFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LowerCaseFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LowerCaseFilterFactory::initializeClass, 1)))
              return NULL;
            return t_LowerCaseFilterFactory::wrap_Object(LowerCaseFilterFactory(((t_LowerCaseFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_LowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LowerCaseFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LowerCaseFilterFactory_init_(t_LowerCaseFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LowerCaseFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LowerCaseFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LowerCaseFilterFactory_create(t_LowerCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::core::LowerCaseFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::core::t_LowerCaseFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LowerCaseFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_LowerCaseFilterFactory_getMultiTermComponent(t_LowerCaseFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_LowerCaseFilterFactory_get__multiTermComponent(t_LowerCaseFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/UpgradeIndexMergePolicy.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/lang/Boolean.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *UpgradeIndexMergePolicy::class$ = NULL;
        jmethodID *UpgradeIndexMergePolicy::mids$ = NULL;
        bool UpgradeIndexMergePolicy::live$ = false;

        jclass UpgradeIndexMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/UpgradeIndexMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6034dd24] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/MergePolicy;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_findForcedDeletesMerges_581dbc49] = env->getMethodID(cls, "findForcedDeletesMerges", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findForcedMerges_4fe4a5b5] = env->getMethodID(cls, "findForcedMerges", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findMerges_cada0df0] = env->getMethodID(cls, "findMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_useCompoundFile_70dc8488] = env->getMethodID(cls, "useCompoundFile", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)Z");
            mids$[mid_shouldUpgradeSegment_6649cdf8] = env->getMethodID(cls, "shouldUpgradeSegment", "(Lorg/apache/lucene/index/SegmentCommitInfo;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        UpgradeIndexMergePolicy::UpgradeIndexMergePolicy(const ::org::apache::lucene::index::MergePolicy & a0) : ::org::apache::lucene::index::MergePolicy(env->newObject(initializeClass, &mids$, mid_init$_6034dd24, a0.this$)) {}

        void UpgradeIndexMergePolicy::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification UpgradeIndexMergePolicy::findForcedDeletesMerges(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::IndexWriter & a1) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedDeletesMerges_581dbc49], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification UpgradeIndexMergePolicy::findForcedMerges(const ::org::apache::lucene::index::SegmentInfos & a0, jint a1, const ::java::util::Map & a2, const ::org::apache::lucene::index::IndexWriter & a3) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedMerges_4fe4a5b5], a0.this$, a1, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification UpgradeIndexMergePolicy::findMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findMerges_cada0df0], a0.this$, a1.this$, a2.this$));
        }

        ::java::lang::String UpgradeIndexMergePolicy::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jboolean UpgradeIndexMergePolicy::useCompoundFile(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::SegmentCommitInfo & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return env->callBooleanMethod(this$, mids$[mid_useCompoundFile_70dc8488], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_UpgradeIndexMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_UpgradeIndexMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_UpgradeIndexMergePolicy_init_(t_UpgradeIndexMergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_UpgradeIndexMergePolicy_close(t_UpgradeIndexMergePolicy *self, PyObject *args);
        static PyObject *t_UpgradeIndexMergePolicy_findForcedDeletesMerges(t_UpgradeIndexMergePolicy *self, PyObject *args);
        static PyObject *t_UpgradeIndexMergePolicy_findForcedMerges(t_UpgradeIndexMergePolicy *self, PyObject *args);
        static PyObject *t_UpgradeIndexMergePolicy_findMerges(t_UpgradeIndexMergePolicy *self, PyObject *args);
        static PyObject *t_UpgradeIndexMergePolicy_toString(t_UpgradeIndexMergePolicy *self, PyObject *args);
        static PyObject *t_UpgradeIndexMergePolicy_useCompoundFile(t_UpgradeIndexMergePolicy *self, PyObject *args);

        static PyMethodDef t_UpgradeIndexMergePolicy__methods_[] = {
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, close, METH_VARARGS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, findForcedDeletesMerges, METH_VARARGS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, findForcedMerges, METH_VARARGS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, findMerges, METH_VARARGS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, toString, METH_VARARGS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, useCompoundFile, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(UpgradeIndexMergePolicy, t_UpgradeIndexMergePolicy, ::org::apache::lucene::index::MergePolicy, UpgradeIndexMergePolicy, t_UpgradeIndexMergePolicy_init_, 0, 0, 0, 0, 0);

        void t_UpgradeIndexMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(UpgradeIndexMergePolicy), module, "UpgradeIndexMergePolicy", 0);
        }

        void t_UpgradeIndexMergePolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(UpgradeIndexMergePolicy).tp_dict, "class_", make_descriptor(UpgradeIndexMergePolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(UpgradeIndexMergePolicy).tp_dict, "wrapfn_", make_descriptor(t_UpgradeIndexMergePolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(UpgradeIndexMergePolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_UpgradeIndexMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, UpgradeIndexMergePolicy::initializeClass, 1)))
            return NULL;
          return t_UpgradeIndexMergePolicy::wrap_Object(UpgradeIndexMergePolicy(((t_UpgradeIndexMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_UpgradeIndexMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, UpgradeIndexMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_UpgradeIndexMergePolicy_init_(t_UpgradeIndexMergePolicy *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::MergePolicy a0((jobject) NULL);
          UpgradeIndexMergePolicy object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::MergePolicy::initializeClass, &a0))
          {
            INT_CALL(object = UpgradeIndexMergePolicy(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_UpgradeIndexMergePolicy_close(t_UpgradeIndexMergePolicy *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(UpgradeIndexMergePolicy), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_UpgradeIndexMergePolicy_findForcedDeletesMerges(t_UpgradeIndexMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.findForcedDeletesMerges(a0, a1));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(UpgradeIndexMergePolicy), (PyObject *) self, "findForcedDeletesMerges", args, 2);
        }

        static PyObject *t_UpgradeIndexMergePolicy_findForcedMerges(t_UpgradeIndexMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          jint a1;
          ::java::util::Map a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::IndexWriter a3((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kIKk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3))
          {
            OBJ_CALL(result = self->object.findForcedMerges(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(UpgradeIndexMergePolicy), (PyObject *) self, "findForcedMerges", args, 2);
        }

        static PyObject *t_UpgradeIndexMergePolicy_findMerges(t_UpgradeIndexMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(UpgradeIndexMergePolicy), (PyObject *) self, "findMerges", args, 2);
        }

        static PyObject *t_UpgradeIndexMergePolicy_toString(t_UpgradeIndexMergePolicy *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(UpgradeIndexMergePolicy), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_UpgradeIndexMergePolicy_useCompoundFile(t_UpgradeIndexMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentCommitInfo a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "kkk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.useCompoundFile(a0, a1, a2));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(UpgradeIndexMergePolicy), (PyObject *) self, "useCompoundFile", args, 2);
        }
      }
    }
  }
}
