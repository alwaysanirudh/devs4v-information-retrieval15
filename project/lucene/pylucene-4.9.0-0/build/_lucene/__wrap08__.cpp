#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/queries/function/ValueSourceScorer.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *DocTermsIndexDocValues::class$ = NULL;
            jmethodID *DocTermsIndexDocValues::mids$ = NULL;
            bool DocTermsIndexDocValues::live$ = false;

            jclass DocTermsIndexDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_96c8ee4d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/index/AtomicReaderContext;Ljava/lang/String;)V");
                mids$[mid_boolVal_39c7bd30] = env->getMethodID(cls, "boolVal", "(I)Z");
                mids$[mid_bytesVal_b7fef192] = env->getMethodID(cls, "bytesVal", "(ILorg/apache/lucene/util/BytesRef;)Z");
                mids$[mid_exists_39c7bd30] = env->getMethodID(cls, "exists", "(I)Z");
                mids$[mid_getRangeScorer_d201bc96] = env->getMethodID(cls, "getRangeScorer", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/queries/function/ValueSourceScorer;");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_numOrd_54c6a179] = env->getMethodID(cls, "numOrd", "()I");
                mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_ordVal_39c7bd23] = env->getMethodID(cls, "ordVal", "(I)I");
                mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");
                mids$[mid_toTerm_97a5258f] = env->getMethodID(cls, "toTerm", "(Ljava/lang/String;)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DocTermsIndexDocValues::DocTermsIndexDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1, const ::java::lang::String & a2) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_96c8ee4d, a0.this$, a1.this$, a2.this$)) {}

            jboolean DocTermsIndexDocValues::boolVal(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_boolVal_39c7bd30], a0);
            }

            jboolean DocTermsIndexDocValues::bytesVal(jint a0, const ::org::apache::lucene::util::BytesRef & a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_bytesVal_b7fef192], a0, a1.this$);
            }

            jboolean DocTermsIndexDocValues::exists(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_exists_39c7bd30], a0);
            }

            ::org::apache::lucene::queries::function::ValueSourceScorer DocTermsIndexDocValues::getRangeScorer(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) const
            {
              return ::org::apache::lucene::queries::function::ValueSourceScorer(env->callObjectMethod(this$, mids$[mid_getRangeScorer_d201bc96], a0.this$, a1.this$, a2.this$, a3, a4));
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller DocTermsIndexDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            jint DocTermsIndexDocValues::numOrd() const
            {
              return env->callIntMethod(this$, mids$[mid_numOrd_54c6a179]);
            }

            ::java::lang::Object DocTermsIndexDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
            }

            jint DocTermsIndexDocValues::ordVal(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_ordVal_39c7bd23], a0);
            }

            ::java::lang::String DocTermsIndexDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
            }

            ::java::lang::String DocTermsIndexDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues$DocTermsIndexException.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_DocTermsIndexDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DocTermsIndexDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DocTermsIndexDocValues_init_(t_DocTermsIndexDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DocTermsIndexDocValues_boolVal(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_bytesVal(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_exists(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_getRangeScorer(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_getValueFiller(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_numOrd(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_objectVal(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_ordVal(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_strVal(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_toString(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_get__valueFiller(t_DocTermsIndexDocValues *self, void *data);
            static PyGetSetDef t_DocTermsIndexDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_DocTermsIndexDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DocTermsIndexDocValues__methods_[] = {
              DECLARE_METHOD(t_DocTermsIndexDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, boolVal, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, bytesVal, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, exists, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, getRangeScorer, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, numOrd, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, ordVal, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DocTermsIndexDocValues, t_DocTermsIndexDocValues, ::org::apache::lucene::queries::function::FunctionValues, DocTermsIndexDocValues, t_DocTermsIndexDocValues_init_, 0, 0, t_DocTermsIndexDocValues__fields_, 0, 0);

            void t_DocTermsIndexDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(DocTermsIndexDocValues), module, "DocTermsIndexDocValues", 0);
              PyDict_SetItemString(PY_TYPE(DocTermsIndexDocValues).tp_dict, "DocTermsIndexException", make_descriptor(&PY_TYPE(DocTermsIndexDocValues$DocTermsIndexException)));
            }

            void t_DocTermsIndexDocValues::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DocTermsIndexDocValues).tp_dict, "class_", make_descriptor(DocTermsIndexDocValues::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DocTermsIndexDocValues).tp_dict, "wrapfn_", make_descriptor(t_DocTermsIndexDocValues::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DocTermsIndexDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DocTermsIndexDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DocTermsIndexDocValues::initializeClass, 1)))
                return NULL;
              return t_DocTermsIndexDocValues::wrap_Object(DocTermsIndexDocValues(((t_DocTermsIndexDocValues *) arg)->object.this$));
            }
            static PyObject *t_DocTermsIndexDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DocTermsIndexDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DocTermsIndexDocValues_init_(t_DocTermsIndexDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              DocTermsIndexDocValues object((jobject) NULL);

              if (!parseArgs(args, "kks", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = DocTermsIndexDocValues(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DocTermsIndexDocValues_boolVal(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.boolVal(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "boolVal", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_bytesVal(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "Ik", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.bytesVal(a0, a1));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "bytesVal", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_exists(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.exists(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "exists", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_getRangeScorer(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              ::org::apache::lucene::queries::function::ValueSourceScorer result((jobject) NULL);

              if (!parseArgs(args, "kssZZ", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = self->object.getRangeScorer(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::queries::function::t_ValueSourceScorer::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "getRangeScorer", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_getValueFiller(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_numOrd(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.numOrd());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "numOrd", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_objectVal(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_ordVal(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.ordVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "ordVal", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_strVal(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_toString(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_get__valueFiller(t_DocTermsIndexDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/Comparable.h"
#include "java/util/Comparator.h"
#include "java/lang/Cloneable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *CharsRef::class$ = NULL;
        jmethodID *CharsRef::mids$ = NULL;
        jfieldID *CharsRef::fids$ = NULL;
        bool CharsRef::live$ = false;
        JArray< jchar > *CharsRef::EMPTY_CHARS = NULL;

        jclass CharsRef::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/CharsRef");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_6f0bb356] = env->getMethodID(cls, "<init>", "([CII)V");
            mids$[mid_append_6f0bb356] = env->getMethodID(cls, "append", "([CII)V");
            mids$[mid_charAt_39c7bd29] = env->getMethodID(cls, "charAt", "(I)C");
            mids$[mid_charsEquals_ee7999ca] = env->getMethodID(cls, "charsEquals", "(Lorg/apache/lucene/util/CharsRef;)Z");
            mids$[mid_clone_399267bb] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/CharsRef;");
            mids$[mid_compareTo_ee7999d9] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/util/CharsRef;)I");
            mids$[mid_copyChars_ee7999c6] = env->getMethodID(cls, "copyChars", "(Lorg/apache/lucene/util/CharsRef;)V");
            mids$[mid_copyChars_6f0bb356] = env->getMethodID(cls, "copyChars", "([CII)V");
            mids$[mid_deepCopyOf_abd75df7] = env->getStaticMethodID(cls, "deepCopyOf", "(Lorg/apache/lucene/util/CharsRef;)Lorg/apache/lucene/util/CharsRef;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getUTF16SortedAsUTF8Comparator_5a7ff2fc] = env->getStaticMethodID(cls, "getUTF16SortedAsUTF8Comparator", "()Ljava/util/Comparator;");
            mids$[mid_grow_39c7bd3c] = env->getMethodID(cls, "grow", "(I)V");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isValid_54c6a16a] = env->getMethodID(cls, "isValid", "()Z");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
            mids$[mid_subSequence_f88dfd57] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_chars] = env->getFieldID(cls, "chars", "[C");
            fids$[fid_length] = env->getFieldID(cls, "length", "I");
            fids$[fid_offset] = env->getFieldID(cls, "offset", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_CHARS = new JArray< jchar >(env->getStaticObjectField(cls, "EMPTY_CHARS", "[C"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CharsRef::CharsRef() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        CharsRef::CharsRef(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        CharsRef::CharsRef(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        CharsRef::CharsRef(const JArray< jchar > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6f0bb356, a0.this$, a1, a2)) {}

        void CharsRef::append(const JArray< jchar > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_append_6f0bb356], a0.this$, a1, a2);
        }

        jchar CharsRef::charAt(jint a0) const
        {
          return env->callCharMethod(this$, mids$[mid_charAt_39c7bd29], a0);
        }

        jboolean CharsRef::charsEquals(const CharsRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_charsEquals_ee7999ca], a0.this$);
        }

        CharsRef CharsRef::clone() const
        {
          return CharsRef(env->callObjectMethod(this$, mids$[mid_clone_399267bb]));
        }

        jint CharsRef::compareTo(const CharsRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_ee7999d9], a0.this$);
        }

        void CharsRef::copyChars(const CharsRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyChars_ee7999c6], a0.this$);
        }

        void CharsRef::copyChars(const JArray< jchar > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_copyChars_6f0bb356], a0.this$, a1, a2);
        }

        CharsRef CharsRef::deepCopyOf(const CharsRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return CharsRef(env->callStaticObjectMethod(cls, mids$[mid_deepCopyOf_abd75df7], a0.this$));
        }

        jboolean CharsRef::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::util::Comparator CharsRef::getUTF16SortedAsUTF8Comparator()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_getUTF16SortedAsUTF8Comparator_5a7ff2fc]));
        }

        void CharsRef::grow(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_grow_39c7bd3c], a0);
        }

        jint CharsRef::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean CharsRef::isValid() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isValid_54c6a16a]);
        }

        jint CharsRef::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }

        ::java::lang::CharSequence CharsRef::subSequence(jint a0, jint a1) const
        {
          return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_f88dfd57], a0, a1));
        }

        ::java::lang::String CharsRef::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        JArray< jchar > CharsRef::_get_chars() const
        {
          return JArray< jchar >(env->getObjectField(this$, fids$[fid_chars]));
        }

        void CharsRef::_set_chars(const JArray< jchar > & a0) const
        {
          env->setObjectField(this$, fids$[fid_chars], a0.this$);
        }

        jint CharsRef::_get_length() const
        {
          return env->getIntField(this$, fids$[fid_length]);
        }

        void CharsRef::_set_length(jint a0) const
        {
          env->setIntField(this$, fids$[fid_length], a0);
        }

        jint CharsRef::_get_offset() const
        {
          return env->getIntField(this$, fids$[fid_offset]);
        }

        void CharsRef::_set_offset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_offset], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_CharsRef_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharsRef_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CharsRef_init_(t_CharsRef *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CharsRef_append(t_CharsRef *self, PyObject *args);
        static PyObject *t_CharsRef_charAt(t_CharsRef *self, PyObject *arg);
        static PyObject *t_CharsRef_charsEquals(t_CharsRef *self, PyObject *arg);
        static PyObject *t_CharsRef_clone(t_CharsRef *self);
        static PyObject *t_CharsRef_compareTo(t_CharsRef *self, PyObject *arg);
        static PyObject *t_CharsRef_copyChars(t_CharsRef *self, PyObject *args);
        static PyObject *t_CharsRef_deepCopyOf(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharsRef_equals(t_CharsRef *self, PyObject *args);
        static PyObject *t_CharsRef_getUTF16SortedAsUTF8Comparator(PyTypeObject *type);
        static PyObject *t_CharsRef_grow(t_CharsRef *self, PyObject *arg);
        static PyObject *t_CharsRef_hashCode(t_CharsRef *self, PyObject *args);
        static PyObject *t_CharsRef_isValid(t_CharsRef *self);
        static PyObject *t_CharsRef_length(t_CharsRef *self);
        static PyObject *t_CharsRef_subSequence(t_CharsRef *self, PyObject *args);
        static PyObject *t_CharsRef_toString(t_CharsRef *self, PyObject *args);
        static PyObject *t_CharsRef_get__chars(t_CharsRef *self, void *data);
        static int t_CharsRef_set__chars(t_CharsRef *self, PyObject *arg, void *data);
        static PyObject *t_CharsRef_get__length(t_CharsRef *self, void *data);
        static int t_CharsRef_set__length(t_CharsRef *self, PyObject *arg, void *data);
        static PyObject *t_CharsRef_get__offset(t_CharsRef *self, void *data);
        static int t_CharsRef_set__offset(t_CharsRef *self, PyObject *arg, void *data);

        static PyObject *t_CharsRef_get__uTF16SortedAsUTF8Comparator(t_CharsRef *self, void *data);
        static PyObject *t_CharsRef_get__valid(t_CharsRef *self, void *data);
        static PyGetSetDef t_CharsRef__fields_[] = {
          DECLARE_GETSET_FIELD(t_CharsRef, chars),
          DECLARE_GETSET_FIELD(t_CharsRef, length),
          DECLARE_GETSET_FIELD(t_CharsRef, offset),
          DECLARE_GET_FIELD(t_CharsRef, uTF16SortedAsUTF8Comparator),
          DECLARE_GET_FIELD(t_CharsRef, valid),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CharsRef__methods_[] = {
          DECLARE_METHOD(t_CharsRef, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharsRef, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharsRef, append, METH_VARARGS),
          DECLARE_METHOD(t_CharsRef, charAt, METH_O),
          DECLARE_METHOD(t_CharsRef, charsEquals, METH_O),
          DECLARE_METHOD(t_CharsRef, clone, METH_NOARGS),
          DECLARE_METHOD(t_CharsRef, compareTo, METH_O),
          DECLARE_METHOD(t_CharsRef, copyChars, METH_VARARGS),
          DECLARE_METHOD(t_CharsRef, deepCopyOf, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharsRef, equals, METH_VARARGS),
          DECLARE_METHOD(t_CharsRef, getUTF16SortedAsUTF8Comparator, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_CharsRef, grow, METH_O),
          DECLARE_METHOD(t_CharsRef, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_CharsRef, isValid, METH_NOARGS),
          DECLARE_METHOD(t_CharsRef, length, METH_NOARGS),
          DECLARE_METHOD(t_CharsRef, subSequence, METH_VARARGS),
          DECLARE_METHOD(t_CharsRef, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CharsRef, t_CharsRef, ::java::lang::Object, CharsRef, t_CharsRef_init_, 0, 0, t_CharsRef__fields_, 0, 0);

        void t_CharsRef::install(PyObject *module)
        {
          installType(&PY_TYPE(CharsRef), module, "CharsRef", 0);
        }

        void t_CharsRef::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CharsRef).tp_dict, "class_", make_descriptor(CharsRef::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CharsRef).tp_dict, "wrapfn_", make_descriptor(t_CharsRef::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CharsRef).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(CharsRef::initializeClass);
          PyDict_SetItemString(PY_TYPE(CharsRef).tp_dict, "EMPTY_CHARS", make_descriptor(CharsRef::EMPTY_CHARS->wrap()));
        }

        static PyObject *t_CharsRef_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CharsRef::initializeClass, 1)))
            return NULL;
          return t_CharsRef::wrap_Object(CharsRef(((t_CharsRef *) arg)->object.this$));
        }
        static PyObject *t_CharsRef_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CharsRef::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CharsRef_init_(t_CharsRef *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              CharsRef object((jobject) NULL);

              INT_CALL(object = CharsRef());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              CharsRef object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = CharsRef(a0));
                self->object = object;
                break;
              }
            }
            {
              jint a0;
              CharsRef object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = CharsRef(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              CharsRef object((jobject) NULL);

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                INT_CALL(object = CharsRef(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CharsRef_append(t_CharsRef *self, PyObject *args)
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.append(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "append", args);
          return NULL;
        }

        static PyObject *t_CharsRef_charAt(t_CharsRef *self, PyObject *arg)
        {
          jint a0;
          jchar result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.charAt(a0));
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          PyErr_SetArgsError((PyObject *) self, "charAt", arg);
          return NULL;
        }

        static PyObject *t_CharsRef_charsEquals(t_CharsRef *self, PyObject *arg)
        {
          CharsRef a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", CharsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.charsEquals(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "charsEquals", arg);
          return NULL;
        }

        static PyObject *t_CharsRef_clone(t_CharsRef *self)
        {
          CharsRef result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_CharsRef::wrap_Object(result);
        }

        static PyObject *t_CharsRef_compareTo(t_CharsRef *self, PyObject *arg)
        {
          CharsRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", CharsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_CharsRef_copyChars(t_CharsRef *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              CharsRef a0((jobject) NULL);

              if (!parseArgs(args, "k", CharsRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.copyChars(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.copyChars(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "copyChars", args);
          return NULL;
        }

        static PyObject *t_CharsRef_deepCopyOf(PyTypeObject *type, PyObject *arg)
        {
          CharsRef a0((jobject) NULL);
          CharsRef result((jobject) NULL);

          if (!parseArg(arg, "k", CharsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::CharsRef::deepCopyOf(a0));
            return t_CharsRef::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "deepCopyOf", arg);
          return NULL;
        }

        static PyObject *t_CharsRef_equals(t_CharsRef *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CharsRef), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_CharsRef_getUTF16SortedAsUTF8Comparator(PyTypeObject *type)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::CharsRef::getUTF16SortedAsUTF8Comparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(CharsRef));
        }

        static PyObject *t_CharsRef_grow(t_CharsRef *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.grow(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "grow", arg);
          return NULL;
        }

        static PyObject *t_CharsRef_hashCode(t_CharsRef *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(CharsRef), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_CharsRef_isValid(t_CharsRef *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isValid());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_CharsRef_length(t_CharsRef *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_CharsRef_subSequence(t_CharsRef *self, PyObject *args)
        {
          jint a0;
          jint a1;
          ::java::lang::CharSequence result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.subSequence(a0, a1));
            return ::java::lang::t_CharSequence::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "subSequence", args);
          return NULL;
        }

        static PyObject *t_CharsRef_toString(t_CharsRef *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(CharsRef), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CharsRef_get__chars(t_CharsRef *self, void *data)
        {
          JArray< jchar > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_chars());
          return value.wrap();
        }
        static int t_CharsRef_set__chars(t_CharsRef *self, PyObject *arg, void *data)
        {
          JArray< jchar > value((jobject) NULL);
          if (!parseArg(arg, "[C", &value))
          {
            INT_CALL(self->object._set_chars(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "chars", arg);
          return -1;
        }

        static PyObject *t_CharsRef_get__length(t_CharsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_length());
          return PyInt_FromLong((long) value);
        }
        static int t_CharsRef_set__length(t_CharsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_length(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "length", arg);
          return -1;
        }

        static PyObject *t_CharsRef_get__offset(t_CharsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_offset());
          return PyInt_FromLong((long) value);
        }
        static int t_CharsRef_set__offset(t_CharsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_offset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "offset", arg);
          return -1;
        }

        static PyObject *t_CharsRef_get__uTF16SortedAsUTF8Comparator(t_CharsRef *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getUTF16SortedAsUTF8Comparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_CharsRef_get__valid(t_CharsRef *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isValid());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/index/MergeState.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40TermVectorsWriter::class$ = NULL;
          jmethodID *Lucene40TermVectorsWriter::mids$ = NULL;
          bool Lucene40TermVectorsWriter::live$ = false;

          jclass Lucene40TermVectorsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1962ccd4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
              mids$[mid_abort_54c6a166] = env->getMethodID(cls, "abort", "()V");
              mids$[mid_addPosition_ffd34a92] = env->getMethodID(cls, "addPosition", "(IIILorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_addProx_395d0aa2] = env->getMethodID(cls, "addProx", "(ILorg/apache/lucene/store/DataInput;Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_finish_48f050c2] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
              mids$[mid_finishDocument_54c6a166] = env->getMethodID(cls, "finishDocument", "()V");
              mids$[mid_finishTerm_54c6a166] = env->getMethodID(cls, "finishTerm", "()V");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_merge_fd0cfdeb] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)I");
              mids$[mid_startDocument_39c7bd3c] = env->getMethodID(cls, "startDocument", "(I)V");
              mids$[mid_startField_07c4def5] = env->getMethodID(cls, "startField", "(Lorg/apache/lucene/index/FieldInfo;IZZZ)V");
              mids$[mid_startTerm_738fc2ce] = env->getMethodID(cls, "startTerm", "(Lorg/apache/lucene/util/BytesRef;I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40TermVectorsWriter::Lucene40TermVectorsWriter(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) : ::org::apache::lucene::codecs::TermVectorsWriter(env->newObject(initializeClass, &mids$, mid_init$_1962ccd4, a0.this$, a1.this$, a2.this$)) {}

          void Lucene40TermVectorsWriter::abort() const
          {
            env->callVoidMethod(this$, mids$[mid_abort_54c6a166]);
          }

          void Lucene40TermVectorsWriter::addPosition(jint a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addPosition_ffd34a92], a0, a1, a2, a3.this$);
          }

          void Lucene40TermVectorsWriter::addProx(jint a0, const ::org::apache::lucene::store::DataInput & a1, const ::org::apache::lucene::store::DataInput & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_addProx_395d0aa2], a0, a1.this$, a2.this$);
          }

          void Lucene40TermVectorsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void Lucene40TermVectorsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_finish_48f050c2], a0.this$, a1);
          }

          void Lucene40TermVectorsWriter::finishDocument() const
          {
            env->callVoidMethod(this$, mids$[mid_finishDocument_54c6a166]);
          }

          void Lucene40TermVectorsWriter::finishTerm() const
          {
            env->callVoidMethod(this$, mids$[mid_finishTerm_54c6a166]);
          }

          ::java::util::Comparator Lucene40TermVectorsWriter::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          jint Lucene40TermVectorsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_merge_fd0cfdeb], a0.this$);
          }

          void Lucene40TermVectorsWriter::startDocument(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_startDocument_39c7bd3c], a0);
          }

          void Lucene40TermVectorsWriter::startField(const ::org::apache::lucene::index::FieldInfo & a0, jint a1, jboolean a2, jboolean a3, jboolean a4) const
          {
            env->callVoidMethod(this$, mids$[mid_startField_07c4def5], a0.this$, a1, a2, a3, a4);
          }

          void Lucene40TermVectorsWriter::startTerm(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_startTerm_738fc2ce], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40TermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40TermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40TermVectorsWriter_init_(t_Lucene40TermVectorsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40TermVectorsWriter_abort(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_addPosition(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_addProx(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_close(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_finish(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_finishDocument(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_finishTerm(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_getComparator(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_merge(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_startDocument(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_startField(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_startTerm(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_get__comparator(t_Lucene40TermVectorsWriter *self, void *data);
          static PyGetSetDef t_Lucene40TermVectorsWriter__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene40TermVectorsWriter, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene40TermVectorsWriter__methods_[] = {
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, abort, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, addPosition, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, addProx, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, finish, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, finishDocument, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, finishTerm, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, getComparator, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, merge, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, startDocument, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, startField, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, startTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40TermVectorsWriter, t_Lucene40TermVectorsWriter, ::org::apache::lucene::codecs::TermVectorsWriter, Lucene40TermVectorsWriter, t_Lucene40TermVectorsWriter_init_, 0, 0, t_Lucene40TermVectorsWriter__fields_, 0, 0);

          void t_Lucene40TermVectorsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40TermVectorsWriter), module, "Lucene40TermVectorsWriter", 0);
          }

          void t_Lucene40TermVectorsWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsWriter).tp_dict, "class_", make_descriptor(Lucene40TermVectorsWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsWriter).tp_dict, "wrapfn_", make_descriptor(t_Lucene40TermVectorsWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40TermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40TermVectorsWriter::initializeClass, 1)))
              return NULL;
            return t_Lucene40TermVectorsWriter::wrap_Object(Lucene40TermVectorsWriter(((t_Lucene40TermVectorsWriter *) arg)->object.this$));
          }
          static PyObject *t_Lucene40TermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40TermVectorsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40TermVectorsWriter_init_(t_Lucene40TermVectorsWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            Lucene40TermVectorsWriter object((jobject) NULL);

            if (!parseArgs(args, "ksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = Lucene40TermVectorsWriter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene40TermVectorsWriter_abort(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.abort());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "abort", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_addPosition(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

            if (!parseArgs(args, "IIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.addPosition(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "addPosition", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_addProx(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::store::DataInput a1((jobject) NULL);
            ::org::apache::lucene::store::DataInput a2((jobject) NULL);

            if (!parseArgs(args, "Ikk", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.addProx(a0, a1, a2));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "addProx", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_close(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_finish(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.finish(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "finish", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_finishDocument(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishDocument());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "finishDocument", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_finishTerm(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishTerm());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "finishTerm", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_getComparator(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            ::java::util::Comparator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "getComparator", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_merge(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::MergeState a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.merge(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "merge", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_startDocument(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.startDocument(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "startDocument", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_startField(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            jint a1;
            jboolean a2;
            jboolean a3;
            jboolean a4;

            if (!parseArgs(args, "kIZZZ", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.startField(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "startField", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_startTerm(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.startTerm(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "startTerm", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_get__comparator(t_Lucene40TermVectorsWriter *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/IntAssociationFacetField.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *IntAssociationFacetField::class$ = NULL;
          jmethodID *IntAssociationFacetField::mids$ = NULL;
          bool IntAssociationFacetField::live$ = false;

          jclass IntAssociationFacetField::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/IntAssociationFacetField");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6b7c0b54] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_bytesRefToInt_7bc03ddb] = env->getStaticMethodID(cls, "bytesRefToInt", "(Lorg/apache/lucene/util/BytesRef;)I");
              mids$[mid_intToBytesRef_b57e9c3f] = env->getStaticMethodID(cls, "intToBytesRef", "(I)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IntAssociationFacetField::IntAssociationFacetField(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) : ::org::apache::lucene::facet::taxonomy::AssociationFacetField(env->newObject(initializeClass, &mids$, mid_init$_6b7c0b54, a0, a1.this$, a2.this$)) {}

          jint IntAssociationFacetField::bytesRefToInt(const ::org::apache::lucene::util::BytesRef & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_bytesRefToInt_7bc03ddb], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef IntAssociationFacetField::intToBytesRef(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_intToBytesRef_b57e9c3f], a0));
          }

          ::java::lang::String IntAssociationFacetField::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_IntAssociationFacetField_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntAssociationFacetField_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IntAssociationFacetField_init_(t_IntAssociationFacetField *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IntAssociationFacetField_bytesRefToInt(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntAssociationFacetField_intToBytesRef(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntAssociationFacetField_toString(t_IntAssociationFacetField *self, PyObject *args);

          static PyMethodDef t_IntAssociationFacetField__methods_[] = {
            DECLARE_METHOD(t_IntAssociationFacetField, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntAssociationFacetField, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntAssociationFacetField, bytesRefToInt, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntAssociationFacetField, intToBytesRef, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntAssociationFacetField, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IntAssociationFacetField, t_IntAssociationFacetField, ::org::apache::lucene::facet::taxonomy::AssociationFacetField, IntAssociationFacetField, t_IntAssociationFacetField_init_, 0, 0, 0, 0, 0);

          void t_IntAssociationFacetField::install(PyObject *module)
          {
            installType(&PY_TYPE(IntAssociationFacetField), module, "IntAssociationFacetField", 0);
          }

          void t_IntAssociationFacetField::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IntAssociationFacetField).tp_dict, "class_", make_descriptor(IntAssociationFacetField::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IntAssociationFacetField).tp_dict, "wrapfn_", make_descriptor(t_IntAssociationFacetField::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IntAssociationFacetField).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntAssociationFacetField_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntAssociationFacetField::initializeClass, 1)))
              return NULL;
            return t_IntAssociationFacetField::wrap_Object(IntAssociationFacetField(((t_IntAssociationFacetField *) arg)->object.this$));
          }
          static PyObject *t_IntAssociationFacetField_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntAssociationFacetField::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IntAssociationFacetField_init_(t_IntAssociationFacetField *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            IntAssociationFacetField object((jobject) NULL);

            if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
            {
              INT_CALL(object = IntAssociationFacetField(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IntAssociationFacetField_bytesRefToInt(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::IntAssociationFacetField::bytesRefToInt(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "bytesRefToInt", arg);
            return NULL;
          }

          static PyObject *t_IntAssociationFacetField_intToBytesRef(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::IntAssociationFacetField::intToBytesRef(a0));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "intToBytesRef", arg);
            return NULL;
          }

          static PyObject *t_IntAssociationFacetField_toString(t_IntAssociationFacetField *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(IntAssociationFacetField), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$FloatComparator.h"
#include "java/lang/Class.h"
#include "java/lang/Float.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$FloatComparator::class$ = NULL;
        jmethodID *FieldComparator$FloatComparator::mids$ = NULL;
        bool FieldComparator$FloatComparator::live$ = false;

        jclass FieldComparator$FloatComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$FloatComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d3177756] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Lorg/apache/lucene/search/FieldCache$Parser;Ljava/lang/Float;)V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_6b30eb6a] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Float;)V");
            mids$[mid_value_c4acb5a1] = env->getMethodID(cls, "value", "(I)Ljava/lang/Float;");
            mids$[mid_getFloatValues_e61237ca] = env->getMethodID(cls, "getFloatValues", "(Lorg/apache/lucene/index/AtomicReaderContext;Ljava/lang/String;)Lorg/apache/lucene/search/FieldCache$Floats;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator$FloatComparator::FieldComparator$FloatComparator(jint a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$Parser & a2, const ::java::lang::Float & a3) : ::org::apache::lucene::search::FieldComparator$NumericComparator(env->newObject(initializeClass, &mids$, mid_init$_d3177756, a0, a1.this$, a2.this$, a3.this$)) {}

        jint FieldComparator$FloatComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$FloatComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$FloatComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        void FieldComparator$FloatComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$FloatComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$FloatComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$FloatComparator::setTopValue(const ::java::lang::Float & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_6b30eb6a], a0.this$);
        }

        ::java::lang::Float FieldComparator$FloatComparator::value(jint a0) const
        {
          return ::java::lang::Float(env->callObjectMethod(this$, mids$[mid_value_c4acb5a1], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$FloatComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$FloatComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$FloatComparator_of_(t_FieldComparator$FloatComparator *self, PyObject *args);
        static int t_FieldComparator$FloatComparator_init_(t_FieldComparator$FloatComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator$FloatComparator_compare(t_FieldComparator$FloatComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$FloatComparator_compareBottom(t_FieldComparator$FloatComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$FloatComparator_compareTop(t_FieldComparator$FloatComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$FloatComparator_copy(t_FieldComparator$FloatComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$FloatComparator_setBottom(t_FieldComparator$FloatComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$FloatComparator_setNextReader(t_FieldComparator$FloatComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$FloatComparator_setTopValue(t_FieldComparator$FloatComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$FloatComparator_value(t_FieldComparator$FloatComparator *self, PyObject *args);
        static int t_FieldComparator$FloatComparator_set__bottom(t_FieldComparator$FloatComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$FloatComparator_set__nextReader(t_FieldComparator$FloatComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$FloatComparator_set__topValue(t_FieldComparator$FloatComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$FloatComparator_get__parameters_(t_FieldComparator$FloatComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$FloatComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$FloatComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$FloatComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$FloatComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$FloatComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$FloatComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$FloatComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$FloatComparator, t_FieldComparator$FloatComparator, ::org::apache::lucene::search::FieldComparator$NumericComparator, FieldComparator$FloatComparator, t_FieldComparator$FloatComparator_init_, 0, 0, t_FieldComparator$FloatComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$FloatComparator::wrap_Object(const FieldComparator$FloatComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$FloatComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$FloatComparator *self = (t_FieldComparator$FloatComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$FloatComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$FloatComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$FloatComparator *self = (t_FieldComparator$FloatComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$FloatComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$FloatComparator), module, "FieldComparator$FloatComparator", 0);
        }

        void t_FieldComparator$FloatComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$FloatComparator).tp_dict, "class_", make_descriptor(FieldComparator$FloatComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$FloatComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$FloatComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$FloatComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$FloatComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$FloatComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$FloatComparator::wrap_Object(FieldComparator$FloatComparator(((t_FieldComparator$FloatComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$FloatComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$FloatComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$FloatComparator_of_(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator$FloatComparator_init_(t_FieldComparator$FloatComparator *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::search::FieldCache$Parser a2((jobject) NULL);
          ::java::lang::Float a3((jobject) NULL);
          FieldComparator$FloatComparator object((jobject) NULL);

          if (!parseArgs(args, "IskO", ::org::apache::lucene::search::FieldCache$Parser::initializeClass, &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = FieldComparator$FloatComparator(a0, a1, a2, a3));
            self->object = object;
            self->parameters[0] = &::java::lang::PY_TYPE(Float);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldComparator$FloatComparator_compare(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$FloatComparator_compareBottom(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$FloatComparator_compareTop(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$FloatComparator_copy(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$FloatComparator_setBottom(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$FloatComparator_setNextReader(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Float));
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$FloatComparator_setTopValue(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          ::java::lang::Float a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Float), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$FloatComparator_value(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Float result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Float::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$FloatComparator_get__parameters_(t_FieldComparator$FloatComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$FloatComparator_set__bottom(t_FieldComparator$FloatComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$FloatComparator_set__nextReader(t_FieldComparator$FloatComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$FloatComparator_set__topValue(t_FieldComparator$FloatComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Float value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Float), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKTokenizer::class$ = NULL;
          jmethodID *CJKTokenizer::mids$ = NULL;
          bool CJKTokenizer::live$ = false;

          jclass CJKTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_5877b8f0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKTokenizer::CJKTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          CJKTokenizer::CJKTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_5877b8f0, a0.this$, a1.this$)) {}

          void CJKTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean CJKTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void CJKTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKTokenizer_init_(t_CJKTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKTokenizer_end(t_CJKTokenizer *self, PyObject *args);
          static PyObject *t_CJKTokenizer_incrementToken(t_CJKTokenizer *self, PyObject *args);
          static PyObject *t_CJKTokenizer_reset(t_CJKTokenizer *self, PyObject *args);

          static PyMethodDef t_CJKTokenizer__methods_[] = {
            DECLARE_METHOD(t_CJKTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_CJKTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_CJKTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CJKTokenizer, t_CJKTokenizer, ::org::apache::lucene::analysis::Tokenizer, CJKTokenizer, t_CJKTokenizer_init_, 0, 0, 0, 0, 0);

          void t_CJKTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKTokenizer), module, "CJKTokenizer", 0);
          }

          void t_CJKTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CJKTokenizer).tp_dict, "class_", make_descriptor(CJKTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CJKTokenizer).tp_dict, "wrapfn_", make_descriptor(t_CJKTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CJKTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CJKTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKTokenizer::initializeClass, 1)))
              return NULL;
            return t_CJKTokenizer::wrap_Object(CJKTokenizer(((t_CJKTokenizer *) arg)->object.this$));
          }
          static PyObject *t_CJKTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKTokenizer_init_(t_CJKTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                CJKTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = CJKTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                CJKTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CJKTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKTokenizer_end(t_CJKTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CJKTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_CJKTokenizer_incrementToken(t_CJKTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CJKTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_CJKTokenizer_reset(t_CJKTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CJKTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/SyntaxParser.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeParseException.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {

              ::java::lang::Class *SyntaxParser::class$ = NULL;
              jmethodID *SyntaxParser::mids$ = NULL;
              bool SyntaxParser::live$ = false;

              jclass SyntaxParser::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/parser/SyntaxParser");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_parse_051054be] = env->getMethodID(cls, "parse", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode SyntaxParser::parse(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_parse_051054be], a0.this$, a1.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {
              static PyObject *t_SyntaxParser_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_SyntaxParser_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_SyntaxParser_parse(t_SyntaxParser *self, PyObject *args);

              static PyMethodDef t_SyntaxParser__methods_[] = {
                DECLARE_METHOD(t_SyntaxParser, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SyntaxParser, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SyntaxParser, parse, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(SyntaxParser, t_SyntaxParser, ::java::lang::Object, SyntaxParser, abstract_init, 0, 0, 0, 0, 0);

              void t_SyntaxParser::install(PyObject *module)
              {
                installType(&PY_TYPE(SyntaxParser), module, "SyntaxParser", 0);
              }

              void t_SyntaxParser::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(SyntaxParser).tp_dict, "class_", make_descriptor(SyntaxParser::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(SyntaxParser).tp_dict, "wrapfn_", make_descriptor(t_SyntaxParser::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(SyntaxParser).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_SyntaxParser_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, SyntaxParser::initializeClass, 1)))
                  return NULL;
                return t_SyntaxParser::wrap_Object(SyntaxParser(((t_SyntaxParser *) arg)->object.this$));
              }
              static PyObject *t_SyntaxParser_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, SyntaxParser::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_SyntaxParser_parse(t_SyntaxParser *self, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                {
                  OBJ_CALL(result = self->object.parse(a0, a1));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "parse", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardFilter::class$ = NULL;
          jmethodID *StandardFilter::mids$ = NULL;
          bool StandardFilter::live$ = false;

          jclass StandardFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_incrementTokenClassic_54c6a16a] = env->getMethodID(cls, "incrementTokenClassic", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StandardFilter::StandardFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          jboolean StandardFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          jboolean StandardFilter::incrementTokenClassic() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementTokenClassic_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StandardFilter_init_(t_StandardFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StandardFilter_incrementToken(t_StandardFilter *self, PyObject *args);
          static PyObject *t_StandardFilter_incrementTokenClassic(t_StandardFilter *self);

          static PyMethodDef t_StandardFilter__methods_[] = {
            DECLARE_METHOD(t_StandardFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_StandardFilter, incrementTokenClassic, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StandardFilter, t_StandardFilter, ::org::apache::lucene::analysis::TokenFilter, StandardFilter, t_StandardFilter_init_, 0, 0, 0, 0, 0);

          void t_StandardFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardFilter), module, "StandardFilter", 0);
          }

          void t_StandardFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StandardFilter).tp_dict, "class_", make_descriptor(StandardFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StandardFilter).tp_dict, "wrapfn_", make_descriptor(t_StandardFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StandardFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StandardFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardFilter::initializeClass, 1)))
              return NULL;
            return t_StandardFilter::wrap_Object(StandardFilter(((t_StandardFilter *) arg)->object.this$));
          }
          static PyObject *t_StandardFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StandardFilter_init_(t_StandardFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            StandardFilter object((jobject) NULL);

            if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
            {
              INT_CALL(object = StandardFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StandardFilter_incrementToken(t_StandardFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(StandardFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_StandardFilter_incrementTokenClassic(t_StandardFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.incrementTokenClassic());
            Py_RETURN_BOOL(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OfflineSorter$ByteSequencesReader.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/File.h"
#include "java/io/DataInput.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OfflineSorter$ByteSequencesReader::class$ = NULL;
        jmethodID *OfflineSorter$ByteSequencesReader::mids$ = NULL;
        bool OfflineSorter$ByteSequencesReader::live$ = false;

        jclass OfflineSorter$ByteSequencesReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OfflineSorter$ByteSequencesReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
            mids$[mid_init$_e051d6a6] = env->getMethodID(cls, "<init>", "(Ljava/io/DataInput;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_read_dab10e7e] = env->getMethodID(cls, "read", "()[B");
            mids$[mid_read_7bc03dc8] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/util/BytesRef;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OfflineSorter$ByteSequencesReader::OfflineSorter$ByteSequencesReader(const ::java::io::File & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        OfflineSorter$ByteSequencesReader::OfflineSorter$ByteSequencesReader(const ::java::io::DataInput & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e051d6a6, a0.this$)) {}

        void OfflineSorter$ByteSequencesReader::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        JArray< jbyte > OfflineSorter$ByteSequencesReader::read() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_read_dab10e7e]));
        }

        jboolean OfflineSorter$ByteSequencesReader::read(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_read_7bc03dc8], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OfflineSorter$ByteSequencesReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter$ByteSequencesReader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OfflineSorter$ByteSequencesReader_init_(t_OfflineSorter$ByteSequencesReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OfflineSorter$ByteSequencesReader_close(t_OfflineSorter$ByteSequencesReader *self);
        static PyObject *t_OfflineSorter$ByteSequencesReader_read(t_OfflineSorter$ByteSequencesReader *self, PyObject *args);

        static PyMethodDef t_OfflineSorter$ByteSequencesReader__methods_[] = {
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesReader, close, METH_NOARGS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesReader, read, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OfflineSorter$ByteSequencesReader, t_OfflineSorter$ByteSequencesReader, ::java::lang::Object, OfflineSorter$ByteSequencesReader, t_OfflineSorter$ByteSequencesReader_init_, 0, 0, 0, 0, 0);

        void t_OfflineSorter$ByteSequencesReader::install(PyObject *module)
        {
          installType(&PY_TYPE(OfflineSorter$ByteSequencesReader), module, "OfflineSorter$ByteSequencesReader", 0);
        }

        void t_OfflineSorter$ByteSequencesReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OfflineSorter$ByteSequencesReader).tp_dict, "class_", make_descriptor(OfflineSorter$ByteSequencesReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$ByteSequencesReader).tp_dict, "wrapfn_", make_descriptor(t_OfflineSorter$ByteSequencesReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$ByteSequencesReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OfflineSorter$ByteSequencesReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OfflineSorter$ByteSequencesReader::initializeClass, 1)))
            return NULL;
          return t_OfflineSorter$ByteSequencesReader::wrap_Object(OfflineSorter$ByteSequencesReader(((t_OfflineSorter$ByteSequencesReader *) arg)->object.this$));
        }
        static PyObject *t_OfflineSorter$ByteSequencesReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OfflineSorter$ByteSequencesReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OfflineSorter$ByteSequencesReader_init_(t_OfflineSorter$ByteSequencesReader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::File a0((jobject) NULL);
              OfflineSorter$ByteSequencesReader object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = OfflineSorter$ByteSequencesReader(a0));
                self->object = object;
                break;
              }
            }
            {
              ::java::io::DataInput a0((jobject) NULL);
              OfflineSorter$ByteSequencesReader object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::DataInput::initializeClass, &a0))
              {
                INT_CALL(object = OfflineSorter$ByteSequencesReader(a0));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OfflineSorter$ByteSequencesReader_close(t_OfflineSorter$ByteSequencesReader *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_OfflineSorter$ByteSequencesReader_read(t_OfflineSorter$ByteSequencesReader *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              JArray< jbyte > result((jobject) NULL);
              OBJ_CALL(result = self->object.read());
              return result.wrap();
            }
            break;
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.read(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "read", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/CompressionTools.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *CompressionTools::class$ = NULL;
        jmethodID *CompressionTools::mids$ = NULL;
        bool CompressionTools::live$ = false;

        jclass CompressionTools::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/CompressionTools");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compress_1193226d] = env->getStaticMethodID(cls, "compress", "([B)[B");
            mids$[mid_compress_3d448975] = env->getStaticMethodID(cls, "compress", "([BII)[B");
            mids$[mid_compress_dad27ce1] = env->getStaticMethodID(cls, "compress", "([BIII)[B");
            mids$[mid_compressString_94a731a4] = env->getStaticMethodID(cls, "compressString", "(Ljava/lang/String;)[B");
            mids$[mid_compressString_7bb29782] = env->getStaticMethodID(cls, "compressString", "(Ljava/lang/String;I)[B");
            mids$[mid_decompress_1193226d] = env->getStaticMethodID(cls, "decompress", "([B)[B");
            mids$[mid_decompress_942a4f60] = env->getStaticMethodID(cls, "decompress", "(Lorg/apache/lucene/util/BytesRef;)[B");
            mids$[mid_decompress_3d448975] = env->getStaticMethodID(cls, "decompress", "([BII)[B");
            mids$[mid_decompressString_edfda73b] = env->getStaticMethodID(cls, "decompressString", "(Lorg/apache/lucene/util/BytesRef;)Ljava/lang/String;");
            mids$[mid_decompressString_0f6e0f86] = env->getStaticMethodID(cls, "decompressString", "([B)Ljava/lang/String;");
            mids$[mid_decompressString_f7ab0d9e] = env->getStaticMethodID(cls, "decompressString", "([BII)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        JArray< jbyte > CompressionTools::compress(const JArray< jbyte > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_compress_1193226d], a0.this$));
        }

        JArray< jbyte > CompressionTools::compress(const JArray< jbyte > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_compress_3d448975], a0.this$, a1, a2));
        }

        JArray< jbyte > CompressionTools::compress(const JArray< jbyte > & a0, jint a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_compress_dad27ce1], a0.this$, a1, a2, a3));
        }

        JArray< jbyte > CompressionTools::compressString(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_compressString_94a731a4], a0.this$));
        }

        JArray< jbyte > CompressionTools::compressString(const ::java::lang::String & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_compressString_7bb29782], a0.this$, a1));
        }

        JArray< jbyte > CompressionTools::decompress(const JArray< jbyte > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_decompress_1193226d], a0.this$));
        }

        JArray< jbyte > CompressionTools::decompress(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_decompress_942a4f60], a0.this$));
        }

        JArray< jbyte > CompressionTools::decompress(const JArray< jbyte > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_decompress_3d448975], a0.this$, a1, a2));
        }

        ::java::lang::String CompressionTools::decompressString(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_decompressString_edfda73b], a0.this$));
        }

        ::java::lang::String CompressionTools::decompressString(const JArray< jbyte > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_decompressString_0f6e0f86], a0.this$));
        }

        ::java::lang::String CompressionTools::decompressString(const JArray< jbyte > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_decompressString_f7ab0d9e], a0.this$, a1, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_CompressionTools_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompressionTools_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompressionTools_compress(PyTypeObject *type, PyObject *args);
        static PyObject *t_CompressionTools_compressString(PyTypeObject *type, PyObject *args);
        static PyObject *t_CompressionTools_decompress(PyTypeObject *type, PyObject *args);
        static PyObject *t_CompressionTools_decompressString(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_CompressionTools__methods_[] = {
          DECLARE_METHOD(t_CompressionTools, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompressionTools, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompressionTools, compress, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CompressionTools, compressString, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CompressionTools, decompress, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CompressionTools, decompressString, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CompressionTools, t_CompressionTools, ::java::lang::Object, CompressionTools, abstract_init, 0, 0, 0, 0, 0);

        void t_CompressionTools::install(PyObject *module)
        {
          installType(&PY_TYPE(CompressionTools), module, "CompressionTools", 0);
        }

        void t_CompressionTools::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CompressionTools).tp_dict, "class_", make_descriptor(CompressionTools::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CompressionTools).tp_dict, "wrapfn_", make_descriptor(t_CompressionTools::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CompressionTools).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CompressionTools_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CompressionTools::initializeClass, 1)))
            return NULL;
          return t_CompressionTools::wrap_Object(CompressionTools(((t_CompressionTools *) arg)->object.this$));
        }
        static PyObject *t_CompressionTools_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CompressionTools::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CompressionTools_compress(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::compress(a0));
                return result.wrap();
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::compress(a0, a1, a2));
                return result.wrap();
              }
            }
            break;
           case 4:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[BIII", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::compress(a0, a1, a2, a3));
                return result.wrap();
              }
            }
          }

          PyErr_SetArgsError(type, "compress", args);
          return NULL;
        }

        static PyObject *t_CompressionTools_compressString(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::compressString(a0));
                return result.wrap();
              }
            }
            break;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "sI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::compressString(a0, a1));
                return result.wrap();
              }
            }
          }

          PyErr_SetArgsError(type, "compressString", args);
          return NULL;
        }

        static PyObject *t_CompressionTools_decompress(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::decompress(a0));
                return result.wrap();
              }
            }
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::decompress(a0));
                return result.wrap();
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::decompress(a0, a1, a2));
                return result.wrap();
              }
            }
          }

          PyErr_SetArgsError(type, "decompress", args);
          return NULL;
        }

        static PyObject *t_CompressionTools_decompressString(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::decompressString(a0));
                return j2p(result);
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::decompressString(a0));
                return j2p(result);
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::decompressString(a0, a1, a2));
                return j2p(result);
              }
            }
          }

          PyErr_SetArgsError(type, "decompressString", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingTermVectorsReader::class$ = NULL;
          jmethodID *CompressingTermVectorsReader::mids$ = NULL;
          bool CompressingTermVectorsReader::live$ = false;

          jclass CompressingTermVectorsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingTermVectorsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_846e12dd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/String;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;)V");
              mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_clone_475a2624] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/TermVectorsReader;");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_get_ef1c9c73] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/index/Fields;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingTermVectorsReader::CompressingTermVectorsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::java::lang::String & a2, const ::org::apache::lucene::index::FieldInfos & a3, const ::org::apache::lucene::store::IOContext & a4, const ::java::lang::String & a5, const ::org::apache::lucene::codecs::compressing::CompressionMode & a6) : ::org::apache::lucene::codecs::TermVectorsReader(env->newObject(initializeClass, &mids$, mid_init$_846e12dd, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$)) {}

          void CompressingTermVectorsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
          }

          ::org::apache::lucene::codecs::TermVectorsReader CompressingTermVectorsReader::clone() const
          {
            return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_clone_475a2624]));
          }

          void CompressingTermVectorsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          ::org::apache::lucene::index::Fields CompressingTermVectorsReader::get(jint a0) const
          {
            return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_get_ef1c9c73], a0));
          }

          jlong CompressingTermVectorsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingTermVectorsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingTermVectorsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompressingTermVectorsReader_init_(t_CompressingTermVectorsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompressingTermVectorsReader_checkIntegrity(t_CompressingTermVectorsReader *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsReader_clone(t_CompressingTermVectorsReader *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsReader_close(t_CompressingTermVectorsReader *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsReader_get(t_CompressingTermVectorsReader *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsReader_ramBytesUsed(t_CompressingTermVectorsReader *self, PyObject *args);

          static PyMethodDef t_CompressingTermVectorsReader__methods_[] = {
            DECLARE_METHOD(t_CompressingTermVectorsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, clone, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, get, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, ramBytesUsed, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingTermVectorsReader, t_CompressingTermVectorsReader, ::org::apache::lucene::codecs::TermVectorsReader, CompressingTermVectorsReader, t_CompressingTermVectorsReader_init_, 0, 0, 0, 0, 0);

          void t_CompressingTermVectorsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingTermVectorsReader), module, "CompressingTermVectorsReader", 0);
          }

          void t_CompressingTermVectorsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsReader).tp_dict, "class_", make_descriptor(CompressingTermVectorsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsReader).tp_dict, "wrapfn_", make_descriptor(t_CompressingTermVectorsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingTermVectorsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingTermVectorsReader::initializeClass, 1)))
              return NULL;
            return t_CompressingTermVectorsReader::wrap_Object(CompressingTermVectorsReader(((t_CompressingTermVectorsReader *) arg)->object.this$));
          }
          static PyObject *t_CompressingTermVectorsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingTermVectorsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompressingTermVectorsReader_init_(t_CompressingTermVectorsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a3((jobject) NULL);
            ::org::apache::lucene::store::IOContext a4((jobject) NULL);
            ::java::lang::String a5((jobject) NULL);
            ::org::apache::lucene::codecs::compressing::CompressionMode a6((jobject) NULL);
            CompressingTermVectorsReader object((jobject) NULL);

            if (!parseArgs(args, "kkskksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              INT_CALL(object = CompressingTermVectorsReader(a0, a1, a2, a3, a4, a5, a6));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompressingTermVectorsReader_checkIntegrity(t_CompressingTermVectorsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_CompressingTermVectorsReader_clone(t_CompressingTermVectorsReader *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsReader), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_CompressingTermVectorsReader_close(t_CompressingTermVectorsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_CompressingTermVectorsReader_get(t_CompressingTermVectorsReader *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::index::Fields result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsReader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_CompressingTermVectorsReader_ramBytesUsed(t_CompressingTermVectorsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianNormalizationFilterFactory.h"
#include "org/apache/lucene/analysis/fa/PersianNormalizationFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianNormalizationFilterFactory::class$ = NULL;
          jmethodID *PersianNormalizationFilterFactory::mids$ = NULL;
          bool PersianNormalizationFilterFactory::live$ = false;

          jclass PersianNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6e538871] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/fa/PersianNormalizationFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianNormalizationFilterFactory::PersianNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::fa::PersianNormalizationFilter PersianNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::fa::PersianNormalizationFilter(env->callObjectMethod(this$, mids$[mid_create_6e538871], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory PersianNormalizationFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianNormalizationFilterFactory_init_(t_PersianNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianNormalizationFilterFactory_create(t_PersianNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_PersianNormalizationFilterFactory_getMultiTermComponent(t_PersianNormalizationFilterFactory *self);
          static PyObject *t_PersianNormalizationFilterFactory_get__multiTermComponent(t_PersianNormalizationFilterFactory *self, void *data);
          static PyGetSetDef t_PersianNormalizationFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_PersianNormalizationFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PersianNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PersianNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_PersianNormalizationFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PersianNormalizationFilterFactory, t_PersianNormalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PersianNormalizationFilterFactory, t_PersianNormalizationFilterFactory_init_, 0, 0, t_PersianNormalizationFilterFactory__fields_, 0, 0);

          void t_PersianNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianNormalizationFilterFactory), module, "PersianNormalizationFilterFactory", 0);
          }

          void t_PersianNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PersianNormalizationFilterFactory).tp_dict, "class_", make_descriptor(PersianNormalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PersianNormalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PersianNormalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PersianNormalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PersianNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PersianNormalizationFilterFactory::wrap_Object(PersianNormalizationFilterFactory(((t_PersianNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PersianNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianNormalizationFilterFactory_init_(t_PersianNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PersianNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PersianNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PersianNormalizationFilterFactory_create(t_PersianNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::fa::PersianNormalizationFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::fa::t_PersianNormalizationFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PersianNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_PersianNormalizationFilterFactory_getMultiTermComponent(t_PersianNormalizationFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_PersianNormalizationFilterFactory_get__multiTermComponent(t_PersianNormalizationFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/WeightedFragListBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *WeightedFragListBuilder::class$ = NULL;
          jmethodID *WeightedFragListBuilder::mids$ = NULL;
          bool WeightedFragListBuilder::live$ = false;

          jclass WeightedFragListBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/WeightedFragListBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_createFieldFragList_f54fd6ce] = env->getMethodID(cls, "createFieldFragList", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;I)Lorg/apache/lucene/search/vectorhighlight/FieldFragList;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WeightedFragListBuilder::WeightedFragListBuilder() : ::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          WeightedFragListBuilder::WeightedFragListBuilder(jint a0) : ::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          ::org::apache::lucene::search::vectorhighlight::FieldFragList WeightedFragListBuilder::createFieldFragList(const ::org::apache::lucene::search::vectorhighlight::FieldPhraseList & a0, jint a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->callObjectMethod(this$, mids$[mid_createFieldFragList_f54fd6ce], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_WeightedFragListBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WeightedFragListBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WeightedFragListBuilder_init_(t_WeightedFragListBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WeightedFragListBuilder_createFieldFragList(t_WeightedFragListBuilder *self, PyObject *args);

          static PyMethodDef t_WeightedFragListBuilder__methods_[] = {
            DECLARE_METHOD(t_WeightedFragListBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedFragListBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedFragListBuilder, createFieldFragList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WeightedFragListBuilder, t_WeightedFragListBuilder, ::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder, WeightedFragListBuilder, t_WeightedFragListBuilder_init_, 0, 0, 0, 0, 0);

          void t_WeightedFragListBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(WeightedFragListBuilder), module, "WeightedFragListBuilder", 0);
          }

          void t_WeightedFragListBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WeightedFragListBuilder).tp_dict, "class_", make_descriptor(WeightedFragListBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WeightedFragListBuilder).tp_dict, "wrapfn_", make_descriptor(t_WeightedFragListBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WeightedFragListBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WeightedFragListBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WeightedFragListBuilder::initializeClass, 1)))
              return NULL;
            return t_WeightedFragListBuilder::wrap_Object(WeightedFragListBuilder(((t_WeightedFragListBuilder *) arg)->object.this$));
          }
          static PyObject *t_WeightedFragListBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WeightedFragListBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WeightedFragListBuilder_init_(t_WeightedFragListBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                WeightedFragListBuilder object((jobject) NULL);

                INT_CALL(object = WeightedFragListBuilder());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                WeightedFragListBuilder object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = WeightedFragListBuilder(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WeightedFragListBuilder_createFieldFragList(t_WeightedFragListBuilder *self, PyObject *args)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldPhraseList a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::vectorhighlight::FieldFragList result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::vectorhighlight::FieldPhraseList::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.createFieldFragList(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldFragList::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(WeightedFragListBuilder), (PyObject *) self, "createFieldFragList", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergeScheduler.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergeScheduler::class$ = NULL;
        jmethodID *MergeScheduler::mids$ = NULL;
        bool MergeScheduler::live$ = false;

        jclass MergeScheduler::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergeScheduler");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_merge_5fd7a9f9] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/IndexWriter;Lorg/apache/lucene/index/MergeTrigger;Z)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void MergeScheduler::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void MergeScheduler::merge(const ::org::apache::lucene::index::IndexWriter & a0, const ::org::apache::lucene::index::MergeTrigger & a1, jboolean a2) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_5fd7a9f9], a0.this$, a1.this$, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergeScheduler_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeScheduler_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeScheduler_close(t_MergeScheduler *self);
        static PyObject *t_MergeScheduler_merge(t_MergeScheduler *self, PyObject *args);

        static PyMethodDef t_MergeScheduler__methods_[] = {
          DECLARE_METHOD(t_MergeScheduler, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeScheduler, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeScheduler, close, METH_NOARGS),
          DECLARE_METHOD(t_MergeScheduler, merge, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergeScheduler, t_MergeScheduler, ::java::lang::Object, MergeScheduler, abstract_init, 0, 0, 0, 0, 0);

        void t_MergeScheduler::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeScheduler), module, "MergeScheduler", 0);
        }

        void t_MergeScheduler::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergeScheduler).tp_dict, "class_", make_descriptor(MergeScheduler::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergeScheduler).tp_dict, "wrapfn_", make_descriptor(t_MergeScheduler::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergeScheduler).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergeScheduler_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeScheduler::initializeClass, 1)))
            return NULL;
          return t_MergeScheduler::wrap_Object(MergeScheduler(((t_MergeScheduler *) arg)->object.this$));
        }
        static PyObject *t_MergeScheduler_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeScheduler::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergeScheduler_close(t_MergeScheduler *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_MergeScheduler_merge(t_MergeScheduler *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
          ::org::apache::lucene::index::MergeTrigger a1((jobject) NULL);
          PyTypeObject **p1;
          jboolean a2;

          if (!parseArgs(args, "kKZ", ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::index::MergeTrigger::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a2))
          {
            OBJ_CALL(self->object.merge(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "merge", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tr/ApostropheFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {

          ::java::lang::Class *ApostropheFilter::class$ = NULL;
          jmethodID *ApostropheFilter::mids$ = NULL;
          bool ApostropheFilter::live$ = false;

          jclass ApostropheFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tr/ApostropheFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ApostropheFilter::ApostropheFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ApostropheFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {
          static PyObject *t_ApostropheFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ApostropheFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ApostropheFilter_init_(t_ApostropheFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ApostropheFilter_incrementToken(t_ApostropheFilter *self, PyObject *args);

          static PyMethodDef t_ApostropheFilter__methods_[] = {
            DECLARE_METHOD(t_ApostropheFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ApostropheFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ApostropheFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ApostropheFilter, t_ApostropheFilter, ::org::apache::lucene::analysis::TokenFilter, ApostropheFilter, t_ApostropheFilter_init_, 0, 0, 0, 0, 0);

          void t_ApostropheFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ApostropheFilter), module, "ApostropheFilter", 0);
          }

          void t_ApostropheFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ApostropheFilter).tp_dict, "class_", make_descriptor(ApostropheFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ApostropheFilter).tp_dict, "wrapfn_", make_descriptor(t_ApostropheFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ApostropheFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ApostropheFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ApostropheFilter::initializeClass, 1)))
              return NULL;
            return t_ApostropheFilter::wrap_Object(ApostropheFilter(((t_ApostropheFilter *) arg)->object.this$));
          }
          static PyObject *t_ApostropheFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ApostropheFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ApostropheFilter_init_(t_ApostropheFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ApostropheFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ApostropheFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ApostropheFilter_incrementToken(t_ApostropheFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ApostropheFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/BytesRefSorter.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "java/lang/IllegalStateException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *BytesRefSorter::class$ = NULL;
            jmethodID *BytesRefSorter::mids$ = NULL;
            bool BytesRefSorter::live$ = false;

            jclass BytesRefSorter::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/BytesRefSorter");

                mids$ = new jmethodID[max_mid];
                mids$[mid_add_7bc03dc4] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
                mids$[mid_iterator_534dea83] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/util/BytesRefIterator;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void BytesRefSorter::add(const ::org::apache::lucene::util::BytesRef & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_add_7bc03dc4], a0.this$);
            }

            ::java::util::Comparator BytesRefSorter::getComparator() const
            {
              return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
            }

            ::org::apache::lucene::util::BytesRefIterator BytesRefSorter::iterator() const
            {
              return ::org::apache::lucene::util::BytesRefIterator(env->callObjectMethod(this$, mids$[mid_iterator_534dea83]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_BytesRefSorter_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BytesRefSorter_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BytesRefSorter_add(t_BytesRefSorter *self, PyObject *arg);
            static PyObject *t_BytesRefSorter_getComparator(t_BytesRefSorter *self);
            static PyObject *t_BytesRefSorter_iterator(t_BytesRefSorter *self);
            static PyObject *t_BytesRefSorter_get__comparator(t_BytesRefSorter *self, void *data);
            static PyGetSetDef t_BytesRefSorter__fields_[] = {
              DECLARE_GET_FIELD(t_BytesRefSorter, comparator),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_BytesRefSorter__methods_[] = {
              DECLARE_METHOD(t_BytesRefSorter, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BytesRefSorter, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BytesRefSorter, add, METH_O),
              DECLARE_METHOD(t_BytesRefSorter, getComparator, METH_NOARGS),
              DECLARE_METHOD(t_BytesRefSorter, iterator, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BytesRefSorter, t_BytesRefSorter, ::java::lang::Object, BytesRefSorter, abstract_init, 0, 0, t_BytesRefSorter__fields_, 0, 0);

            void t_BytesRefSorter::install(PyObject *module)
            {
              installType(&PY_TYPE(BytesRefSorter), module, "BytesRefSorter", 0);
            }

            void t_BytesRefSorter::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BytesRefSorter).tp_dict, "class_", make_descriptor(BytesRefSorter::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BytesRefSorter).tp_dict, "wrapfn_", make_descriptor(t_BytesRefSorter::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BytesRefSorter).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BytesRefSorter_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BytesRefSorter::initializeClass, 1)))
                return NULL;
              return t_BytesRefSorter::wrap_Object(BytesRefSorter(((t_BytesRefSorter *) arg)->object.this$));
            }
            static PyObject *t_BytesRefSorter_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BytesRefSorter::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_BytesRefSorter_add(t_BytesRefSorter *self, PyObject *arg)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "add", arg);
              return NULL;
            }

            static PyObject *t_BytesRefSorter_getComparator(t_BytesRefSorter *self)
            {
              ::java::util::Comparator result((jobject) NULL);
              OBJ_CALL(result = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            static PyObject *t_BytesRefSorter_iterator(t_BytesRefSorter *self)
            {
              ::org::apache::lucene::util::BytesRefIterator result((jobject) NULL);
              OBJ_CALL(result = self->object.iterator());
              return ::org::apache::lucene::util::t_BytesRefIterator::wrap_Object(result);
            }

            static PyObject *t_BytesRefSorter_get__comparator(t_BytesRefSorter *self, void *data)
            {
              ::java::util::Comparator value((jobject) NULL);
              OBJ_CALL(value = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntBlockPool$SliceWriter.h"
#include "org/apache/lucene/util/IntBlockPool.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntBlockPool$SliceWriter::class$ = NULL;
        jmethodID *IntBlockPool$SliceWriter::mids$ = NULL;
        bool IntBlockPool$SliceWriter::live$ = false;

        jclass IntBlockPool$SliceWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntBlockPool$SliceWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_67e0ad2c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/IntBlockPool;)V");
            mids$[mid_getCurrentOffset_54c6a179] = env->getMethodID(cls, "getCurrentOffset", "()I");
            mids$[mid_reset_39c7bd3c] = env->getMethodID(cls, "reset", "(I)V");
            mids$[mid_startNewSlice_54c6a179] = env->getMethodID(cls, "startNewSlice", "()I");
            mids$[mid_writeInt_39c7bd3c] = env->getMethodID(cls, "writeInt", "(I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntBlockPool$SliceWriter::IntBlockPool$SliceWriter(const ::org::apache::lucene::util::IntBlockPool & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_67e0ad2c, a0.this$)) {}

        jint IntBlockPool$SliceWriter::getCurrentOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_getCurrentOffset_54c6a179]);
        }

        void IntBlockPool$SliceWriter::reset(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_39c7bd3c], a0);
        }

        jint IntBlockPool$SliceWriter::startNewSlice() const
        {
          return env->callIntMethod(this$, mids$[mid_startNewSlice_54c6a179]);
        }

        void IntBlockPool$SliceWriter::writeInt(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeInt_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntBlockPool$SliceWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntBlockPool$SliceWriter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntBlockPool$SliceWriter_init_(t_IntBlockPool$SliceWriter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntBlockPool$SliceWriter_getCurrentOffset(t_IntBlockPool$SliceWriter *self);
        static PyObject *t_IntBlockPool$SliceWriter_reset(t_IntBlockPool$SliceWriter *self, PyObject *arg);
        static PyObject *t_IntBlockPool$SliceWriter_startNewSlice(t_IntBlockPool$SliceWriter *self);
        static PyObject *t_IntBlockPool$SliceWriter_writeInt(t_IntBlockPool$SliceWriter *self, PyObject *arg);
        static PyObject *t_IntBlockPool$SliceWriter_get__currentOffset(t_IntBlockPool$SliceWriter *self, void *data);
        static PyGetSetDef t_IntBlockPool$SliceWriter__fields_[] = {
          DECLARE_GET_FIELD(t_IntBlockPool$SliceWriter, currentOffset),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IntBlockPool$SliceWriter__methods_[] = {
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, getCurrentOffset, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, reset, METH_O),
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, startNewSlice, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, writeInt, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntBlockPool$SliceWriter, t_IntBlockPool$SliceWriter, ::java::lang::Object, IntBlockPool$SliceWriter, t_IntBlockPool$SliceWriter_init_, 0, 0, t_IntBlockPool$SliceWriter__fields_, 0, 0);

        void t_IntBlockPool$SliceWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(IntBlockPool$SliceWriter), module, "IntBlockPool$SliceWriter", 0);
        }

        void t_IntBlockPool$SliceWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntBlockPool$SliceWriter).tp_dict, "class_", make_descriptor(IntBlockPool$SliceWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$SliceWriter).tp_dict, "wrapfn_", make_descriptor(t_IntBlockPool$SliceWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$SliceWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntBlockPool$SliceWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntBlockPool$SliceWriter::initializeClass, 1)))
            return NULL;
          return t_IntBlockPool$SliceWriter::wrap_Object(IntBlockPool$SliceWriter(((t_IntBlockPool$SliceWriter *) arg)->object.this$));
        }
        static PyObject *t_IntBlockPool$SliceWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntBlockPool$SliceWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntBlockPool$SliceWriter_init_(t_IntBlockPool$SliceWriter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::IntBlockPool a0((jobject) NULL);
          IntBlockPool$SliceWriter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::IntBlockPool::initializeClass, &a0))
          {
            INT_CALL(object = IntBlockPool$SliceWriter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntBlockPool$SliceWriter_getCurrentOffset(t_IntBlockPool$SliceWriter *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getCurrentOffset());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IntBlockPool$SliceWriter_reset(t_IntBlockPool$SliceWriter *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.reset(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reset", arg);
          return NULL;
        }

        static PyObject *t_IntBlockPool$SliceWriter_startNewSlice(t_IntBlockPool$SliceWriter *self)
        {
          jint result;
          OBJ_CALL(result = self->object.startNewSlice());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IntBlockPool$SliceWriter_writeInt(t_IntBlockPool$SliceWriter *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.writeInt(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeInt", arg);
          return NULL;
        }

        static PyObject *t_IntBlockPool$SliceWriter_get__currentOffset(t_IntBlockPool$SliceWriter *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getCurrentOffset());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/StraightBytesDocValuesField.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *StraightBytesDocValuesField::class$ = NULL;
        jmethodID *StraightBytesDocValuesField::mids$ = NULL;
        bool StraightBytesDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *StraightBytesDocValuesField::TYPE_FIXED_LEN = NULL;
        ::org::apache::lucene::document::FieldType *StraightBytesDocValuesField::TYPE_VAR_LEN = NULL;

        jclass StraightBytesDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/StraightBytesDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_6c8dc377] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Z)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_FIXED_LEN = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_FIXED_LEN", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_VAR_LEN = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_VAR_LEN", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        StraightBytesDocValuesField::StraightBytesDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::BinaryDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}

        StraightBytesDocValuesField::StraightBytesDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, jboolean a2) : ::org::apache::lucene::document::BinaryDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_6c8dc377, a0.this$, a1.this$, a2)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_StraightBytesDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StraightBytesDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_StraightBytesDocValuesField_init_(t_StraightBytesDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_StraightBytesDocValuesField__methods_[] = {
          DECLARE_METHOD(t_StraightBytesDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StraightBytesDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StraightBytesDocValuesField, t_StraightBytesDocValuesField, ::org::apache::lucene::document::BinaryDocValuesField, StraightBytesDocValuesField, t_StraightBytesDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_StraightBytesDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(StraightBytesDocValuesField), module, "StraightBytesDocValuesField", 0);
        }

        void t_StraightBytesDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StraightBytesDocValuesField).tp_dict, "class_", make_descriptor(StraightBytesDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StraightBytesDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_StraightBytesDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StraightBytesDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(StraightBytesDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(StraightBytesDocValuesField).tp_dict, "TYPE_FIXED_LEN", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*StraightBytesDocValuesField::TYPE_FIXED_LEN)));
          PyDict_SetItemString(PY_TYPE(StraightBytesDocValuesField).tp_dict, "TYPE_VAR_LEN", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*StraightBytesDocValuesField::TYPE_VAR_LEN)));
        }

        static PyObject *t_StraightBytesDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StraightBytesDocValuesField::initializeClass, 1)))
            return NULL;
          return t_StraightBytesDocValuesField::wrap_Object(StraightBytesDocValuesField(((t_StraightBytesDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_StraightBytesDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StraightBytesDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_StraightBytesDocValuesField_init_(t_StraightBytesDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              StraightBytesDocValuesField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = StraightBytesDocValuesField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              jboolean a2;
              StraightBytesDocValuesField object((jobject) NULL);

              if (!parseArgs(args, "skZ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = StraightBytesDocValuesField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MaxNonCompetitiveBoostAttributeImpl.h"
#include "org/apache/lucene/search/MaxNonCompetitiveBoostAttribute.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MaxNonCompetitiveBoostAttributeImpl::class$ = NULL;
        jmethodID *MaxNonCompetitiveBoostAttributeImpl::mids$ = NULL;
        bool MaxNonCompetitiveBoostAttributeImpl::live$ = false;

        jclass MaxNonCompetitiveBoostAttributeImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MaxNonCompetitiveBoostAttributeImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_getCompetitiveTerm_4ae19461] = env->getMethodID(cls, "getCompetitiveTerm", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getMaxNonCompetitiveBoost_54c6a176] = env->getMethodID(cls, "getMaxNonCompetitiveBoost", "()F");
            mids$[mid_setCompetitiveTerm_7bc03dc4] = env->getMethodID(cls, "setCompetitiveTerm", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_setMaxNonCompetitiveBoost_06298cab] = env->getMethodID(cls, "setMaxNonCompetitiveBoost", "(F)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MaxNonCompetitiveBoostAttributeImpl::MaxNonCompetitiveBoostAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void MaxNonCompetitiveBoostAttributeImpl::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        void MaxNonCompetitiveBoostAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
        }

        ::org::apache::lucene::util::BytesRef MaxNonCompetitiveBoostAttributeImpl::getCompetitiveTerm() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getCompetitiveTerm_4ae19461]));
        }

        jfloat MaxNonCompetitiveBoostAttributeImpl::getMaxNonCompetitiveBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getMaxNonCompetitiveBoost_54c6a176]);
        }

        void MaxNonCompetitiveBoostAttributeImpl::setCompetitiveTerm(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCompetitiveTerm_7bc03dc4], a0.this$);
        }

        void MaxNonCompetitiveBoostAttributeImpl::setMaxNonCompetitiveBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxNonCompetitiveBoost_06298cab], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MaxNonCompetitiveBoostAttributeImpl_init_(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_clear(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_copyTo(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_getCompetitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_getMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_setCompetitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_setMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_get__competitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, void *data);
        static int t_MaxNonCompetitiveBoostAttributeImpl_set__competitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg, void *data);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_get__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, void *data);
        static int t_MaxNonCompetitiveBoostAttributeImpl_set__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg, void *data);
        static PyGetSetDef t_MaxNonCompetitiveBoostAttributeImpl__fields_[] = {
          DECLARE_GETSET_FIELD(t_MaxNonCompetitiveBoostAttributeImpl, competitiveTerm),
          DECLARE_GETSET_FIELD(t_MaxNonCompetitiveBoostAttributeImpl, maxNonCompetitiveBoost),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MaxNonCompetitiveBoostAttributeImpl__methods_[] = {
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, clear, METH_VARARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, copyTo, METH_VARARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, getCompetitiveTerm, METH_NOARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, getMaxNonCompetitiveBoost, METH_NOARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, setCompetitiveTerm, METH_O),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, setMaxNonCompetitiveBoost, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MaxNonCompetitiveBoostAttributeImpl, t_MaxNonCompetitiveBoostAttributeImpl, ::org::apache::lucene::util::AttributeImpl, MaxNonCompetitiveBoostAttributeImpl, t_MaxNonCompetitiveBoostAttributeImpl_init_, 0, 0, t_MaxNonCompetitiveBoostAttributeImpl__fields_, 0, 0);

        void t_MaxNonCompetitiveBoostAttributeImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(MaxNonCompetitiveBoostAttributeImpl), module, "MaxNonCompetitiveBoostAttributeImpl", 0);
        }

        void t_MaxNonCompetitiveBoostAttributeImpl::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MaxNonCompetitiveBoostAttributeImpl).tp_dict, "class_", make_descriptor(MaxNonCompetitiveBoostAttributeImpl::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MaxNonCompetitiveBoostAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_MaxNonCompetitiveBoostAttributeImpl::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MaxNonCompetitiveBoostAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MaxNonCompetitiveBoostAttributeImpl::initializeClass, 1)))
            return NULL;
          return t_MaxNonCompetitiveBoostAttributeImpl::wrap_Object(MaxNonCompetitiveBoostAttributeImpl(((t_MaxNonCompetitiveBoostAttributeImpl *) arg)->object.this$));
        }
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MaxNonCompetitiveBoostAttributeImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MaxNonCompetitiveBoostAttributeImpl_init_(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args, PyObject *kwds)
        {
          MaxNonCompetitiveBoostAttributeImpl object((jobject) NULL);

          INT_CALL(object = MaxNonCompetitiveBoostAttributeImpl());
          self->object = object;

          return 0;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_clear(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MaxNonCompetitiveBoostAttributeImpl), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_copyTo(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MaxNonCompetitiveBoostAttributeImpl), (PyObject *) self, "copyTo", args, 2);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_getCompetitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getCompetitiveTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_getMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getMaxNonCompetitiveBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_setCompetitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setCompetitiveTerm(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCompetitiveTerm", arg);
          return NULL;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_setMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setMaxNonCompetitiveBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxNonCompetitiveBoost", arg);
          return NULL;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_get__competitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getCompetitiveTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
        static int t_MaxNonCompetitiveBoostAttributeImpl_set__competitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setCompetitiveTerm(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "competitiveTerm", arg);
          return -1;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_get__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getMaxNonCompetitiveBoost());
          return PyFloat_FromDouble((double) value);
        }
        static int t_MaxNonCompetitiveBoostAttributeImpl_set__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setMaxNonCompetitiveBoost(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxNonCompetitiveBoost", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/TopOrdAndIntQueue$OrdAndValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *TopOrdAndIntQueue$OrdAndValue::class$ = NULL;
        jmethodID *TopOrdAndIntQueue$OrdAndValue::mids$ = NULL;
        jfieldID *TopOrdAndIntQueue$OrdAndValue::fids$ = NULL;
        bool TopOrdAndIntQueue$OrdAndValue::live$ = false;

        jclass TopOrdAndIntQueue$OrdAndValue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/TopOrdAndIntQueue$OrdAndValue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_ord] = env->getFieldID(cls, "ord", "I");
            fids$[fid_value] = env->getFieldID(cls, "value", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopOrdAndIntQueue$OrdAndValue::TopOrdAndIntQueue$OrdAndValue() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint TopOrdAndIntQueue$OrdAndValue::_get_ord() const
        {
          return env->getIntField(this$, fids$[fid_ord]);
        }

        void TopOrdAndIntQueue$OrdAndValue::_set_ord(jint a0) const
        {
          env->setIntField(this$, fids$[fid_ord], a0);
        }

        jint TopOrdAndIntQueue$OrdAndValue::_get_value() const
        {
          return env->getIntField(this$, fids$[fid_value]);
        }

        void TopOrdAndIntQueue$OrdAndValue::_set_value(jint a0) const
        {
          env->setIntField(this$, fids$[fid_value], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_of_(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *args);
        static int t_TopOrdAndIntQueue$OrdAndValue_init_(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__ord(t_TopOrdAndIntQueue$OrdAndValue *self, void *data);
        static int t_TopOrdAndIntQueue$OrdAndValue_set__ord(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *arg, void *data);
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__value(t_TopOrdAndIntQueue$OrdAndValue *self, void *data);
        static int t_TopOrdAndIntQueue$OrdAndValue_set__value(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *arg, void *data);

        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__parameters_(t_TopOrdAndIntQueue$OrdAndValue *self, void *data);
        static PyGetSetDef t_TopOrdAndIntQueue$OrdAndValue__fields_[] = {
          DECLARE_GETSET_FIELD(t_TopOrdAndIntQueue$OrdAndValue, ord),
          DECLARE_GETSET_FIELD(t_TopOrdAndIntQueue$OrdAndValue, value),
          DECLARE_GET_FIELD(t_TopOrdAndIntQueue$OrdAndValue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopOrdAndIntQueue$OrdAndValue__methods_[] = {
          DECLARE_METHOD(t_TopOrdAndIntQueue$OrdAndValue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndIntQueue$OrdAndValue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndIntQueue$OrdAndValue, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopOrdAndIntQueue$OrdAndValue, t_TopOrdAndIntQueue$OrdAndValue, ::java::lang::Object, TopOrdAndIntQueue$OrdAndValue, t_TopOrdAndIntQueue$OrdAndValue_init_, 0, 0, t_TopOrdAndIntQueue$OrdAndValue__fields_, 0, 0);
        PyObject *t_TopOrdAndIntQueue$OrdAndValue::wrap_Object(const TopOrdAndIntQueue$OrdAndValue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndIntQueue$OrdAndValue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndIntQueue$OrdAndValue *self = (t_TopOrdAndIntQueue$OrdAndValue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopOrdAndIntQueue$OrdAndValue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndIntQueue$OrdAndValue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndIntQueue$OrdAndValue *self = (t_TopOrdAndIntQueue$OrdAndValue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopOrdAndIntQueue$OrdAndValue::install(PyObject *module)
        {
          installType(&PY_TYPE(TopOrdAndIntQueue$OrdAndValue), module, "TopOrdAndIntQueue$OrdAndValue", 0);
        }

        void t_TopOrdAndIntQueue$OrdAndValue::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopOrdAndIntQueue$OrdAndValue).tp_dict, "class_", make_descriptor(TopOrdAndIntQueue$OrdAndValue::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopOrdAndIntQueue$OrdAndValue).tp_dict, "wrapfn_", make_descriptor(t_TopOrdAndIntQueue$OrdAndValue::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopOrdAndIntQueue$OrdAndValue).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopOrdAndIntQueue$OrdAndValue::initializeClass, 1)))
            return NULL;
          return t_TopOrdAndIntQueue$OrdAndValue::wrap_Object(TopOrdAndIntQueue$OrdAndValue(((t_TopOrdAndIntQueue$OrdAndValue *) arg)->object.this$));
        }
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopOrdAndIntQueue$OrdAndValue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_of_(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_TopOrdAndIntQueue$OrdAndValue_init_(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *args, PyObject *kwds)
        {
          TopOrdAndIntQueue$OrdAndValue object((jobject) NULL);

          INT_CALL(object = TopOrdAndIntQueue$OrdAndValue());
          self->object = object;
          self->parameters[0] = &::org::apache::lucene::facet::PY_TYPE(TopOrdAndIntQueue$OrdAndValue);

          return 0;
        }
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__parameters_(t_TopOrdAndIntQueue$OrdAndValue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__ord(t_TopOrdAndIntQueue$OrdAndValue *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_ord());
          return PyInt_FromLong((long) value);
        }
        static int t_TopOrdAndIntQueue$OrdAndValue_set__ord(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_ord(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "ord", arg);
          return -1;
        }

        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__value(t_TopOrdAndIntQueue$OrdAndValue *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_value());
          return PyInt_FromLong((long) value);
        }
        static int t_TopOrdAndIntQueue$OrdAndValue_set__value(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_value(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "value", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Thread.h"
#include "java/lang/Thread$State.h"
#include "java/lang/Runnable.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Throwable.h"
#include "java/util/Map.h"
#include "java/lang/Thread$UncaughtExceptionHandler.h"
#include "java/lang/ThreadGroup.h"
#include "java/lang/StackTraceElement.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Thread::class$ = NULL;
    jmethodID *Thread::mids$ = NULL;
    bool Thread::live$ = false;
    jint Thread::MAX_PRIORITY = (jint) 0;
    jint Thread::MIN_PRIORITY = (jint) 0;
    jint Thread::NORM_PRIORITY = (jint) 0;

    jclass Thread::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Thread");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_db86d7e2] = env->getMethodID(cls, "<init>", "(Ljava/lang/Runnable;)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_749aa364] = env->getMethodID(cls, "<init>", "(Ljava/lang/Runnable;Ljava/lang/String;)V");
        mids$[mid_init$_88a58d93] = env->getMethodID(cls, "<init>", "(Ljava/lang/ThreadGroup;Ljava/lang/String;)V");
        mids$[mid_init$_684615b9] = env->getMethodID(cls, "<init>", "(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;)V");
        mids$[mid_init$_5db621bb] = env->getMethodID(cls, "<init>", "(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;)V");
        mids$[mid_init$_57d87d50] = env->getMethodID(cls, "<init>", "(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J)V");
        mids$[mid_activeCount_54c6a179] = env->getStaticMethodID(cls, "activeCount", "()I");
        mids$[mid_checkAccess_54c6a166] = env->getMethodID(cls, "checkAccess", "()V");
        mids$[mid_countStackFrames_54c6a179] = env->getMethodID(cls, "countStackFrames", "()I");
        mids$[mid_currentThread_88082f50] = env->getStaticMethodID(cls, "currentThread", "()Ljava/lang/Thread;");
        mids$[mid_destroy_54c6a166] = env->getMethodID(cls, "destroy", "()V");
        mids$[mid_dumpStack_54c6a166] = env->getStaticMethodID(cls, "dumpStack", "()V");
        mids$[mid_enumerate_9e0743ee] = env->getStaticMethodID(cls, "enumerate", "([Ljava/lang/Thread;)I");
        mids$[mid_getAllStackTraces_db60befd] = env->getStaticMethodID(cls, "getAllStackTraces", "()Ljava/util/Map;");
        mids$[mid_getContextClassLoader_8d2f11fc] = env->getMethodID(cls, "getContextClassLoader", "()Ljava/lang/ClassLoader;");
        mids$[mid_getDefaultUncaughtExceptionHandler_a65feb9b] = env->getStaticMethodID(cls, "getDefaultUncaughtExceptionHandler", "()Ljava/lang/Thread$UncaughtExceptionHandler;");
        mids$[mid_getId_54c6a17a] = env->getMethodID(cls, "getId", "()J");
        mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
        mids$[mid_getPriority_54c6a179] = env->getMethodID(cls, "getPriority", "()I");
        mids$[mid_getStackTrace_25f1f6aa] = env->getMethodID(cls, "getStackTrace", "()[Ljava/lang/StackTraceElement;");
        mids$[mid_getState_bbff3c63] = env->getMethodID(cls, "getState", "()Ljava/lang/Thread$State;");
        mids$[mid_getThreadGroup_172b52b4] = env->getMethodID(cls, "getThreadGroup", "()Ljava/lang/ThreadGroup;");
        mids$[mid_getUncaughtExceptionHandler_a65feb9b] = env->getMethodID(cls, "getUncaughtExceptionHandler", "()Ljava/lang/Thread$UncaughtExceptionHandler;");
        mids$[mid_holdsLock_290588e2] = env->getStaticMethodID(cls, "holdsLock", "(Ljava/lang/Object;)Z");
        mids$[mid_interrupt_54c6a166] = env->getMethodID(cls, "interrupt", "()V");
        mids$[mid_interrupted_54c6a16a] = env->getStaticMethodID(cls, "interrupted", "()Z");
        mids$[mid_isAlive_54c6a16a] = env->getMethodID(cls, "isAlive", "()Z");
        mids$[mid_isDaemon_54c6a16a] = env->getMethodID(cls, "isDaemon", "()Z");
        mids$[mid_isInterrupted_54c6a16a] = env->getMethodID(cls, "isInterrupted", "()Z");
        mids$[mid_join_54c6a166] = env->getMethodID(cls, "join", "()V");
        mids$[mid_join_0ee6df2f] = env->getMethodID(cls, "join", "(J)V");
        mids$[mid_join_25d05c8f] = env->getMethodID(cls, "join", "(JI)V");
        mids$[mid_resume_54c6a166] = env->getMethodID(cls, "resume", "()V");
        mids$[mid_run_54c6a166] = env->getMethodID(cls, "run", "()V");
        mids$[mid_setContextClassLoader_9110048d] = env->getMethodID(cls, "setContextClassLoader", "(Ljava/lang/ClassLoader;)V");
        mids$[mid_setDaemon_bb0c767f] = env->getMethodID(cls, "setDaemon", "(Z)V");
        mids$[mid_setDefaultUncaughtExceptionHandler_4dc005b2] = env->getStaticMethodID(cls, "setDefaultUncaughtExceptionHandler", "(Ljava/lang/Thread$UncaughtExceptionHandler;)V");
        mids$[mid_setName_5fdc3f48] = env->getMethodID(cls, "setName", "(Ljava/lang/String;)V");
        mids$[mid_setPriority_39c7bd3c] = env->getMethodID(cls, "setPriority", "(I)V");
        mids$[mid_setUncaughtExceptionHandler_4dc005b2] = env->getMethodID(cls, "setUncaughtExceptionHandler", "(Ljava/lang/Thread$UncaughtExceptionHandler;)V");
        mids$[mid_sleep_0ee6df2f] = env->getStaticMethodID(cls, "sleep", "(J)V");
        mids$[mid_sleep_25d05c8f] = env->getStaticMethodID(cls, "sleep", "(JI)V");
        mids$[mid_start_54c6a166] = env->getMethodID(cls, "start", "()V");
        mids$[mid_stop_54c6a166] = env->getMethodID(cls, "stop", "()V");
        mids$[mid_stop_c5ec8ca4] = env->getMethodID(cls, "stop", "(Ljava/lang/Throwable;)V");
        mids$[mid_suspend_54c6a166] = env->getMethodID(cls, "suspend", "()V");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_yield_54c6a166] = env->getStaticMethodID(cls, "yield", "()V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        MAX_PRIORITY = env->getStaticIntField(cls, "MAX_PRIORITY");
        MIN_PRIORITY = env->getStaticIntField(cls, "MIN_PRIORITY");
        NORM_PRIORITY = env->getStaticIntField(cls, "NORM_PRIORITY");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Thread::Thread() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    Thread::Thread(const ::java::lang::Runnable & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_db86d7e2, a0.this$)) {}

    Thread::Thread(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    Thread::Thread(const ::java::lang::Runnable & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_749aa364, a0.this$, a1.this$)) {}

    Thread::Thread(const ::java::lang::ThreadGroup & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_88a58d93, a0.this$, a1.this$)) {}

    Thread::Thread(const ::java::lang::ThreadGroup & a0, const ::java::lang::Runnable & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_684615b9, a0.this$, a1.this$)) {}

    Thread::Thread(const ::java::lang::ThreadGroup & a0, const ::java::lang::Runnable & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5db621bb, a0.this$, a1.this$, a2.this$)) {}

    Thread::Thread(const ::java::lang::ThreadGroup & a0, const ::java::lang::Runnable & a1, const ::java::lang::String & a2, jlong a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_57d87d50, a0.this$, a1.this$, a2.this$, a3)) {}

    jint Thread::activeCount()
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_activeCount_54c6a179]);
    }

    void Thread::checkAccess() const
    {
      env->callVoidMethod(this$, mids$[mid_checkAccess_54c6a166]);
    }

    jint Thread::countStackFrames() const
    {
      return env->callIntMethod(this$, mids$[mid_countStackFrames_54c6a179]);
    }

    Thread Thread::currentThread()
    {
      jclass cls = env->getClass(initializeClass);
      return Thread(env->callStaticObjectMethod(cls, mids$[mid_currentThread_88082f50]));
    }

    void Thread::destroy() const
    {
      env->callVoidMethod(this$, mids$[mid_destroy_54c6a166]);
    }

    void Thread::dumpStack()
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_dumpStack_54c6a166]);
    }

    jint Thread::enumerate(const JArray< Thread > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_enumerate_9e0743ee], a0.this$);
    }

    ::java::util::Map Thread::getAllStackTraces()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_getAllStackTraces_db60befd]));
    }

    ::java::lang::ClassLoader Thread::getContextClassLoader() const
    {
      return ::java::lang::ClassLoader(env->callObjectMethod(this$, mids$[mid_getContextClassLoader_8d2f11fc]));
    }

    ::java::lang::Thread$UncaughtExceptionHandler Thread::getDefaultUncaughtExceptionHandler()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::Thread$UncaughtExceptionHandler(env->callStaticObjectMethod(cls, mids$[mid_getDefaultUncaughtExceptionHandler_a65feb9b]));
    }

    jlong Thread::getId() const
    {
      return env->callLongMethod(this$, mids$[mid_getId_54c6a17a]);
    }

    ::java::lang::String Thread::getName() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
    }

    jint Thread::getPriority() const
    {
      return env->callIntMethod(this$, mids$[mid_getPriority_54c6a179]);
    }

    JArray< ::java::lang::StackTraceElement > Thread::getStackTrace() const
    {
      return JArray< ::java::lang::StackTraceElement >(env->callObjectMethod(this$, mids$[mid_getStackTrace_25f1f6aa]));
    }

    ::java::lang::Thread$State Thread::getState() const
    {
      return ::java::lang::Thread$State(env->callObjectMethod(this$, mids$[mid_getState_bbff3c63]));
    }

    ::java::lang::ThreadGroup Thread::getThreadGroup() const
    {
      return ::java::lang::ThreadGroup(env->callObjectMethod(this$, mids$[mid_getThreadGroup_172b52b4]));
    }

    ::java::lang::Thread$UncaughtExceptionHandler Thread::getUncaughtExceptionHandler() const
    {
      return ::java::lang::Thread$UncaughtExceptionHandler(env->callObjectMethod(this$, mids$[mid_getUncaughtExceptionHandler_a65feb9b]));
    }

    jboolean Thread::holdsLock(const ::java::lang::Object & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_holdsLock_290588e2], a0.this$);
    }

    void Thread::interrupt() const
    {
      env->callVoidMethod(this$, mids$[mid_interrupt_54c6a166]);
    }

    jboolean Thread::interrupted()
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_interrupted_54c6a16a]);
    }

    jboolean Thread::isAlive() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isAlive_54c6a16a]);
    }

    jboolean Thread::isDaemon() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isDaemon_54c6a16a]);
    }

    jboolean Thread::isInterrupted() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isInterrupted_54c6a16a]);
    }

    void Thread::join() const
    {
      env->callVoidMethod(this$, mids$[mid_join_54c6a166]);
    }

    void Thread::join(jlong a0) const
    {
      env->callVoidMethod(this$, mids$[mid_join_0ee6df2f], a0);
    }

    void Thread::join(jlong a0, jint a1) const
    {
      env->callVoidMethod(this$, mids$[mid_join_25d05c8f], a0, a1);
    }

    void Thread::resume() const
    {
      env->callVoidMethod(this$, mids$[mid_resume_54c6a166]);
    }

    void Thread::run() const
    {
      env->callVoidMethod(this$, mids$[mid_run_54c6a166]);
    }

    void Thread::setContextClassLoader(const ::java::lang::ClassLoader & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setContextClassLoader_9110048d], a0.this$);
    }

    void Thread::setDaemon(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setDaemon_bb0c767f], a0);
    }

    void Thread::setDefaultUncaughtExceptionHandler(const ::java::lang::Thread$UncaughtExceptionHandler & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setDefaultUncaughtExceptionHandler_4dc005b2], a0.this$);
    }

    void Thread::setName(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setName_5fdc3f48], a0.this$);
    }

    void Thread::setPriority(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setPriority_39c7bd3c], a0);
    }

    void Thread::setUncaughtExceptionHandler(const ::java::lang::Thread$UncaughtExceptionHandler & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setUncaughtExceptionHandler_4dc005b2], a0.this$);
    }

    void Thread::sleep(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sleep_0ee6df2f], a0);
    }

    void Thread::sleep(jlong a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sleep_25d05c8f], a0, a1);
    }

    void Thread::start() const
    {
      env->callVoidMethod(this$, mids$[mid_start_54c6a166]);
    }

    void Thread::stop() const
    {
      env->callVoidMethod(this$, mids$[mid_stop_54c6a166]);
    }

    void Thread::stop(const ::java::lang::Throwable & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_stop_c5ec8ca4], a0.this$);
    }

    void Thread::suspend() const
    {
      env->callVoidMethod(this$, mids$[mid_suspend_54c6a166]);
    }

    ::java::lang::String Thread::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    void Thread::yield()
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_yield_54c6a166]);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Thread_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Thread_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Thread_init_(t_Thread *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Thread_activeCount(PyTypeObject *type);
    static PyObject *t_Thread_checkAccess(t_Thread *self);
    static PyObject *t_Thread_countStackFrames(t_Thread *self);
    static PyObject *t_Thread_currentThread(PyTypeObject *type);
    static PyObject *t_Thread_destroy(t_Thread *self);
    static PyObject *t_Thread_dumpStack(PyTypeObject *type);
    static PyObject *t_Thread_enumerate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Thread_getAllStackTraces(PyTypeObject *type);
    static PyObject *t_Thread_getContextClassLoader(t_Thread *self);
    static PyObject *t_Thread_getDefaultUncaughtExceptionHandler(PyTypeObject *type);
    static PyObject *t_Thread_getId(t_Thread *self);
    static PyObject *t_Thread_getName(t_Thread *self);
    static PyObject *t_Thread_getPriority(t_Thread *self);
    static PyObject *t_Thread_getStackTrace(t_Thread *self);
    static PyObject *t_Thread_getState(t_Thread *self);
    static PyObject *t_Thread_getThreadGroup(t_Thread *self);
    static PyObject *t_Thread_getUncaughtExceptionHandler(t_Thread *self);
    static PyObject *t_Thread_holdsLock(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Thread_interrupt(t_Thread *self);
    static PyObject *t_Thread_interrupted(PyTypeObject *type);
    static PyObject *t_Thread_isAlive(t_Thread *self);
    static PyObject *t_Thread_isDaemon(t_Thread *self);
    static PyObject *t_Thread_isInterrupted(t_Thread *self);
    static PyObject *t_Thread_join(t_Thread *self, PyObject *args);
    static PyObject *t_Thread_resume(t_Thread *self);
    static PyObject *t_Thread_run(t_Thread *self);
    static PyObject *t_Thread_setContextClassLoader(t_Thread *self, PyObject *arg);
    static PyObject *t_Thread_setDaemon(t_Thread *self, PyObject *arg);
    static PyObject *t_Thread_setDefaultUncaughtExceptionHandler(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Thread_setName(t_Thread *self, PyObject *arg);
    static PyObject *t_Thread_setPriority(t_Thread *self, PyObject *arg);
    static PyObject *t_Thread_setUncaughtExceptionHandler(t_Thread *self, PyObject *arg);
    static PyObject *t_Thread_sleep(PyTypeObject *type, PyObject *args);
    static PyObject *t_Thread_start(t_Thread *self);
    static PyObject *t_Thread_stop(t_Thread *self, PyObject *args);
    static PyObject *t_Thread_suspend(t_Thread *self);
    static PyObject *t_Thread_toString(t_Thread *self, PyObject *args);
    static PyObject *t_Thread_yield(PyTypeObject *type);
    static PyObject *t_Thread_get__alive(t_Thread *self, void *data);
    static PyObject *t_Thread_get__allStackTraces(t_Thread *self, void *data);
    static PyObject *t_Thread_get__contextClassLoader(t_Thread *self, void *data);
    static int t_Thread_set__contextClassLoader(t_Thread *self, PyObject *arg, void *data);
    static PyObject *t_Thread_get__daemon(t_Thread *self, void *data);
    static int t_Thread_set__daemon(t_Thread *self, PyObject *arg, void *data);
    static PyObject *t_Thread_get__defaultUncaughtExceptionHandler(t_Thread *self, void *data);
    static int t_Thread_set__defaultUncaughtExceptionHandler(t_Thread *self, PyObject *arg, void *data);
    static PyObject *t_Thread_get__id(t_Thread *self, void *data);
    static PyObject *t_Thread_get__name(t_Thread *self, void *data);
    static int t_Thread_set__name(t_Thread *self, PyObject *arg, void *data);
    static PyObject *t_Thread_get__priority(t_Thread *self, void *data);
    static int t_Thread_set__priority(t_Thread *self, PyObject *arg, void *data);
    static PyObject *t_Thread_get__stackTrace(t_Thread *self, void *data);
    static PyObject *t_Thread_get__state(t_Thread *self, void *data);
    static PyObject *t_Thread_get__threadGroup(t_Thread *self, void *data);
    static PyObject *t_Thread_get__uncaughtExceptionHandler(t_Thread *self, void *data);
    static int t_Thread_set__uncaughtExceptionHandler(t_Thread *self, PyObject *arg, void *data);
    static PyGetSetDef t_Thread__fields_[] = {
      DECLARE_GET_FIELD(t_Thread, alive),
      DECLARE_GET_FIELD(t_Thread, allStackTraces),
      DECLARE_GETSET_FIELD(t_Thread, contextClassLoader),
      DECLARE_GETSET_FIELD(t_Thread, daemon),
      DECLARE_GETSET_FIELD(t_Thread, defaultUncaughtExceptionHandler),
      DECLARE_GET_FIELD(t_Thread, id),
      DECLARE_GETSET_FIELD(t_Thread, name),
      DECLARE_GETSET_FIELD(t_Thread, priority),
      DECLARE_GET_FIELD(t_Thread, stackTrace),
      DECLARE_GET_FIELD(t_Thread, state),
      DECLARE_GET_FIELD(t_Thread, threadGroup),
      DECLARE_GETSET_FIELD(t_Thread, uncaughtExceptionHandler),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Thread__methods_[] = {
      DECLARE_METHOD(t_Thread, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Thread, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Thread, activeCount, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, checkAccess, METH_NOARGS),
      DECLARE_METHOD(t_Thread, countStackFrames, METH_NOARGS),
      DECLARE_METHOD(t_Thread, currentThread, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, destroy, METH_NOARGS),
      DECLARE_METHOD(t_Thread, dumpStack, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, enumerate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Thread, getAllStackTraces, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, getContextClassLoader, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getDefaultUncaughtExceptionHandler, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, getId, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getName, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getPriority, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getStackTrace, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getState, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getThreadGroup, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getUncaughtExceptionHandler, METH_NOARGS),
      DECLARE_METHOD(t_Thread, holdsLock, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Thread, interrupt, METH_NOARGS),
      DECLARE_METHOD(t_Thread, interrupted, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, isAlive, METH_NOARGS),
      DECLARE_METHOD(t_Thread, isDaemon, METH_NOARGS),
      DECLARE_METHOD(t_Thread, isInterrupted, METH_NOARGS),
      DECLARE_METHOD(t_Thread, join, METH_VARARGS),
      DECLARE_METHOD(t_Thread, resume, METH_NOARGS),
      DECLARE_METHOD(t_Thread, run, METH_NOARGS),
      DECLARE_METHOD(t_Thread, setContextClassLoader, METH_O),
      DECLARE_METHOD(t_Thread, setDaemon, METH_O),
      DECLARE_METHOD(t_Thread, setDefaultUncaughtExceptionHandler, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Thread, setName, METH_O),
      DECLARE_METHOD(t_Thread, setPriority, METH_O),
      DECLARE_METHOD(t_Thread, setUncaughtExceptionHandler, METH_O),
      DECLARE_METHOD(t_Thread, sleep, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, start, METH_NOARGS),
      DECLARE_METHOD(t_Thread, stop, METH_VARARGS),
      DECLARE_METHOD(t_Thread, suspend, METH_NOARGS),
      DECLARE_METHOD(t_Thread, toString, METH_VARARGS),
      DECLARE_METHOD(t_Thread, yield, METH_NOARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Thread, t_Thread, ::java::lang::Object, Thread, t_Thread_init_, 0, 0, t_Thread__fields_, 0, 0);

    void t_Thread::install(PyObject *module)
    {
      installType(&PY_TYPE(Thread), module, "Thread", 0);
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "UncaughtExceptionHandler", make_descriptor(&PY_TYPE(Thread$UncaughtExceptionHandler)));
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "State", make_descriptor(&PY_TYPE(Thread$State)));
    }

    void t_Thread::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "class_", make_descriptor(Thread::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "wrapfn_", make_descriptor(t_Thread::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "boxfn_", make_descriptor(boxObject));
      env->getClass(Thread::initializeClass);
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "MAX_PRIORITY", make_descriptor(Thread::MAX_PRIORITY));
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "MIN_PRIORITY", make_descriptor(Thread::MIN_PRIORITY));
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "NORM_PRIORITY", make_descriptor(Thread::NORM_PRIORITY));
    }

    static PyObject *t_Thread_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Thread::initializeClass, 1)))
        return NULL;
      return t_Thread::wrap_Object(Thread(((t_Thread *) arg)->object.this$));
    }
    static PyObject *t_Thread_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Thread::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Thread_init_(t_Thread *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          Thread object((jobject) NULL);

          INT_CALL(object = Thread());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::Runnable a0((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Runnable::initializeClass, &a0))
          {
            INT_CALL(object = Thread(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Thread(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::Runnable a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "ks", ::java::lang::Runnable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Thread(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::ThreadGroup a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "ks", ::java::lang::ThreadGroup::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Thread(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::ThreadGroup a0((jobject) NULL);
          ::java::lang::Runnable a1((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "kk", ::java::lang::ThreadGroup::initializeClass, ::java::lang::Runnable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Thread(a0, a1));
            self->object = object;
            break;
          }
        }
        goto err;
       case 3:
        {
          ::java::lang::ThreadGroup a0((jobject) NULL);
          ::java::lang::Runnable a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "kks", ::java::lang::ThreadGroup::initializeClass, ::java::lang::Runnable::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = Thread(a0, a1, a2));
            self->object = object;
            break;
          }
        }
        goto err;
       case 4:
        {
          ::java::lang::ThreadGroup a0((jobject) NULL);
          ::java::lang::Runnable a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          jlong a3;
          Thread object((jobject) NULL);

          if (!parseArgs(args, "kksJ", ::java::lang::ThreadGroup::initializeClass, ::java::lang::Runnable::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = Thread(a0, a1, a2, a3));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Thread_activeCount(PyTypeObject *type)
    {
      jint result;
      OBJ_CALL(result = ::java::lang::Thread::activeCount());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Thread_checkAccess(t_Thread *self)
    {
      OBJ_CALL(self->object.checkAccess());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_countStackFrames(t_Thread *self)
    {
      jint result;
      OBJ_CALL(result = self->object.countStackFrames());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Thread_currentThread(PyTypeObject *type)
    {
      Thread result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::Thread::currentThread());
      return t_Thread::wrap_Object(result);
    }

    static PyObject *t_Thread_destroy(t_Thread *self)
    {
      OBJ_CALL(self->object.destroy());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_dumpStack(PyTypeObject *type)
    {
      OBJ_CALL(::java::lang::Thread::dumpStack());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_enumerate(PyTypeObject *type, PyObject *arg)
    {
      JArray< Thread > a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "[k", Thread::initializeClass, &a0))
      {
        OBJ_CALL(result = ::java::lang::Thread::enumerate(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "enumerate", arg);
      return NULL;
    }

    static PyObject *t_Thread_getAllStackTraces(PyTypeObject *type)
    {
      ::java::util::Map result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::Thread::getAllStackTraces());
      return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(Thread), &::java::lang::PY_TYPE(Object));
    }

    static PyObject *t_Thread_getContextClassLoader(t_Thread *self)
    {
      ::java::lang::ClassLoader result((jobject) NULL);
      OBJ_CALL(result = self->object.getContextClassLoader());
      return ::java::lang::t_ClassLoader::wrap_Object(result);
    }

    static PyObject *t_Thread_getDefaultUncaughtExceptionHandler(PyTypeObject *type)
    {
      ::java::lang::Thread$UncaughtExceptionHandler result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::Thread::getDefaultUncaughtExceptionHandler());
      return ::java::lang::t_Thread$UncaughtExceptionHandler::wrap_Object(result);
    }

    static PyObject *t_Thread_getId(t_Thread *self)
    {
      jlong result;
      OBJ_CALL(result = self->object.getId());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_Thread_getName(t_Thread *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getName());
      return j2p(result);
    }

    static PyObject *t_Thread_getPriority(t_Thread *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getPriority());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Thread_getStackTrace(t_Thread *self)
    {
      JArray< ::java::lang::StackTraceElement > result((jobject) NULL);
      OBJ_CALL(result = self->object.getStackTrace());
      return JArray<jobject>(result.this$).wrap(::java::lang::t_StackTraceElement::wrap_jobject);
    }

    static PyObject *t_Thread_getState(t_Thread *self)
    {
      ::java::lang::Thread$State result((jobject) NULL);
      OBJ_CALL(result = self->object.getState());
      return ::java::lang::t_Thread$State::wrap_Object(result);
    }

    static PyObject *t_Thread_getThreadGroup(t_Thread *self)
    {
      ::java::lang::ThreadGroup result((jobject) NULL);
      OBJ_CALL(result = self->object.getThreadGroup());
      return ::java::lang::t_ThreadGroup::wrap_Object(result);
    }

    static PyObject *t_Thread_getUncaughtExceptionHandler(t_Thread *self)
    {
      ::java::lang::Thread$UncaughtExceptionHandler result((jobject) NULL);
      OBJ_CALL(result = self->object.getUncaughtExceptionHandler());
      return ::java::lang::t_Thread$UncaughtExceptionHandler::wrap_Object(result);
    }

    static PyObject *t_Thread_holdsLock(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = ::java::lang::Thread::holdsLock(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "holdsLock", arg);
      return NULL;
    }

    static PyObject *t_Thread_interrupt(t_Thread *self)
    {
      OBJ_CALL(self->object.interrupt());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_interrupted(PyTypeObject *type)
    {
      jboolean result;
      OBJ_CALL(result = ::java::lang::Thread::interrupted());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Thread_isAlive(t_Thread *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isAlive());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Thread_isDaemon(t_Thread *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isDaemon());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Thread_isInterrupted(t_Thread *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isInterrupted());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Thread_join(t_Thread *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          OBJ_CALL(self->object.join());
          Py_RETURN_NONE;
        }
        break;
       case 1:
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.join(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          jlong a0;
          jint a1;

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(self->object.join(a0, a1));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "join", args);
      return NULL;
    }

    static PyObject *t_Thread_resume(t_Thread *self)
    {
      OBJ_CALL(self->object.resume());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_run(t_Thread *self)
    {
      OBJ_CALL(self->object.run());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_setContextClassLoader(t_Thread *self, PyObject *arg)
    {
      ::java::lang::ClassLoader a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setContextClassLoader(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setContextClassLoader", arg);
      return NULL;
    }

    static PyObject *t_Thread_setDaemon(t_Thread *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setDaemon(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setDaemon", arg);
      return NULL;
    }

    static PyObject *t_Thread_setDefaultUncaughtExceptionHandler(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::Thread$UncaughtExceptionHandler a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::lang::Thread$UncaughtExceptionHandler::initializeClass, &a0))
      {
        OBJ_CALL(::java::lang::Thread::setDefaultUncaughtExceptionHandler(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setDefaultUncaughtExceptionHandler", arg);
      return NULL;
    }

    static PyObject *t_Thread_setName(t_Thread *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setName(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setName", arg);
      return NULL;
    }

    static PyObject *t_Thread_setPriority(t_Thread *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setPriority(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setPriority", arg);
      return NULL;
    }

    static PyObject *t_Thread_setUncaughtExceptionHandler(t_Thread *self, PyObject *arg)
    {
      ::java::lang::Thread$UncaughtExceptionHandler a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::lang::Thread$UncaughtExceptionHandler::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setUncaughtExceptionHandler(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setUncaughtExceptionHandler", arg);
      return NULL;
    }

    static PyObject *t_Thread_sleep(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(::java::lang::Thread::sleep(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          jlong a0;
          jint a1;

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(::java::lang::Thread::sleep(a0, a1));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "sleep", args);
      return NULL;
    }

    static PyObject *t_Thread_start(t_Thread *self)
    {
      OBJ_CALL(self->object.start());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_stop(t_Thread *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          OBJ_CALL(self->object.stop());
          Py_RETURN_NONE;
        }
        break;
       case 1:
        {
          ::java::lang::Throwable a0((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            OBJ_CALL(self->object.stop(a0));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "stop", args);
      return NULL;
    }

    static PyObject *t_Thread_suspend(t_Thread *self)
    {
      OBJ_CALL(self->object.suspend());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_toString(t_Thread *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Thread), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Thread_yield(PyTypeObject *type)
    {
      OBJ_CALL(::java::lang::Thread::yield());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_get__alive(t_Thread *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isAlive());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Thread_get__allStackTraces(t_Thread *self, void *data)
    {
      ::java::util::Map value((jobject) NULL);
      OBJ_CALL(value = self->object.getAllStackTraces());
      return ::java::util::t_Map::wrap_Object(value);
    }

    static PyObject *t_Thread_get__contextClassLoader(t_Thread *self, void *data)
    {
      ::java::lang::ClassLoader value((jobject) NULL);
      OBJ_CALL(value = self->object.getContextClassLoader());
      return ::java::lang::t_ClassLoader::wrap_Object(value);
    }
    static int t_Thread_set__contextClassLoader(t_Thread *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::ClassLoader value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &value))
        {
          INT_CALL(self->object.setContextClassLoader(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "contextClassLoader", arg);
      return -1;
    }

    static PyObject *t_Thread_get__daemon(t_Thread *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isDaemon());
      Py_RETURN_BOOL(value);
    }
    static int t_Thread_set__daemon(t_Thread *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setDaemon(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "daemon", arg);
      return -1;
    }

    static PyObject *t_Thread_get__defaultUncaughtExceptionHandler(t_Thread *self, void *data)
    {
      ::java::lang::Thread$UncaughtExceptionHandler value((jobject) NULL);
      OBJ_CALL(value = self->object.getDefaultUncaughtExceptionHandler());
      return ::java::lang::t_Thread$UncaughtExceptionHandler::wrap_Object(value);
    }
    static int t_Thread_set__defaultUncaughtExceptionHandler(t_Thread *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::Thread$UncaughtExceptionHandler value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::lang::Thread$UncaughtExceptionHandler::initializeClass, &value))
        {
          INT_CALL(self->object.setDefaultUncaughtExceptionHandler(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "defaultUncaughtExceptionHandler", arg);
      return -1;
    }

    static PyObject *t_Thread_get__id(t_Thread *self, void *data)
    {
      jlong value;
      OBJ_CALL(value = self->object.getId());
      return PyLong_FromLongLong((PY_LONG_LONG) value);
    }

    static PyObject *t_Thread_get__name(t_Thread *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getName());
      return j2p(value);
    }
    static int t_Thread_set__name(t_Thread *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setName(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "name", arg);
      return -1;
    }

    static PyObject *t_Thread_get__priority(t_Thread *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getPriority());
      return PyInt_FromLong((long) value);
    }
    static int t_Thread_set__priority(t_Thread *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setPriority(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "priority", arg);
      return -1;
    }

    static PyObject *t_Thread_get__stackTrace(t_Thread *self, void *data)
    {
      JArray< ::java::lang::StackTraceElement > value((jobject) NULL);
      OBJ_CALL(value = self->object.getStackTrace());
      return JArray<jobject>(value.this$).wrap(::java::lang::t_StackTraceElement::wrap_jobject);
    }

    static PyObject *t_Thread_get__state(t_Thread *self, void *data)
    {
      ::java::lang::Thread$State value((jobject) NULL);
      OBJ_CALL(value = self->object.getState());
      return ::java::lang::t_Thread$State::wrap_Object(value);
    }

    static PyObject *t_Thread_get__threadGroup(t_Thread *self, void *data)
    {
      ::java::lang::ThreadGroup value((jobject) NULL);
      OBJ_CALL(value = self->object.getThreadGroup());
      return ::java::lang::t_ThreadGroup::wrap_Object(value);
    }

    static PyObject *t_Thread_get__uncaughtExceptionHandler(t_Thread *self, void *data)
    {
      ::java::lang::Thread$UncaughtExceptionHandler value((jobject) NULL);
      OBJ_CALL(value = self->object.getUncaughtExceptionHandler());
      return ::java::lang::t_Thread$UncaughtExceptionHandler::wrap_Object(value);
    }
    static int t_Thread_set__uncaughtExceptionHandler(t_Thread *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::Thread$UncaughtExceptionHandler value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::lang::Thread$UncaughtExceptionHandler::initializeClass, &value))
        {
          INT_CALL(self->object.setUncaughtExceptionHandler(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "uncaughtExceptionHandler", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/TokenStreamToAutomaton.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *TokenStreamToAutomaton::class$ = NULL;
        jmethodID *TokenStreamToAutomaton::mids$ = NULL;
        bool TokenStreamToAutomaton::live$ = false;
        jint TokenStreamToAutomaton::HOLE = (jint) 0;
        jint TokenStreamToAutomaton::POS_SEP = (jint) 0;

        jclass TokenStreamToAutomaton::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/TokenStreamToAutomaton");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_setPreservePositionIncrements_bb0c767f] = env->getMethodID(cls, "setPreservePositionIncrements", "(Z)V");
            mids$[mid_setUnicodeArcs_bb0c767f] = env->getMethodID(cls, "setUnicodeArcs", "(Z)V");
            mids$[mid_toAutomaton_6e59061f] = env->getMethodID(cls, "toAutomaton", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/util/automaton/Automaton;");
            mids$[mid_changeToken_21e43cb7] = env->getMethodID(cls, "changeToken", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            HOLE = env->getStaticIntField(cls, "HOLE");
            POS_SEP = env->getStaticIntField(cls, "POS_SEP");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TokenStreamToAutomaton::TokenStreamToAutomaton() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void TokenStreamToAutomaton::setPreservePositionIncrements(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setPreservePositionIncrements_bb0c767f], a0);
        }

        void TokenStreamToAutomaton::setUnicodeArcs(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setUnicodeArcs_bb0c767f], a0);
        }

        ::org::apache::lucene::util::automaton::Automaton TokenStreamToAutomaton::toAutomaton(const ::org::apache::lucene::analysis::TokenStream & a0) const
        {
          return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_6e59061f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_TokenStreamToAutomaton_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TokenStreamToAutomaton_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TokenStreamToAutomaton_init_(t_TokenStreamToAutomaton *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TokenStreamToAutomaton_setPreservePositionIncrements(t_TokenStreamToAutomaton *self, PyObject *arg);
        static PyObject *t_TokenStreamToAutomaton_setUnicodeArcs(t_TokenStreamToAutomaton *self, PyObject *arg);
        static PyObject *t_TokenStreamToAutomaton_toAutomaton(t_TokenStreamToAutomaton *self, PyObject *arg);
        static int t_TokenStreamToAutomaton_set__preservePositionIncrements(t_TokenStreamToAutomaton *self, PyObject *arg, void *data);
        static int t_TokenStreamToAutomaton_set__unicodeArcs(t_TokenStreamToAutomaton *self, PyObject *arg, void *data);
        static PyGetSetDef t_TokenStreamToAutomaton__fields_[] = {
          DECLARE_SET_FIELD(t_TokenStreamToAutomaton, preservePositionIncrements),
          DECLARE_SET_FIELD(t_TokenStreamToAutomaton, unicodeArcs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TokenStreamToAutomaton__methods_[] = {
          DECLARE_METHOD(t_TokenStreamToAutomaton, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenStreamToAutomaton, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenStreamToAutomaton, setPreservePositionIncrements, METH_O),
          DECLARE_METHOD(t_TokenStreamToAutomaton, setUnicodeArcs, METH_O),
          DECLARE_METHOD(t_TokenStreamToAutomaton, toAutomaton, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TokenStreamToAutomaton, t_TokenStreamToAutomaton, ::java::lang::Object, TokenStreamToAutomaton, t_TokenStreamToAutomaton_init_, 0, 0, t_TokenStreamToAutomaton__fields_, 0, 0);

        void t_TokenStreamToAutomaton::install(PyObject *module)
        {
          installType(&PY_TYPE(TokenStreamToAutomaton), module, "TokenStreamToAutomaton", 0);
        }

        void t_TokenStreamToAutomaton::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TokenStreamToAutomaton).tp_dict, "class_", make_descriptor(TokenStreamToAutomaton::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TokenStreamToAutomaton).tp_dict, "wrapfn_", make_descriptor(t_TokenStreamToAutomaton::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TokenStreamToAutomaton).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(TokenStreamToAutomaton::initializeClass);
          PyDict_SetItemString(PY_TYPE(TokenStreamToAutomaton).tp_dict, "HOLE", make_descriptor(TokenStreamToAutomaton::HOLE));
          PyDict_SetItemString(PY_TYPE(TokenStreamToAutomaton).tp_dict, "POS_SEP", make_descriptor(TokenStreamToAutomaton::POS_SEP));
        }

        static PyObject *t_TokenStreamToAutomaton_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TokenStreamToAutomaton::initializeClass, 1)))
            return NULL;
          return t_TokenStreamToAutomaton::wrap_Object(TokenStreamToAutomaton(((t_TokenStreamToAutomaton *) arg)->object.this$));
        }
        static PyObject *t_TokenStreamToAutomaton_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TokenStreamToAutomaton::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TokenStreamToAutomaton_init_(t_TokenStreamToAutomaton *self, PyObject *args, PyObject *kwds)
        {
          TokenStreamToAutomaton object((jobject) NULL);

          INT_CALL(object = TokenStreamToAutomaton());
          self->object = object;

          return 0;
        }

        static PyObject *t_TokenStreamToAutomaton_setPreservePositionIncrements(t_TokenStreamToAutomaton *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setPreservePositionIncrements(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setPreservePositionIncrements", arg);
          return NULL;
        }

        static PyObject *t_TokenStreamToAutomaton_setUnicodeArcs(t_TokenStreamToAutomaton *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setUnicodeArcs(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setUnicodeArcs", arg);
          return NULL;
        }

        static PyObject *t_TokenStreamToAutomaton_toAutomaton(t_TokenStreamToAutomaton *self, PyObject *arg)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
          ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.toAutomaton(a0));
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "toAutomaton", arg);
          return NULL;
        }

        static int t_TokenStreamToAutomaton_set__preservePositionIncrements(t_TokenStreamToAutomaton *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setPreservePositionIncrements(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "preservePositionIncrements", arg);
          return -1;
        }

        static int t_TokenStreamToAutomaton_set__unicodeArcs(t_TokenStreamToAutomaton *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setUnicodeArcs(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "unicodeArcs", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RamUsageEstimator$JvmFeature.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RamUsageEstimator$JvmFeature::class$ = NULL;
        jmethodID *RamUsageEstimator$JvmFeature::mids$ = NULL;
        jfieldID *RamUsageEstimator$JvmFeature::fids$ = NULL;
        bool RamUsageEstimator$JvmFeature::live$ = false;
        RamUsageEstimator$JvmFeature *RamUsageEstimator$JvmFeature::ARRAY_HEADER_SIZE = NULL;
        RamUsageEstimator$JvmFeature *RamUsageEstimator$JvmFeature::FIELD_OFFSETS = NULL;
        RamUsageEstimator$JvmFeature *RamUsageEstimator$JvmFeature::OBJECT_ALIGNMENT = NULL;
        RamUsageEstimator$JvmFeature *RamUsageEstimator$JvmFeature::OBJECT_REFERENCE_SIZE = NULL;

        jclass RamUsageEstimator$JvmFeature::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RamUsageEstimator$JvmFeature");

            mids$ = new jmethodID[max_mid];
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_valueOf_435c0e75] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/util/RamUsageEstimator$JvmFeature;");
            mids$[mid_values_6bc6c637] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/util/RamUsageEstimator$JvmFeature;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_description] = env->getFieldID(cls, "description", "Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            ARRAY_HEADER_SIZE = new RamUsageEstimator$JvmFeature(env->getStaticObjectField(cls, "ARRAY_HEADER_SIZE", "Lorg/apache/lucene/util/RamUsageEstimator$JvmFeature;"));
            FIELD_OFFSETS = new RamUsageEstimator$JvmFeature(env->getStaticObjectField(cls, "FIELD_OFFSETS", "Lorg/apache/lucene/util/RamUsageEstimator$JvmFeature;"));
            OBJECT_ALIGNMENT = new RamUsageEstimator$JvmFeature(env->getStaticObjectField(cls, "OBJECT_ALIGNMENT", "Lorg/apache/lucene/util/RamUsageEstimator$JvmFeature;"));
            OBJECT_REFERENCE_SIZE = new RamUsageEstimator$JvmFeature(env->getStaticObjectField(cls, "OBJECT_REFERENCE_SIZE", "Lorg/apache/lucene/util/RamUsageEstimator$JvmFeature;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String RamUsageEstimator$JvmFeature::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        RamUsageEstimator$JvmFeature RamUsageEstimator$JvmFeature::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return RamUsageEstimator$JvmFeature(env->callStaticObjectMethod(cls, mids$[mid_valueOf_435c0e75], a0.this$));
        }

        JArray< RamUsageEstimator$JvmFeature > RamUsageEstimator$JvmFeature::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< RamUsageEstimator$JvmFeature >(env->callStaticObjectMethod(cls, mids$[mid_values_6bc6c637]));
        }

        ::java::lang::String RamUsageEstimator$JvmFeature::_get_description() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_description]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RamUsageEstimator$JvmFeature_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RamUsageEstimator$JvmFeature_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RamUsageEstimator$JvmFeature_of_(t_RamUsageEstimator$JvmFeature *self, PyObject *args);
        static PyObject *t_RamUsageEstimator$JvmFeature_toString(t_RamUsageEstimator$JvmFeature *self, PyObject *args);
        static PyObject *t_RamUsageEstimator$JvmFeature_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_RamUsageEstimator$JvmFeature_values(PyTypeObject *type);
        static PyObject *t_RamUsageEstimator$JvmFeature_get__description(t_RamUsageEstimator$JvmFeature *self, void *data);

        static PyObject *t_RamUsageEstimator$JvmFeature_get__parameters_(t_RamUsageEstimator$JvmFeature *self, void *data);
        static PyGetSetDef t_RamUsageEstimator$JvmFeature__fields_[] = {
          DECLARE_GET_FIELD(t_RamUsageEstimator$JvmFeature, description),
          DECLARE_GET_FIELD(t_RamUsageEstimator$JvmFeature, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RamUsageEstimator$JvmFeature__methods_[] = {
          DECLARE_METHOD(t_RamUsageEstimator$JvmFeature, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator$JvmFeature, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator$JvmFeature, of_, METH_VARARGS),
          DECLARE_METHOD(t_RamUsageEstimator$JvmFeature, toString, METH_VARARGS),
          DECLARE_METHOD(t_RamUsageEstimator$JvmFeature, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator$JvmFeature, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RamUsageEstimator$JvmFeature, t_RamUsageEstimator$JvmFeature, ::java::lang::Enum, RamUsageEstimator$JvmFeature, abstract_init, 0, 0, t_RamUsageEstimator$JvmFeature__fields_, 0, 0);
        PyObject *t_RamUsageEstimator$JvmFeature::wrap_Object(const RamUsageEstimator$JvmFeature& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RamUsageEstimator$JvmFeature::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RamUsageEstimator$JvmFeature *self = (t_RamUsageEstimator$JvmFeature *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_RamUsageEstimator$JvmFeature::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RamUsageEstimator$JvmFeature::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RamUsageEstimator$JvmFeature *self = (t_RamUsageEstimator$JvmFeature *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_RamUsageEstimator$JvmFeature::install(PyObject *module)
        {
          installType(&PY_TYPE(RamUsageEstimator$JvmFeature), module, "RamUsageEstimator$JvmFeature", 0);
        }

        void t_RamUsageEstimator$JvmFeature::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator$JvmFeature).tp_dict, "class_", make_descriptor(RamUsageEstimator$JvmFeature::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator$JvmFeature).tp_dict, "wrapfn_", make_descriptor(t_RamUsageEstimator$JvmFeature::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator$JvmFeature).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(RamUsageEstimator$JvmFeature::initializeClass);
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator$JvmFeature).tp_dict, "ARRAY_HEADER_SIZE", make_descriptor(t_RamUsageEstimator$JvmFeature::wrap_Object(*RamUsageEstimator$JvmFeature::ARRAY_HEADER_SIZE)));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator$JvmFeature).tp_dict, "FIELD_OFFSETS", make_descriptor(t_RamUsageEstimator$JvmFeature::wrap_Object(*RamUsageEstimator$JvmFeature::FIELD_OFFSETS)));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator$JvmFeature).tp_dict, "OBJECT_ALIGNMENT", make_descriptor(t_RamUsageEstimator$JvmFeature::wrap_Object(*RamUsageEstimator$JvmFeature::OBJECT_ALIGNMENT)));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator$JvmFeature).tp_dict, "OBJECT_REFERENCE_SIZE", make_descriptor(t_RamUsageEstimator$JvmFeature::wrap_Object(*RamUsageEstimator$JvmFeature::OBJECT_REFERENCE_SIZE)));
        }

        static PyObject *t_RamUsageEstimator$JvmFeature_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RamUsageEstimator$JvmFeature::initializeClass, 1)))
            return NULL;
          return t_RamUsageEstimator$JvmFeature::wrap_Object(RamUsageEstimator$JvmFeature(((t_RamUsageEstimator$JvmFeature *) arg)->object.this$));
        }
        static PyObject *t_RamUsageEstimator$JvmFeature_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RamUsageEstimator$JvmFeature::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RamUsageEstimator$JvmFeature_of_(t_RamUsageEstimator$JvmFeature *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_RamUsageEstimator$JvmFeature_toString(t_RamUsageEstimator$JvmFeature *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(RamUsageEstimator$JvmFeature), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_RamUsageEstimator$JvmFeature_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          RamUsageEstimator$JvmFeature result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator$JvmFeature::valueOf(a0));
            return t_RamUsageEstimator$JvmFeature::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_RamUsageEstimator$JvmFeature_values(PyTypeObject *type)
        {
          JArray< RamUsageEstimator$JvmFeature > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator$JvmFeature::values());
          return JArray<jobject>(result.this$).wrap(t_RamUsageEstimator$JvmFeature::wrap_jobject);
        }
        static PyObject *t_RamUsageEstimator$JvmFeature_get__parameters_(t_RamUsageEstimator$JvmFeature *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_RamUsageEstimator$JvmFeature_get__description(t_RamUsageEstimator$JvmFeature *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_description());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sv/SwedishLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {

          ::java::lang::Class *SwedishLightStemFilter::class$ = NULL;
          jmethodID *SwedishLightStemFilter::mids$ = NULL;
          bool SwedishLightStemFilter::live$ = false;

          jclass SwedishLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sv/SwedishLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SwedishLightStemFilter::SwedishLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean SwedishLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {
          static PyObject *t_SwedishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SwedishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SwedishLightStemFilter_init_(t_SwedishLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SwedishLightStemFilter_incrementToken(t_SwedishLightStemFilter *self, PyObject *args);

          static PyMethodDef t_SwedishLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_SwedishLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SwedishLightStemFilter, t_SwedishLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, SwedishLightStemFilter, t_SwedishLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_SwedishLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SwedishLightStemFilter), module, "SwedishLightStemFilter", 0);
          }

          void t_SwedishLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SwedishLightStemFilter).tp_dict, "class_", make_descriptor(SwedishLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SwedishLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_SwedishLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SwedishLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SwedishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SwedishLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_SwedishLightStemFilter::wrap_Object(SwedishLightStemFilter(((t_SwedishLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_SwedishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SwedishLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SwedishLightStemFilter_init_(t_SwedishLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            SwedishLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = SwedishLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SwedishLightStemFilter_incrementToken(t_SwedishLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SwedishLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PrintStreamInfoStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PrintStreamInfoStream::class$ = NULL;
        jmethodID *PrintStreamInfoStream::mids$ = NULL;
        bool PrintStreamInfoStream::live$ = false;

        jclass PrintStreamInfoStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PrintStreamInfoStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1b7c898b] = env->getMethodID(cls, "<init>", "(Ljava/io/PrintStream;)V");
            mids$[mid_init$_be16aeab] = env->getMethodID(cls, "<init>", "(Ljava/io/PrintStream;I)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_isEnabled_5fdc3f44] = env->getMethodID(cls, "isEnabled", "(Ljava/lang/String;)Z");
            mids$[mid_isSystemStream_54c6a16a] = env->getMethodID(cls, "isSystemStream", "()Z");
            mids$[mid_message_4a264742] = env->getMethodID(cls, "message", "(Ljava/lang/String;Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PrintStreamInfoStream::PrintStreamInfoStream(const ::java::io::PrintStream & a0) : ::org::apache::lucene::util::InfoStream(env->newObject(initializeClass, &mids$, mid_init$_1b7c898b, a0.this$)) {}

        PrintStreamInfoStream::PrintStreamInfoStream(const ::java::io::PrintStream & a0, jint a1) : ::org::apache::lucene::util::InfoStream(env->newObject(initializeClass, &mids$, mid_init$_be16aeab, a0.this$, a1)) {}

        void PrintStreamInfoStream::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jboolean PrintStreamInfoStream::isEnabled(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_isEnabled_5fdc3f44], a0.this$);
        }

        jboolean PrintStreamInfoStream::isSystemStream() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isSystemStream_54c6a16a]);
        }

        void PrintStreamInfoStream::message(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_message_4a264742], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PrintStreamInfoStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrintStreamInfoStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PrintStreamInfoStream_init_(t_PrintStreamInfoStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PrintStreamInfoStream_close(t_PrintStreamInfoStream *self, PyObject *args);
        static PyObject *t_PrintStreamInfoStream_isEnabled(t_PrintStreamInfoStream *self, PyObject *args);
        static PyObject *t_PrintStreamInfoStream_isSystemStream(t_PrintStreamInfoStream *self);
        static PyObject *t_PrintStreamInfoStream_message(t_PrintStreamInfoStream *self, PyObject *args);
        static PyObject *t_PrintStreamInfoStream_get__systemStream(t_PrintStreamInfoStream *self, void *data);
        static PyGetSetDef t_PrintStreamInfoStream__fields_[] = {
          DECLARE_GET_FIELD(t_PrintStreamInfoStream, systemStream),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PrintStreamInfoStream__methods_[] = {
          DECLARE_METHOD(t_PrintStreamInfoStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrintStreamInfoStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrintStreamInfoStream, close, METH_VARARGS),
          DECLARE_METHOD(t_PrintStreamInfoStream, isEnabled, METH_VARARGS),
          DECLARE_METHOD(t_PrintStreamInfoStream, isSystemStream, METH_NOARGS),
          DECLARE_METHOD(t_PrintStreamInfoStream, message, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PrintStreamInfoStream, t_PrintStreamInfoStream, ::org::apache::lucene::util::InfoStream, PrintStreamInfoStream, t_PrintStreamInfoStream_init_, 0, 0, t_PrintStreamInfoStream__fields_, 0, 0);

        void t_PrintStreamInfoStream::install(PyObject *module)
        {
          installType(&PY_TYPE(PrintStreamInfoStream), module, "PrintStreamInfoStream", 0);
        }

        void t_PrintStreamInfoStream::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PrintStreamInfoStream).tp_dict, "class_", make_descriptor(PrintStreamInfoStream::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PrintStreamInfoStream).tp_dict, "wrapfn_", make_descriptor(t_PrintStreamInfoStream::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PrintStreamInfoStream).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PrintStreamInfoStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PrintStreamInfoStream::initializeClass, 1)))
            return NULL;
          return t_PrintStreamInfoStream::wrap_Object(PrintStreamInfoStream(((t_PrintStreamInfoStream *) arg)->object.this$));
        }
        static PyObject *t_PrintStreamInfoStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PrintStreamInfoStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PrintStreamInfoStream_init_(t_PrintStreamInfoStream *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::PrintStream a0((jobject) NULL);
              PrintStreamInfoStream object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::PrintStream::initializeClass, &a0))
              {
                INT_CALL(object = PrintStreamInfoStream(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::io::PrintStream a0((jobject) NULL);
              jint a1;
              PrintStreamInfoStream object((jobject) NULL);

              if (!parseArgs(args, "kI", ::java::io::PrintStream::initializeClass, &a0, &a1))
              {
                INT_CALL(object = PrintStreamInfoStream(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PrintStreamInfoStream_close(t_PrintStreamInfoStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PrintStreamInfoStream), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_PrintStreamInfoStream_isEnabled(t_PrintStreamInfoStream *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.isEnabled(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PrintStreamInfoStream), (PyObject *) self, "isEnabled", args, 2);
        }

        static PyObject *t_PrintStreamInfoStream_isSystemStream(t_PrintStreamInfoStream *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isSystemStream());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_PrintStreamInfoStream_message(t_PrintStreamInfoStream *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.message(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PrintStreamInfoStream), (PyObject *) self, "message", args, 2);
        }

        static PyObject *t_PrintStreamInfoStream_get__systemStream(t_PrintStreamInfoStream *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isSystemStream());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekStemmer::class$ = NULL;
          jmethodID *GreekStemmer::mids$ = NULL;
          bool GreekStemmer::live$ = false;

          jclass GreekStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekStemmer::GreekStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint GreekStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekStemmer_init_(t_GreekStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekStemmer_stem(t_GreekStemmer *self, PyObject *args);

          static PyMethodDef t_GreekStemmer__methods_[] = {
            DECLARE_METHOD(t_GreekStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GreekStemmer, t_GreekStemmer, ::java::lang::Object, GreekStemmer, t_GreekStemmer_init_, 0, 0, 0, 0, 0);

          void t_GreekStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekStemmer), module, "GreekStemmer", 0);
          }

          void t_GreekStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GreekStemmer).tp_dict, "class_", make_descriptor(GreekStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GreekStemmer).tp_dict, "wrapfn_", make_descriptor(t_GreekStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GreekStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GreekStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekStemmer::initializeClass, 1)))
              return NULL;
            return t_GreekStemmer::wrap_Object(GreekStemmer(((t_GreekStemmer *) arg)->object.this$));
          }
          static PyObject *t_GreekStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekStemmer_init_(t_GreekStemmer *self, PyObject *args, PyObject *kwds)
          {
            GreekStemmer object((jobject) NULL);

            INT_CALL(object = GreekStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_GreekStemmer_stem(t_GreekStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/Class.h"
#include "java/lang/Comparable.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntsRef::class$ = NULL;
        jmethodID *IntsRef::mids$ = NULL;
        jfieldID *IntsRef::fids$ = NULL;
        bool IntsRef::live$ = false;
        JArray< jint > *IntsRef::EMPTY_INTS = NULL;

        jclass IntsRef::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntsRef");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_3e1ea22c] = env->getMethodID(cls, "<init>", "([III)V");
            mids$[mid_clone_5b734841] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/IntsRef;");
            mids$[mid_compareTo_4defa0f7] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/util/IntsRef;)I");
            mids$[mid_copyInts_4defa0e8] = env->getMethodID(cls, "copyInts", "(Lorg/apache/lucene/util/IntsRef;)V");
            mids$[mid_deepCopyOf_44b4216f] = env->getStaticMethodID(cls, "deepCopyOf", "(Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_grow_39c7bd3c] = env->getMethodID(cls, "grow", "(I)V");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_intsEquals_4defa0e4] = env->getMethodID(cls, "intsEquals", "(Lorg/apache/lucene/util/IntsRef;)Z");
            mids$[mid_isValid_54c6a16a] = env->getMethodID(cls, "isValid", "()Z");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_ints] = env->getFieldID(cls, "ints", "[I");
            fids$[fid_length] = env->getFieldID(cls, "length", "I");
            fids$[fid_offset] = env->getFieldID(cls, "offset", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_INTS = new JArray< jint >(env->getStaticObjectField(cls, "EMPTY_INTS", "[I"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntsRef::IntsRef() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        IntsRef::IntsRef(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        IntsRef::IntsRef(const JArray< jint > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3e1ea22c, a0.this$, a1, a2)) {}

        IntsRef IntsRef::clone() const
        {
          return IntsRef(env->callObjectMethod(this$, mids$[mid_clone_5b734841]));
        }

        jint IntsRef::compareTo(const IntsRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_4defa0f7], a0.this$);
        }

        void IntsRef::copyInts(const IntsRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyInts_4defa0e8], a0.this$);
        }

        IntsRef IntsRef::deepCopyOf(const IntsRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return IntsRef(env->callStaticObjectMethod(cls, mids$[mid_deepCopyOf_44b4216f], a0.this$));
        }

        jboolean IntsRef::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void IntsRef::grow(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_grow_39c7bd3c], a0);
        }

        jint IntsRef::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean IntsRef::intsEquals(const IntsRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_intsEquals_4defa0e4], a0.this$);
        }

        jboolean IntsRef::isValid() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isValid_54c6a16a]);
        }

        ::java::lang::String IntsRef::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        JArray< jint > IntsRef::_get_ints() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_ints]));
        }

        void IntsRef::_set_ints(const JArray< jint > & a0) const
        {
          env->setObjectField(this$, fids$[fid_ints], a0.this$);
        }

        jint IntsRef::_get_length() const
        {
          return env->getIntField(this$, fids$[fid_length]);
        }

        void IntsRef::_set_length(jint a0) const
        {
          env->setIntField(this$, fids$[fid_length], a0);
        }

        jint IntsRef::_get_offset() const
        {
          return env->getIntField(this$, fids$[fid_offset]);
        }

        void IntsRef::_set_offset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_offset], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntsRef_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntsRef_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntsRef_init_(t_IntsRef *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntsRef_clone(t_IntsRef *self);
        static PyObject *t_IntsRef_compareTo(t_IntsRef *self, PyObject *arg);
        static PyObject *t_IntsRef_copyInts(t_IntsRef *self, PyObject *arg);
        static PyObject *t_IntsRef_deepCopyOf(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntsRef_equals(t_IntsRef *self, PyObject *args);
        static PyObject *t_IntsRef_grow(t_IntsRef *self, PyObject *arg);
        static PyObject *t_IntsRef_hashCode(t_IntsRef *self, PyObject *args);
        static PyObject *t_IntsRef_intsEquals(t_IntsRef *self, PyObject *arg);
        static PyObject *t_IntsRef_isValid(t_IntsRef *self);
        static PyObject *t_IntsRef_toString(t_IntsRef *self, PyObject *args);
        static PyObject *t_IntsRef_get__ints(t_IntsRef *self, void *data);
        static int t_IntsRef_set__ints(t_IntsRef *self, PyObject *arg, void *data);
        static PyObject *t_IntsRef_get__length(t_IntsRef *self, void *data);
        static int t_IntsRef_set__length(t_IntsRef *self, PyObject *arg, void *data);
        static PyObject *t_IntsRef_get__offset(t_IntsRef *self, void *data);
        static int t_IntsRef_set__offset(t_IntsRef *self, PyObject *arg, void *data);

        static PyObject *t_IntsRef_get__valid(t_IntsRef *self, void *data);
        static PyGetSetDef t_IntsRef__fields_[] = {
          DECLARE_GETSET_FIELD(t_IntsRef, ints),
          DECLARE_GETSET_FIELD(t_IntsRef, length),
          DECLARE_GETSET_FIELD(t_IntsRef, offset),
          DECLARE_GET_FIELD(t_IntsRef, valid),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IntsRef__methods_[] = {
          DECLARE_METHOD(t_IntsRef, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntsRef, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntsRef, clone, METH_NOARGS),
          DECLARE_METHOD(t_IntsRef, compareTo, METH_O),
          DECLARE_METHOD(t_IntsRef, copyInts, METH_O),
          DECLARE_METHOD(t_IntsRef, deepCopyOf, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntsRef, equals, METH_VARARGS),
          DECLARE_METHOD(t_IntsRef, grow, METH_O),
          DECLARE_METHOD(t_IntsRef, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IntsRef, intsEquals, METH_O),
          DECLARE_METHOD(t_IntsRef, isValid, METH_NOARGS),
          DECLARE_METHOD(t_IntsRef, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntsRef, t_IntsRef, ::java::lang::Object, IntsRef, t_IntsRef_init_, 0, 0, t_IntsRef__fields_, 0, 0);

        void t_IntsRef::install(PyObject *module)
        {
          installType(&PY_TYPE(IntsRef), module, "IntsRef", 0);
        }

        void t_IntsRef::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntsRef).tp_dict, "class_", make_descriptor(IntsRef::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntsRef).tp_dict, "wrapfn_", make_descriptor(t_IntsRef::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntsRef).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IntsRef::initializeClass);
          PyDict_SetItemString(PY_TYPE(IntsRef).tp_dict, "EMPTY_INTS", make_descriptor(IntsRef::EMPTY_INTS->wrap()));
        }

        static PyObject *t_IntsRef_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntsRef::initializeClass, 1)))
            return NULL;
          return t_IntsRef::wrap_Object(IntsRef(((t_IntsRef *) arg)->object.this$));
        }
        static PyObject *t_IntsRef_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntsRef::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntsRef_init_(t_IntsRef *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              IntsRef object((jobject) NULL);

              INT_CALL(object = IntsRef());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              jint a0;
              IntsRef object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = IntsRef(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jint > a0((jobject) NULL);
              jint a1;
              jint a2;
              IntsRef object((jobject) NULL);

              if (!parseArgs(args, "[III", &a0, &a1, &a2))
              {
                INT_CALL(object = IntsRef(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntsRef_clone(t_IntsRef *self)
        {
          IntsRef result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_IntsRef::wrap_Object(result);
        }

        static PyObject *t_IntsRef_compareTo(t_IntsRef *self, PyObject *arg)
        {
          IntsRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", IntsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_IntsRef_copyInts(t_IntsRef *self, PyObject *arg)
        {
          IntsRef a0((jobject) NULL);

          if (!parseArg(arg, "k", IntsRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyInts(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyInts", arg);
          return NULL;
        }

        static PyObject *t_IntsRef_deepCopyOf(PyTypeObject *type, PyObject *arg)
        {
          IntsRef a0((jobject) NULL);
          IntsRef result((jobject) NULL);

          if (!parseArg(arg, "k", IntsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::IntsRef::deepCopyOf(a0));
            return t_IntsRef::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "deepCopyOf", arg);
          return NULL;
        }

        static PyObject *t_IntsRef_equals(t_IntsRef *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(IntsRef), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IntsRef_grow(t_IntsRef *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.grow(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "grow", arg);
          return NULL;
        }

        static PyObject *t_IntsRef_hashCode(t_IntsRef *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IntsRef), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IntsRef_intsEquals(t_IntsRef *self, PyObject *arg)
        {
          IntsRef a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", IntsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.intsEquals(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "intsEquals", arg);
          return NULL;
        }

        static PyObject *t_IntsRef_isValid(t_IntsRef *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isValid());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IntsRef_toString(t_IntsRef *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(IntsRef), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_IntsRef_get__ints(t_IntsRef *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_ints());
          return value.wrap();
        }
        static int t_IntsRef_set__ints(t_IntsRef *self, PyObject *arg, void *data)
        {
          JArray< jint > value((jobject) NULL);
          if (!parseArg(arg, "[I", &value))
          {
            INT_CALL(self->object._set_ints(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "ints", arg);
          return -1;
        }

        static PyObject *t_IntsRef_get__length(t_IntsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_length());
          return PyInt_FromLong((long) value);
        }
        static int t_IntsRef_set__length(t_IntsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_length(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "length", arg);
          return -1;
        }

        static PyObject *t_IntsRef_get__offset(t_IntsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_offset());
          return PyInt_FromLong((long) value);
        }
        static int t_IntsRef_set__offset(t_IntsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_offset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "offset", arg);
          return -1;
        }

        static PyObject *t_IntsRef_get__valid(t_IntsRef *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isValid());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/PlainTextDictionary.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/File.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/io/InputStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *PlainTextDictionary::class$ = NULL;
          jmethodID *PlainTextDictionary::mids$ = NULL;
          bool PlainTextDictionary::live$ = false;

          jclass PlainTextDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/PlainTextDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
              mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
              mids$[mid_getEntryIterator_23dc46b1] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PlainTextDictionary::PlainTextDictionary(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          PlainTextDictionary::PlainTextDictionary(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

          PlainTextDictionary::PlainTextDictionary(const ::java::io::File & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

          ::org::apache::lucene::search::suggest::InputIterator PlainTextDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_23dc46b1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_PlainTextDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PlainTextDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PlainTextDictionary_init_(t_PlainTextDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PlainTextDictionary_getEntryIterator(t_PlainTextDictionary *self);
          static PyObject *t_PlainTextDictionary_get__entryIterator(t_PlainTextDictionary *self, void *data);
          static PyGetSetDef t_PlainTextDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_PlainTextDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PlainTextDictionary__methods_[] = {
            DECLARE_METHOD(t_PlainTextDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PlainTextDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PlainTextDictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PlainTextDictionary, t_PlainTextDictionary, ::java::lang::Object, PlainTextDictionary, t_PlainTextDictionary_init_, 0, 0, t_PlainTextDictionary__fields_, 0, 0);

          void t_PlainTextDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(PlainTextDictionary), module, "PlainTextDictionary", 0);
          }

          void t_PlainTextDictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PlainTextDictionary).tp_dict, "class_", make_descriptor(PlainTextDictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PlainTextDictionary).tp_dict, "wrapfn_", make_descriptor(t_PlainTextDictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PlainTextDictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PlainTextDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PlainTextDictionary::initializeClass, 1)))
              return NULL;
            return t_PlainTextDictionary::wrap_Object(PlainTextDictionary(((t_PlainTextDictionary *) arg)->object.this$));
          }
          static PyObject *t_PlainTextDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PlainTextDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PlainTextDictionary_init_(t_PlainTextDictionary *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                PlainTextDictionary object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = PlainTextDictionary(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::InputStream a0((jobject) NULL);
                PlainTextDictionary object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                {
                  INT_CALL(object = PlainTextDictionary(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::File a0((jobject) NULL);
                PlainTextDictionary object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
                {
                  INT_CALL(object = PlainTextDictionary(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PlainTextDictionary_getEntryIterator(t_PlainTextDictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_PlainTextDictionary_get__entryIterator(t_PlainTextDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocIdSetIterator::class$ = NULL;
        jmethodID *DocIdSetIterator::mids$ = NULL;
        bool DocIdSetIterator::live$ = false;
        jint DocIdSetIterator::NO_MORE_DOCS = (jint) 0;

        jclass DocIdSetIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocIdSetIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_empty_dc23660c] = env->getStaticMethodID(cls, "empty", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_slowAdvance_39c7bd23] = env->getMethodID(cls, "slowAdvance", "(I)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            NO_MORE_DOCS = env->getStaticIntField(cls, "NO_MORE_DOCS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocIdSetIterator::DocIdSetIterator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint DocIdSetIterator::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jlong DocIdSetIterator::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint DocIdSetIterator::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        DocIdSetIterator DocIdSetIterator::empty()
        {
          jclass cls = env->getClass(initializeClass);
          return DocIdSetIterator(env->callStaticObjectMethod(cls, mids$[mid_empty_dc23660c]));
        }

        jint DocIdSetIterator::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocIdSetIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocIdSetIterator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocIdSetIterator_init_(t_DocIdSetIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocIdSetIterator_advance(t_DocIdSetIterator *self, PyObject *arg);
        static PyObject *t_DocIdSetIterator_cost(t_DocIdSetIterator *self);
        static PyObject *t_DocIdSetIterator_docID(t_DocIdSetIterator *self);
        static PyObject *t_DocIdSetIterator_empty(PyTypeObject *type);
        static PyObject *t_DocIdSetIterator_nextDoc(t_DocIdSetIterator *self);

        static PyMethodDef t_DocIdSetIterator__methods_[] = {
          DECLARE_METHOD(t_DocIdSetIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdSetIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdSetIterator, advance, METH_O),
          DECLARE_METHOD(t_DocIdSetIterator, cost, METH_NOARGS),
          DECLARE_METHOD(t_DocIdSetIterator, docID, METH_NOARGS),
          DECLARE_METHOD(t_DocIdSetIterator, empty, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocIdSetIterator, nextDoc, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocIdSetIterator, t_DocIdSetIterator, ::java::lang::Object, DocIdSetIterator, t_DocIdSetIterator_init_, 0, 0, 0, 0, 0);

        void t_DocIdSetIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(DocIdSetIterator), module, "DocIdSetIterator", 0);
        }

        void t_DocIdSetIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocIdSetIterator).tp_dict, "class_", make_descriptor(DocIdSetIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocIdSetIterator).tp_dict, "wrapfn_", make_descriptor(t_DocIdSetIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocIdSetIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DocIdSetIterator::initializeClass);
          PyDict_SetItemString(PY_TYPE(DocIdSetIterator).tp_dict, "NO_MORE_DOCS", make_descriptor(DocIdSetIterator::NO_MORE_DOCS));
        }

        static PyObject *t_DocIdSetIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocIdSetIterator::initializeClass, 1)))
            return NULL;
          return t_DocIdSetIterator::wrap_Object(DocIdSetIterator(((t_DocIdSetIterator *) arg)->object.this$));
        }
        static PyObject *t_DocIdSetIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocIdSetIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocIdSetIterator_init_(t_DocIdSetIterator *self, PyObject *args, PyObject *kwds)
        {
          DocIdSetIterator object((jobject) NULL);

          INT_CALL(object = DocIdSetIterator());
          self->object = object;

          return 0;
        }

        static PyObject *t_DocIdSetIterator_advance(t_DocIdSetIterator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "advance", arg);
          return NULL;
        }

        static PyObject *t_DocIdSetIterator_cost(t_DocIdSetIterator *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.cost());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DocIdSetIterator_docID(t_DocIdSetIterator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.docID());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DocIdSetIterator_empty(PyTypeObject *type)
        {
          DocIdSetIterator result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::DocIdSetIterator::empty());
          return t_DocIdSetIterator::wrap_Object(result);
        }

        static PyObject *t_DocIdSetIterator_nextDoc(t_DocIdSetIterator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.nextDoc());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerImpl.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardTokenizerImpl::class$ = NULL;
          jmethodID *StandardTokenizerImpl::mids$ = NULL;
          bool StandardTokenizerImpl::live$ = false;
          jint StandardTokenizerImpl::HANGUL_TYPE = (jint) 0;
          jint StandardTokenizerImpl::HIRAGANA_TYPE = (jint) 0;
          jint StandardTokenizerImpl::IDEOGRAPHIC_TYPE = (jint) 0;
          jint StandardTokenizerImpl::KATAKANA_TYPE = (jint) 0;
          jint StandardTokenizerImpl::NUMERIC_TYPE = (jint) 0;
          jint StandardTokenizerImpl::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
          jint StandardTokenizerImpl::WORD_TYPE = (jint) 0;
          jint StandardTokenizerImpl::YYEOF = (jint) 0;
          jint StandardTokenizerImpl::YYINITIAL = (jint) 0;

          jclass StandardTokenizerImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardTokenizerImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
              mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
              mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
              mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
              mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
              mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
              mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
              mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
              mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
              mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
              mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
              HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
              IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
              KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
              NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
              SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
              WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
              YYEOF = env->getStaticIntField(cls, "YYEOF");
              YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StandardTokenizerImpl::StandardTokenizerImpl(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          jint StandardTokenizerImpl::getNextToken() const
          {
            return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
          }

          void StandardTokenizerImpl::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
          }

          void StandardTokenizerImpl::yybegin(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
          }

          jint StandardTokenizerImpl::yychar() const
          {
            return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
          }

          jchar StandardTokenizerImpl::yycharat(jint a0) const
          {
            return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
          }

          void StandardTokenizerImpl::yyclose() const
          {
            env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
          }

          jint StandardTokenizerImpl::yylength() const
          {
            return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
          }

          void StandardTokenizerImpl::yypushback(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
          }

          void StandardTokenizerImpl::yyreset(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
          }

          jint StandardTokenizerImpl::yystate() const
          {
            return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
          }

          ::java::lang::String StandardTokenizerImpl::yytext() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardTokenizerImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StandardTokenizerImpl_init_(t_StandardTokenizerImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StandardTokenizerImpl_getNextToken(t_StandardTokenizerImpl *self);
          static PyObject *t_StandardTokenizerImpl_getText(t_StandardTokenizerImpl *self, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_yybegin(t_StandardTokenizerImpl *self, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_yychar(t_StandardTokenizerImpl *self);
          static PyObject *t_StandardTokenizerImpl_yycharat(t_StandardTokenizerImpl *self, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_yyclose(t_StandardTokenizerImpl *self);
          static PyObject *t_StandardTokenizerImpl_yylength(t_StandardTokenizerImpl *self);
          static PyObject *t_StandardTokenizerImpl_yypushback(t_StandardTokenizerImpl *self, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_yyreset(t_StandardTokenizerImpl *self, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_yystate(t_StandardTokenizerImpl *self);
          static PyObject *t_StandardTokenizerImpl_yytext(t_StandardTokenizerImpl *self);
          static PyObject *t_StandardTokenizerImpl_get__nextToken(t_StandardTokenizerImpl *self, void *data);
          static PyGetSetDef t_StandardTokenizerImpl__fields_[] = {
            DECLARE_GET_FIELD(t_StandardTokenizerImpl, nextToken),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StandardTokenizerImpl__methods_[] = {
            DECLARE_METHOD(t_StandardTokenizerImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizerImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizerImpl, getNextToken, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerImpl, getText, METH_O),
            DECLARE_METHOD(t_StandardTokenizerImpl, yybegin, METH_O),
            DECLARE_METHOD(t_StandardTokenizerImpl, yychar, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerImpl, yycharat, METH_O),
            DECLARE_METHOD(t_StandardTokenizerImpl, yyclose, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerImpl, yylength, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerImpl, yypushback, METH_O),
            DECLARE_METHOD(t_StandardTokenizerImpl, yyreset, METH_O),
            DECLARE_METHOD(t_StandardTokenizerImpl, yystate, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerImpl, yytext, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StandardTokenizerImpl, t_StandardTokenizerImpl, ::java::lang::Object, StandardTokenizerImpl, t_StandardTokenizerImpl_init_, 0, 0, t_StandardTokenizerImpl__fields_, 0, 0);

          void t_StandardTokenizerImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardTokenizerImpl), module, "StandardTokenizerImpl", 0);
          }

          void t_StandardTokenizerImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "class_", make_descriptor(StandardTokenizerImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "wrapfn_", make_descriptor(t_StandardTokenizerImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(StandardTokenizerImpl::initializeClass);
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "HANGUL_TYPE", make_descriptor(StandardTokenizerImpl::HANGUL_TYPE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "HIRAGANA_TYPE", make_descriptor(StandardTokenizerImpl::HIRAGANA_TYPE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(StandardTokenizerImpl::IDEOGRAPHIC_TYPE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "KATAKANA_TYPE", make_descriptor(StandardTokenizerImpl::KATAKANA_TYPE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "NUMERIC_TYPE", make_descriptor(StandardTokenizerImpl::NUMERIC_TYPE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(StandardTokenizerImpl::SOUTH_EAST_ASIAN_TYPE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "WORD_TYPE", make_descriptor(StandardTokenizerImpl::WORD_TYPE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "YYEOF", make_descriptor(StandardTokenizerImpl::YYEOF));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "YYINITIAL", make_descriptor(StandardTokenizerImpl::YYINITIAL));
          }

          static PyObject *t_StandardTokenizerImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardTokenizerImpl::initializeClass, 1)))
              return NULL;
            return t_StandardTokenizerImpl::wrap_Object(StandardTokenizerImpl(((t_StandardTokenizerImpl *) arg)->object.this$));
          }
          static PyObject *t_StandardTokenizerImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardTokenizerImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StandardTokenizerImpl_init_(t_StandardTokenizerImpl *self, PyObject *args, PyObject *kwds)
          {
            ::java::io::Reader a0((jobject) NULL);
            StandardTokenizerImpl object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              INT_CALL(object = StandardTokenizerImpl(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StandardTokenizerImpl_getNextToken(t_StandardTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNextToken());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerImpl_getText(t_StandardTokenizerImpl *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
            {
              OBJ_CALL(self->object.getText(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "getText", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerImpl_yybegin(t_StandardTokenizerImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.yybegin(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerImpl_yychar(t_StandardTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yychar());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerImpl_yycharat(t_StandardTokenizerImpl *self, PyObject *arg)
          {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.yycharat(a0));
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerImpl_yyclose(t_StandardTokenizerImpl *self)
          {
            OBJ_CALL(self->object.yyclose());
            Py_RETURN_NONE;
          }

          static PyObject *t_StandardTokenizerImpl_yylength(t_StandardTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yylength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerImpl_yypushback(t_StandardTokenizerImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.yypushback(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerImpl_yyreset(t_StandardTokenizerImpl *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.yyreset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerImpl_yystate(t_StandardTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yystate());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerImpl_yytext(t_StandardTokenizerImpl *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.yytext());
            return j2p(result);
          }

          static PyObject *t_StandardTokenizerImpl_get__nextToken(t_StandardTokenizerImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNextToken());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/nl/DutchStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/nl/DutchStemmer.h"
#include "java/util/Map.h"
#include "java/util/HashMap.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace nl {

          ::java::lang::Class *DutchStemFilter::class$ = NULL;
          jmethodID *DutchStemFilter::mids$ = NULL;
          bool DutchStemFilter::live$ = false;

          jclass DutchStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/nl/DutchStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_d492dbba] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/util/Map;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_setStemDictionary_70cdf88c] = env->getMethodID(cls, "setStemDictionary", "(Ljava/util/HashMap;)V");
              mids$[mid_setStemmer_b66a40d3] = env->getMethodID(cls, "setStemmer", "(Lorg/apache/lucene/analysis/nl/DutchStemmer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DutchStemFilter::DutchStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          DutchStemFilter::DutchStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::util::Map & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d492dbba, a0.this$, a1.this$)) {}

          jboolean DutchStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void DutchStemFilter::setStemDictionary(const ::java::util::HashMap & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStemDictionary_70cdf88c], a0.this$);
          }

          void DutchStemFilter::setStemmer(const ::org::apache::lucene::analysis::nl::DutchStemmer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStemmer_b66a40d3], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace nl {
          static PyObject *t_DutchStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DutchStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DutchStemFilter_init_(t_DutchStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DutchStemFilter_incrementToken(t_DutchStemFilter *self, PyObject *args);
          static PyObject *t_DutchStemFilter_setStemDictionary(t_DutchStemFilter *self, PyObject *arg);
          static PyObject *t_DutchStemFilter_setStemmer(t_DutchStemFilter *self, PyObject *arg);
          static int t_DutchStemFilter_set__stemDictionary(t_DutchStemFilter *self, PyObject *arg, void *data);
          static int t_DutchStemFilter_set__stemmer(t_DutchStemFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_DutchStemFilter__fields_[] = {
            DECLARE_SET_FIELD(t_DutchStemFilter, stemDictionary),
            DECLARE_SET_FIELD(t_DutchStemFilter, stemmer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DutchStemFilter__methods_[] = {
            DECLARE_METHOD(t_DutchStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DutchStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DutchStemFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_DutchStemFilter, setStemDictionary, METH_O),
            DECLARE_METHOD(t_DutchStemFilter, setStemmer, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DutchStemFilter, t_DutchStemFilter, ::org::apache::lucene::analysis::TokenFilter, DutchStemFilter, t_DutchStemFilter_init_, 0, 0, t_DutchStemFilter__fields_, 0, 0);

          void t_DutchStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(DutchStemFilter), module, "DutchStemFilter", 0);
          }

          void t_DutchStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DutchStemFilter).tp_dict, "class_", make_descriptor(DutchStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DutchStemFilter).tp_dict, "wrapfn_", make_descriptor(t_DutchStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DutchStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DutchStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DutchStemFilter::initializeClass, 1)))
              return NULL;
            return t_DutchStemFilter::wrap_Object(DutchStemFilter(((t_DutchStemFilter *) arg)->object.this$));
          }
          static PyObject *t_DutchStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DutchStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DutchStemFilter_init_(t_DutchStemFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                DutchStemFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = DutchStemFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                DutchStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  INT_CALL(object = DutchStemFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DutchStemFilter_incrementToken(t_DutchStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(DutchStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_DutchStemFilter_setStemDictionary(t_DutchStemFilter *self, PyObject *arg)
          {
            ::java::util::HashMap a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::HashMap::initializeClass, &a0, &p0, ::java::util::t_HashMap::parameters_))
            {
              OBJ_CALL(self->object.setStemDictionary(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStemDictionary", arg);
            return NULL;
          }

          static PyObject *t_DutchStemFilter_setStemmer(t_DutchStemFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::nl::DutchStemmer a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::nl::DutchStemmer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setStemmer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStemmer", arg);
            return NULL;
          }

          static int t_DutchStemFilter_set__stemDictionary(t_DutchStemFilter *self, PyObject *arg, void *data)
          {
            {
              ::java::util::HashMap value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::HashMap::initializeClass, &value))
              {
                INT_CALL(self->object.setStemDictionary(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stemDictionary", arg);
            return -1;
          }

          static int t_DutchStemFilter_set__stemmer(t_DutchStemFilter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::nl::DutchStemmer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::nl::DutchStemmer::initializeClass, &value))
              {
                INT_CALL(self->object.setStemmer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stemmer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/SingleTokenTokenStream.h"
#include "org/apache/lucene/analysis/Token.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *SingleTokenTokenStream::class$ = NULL;
          jmethodID *SingleTokenTokenStream::mids$ = NULL;
          bool SingleTokenTokenStream::live$ = false;

          jclass SingleTokenTokenStream::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/SingleTokenTokenStream");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4f6e7002] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Token;)V");
              mids$[mid_getToken_55852c17] = env->getMethodID(cls, "getToken", "()Lorg/apache/lucene/analysis/Token;");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setToken_4f6e7002] = env->getMethodID(cls, "setToken", "(Lorg/apache/lucene/analysis/Token;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SingleTokenTokenStream::SingleTokenTokenStream(const ::org::apache::lucene::analysis::Token & a0) : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_4f6e7002, a0.this$)) {}

          ::org::apache::lucene::analysis::Token SingleTokenTokenStream::getToken() const
          {
            return ::org::apache::lucene::analysis::Token(env->callObjectMethod(this$, mids$[mid_getToken_55852c17]));
          }

          jboolean SingleTokenTokenStream::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void SingleTokenTokenStream::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void SingleTokenTokenStream::setToken(const ::org::apache::lucene::analysis::Token & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setToken_4f6e7002], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_SingleTokenTokenStream_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SingleTokenTokenStream_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SingleTokenTokenStream_init_(t_SingleTokenTokenStream *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SingleTokenTokenStream_getToken(t_SingleTokenTokenStream *self);
          static PyObject *t_SingleTokenTokenStream_incrementToken(t_SingleTokenTokenStream *self, PyObject *args);
          static PyObject *t_SingleTokenTokenStream_reset(t_SingleTokenTokenStream *self, PyObject *args);
          static PyObject *t_SingleTokenTokenStream_setToken(t_SingleTokenTokenStream *self, PyObject *arg);
          static PyObject *t_SingleTokenTokenStream_get__token(t_SingleTokenTokenStream *self, void *data);
          static int t_SingleTokenTokenStream_set__token(t_SingleTokenTokenStream *self, PyObject *arg, void *data);
          static PyGetSetDef t_SingleTokenTokenStream__fields_[] = {
            DECLARE_GETSET_FIELD(t_SingleTokenTokenStream, token),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SingleTokenTokenStream__methods_[] = {
            DECLARE_METHOD(t_SingleTokenTokenStream, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SingleTokenTokenStream, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SingleTokenTokenStream, getToken, METH_NOARGS),
            DECLARE_METHOD(t_SingleTokenTokenStream, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_SingleTokenTokenStream, reset, METH_VARARGS),
            DECLARE_METHOD(t_SingleTokenTokenStream, setToken, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SingleTokenTokenStream, t_SingleTokenTokenStream, ::org::apache::lucene::analysis::TokenStream, SingleTokenTokenStream, t_SingleTokenTokenStream_init_, 0, 0, t_SingleTokenTokenStream__fields_, 0, 0);

          void t_SingleTokenTokenStream::install(PyObject *module)
          {
            installType(&PY_TYPE(SingleTokenTokenStream), module, "SingleTokenTokenStream", 0);
          }

          void t_SingleTokenTokenStream::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SingleTokenTokenStream).tp_dict, "class_", make_descriptor(SingleTokenTokenStream::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SingleTokenTokenStream).tp_dict, "wrapfn_", make_descriptor(t_SingleTokenTokenStream::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SingleTokenTokenStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SingleTokenTokenStream_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SingleTokenTokenStream::initializeClass, 1)))
              return NULL;
            return t_SingleTokenTokenStream::wrap_Object(SingleTokenTokenStream(((t_SingleTokenTokenStream *) arg)->object.this$));
          }
          static PyObject *t_SingleTokenTokenStream_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SingleTokenTokenStream::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SingleTokenTokenStream_init_(t_SingleTokenTokenStream *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::Token a0((jobject) NULL);
            SingleTokenTokenStream object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Token::initializeClass, &a0))
            {
              INT_CALL(object = SingleTokenTokenStream(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SingleTokenTokenStream_getToken(t_SingleTokenTokenStream *self)
          {
            ::org::apache::lucene::analysis::Token result((jobject) NULL);
            OBJ_CALL(result = self->object.getToken());
            return ::org::apache::lucene::analysis::t_Token::wrap_Object(result);
          }

          static PyObject *t_SingleTokenTokenStream_incrementToken(t_SingleTokenTokenStream *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SingleTokenTokenStream), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_SingleTokenTokenStream_reset(t_SingleTokenTokenStream *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SingleTokenTokenStream), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_SingleTokenTokenStream_setToken(t_SingleTokenTokenStream *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::Token a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Token::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setToken(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setToken", arg);
            return NULL;
          }

          static PyObject *t_SingleTokenTokenStream_get__token(t_SingleTokenTokenStream *self, void *data)
          {
            ::org::apache::lucene::analysis::Token value((jobject) NULL);
            OBJ_CALL(value = self->object.getToken());
            return ::org::apache::lucene::analysis::t_Token::wrap_Object(value);
          }
          static int t_SingleTokenTokenStream_set__token(t_SingleTokenTokenStream *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::Token value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Token::initializeClass, &value))
              {
                INT_CALL(self->object.setToken(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "token", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanNearQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/TermContext.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanNearQuery::class$ = NULL;
          jmethodID *SpanNearQuery::mids$ = NULL;
          bool SpanNearQuery::live$ = false;

          jclass SpanNearQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanNearQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4e7e9f44] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/spans/SpanQuery;IZ)V");
              mids$[mid_init$_ff909895] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/spans/SpanQuery;IZZ)V");
              mids$[mid_clone_7013cfcc] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/spans/SpanNearQuery;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getClauses_19569402] = env->getMethodID(cls, "getClauses", "()[Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getSlop_54c6a179] = env->getMethodID(cls, "getSlop", "()I");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isInOrder_54c6a16a] = env->getMethodID(cls, "isInOrder", "()Z");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanNearQuery::SpanNearQuery(const JArray< ::org::apache::lucene::search::spans::SpanQuery > & a0, jint a1, jboolean a2) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_4e7e9f44, a0.this$, a1, a2)) {}

          SpanNearQuery::SpanNearQuery(const JArray< ::org::apache::lucene::search::spans::SpanQuery > & a0, jint a1, jboolean a2, jboolean a3) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_ff909895, a0.this$, a1, a2, a3)) {}

          SpanNearQuery SpanNearQuery::clone() const
          {
            return SpanNearQuery(env->callObjectMethod(this$, mids$[mid_clone_7013cfcc]));
          }

          jboolean SpanNearQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void SpanNearQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          JArray< ::org::apache::lucene::search::spans::SpanQuery > SpanNearQuery::getClauses() const
          {
            return JArray< ::org::apache::lucene::search::spans::SpanQuery >(env->callObjectMethod(this$, mids$[mid_getClauses_19569402]));
          }

          ::java::lang::String SpanNearQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          jint SpanNearQuery::getSlop() const
          {
            return env->callIntMethod(this$, mids$[mid_getSlop_54c6a179]);
          }

          ::org::apache::lucene::search::spans::Spans SpanNearQuery::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }

          jint SpanNearQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jboolean SpanNearQuery::isInOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isInOrder_54c6a16a]);
          }

          ::org::apache::lucene::search::Query SpanNearQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String SpanNearQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanNearQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanNearQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanNearQuery_init_(t_SpanNearQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanNearQuery_clone(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_equals(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_extractTerms(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_getClauses(t_SpanNearQuery *self);
          static PyObject *t_SpanNearQuery_getField(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_getSlop(t_SpanNearQuery *self);
          static PyObject *t_SpanNearQuery_getSpans(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_hashCode(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_isInOrder(t_SpanNearQuery *self);
          static PyObject *t_SpanNearQuery_rewrite(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_toString(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_get__clauses(t_SpanNearQuery *self, void *data);
          static PyObject *t_SpanNearQuery_get__field(t_SpanNearQuery *self, void *data);
          static PyObject *t_SpanNearQuery_get__inOrder(t_SpanNearQuery *self, void *data);
          static PyObject *t_SpanNearQuery_get__slop(t_SpanNearQuery *self, void *data);
          static PyGetSetDef t_SpanNearQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanNearQuery, clauses),
            DECLARE_GET_FIELD(t_SpanNearQuery, field),
            DECLARE_GET_FIELD(t_SpanNearQuery, inOrder),
            DECLARE_GET_FIELD(t_SpanNearQuery, slop),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanNearQuery__methods_[] = {
            DECLARE_METHOD(t_SpanNearQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNearQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNearQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, getClauses, METH_NOARGS),
            DECLARE_METHOD(t_SpanNearQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, getSlop, METH_NOARGS),
            DECLARE_METHOD(t_SpanNearQuery, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, isInOrder, METH_NOARGS),
            DECLARE_METHOD(t_SpanNearQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanNearQuery, t_SpanNearQuery, ::org::apache::lucene::search::spans::SpanQuery, SpanNearQuery, t_SpanNearQuery_init_, 0, 0, t_SpanNearQuery__fields_, 0, 0);

          void t_SpanNearQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanNearQuery), module, "SpanNearQuery", 0);
          }

          void t_SpanNearQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanNearQuery).tp_dict, "class_", make_descriptor(SpanNearQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanNearQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanNearQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanNearQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanNearQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanNearQuery::initializeClass, 1)))
              return NULL;
            return t_SpanNearQuery::wrap_Object(SpanNearQuery(((t_SpanNearQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanNearQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanNearQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanNearQuery_init_(t_SpanNearQuery *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                JArray< ::org::apache::lucene::search::spans::SpanQuery > a0((jobject) NULL);
                jint a1;
                jboolean a2;
                SpanNearQuery object((jobject) NULL);

                if (!parseArgs(args, "[kIZ", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SpanNearQuery(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                JArray< ::org::apache::lucene::search::spans::SpanQuery > a0((jobject) NULL);
                jint a1;
                jboolean a2;
                jboolean a3;
                SpanNearQuery object((jobject) NULL);

                if (!parseArgs(args, "[kIZZ", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = SpanNearQuery(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanNearQuery_clone(t_SpanNearQuery *self, PyObject *args)
          {
            SpanNearQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_SpanNearQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SpanNearQuery_equals(t_SpanNearQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanNearQuery_extractTerms(t_SpanNearQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_SpanNearQuery_getClauses(t_SpanNearQuery *self)
          {
            JArray< ::org::apache::lucene::search::spans::SpanQuery > result((jobject) NULL);
            OBJ_CALL(result = self->object.getClauses());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spans::t_SpanQuery::wrap_jobject);
          }

          static PyObject *t_SpanNearQuery_getField(t_SpanNearQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanNearQuery_getSlop(t_SpanNearQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSlop());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_SpanNearQuery_getSpans(t_SpanNearQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanNearQuery_hashCode(t_SpanNearQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanNearQuery_isInOrder(t_SpanNearQuery *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isInOrder());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SpanNearQuery_rewrite(t_SpanNearQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_SpanNearQuery_toString(t_SpanNearQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SpanNearQuery_get__clauses(t_SpanNearQuery *self, void *data)
          {
            JArray< ::org::apache::lucene::search::spans::SpanQuery > value((jobject) NULL);
            OBJ_CALL(value = self->object.getClauses());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::spans::t_SpanQuery::wrap_jobject);
          }

          static PyObject *t_SpanNearQuery_get__field(t_SpanNearQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SpanNearQuery_get__inOrder(t_SpanNearQuery *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isInOrder());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_SpanNearQuery_get__slop(t_SpanNearQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSlop());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Cloneable.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *PathQueryNode$QueryText::class$ = NULL;
              jmethodID *PathQueryNode$QueryText::mids$ = NULL;
              bool PathQueryNode$QueryText::live$ = false;

              jclass PathQueryNode$QueryText::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_6cc8d7e2] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;II)V");
                  mids$[mid_clone_ec4055b6] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText;");
                  mids$[mid_getBegin_54c6a179] = env->getMethodID(cls, "getBegin", "()I");
                  mids$[mid_getEnd_54c6a179] = env->getMethodID(cls, "getEnd", "()I");
                  mids$[mid_getValue_e0adba2f] = env->getMethodID(cls, "getValue", "()Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PathQueryNode$QueryText::PathQueryNode$QueryText(const ::java::lang::CharSequence & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6cc8d7e2, a0.this$, a1, a2)) {}

              PathQueryNode$QueryText PathQueryNode$QueryText::clone() const
              {
                return PathQueryNode$QueryText(env->callObjectMethod(this$, mids$[mid_clone_ec4055b6]));
              }

              jint PathQueryNode$QueryText::getBegin() const
              {
                return env->callIntMethod(this$, mids$[mid_getBegin_54c6a179]);
              }

              jint PathQueryNode$QueryText::getEnd() const
              {
                return env->callIntMethod(this$, mids$[mid_getEnd_54c6a179]);
              }

              ::java::lang::CharSequence PathQueryNode$QueryText::getValue() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getValue_e0adba2f]));
              }

              ::java::lang::String PathQueryNode$QueryText::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_PathQueryNode$QueryText_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PathQueryNode$QueryText_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PathQueryNode$QueryText_init_(t_PathQueryNode$QueryText *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PathQueryNode$QueryText_clone(t_PathQueryNode$QueryText *self);
              static PyObject *t_PathQueryNode$QueryText_getBegin(t_PathQueryNode$QueryText *self);
              static PyObject *t_PathQueryNode$QueryText_getEnd(t_PathQueryNode$QueryText *self);
              static PyObject *t_PathQueryNode$QueryText_getValue(t_PathQueryNode$QueryText *self);
              static PyObject *t_PathQueryNode$QueryText_toString(t_PathQueryNode$QueryText *self, PyObject *args);
              static PyObject *t_PathQueryNode$QueryText_get__begin(t_PathQueryNode$QueryText *self, void *data);
              static PyObject *t_PathQueryNode$QueryText_get__end(t_PathQueryNode$QueryText *self, void *data);
              static PyObject *t_PathQueryNode$QueryText_get__value(t_PathQueryNode$QueryText *self, void *data);
              static PyGetSetDef t_PathQueryNode$QueryText__fields_[] = {
                DECLARE_GET_FIELD(t_PathQueryNode$QueryText, begin),
                DECLARE_GET_FIELD(t_PathQueryNode$QueryText, end),
                DECLARE_GET_FIELD(t_PathQueryNode$QueryText, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_PathQueryNode$QueryText__methods_[] = {
                DECLARE_METHOD(t_PathQueryNode$QueryText, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, clone, METH_NOARGS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, getBegin, METH_NOARGS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, getEnd, METH_NOARGS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, getValue, METH_NOARGS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PathQueryNode$QueryText, t_PathQueryNode$QueryText, ::java::lang::Object, PathQueryNode$QueryText, t_PathQueryNode$QueryText_init_, 0, 0, t_PathQueryNode$QueryText__fields_, 0, 0);

              void t_PathQueryNode$QueryText::install(PyObject *module)
              {
                installType(&PY_TYPE(PathQueryNode$QueryText), module, "PathQueryNode$QueryText", 0);
              }

              void t_PathQueryNode$QueryText::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PathQueryNode$QueryText).tp_dict, "class_", make_descriptor(PathQueryNode$QueryText::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PathQueryNode$QueryText).tp_dict, "wrapfn_", make_descriptor(t_PathQueryNode$QueryText::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PathQueryNode$QueryText).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PathQueryNode$QueryText_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PathQueryNode$QueryText::initializeClass, 1)))
                  return NULL;
                return t_PathQueryNode$QueryText::wrap_Object(PathQueryNode$QueryText(((t_PathQueryNode$QueryText *) arg)->object.this$));
              }
              static PyObject *t_PathQueryNode$QueryText_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PathQueryNode$QueryText::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PathQueryNode$QueryText_init_(t_PathQueryNode$QueryText *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jint a1;
                jint a2;
                PathQueryNode$QueryText object((jobject) NULL);

                if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                {
                  INT_CALL(object = PathQueryNode$QueryText(a0, a1, a2));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_PathQueryNode$QueryText_clone(t_PathQueryNode$QueryText *self)
              {
                PathQueryNode$QueryText result((jobject) NULL);
                OBJ_CALL(result = self->object.clone());
                return t_PathQueryNode$QueryText::wrap_Object(result);
              }

              static PyObject *t_PathQueryNode$QueryText_getBegin(t_PathQueryNode$QueryText *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBegin());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_PathQueryNode$QueryText_getEnd(t_PathQueryNode$QueryText *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEnd());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_PathQueryNode$QueryText_getValue(t_PathQueryNode$QueryText *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_PathQueryNode$QueryText_toString(t_PathQueryNode$QueryText *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(PathQueryNode$QueryText), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_PathQueryNode$QueryText_get__begin(t_PathQueryNode$QueryText *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBegin());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_PathQueryNode$QueryText_get__end(t_PathQueryNode$QueryText *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEnd());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_PathQueryNode$QueryText_get__value(t_PathQueryNode$QueryText *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tr/TurkishLowerCaseFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {

          ::java::lang::Class *TurkishLowerCaseFilterFactory::class$ = NULL;
          jmethodID *TurkishLowerCaseFilterFactory::mids$ = NULL;
          bool TurkishLowerCaseFilterFactory::live$ = false;

          jclass TurkishLowerCaseFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tr/TurkishLowerCaseFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TurkishLowerCaseFilterFactory::TurkishLowerCaseFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream TurkishLowerCaseFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory TurkishLowerCaseFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {
          static PyObject *t_TurkishLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TurkishLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TurkishLowerCaseFilterFactory_init_(t_TurkishLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TurkishLowerCaseFilterFactory_create(t_TurkishLowerCaseFilterFactory *self, PyObject *args);
          static PyObject *t_TurkishLowerCaseFilterFactory_getMultiTermComponent(t_TurkishLowerCaseFilterFactory *self);
          static PyObject *t_TurkishLowerCaseFilterFactory_get__multiTermComponent(t_TurkishLowerCaseFilterFactory *self, void *data);
          static PyGetSetDef t_TurkishLowerCaseFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_TurkishLowerCaseFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TurkishLowerCaseFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TurkishLowerCaseFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishLowerCaseFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishLowerCaseFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_TurkishLowerCaseFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TurkishLowerCaseFilterFactory, t_TurkishLowerCaseFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, TurkishLowerCaseFilterFactory, t_TurkishLowerCaseFilterFactory_init_, 0, 0, t_TurkishLowerCaseFilterFactory__fields_, 0, 0);

          void t_TurkishLowerCaseFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TurkishLowerCaseFilterFactory), module, "TurkishLowerCaseFilterFactory", 0);
          }

          void t_TurkishLowerCaseFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TurkishLowerCaseFilterFactory).tp_dict, "class_", make_descriptor(TurkishLowerCaseFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TurkishLowerCaseFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_TurkishLowerCaseFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TurkishLowerCaseFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TurkishLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TurkishLowerCaseFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TurkishLowerCaseFilterFactory::wrap_Object(TurkishLowerCaseFilterFactory(((t_TurkishLowerCaseFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TurkishLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TurkishLowerCaseFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TurkishLowerCaseFilterFactory_init_(t_TurkishLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TurkishLowerCaseFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TurkishLowerCaseFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TurkishLowerCaseFilterFactory_create(t_TurkishLowerCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TurkishLowerCaseFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_TurkishLowerCaseFilterFactory_getMultiTermComponent(t_TurkishLowerCaseFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_TurkishLowerCaseFilterFactory_get__multiTermComponent(t_TurkishLowerCaseFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *IndexOutOfBoundsException::class$ = NULL;
    jmethodID *IndexOutOfBoundsException::mids$ = NULL;
    bool IndexOutOfBoundsException::live$ = false;

    jclass IndexOutOfBoundsException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/IndexOutOfBoundsException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    IndexOutOfBoundsException::IndexOutOfBoundsException() : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    IndexOutOfBoundsException::IndexOutOfBoundsException(const ::java::lang::String & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_IndexOutOfBoundsException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_IndexOutOfBoundsException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_IndexOutOfBoundsException_init_(t_IndexOutOfBoundsException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_IndexOutOfBoundsException__methods_[] = {
      DECLARE_METHOD(t_IndexOutOfBoundsException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_IndexOutOfBoundsException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(IndexOutOfBoundsException, t_IndexOutOfBoundsException, ::java::lang::RuntimeException, IndexOutOfBoundsException, t_IndexOutOfBoundsException_init_, 0, 0, 0, 0, 0);

    void t_IndexOutOfBoundsException::install(PyObject *module)
    {
      installType(&PY_TYPE(IndexOutOfBoundsException), module, "IndexOutOfBoundsException", 0);
    }

    void t_IndexOutOfBoundsException::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(IndexOutOfBoundsException).tp_dict, "class_", make_descriptor(IndexOutOfBoundsException::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(IndexOutOfBoundsException).tp_dict, "wrapfn_", make_descriptor(t_IndexOutOfBoundsException::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(IndexOutOfBoundsException).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_IndexOutOfBoundsException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, IndexOutOfBoundsException::initializeClass, 1)))
        return NULL;
      return t_IndexOutOfBoundsException::wrap_Object(IndexOutOfBoundsException(((t_IndexOutOfBoundsException *) arg)->object.this$));
    }
    static PyObject *t_IndexOutOfBoundsException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, IndexOutOfBoundsException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_IndexOutOfBoundsException_init_(t_IndexOutOfBoundsException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          IndexOutOfBoundsException object((jobject) NULL);

          INT_CALL(object = IndexOutOfBoundsException());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          IndexOutOfBoundsException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = IndexOutOfBoundsException(a0));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/LongValues.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *LongValues::class$ = NULL;
        jmethodID *LongValues::mids$ = NULL;
        bool LongValues::live$ = false;
        LongValues *LongValues::IDENTITY = NULL;

        jclass LongValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/LongValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_0ee6df33] = env->getMethodID(cls, "get", "(J)J");
            mids$[mid_get_39c7bd20] = env->getMethodID(cls, "get", "(I)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            IDENTITY = new LongValues(env->getStaticObjectField(cls, "IDENTITY", "Lorg/apache/lucene/util/LongValues;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongValues::LongValues() : ::org::apache::lucene::index::NumericDocValues(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jlong LongValues::get(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_get_0ee6df33], a0);
        }

        jlong LongValues::get(jint a0) const
        {
          return env->callLongMethod(this$, mids$[mid_get_39c7bd20], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_LongValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongValues_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongValues_init_(t_LongValues *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LongValues_get(t_LongValues *self, PyObject *args);

        static PyMethodDef t_LongValues__methods_[] = {
          DECLARE_METHOD(t_LongValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongValues, get, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LongValues, t_LongValues, ::org::apache::lucene::index::NumericDocValues, LongValues, t_LongValues_init_, 0, 0, 0, 0, 0);

        void t_LongValues::install(PyObject *module)
        {
          installType(&PY_TYPE(LongValues), module, "LongValues", 0);
        }

        void t_LongValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LongValues).tp_dict, "class_", make_descriptor(LongValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LongValues).tp_dict, "wrapfn_", make_descriptor(t_LongValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LongValues).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(LongValues::initializeClass);
          PyDict_SetItemString(PY_TYPE(LongValues).tp_dict, "IDENTITY", make_descriptor(t_LongValues::wrap_Object(*LongValues::IDENTITY)));
        }

        static PyObject *t_LongValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongValues::initializeClass, 1)))
            return NULL;
          return t_LongValues::wrap_Object(LongValues(((t_LongValues *) arg)->object.this$));
        }
        static PyObject *t_LongValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongValues_init_(t_LongValues *self, PyObject *args, PyObject *kwds)
        {
          LongValues object((jobject) NULL);

          INT_CALL(object = LongValues());
          self->object = object;

          return 0;
        }

        static PyObject *t_LongValues_get(t_LongValues *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              jint a0;
              jlong result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          return callSuper(&PY_TYPE(LongValues), (PyObject *) self, "get", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchLightStemmer::class$ = NULL;
          jmethodID *FrenchLightStemmer::mids$ = NULL;
          bool FrenchLightStemmer::live$ = false;

          jclass FrenchLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchLightStemmer::FrenchLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint FrenchLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchLightStemmer_init_(t_FrenchLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchLightStemmer_stem(t_FrenchLightStemmer *self, PyObject *args);

          static PyMethodDef t_FrenchLightStemmer__methods_[] = {
            DECLARE_METHOD(t_FrenchLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchLightStemmer, t_FrenchLightStemmer, ::java::lang::Object, FrenchLightStemmer, t_FrenchLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_FrenchLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchLightStemmer), module, "FrenchLightStemmer", 0);
          }

          void t_FrenchLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchLightStemmer).tp_dict, "class_", make_descriptor(FrenchLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_FrenchLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchLightStemmer::initializeClass, 1)))
              return NULL;
            return t_FrenchLightStemmer::wrap_Object(FrenchLightStemmer(((t_FrenchLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_FrenchLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchLightStemmer_init_(t_FrenchLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            FrenchLightStemmer object((jobject) NULL);

            INT_CALL(object = FrenchLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_FrenchLightStemmer_stem(t_FrenchLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *PostingsWriterBase::class$ = NULL;
        jmethodID *PostingsWriterBase::mids$ = NULL;
        bool PostingsWriterBase::live$ = false;

        jclass PostingsWriterBase::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/PostingsWriterBase");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_encodeTerm_1ec2f80c] = env->getMethodID(cls, "encodeTerm", "([JLorg/apache/lucene/store/DataOutput;Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Z)V");
            mids$[mid_finishTerm_47bdc871] = env->getMethodID(cls, "finishTerm", "(Lorg/apache/lucene/codecs/BlockTermState;)V");
            mids$[mid_init_faad620a] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/store/IndexOutput;)V");
            mids$[mid_newTermState_9f93879c] = env->getMethodID(cls, "newTermState", "()Lorg/apache/lucene/codecs/BlockTermState;");
            mids$[mid_setField_5f0ccd17] = env->getMethodID(cls, "setField", "(Lorg/apache/lucene/index/FieldInfo;)I");
            mids$[mid_startTerm_54c6a166] = env->getMethodID(cls, "startTerm", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void PostingsWriterBase::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void PostingsWriterBase::encodeTerm(const JArray< jlong > & a0, const ::org::apache::lucene::store::DataOutput & a1, const ::org::apache::lucene::index::FieldInfo & a2, const ::org::apache::lucene::codecs::BlockTermState & a3, jboolean a4) const
        {
          env->callVoidMethod(this$, mids$[mid_encodeTerm_1ec2f80c], a0.this$, a1.this$, a2.this$, a3.this$, a4);
        }

        void PostingsWriterBase::finishTerm(const ::org::apache::lucene::codecs::BlockTermState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_finishTerm_47bdc871], a0.this$);
        }

        void PostingsWriterBase::init(const ::org::apache::lucene::store::IndexOutput & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_init_faad620a], a0.this$);
        }

        ::org::apache::lucene::codecs::BlockTermState PostingsWriterBase::newTermState() const
        {
          return ::org::apache::lucene::codecs::BlockTermState(env->callObjectMethod(this$, mids$[mid_newTermState_9f93879c]));
        }

        jint PostingsWriterBase::setField(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_setField_5f0ccd17], a0.this$);
        }

        void PostingsWriterBase::startTerm() const
        {
          env->callVoidMethod(this$, mids$[mid_startTerm_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_PostingsWriterBase_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsWriterBase_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsWriterBase_close(t_PostingsWriterBase *self);
        static PyObject *t_PostingsWriterBase_encodeTerm(t_PostingsWriterBase *self, PyObject *args);
        static PyObject *t_PostingsWriterBase_finishTerm(t_PostingsWriterBase *self, PyObject *arg);
        static PyObject *t_PostingsWriterBase_init(t_PostingsWriterBase *self, PyObject *arg);
        static PyObject *t_PostingsWriterBase_newTermState(t_PostingsWriterBase *self);
        static PyObject *t_PostingsWriterBase_setField(t_PostingsWriterBase *self, PyObject *arg);
        static PyObject *t_PostingsWriterBase_startTerm(t_PostingsWriterBase *self);
        static int t_PostingsWriterBase_set__field(t_PostingsWriterBase *self, PyObject *arg, void *data);
        static PyGetSetDef t_PostingsWriterBase__fields_[] = {
          DECLARE_SET_FIELD(t_PostingsWriterBase, field),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PostingsWriterBase__methods_[] = {
          DECLARE_METHOD(t_PostingsWriterBase, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsWriterBase, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsWriterBase, close, METH_NOARGS),
          DECLARE_METHOD(t_PostingsWriterBase, encodeTerm, METH_VARARGS),
          DECLARE_METHOD(t_PostingsWriterBase, finishTerm, METH_O),
          DECLARE_METHOD(t_PostingsWriterBase, init, METH_O),
          DECLARE_METHOD(t_PostingsWriterBase, newTermState, METH_NOARGS),
          DECLARE_METHOD(t_PostingsWriterBase, setField, METH_O),
          DECLARE_METHOD(t_PostingsWriterBase, startTerm, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PostingsWriterBase, t_PostingsWriterBase, ::org::apache::lucene::codecs::PostingsConsumer, PostingsWriterBase, abstract_init, 0, 0, t_PostingsWriterBase__fields_, 0, 0);

        void t_PostingsWriterBase::install(PyObject *module)
        {
          installType(&PY_TYPE(PostingsWriterBase), module, "PostingsWriterBase", 0);
        }

        void t_PostingsWriterBase::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PostingsWriterBase).tp_dict, "class_", make_descriptor(PostingsWriterBase::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PostingsWriterBase).tp_dict, "wrapfn_", make_descriptor(t_PostingsWriterBase::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PostingsWriterBase).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PostingsWriterBase_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PostingsWriterBase::initializeClass, 1)))
            return NULL;
          return t_PostingsWriterBase::wrap_Object(PostingsWriterBase(((t_PostingsWriterBase *) arg)->object.this$));
        }
        static PyObject *t_PostingsWriterBase_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PostingsWriterBase::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PostingsWriterBase_close(t_PostingsWriterBase *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_PostingsWriterBase_encodeTerm(t_PostingsWriterBase *self, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          ::org::apache::lucene::store::DataOutput a1((jobject) NULL);
          ::org::apache::lucene::index::FieldInfo a2((jobject) NULL);
          ::org::apache::lucene::codecs::BlockTermState a3((jobject) NULL);
          jboolean a4;

          if (!parseArgs(args, "[JkkkZ", ::org::apache::lucene::store::DataOutput::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(self->object.encodeTerm(a0, a1, a2, a3, a4));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "encodeTerm", args);
          return NULL;
        }

        static PyObject *t_PostingsWriterBase_finishTerm(t_PostingsWriterBase *self, PyObject *arg)
        {
          ::org::apache::lucene::codecs::BlockTermState a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.finishTerm(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "finishTerm", arg);
          return NULL;
        }

        static PyObject *t_PostingsWriterBase_init(t_PostingsWriterBase *self, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexOutput::initializeClass, &a0))
          {
            OBJ_CALL(self->object.init(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "init", arg);
          return NULL;
        }

        static PyObject *t_PostingsWriterBase_newTermState(t_PostingsWriterBase *self)
        {
          ::org::apache::lucene::codecs::BlockTermState result((jobject) NULL);
          OBJ_CALL(result = self->object.newTermState());
          return ::org::apache::lucene::codecs::t_BlockTermState::wrap_Object(result);
        }

        static PyObject *t_PostingsWriterBase_setField(t_PostingsWriterBase *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setField(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "setField", arg);
          return NULL;
        }

        static PyObject *t_PostingsWriterBase_startTerm(t_PostingsWriterBase *self)
        {
          OBJ_CALL(self->object.startTerm());
          Py_RETURN_NONE;
        }

        static int t_PostingsWriterBase_set__field(t_PostingsWriterBase *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::FieldInfo value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &value))
            {
              INT_CALL(self->object.setField(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "field", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PForDeltaDocIdSet.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PForDeltaDocIdSet::class$ = NULL;
        jmethodID *PForDeltaDocIdSet::mids$ = NULL;
        bool PForDeltaDocIdSet::live$ = false;

        jclass PForDeltaDocIdSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PForDeltaDocIdSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_cardinality_54c6a179] = env->getMethodID(cls, "cardinality", "()I");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint PForDeltaDocIdSet::cardinality() const
        {
          return env->callIntMethod(this$, mids$[mid_cardinality_54c6a179]);
        }

        jboolean PForDeltaDocIdSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        ::org::apache::lucene::search::DocIdSetIterator PForDeltaDocIdSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
        }

        jlong PForDeltaDocIdSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/PForDeltaDocIdSet$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PForDeltaDocIdSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PForDeltaDocIdSet_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PForDeltaDocIdSet_cardinality(t_PForDeltaDocIdSet *self);
        static PyObject *t_PForDeltaDocIdSet_isCacheable(t_PForDeltaDocIdSet *self, PyObject *args);
        static PyObject *t_PForDeltaDocIdSet_iterator(t_PForDeltaDocIdSet *self, PyObject *args);
        static PyObject *t_PForDeltaDocIdSet_ramBytesUsed(t_PForDeltaDocIdSet *self, PyObject *args);
        static PyObject *t_PForDeltaDocIdSet_get__cacheable(t_PForDeltaDocIdSet *self, void *data);
        static PyGetSetDef t_PForDeltaDocIdSet__fields_[] = {
          DECLARE_GET_FIELD(t_PForDeltaDocIdSet, cacheable),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PForDeltaDocIdSet__methods_[] = {
          DECLARE_METHOD(t_PForDeltaDocIdSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PForDeltaDocIdSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PForDeltaDocIdSet, cardinality, METH_NOARGS),
          DECLARE_METHOD(t_PForDeltaDocIdSet, isCacheable, METH_VARARGS),
          DECLARE_METHOD(t_PForDeltaDocIdSet, iterator, METH_VARARGS),
          DECLARE_METHOD(t_PForDeltaDocIdSet, ramBytesUsed, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PForDeltaDocIdSet, t_PForDeltaDocIdSet, ::org::apache::lucene::search::DocIdSet, PForDeltaDocIdSet, abstract_init, 0, 0, t_PForDeltaDocIdSet__fields_, 0, 0);

        void t_PForDeltaDocIdSet::install(PyObject *module)
        {
          installType(&PY_TYPE(PForDeltaDocIdSet), module, "PForDeltaDocIdSet", 0);
          PyDict_SetItemString(PY_TYPE(PForDeltaDocIdSet).tp_dict, "Builder", make_descriptor(&PY_TYPE(PForDeltaDocIdSet$Builder)));
        }

        void t_PForDeltaDocIdSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PForDeltaDocIdSet).tp_dict, "class_", make_descriptor(PForDeltaDocIdSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PForDeltaDocIdSet).tp_dict, "wrapfn_", make_descriptor(t_PForDeltaDocIdSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PForDeltaDocIdSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PForDeltaDocIdSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PForDeltaDocIdSet::initializeClass, 1)))
            return NULL;
          return t_PForDeltaDocIdSet::wrap_Object(PForDeltaDocIdSet(((t_PForDeltaDocIdSet *) arg)->object.this$));
        }
        static PyObject *t_PForDeltaDocIdSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PForDeltaDocIdSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PForDeltaDocIdSet_cardinality(t_PForDeltaDocIdSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.cardinality());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_PForDeltaDocIdSet_isCacheable(t_PForDeltaDocIdSet *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCacheable());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PForDeltaDocIdSet), (PyObject *) self, "isCacheable", args, 2);
        }

        static PyObject *t_PForDeltaDocIdSet_iterator(t_PForDeltaDocIdSet *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(PForDeltaDocIdSet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_PForDeltaDocIdSet_ramBytesUsed(t_PForDeltaDocIdSet *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(PForDeltaDocIdSet), (PyObject *) self, "ramBytesUsed", args, 2);
        }

        static PyObject *t_PForDeltaDocIdSet_get__cacheable(t_PForDeltaDocIdSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *Lock::class$ = NULL;
        jmethodID *Lock::mids$ = NULL;
        bool Lock::live$ = false;
        jlong Lock::LOCK_OBTAIN_WAIT_FOREVER = (jlong) 0;
        jlong Lock::LOCK_POLL_INTERVAL = (jlong) 0;

        jclass Lock::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/Lock");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_isLocked_54c6a16a] = env->getMethodID(cls, "isLocked", "()Z");
            mids$[mid_obtain_54c6a16a] = env->getMethodID(cls, "obtain", "()Z");
            mids$[mid_obtain_0ee6df23] = env->getMethodID(cls, "obtain", "(J)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            LOCK_OBTAIN_WAIT_FOREVER = env->getStaticLongField(cls, "LOCK_OBTAIN_WAIT_FOREVER");
            LOCK_POLL_INTERVAL = env->getStaticLongField(cls, "LOCK_POLL_INTERVAL");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Lock::Lock() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void Lock::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jboolean Lock::isLocked() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isLocked_54c6a16a]);
        }

        jboolean Lock::obtain() const
        {
          return env->callBooleanMethod(this$, mids$[mid_obtain_54c6a16a]);
        }

        jboolean Lock::obtain(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_obtain_0ee6df23], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/store/Lock$With.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_Lock_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Lock_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Lock_init_(t_Lock *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Lock_close(t_Lock *self);
        static PyObject *t_Lock_isLocked(t_Lock *self);
        static PyObject *t_Lock_obtain(t_Lock *self, PyObject *args);
        static PyObject *t_Lock_get__locked(t_Lock *self, void *data);
        static PyGetSetDef t_Lock__fields_[] = {
          DECLARE_GET_FIELD(t_Lock, locked),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Lock__methods_[] = {
          DECLARE_METHOD(t_Lock, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Lock, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Lock, close, METH_NOARGS),
          DECLARE_METHOD(t_Lock, isLocked, METH_NOARGS),
          DECLARE_METHOD(t_Lock, obtain, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Lock, t_Lock, ::java::lang::Object, Lock, t_Lock_init_, 0, 0, t_Lock__fields_, 0, 0);

        void t_Lock::install(PyObject *module)
        {
          installType(&PY_TYPE(Lock), module, "Lock", 0);
          PyDict_SetItemString(PY_TYPE(Lock).tp_dict, "With", make_descriptor(&PY_TYPE(Lock$With)));
        }

        void t_Lock::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Lock).tp_dict, "class_", make_descriptor(Lock::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Lock).tp_dict, "wrapfn_", make_descriptor(t_Lock::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Lock).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Lock::initializeClass);
          PyDict_SetItemString(PY_TYPE(Lock).tp_dict, "LOCK_OBTAIN_WAIT_FOREVER", make_descriptor(Lock::LOCK_OBTAIN_WAIT_FOREVER));
          PyDict_SetItemString(PY_TYPE(Lock).tp_dict, "LOCK_POLL_INTERVAL", make_descriptor(Lock::LOCK_POLL_INTERVAL));
        }

        static PyObject *t_Lock_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Lock::initializeClass, 1)))
            return NULL;
          return t_Lock::wrap_Object(Lock(((t_Lock *) arg)->object.this$));
        }
        static PyObject *t_Lock_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Lock::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Lock_init_(t_Lock *self, PyObject *args, PyObject *kwds)
        {
          Lock object((jobject) NULL);

          INT_CALL(object = Lock());
          self->object = object;

          return 0;
        }

        static PyObject *t_Lock_close(t_Lock *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_Lock_isLocked(t_Lock *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isLocked());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Lock_obtain(t_Lock *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jboolean result;
              OBJ_CALL(result = self->object.obtain());
              Py_RETURN_BOOL(result);
            }
            break;
           case 1:
            {
              jlong a0;
              jboolean result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.obtain(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "obtain", args);
          return NULL;
        }

        static PyObject *t_Lock_get__locked(t_Lock *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isLocked());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cz/CzechStemFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {

          ::java::lang::Class *CzechStemFilterFactory::class$ = NULL;
          jmethodID *CzechStemFilterFactory::mids$ = NULL;
          bool CzechStemFilterFactory::live$ = false;

          jclass CzechStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cz/CzechStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CzechStemFilterFactory::CzechStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream CzechStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {
          static PyObject *t_CzechStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CzechStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CzechStemFilterFactory_init_(t_CzechStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CzechStemFilterFactory_create(t_CzechStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_CzechStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CzechStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CzechStemFilterFactory, t_CzechStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, CzechStemFilterFactory, t_CzechStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_CzechStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CzechStemFilterFactory), module, "CzechStemFilterFactory", 0);
          }

          void t_CzechStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CzechStemFilterFactory).tp_dict, "class_", make_descriptor(CzechStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CzechStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CzechStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CzechStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CzechStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CzechStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CzechStemFilterFactory::wrap_Object(CzechStemFilterFactory(((t_CzechStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CzechStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CzechStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CzechStemFilterFactory_init_(t_CzechStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CzechStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CzechStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CzechStemFilterFactory_create(t_CzechStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CzechStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MultiBoolFunction.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/util/List.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/queries/function/docvalues/BoolDocValues.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MultiBoolFunction::class$ = NULL;
            jmethodID *MultiBoolFunction::mids$ = NULL;
            bool MultiBoolFunction::live$ = false;

            jclass MultiBoolFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MultiBoolFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_ea0ab6f1] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/docvalues/BoolDocValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_d2e34ba5] = env->getMethodID(cls, "func", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MultiBoolFunction::MultiBoolFunction(const ::java::util::List & a0) : ::org::apache::lucene::queries::function::valuesource::BoolFunction(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

            void MultiBoolFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String MultiBoolFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean MultiBoolFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::docvalues::BoolDocValues MultiBoolFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::docvalues::BoolDocValues(env->callObjectMethod(this$, mids$[mid_getValues_ea0ab6f1], a0.this$, a1.this$));
            }

            jint MultiBoolFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MultiBoolFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MultiBoolFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MultiBoolFunction_init_(t_MultiBoolFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MultiBoolFunction_createWeight(t_MultiBoolFunction *self, PyObject *args);
            static PyObject *t_MultiBoolFunction_description(t_MultiBoolFunction *self, PyObject *args);
            static PyObject *t_MultiBoolFunction_equals(t_MultiBoolFunction *self, PyObject *args);
            static PyObject *t_MultiBoolFunction_getValues(t_MultiBoolFunction *self, PyObject *args);
            static PyObject *t_MultiBoolFunction_hashCode(t_MultiBoolFunction *self, PyObject *args);

            static PyMethodDef t_MultiBoolFunction__methods_[] = {
              DECLARE_METHOD(t_MultiBoolFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiBoolFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiBoolFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_MultiBoolFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_MultiBoolFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_MultiBoolFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_MultiBoolFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MultiBoolFunction, t_MultiBoolFunction, ::org::apache::lucene::queries::function::valuesource::BoolFunction, MultiBoolFunction, t_MultiBoolFunction_init_, 0, 0, 0, 0, 0);

            void t_MultiBoolFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(MultiBoolFunction), module, "MultiBoolFunction", 0);
            }

            void t_MultiBoolFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MultiBoolFunction).tp_dict, "class_", make_descriptor(MultiBoolFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MultiBoolFunction).tp_dict, "wrapfn_", make_descriptor(t_MultiBoolFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MultiBoolFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MultiBoolFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MultiBoolFunction::initializeClass, 1)))
                return NULL;
              return t_MultiBoolFunction::wrap_Object(MultiBoolFunction(((t_MultiBoolFunction *) arg)->object.this$));
            }
            static PyObject *t_MultiBoolFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MultiBoolFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MultiBoolFunction_init_(t_MultiBoolFunction *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              MultiBoolFunction object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                INT_CALL(object = MultiBoolFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_MultiBoolFunction_createWeight(t_MultiBoolFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(MultiBoolFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_MultiBoolFunction_description(t_MultiBoolFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(MultiBoolFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_MultiBoolFunction_equals(t_MultiBoolFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(MultiBoolFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_MultiBoolFunction_getValues(t_MultiBoolFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::docvalues::BoolDocValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::docvalues::t_BoolDocValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(MultiBoolFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_MultiBoolFunction_hashCode(t_MultiBoolFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(MultiBoolFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SrndQuery::class$ = NULL;
            jmethodID *SrndQuery::mids$ = NULL;
            bool SrndQuery::live$ = false;
            ::org::apache::lucene::search::Query *SrndQuery::theEmptyLcnQuery = NULL;

            jclass SrndQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SrndQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_clone_26528772] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getWeight_54c6a176] = env->getMethodID(cls, "getWeight", "()F");
                mids$[mid_getWeightOperator_14c7b5c5] = env->getMethodID(cls, "getWeightOperator", "()Ljava/lang/String;");
                mids$[mid_getWeightString_14c7b5c5] = env->getMethodID(cls, "getWeightString", "()Ljava/lang/String;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_isFieldsSubQueryAcceptable_54c6a16a] = env->getMethodID(cls, "isFieldsSubQueryAcceptable", "()Z");
                mids$[mid_isWeighted_54c6a16a] = env->getMethodID(cls, "isWeighted", "()Z");
                mids$[mid_makeLuceneQueryField_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryField", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_setWeight_06298cab] = env->getMethodID(cls, "setWeight", "(F)V");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_weightToString_9f94ae34] = env->getMethodID(cls, "weightToString", "(Ljava/lang/StringBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                theEmptyLcnQuery = new ::org::apache::lucene::search::Query(env->getStaticObjectField(cls, "theEmptyLcnQuery", "Lorg/apache/lucene/search/Query;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SrndQuery::SrndQuery() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            SrndQuery SrndQuery::clone() const
            {
              return SrndQuery(env->callObjectMethod(this$, mids$[mid_clone_26528772]));
            }

            jboolean SrndQuery::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jfloat SrndQuery::getWeight() const
            {
              return env->callFloatMethod(this$, mids$[mid_getWeight_54c6a176]);
            }

            ::java::lang::String SrndQuery::getWeightOperator() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getWeightOperator_14c7b5c5]));
            }

            ::java::lang::String SrndQuery::getWeightString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getWeightString_14c7b5c5]));
            }

            jint SrndQuery::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            jboolean SrndQuery::isFieldsSubQueryAcceptable() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFieldsSubQueryAcceptable_54c6a16a]);
            }

            jboolean SrndQuery::isWeighted() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isWeighted_54c6a16a]);
            }

            ::org::apache::lucene::search::Query SrndQuery::makeLuceneQueryField(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryField_1aaeee30], a0.this$, a1.this$));
            }

            ::org::apache::lucene::search::Query SrndQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30], a0.this$, a1.this$));
            }

            void SrndQuery::setWeight(jfloat a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setWeight_06298cab], a0);
            }

            ::java::lang::String SrndQuery::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SrndQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SrndQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SrndQuery_init_(t_SrndQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SrndQuery_clone(t_SrndQuery *self);
            static PyObject *t_SrndQuery_equals(t_SrndQuery *self, PyObject *args);
            static PyObject *t_SrndQuery_getWeight(t_SrndQuery *self);
            static PyObject *t_SrndQuery_getWeightOperator(t_SrndQuery *self);
            static PyObject *t_SrndQuery_getWeightString(t_SrndQuery *self);
            static PyObject *t_SrndQuery_hashCode(t_SrndQuery *self, PyObject *args);
            static PyObject *t_SrndQuery_isFieldsSubQueryAcceptable(t_SrndQuery *self);
            static PyObject *t_SrndQuery_isWeighted(t_SrndQuery *self);
            static PyObject *t_SrndQuery_makeLuceneQueryField(t_SrndQuery *self, PyObject *args);
            static PyObject *t_SrndQuery_makeLuceneQueryFieldNoBoost(t_SrndQuery *self, PyObject *args);
            static PyObject *t_SrndQuery_setWeight(t_SrndQuery *self, PyObject *arg);
            static PyObject *t_SrndQuery_toString(t_SrndQuery *self, PyObject *args);
            static PyObject *t_SrndQuery_get__fieldsSubQueryAcceptable(t_SrndQuery *self, void *data);
            static PyObject *t_SrndQuery_get__weight(t_SrndQuery *self, void *data);
            static int t_SrndQuery_set__weight(t_SrndQuery *self, PyObject *arg, void *data);
            static PyObject *t_SrndQuery_get__weightOperator(t_SrndQuery *self, void *data);
            static PyObject *t_SrndQuery_get__weightString(t_SrndQuery *self, void *data);
            static PyObject *t_SrndQuery_get__weighted(t_SrndQuery *self, void *data);
            static PyGetSetDef t_SrndQuery__fields_[] = {
              DECLARE_GET_FIELD(t_SrndQuery, fieldsSubQueryAcceptable),
              DECLARE_GETSET_FIELD(t_SrndQuery, weight),
              DECLARE_GET_FIELD(t_SrndQuery, weightOperator),
              DECLARE_GET_FIELD(t_SrndQuery, weightString),
              DECLARE_GET_FIELD(t_SrndQuery, weighted),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SrndQuery__methods_[] = {
              DECLARE_METHOD(t_SrndQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndQuery, clone, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, equals, METH_VARARGS),
              DECLARE_METHOD(t_SrndQuery, getWeight, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, getWeightOperator, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, getWeightString, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_SrndQuery, isFieldsSubQueryAcceptable, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, isWeighted, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, makeLuceneQueryField, METH_VARARGS),
              DECLARE_METHOD(t_SrndQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              DECLARE_METHOD(t_SrndQuery, setWeight, METH_O),
              DECLARE_METHOD(t_SrndQuery, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SrndQuery, t_SrndQuery, ::java::lang::Object, SrndQuery, t_SrndQuery_init_, 0, 0, t_SrndQuery__fields_, 0, 0);

            void t_SrndQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(SrndQuery), module, "SrndQuery", 0);
            }

            void t_SrndQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SrndQuery).tp_dict, "class_", make_descriptor(SrndQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SrndQuery).tp_dict, "wrapfn_", make_descriptor(t_SrndQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SrndQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(SrndQuery::initializeClass);
              PyDict_SetItemString(PY_TYPE(SrndQuery).tp_dict, "theEmptyLcnQuery", make_descriptor(::org::apache::lucene::search::t_Query::wrap_Object(*SrndQuery::theEmptyLcnQuery)));
            }

            static PyObject *t_SrndQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SrndQuery::initializeClass, 1)))
                return NULL;
              return t_SrndQuery::wrap_Object(SrndQuery(((t_SrndQuery *) arg)->object.this$));
            }
            static PyObject *t_SrndQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SrndQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SrndQuery_init_(t_SrndQuery *self, PyObject *args, PyObject *kwds)
            {
              SrndQuery object((jobject) NULL);

              INT_CALL(object = SrndQuery());
              self->object = object;

              return 0;
            }

            static PyObject *t_SrndQuery_clone(t_SrndQuery *self)
            {
              SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.clone());
              return t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_SrndQuery_equals(t_SrndQuery *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(SrndQuery), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_SrndQuery_getWeight(t_SrndQuery *self)
            {
              jfloat result;
              OBJ_CALL(result = self->object.getWeight());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_SrndQuery_getWeightOperator(t_SrndQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getWeightOperator());
              return j2p(result);
            }

            static PyObject *t_SrndQuery_getWeightString(t_SrndQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getWeightString());
              return j2p(result);
            }

            static PyObject *t_SrndQuery_hashCode(t_SrndQuery *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(SrndQuery), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_SrndQuery_isFieldsSubQueryAcceptable(t_SrndQuery *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isFieldsSubQueryAcceptable());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_SrndQuery_isWeighted(t_SrndQuery *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isWeighted());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_SrndQuery_makeLuceneQueryField(t_SrndQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryField(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "makeLuceneQueryField", args);
              return NULL;
            }

            static PyObject *t_SrndQuery_makeLuceneQueryFieldNoBoost(t_SrndQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "makeLuceneQueryFieldNoBoost", args);
              return NULL;
            }

            static PyObject *t_SrndQuery_setWeight(t_SrndQuery *self, PyObject *arg)
            {
              jfloat a0;

              if (!parseArg(arg, "F", &a0))
              {
                OBJ_CALL(self->object.setWeight(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setWeight", arg);
              return NULL;
            }

            static PyObject *t_SrndQuery_toString(t_SrndQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SrndQuery), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_SrndQuery_get__fieldsSubQueryAcceptable(t_SrndQuery *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFieldsSubQueryAcceptable());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_SrndQuery_get__weight(t_SrndQuery *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getWeight());
              return PyFloat_FromDouble((double) value);
            }
            static int t_SrndQuery_set__weight(t_SrndQuery *self, PyObject *arg, void *data)
            {
              {
                jfloat value;
                if (!parseArg(arg, "F", &value))
                {
                  INT_CALL(self->object.setWeight(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "weight", arg);
              return -1;
            }

            static PyObject *t_SrndQuery_get__weightOperator(t_SrndQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getWeightOperator());
              return j2p(value);
            }

            static PyObject *t_SrndQuery_get__weightString(t_SrndQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getWeightString());
              return j2p(value);
            }

            static PyObject *t_SrndQuery_get__weighted(t_SrndQuery *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isWeighted());
              Py_RETURN_BOOL(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Map$Entry.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *Map$Entry::class$ = NULL;
    jmethodID *Map$Entry::mids$ = NULL;
    bool Map$Entry::live$ = false;

    jclass Map$Entry::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/Map$Entry");

        mids$ = new jmethodID[max_mid];
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_getKey_846352c3] = env->getMethodID(cls, "getKey", "()Ljava/lang/Object;");
        mids$[mid_getValue_846352c3] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_setValue_a932a95f] = env->getMethodID(cls, "setValue", "(Ljava/lang/Object;)Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jboolean Map$Entry::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::lang::Object Map$Entry::getKey() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getKey_846352c3]));
    }

    ::java::lang::Object Map$Entry::getValue() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_846352c3]));
    }

    jint Map$Entry::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    ::java::lang::Object Map$Entry::setValue(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_setValue_a932a95f], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_Map$Entry_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Map$Entry_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Map$Entry_of_(t_Map$Entry *self, PyObject *args);
    static PyObject *t_Map$Entry_equals(t_Map$Entry *self, PyObject *args);
    static PyObject *t_Map$Entry_getKey(t_Map$Entry *self);
    static PyObject *t_Map$Entry_getValue(t_Map$Entry *self);
    static PyObject *t_Map$Entry_hashCode(t_Map$Entry *self, PyObject *args);
    static PyObject *t_Map$Entry_setValue(t_Map$Entry *self, PyObject *arg);
    static PyObject *t_Map$Entry_get__key(t_Map$Entry *self, void *data);
    static PyObject *t_Map$Entry_get__value(t_Map$Entry *self, void *data);
    static int t_Map$Entry_set__value(t_Map$Entry *self, PyObject *arg, void *data);
    static PyObject *t_Map$Entry_get__parameters_(t_Map$Entry *self, void *data);
    static PyGetSetDef t_Map$Entry__fields_[] = {
      DECLARE_GET_FIELD(t_Map$Entry, key),
      DECLARE_GETSET_FIELD(t_Map$Entry, value),
      DECLARE_GET_FIELD(t_Map$Entry, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Map$Entry__methods_[] = {
      DECLARE_METHOD(t_Map$Entry, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Map$Entry, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Map$Entry, of_, METH_VARARGS),
      DECLARE_METHOD(t_Map$Entry, equals, METH_VARARGS),
      DECLARE_METHOD(t_Map$Entry, getKey, METH_NOARGS),
      DECLARE_METHOD(t_Map$Entry, getValue, METH_NOARGS),
      DECLARE_METHOD(t_Map$Entry, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Map$Entry, setValue, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Map$Entry, t_Map$Entry, ::java::lang::Object, Map$Entry, abstract_init, 0, 0, t_Map$Entry__fields_, 0, 0);
    PyObject *t_Map$Entry::wrap_Object(const Map$Entry& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_Map$Entry::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Map$Entry *self = (t_Map$Entry *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    PyObject *t_Map$Entry::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_Map$Entry::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Map$Entry *self = (t_Map$Entry *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    void t_Map$Entry::install(PyObject *module)
    {
      installType(&PY_TYPE(Map$Entry), module, "Map$Entry", 0);
    }

    void t_Map$Entry::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Map$Entry).tp_dict, "class_", make_descriptor(Map$Entry::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Map$Entry).tp_dict, "wrapfn_", make_descriptor(t_Map$Entry::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Map$Entry).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Map$Entry_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Map$Entry::initializeClass, 1)))
        return NULL;
      return t_Map$Entry::wrap_Object(Map$Entry(((t_Map$Entry *) arg)->object.this$));
    }
    static PyObject *t_Map$Entry_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Map$Entry::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Map$Entry_of_(t_Map$Entry *self, PyObject *args)
    {
      if (!parseArg(args, "T", 2, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_Map$Entry_equals(t_Map$Entry *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Map$Entry), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Map$Entry_getKey(t_Map$Entry *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.getKey());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Map$Entry_getValue(t_Map$Entry *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.getValue());
      return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Map$Entry_hashCode(t_Map$Entry *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Map$Entry), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Map$Entry_setValue(t_Map$Entry *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "O", self->parameters[1], &a0))
      {
        OBJ_CALL(result = self->object.setValue(a0));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "setValue", arg);
      return NULL;
    }
    static PyObject *t_Map$Entry_get__parameters_(t_Map$Entry *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_Map$Entry_get__key(t_Map$Entry *self, void *data)
    {
      ::java::lang::Object value((jobject) NULL);
      OBJ_CALL(value = self->object.getKey());
      return ::java::lang::t_Object::wrap_Object(value);
    }

    static PyObject *t_Map$Entry_get__value(t_Map$Entry *self, void *data)
    {
      ::java::lang::Object value((jobject) NULL);
      OBJ_CALL(value = self->object.getValue());
      return ::java::lang::t_Object::wrap_Object(value);
    }
    static int t_Map$Entry_set__value(t_Map$Entry *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::Object value((jobject) NULL);
        if (!parseArg(arg, "o", &value))
        {
          INT_CALL(self->object.setValue(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "value", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/precedence/PrecedenceQueryParser.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {

            ::java::lang::Class *PrecedenceQueryParser::class$ = NULL;
            jmethodID *PrecedenceQueryParser::mids$ = NULL;
            bool PrecedenceQueryParser::live$ = false;

            jclass PrecedenceQueryParser::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/precedence/PrecedenceQueryParser");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            PrecedenceQueryParser::PrecedenceQueryParser() : ::org::apache::lucene::queryparser::flexible::standard::StandardQueryParser(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            PrecedenceQueryParser::PrecedenceQueryParser(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::queryparser::flexible::standard::StandardQueryParser(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {
            static PyObject *t_PrecedenceQueryParser_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PrecedenceQueryParser_instance_(PyTypeObject *type, PyObject *arg);
            static int t_PrecedenceQueryParser_init_(t_PrecedenceQueryParser *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_PrecedenceQueryParser__methods_[] = {
              DECLARE_METHOD(t_PrecedenceQueryParser, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PrecedenceQueryParser, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(PrecedenceQueryParser, t_PrecedenceQueryParser, ::org::apache::lucene::queryparser::flexible::standard::StandardQueryParser, PrecedenceQueryParser, t_PrecedenceQueryParser_init_, 0, 0, 0, 0, 0);

            void t_PrecedenceQueryParser::install(PyObject *module)
            {
              installType(&PY_TYPE(PrecedenceQueryParser), module, "PrecedenceQueryParser", 0);
            }

            void t_PrecedenceQueryParser::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(PrecedenceQueryParser).tp_dict, "class_", make_descriptor(PrecedenceQueryParser::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(PrecedenceQueryParser).tp_dict, "wrapfn_", make_descriptor(t_PrecedenceQueryParser::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(PrecedenceQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_PrecedenceQueryParser_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, PrecedenceQueryParser::initializeClass, 1)))
                return NULL;
              return t_PrecedenceQueryParser::wrap_Object(PrecedenceQueryParser(((t_PrecedenceQueryParser *) arg)->object.this$));
            }
            static PyObject *t_PrecedenceQueryParser_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, PrecedenceQueryParser::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_PrecedenceQueryParser_init_(t_PrecedenceQueryParser *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  PrecedenceQueryParser object((jobject) NULL);

                  INT_CALL(object = PrecedenceQueryParser());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  PrecedenceQueryParser object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                  {
                    INT_CALL(object = PrecedenceQueryParser(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/DutchStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *DutchStemmer::class$ = NULL;
        jmethodID *DutchStemmer::mids$ = NULL;
        bool DutchStemmer::live$ = false;

        jclass DutchStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/DutchStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DutchStemmer::DutchStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean DutchStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint DutchStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean DutchStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_DutchStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DutchStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DutchStemmer_init_(t_DutchStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DutchStemmer_equals(t_DutchStemmer *self, PyObject *args);
        static PyObject *t_DutchStemmer_hashCode(t_DutchStemmer *self, PyObject *args);
        static PyObject *t_DutchStemmer_stem(t_DutchStemmer *self, PyObject *args);

        static PyMethodDef t_DutchStemmer__methods_[] = {
          DECLARE_METHOD(t_DutchStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DutchStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DutchStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_DutchStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DutchStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DutchStemmer, t_DutchStemmer, ::org::tartarus::snowball::SnowballProgram, DutchStemmer, t_DutchStemmer_init_, 0, 0, 0, 0, 0);

        void t_DutchStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(DutchStemmer), module, "DutchStemmer", 0);
        }

        void t_DutchStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DutchStemmer).tp_dict, "class_", make_descriptor(DutchStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DutchStemmer).tp_dict, "wrapfn_", make_descriptor(t_DutchStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DutchStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DutchStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DutchStemmer::initializeClass, 1)))
            return NULL;
          return t_DutchStemmer::wrap_Object(DutchStemmer(((t_DutchStemmer *) arg)->object.this$));
        }
        static PyObject *t_DutchStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DutchStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DutchStemmer_init_(t_DutchStemmer *self, PyObject *args, PyObject *kwds)
        {
          DutchStemmer object((jobject) NULL);

          INT_CALL(object = DutchStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_DutchStemmer_equals(t_DutchStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DutchStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DutchStemmer_hashCode(t_DutchStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(DutchStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DutchStemmer_stem(t_DutchStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DutchStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/QueryTemplateManager.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/util/Properties.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *QueryTemplateManager::class$ = NULL;
          jmethodID *QueryTemplateManager::mids$ = NULL;
          bool QueryTemplateManager::live$ = false;

          jclass QueryTemplateManager::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/QueryTemplateManager");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
              mids$[mid_addDefaultQueryTemplate_be2e4f90] = env->getMethodID(cls, "addDefaultQueryTemplate", "(Ljava/io/InputStream;)V");
              mids$[mid_addQueryTemplate_fc5ef09a] = env->getMethodID(cls, "addQueryTemplate", "(Ljava/lang/String;Ljava/io/InputStream;)V");
              mids$[mid_getQueryAsXmlString_8b0ed65b] = env->getMethodID(cls, "getQueryAsXmlString", "(Ljava/util/Properties;)Ljava/lang/String;");
              mids$[mid_getQueryAsXmlString_cf43ccf5] = env->getMethodID(cls, "getQueryAsXmlString", "(Ljava/util/Properties;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getQueryAsXmlString_02821f09] = env->getStaticMethodID(cls, "getQueryAsXmlString", "(Ljava/util/Properties;Ljava/io/InputStream;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryTemplateManager::QueryTemplateManager() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          QueryTemplateManager::QueryTemplateManager(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

          void QueryTemplateManager::addDefaultQueryTemplate(const ::java::io::InputStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_addDefaultQueryTemplate_be2e4f90], a0.this$);
          }

          void QueryTemplateManager::addQueryTemplate(const ::java::lang::String & a0, const ::java::io::InputStream & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addQueryTemplate_fc5ef09a], a0.this$, a1.this$);
          }

          ::java::lang::String QueryTemplateManager::getQueryAsXmlString(const ::java::util::Properties & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getQueryAsXmlString_8b0ed65b], a0.this$));
          }

          ::java::lang::String QueryTemplateManager::getQueryAsXmlString(const ::java::util::Properties & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getQueryAsXmlString_cf43ccf5], a0.this$, a1.this$));
          }

          ::java::lang::String QueryTemplateManager::getQueryAsXmlString(const ::java::util::Properties & a0, const ::java::io::InputStream & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getQueryAsXmlString_02821f09], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_QueryTemplateManager_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryTemplateManager_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryTemplateManager_init_(t_QueryTemplateManager *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryTemplateManager_addDefaultQueryTemplate(t_QueryTemplateManager *self, PyObject *arg);
          static PyObject *t_QueryTemplateManager_addQueryTemplate(t_QueryTemplateManager *self, PyObject *args);
          static PyObject *t_QueryTemplateManager_getQueryAsXmlString(t_QueryTemplateManager *self, PyObject *args);
          static PyObject *t_QueryTemplateManager_getQueryAsXmlString_(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_QueryTemplateManager__methods_[] = {
            DECLARE_METHOD(t_QueryTemplateManager, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryTemplateManager, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryTemplateManager, addDefaultQueryTemplate, METH_O),
            DECLARE_METHOD(t_QueryTemplateManager, addQueryTemplate, METH_VARARGS),
            DECLARE_METHOD(t_QueryTemplateManager, getQueryAsXmlString, METH_VARARGS),
            DECLARE_METHOD(t_QueryTemplateManager, getQueryAsXmlString_, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryTemplateManager, t_QueryTemplateManager, ::java::lang::Object, QueryTemplateManager, t_QueryTemplateManager_init_, 0, 0, 0, 0, 0);

          void t_QueryTemplateManager::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryTemplateManager), module, "QueryTemplateManager", 0);
          }

          void t_QueryTemplateManager::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryTemplateManager).tp_dict, "class_", make_descriptor(QueryTemplateManager::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryTemplateManager).tp_dict, "wrapfn_", make_descriptor(t_QueryTemplateManager::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryTemplateManager).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryTemplateManager_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryTemplateManager::initializeClass, 1)))
              return NULL;
            return t_QueryTemplateManager::wrap_Object(QueryTemplateManager(((t_QueryTemplateManager *) arg)->object.this$));
          }
          static PyObject *t_QueryTemplateManager_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryTemplateManager::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryTemplateManager_init_(t_QueryTemplateManager *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                QueryTemplateManager object((jobject) NULL);

                INT_CALL(object = QueryTemplateManager());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::io::InputStream a0((jobject) NULL);
                QueryTemplateManager object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                {
                  INT_CALL(object = QueryTemplateManager(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryTemplateManager_addDefaultQueryTemplate(t_QueryTemplateManager *self, PyObject *arg)
          {
            ::java::io::InputStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.addDefaultQueryTemplate(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addDefaultQueryTemplate", arg);
            return NULL;
          }

          static PyObject *t_QueryTemplateManager_addQueryTemplate(t_QueryTemplateManager *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::InputStream a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::java::io::InputStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addQueryTemplate(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addQueryTemplate", args);
            return NULL;
          }

          static PyObject *t_QueryTemplateManager_getQueryAsXmlString(t_QueryTemplateManager *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::util::Properties a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::Properties::initializeClass, &a0, &p0, ::java::util::t_Properties::parameters_))
                {
                  OBJ_CALL(result = self->object.getQueryAsXmlString(a0));
                  return j2p(result);
                }
              }
              break;
             case 2:
              {
                ::java::util::Properties a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "Ks", ::java::util::Properties::initializeClass, &a0, &p0, ::java::util::t_Properties::parameters_, &a1))
                {
                  OBJ_CALL(result = self->object.getQueryAsXmlString(a0, a1));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getQueryAsXmlString", args);
            return NULL;
          }

          static PyObject *t_QueryTemplateManager_getQueryAsXmlString_(PyTypeObject *type, PyObject *args)
          {
            ::java::util::Properties a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::io::InputStream a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "Kk", ::java::util::Properties::initializeClass, ::java::io::InputStream::initializeClass, &a0, &p0, ::java::util::t_Properties::parameters_, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::queryparser::xml::QueryTemplateManager::getQueryAsXmlString(a0, a1));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "getQueryAsXmlString_", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/FieldInfosReader.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *FieldInfosReader::class$ = NULL;
        jmethodID *FieldInfosReader::mids$ = NULL;
        bool FieldInfosReader::live$ = false;

        jclass FieldInfosReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/FieldInfosReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_read_d7fc5981] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/index/FieldInfos;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::FieldInfos FieldInfosReader::read(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_read_d7fc5981], a0.this$, a1.this$, a2.this$, a3.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_FieldInfosReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfosReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfosReader_read(t_FieldInfosReader *self, PyObject *args);

        static PyMethodDef t_FieldInfosReader__methods_[] = {
          DECLARE_METHOD(t_FieldInfosReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfosReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfosReader, read, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInfosReader, t_FieldInfosReader, ::java::lang::Object, FieldInfosReader, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldInfosReader::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfosReader), module, "FieldInfosReader", 0);
        }

        void t_FieldInfosReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInfosReader).tp_dict, "class_", make_descriptor(FieldInfosReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInfosReader).tp_dict, "wrapfn_", make_descriptor(t_FieldInfosReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInfosReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldInfosReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfosReader::initializeClass, 1)))
            return NULL;
          return t_FieldInfosReader::wrap_Object(FieldInfosReader(((t_FieldInfosReader *) arg)->object.this$));
        }
        static PyObject *t_FieldInfosReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfosReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldInfosReader_read(t_FieldInfosReader *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

          if (!parseArgs(args, "kssk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "read", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/position/PositionFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace position {

          ::java::lang::Class *PositionFilter::class$ = NULL;
          jmethodID *PositionFilter::mids$ = NULL;
          bool PositionFilter::live$ = false;

          jclass PositionFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/position/PositionFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PositionFilter::PositionFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          PositionFilter::PositionFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          jboolean PositionFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void PositionFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace position {
          static PyObject *t_PositionFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PositionFilter_init_(t_PositionFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PositionFilter_incrementToken(t_PositionFilter *self, PyObject *args);
          static PyObject *t_PositionFilter_reset(t_PositionFilter *self, PyObject *args);

          static PyMethodDef t_PositionFilter__methods_[] = {
            DECLARE_METHOD(t_PositionFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_PositionFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositionFilter, t_PositionFilter, ::org::apache::lucene::analysis::TokenFilter, PositionFilter, t_PositionFilter_init_, 0, 0, 0, 0, 0);

          void t_PositionFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionFilter), module, "PositionFilter", 0);
          }

          void t_PositionFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositionFilter).tp_dict, "class_", make_descriptor(PositionFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositionFilter).tp_dict, "wrapfn_", make_descriptor(t_PositionFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositionFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionFilter::initializeClass, 1)))
              return NULL;
            return t_PositionFilter::wrap_Object(PositionFilter(((t_PositionFilter *) arg)->object.this$));
          }
          static PyObject *t_PositionFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PositionFilter_init_(t_PositionFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                PositionFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = PositionFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                PositionFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = PositionFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PositionFilter_incrementToken(t_PositionFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PositionFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_PositionFilter_reset(t_PositionFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PositionFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiTermQuery$TopTermsScoringBooleanQueryRewrite.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiTermQuery$TopTermsScoringBooleanQueryRewrite::class$ = NULL;
        jmethodID *MultiTermQuery$TopTermsScoringBooleanQueryRewrite::mids$ = NULL;
        bool MultiTermQuery$TopTermsScoringBooleanQueryRewrite::live$ = false;

        jclass MultiTermQuery$TopTermsScoringBooleanQueryRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiTermQuery$TopTermsScoringBooleanQueryRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_getMaxSize_54c6a179] = env->getMethodID(cls, "getMaxSize", "()I");
            mids$[mid_addClause_82a56efb] = env->getMethodID(cls, "addClause", "(Lorg/apache/lucene/search/BooleanQuery;Lorg/apache/lucene/index/Term;IFLorg/apache/lucene/index/TermContext;)V");
            mids$[mid_getTopLevelQuery_6f9339e7] = env->getMethodID(cls, "getTopLevelQuery", "()Lorg/apache/lucene/search/BooleanQuery;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermQuery$TopTermsScoringBooleanQueryRewrite::MultiTermQuery$TopTermsScoringBooleanQueryRewrite(jint a0) : ::org::apache::lucene::search::TopTermsRewrite(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_of_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, PyObject *args);
        static int t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_init_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_get__parameters_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, void *data);
        static PyGetSetDef t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite__methods_[] = {
          DECLARE_METHOD(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTermQuery$TopTermsScoringBooleanQueryRewrite, t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite, ::org::apache::lucene::search::TopTermsRewrite, MultiTermQuery$TopTermsScoringBooleanQueryRewrite, t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_init_, 0, 0, t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite__fields_, 0, 0);
        PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_Object(const MultiTermQuery$TopTermsScoringBooleanQueryRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self = (t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self = (t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermQuery$TopTermsScoringBooleanQueryRewrite), module, "MultiTermQuery$TopTermsScoringBooleanQueryRewrite", 0);
        }

        void t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$TopTermsScoringBooleanQueryRewrite).tp_dict, "class_", make_descriptor(MultiTermQuery$TopTermsScoringBooleanQueryRewrite::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$TopTermsScoringBooleanQueryRewrite).tp_dict, "wrapfn_", make_descriptor(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$TopTermsScoringBooleanQueryRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermQuery$TopTermsScoringBooleanQueryRewrite::initializeClass, 1)))
            return NULL;
          return t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_Object(MultiTermQuery$TopTermsScoringBooleanQueryRewrite(((t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *) arg)->object.this$));
        }
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermQuery$TopTermsScoringBooleanQueryRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_of_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_init_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          MultiTermQuery$TopTermsScoringBooleanQueryRewrite object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = MultiTermQuery$TopTermsScoringBooleanQueryRewrite(a0));
            self->object = object;
            self->parameters[0] = &::org::apache::lucene::search::PY_TYPE(BooleanQuery);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_get__parameters_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/SumTotalTermFreqValueSource.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *SumTotalTermFreqValueSource::class$ = NULL;
            jmethodID *SumTotalTermFreqValueSource::mids$ = NULL;
            bool SumTotalTermFreqValueSource::live$ = false;

            jclass SumTotalTermFreqValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/SumTotalTermFreqValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SumTotalTermFreqValueSource::SumTotalTermFreqValueSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            void SumTotalTermFreqValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String SumTotalTermFreqValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean SumTotalTermFreqValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues SumTotalTermFreqValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint SumTotalTermFreqValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String SumTotalTermFreqValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_SumTotalTermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SumTotalTermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SumTotalTermFreqValueSource_init_(t_SumTotalTermFreqValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SumTotalTermFreqValueSource_createWeight(t_SumTotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_SumTotalTermFreqValueSource_description(t_SumTotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_SumTotalTermFreqValueSource_equals(t_SumTotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_SumTotalTermFreqValueSource_getValues(t_SumTotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_SumTotalTermFreqValueSource_hashCode(t_SumTotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_SumTotalTermFreqValueSource_name(t_SumTotalTermFreqValueSource *self);

            static PyMethodDef t_SumTotalTermFreqValueSource__methods_[] = {
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SumTotalTermFreqValueSource, t_SumTotalTermFreqValueSource, ::org::apache::lucene::queries::function::ValueSource, SumTotalTermFreqValueSource, t_SumTotalTermFreqValueSource_init_, 0, 0, 0, 0, 0);

            void t_SumTotalTermFreqValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(SumTotalTermFreqValueSource), module, "SumTotalTermFreqValueSource", 0);
            }

            void t_SumTotalTermFreqValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SumTotalTermFreqValueSource).tp_dict, "class_", make_descriptor(SumTotalTermFreqValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SumTotalTermFreqValueSource).tp_dict, "wrapfn_", make_descriptor(t_SumTotalTermFreqValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SumTotalTermFreqValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SumTotalTermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SumTotalTermFreqValueSource::initializeClass, 1)))
                return NULL;
              return t_SumTotalTermFreqValueSource::wrap_Object(SumTotalTermFreqValueSource(((t_SumTotalTermFreqValueSource *) arg)->object.this$));
            }
            static PyObject *t_SumTotalTermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SumTotalTermFreqValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SumTotalTermFreqValueSource_init_(t_SumTotalTermFreqValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              SumTotalTermFreqValueSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = SumTotalTermFreqValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SumTotalTermFreqValueSource_createWeight(t_SumTotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SumTotalTermFreqValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_SumTotalTermFreqValueSource_description(t_SumTotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SumTotalTermFreqValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_SumTotalTermFreqValueSource_equals(t_SumTotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(SumTotalTermFreqValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_SumTotalTermFreqValueSource_getValues(t_SumTotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(SumTotalTermFreqValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_SumTotalTermFreqValueSource_hashCode(t_SumTotalTermFreqValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(SumTotalTermFreqValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_SumTotalTermFreqValueSource_name(t_SumTotalTermFreqValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$ShortComparator.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "java/lang/Short.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$ShortComparator::class$ = NULL;
        jmethodID *FieldComparator$ShortComparator::mids$ = NULL;
        bool FieldComparator$ShortComparator::live$ = false;

        jclass FieldComparator$ShortComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$ShortComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_6b8573ce] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Short;)V");
            mids$[mid_value_5bcaf269] = env->getMethodID(cls, "value", "(I)Ljava/lang/Short;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint FieldComparator$ShortComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$ShortComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$ShortComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        void FieldComparator$ShortComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$ShortComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$ShortComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$ShortComparator::setTopValue(const ::java::lang::Short & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_6b8573ce], a0.this$);
        }

        ::java::lang::Short FieldComparator$ShortComparator::value(jint a0) const
        {
          return ::java::lang::Short(env->callObjectMethod(this$, mids$[mid_value_5bcaf269], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$ShortComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$ShortComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$ShortComparator_of_(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_compare(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_compareBottom(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_compareTop(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_copy(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_setBottom(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_setNextReader(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_setTopValue(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_value(t_FieldComparator$ShortComparator *self, PyObject *args);
        static int t_FieldComparator$ShortComparator_set__bottom(t_FieldComparator$ShortComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$ShortComparator_set__nextReader(t_FieldComparator$ShortComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$ShortComparator_set__topValue(t_FieldComparator$ShortComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$ShortComparator_get__parameters_(t_FieldComparator$ShortComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$ShortComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$ShortComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$ShortComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$ShortComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$ShortComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$ShortComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$ShortComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$ShortComparator, t_FieldComparator$ShortComparator, ::org::apache::lucene::search::FieldComparator$NumericComparator, FieldComparator$ShortComparator, abstract_init, 0, 0, t_FieldComparator$ShortComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$ShortComparator::wrap_Object(const FieldComparator$ShortComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$ShortComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$ShortComparator *self = (t_FieldComparator$ShortComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$ShortComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$ShortComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$ShortComparator *self = (t_FieldComparator$ShortComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$ShortComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$ShortComparator), module, "FieldComparator$ShortComparator", 0);
        }

        void t_FieldComparator$ShortComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$ShortComparator).tp_dict, "class_", make_descriptor(FieldComparator$ShortComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$ShortComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$ShortComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$ShortComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$ShortComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$ShortComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$ShortComparator::wrap_Object(FieldComparator$ShortComparator(((t_FieldComparator$ShortComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$ShortComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$ShortComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$ShortComparator_of_(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldComparator$ShortComparator_compare(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$ShortComparator_compareBottom(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$ShortComparator_compareTop(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$ShortComparator_copy(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$ShortComparator_setBottom(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$ShortComparator_setNextReader(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Short));
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$ShortComparator_setTopValue(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          ::java::lang::Short a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Short), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$ShortComparator_value(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Short result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Short::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$ShortComparator_get__parameters_(t_FieldComparator$ShortComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$ShortComparator_set__bottom(t_FieldComparator$ShortComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$ShortComparator_set__nextReader(t_FieldComparator$ShortComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$ShortComparator_set__topValue(t_FieldComparator$ShortComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Short value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Short), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/PayloadSpanUtil.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *PayloadSpanUtil::class$ = NULL;
          jmethodID *PayloadSpanUtil::mids$ = NULL;
          bool PayloadSpanUtil::live$ = false;

          jclass PayloadSpanUtil::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/PayloadSpanUtil");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4df5686b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReaderContext;)V");
              mids$[mid_getPayloadsForQuery_3971ce9f] = env->getMethodID(cls, "getPayloadsForQuery", "(Lorg/apache/lucene/search/Query;)Ljava/util/Collection;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadSpanUtil::PayloadSpanUtil(const ::org::apache::lucene::index::IndexReaderContext & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4df5686b, a0.this$)) {}

          ::java::util::Collection PayloadSpanUtil::getPayloadsForQuery(const ::org::apache::lucene::search::Query & a0) const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getPayloadsForQuery_3971ce9f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_PayloadSpanUtil_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadSpanUtil_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadSpanUtil_init_(t_PayloadSpanUtil *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadSpanUtil_getPayloadsForQuery(t_PayloadSpanUtil *self, PyObject *arg);

          static PyMethodDef t_PayloadSpanUtil__methods_[] = {
            DECLARE_METHOD(t_PayloadSpanUtil, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadSpanUtil, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadSpanUtil, getPayloadsForQuery, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadSpanUtil, t_PayloadSpanUtil, ::java::lang::Object, PayloadSpanUtil, t_PayloadSpanUtil_init_, 0, 0, 0, 0, 0);

          void t_PayloadSpanUtil::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadSpanUtil), module, "PayloadSpanUtil", 0);
          }

          void t_PayloadSpanUtil::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadSpanUtil).tp_dict, "class_", make_descriptor(PayloadSpanUtil::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadSpanUtil).tp_dict, "wrapfn_", make_descriptor(t_PayloadSpanUtil::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadSpanUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadSpanUtil_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadSpanUtil::initializeClass, 1)))
              return NULL;
            return t_PayloadSpanUtil::wrap_Object(PayloadSpanUtil(((t_PayloadSpanUtil *) arg)->object.this$));
          }
          static PyObject *t_PayloadSpanUtil_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadSpanUtil::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadSpanUtil_init_(t_PayloadSpanUtil *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
            PayloadSpanUtil object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReaderContext::initializeClass, &a0))
            {
              INT_CALL(object = PayloadSpanUtil(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PayloadSpanUtil_getPayloadsForQuery(t_PayloadSpanUtil *self, PyObject *arg)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::java::util::Collection result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getPayloadsForQuery(a0));
              return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }

            PyErr_SetArgsError((PyObject *) self, "getPayloadsForQuery", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *Dictionary::class$ = NULL;
          jmethodID *Dictionary::mids$ = NULL;
          bool Dictionary::live$ = false;

          jclass Dictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/Dictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getEntryIterator_23dc46b1] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::search::suggest::InputIterator Dictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_23dc46b1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_Dictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Dictionary_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Dictionary_getEntryIterator(t_Dictionary *self);
          static PyObject *t_Dictionary_get__entryIterator(t_Dictionary *self, void *data);
          static PyGetSetDef t_Dictionary__fields_[] = {
            DECLARE_GET_FIELD(t_Dictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Dictionary__methods_[] = {
            DECLARE_METHOD(t_Dictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Dictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Dictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Dictionary, t_Dictionary, ::java::lang::Object, Dictionary, abstract_init, 0, 0, t_Dictionary__fields_, 0, 0);

          void t_Dictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(Dictionary), module, "Dictionary", 0);
          }

          void t_Dictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Dictionary).tp_dict, "class_", make_descriptor(Dictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Dictionary).tp_dict, "wrapfn_", make_descriptor(t_Dictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Dictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Dictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Dictionary::initializeClass, 1)))
              return NULL;
            return t_Dictionary::wrap_Object(Dictionary(((t_Dictionary *) arg)->object.this$));
          }
          static PyObject *t_Dictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Dictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Dictionary_getEntryIterator(t_Dictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_Dictionary_get__entryIterator(t_Dictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/TokenSources.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/document/Document.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *TokenSources::class$ = NULL;
          jmethodID *TokenSources::mids$ = NULL;
          bool TokenSources::live$ = false;

          jclass TokenSources::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/TokenSources");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getAnyTokenStream_2593cc2a] = env->getStaticMethodID(cls, "getAnyTokenStream", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getAnyTokenStream_326e373c] = env->getStaticMethodID(cls, "getAnyTokenStream", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/document/Document;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStream_a3ddc01a] = env->getStaticMethodID(cls, "getTokenStream", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStream_6006da77] = env->getStaticMethodID(cls, "getTokenStream", "(Lorg/apache/lucene/index/Terms;Z)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStream_f436def7] = env->getStaticMethodID(cls, "getTokenStream", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStream_5d782325] = env->getStaticMethodID(cls, "getTokenStream", "(Lorg/apache/lucene/document/Document;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStream_2593cc2a] = env->getStaticMethodID(cls, "getTokenStream", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStreamWithOffsets_1c01cdda] = env->getStaticMethodID(cls, "getTokenStreamWithOffsets", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenSources::TokenSources() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::analysis::TokenStream TokenSources::getAnyTokenStream(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::analysis::Analyzer & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getAnyTokenStream_2593cc2a], a0.this$, a1, a2.this$, a3.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getAnyTokenStream(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::document::Document & a3, const ::org::apache::lucene::analysis::Analyzer & a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getAnyTokenStream_326e373c], a0.this$, a1, a2.this$, a3.this$, a4.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStream(const ::org::apache::lucene::index::Terms & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStream_a3ddc01a], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStream(const ::org::apache::lucene::index::Terms & a0, jboolean a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStream_6006da77], a0.this$, a1));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStream(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStream_f436def7], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStream(const ::org::apache::lucene::document::Document & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStream_5d782325], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStream(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::analysis::Analyzer & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStream_2593cc2a], a0.this$, a1, a2.this$, a3.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStreamWithOffsets(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStreamWithOffsets_1c01cdda], a0.this$, a1, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_TokenSources_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenSources_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenSources_init_(t_TokenSources *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenSources_getAnyTokenStream(PyTypeObject *type, PyObject *args);
          static PyObject *t_TokenSources_getTokenStream(PyTypeObject *type, PyObject *args);
          static PyObject *t_TokenSources_getTokenStreamWithOffsets(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_TokenSources__methods_[] = {
            DECLARE_METHOD(t_TokenSources, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenSources, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenSources, getAnyTokenStream, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenSources, getTokenStream, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenSources, getTokenStreamWithOffsets, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenSources, t_TokenSources, ::java::lang::Object, TokenSources, t_TokenSources_init_, 0, 0, 0, 0, 0);

          void t_TokenSources::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenSources), module, "TokenSources", 0);
          }

          void t_TokenSources::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenSources).tp_dict, "class_", make_descriptor(TokenSources::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenSources).tp_dict, "wrapfn_", make_descriptor(t_TokenSources::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenSources).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenSources_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenSources::initializeClass, 1)))
              return NULL;
            return t_TokenSources::wrap_Object(TokenSources(((t_TokenSources *) arg)->object.this$));
          }
          static PyObject *t_TokenSources_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenSources::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenSources_init_(t_TokenSources *self, PyObject *args, PyObject *kwds)
          {
            TokenSources object((jobject) NULL);

            INT_CALL(object = TokenSources());
            self->object = object;

            return 0;
          }

          static PyObject *t_TokenSources_getAnyTokenStream(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "kIsk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getAnyTokenStream(a0, a1, a2, a3));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::document::Document a3((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a4((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "kIskk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::document::Document::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getAnyTokenStream(a0, a1, a2, a3, a4));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getAnyTokenStream", args);
            return NULL;
          }

          static PyObject *t_TokenSources_getTokenStream(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::index::Terms a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStream(a0));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::index::Terms a0((jobject) NULL);
                jboolean a1;
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "kZ", ::org::apache::lucene::index::Terms::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStream(a0, a1));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "ssk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStream(a0, a1, a2));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::document::Document a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "ksk", ::org::apache::lucene::document::Document::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStream(a0, a1, a2));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "kIsk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStream(a0, a1, a2, a3));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getTokenStream", args);
            return NULL;
          }

          static PyObject *t_TokenSources_getTokenStreamWithOffsets(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            jint a1;
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "kIs", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStreamWithOffsets(a0, a1, a2));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getTokenStreamWithOffsets", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterTermsEnum.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterAtomicReader$FilterTermsEnum::class$ = NULL;
        jmethodID *FilterAtomicReader$FilterTermsEnum::mids$ = NULL;
        bool FilterAtomicReader$FilterTermsEnum::live$ = false;

        jclass FilterAtomicReader$FilterTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterAtomicReader$FilterTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0f660bfe] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;)V");
            mids$[mid_attributes_f901022b] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_docFreq_54c6a179] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_docs_e6d4c3ef] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_docsAndPositions_b5d9c11b] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
            mids$[mid_seekCeil_fa9d72c4] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_seekExact_0ee6df2f] = env->getMethodID(cls, "seekExact", "(J)V");
            mids$[mid_term_4ae19461] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterAtomicReader$FilterTermsEnum::FilterAtomicReader$FilterTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0) : ::org::apache::lucene::index::TermsEnum(env->newObject(initializeClass, &mids$, mid_init$_0f660bfe, a0.this$)) {}

        ::org::apache::lucene::util::AttributeSource FilterAtomicReader$FilterTermsEnum::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_f901022b]));
        }

        jint FilterAtomicReader$FilterTermsEnum::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_54c6a179]);
        }

        ::org::apache::lucene::index::DocsEnum FilterAtomicReader$FilterTermsEnum::docs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_e6d4c3ef], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum FilterAtomicReader$FilterTermsEnum::docsAndPositions(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsAndPositionsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_b5d9c11b], a0.this$, a1.this$, a2));
        }

        ::java::util::Comparator FilterAtomicReader$FilterTermsEnum::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        ::org::apache::lucene::util::BytesRef FilterAtomicReader$FilterTermsEnum::next() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
        }

        jlong FilterAtomicReader$FilterTermsEnum::ord() const
        {
          return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
        }

        ::org::apache::lucene::index::TermsEnum$SeekStatus FilterAtomicReader$FilterTermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_fa9d72c4], a0.this$));
        }

        void FilterAtomicReader$FilterTermsEnum::seekExact(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_0ee6df2f], a0);
        }

        ::org::apache::lucene::util::BytesRef FilterAtomicReader$FilterTermsEnum::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_4ae19461]));
        }

        jlong FilterAtomicReader$FilterTermsEnum::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterAtomicReader$FilterTermsEnum_init_(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_attributes(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_docFreq(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_docs(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_docsAndPositions(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_getComparator(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_next(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_ord(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_seekCeil(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_seekExact(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_term(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_totalTermFreq(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_get__comparator(t_FilterAtomicReader$FilterTermsEnum *self, void *data);
        static PyGetSetDef t_FilterAtomicReader$FilterTermsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_FilterAtomicReader$FilterTermsEnum, comparator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterAtomicReader$FilterTermsEnum__methods_[] = {
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, attributes, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, docs, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, docsAndPositions, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, next, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, ord, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, seekCeil, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, seekExact, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, term, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterAtomicReader$FilterTermsEnum, t_FilterAtomicReader$FilterTermsEnum, ::org::apache::lucene::index::TermsEnum, FilterAtomicReader$FilterTermsEnum, t_FilterAtomicReader$FilterTermsEnum_init_, PyObject_SelfIter, ((PyObject *(*)(t_FilterAtomicReader$FilterTermsEnum *)) get_next< t_FilterAtomicReader$FilterTermsEnum,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_FilterAtomicReader$FilterTermsEnum__fields_, 0, 0);

        void t_FilterAtomicReader$FilterTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), module, "FilterAtomicReader$FilterTermsEnum", 0);
        }

        void t_FilterAtomicReader$FilterTermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterTermsEnum).tp_dict, "class_", make_descriptor(FilterAtomicReader$FilterTermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_FilterAtomicReader$FilterTermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterAtomicReader$FilterTermsEnum::initializeClass, 1)))
            return NULL;
          return t_FilterAtomicReader$FilterTermsEnum::wrap_Object(FilterAtomicReader$FilterTermsEnum(((t_FilterAtomicReader$FilterTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterAtomicReader$FilterTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterAtomicReader$FilterTermsEnum_init_(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          FilterAtomicReader$FilterTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
          {
            INT_CALL(object = FilterAtomicReader$FilterTermsEnum(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_attributes(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.attributes());
            return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "attributes", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_docFreq(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docFreq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_docs(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docs(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "docs", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_docsAndPositions(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsAndPositionsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "docsAndPositions", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_getComparator(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_next(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "next", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_ord(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "ord", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_seekCeil(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.seekCeil(a0));
            return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "seekCeil", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_seekExact(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.seekExact(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "seekExact", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_term(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.term());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "term", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_totalTermFreq(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.totalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "totalTermFreq", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_get__comparator(t_FilterAtomicReader$FilterTermsEnum *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/DrillDownQuery.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *DrillDownQuery::class$ = NULL;
        jmethodID *DrillDownQuery::mids$ = NULL;
        bool DrillDownQuery::live$ = false;

        jclass DrillDownQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/DrillDownQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_46ac0e90] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/FacetsConfig;)V");
            mids$[mid_init$_82818c2d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/search/Query;)V");
            mids$[mid_add_ee8b16d8] = env->getMethodID(cls, "add", "(Ljava/lang/String;Lorg/apache/lucene/search/Filter;)V");
            mids$[mid_add_ba45d66a] = env->getMethodID(cls, "add", "(Ljava/lang/String;[Ljava/lang/String;)V");
            mids$[mid_add_5b69597d] = env->getMethodID(cls, "add", "(Ljava/lang/String;Lorg/apache/lucene/search/Query;)V");
            mids$[mid_clone_477b643a] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/facet/DrillDownQuery;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_term_48584f7a] = env->getStaticMethodID(cls, "term", "(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/index/Term;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DrillDownQuery::DrillDownQuery(const ::org::apache::lucene::facet::FacetsConfig & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_46ac0e90, a0.this$)) {}

        DrillDownQuery::DrillDownQuery(const ::org::apache::lucene::facet::FacetsConfig & a0, const ::org::apache::lucene::search::Query & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_82818c2d, a0.this$, a1.this$)) {}

        void DrillDownQuery::add(const ::java::lang::String & a0, const ::org::apache::lucene::search::Filter & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_ee8b16d8], a0.this$, a1.this$);
        }

        void DrillDownQuery::add(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_ba45d66a], a0.this$, a1.this$);
        }

        void DrillDownQuery::add(const ::java::lang::String & a0, const ::org::apache::lucene::search::Query & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_5b69597d], a0.this$, a1.this$);
        }

        DrillDownQuery DrillDownQuery::clone() const
        {
          return DrillDownQuery(env->callObjectMethod(this$, mids$[mid_clone_477b643a]));
        }

        jboolean DrillDownQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint DrillDownQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query DrillDownQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        ::org::apache::lucene::index::Term DrillDownQuery::term(const ::java::lang::String & a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::Term(env->callStaticObjectMethod(cls, mids$[mid_term_48584f7a], a0.this$, a1.this$, a2.this$));
        }

        ::java::lang::String DrillDownQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_DrillDownQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DrillDownQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DrillDownQuery_init_(t_DrillDownQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DrillDownQuery_add(t_DrillDownQuery *self, PyObject *args);
        static PyObject *t_DrillDownQuery_clone(t_DrillDownQuery *self, PyObject *args);
        static PyObject *t_DrillDownQuery_equals(t_DrillDownQuery *self, PyObject *args);
        static PyObject *t_DrillDownQuery_hashCode(t_DrillDownQuery *self, PyObject *args);
        static PyObject *t_DrillDownQuery_rewrite(t_DrillDownQuery *self, PyObject *args);
        static PyObject *t_DrillDownQuery_term(PyTypeObject *type, PyObject *args);
        static PyObject *t_DrillDownQuery_toString(t_DrillDownQuery *self, PyObject *args);

        static PyMethodDef t_DrillDownQuery__methods_[] = {
          DECLARE_METHOD(t_DrillDownQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DrillDownQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DrillDownQuery, add, METH_VARARGS),
          DECLARE_METHOD(t_DrillDownQuery, clone, METH_VARARGS),
          DECLARE_METHOD(t_DrillDownQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_DrillDownQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DrillDownQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_DrillDownQuery, term, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DrillDownQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DrillDownQuery, t_DrillDownQuery, ::org::apache::lucene::search::Query, DrillDownQuery, t_DrillDownQuery_init_, 0, 0, 0, 0, 0);

        void t_DrillDownQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(DrillDownQuery), module, "DrillDownQuery", 0);
        }

        void t_DrillDownQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DrillDownQuery).tp_dict, "class_", make_descriptor(DrillDownQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DrillDownQuery).tp_dict, "wrapfn_", make_descriptor(t_DrillDownQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DrillDownQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DrillDownQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DrillDownQuery::initializeClass, 1)))
            return NULL;
          return t_DrillDownQuery::wrap_Object(DrillDownQuery(((t_DrillDownQuery *) arg)->object.this$));
        }
        static PyObject *t_DrillDownQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DrillDownQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DrillDownQuery_init_(t_DrillDownQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::facet::FacetsConfig a0((jobject) NULL);
              DrillDownQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::facet::FacetsConfig::initializeClass, &a0))
              {
                INT_CALL(object = DrillDownQuery(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::facet::FacetsConfig a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              DrillDownQuery object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
              {
                INT_CALL(object = DrillDownQuery(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DrillDownQuery_add(t_DrillDownQuery *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::java::lang::String > a1((jobject) NULL);

              if (!parseArgs(args, "s[s", &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_DrillDownQuery_clone(t_DrillDownQuery *self, PyObject *args)
        {
          DrillDownQuery result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_DrillDownQuery::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DrillDownQuery), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_DrillDownQuery_equals(t_DrillDownQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DrillDownQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DrillDownQuery_hashCode(t_DrillDownQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(DrillDownQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DrillDownQuery_rewrite(t_DrillDownQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DrillDownQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_DrillDownQuery_term(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::String > a2((jobject) NULL);
          ::org::apache::lucene::index::Term result((jobject) NULL);

          if (!parseArgs(args, "ss[s", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::facet::DrillDownQuery::term(a0, a1, a2));
            return ::org::apache::lucene::index::t_Term::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "term", args);
          return NULL;
        }

        static PyObject *t_DrillDownQuery_toString(t_DrillDownQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(DrillDownQuery), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Util$TopNSearcher.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/fst/Util$TopResults.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Util$TopNSearcher::class$ = NULL;
          jmethodID *Util$TopNSearcher::mids$ = NULL;
          bool Util$TopNSearcher::live$ = false;

          jclass Util$TopNSearcher::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Util$TopNSearcher");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_95a8ae3f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;IILjava/util/Comparator;)V");
              mids$[mid_addStartPaths_9e8aa683] = env->getMethodID(cls, "addStartPaths", "(Lorg/apache/lucene/util/fst/FST$Arc;Ljava/lang/Object;ZLorg/apache/lucene/util/IntsRef;)V");
              mids$[mid_search_c06b4353] = env->getMethodID(cls, "search", "()Lorg/apache/lucene/util/fst/Util$TopResults;");
              mids$[mid_acceptResult_5219743c] = env->getMethodID(cls, "acceptResult", "(Lorg/apache/lucene/util/IntsRef;Ljava/lang/Object;)Z");
              mids$[mid_addIfCompetitive_175f8fc8] = env->getMethodID(cls, "addIfCompetitive", "(Lorg/apache/lucene/util/fst/Util$FSTPath;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Util$TopNSearcher::Util$TopNSearcher(const ::org::apache::lucene::util::fst::FST & a0, jint a1, jint a2, const ::java::util::Comparator & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_95a8ae3f, a0.this$, a1, a2, a3.this$)) {}

          void Util$TopNSearcher::addStartPaths(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::java::lang::Object & a1, jboolean a2, const ::org::apache::lucene::util::IntsRef & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addStartPaths_9e8aa683], a0.this$, a1.this$, a2, a3.this$);
          }

          ::org::apache::lucene::util::fst::Util$TopResults Util$TopNSearcher::search() const
          {
            return ::org::apache::lucene::util::fst::Util$TopResults(env->callObjectMethod(this$, mids$[mid_search_c06b4353]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Util$TopNSearcher_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$TopNSearcher_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$TopNSearcher_of_(t_Util$TopNSearcher *self, PyObject *args);
          static int t_Util$TopNSearcher_init_(t_Util$TopNSearcher *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Util$TopNSearcher_addStartPaths(t_Util$TopNSearcher *self, PyObject *args);
          static PyObject *t_Util$TopNSearcher_search(t_Util$TopNSearcher *self);
          static PyObject *t_Util$TopNSearcher_get__parameters_(t_Util$TopNSearcher *self, void *data);
          static PyGetSetDef t_Util$TopNSearcher__fields_[] = {
            DECLARE_GET_FIELD(t_Util$TopNSearcher, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Util$TopNSearcher__methods_[] = {
            DECLARE_METHOD(t_Util$TopNSearcher, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$TopNSearcher, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$TopNSearcher, of_, METH_VARARGS),
            DECLARE_METHOD(t_Util$TopNSearcher, addStartPaths, METH_VARARGS),
            DECLARE_METHOD(t_Util$TopNSearcher, search, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Util$TopNSearcher, t_Util$TopNSearcher, ::java::lang::Object, Util$TopNSearcher, t_Util$TopNSearcher_init_, 0, 0, t_Util$TopNSearcher__fields_, 0, 0);
          PyObject *t_Util$TopNSearcher::wrap_Object(const Util$TopNSearcher& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$TopNSearcher::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$TopNSearcher *self = (t_Util$TopNSearcher *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Util$TopNSearcher::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$TopNSearcher::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$TopNSearcher *self = (t_Util$TopNSearcher *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Util$TopNSearcher::install(PyObject *module)
          {
            installType(&PY_TYPE(Util$TopNSearcher), module, "Util$TopNSearcher", 0);
          }

          void t_Util$TopNSearcher::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Util$TopNSearcher).tp_dict, "class_", make_descriptor(Util$TopNSearcher::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Util$TopNSearcher).tp_dict, "wrapfn_", make_descriptor(t_Util$TopNSearcher::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Util$TopNSearcher).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Util$TopNSearcher_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Util$TopNSearcher::initializeClass, 1)))
              return NULL;
            return t_Util$TopNSearcher::wrap_Object(Util$TopNSearcher(((t_Util$TopNSearcher *) arg)->object.this$));
          }
          static PyObject *t_Util$TopNSearcher_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Util$TopNSearcher::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Util$TopNSearcher_of_(t_Util$TopNSearcher *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Util$TopNSearcher_init_(t_Util$TopNSearcher *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            jint a2;
            ::java::util::Comparator a3((jobject) NULL);
            PyTypeObject **p3;
            Util$TopNSearcher object((jobject) NULL);

            if (!parseArgs(args, "KIIK", ::org::apache::lucene::util::fst::FST::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_))
            {
              INT_CALL(object = Util$TopNSearcher(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Util$TopNSearcher_addStartPaths(t_Util$TopNSearcher *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::Object a1((jobject) NULL);
            jboolean a2;
            ::org::apache::lucene::util::IntsRef a3((jobject) NULL);

            if (!parseArgs(args, "KOZk", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, self->parameters[0], ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.addStartPaths(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addStartPaths", args);
            return NULL;
          }

          static PyObject *t_Util$TopNSearcher_search(t_Util$TopNSearcher *self)
          {
            ::org::apache::lucene::util::fst::Util$TopResults result((jobject) NULL);
            OBJ_CALL(result = self->object.search());
            return ::org::apache::lucene::util::fst::t_Util$TopResults::wrap_Object(result, self->parameters[0]);
          }
          static PyObject *t_Util$TopNSearcher_get__parameters_(t_Util$TopNSearcher *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/ParserException.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *ParserException::class$ = NULL;
          jmethodID *ParserException::mids$ = NULL;
          bool ParserException::live$ = false;

          jclass ParserException::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/ParserException");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ParserException::ParserException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ParserException::ParserException(const ::java::lang::Throwable & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

          ParserException::ParserException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          ParserException::ParserException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_ParserException_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ParserException_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ParserException_init_(t_ParserException *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_ParserException__methods_[] = {
            DECLARE_METHOD(t_ParserException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParserException, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ParserException, t_ParserException, ::java::lang::Exception, ParserException, t_ParserException_init_, 0, 0, 0, 0, 0);

          void t_ParserException::install(PyObject *module)
          {
            installType(&PY_TYPE(ParserException), module, "ParserException", 0);
          }

          void t_ParserException::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ParserException).tp_dict, "class_", make_descriptor(ParserException::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ParserException).tp_dict, "wrapfn_", make_descriptor(t_ParserException::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ParserException).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ParserException_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ParserException::initializeClass, 1)))
              return NULL;
            return t_ParserException::wrap_Object(ParserException(((t_ParserException *) arg)->object.this$));
          }
          static PyObject *t_ParserException_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ParserException::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ParserException_init_(t_ParserException *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ParserException object((jobject) NULL);

                INT_CALL(object = ParserException());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::lang::Throwable a0((jobject) NULL);
                ParserException object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
                {
                  INT_CALL(object = ParserException(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ParserException object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = ParserException(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::Throwable a1((jobject) NULL);
                ParserException object((jobject) NULL);

                if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ParserException(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Attribute.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "org/apache/lucene/util/AttributeSource$State.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeSource::class$ = NULL;
        jmethodID *AttributeSource::mids$ = NULL;
        bool AttributeSource::live$ = false;
        ::org::apache::lucene::util::AttributeFactory *AttributeSource::DEFAULT_ATTRIBUTE_FACTORY = NULL;

        jclass AttributeSource::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeSource");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_a5f989be] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;)V");
            mids$[mid_addAttribute_2e7bf8aa] = env->getMethodID(cls, "addAttribute", "(Ljava/lang/Class;)Lorg/apache/lucene/util/Attribute;");
            mids$[mid_addAttributeImpl_d86caa9f] = env->getMethodID(cls, "addAttributeImpl", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_captureState_0f9ed4d4] = env->getMethodID(cls, "captureState", "()Lorg/apache/lucene/util/AttributeSource$State;");
            mids$[mid_clearAttributes_54c6a166] = env->getMethodID(cls, "clearAttributes", "()V");
            mids$[mid_cloneAttributes_f901022b] = env->getMethodID(cls, "cloneAttributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_copyTo_aea2d6ea] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeSource;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getAttribute_2e7bf8aa] = env->getMethodID(cls, "getAttribute", "(Ljava/lang/Class;)Lorg/apache/lucene/util/Attribute;");
            mids$[mid_getAttributeClassesIterator_40858c90] = env->getMethodID(cls, "getAttributeClassesIterator", "()Ljava/util/Iterator;");
            mids$[mid_getAttributeFactory_bb394e5b] = env->getMethodID(cls, "getAttributeFactory", "()Lorg/apache/lucene/util/AttributeFactory;");
            mids$[mid_getAttributeImplsIterator_40858c90] = env->getMethodID(cls, "getAttributeImplsIterator", "()Ljava/util/Iterator;");
            mids$[mid_hasAttribute_a5deaff8] = env->getMethodID(cls, "hasAttribute", "(Ljava/lang/Class;)Z");
            mids$[mid_hasAttributes_54c6a16a] = env->getMethodID(cls, "hasAttributes", "()Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_reflectAsString_445a175e] = env->getMethodID(cls, "reflectAsString", "(Z)Ljava/lang/String;");
            mids$[mid_reflectWith_5f3f5102] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
            mids$[mid_restoreState_b31fff69] = env->getMethodID(cls, "restoreState", "(Lorg/apache/lucene/util/AttributeSource$State;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_ATTRIBUTE_FACTORY = new ::org::apache::lucene::util::AttributeFactory(env->getStaticObjectField(cls, "DEFAULT_ATTRIBUTE_FACTORY", "Lorg/apache/lucene/util/AttributeFactory;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AttributeSource::AttributeSource() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        AttributeSource::AttributeSource(const ::org::apache::lucene::util::AttributeFactory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a5f989be, a0.this$)) {}

        ::org::apache::lucene::util::Attribute AttributeSource::addAttribute(const ::java::lang::Class & a0) const
        {
          return ::org::apache::lucene::util::Attribute(env->callObjectMethod(this$, mids$[mid_addAttribute_2e7bf8aa], a0.this$));
        }

        void AttributeSource::addAttributeImpl(const ::org::apache::lucene::util::AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addAttributeImpl_d86caa9f], a0.this$);
        }

        ::org::apache::lucene::util::AttributeSource$State AttributeSource::captureState() const
        {
          return ::org::apache::lucene::util::AttributeSource$State(env->callObjectMethod(this$, mids$[mid_captureState_0f9ed4d4]));
        }

        void AttributeSource::clearAttributes() const
        {
          env->callVoidMethod(this$, mids$[mid_clearAttributes_54c6a166]);
        }

        AttributeSource AttributeSource::cloneAttributes() const
        {
          return AttributeSource(env->callObjectMethod(this$, mids$[mid_cloneAttributes_f901022b]));
        }

        void AttributeSource::copyTo(const AttributeSource & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_aea2d6ea], a0.this$);
        }

        jboolean AttributeSource::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::util::Attribute AttributeSource::getAttribute(const ::java::lang::Class & a0) const
        {
          return ::org::apache::lucene::util::Attribute(env->callObjectMethod(this$, mids$[mid_getAttribute_2e7bf8aa], a0.this$));
        }

        ::java::util::Iterator AttributeSource::getAttributeClassesIterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_getAttributeClassesIterator_40858c90]));
        }

        ::org::apache::lucene::util::AttributeFactory AttributeSource::getAttributeFactory() const
        {
          return ::org::apache::lucene::util::AttributeFactory(env->callObjectMethod(this$, mids$[mid_getAttributeFactory_bb394e5b]));
        }

        ::java::util::Iterator AttributeSource::getAttributeImplsIterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_getAttributeImplsIterator_40858c90]));
        }

        jboolean AttributeSource::hasAttribute(const ::java::lang::Class & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasAttribute_a5deaff8], a0.this$);
        }

        jboolean AttributeSource::hasAttributes() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasAttributes_54c6a16a]);
        }

        jint AttributeSource::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String AttributeSource::reflectAsString(jboolean a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_reflectAsString_445a175e], a0));
        }

        void AttributeSource::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reflectWith_5f3f5102], a0.this$);
        }

        void AttributeSource::restoreState(const ::org::apache::lucene::util::AttributeSource$State & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_restoreState_b31fff69], a0.this$);
        }

        ::java::lang::String AttributeSource::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeSource_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeSource_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AttributeSource_init_(t_AttributeSource *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AttributeSource_addAttribute(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_addAttributeImpl(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_captureState(t_AttributeSource *self);
        static PyObject *t_AttributeSource_clearAttributes(t_AttributeSource *self);
        static PyObject *t_AttributeSource_cloneAttributes(t_AttributeSource *self);
        static PyObject *t_AttributeSource_copyTo(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_equals(t_AttributeSource *self, PyObject *args);
        static PyObject *t_AttributeSource_getAttribute(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_getAttributeClassesIterator(t_AttributeSource *self);
        static PyObject *t_AttributeSource_getAttributeFactory(t_AttributeSource *self);
        static PyObject *t_AttributeSource_getAttributeImplsIterator(t_AttributeSource *self);
        static PyObject *t_AttributeSource_hasAttribute(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_hasAttributes(t_AttributeSource *self);
        static PyObject *t_AttributeSource_hashCode(t_AttributeSource *self, PyObject *args);
        static PyObject *t_AttributeSource_reflectAsString(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_reflectWith(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_restoreState(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_toString(t_AttributeSource *self, PyObject *args);
        static PyObject *t_AttributeSource_get__attributeClassesIterator(t_AttributeSource *self, void *data);
        static PyObject *t_AttributeSource_get__attributeFactory(t_AttributeSource *self, void *data);
        static PyObject *t_AttributeSource_get__attributeImplsIterator(t_AttributeSource *self, void *data);
        static PyGetSetDef t_AttributeSource__fields_[] = {
          DECLARE_GET_FIELD(t_AttributeSource, attributeClassesIterator),
          DECLARE_GET_FIELD(t_AttributeSource, attributeFactory),
          DECLARE_GET_FIELD(t_AttributeSource, attributeImplsIterator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_AttributeSource__methods_[] = {
          DECLARE_METHOD(t_AttributeSource, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeSource, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeSource, addAttribute, METH_O),
          DECLARE_METHOD(t_AttributeSource, addAttributeImpl, METH_O),
          DECLARE_METHOD(t_AttributeSource, captureState, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, clearAttributes, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, cloneAttributes, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, copyTo, METH_O),
          DECLARE_METHOD(t_AttributeSource, equals, METH_VARARGS),
          DECLARE_METHOD(t_AttributeSource, getAttribute, METH_O),
          DECLARE_METHOD(t_AttributeSource, getAttributeClassesIterator, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, getAttributeFactory, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, getAttributeImplsIterator, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, hasAttribute, METH_O),
          DECLARE_METHOD(t_AttributeSource, hasAttributes, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_AttributeSource, reflectAsString, METH_O),
          DECLARE_METHOD(t_AttributeSource, reflectWith, METH_O),
          DECLARE_METHOD(t_AttributeSource, restoreState, METH_O),
          DECLARE_METHOD(t_AttributeSource, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AttributeSource, t_AttributeSource, ::java::lang::Object, AttributeSource, t_AttributeSource_init_, 0, 0, t_AttributeSource__fields_, 0, 0);

        void t_AttributeSource::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeSource), module, "AttributeSource", 0);
          PyDict_SetItemString(PY_TYPE(AttributeSource).tp_dict, "State", make_descriptor(&PY_TYPE(AttributeSource$State)));
        }

        void t_AttributeSource::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AttributeSource).tp_dict, "class_", make_descriptor(AttributeSource::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AttributeSource).tp_dict, "wrapfn_", make_descriptor(t_AttributeSource::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AttributeSource).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(AttributeSource::initializeClass);
          PyDict_SetItemString(PY_TYPE(AttributeSource).tp_dict, "DEFAULT_ATTRIBUTE_FACTORY", make_descriptor(::org::apache::lucene::util::t_AttributeFactory::wrap_Object(*AttributeSource::DEFAULT_ATTRIBUTE_FACTORY)));
        }

        static PyObject *t_AttributeSource_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeSource::initializeClass, 1)))
            return NULL;
          return t_AttributeSource::wrap_Object(AttributeSource(((t_AttributeSource *) arg)->object.this$));
        }
        static PyObject *t_AttributeSource_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeSource::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AttributeSource_init_(t_AttributeSource *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              AttributeSource object((jobject) NULL);

              INT_CALL(object = AttributeSource());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
              AttributeSource object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
              {
                INT_CALL(object = AttributeSource(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_AttributeSource_addAttribute(t_AttributeSource *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::util::Attribute result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.addAttribute(a0));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::org::apache::lucene::util::t_Attribute::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "addAttribute", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_addAttributeImpl(t_AttributeSource *self, PyObject *arg)
        {
          ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addAttributeImpl(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addAttributeImpl", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_captureState(t_AttributeSource *self)
        {
          ::org::apache::lucene::util::AttributeSource$State result((jobject) NULL);
          OBJ_CALL(result = self->object.captureState());
          return ::org::apache::lucene::util::t_AttributeSource$State::wrap_Object(result);
        }

        static PyObject *t_AttributeSource_clearAttributes(t_AttributeSource *self)
        {
          OBJ_CALL(self->object.clearAttributes());
          Py_RETURN_NONE;
        }

        static PyObject *t_AttributeSource_cloneAttributes(t_AttributeSource *self)
        {
          AttributeSource result((jobject) NULL);
          OBJ_CALL(result = self->object.cloneAttributes());
          return t_AttributeSource::wrap_Object(result);
        }

        static PyObject *t_AttributeSource_copyTo(t_AttributeSource *self, PyObject *arg)
        {
          AttributeSource a0((jobject) NULL);

          if (!parseArg(arg, "k", AttributeSource::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyTo", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_equals(t_AttributeSource *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(AttributeSource), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_AttributeSource_getAttribute(t_AttributeSource *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::util::Attribute result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.getAttribute(a0));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::org::apache::lucene::util::t_Attribute::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAttribute", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_getAttributeClassesIterator(t_AttributeSource *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.getAttributeClassesIterator());
          return ::java::util::t_Iterator::wrap_Object(result);
        }

        static PyObject *t_AttributeSource_getAttributeFactory(t_AttributeSource *self)
        {
          ::org::apache::lucene::util::AttributeFactory result((jobject) NULL);
          OBJ_CALL(result = self->object.getAttributeFactory());
          return ::org::apache::lucene::util::t_AttributeFactory::wrap_Object(result);
        }

        static PyObject *t_AttributeSource_getAttributeImplsIterator(t_AttributeSource *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.getAttributeImplsIterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(AttributeImpl));
        }

        static PyObject *t_AttributeSource_hasAttribute(t_AttributeSource *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          jboolean result;

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.hasAttribute(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "hasAttribute", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_hasAttributes(t_AttributeSource *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasAttributes());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_AttributeSource_hashCode(t_AttributeSource *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(AttributeSource), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_AttributeSource_reflectAsString(t_AttributeSource *self, PyObject *arg)
        {
          jboolean a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.reflectAsString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "reflectAsString", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_reflectWith(t_AttributeSource *self, PyObject *arg)
        {
          ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
          {
            OBJ_CALL(self->object.reflectWith(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reflectWith", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_restoreState(t_AttributeSource *self, PyObject *arg)
        {
          ::org::apache::lucene::util::AttributeSource$State a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::AttributeSource$State::initializeClass, &a0))
          {
            OBJ_CALL(self->object.restoreState(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "restoreState", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_toString(t_AttributeSource *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(AttributeSource), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_AttributeSource_get__attributeClassesIterator(t_AttributeSource *self, void *data)
        {
          ::java::util::Iterator value((jobject) NULL);
          OBJ_CALL(value = self->object.getAttributeClassesIterator());
          return ::java::util::t_Iterator::wrap_Object(value);
        }

        static PyObject *t_AttributeSource_get__attributeFactory(t_AttributeSource *self, void *data)
        {
          ::org::apache::lucene::util::AttributeFactory value((jobject) NULL);
          OBJ_CALL(value = self->object.getAttributeFactory());
          return ::org::apache::lucene::util::t_AttributeFactory::wrap_Object(value);
        }

        static PyObject *t_AttributeSource_get__attributeImplsIterator(t_AttributeSource *self, void *data)
        {
          ::java::util::Iterator value((jobject) NULL);
          OBJ_CALL(value = self->object.getAttributeImplsIterator());
          return ::java::util::t_Iterator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanScorer.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanScorer::class$ = NULL;
          jmethodID *SpanScorer::mids$ = NULL;
          bool SpanScorer::live$ = false;

          jclass SpanScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
              mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
              mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
              mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
              mids$[mid_score_54c6a176] = env->getMethodID(cls, "score", "()F");
              mids$[mid_sloppyFreq_54c6a176] = env->getMethodID(cls, "sloppyFreq", "()F");
              mids$[mid_setFreqCurrentDoc_54c6a16a] = env->getMethodID(cls, "setFreqCurrentDoc", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint SpanScorer::advance(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
          }

          jlong SpanScorer::cost() const
          {
            return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
          }

          jint SpanScorer::docID() const
          {
            return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
          }

          jint SpanScorer::freq() const
          {
            return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
          }

          jint SpanScorer::nextDoc() const
          {
            return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
          }

          jfloat SpanScorer::score() const
          {
            return env->callFloatMethod(this$, mids$[mid_score_54c6a176]);
          }

          jfloat SpanScorer::sloppyFreq() const
          {
            return env->callFloatMethod(this$, mids$[mid_sloppyFreq_54c6a176]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanScorer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanScorer_advance(t_SpanScorer *self, PyObject *args);
          static PyObject *t_SpanScorer_cost(t_SpanScorer *self, PyObject *args);
          static PyObject *t_SpanScorer_docID(t_SpanScorer *self, PyObject *args);
          static PyObject *t_SpanScorer_freq(t_SpanScorer *self, PyObject *args);
          static PyObject *t_SpanScorer_nextDoc(t_SpanScorer *self, PyObject *args);
          static PyObject *t_SpanScorer_score(t_SpanScorer *self, PyObject *args);
          static PyObject *t_SpanScorer_sloppyFreq(t_SpanScorer *self);

          static PyMethodDef t_SpanScorer__methods_[] = {
            DECLARE_METHOD(t_SpanScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanScorer, advance, METH_VARARGS),
            DECLARE_METHOD(t_SpanScorer, cost, METH_VARARGS),
            DECLARE_METHOD(t_SpanScorer, docID, METH_VARARGS),
            DECLARE_METHOD(t_SpanScorer, freq, METH_VARARGS),
            DECLARE_METHOD(t_SpanScorer, nextDoc, METH_VARARGS),
            DECLARE_METHOD(t_SpanScorer, score, METH_VARARGS),
            DECLARE_METHOD(t_SpanScorer, sloppyFreq, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanScorer, t_SpanScorer, ::org::apache::lucene::search::Scorer, SpanScorer, abstract_init, 0, 0, 0, 0, 0);

          void t_SpanScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanScorer), module, "SpanScorer", 0);
          }

          void t_SpanScorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanScorer).tp_dict, "class_", make_descriptor(SpanScorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanScorer).tp_dict, "wrapfn_", make_descriptor(t_SpanScorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanScorer::initializeClass, 1)))
              return NULL;
            return t_SpanScorer::wrap_Object(SpanScorer(((t_SpanScorer *) arg)->object.this$));
          }
          static PyObject *t_SpanScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SpanScorer_advance(t_SpanScorer *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.advance(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanScorer), (PyObject *) self, "advance", args, 2);
          }

          static PyObject *t_SpanScorer_cost(t_SpanScorer *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.cost());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(SpanScorer), (PyObject *) self, "cost", args, 2);
          }

          static PyObject *t_SpanScorer_docID(t_SpanScorer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docID());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanScorer), (PyObject *) self, "docID", args, 2);
          }

          static PyObject *t_SpanScorer_freq(t_SpanScorer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.freq());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanScorer), (PyObject *) self, "freq", args, 2);
          }

          static PyObject *t_SpanScorer_nextDoc(t_SpanScorer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.nextDoc());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanScorer), (PyObject *) self, "nextDoc", args, 2);
          }

          static PyObject *t_SpanScorer_score(t_SpanScorer *self, PyObject *args)
          {
            jfloat result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.score());
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(SpanScorer), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_SpanScorer_sloppyFreq(t_SpanScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.sloppyFreq());
            return PyFloat_FromDouble((double) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Bits$MatchAllBits.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Bits$MatchAllBits::class$ = NULL;
        jmethodID *Bits$MatchAllBits::mids$ = NULL;
        bool Bits$MatchAllBits::live$ = false;

        jclass Bits$MatchAllBits::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Bits$MatchAllBits");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_get_39c7bd30] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Bits$MatchAllBits::Bits$MatchAllBits(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        jboolean Bits$MatchAllBits::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_39c7bd30], a0);
        }

        jint Bits$MatchAllBits::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Bits$MatchAllBits_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bits$MatchAllBits_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Bits$MatchAllBits_init_(t_Bits$MatchAllBits *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Bits$MatchAllBits_get(t_Bits$MatchAllBits *self, PyObject *arg);
        static PyObject *t_Bits$MatchAllBits_length(t_Bits$MatchAllBits *self);

        static PyMethodDef t_Bits$MatchAllBits__methods_[] = {
          DECLARE_METHOD(t_Bits$MatchAllBits, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits$MatchAllBits, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits$MatchAllBits, get, METH_O),
          DECLARE_METHOD(t_Bits$MatchAllBits, length, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Bits$MatchAllBits, t_Bits$MatchAllBits, ::java::lang::Object, Bits$MatchAllBits, t_Bits$MatchAllBits_init_, 0, 0, 0, 0, 0);

        void t_Bits$MatchAllBits::install(PyObject *module)
        {
          installType(&PY_TYPE(Bits$MatchAllBits), module, "Bits$MatchAllBits", 0);
        }

        void t_Bits$MatchAllBits::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Bits$MatchAllBits).tp_dict, "class_", make_descriptor(Bits$MatchAllBits::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Bits$MatchAllBits).tp_dict, "wrapfn_", make_descriptor(t_Bits$MatchAllBits::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Bits$MatchAllBits).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Bits$MatchAllBits_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Bits$MatchAllBits::initializeClass, 1)))
            return NULL;
          return t_Bits$MatchAllBits::wrap_Object(Bits$MatchAllBits(((t_Bits$MatchAllBits *) arg)->object.this$));
        }
        static PyObject *t_Bits$MatchAllBits_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Bits$MatchAllBits::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Bits$MatchAllBits_init_(t_Bits$MatchAllBits *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          Bits$MatchAllBits object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = Bits$MatchAllBits(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Bits$MatchAllBits_get(t_Bits$MatchAllBits *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_Bits$MatchAllBits_length(t_Bits$MatchAllBits *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ScandinavianNormalizationFilter::class$ = NULL;
          jmethodID *ScandinavianNormalizationFilter::mids$ = NULL;
          bool ScandinavianNormalizationFilter::live$ = false;

          jclass ScandinavianNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScandinavianNormalizationFilter::ScandinavianNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ScandinavianNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ScandinavianNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScandinavianNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScandinavianNormalizationFilter_init_(t_ScandinavianNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScandinavianNormalizationFilter_incrementToken(t_ScandinavianNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_ScandinavianNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_ScandinavianNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ScandinavianNormalizationFilter, t_ScandinavianNormalizationFilter, ::org::apache::lucene::analysis::TokenFilter, ScandinavianNormalizationFilter, t_ScandinavianNormalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_ScandinavianNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ScandinavianNormalizationFilter), module, "ScandinavianNormalizationFilter", 0);
          }

          void t_ScandinavianNormalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ScandinavianNormalizationFilter).tp_dict, "class_", make_descriptor(ScandinavianNormalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ScandinavianNormalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_ScandinavianNormalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ScandinavianNormalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ScandinavianNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScandinavianNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_ScandinavianNormalizationFilter::wrap_Object(ScandinavianNormalizationFilter(((t_ScandinavianNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_ScandinavianNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScandinavianNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScandinavianNormalizationFilter_init_(t_ScandinavianNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ScandinavianNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ScandinavianNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ScandinavianNormalizationFilter_incrementToken(t_ScandinavianNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ScandinavianNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MinFloatFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MinFloatFunction::class$ = NULL;
            jmethodID *MinFloatFunction::mids$ = NULL;
            bool MinFloatFunction::live$ = false;

            jclass MinFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MinFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ee9922ca] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_d2e34bb9] = env->getMethodID(cls, "func", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MinFloatFunction::MinFloatFunction(const JArray< ::org::apache::lucene::queries::function::ValueSource > & a0) : ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction(env->newObject(initializeClass, &mids$, mid_init$_ee9922ca, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MinFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MinFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MinFloatFunction_init_(t_MinFloatFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_MinFloatFunction__methods_[] = {
              DECLARE_METHOD(t_MinFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MinFloatFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MinFloatFunction, t_MinFloatFunction, ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction, MinFloatFunction, t_MinFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_MinFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(MinFloatFunction), module, "MinFloatFunction", 0);
            }

            void t_MinFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MinFloatFunction).tp_dict, "class_", make_descriptor(MinFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MinFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_MinFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MinFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MinFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MinFloatFunction::initializeClass, 1)))
                return NULL;
              return t_MinFloatFunction::wrap_Object(MinFloatFunction(((t_MinFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_MinFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MinFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MinFloatFunction_init_(t_MinFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              JArray< ::org::apache::lucene::queries::function::ValueSource > a0((jobject) NULL);
              MinFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = MinFloatFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergeState$CheckAbort.h"
#include "org/apache/lucene/index/MergePolicy$OneMerge.h"
#include "org/apache/lucene/index/MergePolicy$MergeAbortedException.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergeState$CheckAbort::class$ = NULL;
        jmethodID *MergeState$CheckAbort::mids$ = NULL;
        bool MergeState$CheckAbort::live$ = false;

        jclass MergeState$CheckAbort::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergeState$CheckAbort");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_47ab6527] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/MergePolicy$OneMerge;Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_work_5d1c7645] = env->getMethodID(cls, "work", "(D)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergeState$CheckAbort::MergeState$CheckAbort(const ::org::apache::lucene::index::MergePolicy$OneMerge & a0, const ::org::apache::lucene::store::Directory & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_47ab6527, a0.this$, a1.this$)) {}

        void MergeState$CheckAbort::work(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_work_5d1c7645], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergeState$CheckAbort_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeState$CheckAbort_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergeState$CheckAbort_init_(t_MergeState$CheckAbort *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergeState$CheckAbort_work(t_MergeState$CheckAbort *self, PyObject *arg);

        static PyMethodDef t_MergeState$CheckAbort__methods_[] = {
          DECLARE_METHOD(t_MergeState$CheckAbort, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeState$CheckAbort, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeState$CheckAbort, work, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergeState$CheckAbort, t_MergeState$CheckAbort, ::java::lang::Object, MergeState$CheckAbort, t_MergeState$CheckAbort_init_, 0, 0, 0, 0, 0);

        void t_MergeState$CheckAbort::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeState$CheckAbort), module, "MergeState$CheckAbort", 0);
        }

        void t_MergeState$CheckAbort::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergeState$CheckAbort).tp_dict, "class_", make_descriptor(MergeState$CheckAbort::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergeState$CheckAbort).tp_dict, "wrapfn_", make_descriptor(t_MergeState$CheckAbort::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergeState$CheckAbort).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergeState$CheckAbort_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeState$CheckAbort::initializeClass, 1)))
            return NULL;
          return t_MergeState$CheckAbort::wrap_Object(MergeState$CheckAbort(((t_MergeState$CheckAbort *) arg)->object.this$));
        }
        static PyObject *t_MergeState$CheckAbort_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeState$CheckAbort::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergeState$CheckAbort_init_(t_MergeState$CheckAbort *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::MergePolicy$OneMerge a0((jobject) NULL);
          ::org::apache::lucene::store::Directory a1((jobject) NULL);
          MergeState$CheckAbort object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::MergePolicy$OneMerge::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
          {
            INT_CALL(object = MergeState$CheckAbort(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MergeState$CheckAbort_work(t_MergeState$CheckAbort *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.work(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "work", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/PortugueseStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *PortugueseStemmer::class$ = NULL;
        jmethodID *PortugueseStemmer::mids$ = NULL;
        bool PortugueseStemmer::live$ = false;

        jclass PortugueseStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/PortugueseStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PortugueseStemmer::PortugueseStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean PortugueseStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint PortugueseStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean PortugueseStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_PortugueseStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PortugueseStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PortugueseStemmer_init_(t_PortugueseStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PortugueseStemmer_equals(t_PortugueseStemmer *self, PyObject *args);
        static PyObject *t_PortugueseStemmer_hashCode(t_PortugueseStemmer *self, PyObject *args);
        static PyObject *t_PortugueseStemmer_stem(t_PortugueseStemmer *self, PyObject *args);

        static PyMethodDef t_PortugueseStemmer__methods_[] = {
          DECLARE_METHOD(t_PortugueseStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PortugueseStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PortugueseStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_PortugueseStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_PortugueseStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PortugueseStemmer, t_PortugueseStemmer, ::org::tartarus::snowball::SnowballProgram, PortugueseStemmer, t_PortugueseStemmer_init_, 0, 0, 0, 0, 0);

        void t_PortugueseStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(PortugueseStemmer), module, "PortugueseStemmer", 0);
        }

        void t_PortugueseStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PortugueseStemmer).tp_dict, "class_", make_descriptor(PortugueseStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PortugueseStemmer).tp_dict, "wrapfn_", make_descriptor(t_PortugueseStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PortugueseStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PortugueseStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PortugueseStemmer::initializeClass, 1)))
            return NULL;
          return t_PortugueseStemmer::wrap_Object(PortugueseStemmer(((t_PortugueseStemmer *) arg)->object.this$));
        }
        static PyObject *t_PortugueseStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PortugueseStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PortugueseStemmer_init_(t_PortugueseStemmer *self, PyObject *args, PyObject *kwds)
        {
          PortugueseStemmer object((jobject) NULL);

          INT_CALL(object = PortugueseStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_PortugueseStemmer_equals(t_PortugueseStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PortugueseStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PortugueseStemmer_hashCode(t_PortugueseStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(PortugueseStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_PortugueseStemmer_stem(t_PortugueseStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PortugueseStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/TimSorter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *TimSorter::class$ = NULL;
        jmethodID *TimSorter::mids$ = NULL;
        bool TimSorter::live$ = false;

        jclass TimSorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/TimSorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_sort_d8d154a6] = env->getMethodID(cls, "sort", "(II)V");
            mids$[mid_save_d8d154a6] = env->getMethodID(cls, "save", "(II)V");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_restore_d8d154a6] = env->getMethodID(cls, "restore", "(II)V");
            mids$[mid_compareSaved_d8d154b9] = env->getMethodID(cls, "compareSaved", "(II)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TimSorter::sort(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_sort_d8d154a6], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_TimSorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimSorter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimSorter_sort(t_TimSorter *self, PyObject *args);

        static PyMethodDef t_TimSorter__methods_[] = {
          DECLARE_METHOD(t_TimSorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimSorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimSorter, sort, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TimSorter, t_TimSorter, ::org::apache::lucene::util::Sorter, TimSorter, abstract_init, 0, 0, 0, 0, 0);

        void t_TimSorter::install(PyObject *module)
        {
          installType(&PY_TYPE(TimSorter), module, "TimSorter", 0);
        }

        void t_TimSorter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TimSorter).tp_dict, "class_", make_descriptor(TimSorter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TimSorter).tp_dict, "wrapfn_", make_descriptor(t_TimSorter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TimSorter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TimSorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TimSorter::initializeClass, 1)))
            return NULL;
          return t_TimSorter::wrap_Object(TimSorter(((t_TimSorter *) arg)->object.this$));
        }
        static PyObject *t_TimSorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TimSorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TimSorter_sort(t_TimSorter *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.sort(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TimSorter), (PyObject *) self, "sort", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterDirectoryReader$SubReaderWrapper.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterDirectoryReader$SubReaderWrapper::class$ = NULL;
        jmethodID *FilterDirectoryReader$SubReaderWrapper::mids$ = NULL;
        bool FilterDirectoryReader$SubReaderWrapper::live$ = false;

        jclass FilterDirectoryReader$SubReaderWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterDirectoryReader$SubReaderWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_wrap_3b1ad795] = env->getMethodID(cls, "wrap", "(Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/index/AtomicReader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterDirectoryReader$SubReaderWrapper::FilterDirectoryReader$SubReaderWrapper() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::index::AtomicReader FilterDirectoryReader$SubReaderWrapper::wrap(const ::org::apache::lucene::index::AtomicReader & a0) const
        {
          return ::org::apache::lucene::index::AtomicReader(env->callObjectMethod(this$, mids$[mid_wrap_3b1ad795], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_of_(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *args);
        static int t_FilterDirectoryReader$SubReaderWrapper_init_(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_wrap(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *arg);
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_get__parameters_(t_FilterDirectoryReader$SubReaderWrapper *self, void *data);
        static PyGetSetDef t_FilterDirectoryReader$SubReaderWrapper__fields_[] = {
          DECLARE_GET_FIELD(t_FilterDirectoryReader$SubReaderWrapper, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterDirectoryReader$SubReaderWrapper__methods_[] = {
          DECLARE_METHOD(t_FilterDirectoryReader$SubReaderWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectoryReader$SubReaderWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectoryReader$SubReaderWrapper, of_, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectoryReader$SubReaderWrapper, wrap, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterDirectoryReader$SubReaderWrapper, t_FilterDirectoryReader$SubReaderWrapper, ::java::lang::Object, FilterDirectoryReader$SubReaderWrapper, t_FilterDirectoryReader$SubReaderWrapper_init_, 0, 0, t_FilterDirectoryReader$SubReaderWrapper__fields_, 0, 0);
        PyObject *t_FilterDirectoryReader$SubReaderWrapper::wrap_Object(const FilterDirectoryReader$SubReaderWrapper& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterDirectoryReader$SubReaderWrapper::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterDirectoryReader$SubReaderWrapper *self = (t_FilterDirectoryReader$SubReaderWrapper *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FilterDirectoryReader$SubReaderWrapper::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterDirectoryReader$SubReaderWrapper::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterDirectoryReader$SubReaderWrapper *self = (t_FilterDirectoryReader$SubReaderWrapper *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FilterDirectoryReader$SubReaderWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterDirectoryReader$SubReaderWrapper), module, "FilterDirectoryReader$SubReaderWrapper", 0);
        }

        void t_FilterDirectoryReader$SubReaderWrapper::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader$SubReaderWrapper).tp_dict, "class_", make_descriptor(FilterDirectoryReader$SubReaderWrapper::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader$SubReaderWrapper).tp_dict, "wrapfn_", make_descriptor(t_FilterDirectoryReader$SubReaderWrapper::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader$SubReaderWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterDirectoryReader$SubReaderWrapper::initializeClass, 1)))
            return NULL;
          return t_FilterDirectoryReader$SubReaderWrapper::wrap_Object(FilterDirectoryReader$SubReaderWrapper(((t_FilterDirectoryReader$SubReaderWrapper *) arg)->object.this$));
        }
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterDirectoryReader$SubReaderWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_of_(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FilterDirectoryReader$SubReaderWrapper_init_(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *args, PyObject *kwds)
        {
          FilterDirectoryReader$SubReaderWrapper object((jobject) NULL);

          INT_CALL(object = FilterDirectoryReader$SubReaderWrapper());
          self->object = object;
          self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(AtomicReader);

          return 0;
        }

        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_wrap(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::org::apache::lucene::index::AtomicReader result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.wrap(a0));
            return ::org::apache::lucene::index::t_AtomicReader::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "wrap", arg);
          return NULL;
        }
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_get__parameters_(t_FilterDirectoryReader$SubReaderWrapper *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/store/PythonDirectory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "java/lang/Throwable.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/Lock.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {

        ::java::lang::Class *PythonDirectory::class$ = NULL;
        jmethodID *PythonDirectory::mids$ = NULL;
        bool PythonDirectory::live$ = false;

        jclass PythonDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/store/PythonDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_fileModified_5fdc3f54] = env->getMethodID(cls, "fileModified", "(Ljava/lang/String;)J");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_getLockFactory_e4e9c36d] = env->getMethodID(cls, "getLockFactory", "()Lorg/apache/lucene/store/LockFactory;");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_setLockFactory_9892eb8c] = env->getMethodID(cls, "setLockFactory", "(Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_sync_5fdc3f48] = env->getMethodID(cls, "sync", "(Ljava/lang/String;)V");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_touchFile_5fdc3f48] = env->getMethodID(cls, "touchFile", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonDirectory::PythonDirectory() : ::org::apache::lucene::store::Directory(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonDirectory::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonDirectory::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonDirectory::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }

        void PythonDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {
        static PyObject *t_PythonDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonDirectory_init_(t_PythonDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonDirectory_finalize(t_PythonDirectory *self);
        static PyObject *t_PythonDirectory_pythonExtension(t_PythonDirectory *self, PyObject *args);
        static PyObject *t_PythonDirectory_sync(t_PythonDirectory *self, PyObject *args);
        static void JNICALL t_PythonDirectory_clearLock0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonDirectory_close1(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonDirectory_createOutput2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
        static void JNICALL t_PythonDirectory_deleteFile3(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonDirectory_fileExists4(JNIEnv *jenv, jobject jobj, jobject a0);
        static jlong JNICALL t_PythonDirectory_fileLength5(JNIEnv *jenv, jobject jobj, jobject a0);
        static jlong JNICALL t_PythonDirectory_fileModified6(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonDirectory_getLockFactory7(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonDirectory_listAll8(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonDirectory_makeLock9(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonDirectory_openInput10(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
        static void JNICALL t_PythonDirectory_pythonDecRef11(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonDirectory_setLockFactory12(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonDirectory_sync13(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonDirectory_touchFile14(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonDirectory_get__self(t_PythonDirectory *self, void *data);
        static PyGetSetDef t_PythonDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_PythonDirectory, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonDirectory__methods_[] = {
          DECLARE_METHOD(t_PythonDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonDirectory, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonDirectory, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonDirectory, sync, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonDirectory, t_PythonDirectory, ::org::apache::lucene::store::Directory, PythonDirectory, t_PythonDirectory_init_, 0, 0, t_PythonDirectory__fields_, 0, 0);

        void t_PythonDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonDirectory), module, "PythonDirectory", 1);
        }

        void t_PythonDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonDirectory).tp_dict, "class_", make_descriptor(PythonDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonDirectory).tp_dict, "wrapfn_", make_descriptor(t_PythonDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonDirectory::initializeClass);
          JNINativeMethod methods[] = {
            { "clearLock", "(Ljava/lang/String;)V", (void *) t_PythonDirectory_clearLock0 },
            { "close", "()V", (void *) t_PythonDirectory_close1 },
            { "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;", (void *) t_PythonDirectory_createOutput2 },
            { "deleteFile", "(Ljava/lang/String;)V", (void *) t_PythonDirectory_deleteFile3 },
            { "fileExists", "(Ljava/lang/String;)Z", (void *) t_PythonDirectory_fileExists4 },
            { "fileLength", "(Ljava/lang/String;)J", (void *) t_PythonDirectory_fileLength5 },
            { "fileModified", "(Ljava/lang/String;)J", (void *) t_PythonDirectory_fileModified6 },
            { "getLockFactory", "()Lorg/apache/lucene/store/LockFactory;", (void *) t_PythonDirectory_getLockFactory7 },
            { "listAll", "()[Ljava/lang/String;", (void *) t_PythonDirectory_listAll8 },
            { "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;", (void *) t_PythonDirectory_makeLock9 },
            { "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;", (void *) t_PythonDirectory_openInput10 },
            { "pythonDecRef", "()V", (void *) t_PythonDirectory_pythonDecRef11 },
            { "setLockFactory", "(Lorg/apache/lucene/store/LockFactory;)V", (void *) t_PythonDirectory_setLockFactory12 },
            { "sync", "(Ljava/lang/String;)V", (void *) t_PythonDirectory_sync13 },
            { "touchFile", "(Ljava/lang/String;)V", (void *) t_PythonDirectory_touchFile14 },
          };
          env->registerNatives(cls, methods, 15);
        }

        static PyObject *t_PythonDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonDirectory::initializeClass, 1)))
            return NULL;
          return t_PythonDirectory::wrap_Object(PythonDirectory(((t_PythonDirectory *) arg)->object.this$));
        }
        static PyObject *t_PythonDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonDirectory_init_(t_PythonDirectory *self, PyObject *args, PyObject *kwds)
        {
          PythonDirectory object((jobject) NULL);

          INT_CALL(object = PythonDirectory());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonDirectory_finalize(t_PythonDirectory *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonDirectory_pythonExtension(t_PythonDirectory *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonDirectory_sync(t_PythonDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonDirectory), (PyObject *) self, "sync", args, 2);
        }

        static void JNICALL t_PythonDirectory_clearLock0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "clearLock", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonDirectory_close1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "close", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jobject JNICALL t_PythonDirectory_createOutput2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::store::IndexOutput value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *o1 = ::org::apache::lucene::store::t_IOContext::wrap_Object(::org::apache::lucene::store::IOContext(a1));
          PyObject *result = PyObject_CallMethod(obj, "createOutput", "OO", o0, o1);
          Py_DECREF(o0);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::store::IndexOutput::initializeClass, &value))
          {
            throwTypeError("createOutput", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonDirectory_deleteFile3(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "deleteFile", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonDirectory_fileExists4(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "fileExists", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("fileExists", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jlong JNICALL t_PythonDirectory_fileLength5(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jlong value;
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "fileLength", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "J", &value))
          {
            throwTypeError("fileLength", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jlong) 0;
        }

        static jlong JNICALL t_PythonDirectory_fileModified6(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jlong value;
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "fileModified", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "J", &value))
          {
            throwTypeError("fileModified", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jlong) 0;
        }

        static jobject JNICALL t_PythonDirectory_getLockFactory7(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::store::LockFactory value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "getLockFactory", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &value))
          {
            throwTypeError("getLockFactory", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jobject JNICALL t_PythonDirectory_listAll8(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          JArray< ::java::lang::String > value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "listAll", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "[s", &value))
          {
            throwTypeError("listAll", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jobject JNICALL t_PythonDirectory_makeLock9(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::store::Lock value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "makeLock", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::store::Lock::initializeClass, &value))
          {
            throwTypeError("makeLock", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jobject JNICALL t_PythonDirectory_openInput10(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::store::IndexInput value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *o1 = ::org::apache::lucene::store::t_IOContext::wrap_Object(::org::apache::lucene::store::IOContext(a1));
          PyObject *result = PyObject_CallMethod(obj, "openInput", "OO", o0, o1);
          Py_DECREF(o0);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &value))
          {
            throwTypeError("openInput", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonDirectory_pythonDecRef11(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static void JNICALL t_PythonDirectory_setLockFactory12(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = ::org::apache::lucene::store::t_LockFactory::wrap_Object(::org::apache::lucene::store::LockFactory(a0));
          PyObject *result = PyObject_CallMethod(obj, "setLockFactory", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonDirectory_sync13(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "sync", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonDirectory_touchFile14(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "touchFile", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static PyObject *t_PythonDirectory_get__self(t_PythonDirectory *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocsAndPositionsEnum$EnumWithSlice.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocsAndPositionsEnum$EnumWithSlice::class$ = NULL;
        jmethodID *MultiDocsAndPositionsEnum$EnumWithSlice::mids$ = NULL;
        jfieldID *MultiDocsAndPositionsEnum$EnumWithSlice::fids$ = NULL;
        bool MultiDocsAndPositionsEnum$EnumWithSlice::live$ = false;

        jclass MultiDocsAndPositionsEnum$EnumWithSlice::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocsAndPositionsEnum$EnumWithSlice");

            mids$ = new jmethodID[max_mid];
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docsAndPositionsEnum] = env->getFieldID(cls, "docsAndPositionsEnum", "Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            fids$[fid_slice] = env->getFieldID(cls, "slice", "Lorg/apache/lucene/index/ReaderSlice;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String MultiDocsAndPositionsEnum$EnumWithSlice::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum MultiDocsAndPositionsEnum$EnumWithSlice::_get_docsAndPositionsEnum() const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->getObjectField(this$, fids$[fid_docsAndPositionsEnum]));
        }

        void MultiDocsAndPositionsEnum$EnumWithSlice::_set_docsAndPositionsEnum(const ::org::apache::lucene::index::DocsAndPositionsEnum & a0) const
        {
          env->setObjectField(this$, fids$[fid_docsAndPositionsEnum], a0.this$);
        }

        ::org::apache::lucene::index::ReaderSlice MultiDocsAndPositionsEnum$EnumWithSlice::_get_slice() const
        {
          return ::org::apache::lucene::index::ReaderSlice(env->getObjectField(this$, fids$[fid_slice]));
        }

        void MultiDocsAndPositionsEnum$EnumWithSlice::_set_slice(const ::org::apache::lucene::index::ReaderSlice & a0) const
        {
          env->setObjectField(this$, fids$[fid_slice], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_toString(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_get__docsAndPositionsEnum(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, void *data);
        static int t_MultiDocsAndPositionsEnum$EnumWithSlice_set__docsAndPositionsEnum(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, PyObject *arg, void *data);
        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_get__slice(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, void *data);
        static int t_MultiDocsAndPositionsEnum$EnumWithSlice_set__slice(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, PyObject *arg, void *data);

        static PyGetSetDef t_MultiDocsAndPositionsEnum$EnumWithSlice__fields_[] = {
          DECLARE_GETSET_FIELD(t_MultiDocsAndPositionsEnum$EnumWithSlice, docsAndPositionsEnum),
          DECLARE_GETSET_FIELD(t_MultiDocsAndPositionsEnum$EnumWithSlice, slice),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocsAndPositionsEnum$EnumWithSlice__methods_[] = {
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum$EnumWithSlice, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum$EnumWithSlice, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum$EnumWithSlice, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocsAndPositionsEnum$EnumWithSlice, t_MultiDocsAndPositionsEnum$EnumWithSlice, ::java::lang::Object, MultiDocsAndPositionsEnum$EnumWithSlice, abstract_init, 0, 0, t_MultiDocsAndPositionsEnum$EnumWithSlice__fields_, 0, 0);

        void t_MultiDocsAndPositionsEnum$EnumWithSlice::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocsAndPositionsEnum$EnumWithSlice), module, "MultiDocsAndPositionsEnum$EnumWithSlice", 0);
        }

        void t_MultiDocsAndPositionsEnum$EnumWithSlice::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocsAndPositionsEnum$EnumWithSlice).tp_dict, "class_", make_descriptor(MultiDocsAndPositionsEnum$EnumWithSlice::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocsAndPositionsEnum$EnumWithSlice).tp_dict, "wrapfn_", make_descriptor(t_MultiDocsAndPositionsEnum$EnumWithSlice::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocsAndPositionsEnum$EnumWithSlice).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocsAndPositionsEnum$EnumWithSlice::initializeClass, 1)))
            return NULL;
          return t_MultiDocsAndPositionsEnum$EnumWithSlice::wrap_Object(MultiDocsAndPositionsEnum$EnumWithSlice(((t_MultiDocsAndPositionsEnum$EnumWithSlice *) arg)->object.this$));
        }
        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocsAndPositionsEnum$EnumWithSlice::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_toString(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum$EnumWithSlice), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_get__docsAndPositionsEnum(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, void *data)
        {
          ::org::apache::lucene::index::DocsAndPositionsEnum value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docsAndPositionsEnum());
          return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(value);
        }
        static int t_MultiDocsAndPositionsEnum$EnumWithSlice_set__docsAndPositionsEnum(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::DocsAndPositionsEnum value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &value))
          {
            INT_CALL(self->object._set_docsAndPositionsEnum(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docsAndPositionsEnum", arg);
          return -1;
        }

        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_get__slice(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, void *data)
        {
          ::org::apache::lucene::index::ReaderSlice value((jobject) NULL);
          OBJ_CALL(value = self->object._get_slice());
          return ::org::apache::lucene::index::t_ReaderSlice::wrap_Object(value);
        }
        static int t_MultiDocsAndPositionsEnum$EnumWithSlice_set__slice(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::ReaderSlice value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::ReaderSlice::initializeClass, &value))
          {
            INT_CALL(self->object._set_slice(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "slice", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Mutable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Mutable::class$ = NULL;
          jmethodID *PackedInts$Mutable::mids$ = NULL;
          bool PackedInts$Mutable::live$ = false;

          jclass PackedInts$Mutable::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Mutable");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_fill_534bf2ff] = env->getMethodID(cls, "fill", "(IIJ)V");
              mids$[mid_getBitsPerValue_54c6a179] = env->getMethodID(cls, "getBitsPerValue", "()I");
              mids$[mid_save_27875f57] = env->getMethodID(cls, "save", "(Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_set_03b232b5] = env->getMethodID(cls, "set", "(IJ)V");
              mids$[mid_set_d80d4c9e] = env->getMethodID(cls, "set", "(I[JII)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts$Mutable::PackedInts$Mutable() : ::org::apache::lucene::util::packed::PackedInts$Reader(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PackedInts$Mutable::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void PackedInts$Mutable::fill(jint a0, jint a1, jlong a2) const
          {
            env->callVoidMethod(this$, mids$[mid_fill_534bf2ff], a0, a1, a2);
          }

          jint PackedInts$Mutable::getBitsPerValue() const
          {
            return env->callIntMethod(this$, mids$[mid_getBitsPerValue_54c6a179]);
          }

          void PackedInts$Mutable::save(const ::org::apache::lucene::store::DataOutput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_save_27875f57], a0.this$);
          }

          void PackedInts$Mutable::set(jint a0, jlong a1) const
          {
            env->callVoidMethod(this$, mids$[mid_set_03b232b5], a0, a1);
          }

          jint PackedInts$Mutable::set(jint a0, const JArray< jlong > & a1, jint a2, jint a3) const
          {
            return env->callIntMethod(this$, mids$[mid_set_d80d4c9e], a0, a1.this$, a2, a3);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Mutable_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Mutable_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedInts$Mutable_init_(t_PackedInts$Mutable *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedInts$Mutable_clear(t_PackedInts$Mutable *self);
          static PyObject *t_PackedInts$Mutable_fill(t_PackedInts$Mutable *self, PyObject *args);
          static PyObject *t_PackedInts$Mutable_getBitsPerValue(t_PackedInts$Mutable *self);
          static PyObject *t_PackedInts$Mutable_save(t_PackedInts$Mutable *self, PyObject *arg);
          static PyObject *t_PackedInts$Mutable_set(t_PackedInts$Mutable *self, PyObject *args);
          static PyObject *t_PackedInts$Mutable_get__bitsPerValue(t_PackedInts$Mutable *self, void *data);
          static PyGetSetDef t_PackedInts$Mutable__fields_[] = {
            DECLARE_GET_FIELD(t_PackedInts$Mutable, bitsPerValue),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PackedInts$Mutable__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Mutable, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Mutable, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Mutable, clear, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Mutable, fill, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Mutable, getBitsPerValue, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Mutable, save, METH_O),
            DECLARE_METHOD(t_PackedInts$Mutable, set, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$Mutable, t_PackedInts$Mutable, ::org::apache::lucene::util::packed::PackedInts$Reader, PackedInts$Mutable, t_PackedInts$Mutable_init_, 0, 0, t_PackedInts$Mutable__fields_, 0, 0);

          void t_PackedInts$Mutable::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Mutable), module, "PackedInts$Mutable", 0);
          }

          void t_PackedInts$Mutable::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$Mutable).tp_dict, "class_", make_descriptor(PackedInts$Mutable::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$Mutable).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$Mutable::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$Mutable).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$Mutable_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Mutable::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Mutable::wrap_Object(PackedInts$Mutable(((t_PackedInts$Mutable *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Mutable_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Mutable::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedInts$Mutable_init_(t_PackedInts$Mutable *self, PyObject *args, PyObject *kwds)
          {
            PackedInts$Mutable object((jobject) NULL);

            INT_CALL(object = PackedInts$Mutable());
            self->object = object;

            return 0;
          }

          static PyObject *t_PackedInts$Mutable_clear(t_PackedInts$Mutable *self)
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          static PyObject *t_PackedInts$Mutable_fill(t_PackedInts$Mutable *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jlong a2;

            if (!parseArgs(args, "IIJ", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.fill(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "fill", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Mutable_getBitsPerValue(t_PackedInts$Mutable *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBitsPerValue());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Mutable_save(t_PackedInts$Mutable *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.save(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "save", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Mutable_set(t_PackedInts$Mutable *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jint a0;
                jlong a1;

                if (!parseArgs(args, "IJ", &a0, &a1))
                {
                  OBJ_CALL(self->object.set(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 4:
              {
                jint a0;
                JArray< jlong > a1((jobject) NULL);
                jint a2;
                jint a3;
                jint result;

                if (!parseArgs(args, "I[JII", &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.set(a0, a1, a2, a3));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "set", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Mutable_get__bitsPerValue(t_PackedInts$Mutable *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBitsPerValue());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/VirtualMethod.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *VirtualMethod::class$ = NULL;
        jmethodID *VirtualMethod::mids$ = NULL;
        bool VirtualMethod::live$ = false;

        jclass VirtualMethod::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/VirtualMethod");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a7992850] = env->getMethodID(cls, "<init>", "(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)V");
            mids$[mid_compareImplementationDistance_3e1352c7] = env->getStaticMethodID(cls, "compareImplementationDistance", "(Ljava/lang/Class;Lorg/apache/lucene/util/VirtualMethod;Lorg/apache/lucene/util/VirtualMethod;)I");
            mids$[mid_getImplementationDistance_a5deafeb] = env->getMethodID(cls, "getImplementationDistance", "(Ljava/lang/Class;)I");
            mids$[mid_isOverriddenAsOf_a5deaff8] = env->getMethodID(cls, "isOverriddenAsOf", "(Ljava/lang/Class;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        VirtualMethod::VirtualMethod(const ::java::lang::Class & a0, const ::java::lang::String & a1, const JArray< ::java::lang::Class > & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a7992850, a0.this$, a1.this$, a2.this$)) {}

        jint VirtualMethod::compareImplementationDistance(const ::java::lang::Class & a0, const VirtualMethod & a1, const VirtualMethod & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_compareImplementationDistance_3e1352c7], a0.this$, a1.this$, a2.this$);
        }

        jint VirtualMethod::getImplementationDistance(const ::java::lang::Class & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getImplementationDistance_a5deafeb], a0.this$);
        }

        jboolean VirtualMethod::isOverriddenAsOf(const ::java::lang::Class & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_isOverriddenAsOf_a5deaff8], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_VirtualMethod_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_VirtualMethod_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_VirtualMethod_of_(t_VirtualMethod *self, PyObject *args);
        static int t_VirtualMethod_init_(t_VirtualMethod *self, PyObject *args, PyObject *kwds);
        static PyObject *t_VirtualMethod_compareImplementationDistance(PyTypeObject *type, PyObject *args);
        static PyObject *t_VirtualMethod_getImplementationDistance(t_VirtualMethod *self, PyObject *arg);
        static PyObject *t_VirtualMethod_isOverriddenAsOf(t_VirtualMethod *self, PyObject *arg);
        static PyObject *t_VirtualMethod_get__parameters_(t_VirtualMethod *self, void *data);
        static PyGetSetDef t_VirtualMethod__fields_[] = {
          DECLARE_GET_FIELD(t_VirtualMethod, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_VirtualMethod__methods_[] = {
          DECLARE_METHOD(t_VirtualMethod, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_VirtualMethod, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_VirtualMethod, of_, METH_VARARGS),
          DECLARE_METHOD(t_VirtualMethod, compareImplementationDistance, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_VirtualMethod, getImplementationDistance, METH_O),
          DECLARE_METHOD(t_VirtualMethod, isOverriddenAsOf, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(VirtualMethod, t_VirtualMethod, ::java::lang::Object, VirtualMethod, t_VirtualMethod_init_, 0, 0, t_VirtualMethod__fields_, 0, 0);
        PyObject *t_VirtualMethod::wrap_Object(const VirtualMethod& object, PyTypeObject *p0)
        {
          PyObject *obj = t_VirtualMethod::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_VirtualMethod *self = (t_VirtualMethod *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_VirtualMethod::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_VirtualMethod::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_VirtualMethod *self = (t_VirtualMethod *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_VirtualMethod::install(PyObject *module)
        {
          installType(&PY_TYPE(VirtualMethod), module, "VirtualMethod", 0);
        }

        void t_VirtualMethod::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(VirtualMethod).tp_dict, "class_", make_descriptor(VirtualMethod::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(VirtualMethod).tp_dict, "wrapfn_", make_descriptor(t_VirtualMethod::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(VirtualMethod).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_VirtualMethod_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, VirtualMethod::initializeClass, 1)))
            return NULL;
          return t_VirtualMethod::wrap_Object(VirtualMethod(((t_VirtualMethod *) arg)->object.this$));
        }
        static PyObject *t_VirtualMethod_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, VirtualMethod::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_VirtualMethod_of_(t_VirtualMethod *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_VirtualMethod_init_(t_VirtualMethod *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::Class > a2((jobject) NULL);
          PyTypeObject **p2;
          VirtualMethod object((jobject) NULL);

          if (!parseArgs(args, "Ks[K", ::java::lang::Class::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1, &a2, &p2, ::java::lang::t_Class::parameters_))
          {
            INT_CALL(object = VirtualMethod(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_VirtualMethod_compareImplementationDistance(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          VirtualMethod a1((jobject) NULL);
          PyTypeObject **p1;
          VirtualMethod a2((jobject) NULL);
          PyTypeObject **p2;
          jint result;

          if (!parseArgs(args, "KKK", ::java::lang::Class::initializeClass, VirtualMethod::initializeClass, VirtualMethod::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1, &p1, t_VirtualMethod::parameters_, &a2, &p2, t_VirtualMethod::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::VirtualMethod::compareImplementationDistance(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "compareImplementationDistance", args);
          return NULL;
        }

        static PyObject *t_VirtualMethod_getImplementationDistance(t_VirtualMethod *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          jint result;

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.getImplementationDistance(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getImplementationDistance", arg);
          return NULL;
        }

        static PyObject *t_VirtualMethod_isOverriddenAsOf(t_VirtualMethod *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          jboolean result;

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.isOverriddenAsOf(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "isOverriddenAsOf", arg);
          return NULL;
        }
        static PyObject *t_VirtualMethod_get__parameters_(t_VirtualMethod *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "org/apache/lucene/index/Term.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/MergePolicy$OneMerge.h"
#include "java/util/Map.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/index/LiveIndexWriterConfig.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/document/Field.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexWriter::class$ = NULL;
        jmethodID *IndexWriter::mids$ = NULL;
        bool IndexWriter::live$ = false;
        jint IndexWriter::MAX_TERM_LENGTH = (jint) 0;
        ::java::lang::String *IndexWriter::SOURCE = NULL;
        ::java::lang::String *IndexWriter::SOURCE_ADDINDEXES_READERS = NULL;
        ::java::lang::String *IndexWriter::SOURCE_FLUSH = NULL;
        ::java::lang::String *IndexWriter::SOURCE_MERGE = NULL;
        ::java::lang::String *IndexWriter::WRITE_LOCK_NAME = NULL;

        jclass IndexWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_02525b2d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig;)V");
            mids$[mid_addDocument_d1cac205] = env->getMethodID(cls, "addDocument", "(Ljava/lang/Iterable;)V");
            mids$[mid_addDocument_f74a1d55] = env->getMethodID(cls, "addDocument", "(Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_addDocuments_d1cac205] = env->getMethodID(cls, "addDocuments", "(Ljava/lang/Iterable;)V");
            mids$[mid_addDocuments_f74a1d55] = env->getMethodID(cls, "addDocuments", "(Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_addIndexes_a20f8ee9] = env->getMethodID(cls, "addIndexes", "([Lorg/apache/lucene/index/IndexReader;)V");
            mids$[mid_addIndexes_160e6086] = env->getMethodID(cls, "addIndexes", "([Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_close_bb0c767f] = env->getMethodID(cls, "close", "(Z)V");
            mids$[mid_commit_54c6a166] = env->getMethodID(cls, "commit", "()V");
            mids$[mid_deleteAll_54c6a166] = env->getMethodID(cls, "deleteAll", "()V");
            mids$[mid_deleteDocuments_c9f85e01] = env->getMethodID(cls, "deleteDocuments", "([Lorg/apache/lucene/index/Term;)V");
            mids$[mid_deleteDocuments_937b34d3] = env->getMethodID(cls, "deleteDocuments", "([Lorg/apache/lucene/search/Query;)V");
            mids$[mid_deleteUnusedFiles_54c6a166] = env->getMethodID(cls, "deleteUnusedFiles", "()V");
            mids$[mid_forceMerge_39c7bd3c] = env->getMethodID(cls, "forceMerge", "(I)V");
            mids$[mid_forceMerge_b3a85a05] = env->getMethodID(cls, "forceMerge", "(IZ)V");
            mids$[mid_forceMergeDeletes_54c6a166] = env->getMethodID(cls, "forceMergeDeletes", "()V");
            mids$[mid_forceMergeDeletes_bb0c767f] = env->getMethodID(cls, "forceMergeDeletes", "(Z)V");
            mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
            mids$[mid_getCommitData_db60befd] = env->getMethodID(cls, "getCommitData", "()Ljava/util/Map;");
            mids$[mid_getConfig_d6b985f6] = env->getMethodID(cls, "getConfig", "()Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_getDirectory_1f3934bb] = env->getMethodID(cls, "getDirectory", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getMergingSegments_2d2d7de4] = env->getMethodID(cls, "getMergingSegments", "()Ljava/util/Collection;");
            mids$[mid_getNextMerge_2a262a14] = env->getMethodID(cls, "getNextMerge", "()Lorg/apache/lucene/index/MergePolicy$OneMerge;");
            mids$[mid_getReader_1de06693] = env->getMethodID(cls, "getReader", "()Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_getReader_cfe2828e] = env->getMethodID(cls, "getReader", "(Z)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_hasDeletions_54c6a16a] = env->getMethodID(cls, "hasDeletions", "()Z");
            mids$[mid_hasPendingMerges_54c6a16a] = env->getMethodID(cls, "hasPendingMerges", "()Z");
            mids$[mid_hasUncommittedChanges_54c6a16a] = env->getMethodID(cls, "hasUncommittedChanges", "()Z");
            mids$[mid_isLocked_2e261efe] = env->getStaticMethodID(cls, "isLocked", "(Lorg/apache/lucene/store/Directory;)Z");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_maybeMerge_54c6a166] = env->getMethodID(cls, "maybeMerge", "()V");
            mids$[mid_merge_54badd95] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergePolicy$OneMerge;)V");
            mids$[mid_numDeletedDocs_6649cdeb] = env->getMethodID(cls, "numDeletedDocs", "(Lorg/apache/lucene/index/SegmentCommitInfo;)I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_numRamDocs_54c6a179] = env->getMethodID(cls, "numRamDocs", "()I");
            mids$[mid_prepareCommit_54c6a166] = env->getMethodID(cls, "prepareCommit", "()V");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_ramSizeInBytes_54c6a17a] = env->getMethodID(cls, "ramSizeInBytes", "()J");
            mids$[mid_rollback_54c6a166] = env->getMethodID(cls, "rollback", "()V");
            mids$[mid_segString_14c7b5c5] = env->getMethodID(cls, "segString", "()Ljava/lang/String;");
            mids$[mid_segString_e5fcb63c] = env->getMethodID(cls, "segString", "(Ljava/lang/Iterable;)Ljava/lang/String;");
            mids$[mid_segString_edb3a3c3] = env->getMethodID(cls, "segString", "(Lorg/apache/lucene/index/SegmentCommitInfo;)Ljava/lang/String;");
            mids$[mid_setCommitData_4c9e2b1c] = env->getMethodID(cls, "setCommitData", "(Ljava/util/Map;)V");
            mids$[mid_tryDeleteDocument_1e4306e9] = env->getMethodID(cls, "tryDeleteDocument", "(Lorg/apache/lucene/index/IndexReader;I)Z");
            mids$[mid_unlock_2e261ef2] = env->getStaticMethodID(cls, "unlock", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_updateBinaryDocValue_1aaa0ac7] = env->getMethodID(cls, "updateBinaryDocValue", "(Lorg/apache/lucene/index/Term;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_updateDocValues_48345845] = env->getMethodID(cls, "updateDocValues", "(Lorg/apache/lucene/index/Term;[Lorg/apache/lucene/document/Field;)V");
            mids$[mid_updateDocument_b5aef5e2] = env->getMethodID(cls, "updateDocument", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;)V");
            mids$[mid_updateDocument_4d995db8] = env->getMethodID(cls, "updateDocument", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_updateDocuments_b5aef5e2] = env->getMethodID(cls, "updateDocuments", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;)V");
            mids$[mid_updateDocuments_4d995db8] = env->getMethodID(cls, "updateDocuments", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_updateNumericDocValue_3866ef1c] = env->getMethodID(cls, "updateNumericDocValue", "(Lorg/apache/lucene/index/Term;Ljava/lang/String;J)V");
            mids$[mid_waitForMerges_54c6a166] = env->getMethodID(cls, "waitForMerges", "()V");
            mids$[mid_flush_46f2e2c4] = env->getMethodID(cls, "flush", "(ZZ)V");
            mids$[mid_ensureOpen_bb0c767f] = env->getMethodID(cls, "ensureOpen", "(Z)V");
            mids$[mid_ensureOpen_54c6a166] = env->getMethodID(cls, "ensureOpen", "()V");
            mids$[mid_doAfterFlush_54c6a166] = env->getMethodID(cls, "doAfterFlush", "()V");
            mids$[mid_doBeforeFlush_54c6a166] = env->getMethodID(cls, "doBeforeFlush", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            MAX_TERM_LENGTH = env->getStaticIntField(cls, "MAX_TERM_LENGTH");
            SOURCE = new ::java::lang::String(env->getStaticObjectField(cls, "SOURCE", "Ljava/lang/String;"));
            SOURCE_ADDINDEXES_READERS = new ::java::lang::String(env->getStaticObjectField(cls, "SOURCE_ADDINDEXES_READERS", "Ljava/lang/String;"));
            SOURCE_FLUSH = new ::java::lang::String(env->getStaticObjectField(cls, "SOURCE_FLUSH", "Ljava/lang/String;"));
            SOURCE_MERGE = new ::java::lang::String(env->getStaticObjectField(cls, "SOURCE_MERGE", "Ljava/lang/String;"));
            WRITE_LOCK_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "WRITE_LOCK_NAME", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexWriter::IndexWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::IndexWriterConfig & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_02525b2d, a0.this$, a1.this$)) {}

        void IndexWriter::addDocument(const ::java::lang::Iterable & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addDocument_d1cac205], a0.this$);
        }

        void IndexWriter::addDocument(const ::java::lang::Iterable & a0, const ::org::apache::lucene::analysis::Analyzer & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addDocument_f74a1d55], a0.this$, a1.this$);
        }

        void IndexWriter::addDocuments(const ::java::lang::Iterable & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addDocuments_d1cac205], a0.this$);
        }

        void IndexWriter::addDocuments(const ::java::lang::Iterable & a0, const ::org::apache::lucene::analysis::Analyzer & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addDocuments_f74a1d55], a0.this$, a1.this$);
        }

        void IndexWriter::addIndexes(const JArray< ::org::apache::lucene::index::IndexReader > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addIndexes_a20f8ee9], a0.this$);
        }

        void IndexWriter::addIndexes(const JArray< ::org::apache::lucene::store::Directory > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addIndexes_160e6086], a0.this$);
        }

        void IndexWriter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void IndexWriter::close(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_close_bb0c767f], a0);
        }

        void IndexWriter::commit() const
        {
          env->callVoidMethod(this$, mids$[mid_commit_54c6a166]);
        }

        void IndexWriter::deleteAll() const
        {
          env->callVoidMethod(this$, mids$[mid_deleteAll_54c6a166]);
        }

        void IndexWriter::deleteDocuments(const JArray< ::org::apache::lucene::index::Term > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteDocuments_c9f85e01], a0.this$);
        }

        void IndexWriter::deleteDocuments(const JArray< ::org::apache::lucene::search::Query > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteDocuments_937b34d3], a0.this$);
        }

        void IndexWriter::deleteUnusedFiles() const
        {
          env->callVoidMethod(this$, mids$[mid_deleteUnusedFiles_54c6a166]);
        }

        void IndexWriter::forceMerge(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_forceMerge_39c7bd3c], a0);
        }

        void IndexWriter::forceMerge(jint a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_forceMerge_b3a85a05], a0, a1);
        }

        void IndexWriter::forceMergeDeletes() const
        {
          env->callVoidMethod(this$, mids$[mid_forceMergeDeletes_54c6a166]);
        }

        void IndexWriter::forceMergeDeletes(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_forceMergeDeletes_bb0c767f], a0);
        }

        ::org::apache::lucene::analysis::Analyzer IndexWriter::getAnalyzer() const
        {
          return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
        }

        ::java::util::Map IndexWriter::getCommitData() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getCommitData_db60befd]));
        }

        ::org::apache::lucene::index::LiveIndexWriterConfig IndexWriter::getConfig() const
        {
          return ::org::apache::lucene::index::LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_getConfig_d6b985f6]));
        }

        ::org::apache::lucene::store::Directory IndexWriter::getDirectory() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDirectory_1f3934bb]));
        }

        ::java::util::Collection IndexWriter::getMergingSegments() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getMergingSegments_2d2d7de4]));
        }

        ::org::apache::lucene::index::MergePolicy$OneMerge IndexWriter::getNextMerge() const
        {
          return ::org::apache::lucene::index::MergePolicy$OneMerge(env->callObjectMethod(this$, mids$[mid_getNextMerge_2a262a14]));
        }

        ::org::apache::lucene::index::DirectoryReader IndexWriter::getReader() const
        {
          return ::org::apache::lucene::index::DirectoryReader(env->callObjectMethod(this$, mids$[mid_getReader_1de06693]));
        }

        ::org::apache::lucene::index::DirectoryReader IndexWriter::getReader(jboolean a0) const
        {
          return ::org::apache::lucene::index::DirectoryReader(env->callObjectMethod(this$, mids$[mid_getReader_cfe2828e], a0));
        }

        jboolean IndexWriter::hasDeletions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasDeletions_54c6a16a]);
        }

        jboolean IndexWriter::hasPendingMerges() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPendingMerges_54c6a16a]);
        }

        jboolean IndexWriter::hasUncommittedChanges() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasUncommittedChanges_54c6a16a]);
        }

        jboolean IndexWriter::isLocked(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_isLocked_2e261efe], a0.this$);
        }

        jint IndexWriter::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        void IndexWriter::maybeMerge() const
        {
          env->callVoidMethod(this$, mids$[mid_maybeMerge_54c6a166]);
        }

        void IndexWriter::merge(const ::org::apache::lucene::index::MergePolicy$OneMerge & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_54badd95], a0.this$);
        }

        jint IndexWriter::numDeletedDocs(const ::org::apache::lucene::index::SegmentCommitInfo & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_numDeletedDocs_6649cdeb], a0.this$);
        }

        jint IndexWriter::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }

        jint IndexWriter::numRamDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numRamDocs_54c6a179]);
        }

        void IndexWriter::prepareCommit() const
        {
          env->callVoidMethod(this$, mids$[mid_prepareCommit_54c6a166]);
        }

        jlong IndexWriter::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        jlong IndexWriter::ramSizeInBytes() const
        {
          return env->callLongMethod(this$, mids$[mid_ramSizeInBytes_54c6a17a]);
        }

        void IndexWriter::rollback() const
        {
          env->callVoidMethod(this$, mids$[mid_rollback_54c6a166]);
        }

        ::java::lang::String IndexWriter::segString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_segString_14c7b5c5]));
        }

        ::java::lang::String IndexWriter::segString(const ::java::lang::Iterable & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_segString_e5fcb63c], a0.this$));
        }

        ::java::lang::String IndexWriter::segString(const ::org::apache::lucene::index::SegmentCommitInfo & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_segString_edb3a3c3], a0.this$));
        }

        void IndexWriter::setCommitData(const ::java::util::Map & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCommitData_4c9e2b1c], a0.this$);
        }

        jboolean IndexWriter::tryDeleteDocument(const ::org::apache::lucene::index::IndexReader & a0, jint a1) const
        {
          return env->callBooleanMethod(this$, mids$[mid_tryDeleteDocument_1e4306e9], a0.this$, a1);
        }

        void IndexWriter::unlock(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_unlock_2e261ef2], a0.this$);
        }

        void IndexWriter::updateBinaryDocValue(const ::org::apache::lucene::index::Term & a0, const ::java::lang::String & a1, const ::org::apache::lucene::util::BytesRef & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_updateBinaryDocValue_1aaa0ac7], a0.this$, a1.this$, a2.this$);
        }

        void IndexWriter::updateDocValues(const ::org::apache::lucene::index::Term & a0, const JArray< ::org::apache::lucene::document::Field > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_updateDocValues_48345845], a0.this$, a1.this$);
        }

        void IndexWriter::updateDocument(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_updateDocument_b5aef5e2], a0.this$, a1.this$);
        }

        void IndexWriter::updateDocument(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1, const ::org::apache::lucene::analysis::Analyzer & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_updateDocument_4d995db8], a0.this$, a1.this$, a2.this$);
        }

        void IndexWriter::updateDocuments(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_updateDocuments_b5aef5e2], a0.this$, a1.this$);
        }

        void IndexWriter::updateDocuments(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1, const ::org::apache::lucene::analysis::Analyzer & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_updateDocuments_4d995db8], a0.this$, a1.this$, a2.this$);
        }

        void IndexWriter::updateNumericDocValue(const ::org::apache::lucene::index::Term & a0, const ::java::lang::String & a1, jlong a2) const
        {
          env->callVoidMethod(this$, mids$[mid_updateNumericDocValue_3866ef1c], a0.this$, a1.this$, a2);
        }

        void IndexWriter::waitForMerges() const
        {
          env->callVoidMethod(this$, mids$[mid_waitForMerges_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/IndexWriter$IndexReaderWarmer.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexWriter_init_(t_IndexWriter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexWriter_addDocument(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_addDocuments(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_addIndexes(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_close(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_commit(t_IndexWriter *self);
        static PyObject *t_IndexWriter_deleteAll(t_IndexWriter *self);
        static PyObject *t_IndexWriter_deleteDocuments(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_deleteUnusedFiles(t_IndexWriter *self);
        static PyObject *t_IndexWriter_forceMerge(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_forceMergeDeletes(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_getAnalyzer(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getCommitData(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getConfig(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getDirectory(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getMergingSegments(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getNextMerge(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getReader(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_hasDeletions(t_IndexWriter *self);
        static PyObject *t_IndexWriter_hasPendingMerges(t_IndexWriter *self);
        static PyObject *t_IndexWriter_hasUncommittedChanges(t_IndexWriter *self);
        static PyObject *t_IndexWriter_isLocked(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriter_maxDoc(t_IndexWriter *self);
        static PyObject *t_IndexWriter_maybeMerge(t_IndexWriter *self);
        static PyObject *t_IndexWriter_merge(t_IndexWriter *self, PyObject *arg);
        static PyObject *t_IndexWriter_numDeletedDocs(t_IndexWriter *self, PyObject *arg);
        static PyObject *t_IndexWriter_numDocs(t_IndexWriter *self);
        static PyObject *t_IndexWriter_numRamDocs(t_IndexWriter *self);
        static PyObject *t_IndexWriter_prepareCommit(t_IndexWriter *self);
        static PyObject *t_IndexWriter_ramBytesUsed(t_IndexWriter *self);
        static PyObject *t_IndexWriter_ramSizeInBytes(t_IndexWriter *self);
        static PyObject *t_IndexWriter_rollback(t_IndexWriter *self);
        static PyObject *t_IndexWriter_segString(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_setCommitData(t_IndexWriter *self, PyObject *arg);
        static PyObject *t_IndexWriter_tryDeleteDocument(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_unlock(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriter_updateBinaryDocValue(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_updateDocValues(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_updateDocument(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_updateDocuments(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_updateNumericDocValue(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_waitForMerges(t_IndexWriter *self);
        static PyObject *t_IndexWriter_get__analyzer(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__commitData(t_IndexWriter *self, void *data);
        static int t_IndexWriter_set__commitData(t_IndexWriter *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriter_get__config(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__directory(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__mergingSegments(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__nextMerge(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__reader(t_IndexWriter *self, void *data);
        static PyGetSetDef t_IndexWriter__fields_[] = {
          DECLARE_GET_FIELD(t_IndexWriter, analyzer),
          DECLARE_GETSET_FIELD(t_IndexWriter, commitData),
          DECLARE_GET_FIELD(t_IndexWriter, config),
          DECLARE_GET_FIELD(t_IndexWriter, directory),
          DECLARE_GET_FIELD(t_IndexWriter, mergingSegments),
          DECLARE_GET_FIELD(t_IndexWriter, nextMerge),
          DECLARE_GET_FIELD(t_IndexWriter, reader),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexWriter__methods_[] = {
          DECLARE_METHOD(t_IndexWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriter, addDocument, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, addDocuments, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, addIndexes, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, close, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, commit, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, deleteAll, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, deleteDocuments, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, deleteUnusedFiles, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, forceMerge, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, forceMergeDeletes, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, getAnalyzer, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getCommitData, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getConfig, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getDirectory, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getMergingSegments, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getNextMerge, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getReader, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, hasDeletions, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, hasPendingMerges, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, hasUncommittedChanges, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, isLocked, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriter, maxDoc, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, maybeMerge, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, merge, METH_O),
          DECLARE_METHOD(t_IndexWriter, numDeletedDocs, METH_O),
          DECLARE_METHOD(t_IndexWriter, numDocs, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, numRamDocs, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, prepareCommit, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, ramSizeInBytes, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, rollback, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, segString, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, setCommitData, METH_O),
          DECLARE_METHOD(t_IndexWriter, tryDeleteDocument, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, unlock, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriter, updateBinaryDocValue, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, updateDocValues, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, updateDocument, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, updateDocuments, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, updateNumericDocValue, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, waitForMerges, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexWriter, t_IndexWriter, ::java::lang::Object, IndexWriter, t_IndexWriter_init_, 0, 0, t_IndexWriter__fields_, 0, 0);

        void t_IndexWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexWriter), module, "IndexWriter", 0);
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "IndexReaderWarmer", make_descriptor(&PY_TYPE(IndexWriter$IndexReaderWarmer)));
        }

        void t_IndexWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "class_", make_descriptor(IndexWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "wrapfn_", make_descriptor(t_IndexWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IndexWriter::initializeClass);
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "MAX_TERM_LENGTH", make_descriptor(IndexWriter::MAX_TERM_LENGTH));
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "SOURCE", make_descriptor(j2p(*IndexWriter::SOURCE)));
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "SOURCE_ADDINDEXES_READERS", make_descriptor(j2p(*IndexWriter::SOURCE_ADDINDEXES_READERS)));
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "SOURCE_FLUSH", make_descriptor(j2p(*IndexWriter::SOURCE_FLUSH)));
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "SOURCE_MERGE", make_descriptor(j2p(*IndexWriter::SOURCE_MERGE)));
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "WRITE_LOCK_NAME", make_descriptor(j2p(*IndexWriter::WRITE_LOCK_NAME)));
        }

        static PyObject *t_IndexWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexWriter::initializeClass, 1)))
            return NULL;
          return t_IndexWriter::wrap_Object(IndexWriter(((t_IndexWriter *) arg)->object.this$));
        }
        static PyObject *t_IndexWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexWriter_init_(t_IndexWriter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::IndexWriterConfig a1((jobject) NULL);
          IndexWriter object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::IndexWriterConfig::initializeClass, &a0, &a1))
          {
            INT_CALL(object = IndexWriter(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexWriter_addDocument(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(self->object.addDocument(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1))
              {
                OBJ_CALL(self->object.addDocument(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addDocument", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_addDocuments(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(self->object.addDocuments(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1))
              {
                OBJ_CALL(self->object.addDocuments(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addDocuments", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_addIndexes(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::IndexReader > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addIndexes(a0));
                Py_RETURN_NONE;
              }
            }
            {
              JArray< ::org::apache::lucene::store::Directory > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addIndexes(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addIndexes", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_close(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }
            break;
           case 1:
            {
              jboolean a0;

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(self->object.close(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "close", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_commit(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.commit());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_deleteAll(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.deleteAll());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_deleteDocuments(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::Term > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(self->object.deleteDocuments(a0));
                Py_RETURN_NONE;
              }
            }
            {
              JArray< ::org::apache::lucene::search::Query > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                OBJ_CALL(self->object.deleteDocuments(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "deleteDocuments", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_deleteUnusedFiles(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.deleteUnusedFiles());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_forceMerge(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.forceMerge(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jint a0;
              jboolean a1;

              if (!parseArgs(args, "IZ", &a0, &a1))
              {
                OBJ_CALL(self->object.forceMerge(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "forceMerge", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_forceMergeDeletes(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.forceMergeDeletes());
              Py_RETURN_NONE;
            }
            break;
           case 1:
            {
              jboolean a0;

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(self->object.forceMergeDeletes(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "forceMergeDeletes", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_getAnalyzer(t_IndexWriter *self)
        {
          ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
          OBJ_CALL(result = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
        }

        static PyObject *t_IndexWriter_getCommitData(t_IndexWriter *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getCommitData());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_IndexWriter_getConfig(t_IndexWriter *self)
        {
          ::org::apache::lucene::index::LiveIndexWriterConfig result((jobject) NULL);
          OBJ_CALL(result = self->object.getConfig());
          return ::org::apache::lucene::index::t_LiveIndexWriterConfig::wrap_Object(result);
        }

        static PyObject *t_IndexWriter_getDirectory(t_IndexWriter *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_IndexWriter_getMergingSegments(t_IndexWriter *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergingSegments());
          return ::java::util::t_Collection::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(SegmentCommitInfo));
        }

        static PyObject *t_IndexWriter_getNextMerge(t_IndexWriter *self)
        {
          ::org::apache::lucene::index::MergePolicy$OneMerge result((jobject) NULL);
          OBJ_CALL(result = self->object.getNextMerge());
          return ::org::apache::lucene::index::t_MergePolicy$OneMerge::wrap_Object(result);
        }

        static PyObject *t_IndexWriter_getReader(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);
              OBJ_CALL(result = self->object.getReader());
              return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
            }
            break;
           case 1:
            {
              jboolean a0;
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(result = self->object.getReader(a0));
                return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getReader", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_hasDeletions(t_IndexWriter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasDeletions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexWriter_hasPendingMerges(t_IndexWriter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPendingMerges());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexWriter_hasUncommittedChanges(t_IndexWriter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasUncommittedChanges());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexWriter_isLocked(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexWriter::isLocked(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "isLocked", arg);
          return NULL;
        }

        static PyObject *t_IndexWriter_maxDoc(t_IndexWriter *self)
        {
          jint result;
          OBJ_CALL(result = self->object.maxDoc());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexWriter_maybeMerge(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.maybeMerge());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_merge(t_IndexWriter *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergePolicy$OneMerge a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergePolicy$OneMerge::initializeClass, &a0))
          {
            OBJ_CALL(self->object.merge(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "merge", arg);
          return NULL;
        }

        static PyObject *t_IndexWriter_numDeletedDocs(t_IndexWriter *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.numDeletedDocs(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "numDeletedDocs", arg);
          return NULL;
        }

        static PyObject *t_IndexWriter_numDocs(t_IndexWriter *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexWriter_numRamDocs(t_IndexWriter *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numRamDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexWriter_prepareCommit(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.prepareCommit());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_ramBytesUsed(t_IndexWriter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexWriter_ramSizeInBytes(t_IndexWriter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramSizeInBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexWriter_rollback(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.rollback());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_segString(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.segString());
              return j2p(result);
            }
            break;
           case 1:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(result = self->object.segString(a0));
                return j2p(result);
              }
            }
            {
              ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.segString(a0));
                return j2p(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "segString", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_setCommitData(t_IndexWriter *self, PyObject *arg)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            OBJ_CALL(self->object.setCommitData(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCommitData", arg);
          return NULL;
        }

        static PyObject *t_IndexWriter_tryDeleteDocument(t_IndexWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          jint a1;
          jboolean result;

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.tryDeleteDocument(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "tryDeleteDocument", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_unlock(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::IndexWriter::unlock(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "unlock", arg);
          return NULL;
        }

        static PyObject *t_IndexWriter_updateBinaryDocValue(t_IndexWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);

          if (!parseArgs(args, "ksk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.updateBinaryDocValue(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "updateBinaryDocValue", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_updateDocValues(t_IndexWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          JArray< ::org::apache::lucene::document::Field > a1((jobject) NULL);

          if (!parseArgs(args, "k[k", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::document::Field::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.updateDocValues(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "updateDocValues", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_updateDocument(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "kK", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(self->object.updateDocument(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);

              if (!parseArgs(args, "kKk", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2))
              {
                OBJ_CALL(self->object.updateDocument(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "updateDocument", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_updateDocuments(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "kK", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(self->object.updateDocuments(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);

              if (!parseArgs(args, "kKk", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2))
              {
                OBJ_CALL(self->object.updateDocuments(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "updateDocuments", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_updateNumericDocValue(t_IndexWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jlong a2;

          if (!parseArgs(args, "ksJ", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.updateNumericDocValue(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "updateNumericDocValue", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_waitForMerges(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.waitForMerges());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_get__analyzer(t_IndexWriter *self, void *data)
        {
          ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
          OBJ_CALL(value = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
        }

        static PyObject *t_IndexWriter_get__commitData(t_IndexWriter *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getCommitData());
          return ::java::util::t_Map::wrap_Object(value);
        }
        static int t_IndexWriter_set__commitData(t_IndexWriter *self, PyObject *arg, void *data)
        {
          {
            ::java::util::Map value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
            {
              INT_CALL(self->object.setCommitData(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "commitData", arg);
          return -1;
        }

        static PyObject *t_IndexWriter_get__config(t_IndexWriter *self, void *data)
        {
          ::org::apache::lucene::index::LiveIndexWriterConfig value((jobject) NULL);
          OBJ_CALL(value = self->object.getConfig());
          return ::org::apache::lucene::index::t_LiveIndexWriterConfig::wrap_Object(value);
        }

        static PyObject *t_IndexWriter_get__directory(t_IndexWriter *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_IndexWriter_get__mergingSegments(t_IndexWriter *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergingSegments());
          return ::java::util::t_Collection::wrap_Object(value);
        }

        static PyObject *t_IndexWriter_get__nextMerge(t_IndexWriter *self, void *data)
        {
          ::org::apache::lucene::index::MergePolicy$OneMerge value((jobject) NULL);
          OBJ_CALL(value = self->object.getNextMerge());
          return ::org::apache::lucene::index::t_MergePolicy$OneMerge::wrap_Object(value);
        }

        static PyObject *t_IndexWriter_get__reader(t_IndexWriter *self, void *data)
        {
          ::org::apache::lucene::index::DirectoryReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getReader());
          return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Reduce.h"
#include "org/egothor/stemmer/Trie.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Reduce::class$ = NULL;
      jmethodID *Reduce::mids$ = NULL;
      bool Reduce::live$ = false;

      jclass Reduce::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Reduce");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_optimize_c26c0475] = env->getMethodID(cls, "optimize", "(Lorg/egothor/stemmer/Trie;)Lorg/egothor/stemmer/Trie;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Reduce::Reduce() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      ::org::egothor::stemmer::Trie Reduce::optimize(const ::org::egothor::stemmer::Trie & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_optimize_c26c0475], a0.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Reduce_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Reduce_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Reduce_init_(t_Reduce *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Reduce_optimize(t_Reduce *self, PyObject *arg);

      static PyMethodDef t_Reduce__methods_[] = {
        DECLARE_METHOD(t_Reduce, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Reduce, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Reduce, optimize, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Reduce, t_Reduce, ::java::lang::Object, Reduce, t_Reduce_init_, 0, 0, 0, 0, 0);

      void t_Reduce::install(PyObject *module)
      {
        installType(&PY_TYPE(Reduce), module, "Reduce", 0);
      }

      void t_Reduce::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Reduce).tp_dict, "class_", make_descriptor(Reduce::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Reduce).tp_dict, "wrapfn_", make_descriptor(t_Reduce::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Reduce).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Reduce_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Reduce::initializeClass, 1)))
          return NULL;
        return t_Reduce::wrap_Object(Reduce(((t_Reduce *) arg)->object.this$));
      }
      static PyObject *t_Reduce_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Reduce::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Reduce_init_(t_Reduce *self, PyObject *args, PyObject *kwds)
      {
        Reduce object((jobject) NULL);

        INT_CALL(object = Reduce());
        self->object = object;

        return 0;
      }

      static PyObject *t_Reduce_optimize(t_Reduce *self, PyObject *arg)
      {
        ::org::egothor::stemmer::Trie a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArg(arg, "k", ::org::egothor::stemmer::Trie::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.optimize(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "optimize", arg);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hunspell/HunspellStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/hunspell/Dictionary.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {

          ::java::lang::Class *HunspellStemFilter::class$ = NULL;
          jmethodID *HunspellStemFilter::mids$ = NULL;
          bool HunspellStemFilter::live$ = false;

          jclass HunspellStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hunspell/HunspellStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_05177913] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/hunspell/Dictionary;)V");
              mids$[mid_init$_d3f3208c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/hunspell/Dictionary;Z)V");
              mids$[mid_init$_6c7575a5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/hunspell/Dictionary;ZZ)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HunspellStemFilter::HunspellStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::hunspell::Dictionary & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_05177913, a0.this$, a1.this$)) {}

          HunspellStemFilter::HunspellStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::hunspell::Dictionary & a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d3f3208c, a0.this$, a1.this$, a2)) {}

          HunspellStemFilter::HunspellStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::hunspell::Dictionary & a1, jboolean a2, jboolean a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_6c7575a5, a0.this$, a1.this$, a2, a3)) {}

          jboolean HunspellStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void HunspellStemFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {
          static PyObject *t_HunspellStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HunspellStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HunspellStemFilter_init_(t_HunspellStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HunspellStemFilter_incrementToken(t_HunspellStemFilter *self, PyObject *args);
          static PyObject *t_HunspellStemFilter_reset(t_HunspellStemFilter *self, PyObject *args);

          static PyMethodDef t_HunspellStemFilter__methods_[] = {
            DECLARE_METHOD(t_HunspellStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HunspellStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HunspellStemFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_HunspellStemFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HunspellStemFilter, t_HunspellStemFilter, ::org::apache::lucene::analysis::TokenFilter, HunspellStemFilter, t_HunspellStemFilter_init_, 0, 0, 0, 0, 0);

          void t_HunspellStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HunspellStemFilter), module, "HunspellStemFilter", 0);
          }

          void t_HunspellStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HunspellStemFilter).tp_dict, "class_", make_descriptor(HunspellStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HunspellStemFilter).tp_dict, "wrapfn_", make_descriptor(t_HunspellStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HunspellStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HunspellStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HunspellStemFilter::initializeClass, 1)))
              return NULL;
            return t_HunspellStemFilter::wrap_Object(HunspellStemFilter(((t_HunspellStemFilter *) arg)->object.this$));
          }
          static PyObject *t_HunspellStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HunspellStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HunspellStemFilter_init_(t_HunspellStemFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::hunspell::Dictionary a1((jobject) NULL);
                HunspellStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::hunspell::Dictionary::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = HunspellStemFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::hunspell::Dictionary a1((jobject) NULL);
                jboolean a2;
                HunspellStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kkZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::hunspell::Dictionary::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = HunspellStemFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::hunspell::Dictionary a1((jobject) NULL);
                jboolean a2;
                jboolean a3;
                HunspellStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kkZZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::hunspell::Dictionary::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = HunspellStemFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HunspellStemFilter_incrementToken(t_HunspellStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(HunspellStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_HunspellStemFilter_reset(t_HunspellStemFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(HunspellStemFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/LogMergePolicy.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/lang/Boolean.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *LogMergePolicy::class$ = NULL;
        jmethodID *LogMergePolicy::mids$ = NULL;
        bool LogMergePolicy::live$ = false;
        jint LogMergePolicy::DEFAULT_MAX_MERGE_DOCS = (jint) 0;
        jint LogMergePolicy::DEFAULT_MERGE_FACTOR = (jint) 0;
        jdouble LogMergePolicy::DEFAULT_NO_CFS_RATIO = (jdouble) 0;
        jdouble LogMergePolicy::LEVEL_LOG_SPAN = (jdouble) 0;

        jclass LogMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/LogMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_findForcedDeletesMerges_581dbc49] = env->getMethodID(cls, "findForcedDeletesMerges", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findForcedMerges_4fe4a5b5] = env->getMethodID(cls, "findForcedMerges", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findMerges_cada0df0] = env->getMethodID(cls, "findMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_getCalibrateSizeByDeletes_54c6a16a] = env->getMethodID(cls, "getCalibrateSizeByDeletes", "()Z");
            mids$[mid_getMaxMergeDocs_54c6a179] = env->getMethodID(cls, "getMaxMergeDocs", "()I");
            mids$[mid_getMergeFactor_54c6a179] = env->getMethodID(cls, "getMergeFactor", "()I");
            mids$[mid_setCalibrateSizeByDeletes_bb0c767f] = env->getMethodID(cls, "setCalibrateSizeByDeletes", "(Z)V");
            mids$[mid_setMaxMergeDocs_39c7bd3c] = env->getMethodID(cls, "setMaxMergeDocs", "(I)V");
            mids$[mid_setMergeFactor_39c7bd3c] = env->getMethodID(cls, "setMergeFactor", "(I)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_message_dcbb03ef] = env->getMethodID(cls, "message", "(Ljava/lang/String;Lorg/apache/lucene/index/IndexWriter;)V");
            mids$[mid_isMerged_2ee943c8] = env->getMethodID(cls, "isMerged", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/IndexWriter;)Z");
            mids$[mid_verbose_4f2fb7d9] = env->getMethodID(cls, "verbose", "(Lorg/apache/lucene/index/IndexWriter;)Z");
            mids$[mid_sizeBytes_5454cb07] = env->getMethodID(cls, "sizeBytes", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)J");
            mids$[mid_sizeDocs_5454cb07] = env->getMethodID(cls, "sizeDocs", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_MAX_MERGE_DOCS = env->getStaticIntField(cls, "DEFAULT_MAX_MERGE_DOCS");
            DEFAULT_MERGE_FACTOR = env->getStaticIntField(cls, "DEFAULT_MERGE_FACTOR");
            DEFAULT_NO_CFS_RATIO = env->getStaticDoubleField(cls, "DEFAULT_NO_CFS_RATIO");
            LEVEL_LOG_SPAN = env->getStaticDoubleField(cls, "LEVEL_LOG_SPAN");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LogMergePolicy::LogMergePolicy() : ::org::apache::lucene::index::MergePolicy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void LogMergePolicy::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification LogMergePolicy::findForcedDeletesMerges(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::IndexWriter & a1) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedDeletesMerges_581dbc49], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification LogMergePolicy::findForcedMerges(const ::org::apache::lucene::index::SegmentInfos & a0, jint a1, const ::java::util::Map & a2, const ::org::apache::lucene::index::IndexWriter & a3) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedMerges_4fe4a5b5], a0.this$, a1, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification LogMergePolicy::findMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findMerges_cada0df0], a0.this$, a1.this$, a2.this$));
        }

        jboolean LogMergePolicy::getCalibrateSizeByDeletes() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getCalibrateSizeByDeletes_54c6a16a]);
        }

        jint LogMergePolicy::getMaxMergeDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxMergeDocs_54c6a179]);
        }

        jint LogMergePolicy::getMergeFactor() const
        {
          return env->callIntMethod(this$, mids$[mid_getMergeFactor_54c6a179]);
        }

        void LogMergePolicy::setCalibrateSizeByDeletes(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCalibrateSizeByDeletes_bb0c767f], a0);
        }

        void LogMergePolicy::setMaxMergeDocs(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxMergeDocs_39c7bd3c], a0);
        }

        void LogMergePolicy::setMergeFactor(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMergeFactor_39c7bd3c], a0);
        }

        ::java::lang::String LogMergePolicy::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_LogMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LogMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LogMergePolicy_init_(t_LogMergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LogMergePolicy_close(t_LogMergePolicy *self, PyObject *args);
        static PyObject *t_LogMergePolicy_findForcedDeletesMerges(t_LogMergePolicy *self, PyObject *args);
        static PyObject *t_LogMergePolicy_findForcedMerges(t_LogMergePolicy *self, PyObject *args);
        static PyObject *t_LogMergePolicy_findMerges(t_LogMergePolicy *self, PyObject *args);
        static PyObject *t_LogMergePolicy_getCalibrateSizeByDeletes(t_LogMergePolicy *self);
        static PyObject *t_LogMergePolicy_getMaxMergeDocs(t_LogMergePolicy *self);
        static PyObject *t_LogMergePolicy_getMergeFactor(t_LogMergePolicy *self);
        static PyObject *t_LogMergePolicy_setCalibrateSizeByDeletes(t_LogMergePolicy *self, PyObject *arg);
        static PyObject *t_LogMergePolicy_setMaxMergeDocs(t_LogMergePolicy *self, PyObject *arg);
        static PyObject *t_LogMergePolicy_setMergeFactor(t_LogMergePolicy *self, PyObject *arg);
        static PyObject *t_LogMergePolicy_toString(t_LogMergePolicy *self, PyObject *args);
        static PyObject *t_LogMergePolicy_get__calibrateSizeByDeletes(t_LogMergePolicy *self, void *data);
        static int t_LogMergePolicy_set__calibrateSizeByDeletes(t_LogMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_LogMergePolicy_get__maxMergeDocs(t_LogMergePolicy *self, void *data);
        static int t_LogMergePolicy_set__maxMergeDocs(t_LogMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_LogMergePolicy_get__mergeFactor(t_LogMergePolicy *self, void *data);
        static int t_LogMergePolicy_set__mergeFactor(t_LogMergePolicy *self, PyObject *arg, void *data);
        static PyGetSetDef t_LogMergePolicy__fields_[] = {
          DECLARE_GETSET_FIELD(t_LogMergePolicy, calibrateSizeByDeletes),
          DECLARE_GETSET_FIELD(t_LogMergePolicy, maxMergeDocs),
          DECLARE_GETSET_FIELD(t_LogMergePolicy, mergeFactor),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LogMergePolicy__methods_[] = {
          DECLARE_METHOD(t_LogMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogMergePolicy, close, METH_VARARGS),
          DECLARE_METHOD(t_LogMergePolicy, findForcedDeletesMerges, METH_VARARGS),
          DECLARE_METHOD(t_LogMergePolicy, findForcedMerges, METH_VARARGS),
          DECLARE_METHOD(t_LogMergePolicy, findMerges, METH_VARARGS),
          DECLARE_METHOD(t_LogMergePolicy, getCalibrateSizeByDeletes, METH_NOARGS),
          DECLARE_METHOD(t_LogMergePolicy, getMaxMergeDocs, METH_NOARGS),
          DECLARE_METHOD(t_LogMergePolicy, getMergeFactor, METH_NOARGS),
          DECLARE_METHOD(t_LogMergePolicy, setCalibrateSizeByDeletes, METH_O),
          DECLARE_METHOD(t_LogMergePolicy, setMaxMergeDocs, METH_O),
          DECLARE_METHOD(t_LogMergePolicy, setMergeFactor, METH_O),
          DECLARE_METHOD(t_LogMergePolicy, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LogMergePolicy, t_LogMergePolicy, ::org::apache::lucene::index::MergePolicy, LogMergePolicy, t_LogMergePolicy_init_, 0, 0, t_LogMergePolicy__fields_, 0, 0);

        void t_LogMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(LogMergePolicy), module, "LogMergePolicy", 0);
        }

        void t_LogMergePolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LogMergePolicy).tp_dict, "class_", make_descriptor(LogMergePolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LogMergePolicy).tp_dict, "wrapfn_", make_descriptor(t_LogMergePolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LogMergePolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(LogMergePolicy::initializeClass);
          PyDict_SetItemString(PY_TYPE(LogMergePolicy).tp_dict, "DEFAULT_MAX_MERGE_DOCS", make_descriptor(LogMergePolicy::DEFAULT_MAX_MERGE_DOCS));
          PyDict_SetItemString(PY_TYPE(LogMergePolicy).tp_dict, "DEFAULT_MERGE_FACTOR", make_descriptor(LogMergePolicy::DEFAULT_MERGE_FACTOR));
          PyDict_SetItemString(PY_TYPE(LogMergePolicy).tp_dict, "DEFAULT_NO_CFS_RATIO", make_descriptor(LogMergePolicy::DEFAULT_NO_CFS_RATIO));
          PyDict_SetItemString(PY_TYPE(LogMergePolicy).tp_dict, "LEVEL_LOG_SPAN", make_descriptor(LogMergePolicy::LEVEL_LOG_SPAN));
        }

        static PyObject *t_LogMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LogMergePolicy::initializeClass, 1)))
            return NULL;
          return t_LogMergePolicy::wrap_Object(LogMergePolicy(((t_LogMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_LogMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LogMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LogMergePolicy_init_(t_LogMergePolicy *self, PyObject *args, PyObject *kwds)
        {
          LogMergePolicy object((jobject) NULL);

          INT_CALL(object = LogMergePolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_LogMergePolicy_close(t_LogMergePolicy *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(LogMergePolicy), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_LogMergePolicy_findForcedDeletesMerges(t_LogMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.findForcedDeletesMerges(a0, a1));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(LogMergePolicy), (PyObject *) self, "findForcedDeletesMerges", args, 2);
        }

        static PyObject *t_LogMergePolicy_findForcedMerges(t_LogMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          jint a1;
          ::java::util::Map a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::IndexWriter a3((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kIKk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3))
          {
            OBJ_CALL(result = self->object.findForcedMerges(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(LogMergePolicy), (PyObject *) self, "findForcedMerges", args, 2);
        }

        static PyObject *t_LogMergePolicy_findMerges(t_LogMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(LogMergePolicy), (PyObject *) self, "findMerges", args, 2);
        }

        static PyObject *t_LogMergePolicy_getCalibrateSizeByDeletes(t_LogMergePolicy *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getCalibrateSizeByDeletes());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_LogMergePolicy_getMaxMergeDocs(t_LogMergePolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxMergeDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LogMergePolicy_getMergeFactor(t_LogMergePolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMergeFactor());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LogMergePolicy_setCalibrateSizeByDeletes(t_LogMergePolicy *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setCalibrateSizeByDeletes(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCalibrateSizeByDeletes", arg);
          return NULL;
        }

        static PyObject *t_LogMergePolicy_setMaxMergeDocs(t_LogMergePolicy *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setMaxMergeDocs(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergeDocs", arg);
          return NULL;
        }

        static PyObject *t_LogMergePolicy_setMergeFactor(t_LogMergePolicy *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setMergeFactor(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMergeFactor", arg);
          return NULL;
        }

        static PyObject *t_LogMergePolicy_toString(t_LogMergePolicy *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(LogMergePolicy), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_LogMergePolicy_get__calibrateSizeByDeletes(t_LogMergePolicy *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getCalibrateSizeByDeletes());
          Py_RETURN_BOOL(value);
        }
        static int t_LogMergePolicy_set__calibrateSizeByDeletes(t_LogMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setCalibrateSizeByDeletes(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "calibrateSizeByDeletes", arg);
          return -1;
        }

        static PyObject *t_LogMergePolicy_get__maxMergeDocs(t_LogMergePolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxMergeDocs());
          return PyInt_FromLong((long) value);
        }
        static int t_LogMergePolicy_set__maxMergeDocs(t_LogMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxMergeDocs(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergeDocs", arg);
          return -1;
        }

        static PyObject *t_LogMergePolicy_get__mergeFactor(t_LogMergePolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMergeFactor());
          return PyInt_FromLong((long) value);
        }
        static int t_LogMergePolicy_set__mergeFactor(t_LogMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMergeFactor(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergeFactor", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RefCount.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RefCount::class$ = NULL;
        jmethodID *RefCount::mids$ = NULL;
        bool RefCount::live$ = false;

        jclass RefCount::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RefCount");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_290588ee] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;)V");
            mids$[mid_decRef_54c6a166] = env->getMethodID(cls, "decRef", "()V");
            mids$[mid_get_846352c3] = env->getMethodID(cls, "get", "()Ljava/lang/Object;");
            mids$[mid_getRefCount_54c6a179] = env->getMethodID(cls, "getRefCount", "()I");
            mids$[mid_incRef_54c6a166] = env->getMethodID(cls, "incRef", "()V");
            mids$[mid_release_54c6a166] = env->getMethodID(cls, "release", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RefCount::RefCount(const ::java::lang::Object & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_290588ee, a0.this$)) {}

        void RefCount::decRef() const
        {
          env->callVoidMethod(this$, mids$[mid_decRef_54c6a166]);
        }

        ::java::lang::Object RefCount::get() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_846352c3]));
        }

        jint RefCount::getRefCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getRefCount_54c6a179]);
        }

        void RefCount::incRef() const
        {
          env->callVoidMethod(this$, mids$[mid_incRef_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RefCount_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RefCount_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RefCount_of_(t_RefCount *self, PyObject *args);
        static int t_RefCount_init_(t_RefCount *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RefCount_decRef(t_RefCount *self);
        static PyObject *t_RefCount_get(t_RefCount *self);
        static PyObject *t_RefCount_getRefCount(t_RefCount *self);
        static PyObject *t_RefCount_incRef(t_RefCount *self);
        static PyObject *t_RefCount_get__refCount(t_RefCount *self, void *data);
        static PyObject *t_RefCount_get__parameters_(t_RefCount *self, void *data);
        static PyGetSetDef t_RefCount__fields_[] = {
          DECLARE_GET_FIELD(t_RefCount, refCount),
          DECLARE_GET_FIELD(t_RefCount, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RefCount__methods_[] = {
          DECLARE_METHOD(t_RefCount, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RefCount, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RefCount, of_, METH_VARARGS),
          DECLARE_METHOD(t_RefCount, decRef, METH_NOARGS),
          DECLARE_METHOD(t_RefCount, get, METH_NOARGS),
          DECLARE_METHOD(t_RefCount, getRefCount, METH_NOARGS),
          DECLARE_METHOD(t_RefCount, incRef, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RefCount, t_RefCount, ::java::lang::Object, RefCount, t_RefCount_init_, 0, 0, t_RefCount__fields_, 0, 0);
        PyObject *t_RefCount::wrap_Object(const RefCount& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RefCount::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RefCount *self = (t_RefCount *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_RefCount::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RefCount::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RefCount *self = (t_RefCount *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_RefCount::install(PyObject *module)
        {
          installType(&PY_TYPE(RefCount), module, "RefCount", 0);
        }

        void t_RefCount::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RefCount).tp_dict, "class_", make_descriptor(RefCount::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RefCount).tp_dict, "wrapfn_", make_descriptor(t_RefCount::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RefCount).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RefCount_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RefCount::initializeClass, 1)))
            return NULL;
          return t_RefCount::wrap_Object(RefCount(((t_RefCount *) arg)->object.this$));
        }
        static PyObject *t_RefCount_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RefCount::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RefCount_of_(t_RefCount *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_RefCount_init_(t_RefCount *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::Object a0((jobject) NULL);
          RefCount object((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            INT_CALL(object = RefCount(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RefCount_decRef(t_RefCount *self)
        {
          OBJ_CALL(self->object.decRef());
          Py_RETURN_NONE;
        }

        static PyObject *t_RefCount_get(t_RefCount *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.get());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_RefCount_getRefCount(t_RefCount *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getRefCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_RefCount_incRef(t_RefCount *self)
        {
          OBJ_CALL(self->object.incRef());
          Py_RETURN_NONE;
        }
        static PyObject *t_RefCount_get__parameters_(t_RefCount *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_RefCount_get__refCount(t_RefCount *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getRefCount());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/RangeQueryNode.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *RangeQueryNode::class$ = NULL;
              jmethodID *RangeQueryNode::mids$ = NULL;
              bool RangeQueryNode::live$ = false;

              jclass RangeQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/RangeQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getLowerBound_2906e52b] = env->getMethodID(cls, "getLowerBound", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;");
                  mids$[mid_getUpperBound_2906e52b] = env->getMethodID(cls, "getUpperBound", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;");
                  mids$[mid_isLowerInclusive_54c6a16a] = env->getMethodID(cls, "isLowerInclusive", "()Z");
                  mids$[mid_isUpperInclusive_54c6a16a] = env->getMethodID(cls, "isUpperInclusive", "()Z");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode RangeQueryNode::getLowerBound() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode(env->callObjectMethod(this$, mids$[mid_getLowerBound_2906e52b]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode RangeQueryNode::getUpperBound() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode(env->callObjectMethod(this$, mids$[mid_getUpperBound_2906e52b]));
              }

              jboolean RangeQueryNode::isLowerInclusive() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isLowerInclusive_54c6a16a]);
              }

              jboolean RangeQueryNode::isUpperInclusive() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isUpperInclusive_54c6a16a]);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_RangeQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RangeQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RangeQueryNode_of_(t_RangeQueryNode *self, PyObject *args);
              static PyObject *t_RangeQueryNode_getLowerBound(t_RangeQueryNode *self);
              static PyObject *t_RangeQueryNode_getUpperBound(t_RangeQueryNode *self);
              static PyObject *t_RangeQueryNode_isLowerInclusive(t_RangeQueryNode *self);
              static PyObject *t_RangeQueryNode_isUpperInclusive(t_RangeQueryNode *self);
              static PyObject *t_RangeQueryNode_get__lowerBound(t_RangeQueryNode *self, void *data);
              static PyObject *t_RangeQueryNode_get__lowerInclusive(t_RangeQueryNode *self, void *data);
              static PyObject *t_RangeQueryNode_get__upperBound(t_RangeQueryNode *self, void *data);
              static PyObject *t_RangeQueryNode_get__upperInclusive(t_RangeQueryNode *self, void *data);
              static PyObject *t_RangeQueryNode_get__parameters_(t_RangeQueryNode *self, void *data);
              static PyGetSetDef t_RangeQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_RangeQueryNode, lowerBound),
                DECLARE_GET_FIELD(t_RangeQueryNode, lowerInclusive),
                DECLARE_GET_FIELD(t_RangeQueryNode, upperBound),
                DECLARE_GET_FIELD(t_RangeQueryNode, upperInclusive),
                DECLARE_GET_FIELD(t_RangeQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_RangeQueryNode__methods_[] = {
                DECLARE_METHOD(t_RangeQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RangeQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RangeQueryNode, of_, METH_VARARGS),
                DECLARE_METHOD(t_RangeQueryNode, getLowerBound, METH_NOARGS),
                DECLARE_METHOD(t_RangeQueryNode, getUpperBound, METH_NOARGS),
                DECLARE_METHOD(t_RangeQueryNode, isLowerInclusive, METH_NOARGS),
                DECLARE_METHOD(t_RangeQueryNode, isUpperInclusive, METH_NOARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(RangeQueryNode, t_RangeQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldableNode, RangeQueryNode, abstract_init, 0, 0, t_RangeQueryNode__fields_, 0, 0);
              PyObject *t_RangeQueryNode::wrap_Object(const RangeQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_RangeQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_RangeQueryNode *self = (t_RangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_RangeQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_RangeQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_RangeQueryNode *self = (t_RangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_RangeQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(RangeQueryNode), module, "RangeQueryNode", 0);
              }

              void t_RangeQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(RangeQueryNode).tp_dict, "class_", make_descriptor(RangeQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(RangeQueryNode).tp_dict, "wrapfn_", make_descriptor(t_RangeQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(RangeQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_RangeQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, RangeQueryNode::initializeClass, 1)))
                  return NULL;
                return t_RangeQueryNode::wrap_Object(RangeQueryNode(((t_RangeQueryNode *) arg)->object.this$));
              }
              static PyObject *t_RangeQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, RangeQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_RangeQueryNode_of_(t_RangeQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_RangeQueryNode_getLowerBound(t_RangeQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getLowerBound());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(result);
              }

              static PyObject *t_RangeQueryNode_getUpperBound(t_RangeQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getUpperBound());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(result);
              }

              static PyObject *t_RangeQueryNode_isLowerInclusive(t_RangeQueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isLowerInclusive());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_RangeQueryNode_isUpperInclusive(t_RangeQueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isUpperInclusive());
                Py_RETURN_BOOL(result);
              }
              static PyObject *t_RangeQueryNode_get__parameters_(t_RangeQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }

              static PyObject *t_RangeQueryNode_get__lowerBound(t_RangeQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getLowerBound());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(value);
              }

              static PyObject *t_RangeQueryNode_get__lowerInclusive(t_RangeQueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isLowerInclusive());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_RangeQueryNode_get__upperBound(t_RangeQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getUpperBound());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(value);
              }

              static PyObject *t_RangeQueryNode_get__upperInclusive(t_RangeQueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isUpperInclusive());
                Py_RETURN_BOOL(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCacheImpl$SortedDocValuesImpl.h"
#include "org/apache/lucene/util/PagedBytes$Reader.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/packed/PackedInts$Reader.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/util/packed/MonotonicAppendingLongBuffer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCacheImpl$SortedDocValuesImpl::class$ = NULL;
        jmethodID *FieldCacheImpl$SortedDocValuesImpl::mids$ = NULL;
        bool FieldCacheImpl$SortedDocValuesImpl::live$ = false;

        jclass FieldCacheImpl$SortedDocValuesImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCacheImpl$SortedDocValuesImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0e116268] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/PagedBytes$Reader;Lorg/apache/lucene/util/packed/MonotonicAppendingLongBuffer;Lorg/apache/lucene/util/packed/PackedInts$Reader;I)V");
            mids$[mid_iterator_57832734] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCacheImpl$SortedDocValuesImpl::FieldCacheImpl$SortedDocValuesImpl(const ::org::apache::lucene::util::PagedBytes$Reader & a0, const ::org::apache::lucene::util::packed::MonotonicAppendingLongBuffer & a1, const ::org::apache::lucene::util::packed::PackedInts$Reader & a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0e116268, a0.this$, a1.this$, a2.this$, a3)) {}

        ::org::apache::lucene::index::SortedDocValues FieldCacheImpl$SortedDocValuesImpl::iterator() const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_iterator_57832734]));
        }

        jlong FieldCacheImpl$SortedDocValuesImpl::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCacheImpl$SortedDocValuesImpl_init_(t_FieldCacheImpl$SortedDocValuesImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_iterator(t_FieldCacheImpl$SortedDocValuesImpl *self);
        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_ramBytesUsed(t_FieldCacheImpl$SortedDocValuesImpl *self);

        static PyMethodDef t_FieldCacheImpl$SortedDocValuesImpl__methods_[] = {
          DECLARE_METHOD(t_FieldCacheImpl$SortedDocValuesImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheImpl$SortedDocValuesImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheImpl$SortedDocValuesImpl, iterator, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheImpl$SortedDocValuesImpl, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheImpl$SortedDocValuesImpl, t_FieldCacheImpl$SortedDocValuesImpl, ::java::lang::Object, FieldCacheImpl$SortedDocValuesImpl, t_FieldCacheImpl$SortedDocValuesImpl_init_, 0, 0, 0, 0, 0);

        void t_FieldCacheImpl$SortedDocValuesImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheImpl$SortedDocValuesImpl), module, "FieldCacheImpl$SortedDocValuesImpl", 0);
        }

        void t_FieldCacheImpl$SortedDocValuesImpl::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheImpl$SortedDocValuesImpl).tp_dict, "class_", make_descriptor(FieldCacheImpl$SortedDocValuesImpl::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheImpl$SortedDocValuesImpl).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheImpl$SortedDocValuesImpl::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheImpl$SortedDocValuesImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheImpl$SortedDocValuesImpl::initializeClass, 1)))
            return NULL;
          return t_FieldCacheImpl$SortedDocValuesImpl::wrap_Object(FieldCacheImpl$SortedDocValuesImpl(((t_FieldCacheImpl$SortedDocValuesImpl *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheImpl$SortedDocValuesImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCacheImpl$SortedDocValuesImpl_init_(t_FieldCacheImpl$SortedDocValuesImpl *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::PagedBytes$Reader a0((jobject) NULL);
          ::org::apache::lucene::util::packed::MonotonicAppendingLongBuffer a1((jobject) NULL);
          ::org::apache::lucene::util::packed::PackedInts$Reader a2((jobject) NULL);
          jint a3;
          FieldCacheImpl$SortedDocValuesImpl object((jobject) NULL);

          if (!parseArgs(args, "kkkI", ::org::apache::lucene::util::PagedBytes$Reader::initializeClass, ::org::apache::lucene::util::packed::MonotonicAppendingLongBuffer::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Reader::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = FieldCacheImpl$SortedDocValuesImpl(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_iterator(t_FieldCacheImpl$SortedDocValuesImpl *self)
        {
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
        }

        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_ramBytesUsed(t_FieldCacheImpl$SortedDocValuesImpl *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/commongrams/CommonGramsFilterFactory.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {

          ::java::lang::Class *CommonGramsFilterFactory::class$ = NULL;
          jmethodID *CommonGramsFilterFactory::mids$ = NULL;
          bool CommonGramsFilterFactory::live$ = false;

          jclass CommonGramsFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/commongrams/CommonGramsFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2969f76d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");
              mids$[mid_getCommonWords_d2d3505c] = env->getMethodID(cls, "getCommonWords", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_isIgnoreCase_54c6a16a] = env->getMethodID(cls, "isIgnoreCase", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CommonGramsFilterFactory::CommonGramsFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter CommonGramsFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_2969f76d], a0.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet CommonGramsFilterFactory::getCommonWords() const
          {
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callObjectMethod(this$, mids$[mid_getCommonWords_d2d3505c]));
          }

          void CommonGramsFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }

          jboolean CommonGramsFilterFactory::isIgnoreCase() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreCase_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {
          static PyObject *t_CommonGramsFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CommonGramsFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CommonGramsFilterFactory_init_(t_CommonGramsFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CommonGramsFilterFactory_create(t_CommonGramsFilterFactory *self, PyObject *args);
          static PyObject *t_CommonGramsFilterFactory_getCommonWords(t_CommonGramsFilterFactory *self);
          static PyObject *t_CommonGramsFilterFactory_inform(t_CommonGramsFilterFactory *self, PyObject *arg);
          static PyObject *t_CommonGramsFilterFactory_isIgnoreCase(t_CommonGramsFilterFactory *self);
          static PyObject *t_CommonGramsFilterFactory_get__commonWords(t_CommonGramsFilterFactory *self, void *data);
          static PyObject *t_CommonGramsFilterFactory_get__ignoreCase(t_CommonGramsFilterFactory *self, void *data);
          static PyGetSetDef t_CommonGramsFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_CommonGramsFilterFactory, commonWords),
            DECLARE_GET_FIELD(t_CommonGramsFilterFactory, ignoreCase),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CommonGramsFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CommonGramsFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_CommonGramsFilterFactory, getCommonWords, METH_NOARGS),
            DECLARE_METHOD(t_CommonGramsFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_CommonGramsFilterFactory, isIgnoreCase, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CommonGramsFilterFactory, t_CommonGramsFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, CommonGramsFilterFactory, t_CommonGramsFilterFactory_init_, 0, 0, t_CommonGramsFilterFactory__fields_, 0, 0);

          void t_CommonGramsFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CommonGramsFilterFactory), module, "CommonGramsFilterFactory", 0);
          }

          void t_CommonGramsFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CommonGramsFilterFactory).tp_dict, "class_", make_descriptor(CommonGramsFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CommonGramsFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CommonGramsFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CommonGramsFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CommonGramsFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CommonGramsFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CommonGramsFilterFactory::wrap_Object(CommonGramsFilterFactory(((t_CommonGramsFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CommonGramsFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CommonGramsFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CommonGramsFilterFactory_init_(t_CommonGramsFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CommonGramsFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CommonGramsFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CommonGramsFilterFactory_create(t_CommonGramsFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CommonGramsFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_CommonGramsFilterFactory_getCommonWords(t_CommonGramsFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = self->object.getCommonWords());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_CommonGramsFilterFactory_inform(t_CommonGramsFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_CommonGramsFilterFactory_isIgnoreCase(t_CommonGramsFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreCase());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_CommonGramsFilterFactory_get__commonWords(t_CommonGramsFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getCommonWords());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }

          static PyObject *t_CommonGramsFilterFactory_get__ignoreCase(t_CommonGramsFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreCase());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/IntDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *IntDocValuesField::class$ = NULL;
        jmethodID *IntDocValuesField::mids$ = NULL;
        bool IntDocValuesField::live$ = false;

        jclass IntDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/IntDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
            mids$[mid_setIntValue_39c7bd3c] = env->getMethodID(cls, "setIntValue", "(I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntDocValuesField::IntDocValuesField(const ::java::lang::String & a0, jint a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

        void IntDocValuesField::setIntValue(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setIntValue_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_IntDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntDocValuesField_init_(t_IntDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntDocValuesField_setIntValue(t_IntDocValuesField *self, PyObject *args);
        static int t_IntDocValuesField_set__intValue(t_IntDocValuesField *self, PyObject *arg, void *data);
        static PyGetSetDef t_IntDocValuesField__fields_[] = {
          DECLARE_SET_FIELD(t_IntDocValuesField, intValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IntDocValuesField__methods_[] = {
          DECLARE_METHOD(t_IntDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntDocValuesField, setIntValue, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntDocValuesField, t_IntDocValuesField, ::org::apache::lucene::document::NumericDocValuesField, IntDocValuesField, t_IntDocValuesField_init_, 0, 0, t_IntDocValuesField__fields_, 0, 0);

        void t_IntDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(IntDocValuesField), module, "IntDocValuesField", 0);
        }

        void t_IntDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntDocValuesField).tp_dict, "class_", make_descriptor(IntDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_IntDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntDocValuesField::initializeClass, 1)))
            return NULL;
          return t_IntDocValuesField::wrap_Object(IntDocValuesField(((t_IntDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_IntDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntDocValuesField_init_(t_IntDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          IntDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            INT_CALL(object = IntDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntDocValuesField_setIntValue(t_IntDocValuesField *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setIntValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(IntDocValuesField), (PyObject *) self, "setIntValue", args, 2);
        }

        static int t_IntDocValuesField_set__intValue(t_IntDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setIntValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "intValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Rescorer.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Rescorer::class$ = NULL;
        jmethodID *Rescorer::mids$ = NULL;
        bool Rescorer::live$ = false;

        jclass Rescorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Rescorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_explain_2b38e623] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Explanation;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_rescore_bd3343d7] = env->getMethodID(cls, "rescore", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;I)Lorg/apache/lucene/search/TopDocs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Rescorer::Rescorer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::Explanation Rescorer::explain(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Explanation & a1, jint a2) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_2b38e623], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::TopDocs Rescorer::rescore(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::TopDocs & a1, jint a2) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_rescore_bd3343d7], a0.this$, a1.this$, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Rescorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Rescorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Rescorer_init_(t_Rescorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Rescorer_explain(t_Rescorer *self, PyObject *args);
        static PyObject *t_Rescorer_rescore(t_Rescorer *self, PyObject *args);

        static PyMethodDef t_Rescorer__methods_[] = {
          DECLARE_METHOD(t_Rescorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Rescorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Rescorer, explain, METH_VARARGS),
          DECLARE_METHOD(t_Rescorer, rescore, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Rescorer, t_Rescorer, ::java::lang::Object, Rescorer, t_Rescorer_init_, 0, 0, 0, 0, 0);

        void t_Rescorer::install(PyObject *module)
        {
          installType(&PY_TYPE(Rescorer), module, "Rescorer", 0);
        }

        void t_Rescorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Rescorer).tp_dict, "class_", make_descriptor(Rescorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Rescorer).tp_dict, "wrapfn_", make_descriptor(t_Rescorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Rescorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Rescorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Rescorer::initializeClass, 1)))
            return NULL;
          return t_Rescorer::wrap_Object(Rescorer(((t_Rescorer *) arg)->object.this$));
        }
        static PyObject *t_Rescorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Rescorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Rescorer_init_(t_Rescorer *self, PyObject *args, PyObject *kwds)
        {
          Rescorer object((jobject) NULL);

          INT_CALL(object = Rescorer());
          self->object = object;

          return 0;
        }

        static PyObject *t_Rescorer_explain(t_Rescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Explanation a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.explain(a0, a1, a2));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "explain", args);
          return NULL;
        }

        static PyObject *t_Rescorer_rescore(t_Rescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::TopDocs a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::TopDocs result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.rescore(a0, a1, a2));
            return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rescore", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/NRTCachingDirectory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/Lock.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *NRTCachingDirectory::class$ = NULL;
        jmethodID *NRTCachingDirectory::mids$ = NULL;
        bool NRTCachingDirectory::live$ = false;

        jclass NRTCachingDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/NRTCachingDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a6a83a1c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;DD)V");
            mids$[mid_cacheRamBytesUsed_54c6a17a] = env->getMethodID(cls, "cacheRamBytesUsed", "()J");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getDelegate_1f3934bb] = env->getMethodID(cls, "getDelegate", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getLockFactory_e4e9c36d] = env->getMethodID(cls, "getLockFactory", "()Lorg/apache/lucene/store/LockFactory;");
            mids$[mid_getLockID_14c7b5c5] = env->getMethodID(cls, "getLockID", "()Ljava/lang/String;");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_listCachedFiles_2e6d5245] = env->getMethodID(cls, "listCachedFiles", "()[Ljava/lang/String;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_setLockFactory_9892eb8c] = env->getMethodID(cls, "setLockFactory", "(Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_doCacheWrite_501c6f10] = env->getMethodID(cls, "doCacheWrite", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NRTCachingDirectory::NRTCachingDirectory(const ::org::apache::lucene::store::Directory & a0, jdouble a1, jdouble a2) : ::org::apache::lucene::store::Directory(env->newObject(initializeClass, &mids$, mid_init$_a6a83a1c, a0.this$, a1, a2)) {}

        jlong NRTCachingDirectory::cacheRamBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_cacheRamBytesUsed_54c6a17a]);
        }

        void NRTCachingDirectory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        void NRTCachingDirectory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::store::IndexOutput NRTCachingDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void NRTCachingDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        jboolean NRTCachingDirectory::fileExists(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fileExists_5fdc3f44], a0.this$);
        }

        jlong NRTCachingDirectory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_5fdc3f54], a0.this$);
        }

        ::org::apache::lucene::store::Directory NRTCachingDirectory::getDelegate() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDelegate_1f3934bb]));
        }

        ::org::apache::lucene::store::LockFactory NRTCachingDirectory::getLockFactory() const
        {
          return ::org::apache::lucene::store::LockFactory(env->callObjectMethod(this$, mids$[mid_getLockFactory_e4e9c36d]));
        }

        ::java::lang::String NRTCachingDirectory::getLockID() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLockID_14c7b5c5]));
        }

        JArray< ::java::lang::String > NRTCachingDirectory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_2e6d5245]));
        }

        JArray< ::java::lang::String > NRTCachingDirectory::listCachedFiles() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listCachedFiles_2e6d5245]));
        }

        ::org::apache::lucene::store::Lock NRTCachingDirectory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }

        ::org::apache::lucene::store::IndexInput NRTCachingDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }

        void NRTCachingDirectory::setLockFactory(const ::org::apache::lucene::store::LockFactory & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLockFactory_9892eb8c], a0.this$);
        }

        void NRTCachingDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }

        ::java::lang::String NRTCachingDirectory::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_NRTCachingDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NRTCachingDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NRTCachingDirectory_init_(t_NRTCachingDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NRTCachingDirectory_cacheRamBytesUsed(t_NRTCachingDirectory *self);
        static PyObject *t_NRTCachingDirectory_clearLock(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_close(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_createOutput(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_deleteFile(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_fileExists(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_fileLength(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_getDelegate(t_NRTCachingDirectory *self);
        static PyObject *t_NRTCachingDirectory_getLockFactory(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_getLockID(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_listAll(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_listCachedFiles(t_NRTCachingDirectory *self);
        static PyObject *t_NRTCachingDirectory_makeLock(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_openInput(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_setLockFactory(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_sync(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_toString(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_get__delegate(t_NRTCachingDirectory *self, void *data);
        static PyObject *t_NRTCachingDirectory_get__lockFactory(t_NRTCachingDirectory *self, void *data);
        static int t_NRTCachingDirectory_set__lockFactory(t_NRTCachingDirectory *self, PyObject *arg, void *data);
        static PyObject *t_NRTCachingDirectory_get__lockID(t_NRTCachingDirectory *self, void *data);
        static PyGetSetDef t_NRTCachingDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_NRTCachingDirectory, delegate),
          DECLARE_GETSET_FIELD(t_NRTCachingDirectory, lockFactory),
          DECLARE_GET_FIELD(t_NRTCachingDirectory, lockID),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NRTCachingDirectory__methods_[] = {
          DECLARE_METHOD(t_NRTCachingDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NRTCachingDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NRTCachingDirectory, cacheRamBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, close, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, fileExists, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, fileLength, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, getDelegate, METH_NOARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, getLockFactory, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, getLockID, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, listAll, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, listCachedFiles, METH_NOARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, makeLock, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, setLockFactory, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, sync, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NRTCachingDirectory, t_NRTCachingDirectory, ::org::apache::lucene::store::Directory, NRTCachingDirectory, t_NRTCachingDirectory_init_, 0, 0, t_NRTCachingDirectory__fields_, 0, 0);

        void t_NRTCachingDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(NRTCachingDirectory), module, "NRTCachingDirectory", 0);
        }

        void t_NRTCachingDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NRTCachingDirectory).tp_dict, "class_", make_descriptor(NRTCachingDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NRTCachingDirectory).tp_dict, "wrapfn_", make_descriptor(t_NRTCachingDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NRTCachingDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NRTCachingDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NRTCachingDirectory::initializeClass, 1)))
            return NULL;
          return t_NRTCachingDirectory::wrap_Object(NRTCachingDirectory(((t_NRTCachingDirectory *) arg)->object.this$));
        }
        static PyObject *t_NRTCachingDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NRTCachingDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NRTCachingDirectory_init_(t_NRTCachingDirectory *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          jdouble a1;
          jdouble a2;
          NRTCachingDirectory object((jobject) NULL);

          if (!parseArgs(args, "kDD", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = NRTCachingDirectory(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NRTCachingDirectory_cacheRamBytesUsed(t_NRTCachingDirectory *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.cacheRamBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_NRTCachingDirectory_clearLock(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_close(t_NRTCachingDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_createOutput(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_deleteFile(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_fileExists(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileExists(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "fileExists", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_fileLength(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "fileLength", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_getDelegate(t_NRTCachingDirectory *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getDelegate());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_NRTCachingDirectory_getLockFactory(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::org::apache::lucene::store::LockFactory result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLockFactory());
            return ::org::apache::lucene::store::t_LockFactory::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "getLockFactory", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_getLockID(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLockID());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "getLockID", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_listAll(t_NRTCachingDirectory *self, PyObject *args)
        {
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.listAll());
            return JArray<jstring>(result.this$).wrap();
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "listAll", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_listCachedFiles(t_NRTCachingDirectory *self)
        {
          JArray< ::java::lang::String > result((jobject) NULL);
          OBJ_CALL(result = self->object.listCachedFiles());
          return JArray<jstring>(result.this$).wrap();
        }

        static PyObject *t_NRTCachingDirectory_makeLock(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "makeLock", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_openInput(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_setLockFactory(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::org::apache::lucene::store::LockFactory a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setLockFactory(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "setLockFactory", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_sync(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_toString(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_get__delegate(t_NRTCachingDirectory *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getDelegate());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_NRTCachingDirectory_get__lockFactory(t_NRTCachingDirectory *self, void *data)
        {
          ::org::apache::lucene::store::LockFactory value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockFactory());
          return ::org::apache::lucene::store::t_LockFactory::wrap_Object(value);
        }
        static int t_NRTCachingDirectory_set__lockFactory(t_NRTCachingDirectory *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::store::LockFactory value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &value))
            {
              INT_CALL(self->object.setLockFactory(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "lockFactory", arg);
          return -1;
        }

        static PyObject *t_NRTCachingDirectory_get__lockID(t_NRTCachingDirectory *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockID());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hunspell/Dictionary.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/io/InputStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {

          ::java::lang::Class *Dictionary::class$ = NULL;
          jmethodID *Dictionary::mids$ = NULL;
          bool Dictionary::live$ = false;

          jclass Dictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hunspell/Dictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_adde7c2e] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;Ljava/io/InputStream;)V");
              mids$[mid_init$_1134ad3e] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;Ljava/util/List;Z)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Dictionary::Dictionary(const ::java::io::InputStream & a0, const ::java::io::InputStream & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_adde7c2e, a0.this$, a1.this$)) {}

          Dictionary::Dictionary(const ::java::io::InputStream & a0, const ::java::util::List & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1134ad3e, a0.this$, a1.this$, a2)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {
          static PyObject *t_Dictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Dictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Dictionary_init_(t_Dictionary *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_Dictionary__methods_[] = {
            DECLARE_METHOD(t_Dictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Dictionary, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Dictionary, t_Dictionary, ::java::lang::Object, Dictionary, t_Dictionary_init_, 0, 0, 0, 0, 0);

          void t_Dictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(Dictionary), module, "Dictionary", 0);
          }

          void t_Dictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Dictionary).tp_dict, "class_", make_descriptor(Dictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Dictionary).tp_dict, "wrapfn_", make_descriptor(t_Dictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Dictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Dictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Dictionary::initializeClass, 1)))
              return NULL;
            return t_Dictionary::wrap_Object(Dictionary(((t_Dictionary *) arg)->object.this$));
          }
          static PyObject *t_Dictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Dictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Dictionary_init_(t_Dictionary *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::io::InputStream a0((jobject) NULL);
                ::java::io::InputStream a1((jobject) NULL);
                Dictionary object((jobject) NULL);

                if (!parseArgs(args, "kk", ::java::io::InputStream::initializeClass, ::java::io::InputStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = Dictionary(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::io::InputStream a0((jobject) NULL);
                ::java::util::List a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                Dictionary object((jobject) NULL);

                if (!parseArgs(args, "kKZ", ::java::io::InputStream::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_, &a2))
                {
                  INT_CALL(object = Dictionary(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKAnalyzer::class$ = NULL;
          jmethodID *CJKAnalyzer::mids$ = NULL;
          bool CJKAnalyzer::live$ = false;
          ::java::lang::String *CJKAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass CJKAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKAnalyzer::CJKAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          CJKAnalyzer::CJKAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet CJKAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKAnalyzer_init_(t_CJKAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_CJKAnalyzer_get__defaultStopSet(t_CJKAnalyzer *self, void *data);
          static PyGetSetDef t_CJKAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_CJKAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CJKAnalyzer__methods_[] = {
            DECLARE_METHOD(t_CJKAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CJKAnalyzer, t_CJKAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, CJKAnalyzer, t_CJKAnalyzer_init_, 0, 0, t_CJKAnalyzer__fields_, 0, 0);

          void t_CJKAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKAnalyzer), module, "CJKAnalyzer", 0);
          }

          void t_CJKAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CJKAnalyzer).tp_dict, "class_", make_descriptor(CJKAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CJKAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_CJKAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CJKAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CJKAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(CJKAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*CJKAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_CJKAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKAnalyzer::initializeClass, 1)))
              return NULL;
            return t_CJKAnalyzer::wrap_Object(CJKAnalyzer(((t_CJKAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_CJKAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKAnalyzer_init_(t_CJKAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                CJKAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = CJKAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                CJKAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CJKAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::cjk::CJKAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_CJKAnalyzer_get__defaultStopSet(t_CJKAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/config/AbstractQueryConfig.h"
#include "org/apache/lucene/queryparser/flexible/core/config/ConfigurationKey.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {

              ::java::lang::Class *AbstractQueryConfig::class$ = NULL;
              jmethodID *AbstractQueryConfig::mids$ = NULL;
              bool AbstractQueryConfig::live$ = false;

              jclass AbstractQueryConfig::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/config/AbstractQueryConfig");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_get_96b6da60] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;)Ljava/lang/Object;");
                  mids$[mid_has_d605f87f] = env->getMethodID(cls, "has", "(Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;)Z");
                  mids$[mid_set_55cc58cf] = env->getMethodID(cls, "set", "(Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;Ljava/lang/Object;)V");
                  mids$[mid_unset_d605f87f] = env->getMethodID(cls, "unset", "(Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;)Z");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::Object AbstractQueryConfig::get(const ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey & a0) const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_96b6da60], a0.this$));
              }

              jboolean AbstractQueryConfig::has(const ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_has_d605f87f], a0.this$);
              }

              void AbstractQueryConfig::set(const ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey & a0, const ::java::lang::Object & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_set_55cc58cf], a0.this$, a1.this$);
              }

              jboolean AbstractQueryConfig::unset(const ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_unset_d605f87f], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {
              static PyObject *t_AbstractQueryConfig_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AbstractQueryConfig_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AbstractQueryConfig_get(t_AbstractQueryConfig *self, PyObject *arg);
              static PyObject *t_AbstractQueryConfig_has(t_AbstractQueryConfig *self, PyObject *arg);
              static PyObject *t_AbstractQueryConfig_set(t_AbstractQueryConfig *self, PyObject *args);
              static PyObject *t_AbstractQueryConfig_unset(t_AbstractQueryConfig *self, PyObject *arg);

              static PyMethodDef t_AbstractQueryConfig__methods_[] = {
                DECLARE_METHOD(t_AbstractQueryConfig, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AbstractQueryConfig, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AbstractQueryConfig, get, METH_O),
                DECLARE_METHOD(t_AbstractQueryConfig, has, METH_O),
                DECLARE_METHOD(t_AbstractQueryConfig, set, METH_VARARGS),
                DECLARE_METHOD(t_AbstractQueryConfig, unset, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(AbstractQueryConfig, t_AbstractQueryConfig, ::java::lang::Object, AbstractQueryConfig, abstract_init, 0, 0, 0, 0, 0);

              void t_AbstractQueryConfig::install(PyObject *module)
              {
                installType(&PY_TYPE(AbstractQueryConfig), module, "AbstractQueryConfig", 0);
              }

              void t_AbstractQueryConfig::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(AbstractQueryConfig).tp_dict, "class_", make_descriptor(AbstractQueryConfig::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(AbstractQueryConfig).tp_dict, "wrapfn_", make_descriptor(t_AbstractQueryConfig::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(AbstractQueryConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AbstractQueryConfig_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AbstractQueryConfig::initializeClass, 1)))
                  return NULL;
                return t_AbstractQueryConfig::wrap_Object(AbstractQueryConfig(((t_AbstractQueryConfig *) arg)->object.this$));
              }
              static PyObject *t_AbstractQueryConfig_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AbstractQueryConfig::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_AbstractQueryConfig_get(t_AbstractQueryConfig *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::Object result((jobject) NULL);

                if (!parseArg(arg, "K", ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::parameters_))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "get", arg);
                return NULL;
              }

              static PyObject *t_AbstractQueryConfig_has(t_AbstractQueryConfig *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean result;

                if (!parseArg(arg, "K", ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::parameters_))
                {
                  OBJ_CALL(result = self->object.has(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "has", arg);
                return NULL;
              }

              static PyObject *t_AbstractQueryConfig_set(t_AbstractQueryConfig *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::Object a1((jobject) NULL);

                if (!parseArgs(args, "Ko", ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::parameters_, &a1))
                {
                  OBJ_CALL(self->object.set(a0, a1));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "set", args);
                return NULL;
              }

              static PyObject *t_AbstractQueryConfig_unset(t_AbstractQueryConfig *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean result;

                if (!parseArg(arg, "K", ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::parameters_))
                {
                  OBJ_CALL(result = self->object.unset(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "unset", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$DocComparator.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Integer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$DocComparator::class$ = NULL;
        jmethodID *FieldComparator$DocComparator::mids$ = NULL;
        bool FieldComparator$DocComparator::live$ = false;

        jclass FieldComparator$DocComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$DocComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_af7b73a4] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Integer;)V");
            mids$[mid_value_7266dabb] = env->getMethodID(cls, "value", "(I)Ljava/lang/Integer;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint FieldComparator$DocComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$DocComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$DocComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        void FieldComparator$DocComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$DocComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$DocComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$DocComparator::setTopValue(const ::java::lang::Integer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_af7b73a4], a0.this$);
        }

        ::java::lang::Integer FieldComparator$DocComparator::value(jint a0) const
        {
          return ::java::lang::Integer(env->callObjectMethod(this$, mids$[mid_value_7266dabb], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$DocComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$DocComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$DocComparator_of_(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_compare(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_compareBottom(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_compareTop(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_copy(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_setBottom(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_setNextReader(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_setTopValue(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_value(t_FieldComparator$DocComparator *self, PyObject *args);
        static int t_FieldComparator$DocComparator_set__bottom(t_FieldComparator$DocComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$DocComparator_set__nextReader(t_FieldComparator$DocComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$DocComparator_set__topValue(t_FieldComparator$DocComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$DocComparator_get__parameters_(t_FieldComparator$DocComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$DocComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$DocComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$DocComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$DocComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$DocComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$DocComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$DocComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$DocComparator, t_FieldComparator$DocComparator, ::org::apache::lucene::search::FieldComparator, FieldComparator$DocComparator, abstract_init, 0, 0, t_FieldComparator$DocComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$DocComparator::wrap_Object(const FieldComparator$DocComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$DocComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$DocComparator *self = (t_FieldComparator$DocComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$DocComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$DocComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$DocComparator *self = (t_FieldComparator$DocComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$DocComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$DocComparator), module, "FieldComparator$DocComparator", 0);
        }

        void t_FieldComparator$DocComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$DocComparator).tp_dict, "class_", make_descriptor(FieldComparator$DocComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$DocComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$DocComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$DocComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$DocComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$DocComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$DocComparator::wrap_Object(FieldComparator$DocComparator(((t_FieldComparator$DocComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$DocComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$DocComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$DocComparator_of_(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldComparator$DocComparator_compare(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$DocComparator_compareBottom(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$DocComparator_compareTop(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$DocComparator_copy(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$DocComparator_setBottom(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$DocComparator_setNextReader(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$DocComparator_setTopValue(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          ::java::lang::Integer a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Integer), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$DocComparator_value(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Integer result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Integer::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$DocComparator_get__parameters_(t_FieldComparator$DocComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$DocComparator_set__bottom(t_FieldComparator$DocComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$DocComparator_set__nextReader(t_FieldComparator$DocComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$DocComparator_set__topValue(t_FieldComparator$DocComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Integer value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Integer), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/it/ItalianLightStemFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {

          ::java::lang::Class *ItalianLightStemFilterFactory::class$ = NULL;
          jmethodID *ItalianLightStemFilterFactory::mids$ = NULL;
          bool ItalianLightStemFilterFactory::live$ = false;

          jclass ItalianLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/it/ItalianLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ItalianLightStemFilterFactory::ItalianLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream ItalianLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {
          static PyObject *t_ItalianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ItalianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ItalianLightStemFilterFactory_init_(t_ItalianLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ItalianLightStemFilterFactory_create(t_ItalianLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_ItalianLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ItalianLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ItalianLightStemFilterFactory, t_ItalianLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ItalianLightStemFilterFactory, t_ItalianLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ItalianLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ItalianLightStemFilterFactory), module, "ItalianLightStemFilterFactory", 0);
          }

          void t_ItalianLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ItalianLightStemFilterFactory).tp_dict, "class_", make_descriptor(ItalianLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ItalianLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ItalianLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ItalianLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ItalianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ItalianLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ItalianLightStemFilterFactory::wrap_Object(ItalianLightStemFilterFactory(((t_ItalianLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ItalianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ItalianLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ItalianLightStemFilterFactory_init_(t_ItalianLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ItalianLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ItalianLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ItalianLightStemFilterFactory_create(t_ItalianLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ItalianLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/position/PositionFilterFactory.h"
#include "org/apache/lucene/analysis/position/PositionFilter.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace position {

          ::java::lang::Class *PositionFilterFactory::class$ = NULL;
          jmethodID *PositionFilterFactory::mids$ = NULL;
          bool PositionFilterFactory::live$ = false;

          jclass PositionFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/position/PositionFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_17e0c763] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/position/PositionFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PositionFilterFactory::PositionFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::position::PositionFilter PositionFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::position::PositionFilter(env->callObjectMethod(this$, mids$[mid_create_17e0c763], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace position {
          static PyObject *t_PositionFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PositionFilterFactory_init_(t_PositionFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PositionFilterFactory_create(t_PositionFilterFactory *self, PyObject *args);

          static PyMethodDef t_PositionFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PositionFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositionFilterFactory, t_PositionFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PositionFilterFactory, t_PositionFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PositionFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionFilterFactory), module, "PositionFilterFactory", 0);
          }

          void t_PositionFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositionFilterFactory).tp_dict, "class_", make_descriptor(PositionFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositionFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PositionFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositionFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PositionFilterFactory::wrap_Object(PositionFilterFactory(((t_PositionFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PositionFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PositionFilterFactory_init_(t_PositionFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PositionFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PositionFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PositionFilterFactory_create(t_PositionFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::position::PositionFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::position::t_PositionFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PositionFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fi/FinnishLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {

          ::java::lang::Class *FinnishLightStemmer::class$ = NULL;
          jmethodID *FinnishLightStemmer::mids$ = NULL;
          bool FinnishLightStemmer::live$ = false;

          jclass FinnishLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fi/FinnishLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FinnishLightStemmer::FinnishLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint FinnishLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {
          static PyObject *t_FinnishLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FinnishLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FinnishLightStemmer_init_(t_FinnishLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FinnishLightStemmer_stem(t_FinnishLightStemmer *self, PyObject *args);

          static PyMethodDef t_FinnishLightStemmer__methods_[] = {
            DECLARE_METHOD(t_FinnishLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FinnishLightStemmer, t_FinnishLightStemmer, ::java::lang::Object, FinnishLightStemmer, t_FinnishLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_FinnishLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(FinnishLightStemmer), module, "FinnishLightStemmer", 0);
          }

          void t_FinnishLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FinnishLightStemmer).tp_dict, "class_", make_descriptor(FinnishLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FinnishLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_FinnishLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FinnishLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FinnishLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FinnishLightStemmer::initializeClass, 1)))
              return NULL;
            return t_FinnishLightStemmer::wrap_Object(FinnishLightStemmer(((t_FinnishLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_FinnishLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FinnishLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FinnishLightStemmer_init_(t_FinnishLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            FinnishLightStemmer object((jobject) NULL);

            INT_CALL(object = FinnishLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_FinnishLightStemmer_stem(t_FinnishLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocTermOrdsRangeFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocTermOrdsRangeFilter::class$ = NULL;
        jmethodID *DocTermOrdsRangeFilter::mids$ = NULL;
        bool DocTermOrdsRangeFilter::live$ = false;

        jclass DocTermOrdsRangeFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocTermOrdsRangeFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_getLowerVal_4ae19461] = env->getMethodID(cls, "getLowerVal", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getUpperVal_4ae19461] = env->getMethodID(cls, "getUpperVal", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_includesLower_54c6a16a] = env->getMethodID(cls, "includesLower", "()Z");
            mids$[mid_includesUpper_54c6a16a] = env->getMethodID(cls, "includesUpper", "()Z");
            mids$[mid_newBytesRefRange_a12b5d0e] = env->getStaticMethodID(cls, "newBytesRefRange", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;ZZ)Lorg/apache/lucene/search/DocTermOrdsRangeFilter;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean DocTermOrdsRangeFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet DocTermOrdsRangeFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::java::lang::String DocTermOrdsRangeFilter::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
        }

        ::org::apache::lucene::util::BytesRef DocTermOrdsRangeFilter::getLowerVal() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getLowerVal_4ae19461]));
        }

        ::org::apache::lucene::util::BytesRef DocTermOrdsRangeFilter::getUpperVal() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getUpperVal_4ae19461]));
        }

        jint DocTermOrdsRangeFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean DocTermOrdsRangeFilter::includesLower() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesLower_54c6a16a]);
        }

        jboolean DocTermOrdsRangeFilter::includesUpper() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesUpper_54c6a16a]);
        }

        DocTermOrdsRangeFilter DocTermOrdsRangeFilter::newBytesRefRange(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::util::BytesRef & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return DocTermOrdsRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newBytesRefRange_a12b5d0e], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        ::java::lang::String DocTermOrdsRangeFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocTermOrdsRangeFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocTermOrdsRangeFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocTermOrdsRangeFilter_equals(t_DocTermOrdsRangeFilter *self, PyObject *args);
        static PyObject *t_DocTermOrdsRangeFilter_getDocIdSet(t_DocTermOrdsRangeFilter *self, PyObject *args);
        static PyObject *t_DocTermOrdsRangeFilter_getField(t_DocTermOrdsRangeFilter *self);
        static PyObject *t_DocTermOrdsRangeFilter_getLowerVal(t_DocTermOrdsRangeFilter *self);
        static PyObject *t_DocTermOrdsRangeFilter_getUpperVal(t_DocTermOrdsRangeFilter *self);
        static PyObject *t_DocTermOrdsRangeFilter_hashCode(t_DocTermOrdsRangeFilter *self, PyObject *args);
        static PyObject *t_DocTermOrdsRangeFilter_includesLower(t_DocTermOrdsRangeFilter *self);
        static PyObject *t_DocTermOrdsRangeFilter_includesUpper(t_DocTermOrdsRangeFilter *self);
        static PyObject *t_DocTermOrdsRangeFilter_newBytesRefRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocTermOrdsRangeFilter_toString(t_DocTermOrdsRangeFilter *self, PyObject *args);
        static PyObject *t_DocTermOrdsRangeFilter_get__field(t_DocTermOrdsRangeFilter *self, void *data);
        static PyObject *t_DocTermOrdsRangeFilter_get__lowerVal(t_DocTermOrdsRangeFilter *self, void *data);
        static PyObject *t_DocTermOrdsRangeFilter_get__upperVal(t_DocTermOrdsRangeFilter *self, void *data);
        static PyGetSetDef t_DocTermOrdsRangeFilter__fields_[] = {
          DECLARE_GET_FIELD(t_DocTermOrdsRangeFilter, field),
          DECLARE_GET_FIELD(t_DocTermOrdsRangeFilter, lowerVal),
          DECLARE_GET_FIELD(t_DocTermOrdsRangeFilter, upperVal),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocTermOrdsRangeFilter__methods_[] = {
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, getField, METH_NOARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, getLowerVal, METH_NOARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, getUpperVal, METH_NOARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, includesLower, METH_NOARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, includesUpper, METH_NOARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, newBytesRefRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocTermOrdsRangeFilter, t_DocTermOrdsRangeFilter, ::org::apache::lucene::search::Filter, DocTermOrdsRangeFilter, abstract_init, 0, 0, t_DocTermOrdsRangeFilter__fields_, 0, 0);

        void t_DocTermOrdsRangeFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(DocTermOrdsRangeFilter), module, "DocTermOrdsRangeFilter", 0);
        }

        void t_DocTermOrdsRangeFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocTermOrdsRangeFilter).tp_dict, "class_", make_descriptor(DocTermOrdsRangeFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocTermOrdsRangeFilter).tp_dict, "wrapfn_", make_descriptor(t_DocTermOrdsRangeFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocTermOrdsRangeFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocTermOrdsRangeFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocTermOrdsRangeFilter::initializeClass, 1)))
            return NULL;
          return t_DocTermOrdsRangeFilter::wrap_Object(DocTermOrdsRangeFilter(((t_DocTermOrdsRangeFilter *) arg)->object.this$));
        }
        static PyObject *t_DocTermOrdsRangeFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocTermOrdsRangeFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocTermOrdsRangeFilter_equals(t_DocTermOrdsRangeFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DocTermOrdsRangeFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DocTermOrdsRangeFilter_getDocIdSet(t_DocTermOrdsRangeFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DocTermOrdsRangeFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_DocTermOrdsRangeFilter_getField(t_DocTermOrdsRangeFilter *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_DocTermOrdsRangeFilter_getLowerVal(t_DocTermOrdsRangeFilter *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getLowerVal());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_DocTermOrdsRangeFilter_getUpperVal(t_DocTermOrdsRangeFilter *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getUpperVal());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_DocTermOrdsRangeFilter_hashCode(t_DocTermOrdsRangeFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(DocTermOrdsRangeFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DocTermOrdsRangeFilter_includesLower(t_DocTermOrdsRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesLower());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_DocTermOrdsRangeFilter_includesUpper(t_DocTermOrdsRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesUpper());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_DocTermOrdsRangeFilter_newBytesRefRange(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          DocTermOrdsRangeFilter result((jobject) NULL);

          if (!parseArgs(args, "skkZZ", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::DocTermOrdsRangeFilter::newBytesRefRange(a0, a1, a2, a3, a4));
            return t_DocTermOrdsRangeFilter::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newBytesRefRange", args);
          return NULL;
        }

        static PyObject *t_DocTermOrdsRangeFilter_toString(t_DocTermOrdsRangeFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(DocTermOrdsRangeFilter), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_DocTermOrdsRangeFilter_get__field(t_DocTermOrdsRangeFilter *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }

        static PyObject *t_DocTermOrdsRangeFilter_get__lowerVal(t_DocTermOrdsRangeFilter *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getLowerVal());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_DocTermOrdsRangeFilter_get__upperVal(t_DocTermOrdsRangeFilter *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getUpperVal());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/CapitalizationFilter.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *CapitalizationFilter::class$ = NULL;
          jmethodID *CapitalizationFilter::mids$ = NULL;
          bool CapitalizationFilter::live$ = false;
          jint CapitalizationFilter::DEFAULT_MAX_TOKEN_LENGTH = (jint) 0;
          jint CapitalizationFilter::DEFAULT_MAX_WORD_COUNT = (jint) 0;

          jclass CapitalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/CapitalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_e833f6a2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;ZLorg/apache/lucene/analysis/util/CharArraySet;ZLjava/util/Collection;III)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_TOKEN_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_TOKEN_LENGTH");
              DEFAULT_MAX_WORD_COUNT = env->getStaticIntField(cls, "DEFAULT_MAX_WORD_COUNT");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CapitalizationFilter::CapitalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          CapitalizationFilter::CapitalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jboolean a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2, jboolean a3, const ::java::util::Collection & a4, jint a5, jint a6, jint a7) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_e833f6a2, a0.this$, a1, a2.this$, a3, a4.this$, a5, a6, a7)) {}

          jboolean CapitalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_CapitalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CapitalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CapitalizationFilter_init_(t_CapitalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CapitalizationFilter_incrementToken(t_CapitalizationFilter *self, PyObject *args);

          static PyMethodDef t_CapitalizationFilter__methods_[] = {
            DECLARE_METHOD(t_CapitalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CapitalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CapitalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CapitalizationFilter, t_CapitalizationFilter, ::org::apache::lucene::analysis::TokenFilter, CapitalizationFilter, t_CapitalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_CapitalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CapitalizationFilter), module, "CapitalizationFilter", 0);
          }

          void t_CapitalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CapitalizationFilter).tp_dict, "class_", make_descriptor(CapitalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_CapitalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CapitalizationFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(CapitalizationFilter).tp_dict, "DEFAULT_MAX_TOKEN_LENGTH", make_descriptor(CapitalizationFilter::DEFAULT_MAX_TOKEN_LENGTH));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilter).tp_dict, "DEFAULT_MAX_WORD_COUNT", make_descriptor(CapitalizationFilter::DEFAULT_MAX_WORD_COUNT));
          }

          static PyObject *t_CapitalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CapitalizationFilter::initializeClass, 1)))
              return NULL;
            return t_CapitalizationFilter::wrap_Object(CapitalizationFilter(((t_CapitalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_CapitalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CapitalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CapitalizationFilter_init_(t_CapitalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                CapitalizationFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = CapitalizationFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 8:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jboolean a1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                jboolean a3;
                ::java::util::Collection a4((jobject) NULL);
                PyTypeObject **p4;
                jint a5;
                jint a6;
                jint a7;
                CapitalizationFilter object((jobject) NULL);

                if (!parseArgs(args, "kZKZKIII", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a3, &a4, &p4, ::java::util::t_Collection::parameters_, &a5, &a6, &a7))
                {
                  INT_CALL(object = CapitalizationFilter(a0, a1, a2, a3, a4, a5, a6, a7));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CapitalizationFilter_incrementToken(t_CapitalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CapitalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$logical_and_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$logical_and_return::class$ = NULL;
          jmethodID *JavascriptParser$logical_and_return::mids$ = NULL;
          bool JavascriptParser$logical_and_return::live$ = false;

          jclass JavascriptParser$logical_and_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$logical_and_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$logical_and_return::JavascriptParser$logical_and_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$logical_and_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$logical_and_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$logical_and_return_init_(t_JavascriptParser$logical_and_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$logical_and_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$logical_and_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$logical_and_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$logical_and_return, t_JavascriptParser$logical_and_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$logical_and_return, t_JavascriptParser$logical_and_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$logical_and_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$logical_and_return), module, "JavascriptParser$logical_and_return", 0);
          }

          void t_JavascriptParser$logical_and_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$logical_and_return).tp_dict, "class_", make_descriptor(JavascriptParser$logical_and_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$logical_and_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$logical_and_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$logical_and_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$logical_and_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$logical_and_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$logical_and_return::wrap_Object(JavascriptParser$logical_and_return(((t_JavascriptParser$logical_and_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$logical_and_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$logical_and_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$logical_and_return_init_(t_JavascriptParser$logical_and_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$logical_and_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$logical_and_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/collation/CollationKeyFilter.h"
#include "java/text/Collator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {

        ::java::lang::Class *CollationKeyFilter::class$ = NULL;
        jmethodID *CollationKeyFilter::mids$ = NULL;
        bool CollationKeyFilter::live$ = false;

        jclass CollationKeyFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/collation/CollationKeyFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9b6c8506] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/text/Collator;)V");
            mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollationKeyFilter::CollationKeyFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::text::Collator & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_9b6c8506, a0.this$, a1.this$)) {}

        jboolean CollationKeyFilter::incrementToken() const
        {
          return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {
        static PyObject *t_CollationKeyFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollationKeyFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CollationKeyFilter_init_(t_CollationKeyFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CollationKeyFilter_incrementToken(t_CollationKeyFilter *self, PyObject *args);

        static PyMethodDef t_CollationKeyFilter__methods_[] = {
          DECLARE_METHOD(t_CollationKeyFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationKeyFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationKeyFilter, incrementToken, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CollationKeyFilter, t_CollationKeyFilter, ::org::apache::lucene::analysis::TokenFilter, CollationKeyFilter, t_CollationKeyFilter_init_, 0, 0, 0, 0, 0);

        void t_CollationKeyFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(CollationKeyFilter), module, "CollationKeyFilter", 0);
        }

        void t_CollationKeyFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CollationKeyFilter).tp_dict, "class_", make_descriptor(CollationKeyFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CollationKeyFilter).tp_dict, "wrapfn_", make_descriptor(t_CollationKeyFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CollationKeyFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollationKeyFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollationKeyFilter::initializeClass, 1)))
            return NULL;
          return t_CollationKeyFilter::wrap_Object(CollationKeyFilter(((t_CollationKeyFilter *) arg)->object.this$));
        }
        static PyObject *t_CollationKeyFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollationKeyFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CollationKeyFilter_init_(t_CollationKeyFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
          ::java::text::Collator a1((jobject) NULL);
          CollationKeyFilter object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::text::Collator::initializeClass, &a0, &a1))
          {
            INT_CALL(object = CollationKeyFilter(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CollationKeyFilter_incrementToken(t_CollationKeyFilter *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.incrementToken());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CollationKeyFilter), (PyObject *) self, "incrementToken", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/AnyQueryNodeBuilder.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *AnyQueryNodeBuilder::class$ = NULL;
              jmethodID *AnyQueryNodeBuilder::mids$ = NULL;
              bool AnyQueryNodeBuilder::live$ = false;

              jclass AnyQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/AnyQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_e1a6cc4e] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/BooleanQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              AnyQueryNodeBuilder::AnyQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::BooleanQuery AnyQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::BooleanQuery(env->callObjectMethod(this$, mids$[mid_build_e1a6cc4e], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_AnyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AnyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_AnyQueryNodeBuilder_init_(t_AnyQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_AnyQueryNodeBuilder_build(t_AnyQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_AnyQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_AnyQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnyQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnyQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(AnyQueryNodeBuilder, t_AnyQueryNodeBuilder, ::java::lang::Object, AnyQueryNodeBuilder, t_AnyQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_AnyQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(AnyQueryNodeBuilder), module, "AnyQueryNodeBuilder", 0);
              }

              void t_AnyQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(AnyQueryNodeBuilder).tp_dict, "class_", make_descriptor(AnyQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(AnyQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_AnyQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(AnyQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AnyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AnyQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_AnyQueryNodeBuilder::wrap_Object(AnyQueryNodeBuilder(((t_AnyQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_AnyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AnyQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_AnyQueryNodeBuilder_init_(t_AnyQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                AnyQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = AnyQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_AnyQueryNodeBuilder_build(t_AnyQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::BooleanQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_BooleanQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities$RegexMatcher.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {

            ::java::lang::Class *RegexCapabilities$RegexMatcher::class$ = NULL;
            jmethodID *RegexCapabilities$RegexMatcher::mids$ = NULL;
            bool RegexCapabilities$RegexMatcher::live$ = false;

            jclass RegexCapabilities$RegexMatcher::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/regex/RegexCapabilities$RegexMatcher");

                mids$ = new jmethodID[max_mid];
                mids$[mid_match_7bc03dc8] = env->getMethodID(cls, "match", "(Lorg/apache/lucene/util/BytesRef;)Z");
                mids$[mid_prefix_14c7b5c5] = env->getMethodID(cls, "prefix", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jboolean RegexCapabilities$RegexMatcher::match(const ::org::apache::lucene::util::BytesRef & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_match_7bc03dc8], a0.this$);
            }

            ::java::lang::String RegexCapabilities$RegexMatcher::prefix() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_prefix_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {
            static PyObject *t_RegexCapabilities$RegexMatcher_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexCapabilities$RegexMatcher_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexCapabilities$RegexMatcher_match(t_RegexCapabilities$RegexMatcher *self, PyObject *arg);
            static PyObject *t_RegexCapabilities$RegexMatcher_prefix(t_RegexCapabilities$RegexMatcher *self);

            static PyMethodDef t_RegexCapabilities$RegexMatcher__methods_[] = {
              DECLARE_METHOD(t_RegexCapabilities$RegexMatcher, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexCapabilities$RegexMatcher, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexCapabilities$RegexMatcher, match, METH_O),
              DECLARE_METHOD(t_RegexCapabilities$RegexMatcher, prefix, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(RegexCapabilities$RegexMatcher, t_RegexCapabilities$RegexMatcher, ::java::lang::Object, RegexCapabilities$RegexMatcher, abstract_init, 0, 0, 0, 0, 0);

            void t_RegexCapabilities$RegexMatcher::install(PyObject *module)
            {
              installType(&PY_TYPE(RegexCapabilities$RegexMatcher), module, "RegexCapabilities$RegexMatcher", 0);
            }

            void t_RegexCapabilities$RegexMatcher::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(RegexCapabilities$RegexMatcher).tp_dict, "class_", make_descriptor(RegexCapabilities$RegexMatcher::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(RegexCapabilities$RegexMatcher).tp_dict, "wrapfn_", make_descriptor(t_RegexCapabilities$RegexMatcher::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(RegexCapabilities$RegexMatcher).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RegexCapabilities$RegexMatcher_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RegexCapabilities$RegexMatcher::initializeClass, 1)))
                return NULL;
              return t_RegexCapabilities$RegexMatcher::wrap_Object(RegexCapabilities$RegexMatcher(((t_RegexCapabilities$RegexMatcher *) arg)->object.this$));
            }
            static PyObject *t_RegexCapabilities$RegexMatcher_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RegexCapabilities$RegexMatcher::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_RegexCapabilities$RegexMatcher_match(t_RegexCapabilities$RegexMatcher *self, PyObject *arg)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.match(a0));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "match", arg);
              return NULL;
            }

            static PyObject *t_RegexCapabilities$RegexMatcher_prefix(t_RegexCapabilities$RegexMatcher *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.prefix());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/precedence/processors/BooleanModifiersQueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {
            namespace processors {

              ::java::lang::Class *BooleanModifiersQueryNodeProcessor::class$ = NULL;
              jmethodID *BooleanModifiersQueryNodeProcessor::mids$ = NULL;
              bool BooleanModifiersQueryNodeProcessor::live$ = false;

              jclass BooleanModifiersQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/precedence/processors/BooleanModifiersQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanModifiersQueryNodeProcessor::BooleanModifiersQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode BooleanModifiersQueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {
            namespace processors {
              static PyObject *t_BooleanModifiersQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanModifiersQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanModifiersQueryNodeProcessor_init_(t_BooleanModifiersQueryNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BooleanModifiersQueryNodeProcessor_process(t_BooleanModifiersQueryNodeProcessor *self, PyObject *args);

              static PyMethodDef t_BooleanModifiersQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_BooleanModifiersQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanModifiersQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanModifiersQueryNodeProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BooleanModifiersQueryNodeProcessor, t_BooleanModifiersQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, BooleanModifiersQueryNodeProcessor, t_BooleanModifiersQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_BooleanModifiersQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanModifiersQueryNodeProcessor), module, "BooleanModifiersQueryNodeProcessor", 0);
              }

              void t_BooleanModifiersQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BooleanModifiersQueryNodeProcessor).tp_dict, "class_", make_descriptor(BooleanModifiersQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BooleanModifiersQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_BooleanModifiersQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BooleanModifiersQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanModifiersQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanModifiersQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_BooleanModifiersQueryNodeProcessor::wrap_Object(BooleanModifiersQueryNodeProcessor(((t_BooleanModifiersQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_BooleanModifiersQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanModifiersQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanModifiersQueryNodeProcessor_init_(t_BooleanModifiersQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                BooleanModifiersQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = BooleanModifiersQueryNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_BooleanModifiersQueryNodeProcessor_process(t_BooleanModifiersQueryNodeProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(BooleanModifiersQueryNodeProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/InMemorySorter.h"
#include "org/apache/lucene/search/suggest/fst/BytesRefSorter.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *InMemorySorter::class$ = NULL;
          jmethodID *InMemorySorter::mids$ = NULL;
          bool InMemorySorter::live$ = false;

          jclass InMemorySorter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/InMemorySorter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6ffdd545] = env->getMethodID(cls, "<init>", "(Ljava/util/Comparator;)V");
              mids$[mid_add_7bc03dc4] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_iterator_534dea83] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/util/BytesRefIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          InMemorySorter::InMemorySorter(const ::java::util::Comparator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6ffdd545, a0.this$)) {}

          void InMemorySorter::add(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_7bc03dc4], a0.this$);
          }

          ::java::util::Comparator InMemorySorter::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          ::org::apache::lucene::util::BytesRefIterator InMemorySorter::iterator() const
          {
            return ::org::apache::lucene::util::BytesRefIterator(env->callObjectMethod(this$, mids$[mid_iterator_534dea83]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_InMemorySorter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_InMemorySorter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_InMemorySorter_init_(t_InMemorySorter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_InMemorySorter_add(t_InMemorySorter *self, PyObject *arg);
          static PyObject *t_InMemorySorter_getComparator(t_InMemorySorter *self);
          static PyObject *t_InMemorySorter_iterator(t_InMemorySorter *self);
          static PyObject *t_InMemorySorter_get__comparator(t_InMemorySorter *self, void *data);
          static PyGetSetDef t_InMemorySorter__fields_[] = {
            DECLARE_GET_FIELD(t_InMemorySorter, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_InMemorySorter__methods_[] = {
            DECLARE_METHOD(t_InMemorySorter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InMemorySorter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InMemorySorter, add, METH_O),
            DECLARE_METHOD(t_InMemorySorter, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_InMemorySorter, iterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(InMemorySorter, t_InMemorySorter, ::java::lang::Object, InMemorySorter, t_InMemorySorter_init_, 0, 0, t_InMemorySorter__fields_, 0, 0);

          void t_InMemorySorter::install(PyObject *module)
          {
            installType(&PY_TYPE(InMemorySorter), module, "InMemorySorter", 0);
          }

          void t_InMemorySorter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(InMemorySorter).tp_dict, "class_", make_descriptor(InMemorySorter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(InMemorySorter).tp_dict, "wrapfn_", make_descriptor(t_InMemorySorter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(InMemorySorter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_InMemorySorter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, InMemorySorter::initializeClass, 1)))
              return NULL;
            return t_InMemorySorter::wrap_Object(InMemorySorter(((t_InMemorySorter *) arg)->object.this$));
          }
          static PyObject *t_InMemorySorter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, InMemorySorter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_InMemorySorter_init_(t_InMemorySorter *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Comparator a0((jobject) NULL);
            PyTypeObject **p0;
            InMemorySorter object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
            {
              INT_CALL(object = InMemorySorter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_InMemorySorter_add(t_InMemorySorter *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
          }

          static PyObject *t_InMemorySorter_getComparator(t_InMemorySorter *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_InMemorySorter_iterator(t_InMemorySorter *self)
          {
            ::org::apache::lucene::util::BytesRefIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::util::t_BytesRefIterator::wrap_Object(result);
          }

          static PyObject *t_InMemorySorter_get__comparator(t_InMemorySorter *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilteredTermsEnum.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "org/apache/lucene/index/TermState.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilteredTermsEnum::class$ = NULL;
        jmethodID *FilteredTermsEnum::mids$ = NULL;
        bool FilteredTermsEnum::live$ = false;

        jclass FilteredTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilteredTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0f660bfe] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;)V");
            mids$[mid_init$_3c71de47] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;Z)V");
            mids$[mid_attributes_f901022b] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_docFreq_54c6a179] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_docs_e6d4c3ef] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_docsAndPositions_b5d9c11b] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
            mids$[mid_seekCeil_fa9d72c4] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_seekExact_7bc03dc8] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_seekExact_0ee6df2f] = env->getMethodID(cls, "seekExact", "(J)V");
            mids$[mid_seekExact_fe46da51] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_term_4ae19461] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_termState_3e41fede] = env->getMethodID(cls, "termState", "()Lorg/apache/lucene/index/TermState;");
            mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");
            mids$[mid_accept_30bc08e1] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/FilteredTermsEnum$AcceptStatus;");
            mids$[mid_setInitialSeekTerm_7bc03dc4] = env->getMethodID(cls, "setInitialSeekTerm", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_nextSeekTerm_21e43cb7] = env->getMethodID(cls, "nextSeekTerm", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilteredTermsEnum::FilteredTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0) : ::org::apache::lucene::index::TermsEnum(env->newObject(initializeClass, &mids$, mid_init$_0f660bfe, a0.this$)) {}

        FilteredTermsEnum::FilteredTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0, jboolean a1) : ::org::apache::lucene::index::TermsEnum(env->newObject(initializeClass, &mids$, mid_init$_3c71de47, a0.this$, a1)) {}

        ::org::apache::lucene::util::AttributeSource FilteredTermsEnum::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_f901022b]));
        }

        jint FilteredTermsEnum::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_54c6a179]);
        }

        ::org::apache::lucene::index::DocsEnum FilteredTermsEnum::docs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_e6d4c3ef], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum FilteredTermsEnum::docsAndPositions(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsAndPositionsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_b5d9c11b], a0.this$, a1.this$, a2));
        }

        ::java::util::Comparator FilteredTermsEnum::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        ::org::apache::lucene::util::BytesRef FilteredTermsEnum::next() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
        }

        jlong FilteredTermsEnum::ord() const
        {
          return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
        }

        ::org::apache::lucene::index::TermsEnum$SeekStatus FilteredTermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_fa9d72c4], a0.this$));
        }

        jboolean FilteredTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_seekExact_7bc03dc8], a0.this$);
        }

        void FilteredTermsEnum::seekExact(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_0ee6df2f], a0);
        }

        void FilteredTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermState & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_fe46da51], a0.this$, a1.this$);
        }

        ::org::apache::lucene::util::BytesRef FilteredTermsEnum::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_4ae19461]));
        }

        ::org::apache::lucene::index::TermState FilteredTermsEnum::termState() const
        {
          return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_termState_3e41fede]));
        }

        jlong FilteredTermsEnum::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilteredTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilteredTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilteredTermsEnum_init_(t_FilteredTermsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilteredTermsEnum_attributes(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_docFreq(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_docs(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_docsAndPositions(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_getComparator(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_next(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_ord(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_seekCeil(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_seekExact(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_term(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_termState(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_totalTermFreq(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_get__comparator(t_FilteredTermsEnum *self, void *data);
        static PyGetSetDef t_FilteredTermsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_FilteredTermsEnum, comparator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilteredTermsEnum__methods_[] = {
          DECLARE_METHOD(t_FilteredTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredTermsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredTermsEnum, attributes, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, docs, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, docsAndPositions, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, next, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, ord, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, seekCeil, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, seekExact, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, term, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, termState, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilteredTermsEnum, t_FilteredTermsEnum, ::org::apache::lucene::index::TermsEnum, FilteredTermsEnum, t_FilteredTermsEnum_init_, PyObject_SelfIter, ((PyObject *(*)(t_FilteredTermsEnum *)) get_next< t_FilteredTermsEnum,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_FilteredTermsEnum__fields_, 0, 0);

        void t_FilteredTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(FilteredTermsEnum), module, "FilteredTermsEnum", 0);
        }

        void t_FilteredTermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilteredTermsEnum).tp_dict, "class_", make_descriptor(FilteredTermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilteredTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_FilteredTermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilteredTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilteredTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilteredTermsEnum::initializeClass, 1)))
            return NULL;
          return t_FilteredTermsEnum::wrap_Object(FilteredTermsEnum(((t_FilteredTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_FilteredTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilteredTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilteredTermsEnum_init_(t_FilteredTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
              FilteredTermsEnum object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
              {
                INT_CALL(object = FilteredTermsEnum(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
              jboolean a1;
              FilteredTermsEnum object((jobject) NULL);

              if (!parseArgs(args, "kZ", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0, &a1))
              {
                INT_CALL(object = FilteredTermsEnum(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilteredTermsEnum_attributes(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.attributes());
            return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "attributes", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_docFreq(t_FilteredTermsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docFreq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_docs(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docs(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "docs", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_docsAndPositions(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsAndPositionsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "docsAndPositions", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_getComparator(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_next(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "next", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_ord(t_FilteredTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "ord", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_seekCeil(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.seekCeil(a0));
            return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "seekCeil", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_seekExact(t_FilteredTermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.seekExact(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.seekExact(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::index::TermState a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.seekExact(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "seekExact", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_term(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.term());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "term", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_termState(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermState result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.termState());
            return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "termState", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_totalTermFreq(t_FilteredTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.totalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "totalTermFreq", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_get__comparator(t_FilteredTermsEnum *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blocktree/FieldReader.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/codecs/blocktree/Stats.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {

          ::java::lang::Class *FieldReader::class$ = NULL;
          jmethodID *FieldReader::mids$ = NULL;
          bool FieldReader::live$ = false;

          jclass FieldReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blocktree/FieldReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_computeStats_30b35506] = env->getMethodID(cls, "computeStats", "()Lorg/apache/lucene/codecs/blocktree/Stats;");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_getDocCount_54c6a179] = env->getMethodID(cls, "getDocCount", "()I");
              mids$[mid_getMax_4ae19461] = env->getMethodID(cls, "getMax", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getMin_4ae19461] = env->getMethodID(cls, "getMin", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getSumDocFreq_54c6a17a] = env->getMethodID(cls, "getSumDocFreq", "()J");
              mids$[mid_getSumTotalTermFreq_54c6a17a] = env->getMethodID(cls, "getSumTotalTermFreq", "()J");
              mids$[mid_hasFreqs_54c6a16a] = env->getMethodID(cls, "hasFreqs", "()Z");
              mids$[mid_hasOffsets_54c6a16a] = env->getMethodID(cls, "hasOffsets", "()Z");
              mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
              mids$[mid_hasPositions_54c6a16a] = env->getMethodID(cls, "hasPositions", "()Z");
              mids$[mid_intersect_b8f2b1bc] = env->getMethodID(cls, "intersect", "(Lorg/apache/lucene/util/automaton/CompiledAutomaton;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum;");
              mids$[mid_iterator_d737078b] = env->getMethodID(cls, "iterator", "(Lorg/apache/lucene/index/TermsEnum;)Lorg/apache/lucene/index/TermsEnum;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::codecs::blocktree::Stats FieldReader::computeStats() const
          {
            return ::org::apache::lucene::codecs::blocktree::Stats(env->callObjectMethod(this$, mids$[mid_computeStats_30b35506]));
          }

          ::java::util::Comparator FieldReader::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          jint FieldReader::getDocCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getDocCount_54c6a179]);
          }

          ::org::apache::lucene::util::BytesRef FieldReader::getMax() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMax_4ae19461]));
          }

          ::org::apache::lucene::util::BytesRef FieldReader::getMin() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMin_4ae19461]));
          }

          jlong FieldReader::getSumDocFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_getSumDocFreq_54c6a17a]);
          }

          jlong FieldReader::getSumTotalTermFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_54c6a17a]);
          }

          jboolean FieldReader::hasFreqs() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasFreqs_54c6a16a]);
          }

          jboolean FieldReader::hasOffsets() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasOffsets_54c6a16a]);
          }

          jboolean FieldReader::hasPayloads() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
          }

          jboolean FieldReader::hasPositions() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPositions_54c6a16a]);
          }

          ::org::apache::lucene::index::TermsEnum FieldReader::intersect(const ::org::apache::lucene::util::automaton::CompiledAutomaton & a0, const ::org::apache::lucene::util::BytesRef & a1) const
          {
            return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_intersect_b8f2b1bc], a0.this$, a1.this$));
          }

          ::org::apache::lucene::index::TermsEnum FieldReader::iterator(const ::org::apache::lucene::index::TermsEnum & a0) const
          {
            return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_iterator_d737078b], a0.this$));
          }

          jlong FieldReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jlong FieldReader::size() const
          {
            return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {
          static PyObject *t_FieldReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldReader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldReader_computeStats(t_FieldReader *self);
          static PyObject *t_FieldReader_getComparator(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_getDocCount(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_getMax(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_getMin(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_getSumDocFreq(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_getSumTotalTermFreq(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_hasFreqs(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_hasOffsets(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_hasPayloads(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_hasPositions(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_intersect(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_iterator(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_ramBytesUsed(t_FieldReader *self);
          static PyObject *t_FieldReader_size(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_get__comparator(t_FieldReader *self, void *data);
          static PyObject *t_FieldReader_get__docCount(t_FieldReader *self, void *data);
          static PyObject *t_FieldReader_get__max(t_FieldReader *self, void *data);
          static PyObject *t_FieldReader_get__min(t_FieldReader *self, void *data);
          static PyObject *t_FieldReader_get__sumDocFreq(t_FieldReader *self, void *data);
          static PyObject *t_FieldReader_get__sumTotalTermFreq(t_FieldReader *self, void *data);
          static PyGetSetDef t_FieldReader__fields_[] = {
            DECLARE_GET_FIELD(t_FieldReader, comparator),
            DECLARE_GET_FIELD(t_FieldReader, docCount),
            DECLARE_GET_FIELD(t_FieldReader, max),
            DECLARE_GET_FIELD(t_FieldReader, min),
            DECLARE_GET_FIELD(t_FieldReader, sumDocFreq),
            DECLARE_GET_FIELD(t_FieldReader, sumTotalTermFreq),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldReader__methods_[] = {
            DECLARE_METHOD(t_FieldReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldReader, computeStats, METH_NOARGS),
            DECLARE_METHOD(t_FieldReader, getComparator, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, getDocCount, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, getMax, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, getMin, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, getSumDocFreq, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, getSumTotalTermFreq, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, hasFreqs, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, hasOffsets, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, hasPayloads, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, hasPositions, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, intersect, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, iterator, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_FieldReader, size, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldReader, t_FieldReader, ::org::apache::lucene::index::Terms, FieldReader, abstract_init, 0, 0, t_FieldReader__fields_, 0, 0);

          void t_FieldReader::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldReader), module, "FieldReader", 0);
          }

          void t_FieldReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldReader).tp_dict, "class_", make_descriptor(FieldReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldReader).tp_dict, "wrapfn_", make_descriptor(t_FieldReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldReader::initializeClass, 1)))
              return NULL;
            return t_FieldReader::wrap_Object(FieldReader(((t_FieldReader *) arg)->object.this$));
          }
          static PyObject *t_FieldReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FieldReader_computeStats(t_FieldReader *self)
          {
            ::org::apache::lucene::codecs::blocktree::Stats result((jobject) NULL);
            OBJ_CALL(result = self->object.computeStats());
            return ::org::apache::lucene::codecs::blocktree::t_Stats::wrap_Object(result);
          }

          static PyObject *t_FieldReader_getComparator(t_FieldReader *self, PyObject *args)
          {
            ::java::util::Comparator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "getComparator", args, 2);
          }

          static PyObject *t_FieldReader_getDocCount(t_FieldReader *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getDocCount());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "getDocCount", args, 2);
          }

          static PyObject *t_FieldReader_getMax(t_FieldReader *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getMax());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "getMax", args, 2);
          }

          static PyObject *t_FieldReader_getMin(t_FieldReader *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getMin());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "getMin", args, 2);
          }

          static PyObject *t_FieldReader_getSumDocFreq(t_FieldReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSumDocFreq());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "getSumDocFreq", args, 2);
          }

          static PyObject *t_FieldReader_getSumTotalTermFreq(t_FieldReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSumTotalTermFreq());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "getSumTotalTermFreq", args, 2);
          }

          static PyObject *t_FieldReader_hasFreqs(t_FieldReader *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hasFreqs());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "hasFreqs", args, 2);
          }

          static PyObject *t_FieldReader_hasOffsets(t_FieldReader *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hasOffsets());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "hasOffsets", args, 2);
          }

          static PyObject *t_FieldReader_hasPayloads(t_FieldReader *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hasPayloads());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "hasPayloads", args, 2);
          }

          static PyObject *t_FieldReader_hasPositions(t_FieldReader *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hasPositions());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "hasPositions", args, 2);
          }

          static PyObject *t_FieldReader_intersect(t_FieldReader *self, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::CompiledAutomaton a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::CompiledAutomaton::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.intersect(a0, a1));
              return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "intersect", args, 2);
          }

          static PyObject *t_FieldReader_iterator(t_FieldReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
            ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.iterator(a0));
              return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_FieldReader_ramBytesUsed(t_FieldReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FieldReader_size(t_FieldReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_FieldReader_get__comparator(t_FieldReader *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }

          static PyObject *t_FieldReader_get__docCount(t_FieldReader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getDocCount());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldReader_get__max(t_FieldReader *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getMax());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_FieldReader_get__min(t_FieldReader *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getMin());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_FieldReader_get__sumDocFreq(t_FieldReader *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getSumDocFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_FieldReader_get__sumTotalTermFreq(t_FieldReader *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getSumTotalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/LetterTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/analysis/core/LetterTokenizer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *LetterTokenizerFactory::class$ = NULL;
          jmethodID *LetterTokenizerFactory::mids$ = NULL;
          bool LetterTokenizerFactory::live$ = false;

          jclass LetterTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/LetterTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_5d87cc2c] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/core/LetterTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LetterTokenizerFactory::LetterTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::core::LetterTokenizer LetterTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::core::LetterTokenizer(env->callObjectMethod(this$, mids$[mid_create_5d87cc2c], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_LetterTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LetterTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LetterTokenizerFactory_init_(t_LetterTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LetterTokenizerFactory_create(t_LetterTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_LetterTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_LetterTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LetterTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LetterTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LetterTokenizerFactory, t_LetterTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, LetterTokenizerFactory, t_LetterTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_LetterTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LetterTokenizerFactory), module, "LetterTokenizerFactory", 0);
          }

          void t_LetterTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LetterTokenizerFactory).tp_dict, "class_", make_descriptor(LetterTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LetterTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_LetterTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LetterTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LetterTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LetterTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_LetterTokenizerFactory::wrap_Object(LetterTokenizerFactory(((t_LetterTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_LetterTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LetterTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LetterTokenizerFactory_init_(t_LetterTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LetterTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LetterTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LetterTokenizerFactory_create(t_LetterTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::core::LetterTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::core::t_LetterTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LetterTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/TermRangeQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *TermRangeQueryNodeProcessor::class$ = NULL;
              jmethodID *TermRangeQueryNodeProcessor::mids$ = NULL;
              bool TermRangeQueryNodeProcessor::live$ = false;

              jclass TermRangeQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/TermRangeQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              TermRangeQueryNodeProcessor::TermRangeQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_TermRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TermRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_TermRangeQueryNodeProcessor_init_(t_TermRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_TermRangeQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_TermRangeQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TermRangeQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(TermRangeQueryNodeProcessor, t_TermRangeQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, TermRangeQueryNodeProcessor, t_TermRangeQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_TermRangeQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(TermRangeQueryNodeProcessor), module, "TermRangeQueryNodeProcessor", 0);
              }

              void t_TermRangeQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNodeProcessor).tp_dict, "class_", make_descriptor(TermRangeQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_TermRangeQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TermRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TermRangeQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_TermRangeQueryNodeProcessor::wrap_Object(TermRangeQueryNodeProcessor(((t_TermRangeQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_TermRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TermRangeQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_TermRangeQueryNodeProcessor_init_(t_TermRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                TermRangeQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = TermRangeQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseMinimalStemFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseMinimalStemFilterFactory::class$ = NULL;
          jmethodID *PortugueseMinimalStemFilterFactory::mids$ = NULL;
          bool PortugueseMinimalStemFilterFactory::live$ = false;

          jclass PortugueseMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseMinimalStemFilterFactory::PortugueseMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream PortugueseMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseMinimalStemFilterFactory_init_(t_PortugueseMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseMinimalStemFilterFactory_create(t_PortugueseMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_PortugueseMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PortugueseMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseMinimalStemFilterFactory, t_PortugueseMinimalStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PortugueseMinimalStemFilterFactory, t_PortugueseMinimalStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PortugueseMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseMinimalStemFilterFactory), module, "PortugueseMinimalStemFilterFactory", 0);
          }

          void t_PortugueseMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemFilterFactory).tp_dict, "class_", make_descriptor(PortugueseMinimalStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PortugueseMinimalStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PortugueseMinimalStemFilterFactory::wrap_Object(PortugueseMinimalStemFilterFactory(((t_PortugueseMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PortugueseMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseMinimalStemFilterFactory_init_(t_PortugueseMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PortugueseMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PortugueseMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseMinimalStemFilterFactory_create(t_PortugueseMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PortugueseMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKWidthFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKWidthFilter::class$ = NULL;
          jmethodID *CJKWidthFilter::mids$ = NULL;
          bool CJKWidthFilter::live$ = false;

          jclass CJKWidthFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKWidthFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKWidthFilter::CJKWidthFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean CJKWidthFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKWidthFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKWidthFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKWidthFilter_init_(t_CJKWidthFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKWidthFilter_incrementToken(t_CJKWidthFilter *self, PyObject *args);

          static PyMethodDef t_CJKWidthFilter__methods_[] = {
            DECLARE_METHOD(t_CJKWidthFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKWidthFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKWidthFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CJKWidthFilter, t_CJKWidthFilter, ::org::apache::lucene::analysis::TokenFilter, CJKWidthFilter, t_CJKWidthFilter_init_, 0, 0, 0, 0, 0);

          void t_CJKWidthFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKWidthFilter), module, "CJKWidthFilter", 0);
          }

          void t_CJKWidthFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CJKWidthFilter).tp_dict, "class_", make_descriptor(CJKWidthFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CJKWidthFilter).tp_dict, "wrapfn_", make_descriptor(t_CJKWidthFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CJKWidthFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CJKWidthFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKWidthFilter::initializeClass, 1)))
              return NULL;
            return t_CJKWidthFilter::wrap_Object(CJKWidthFilter(((t_CJKWidthFilter *) arg)->object.this$));
          }
          static PyObject *t_CJKWidthFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKWidthFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKWidthFilter_init_(t_CJKWidthFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            CJKWidthFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = CJKWidthFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKWidthFilter_incrementToken(t_CJKWidthFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CJKWidthFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/CachingWrapperFilter.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *CachingWrapperFilter::class$ = NULL;
        jmethodID *CachingWrapperFilter::mids$ = NULL;
        bool CachingWrapperFilter::live$ = false;

        jclass CachingWrapperFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/CachingWrapperFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9bb37152] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Filter;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_getFilter_b40f961f] = env->getMethodID(cls, "getFilter", "()Lorg/apache/lucene/search/Filter;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_cacheImpl_33cb740e] = env->getMethodID(cls, "cacheImpl", "(Lorg/apache/lucene/search/DocIdSetIterator;Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_docIdSetToCache_5fee2a54] = env->getMethodID(cls, "docIdSetToCache", "(Lorg/apache/lucene/search/DocIdSet;Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/search/DocIdSet;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CachingWrapperFilter::CachingWrapperFilter(const ::org::apache::lucene::search::Filter & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_9bb37152, a0.this$)) {}

        jboolean CachingWrapperFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet CachingWrapperFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Filter CachingWrapperFilter::getFilter() const
        {
          return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_b40f961f]));
        }

        jint CachingWrapperFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jlong CachingWrapperFilter::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        ::java::lang::String CachingWrapperFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_CachingWrapperFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CachingWrapperFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CachingWrapperFilter_init_(t_CachingWrapperFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CachingWrapperFilter_equals(t_CachingWrapperFilter *self, PyObject *args);
        static PyObject *t_CachingWrapperFilter_getDocIdSet(t_CachingWrapperFilter *self, PyObject *args);
        static PyObject *t_CachingWrapperFilter_getFilter(t_CachingWrapperFilter *self);
        static PyObject *t_CachingWrapperFilter_hashCode(t_CachingWrapperFilter *self, PyObject *args);
        static PyObject *t_CachingWrapperFilter_ramBytesUsed(t_CachingWrapperFilter *self);
        static PyObject *t_CachingWrapperFilter_toString(t_CachingWrapperFilter *self, PyObject *args);
        static PyObject *t_CachingWrapperFilter_get__filter(t_CachingWrapperFilter *self, void *data);
        static PyGetSetDef t_CachingWrapperFilter__fields_[] = {
          DECLARE_GET_FIELD(t_CachingWrapperFilter, filter),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CachingWrapperFilter__methods_[] = {
          DECLARE_METHOD(t_CachingWrapperFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CachingWrapperFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CachingWrapperFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_CachingWrapperFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_CachingWrapperFilter, getFilter, METH_NOARGS),
          DECLARE_METHOD(t_CachingWrapperFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_CachingWrapperFilter, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_CachingWrapperFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CachingWrapperFilter, t_CachingWrapperFilter, ::org::apache::lucene::search::Filter, CachingWrapperFilter, t_CachingWrapperFilter_init_, 0, 0, t_CachingWrapperFilter__fields_, 0, 0);

        void t_CachingWrapperFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(CachingWrapperFilter), module, "CachingWrapperFilter", 0);
        }

        void t_CachingWrapperFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CachingWrapperFilter).tp_dict, "class_", make_descriptor(CachingWrapperFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CachingWrapperFilter).tp_dict, "wrapfn_", make_descriptor(t_CachingWrapperFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CachingWrapperFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CachingWrapperFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CachingWrapperFilter::initializeClass, 1)))
            return NULL;
          return t_CachingWrapperFilter::wrap_Object(CachingWrapperFilter(((t_CachingWrapperFilter *) arg)->object.this$));
        }
        static PyObject *t_CachingWrapperFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CachingWrapperFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CachingWrapperFilter_init_(t_CachingWrapperFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Filter a0((jobject) NULL);
          CachingWrapperFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Filter::initializeClass, &a0))
          {
            INT_CALL(object = CachingWrapperFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CachingWrapperFilter_equals(t_CachingWrapperFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CachingWrapperFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_CachingWrapperFilter_getDocIdSet(t_CachingWrapperFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CachingWrapperFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_CachingWrapperFilter_getFilter(t_CachingWrapperFilter *self)
        {
          ::org::apache::lucene::search::Filter result((jobject) NULL);
          OBJ_CALL(result = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
        }

        static PyObject *t_CachingWrapperFilter_hashCode(t_CachingWrapperFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(CachingWrapperFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_CachingWrapperFilter_ramBytesUsed(t_CachingWrapperFilter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_CachingWrapperFilter_toString(t_CachingWrapperFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(CachingWrapperFilter), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CachingWrapperFilter_get__filter(t_CachingWrapperFilter *self, void *data)
        {
          ::org::apache::lucene::search::Filter value((jobject) NULL);
          OBJ_CALL(value = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/EliasFanoDecoder.h"
#include "org/apache/lucene/util/packed/EliasFanoEncoder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *EliasFanoDecoder::class$ = NULL;
          jmethodID *EliasFanoDecoder::mids$ = NULL;
          bool EliasFanoDecoder::live$ = false;
          jlong EliasFanoDecoder::NO_MORE_VALUES = (jlong) 0;

          jclass EliasFanoDecoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/EliasFanoDecoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_dd0d7538] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/packed/EliasFanoEncoder;)V");
              mids$[mid_advanceToIndex_0ee6df23] = env->getMethodID(cls, "advanceToIndex", "(J)Z");
              mids$[mid_advanceToValue_0ee6df33] = env->getMethodID(cls, "advanceToValue", "(J)J");
              mids$[mid_backToValue_0ee6df33] = env->getMethodID(cls, "backToValue", "(J)J");
              mids$[mid_currentIndex_54c6a17a] = env->getMethodID(cls, "currentIndex", "()J");
              mids$[mid_currentValue_54c6a17a] = env->getMethodID(cls, "currentValue", "()J");
              mids$[mid_getEliasFanoEncoder_803fc555] = env->getMethodID(cls, "getEliasFanoEncoder", "()Lorg/apache/lucene/util/packed/EliasFanoEncoder;");
              mids$[mid_nextValue_54c6a17a] = env->getMethodID(cls, "nextValue", "()J");
              mids$[mid_numEncoded_54c6a17a] = env->getMethodID(cls, "numEncoded", "()J");
              mids$[mid_previousValue_54c6a17a] = env->getMethodID(cls, "previousValue", "()J");
              mids$[mid_toAfterSequence_54c6a166] = env->getMethodID(cls, "toAfterSequence", "()V");
              mids$[mid_toBeforeSequence_54c6a166] = env->getMethodID(cls, "toBeforeSequence", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              NO_MORE_VALUES = env->getStaticLongField(cls, "NO_MORE_VALUES");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EliasFanoDecoder::EliasFanoDecoder(const ::org::apache::lucene::util::packed::EliasFanoEncoder & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_dd0d7538, a0.this$)) {}

          jboolean EliasFanoDecoder::advanceToIndex(jlong a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_advanceToIndex_0ee6df23], a0);
          }

          jlong EliasFanoDecoder::advanceToValue(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_advanceToValue_0ee6df33], a0);
          }

          jlong EliasFanoDecoder::backToValue(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_backToValue_0ee6df33], a0);
          }

          jlong EliasFanoDecoder::currentIndex() const
          {
            return env->callLongMethod(this$, mids$[mid_currentIndex_54c6a17a]);
          }

          jlong EliasFanoDecoder::currentValue() const
          {
            return env->callLongMethod(this$, mids$[mid_currentValue_54c6a17a]);
          }

          ::org::apache::lucene::util::packed::EliasFanoEncoder EliasFanoDecoder::getEliasFanoEncoder() const
          {
            return ::org::apache::lucene::util::packed::EliasFanoEncoder(env->callObjectMethod(this$, mids$[mid_getEliasFanoEncoder_803fc555]));
          }

          jlong EliasFanoDecoder::nextValue() const
          {
            return env->callLongMethod(this$, mids$[mid_nextValue_54c6a17a]);
          }

          jlong EliasFanoDecoder::numEncoded() const
          {
            return env->callLongMethod(this$, mids$[mid_numEncoded_54c6a17a]);
          }

          jlong EliasFanoDecoder::previousValue() const
          {
            return env->callLongMethod(this$, mids$[mid_previousValue_54c6a17a]);
          }

          void EliasFanoDecoder::toAfterSequence() const
          {
            env->callVoidMethod(this$, mids$[mid_toAfterSequence_54c6a166]);
          }

          void EliasFanoDecoder::toBeforeSequence() const
          {
            env->callVoidMethod(this$, mids$[mid_toBeforeSequence_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_EliasFanoDecoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EliasFanoDecoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EliasFanoDecoder_init_(t_EliasFanoDecoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EliasFanoDecoder_advanceToIndex(t_EliasFanoDecoder *self, PyObject *arg);
          static PyObject *t_EliasFanoDecoder_advanceToValue(t_EliasFanoDecoder *self, PyObject *arg);
          static PyObject *t_EliasFanoDecoder_backToValue(t_EliasFanoDecoder *self, PyObject *arg);
          static PyObject *t_EliasFanoDecoder_currentIndex(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_currentValue(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_getEliasFanoEncoder(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_nextValue(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_numEncoded(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_previousValue(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_toAfterSequence(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_toBeforeSequence(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_get__eliasFanoEncoder(t_EliasFanoDecoder *self, void *data);
          static PyGetSetDef t_EliasFanoDecoder__fields_[] = {
            DECLARE_GET_FIELD(t_EliasFanoDecoder, eliasFanoEncoder),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_EliasFanoDecoder__methods_[] = {
            DECLARE_METHOD(t_EliasFanoDecoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EliasFanoDecoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EliasFanoDecoder, advanceToIndex, METH_O),
            DECLARE_METHOD(t_EliasFanoDecoder, advanceToValue, METH_O),
            DECLARE_METHOD(t_EliasFanoDecoder, backToValue, METH_O),
            DECLARE_METHOD(t_EliasFanoDecoder, currentIndex, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoDecoder, currentValue, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoDecoder, getEliasFanoEncoder, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoDecoder, nextValue, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoDecoder, numEncoded, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoDecoder, previousValue, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoDecoder, toAfterSequence, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoDecoder, toBeforeSequence, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EliasFanoDecoder, t_EliasFanoDecoder, ::java::lang::Object, EliasFanoDecoder, t_EliasFanoDecoder_init_, 0, 0, t_EliasFanoDecoder__fields_, 0, 0);

          void t_EliasFanoDecoder::install(PyObject *module)
          {
            installType(&PY_TYPE(EliasFanoDecoder), module, "EliasFanoDecoder", 0);
          }

          void t_EliasFanoDecoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EliasFanoDecoder).tp_dict, "class_", make_descriptor(EliasFanoDecoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EliasFanoDecoder).tp_dict, "wrapfn_", make_descriptor(t_EliasFanoDecoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EliasFanoDecoder).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(EliasFanoDecoder::initializeClass);
            PyDict_SetItemString(PY_TYPE(EliasFanoDecoder).tp_dict, "NO_MORE_VALUES", make_descriptor(EliasFanoDecoder::NO_MORE_VALUES));
          }

          static PyObject *t_EliasFanoDecoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EliasFanoDecoder::initializeClass, 1)))
              return NULL;
            return t_EliasFanoDecoder::wrap_Object(EliasFanoDecoder(((t_EliasFanoDecoder *) arg)->object.this$));
          }
          static PyObject *t_EliasFanoDecoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EliasFanoDecoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EliasFanoDecoder_init_(t_EliasFanoDecoder *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::packed::EliasFanoEncoder a0((jobject) NULL);
            EliasFanoDecoder object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::packed::EliasFanoEncoder::initializeClass, &a0))
            {
              INT_CALL(object = EliasFanoDecoder(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EliasFanoDecoder_advanceToIndex(t_EliasFanoDecoder *self, PyObject *arg)
          {
            jlong a0;
            jboolean result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.advanceToIndex(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "advanceToIndex", arg);
            return NULL;
          }

          static PyObject *t_EliasFanoDecoder_advanceToValue(t_EliasFanoDecoder *self, PyObject *arg)
          {
            jlong a0;
            jlong result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.advanceToValue(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "advanceToValue", arg);
            return NULL;
          }

          static PyObject *t_EliasFanoDecoder_backToValue(t_EliasFanoDecoder *self, PyObject *arg)
          {
            jlong a0;
            jlong result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.backToValue(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "backToValue", arg);
            return NULL;
          }

          static PyObject *t_EliasFanoDecoder_currentIndex(t_EliasFanoDecoder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.currentIndex());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_EliasFanoDecoder_currentValue(t_EliasFanoDecoder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.currentValue());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_EliasFanoDecoder_getEliasFanoEncoder(t_EliasFanoDecoder *self)
          {
            ::org::apache::lucene::util::packed::EliasFanoEncoder result((jobject) NULL);
            OBJ_CALL(result = self->object.getEliasFanoEncoder());
            return ::org::apache::lucene::util::packed::t_EliasFanoEncoder::wrap_Object(result);
          }

          static PyObject *t_EliasFanoDecoder_nextValue(t_EliasFanoDecoder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.nextValue());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_EliasFanoDecoder_numEncoded(t_EliasFanoDecoder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.numEncoded());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_EliasFanoDecoder_previousValue(t_EliasFanoDecoder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.previousValue());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_EliasFanoDecoder_toAfterSequence(t_EliasFanoDecoder *self)
          {
            OBJ_CALL(self->object.toAfterSequence());
            Py_RETURN_NONE;
          }

          static PyObject *t_EliasFanoDecoder_toBeforeSequence(t_EliasFanoDecoder *self)
          {
            OBJ_CALL(self->object.toBeforeSequence());
            Py_RETURN_NONE;
          }

          static PyObject *t_EliasFanoDecoder_get__eliasFanoEncoder(t_EliasFanoDecoder *self, void *data)
          {
            ::org::apache::lucene::util::packed::EliasFanoEncoder value((jobject) NULL);
            OBJ_CALL(value = self->object.getEliasFanoEncoder());
            return ::org::apache::lucene::util::packed::t_EliasFanoEncoder::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/BaseCharFilter.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *BaseCharFilter::class$ = NULL;
          jmethodID *BaseCharFilter::mids$ = NULL;
          bool BaseCharFilter::live$ = false;

          jclass BaseCharFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/BaseCharFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_getLastCumulativeDiff_54c6a179] = env->getMethodID(cls, "getLastCumulativeDiff", "()I");
              mids$[mid_correct_39c7bd23] = env->getMethodID(cls, "correct", "(I)I");
              mids$[mid_addOffCorrectMap_d8d154a6] = env->getMethodID(cls, "addOffCorrectMap", "(II)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BaseCharFilter::BaseCharFilter(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::CharFilter(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_BaseCharFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BaseCharFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BaseCharFilter_init_(t_BaseCharFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_BaseCharFilter__methods_[] = {
            DECLARE_METHOD(t_BaseCharFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BaseCharFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BaseCharFilter, t_BaseCharFilter, ::org::apache::lucene::analysis::CharFilter, BaseCharFilter, t_BaseCharFilter_init_, 0, 0, 0, 0, 0);

          void t_BaseCharFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(BaseCharFilter), module, "BaseCharFilter", 0);
          }

          void t_BaseCharFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BaseCharFilter).tp_dict, "class_", make_descriptor(BaseCharFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BaseCharFilter).tp_dict, "wrapfn_", make_descriptor(t_BaseCharFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BaseCharFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BaseCharFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BaseCharFilter::initializeClass, 1)))
              return NULL;
            return t_BaseCharFilter::wrap_Object(BaseCharFilter(((t_BaseCharFilter *) arg)->object.this$));
          }
          static PyObject *t_BaseCharFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BaseCharFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BaseCharFilter_init_(t_BaseCharFilter *self, PyObject *args, PyObject *kwds)
          {
            ::java::io::Reader a0((jobject) NULL);
            BaseCharFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              INT_CALL(object = BaseCharFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/BoostingQuery.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *BoostingQuery::class$ = NULL;
        jmethodID *BoostingQuery::mids$ = NULL;
        bool BoostingQuery::live$ = false;

        jclass BoostingQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/BoostingQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7f23a8a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Query;F)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BoostingQuery::BoostingQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Query & a1, jfloat a2) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_7f23a8a3, a0.this$, a1.this$, a2)) {}

        jboolean BoostingQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint BoostingQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query BoostingQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        ::java::lang::String BoostingQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_BoostingQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BoostingQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BoostingQuery_init_(t_BoostingQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BoostingQuery_equals(t_BoostingQuery *self, PyObject *args);
        static PyObject *t_BoostingQuery_hashCode(t_BoostingQuery *self, PyObject *args);
        static PyObject *t_BoostingQuery_rewrite(t_BoostingQuery *self, PyObject *args);
        static PyObject *t_BoostingQuery_toString(t_BoostingQuery *self, PyObject *args);

        static PyMethodDef t_BoostingQuery__methods_[] = {
          DECLARE_METHOD(t_BoostingQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostingQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostingQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_BoostingQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BoostingQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_BoostingQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BoostingQuery, t_BoostingQuery, ::org::apache::lucene::search::Query, BoostingQuery, t_BoostingQuery_init_, 0, 0, 0, 0, 0);

        void t_BoostingQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(BoostingQuery), module, "BoostingQuery", 0);
        }

        void t_BoostingQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BoostingQuery).tp_dict, "class_", make_descriptor(BoostingQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BoostingQuery).tp_dict, "wrapfn_", make_descriptor(t_BoostingQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BoostingQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BoostingQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BoostingQuery::initializeClass, 1)))
            return NULL;
          return t_BoostingQuery::wrap_Object(BoostingQuery(((t_BoostingQuery *) arg)->object.this$));
        }
        static PyObject *t_BoostingQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BoostingQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BoostingQuery_init_(t_BoostingQuery *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          ::org::apache::lucene::search::Query a1((jobject) NULL);
          jfloat a2;
          BoostingQuery object((jobject) NULL);

          if (!parseArgs(args, "kkF", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = BoostingQuery(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BoostingQuery_equals(t_BoostingQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(BoostingQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BoostingQuery_hashCode(t_BoostingQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BoostingQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BoostingQuery_rewrite(t_BoostingQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BoostingQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_BoostingQuery_toString(t_BoostingQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(BoostingQuery), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/automaton/Transition.h"
#include "java/lang/Class.h"
#include "java/util/List.h"
#include "java/util/Collection.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/automaton/State.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *Automaton::class$ = NULL;
          jmethodID *Automaton::mids$ = NULL;
          bool Automaton::live$ = false;
          jint Automaton::MINIMIZE_HOPCROFT = (jint) 0;

          jclass Automaton::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/Automaton");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_931bc953] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/State;)V");
              mids$[mid_clearNumberedStates_54c6a166] = env->getMethodID(cls, "clearNumberedStates", "()V");
              mids$[mid_clone_9b0d5999] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_complement_9b0d5999] = env->getMethodID(cls, "complement", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_concatenate_7aca8e1f] = env->getMethodID(cls, "concatenate", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_concatenate_3449867a] = env->getStaticMethodID(cls, "concatenate", "(Ljava/util/List;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_determinize_54c6a166] = env->getMethodID(cls, "determinize", "()V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_expandSingleton_54c6a166] = env->getMethodID(cls, "expandSingleton", "()V");
              mids$[mid_getAcceptStates_03e99967] = env->getMethodID(cls, "getAcceptStates", "()Ljava/util/Set;");
              mids$[mid_getInfo_846352c3] = env->getMethodID(cls, "getInfo", "()Ljava/lang/Object;");
              mids$[mid_getInitialState_0b46b0b2] = env->getMethodID(cls, "getInitialState", "()Lorg/apache/lucene/util/automaton/State;");
              mids$[mid_getNumberOfStates_54c6a179] = env->getMethodID(cls, "getNumberOfStates", "()I");
              mids$[mid_getNumberOfTransitions_54c6a179] = env->getMethodID(cls, "getNumberOfTransitions", "()I");
              mids$[mid_getNumberedStates_b3b8db1a] = env->getMethodID(cls, "getNumberedStates", "()[Lorg/apache/lucene/util/automaton/State;");
              mids$[mid_getSingleton_14c7b5c5] = env->getMethodID(cls, "getSingleton", "()Ljava/lang/String;");
              mids$[mid_getSortedTransitions_14b6b645] = env->getMethodID(cls, "getSortedTransitions", "()[[Lorg/apache/lucene/util/automaton/Transition;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_intersection_7aca8e1f] = env->getMethodID(cls, "intersection", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_isDeterministic_54c6a16a] = env->getMethodID(cls, "isDeterministic", "()Z");
              mids$[mid_isEmptyString_54c6a16a] = env->getMethodID(cls, "isEmptyString", "()Z");
              mids$[mid_minimize_7aca8e1f] = env->getStaticMethodID(cls, "minimize", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_minus_7aca8e1f] = env->getMethodID(cls, "minus", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_optional_9b0d5999] = env->getMethodID(cls, "optional", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_reduce_54c6a166] = env->getMethodID(cls, "reduce", "()V");
              mids$[mid_removeDeadTransitions_54c6a166] = env->getMethodID(cls, "removeDeadTransitions", "()V");
              mids$[mid_repeat_9b0d5999] = env->getMethodID(cls, "repeat", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_repeat_d5b8a843] = env->getMethodID(cls, "repeat", "(I)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_repeat_42dcb2dd] = env->getMethodID(cls, "repeat", "(II)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_restoreInvariant_54c6a166] = env->getMethodID(cls, "restoreInvariant", "()V");
              mids$[mid_setAllowMutate_bb0c7673] = env->getStaticMethodID(cls, "setAllowMutate", "(Z)Z");
              mids$[mid_setDeterministic_bb0c767f] = env->getMethodID(cls, "setDeterministic", "(Z)V");
              mids$[mid_setInfo_290588ee] = env->getMethodID(cls, "setInfo", "(Ljava/lang/Object;)V");
              mids$[mid_setMinimization_39c7bd3c] = env->getStaticMethodID(cls, "setMinimization", "(I)V");
              mids$[mid_setMinimizeAlways_bb0c767f] = env->getStaticMethodID(cls, "setMinimizeAlways", "(Z)V");
              mids$[mid_setNumberedStates_77bb44b7] = env->getMethodID(cls, "setNumberedStates", "([Lorg/apache/lucene/util/automaton/State;)V");
              mids$[mid_setNumberedStates_4364f077] = env->getMethodID(cls, "setNumberedStates", "([Lorg/apache/lucene/util/automaton/State;I)V");
              mids$[mid_subsetOf_fc7cf398] = env->getMethodID(cls, "subsetOf", "(Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_toDot_14c7b5c5] = env->getMethodID(cls, "toDot", "()Ljava/lang/String;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_union_40d33194] = env->getStaticMethodID(cls, "union", "(Ljava/util/Collection;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_union_7aca8e1f] = env->getMethodID(cls, "union", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MINIMIZE_HOPCROFT = env->getStaticIntField(cls, "MINIMIZE_HOPCROFT");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Automaton::Automaton() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          Automaton::Automaton(const ::org::apache::lucene::util::automaton::State & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_931bc953, a0.this$)) {}

          void Automaton::clearNumberedStates() const
          {
            env->callVoidMethod(this$, mids$[mid_clearNumberedStates_54c6a166]);
          }

          Automaton Automaton::clone() const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_clone_9b0d5999]));
          }

          Automaton Automaton::complement() const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_complement_9b0d5999]));
          }

          Automaton Automaton::concatenate(const Automaton & a0) const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_concatenate_7aca8e1f], a0.this$));
          }

          Automaton Automaton::concatenate(const ::java::util::List & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return Automaton(env->callStaticObjectMethod(cls, mids$[mid_concatenate_3449867a], a0.this$));
          }

          void Automaton::determinize() const
          {
            env->callVoidMethod(this$, mids$[mid_determinize_54c6a166]);
          }

          jboolean Automaton::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void Automaton::expandSingleton() const
          {
            env->callVoidMethod(this$, mids$[mid_expandSingleton_54c6a166]);
          }

          ::java::util::Set Automaton::getAcceptStates() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getAcceptStates_03e99967]));
          }

          ::java::lang::Object Automaton::getInfo() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getInfo_846352c3]));
          }

          ::org::apache::lucene::util::automaton::State Automaton::getInitialState() const
          {
            return ::org::apache::lucene::util::automaton::State(env->callObjectMethod(this$, mids$[mid_getInitialState_0b46b0b2]));
          }

          jint Automaton::getNumberOfStates() const
          {
            return env->callIntMethod(this$, mids$[mid_getNumberOfStates_54c6a179]);
          }

          jint Automaton::getNumberOfTransitions() const
          {
            return env->callIntMethod(this$, mids$[mid_getNumberOfTransitions_54c6a179]);
          }

          JArray< ::org::apache::lucene::util::automaton::State > Automaton::getNumberedStates() const
          {
            return JArray< ::org::apache::lucene::util::automaton::State >(env->callObjectMethod(this$, mids$[mid_getNumberedStates_b3b8db1a]));
          }

          ::java::lang::String Automaton::getSingleton() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSingleton_14c7b5c5]));
          }

          JArray< JArray< ::org::apache::lucene::util::automaton::Transition > > Automaton::getSortedTransitions() const
          {
            return JArray< JArray< ::org::apache::lucene::util::automaton::Transition > >(env->callObjectMethod(this$, mids$[mid_getSortedTransitions_14b6b645]));
          }

          jint Automaton::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          Automaton Automaton::intersection(const Automaton & a0) const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_intersection_7aca8e1f], a0.this$));
          }

          jboolean Automaton::isDeterministic() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isDeterministic_54c6a16a]);
          }

          jboolean Automaton::isEmptyString() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isEmptyString_54c6a16a]);
          }

          Automaton Automaton::minimize(const Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return Automaton(env->callStaticObjectMethod(cls, mids$[mid_minimize_7aca8e1f], a0.this$));
          }

          Automaton Automaton::minus(const Automaton & a0) const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_minus_7aca8e1f], a0.this$));
          }

          Automaton Automaton::optional() const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_optional_9b0d5999]));
          }

          void Automaton::reduce() const
          {
            env->callVoidMethod(this$, mids$[mid_reduce_54c6a166]);
          }

          void Automaton::removeDeadTransitions() const
          {
            env->callVoidMethod(this$, mids$[mid_removeDeadTransitions_54c6a166]);
          }

          Automaton Automaton::repeat() const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_repeat_9b0d5999]));
          }

          Automaton Automaton::repeat(jint a0) const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_repeat_d5b8a843], a0));
          }

          Automaton Automaton::repeat(jint a0, jint a1) const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_repeat_42dcb2dd], a0, a1));
          }

          void Automaton::restoreInvariant() const
          {
            env->callVoidMethod(this$, mids$[mid_restoreInvariant_54c6a166]);
          }

          jboolean Automaton::setAllowMutate(jboolean a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_setAllowMutate_bb0c7673], a0);
          }

          void Automaton::setDeterministic(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDeterministic_bb0c767f], a0);
          }

          void Automaton::setInfo(const ::java::lang::Object & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setInfo_290588ee], a0.this$);
          }

          void Automaton::setMinimization(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_setMinimization_39c7bd3c], a0);
          }

          void Automaton::setMinimizeAlways(jboolean a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_setMinimizeAlways_bb0c767f], a0);
          }

          void Automaton::setNumberedStates(const JArray< ::org::apache::lucene::util::automaton::State > & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNumberedStates_77bb44b7], a0.this$);
          }

          void Automaton::setNumberedStates(const JArray< ::org::apache::lucene::util::automaton::State > & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setNumberedStates_4364f077], a0.this$, a1);
          }

          jboolean Automaton::subsetOf(const Automaton & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_subsetOf_fc7cf398], a0.this$);
          }

          ::java::lang::String Automaton::toDot() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toDot_14c7b5c5]));
          }

          ::java::lang::String Automaton::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          Automaton Automaton::union$(const ::java::util::Collection & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return Automaton(env->callStaticObjectMethod(cls, mids$[mid_union_40d33194], a0.this$));
          }

          Automaton Automaton::union$(const Automaton & a0) const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_union_7aca8e1f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_Automaton_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automaton_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Automaton_init_(t_Automaton *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Automaton_clearNumberedStates(t_Automaton *self);
          static PyObject *t_Automaton_clone(t_Automaton *self);
          static PyObject *t_Automaton_complement(t_Automaton *self);
          static PyObject *t_Automaton_concatenate(t_Automaton *self, PyObject *arg);
          static PyObject *t_Automaton_concatenate_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automaton_determinize(t_Automaton *self);
          static PyObject *t_Automaton_equals(t_Automaton *self, PyObject *args);
          static PyObject *t_Automaton_expandSingleton(t_Automaton *self);
          static PyObject *t_Automaton_getAcceptStates(t_Automaton *self);
          static PyObject *t_Automaton_getInfo(t_Automaton *self);
          static PyObject *t_Automaton_getInitialState(t_Automaton *self);
          static PyObject *t_Automaton_getNumberOfStates(t_Automaton *self);
          static PyObject *t_Automaton_getNumberOfTransitions(t_Automaton *self);
          static PyObject *t_Automaton_getNumberedStates(t_Automaton *self);
          static PyObject *t_Automaton_getSingleton(t_Automaton *self);
          static PyObject *t_Automaton_getSortedTransitions(t_Automaton *self);
          static PyObject *t_Automaton_hashCode(t_Automaton *self, PyObject *args);
          static PyObject *t_Automaton_intersection(t_Automaton *self, PyObject *arg);
          static PyObject *t_Automaton_isDeterministic(t_Automaton *self);
          static PyObject *t_Automaton_isEmptyString(t_Automaton *self);
          static PyObject *t_Automaton_minimize(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automaton_minus(t_Automaton *self, PyObject *arg);
          static PyObject *t_Automaton_optional(t_Automaton *self);
          static PyObject *t_Automaton_reduce(t_Automaton *self);
          static PyObject *t_Automaton_removeDeadTransitions(t_Automaton *self);
          static PyObject *t_Automaton_repeat(t_Automaton *self, PyObject *args);
          static PyObject *t_Automaton_restoreInvariant(t_Automaton *self);
          static PyObject *t_Automaton_setAllowMutate(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automaton_setDeterministic(t_Automaton *self, PyObject *arg);
          static PyObject *t_Automaton_setInfo(t_Automaton *self, PyObject *arg);
          static PyObject *t_Automaton_setMinimization(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automaton_setMinimizeAlways(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automaton_setNumberedStates(t_Automaton *self, PyObject *args);
          static PyObject *t_Automaton_subsetOf(t_Automaton *self, PyObject *arg);
          static PyObject *t_Automaton_toDot(t_Automaton *self);
          static PyObject *t_Automaton_toString(t_Automaton *self, PyObject *args);
          static PyObject *t_Automaton_union(t_Automaton *self, PyObject *arg);
          static PyObject *t_Automaton_union_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automaton_get__acceptStates(t_Automaton *self, void *data);
          static int t_Automaton_set__allowMutate(t_Automaton *self, PyObject *arg, void *data);
          static PyObject *t_Automaton_get__deterministic(t_Automaton *self, void *data);
          static int t_Automaton_set__deterministic(t_Automaton *self, PyObject *arg, void *data);
          static PyObject *t_Automaton_get__emptyString(t_Automaton *self, void *data);
          static PyObject *t_Automaton_get__info(t_Automaton *self, void *data);
          static int t_Automaton_set__info(t_Automaton *self, PyObject *arg, void *data);
          static PyObject *t_Automaton_get__initialState(t_Automaton *self, void *data);
          static int t_Automaton_set__minimization(t_Automaton *self, PyObject *arg, void *data);
          static int t_Automaton_set__minimizeAlways(t_Automaton *self, PyObject *arg, void *data);
          static PyObject *t_Automaton_get__numberOfStates(t_Automaton *self, void *data);
          static PyObject *t_Automaton_get__numberOfTransitions(t_Automaton *self, void *data);
          static PyObject *t_Automaton_get__numberedStates(t_Automaton *self, void *data);
          static int t_Automaton_set__numberedStates(t_Automaton *self, PyObject *arg, void *data);
          static PyObject *t_Automaton_get__singleton(t_Automaton *self, void *data);
          static PyObject *t_Automaton_get__sortedTransitions(t_Automaton *self, void *data);
          static PyGetSetDef t_Automaton__fields_[] = {
            DECLARE_GET_FIELD(t_Automaton, acceptStates),
            DECLARE_SET_FIELD(t_Automaton, allowMutate),
            DECLARE_GETSET_FIELD(t_Automaton, deterministic),
            DECLARE_GET_FIELD(t_Automaton, emptyString),
            DECLARE_GETSET_FIELD(t_Automaton, info),
            DECLARE_GET_FIELD(t_Automaton, initialState),
            DECLARE_SET_FIELD(t_Automaton, minimization),
            DECLARE_SET_FIELD(t_Automaton, minimizeAlways),
            DECLARE_GET_FIELD(t_Automaton, numberOfStates),
            DECLARE_GET_FIELD(t_Automaton, numberOfTransitions),
            DECLARE_GETSET_FIELD(t_Automaton, numberedStates),
            DECLARE_GET_FIELD(t_Automaton, singleton),
            DECLARE_GET_FIELD(t_Automaton, sortedTransitions),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Automaton__methods_[] = {
            DECLARE_METHOD(t_Automaton, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automaton, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automaton, clearNumberedStates, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, clone, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, complement, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, concatenate, METH_O),
            DECLARE_METHOD(t_Automaton, concatenate_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automaton, determinize, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, equals, METH_VARARGS),
            DECLARE_METHOD(t_Automaton, expandSingleton, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getAcceptStates, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getInfo, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getInitialState, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getNumberOfStates, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getNumberOfTransitions, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getNumberedStates, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getSingleton, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getSortedTransitions, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_Automaton, intersection, METH_O),
            DECLARE_METHOD(t_Automaton, isDeterministic, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, isEmptyString, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, minimize, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automaton, minus, METH_O),
            DECLARE_METHOD(t_Automaton, optional, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, reduce, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, removeDeadTransitions, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, repeat, METH_VARARGS),
            DECLARE_METHOD(t_Automaton, restoreInvariant, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, setAllowMutate, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automaton, setDeterministic, METH_O),
            DECLARE_METHOD(t_Automaton, setInfo, METH_O),
            DECLARE_METHOD(t_Automaton, setMinimization, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automaton, setMinimizeAlways, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automaton, setNumberedStates, METH_VARARGS),
            DECLARE_METHOD(t_Automaton, subsetOf, METH_O),
            DECLARE_METHOD(t_Automaton, toDot, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, toString, METH_VARARGS),
            DECLARE_METHOD(t_Automaton, union, METH_O),
            DECLARE_METHOD(t_Automaton, union_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Automaton, t_Automaton, ::java::lang::Object, Automaton, t_Automaton_init_, 0, 0, t_Automaton__fields_, 0, 0);

          void t_Automaton::install(PyObject *module)
          {
            installType(&PY_TYPE(Automaton), module, "Automaton", 0);
          }

          void t_Automaton::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Automaton).tp_dict, "class_", make_descriptor(Automaton::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Automaton).tp_dict, "wrapfn_", make_descriptor(t_Automaton::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Automaton).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Automaton::initializeClass);
            PyDict_SetItemString(PY_TYPE(Automaton).tp_dict, "MINIMIZE_HOPCROFT", make_descriptor(Automaton::MINIMIZE_HOPCROFT));
          }

          static PyObject *t_Automaton_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Automaton::initializeClass, 1)))
              return NULL;
            return t_Automaton::wrap_Object(Automaton(((t_Automaton *) arg)->object.this$));
          }
          static PyObject *t_Automaton_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Automaton::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Automaton_init_(t_Automaton *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Automaton object((jobject) NULL);

                INT_CALL(object = Automaton());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::util::automaton::State a0((jobject) NULL);
                Automaton object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::State::initializeClass, &a0))
                {
                  INT_CALL(object = Automaton(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Automaton_clearNumberedStates(t_Automaton *self)
          {
            OBJ_CALL(self->object.clearNumberedStates());
            Py_RETURN_NONE;
          }

          static PyObject *t_Automaton_clone(t_Automaton *self)
          {
            Automaton result((jobject) NULL);
            OBJ_CALL(result = self->object.clone());
            return t_Automaton::wrap_Object(result);
          }

          static PyObject *t_Automaton_complement(t_Automaton *self)
          {
            Automaton result((jobject) NULL);
            OBJ_CALL(result = self->object.complement());
            return t_Automaton::wrap_Object(result);
          }

          static PyObject *t_Automaton_concatenate(t_Automaton *self, PyObject *arg)
          {
            Automaton a0((jobject) NULL);
            Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.concatenate(a0));
              return t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "concatenate", arg);
            return NULL;
          }

          static PyObject *t_Automaton_concatenate_(PyTypeObject *type, PyObject *arg)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            Automaton result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automaton::concatenate(a0));
              return t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "concatenate_", arg);
            return NULL;
          }

          static PyObject *t_Automaton_determinize(t_Automaton *self)
          {
            OBJ_CALL(self->object.determinize());
            Py_RETURN_NONE;
          }

          static PyObject *t_Automaton_equals(t_Automaton *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Automaton), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_Automaton_expandSingleton(t_Automaton *self)
          {
            OBJ_CALL(self->object.expandSingleton());
            Py_RETURN_NONE;
          }

          static PyObject *t_Automaton_getAcceptStates(t_Automaton *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.getAcceptStates());
            return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::automaton::PY_TYPE(State));
          }

          static PyObject *t_Automaton_getInfo(t_Automaton *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.getInfo());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_Automaton_getInitialState(t_Automaton *self)
          {
            ::org::apache::lucene::util::automaton::State result((jobject) NULL);
            OBJ_CALL(result = self->object.getInitialState());
            return ::org::apache::lucene::util::automaton::t_State::wrap_Object(result);
          }

          static PyObject *t_Automaton_getNumberOfStates(t_Automaton *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNumberOfStates());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Automaton_getNumberOfTransitions(t_Automaton *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNumberOfTransitions());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Automaton_getNumberedStates(t_Automaton *self)
          {
            JArray< ::org::apache::lucene::util::automaton::State > result((jobject) NULL);
            OBJ_CALL(result = self->object.getNumberedStates());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::util::automaton::t_State::wrap_jobject);
          }

          static PyObject *t_Automaton_getSingleton(t_Automaton *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getSingleton());
            return j2p(result);
          }

          static PyObject *t_Automaton_getSortedTransitions(t_Automaton *self)
          {
            JArray< JArray< ::org::apache::lucene::util::automaton::Transition > > result((jobject) NULL);
            OBJ_CALL(result = self->object.getSortedTransitions());
            return JArray<jobject>(result.this$).wrap(NULL);
          }

          static PyObject *t_Automaton_hashCode(t_Automaton *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Automaton), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_Automaton_intersection(t_Automaton *self, PyObject *arg)
          {
            Automaton a0((jobject) NULL);
            Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.intersection(a0));
              return t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "intersection", arg);
            return NULL;
          }

          static PyObject *t_Automaton_isDeterministic(t_Automaton *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isDeterministic());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Automaton_isEmptyString(t_Automaton *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isEmptyString());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Automaton_minimize(PyTypeObject *type, PyObject *arg)
          {
            Automaton a0((jobject) NULL);
            Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automaton::minimize(a0));
              return t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "minimize", arg);
            return NULL;
          }

          static PyObject *t_Automaton_minus(t_Automaton *self, PyObject *arg)
          {
            Automaton a0((jobject) NULL);
            Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.minus(a0));
              return t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "minus", arg);
            return NULL;
          }

          static PyObject *t_Automaton_optional(t_Automaton *self)
          {
            Automaton result((jobject) NULL);
            OBJ_CALL(result = self->object.optional());
            return t_Automaton::wrap_Object(result);
          }

          static PyObject *t_Automaton_reduce(t_Automaton *self)
          {
            OBJ_CALL(self->object.reduce());
            Py_RETURN_NONE;
          }

          static PyObject *t_Automaton_removeDeadTransitions(t_Automaton *self)
          {
            OBJ_CALL(self->object.removeDeadTransitions());
            Py_RETURN_NONE;
          }

          static PyObject *t_Automaton_repeat(t_Automaton *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Automaton result((jobject) NULL);
                OBJ_CALL(result = self->object.repeat());
                return t_Automaton::wrap_Object(result);
              }
              break;
             case 1:
              {
                jint a0;
                Automaton result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.repeat(a0));
                  return t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                jint a1;
                Automaton result((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.repeat(a0, a1));
                  return t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "repeat", args);
            return NULL;
          }

          static PyObject *t_Automaton_restoreInvariant(t_Automaton *self)
          {
            OBJ_CALL(self->object.restoreInvariant());
            Py_RETURN_NONE;
          }

          static PyObject *t_Automaton_setAllowMutate(PyTypeObject *type, PyObject *arg)
          {
            jboolean a0;
            jboolean result;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automaton::setAllowMutate(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "setAllowMutate", arg);
            return NULL;
          }

          static PyObject *t_Automaton_setDeterministic(t_Automaton *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setDeterministic(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDeterministic", arg);
            return NULL;
          }

          static PyObject *t_Automaton_setInfo(t_Automaton *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);

            if (!parseArg(arg, "o", &a0))
            {
              OBJ_CALL(self->object.setInfo(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setInfo", arg);
            return NULL;
          }

          static PyObject *t_Automaton_setMinimization(PyTypeObject *type, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(::org::apache::lucene::util::automaton::Automaton::setMinimization(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "setMinimization", arg);
            return NULL;
          }

          static PyObject *t_Automaton_setMinimizeAlways(PyTypeObject *type, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(::org::apache::lucene::util::automaton::Automaton::setMinimizeAlways(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "setMinimizeAlways", arg);
            return NULL;
          }

          static PyObject *t_Automaton_setNumberedStates(t_Automaton *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< ::org::apache::lucene::util::automaton::State > a0((jobject) NULL);

                if (!parseArgs(args, "[k", ::org::apache::lucene::util::automaton::State::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setNumberedStates(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 2:
              {
                JArray< ::org::apache::lucene::util::automaton::State > a0((jobject) NULL);
                jint a1;

                if (!parseArgs(args, "[kI", ::org::apache::lucene::util::automaton::State::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(self->object.setNumberedStates(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "setNumberedStates", args);
            return NULL;
          }

          static PyObject *t_Automaton_subsetOf(t_Automaton *self, PyObject *arg)
          {
            Automaton a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.subsetOf(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subsetOf", arg);
            return NULL;
          }

          static PyObject *t_Automaton_toDot(t_Automaton *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.toDot());
            return j2p(result);
          }

          static PyObject *t_Automaton_toString(t_Automaton *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Automaton), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Automaton_union(t_Automaton *self, PyObject *arg)
          {
            Automaton a0((jobject) NULL);
            Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.union$(a0));
              return t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "union", arg);
            return NULL;
          }

          static PyObject *t_Automaton_union_(PyTypeObject *type, PyObject *arg)
          {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            Automaton result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automaton::union$(a0));
              return t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "union_", arg);
            return NULL;
          }

          static PyObject *t_Automaton_get__acceptStates(t_Automaton *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object.getAcceptStates());
            return ::java::util::t_Set::wrap_Object(value);
          }

          static int t_Automaton_set__allowMutate(t_Automaton *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAllowMutate(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "allowMutate", arg);
            return -1;
          }

          static PyObject *t_Automaton_get__deterministic(t_Automaton *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isDeterministic());
            Py_RETURN_BOOL(value);
          }
          static int t_Automaton_set__deterministic(t_Automaton *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setDeterministic(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "deterministic", arg);
            return -1;
          }

          static PyObject *t_Automaton_get__emptyString(t_Automaton *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isEmptyString());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_Automaton_get__info(t_Automaton *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object.getInfo());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_Automaton_set__info(t_Automaton *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::Object value((jobject) NULL);
              if (!parseArg(arg, "o", &value))
              {
                INT_CALL(self->object.setInfo(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "info", arg);
            return -1;
          }

          static PyObject *t_Automaton_get__initialState(t_Automaton *self, void *data)
          {
            ::org::apache::lucene::util::automaton::State value((jobject) NULL);
            OBJ_CALL(value = self->object.getInitialState());
            return ::org::apache::lucene::util::automaton::t_State::wrap_Object(value);
          }

          static int t_Automaton_set__minimization(t_Automaton *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinimization(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minimization", arg);
            return -1;
          }

          static int t_Automaton_set__minimizeAlways(t_Automaton *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setMinimizeAlways(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minimizeAlways", arg);
            return -1;
          }

          static PyObject *t_Automaton_get__numberOfStates(t_Automaton *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNumberOfStates());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Automaton_get__numberOfTransitions(t_Automaton *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNumberOfTransitions());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Automaton_get__numberedStates(t_Automaton *self, void *data)
          {
            JArray< ::org::apache::lucene::util::automaton::State > value((jobject) NULL);
            OBJ_CALL(value = self->object.getNumberedStates());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::util::automaton::t_State::wrap_jobject);
          }
          static int t_Automaton_set__numberedStates(t_Automaton *self, PyObject *arg, void *data)
          {
            {
              JArray< ::org::apache::lucene::util::automaton::State > value((jobject) NULL);
              if (!parseArg(arg, "[k", ::org::apache::lucene::util::automaton::State::initializeClass, &value))
              {
                INT_CALL(self->object.setNumberedStates(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "numberedStates", arg);
            return -1;
          }

          static PyObject *t_Automaton_get__singleton(t_Automaton *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getSingleton());
            return j2p(value);
          }

          static PyObject *t_Automaton_get__sortedTransitions(t_Automaton *self, void *data)
          {
            JArray< JArray< ::org::apache::lucene::util::automaton::Transition > > value((jobject) NULL);
            OBJ_CALL(value = self->object.getSortedTransitions());
            return JArray<jobject>(value.this$).wrap(NULL);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/collation/CollationAttributeFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/text/Collator.h"
#include "org/apache/lucene/collation/tokenattributes/CollatedTermAttributeImpl.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {

        ::java::lang::Class *CollationAttributeFactory::class$ = NULL;
        jmethodID *CollationAttributeFactory::mids$ = NULL;
        bool CollationAttributeFactory::live$ = false;

        jclass CollationAttributeFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/collation/CollationAttributeFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c5e10a9c] = env->getMethodID(cls, "<init>", "(Ljava/text/Collator;)V");
            mids$[mid_init$_f8cad218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/text/Collator;)V");
            mids$[mid_createInstance_4f834723] = env->getMethodID(cls, "createInstance", "()Lorg/apache/lucene/collation/tokenattributes/CollatedTermAttributeImpl;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollationAttributeFactory::CollationAttributeFactory(const ::java::text::Collator & a0) : ::org::apache::lucene::util::AttributeFactory$StaticImplementationAttributeFactory(env->newObject(initializeClass, &mids$, mid_init$_c5e10a9c, a0.this$)) {}

        CollationAttributeFactory::CollationAttributeFactory(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::text::Collator & a1) : ::org::apache::lucene::util::AttributeFactory$StaticImplementationAttributeFactory(env->newObject(initializeClass, &mids$, mid_init$_f8cad218, a0.this$, a1.this$)) {}

        ::org::apache::lucene::collation::tokenattributes::CollatedTermAttributeImpl CollationAttributeFactory::createInstance() const
        {
          return ::org::apache::lucene::collation::tokenattributes::CollatedTermAttributeImpl(env->callObjectMethod(this$, mids$[mid_createInstance_4f834723]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {
        static PyObject *t_CollationAttributeFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollationAttributeFactory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollationAttributeFactory_of_(t_CollationAttributeFactory *self, PyObject *args);
        static int t_CollationAttributeFactory_init_(t_CollationAttributeFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CollationAttributeFactory_createInstance(t_CollationAttributeFactory *self);
        static PyObject *t_CollationAttributeFactory_get__parameters_(t_CollationAttributeFactory *self, void *data);
        static PyGetSetDef t_CollationAttributeFactory__fields_[] = {
          DECLARE_GET_FIELD(t_CollationAttributeFactory, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CollationAttributeFactory__methods_[] = {
          DECLARE_METHOD(t_CollationAttributeFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationAttributeFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationAttributeFactory, of_, METH_VARARGS),
          DECLARE_METHOD(t_CollationAttributeFactory, createInstance, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CollationAttributeFactory, t_CollationAttributeFactory, ::org::apache::lucene::util::AttributeFactory$StaticImplementationAttributeFactory, CollationAttributeFactory, t_CollationAttributeFactory_init_, 0, 0, t_CollationAttributeFactory__fields_, 0, 0);
        PyObject *t_CollationAttributeFactory::wrap_Object(const CollationAttributeFactory& object, PyTypeObject *p0)
        {
          PyObject *obj = t_CollationAttributeFactory::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CollationAttributeFactory *self = (t_CollationAttributeFactory *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_CollationAttributeFactory::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_CollationAttributeFactory::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CollationAttributeFactory *self = (t_CollationAttributeFactory *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_CollationAttributeFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(CollationAttributeFactory), module, "CollationAttributeFactory", 0);
        }

        void t_CollationAttributeFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CollationAttributeFactory).tp_dict, "class_", make_descriptor(CollationAttributeFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CollationAttributeFactory).tp_dict, "wrapfn_", make_descriptor(t_CollationAttributeFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CollationAttributeFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollationAttributeFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollationAttributeFactory::initializeClass, 1)))
            return NULL;
          return t_CollationAttributeFactory::wrap_Object(CollationAttributeFactory(((t_CollationAttributeFactory *) arg)->object.this$));
        }
        static PyObject *t_CollationAttributeFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollationAttributeFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CollationAttributeFactory_of_(t_CollationAttributeFactory *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_CollationAttributeFactory_init_(t_CollationAttributeFactory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::text::Collator a0((jobject) NULL);
              CollationAttributeFactory object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::text::Collator::initializeClass, &a0))
              {
                INT_CALL(object = CollationAttributeFactory(a0));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::collation::tokenattributes::PY_TYPE(CollatedTermAttributeImpl);
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
              ::java::text::Collator a1((jobject) NULL);
              CollationAttributeFactory object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::text::Collator::initializeClass, &a0, &a1))
              {
                INT_CALL(object = CollationAttributeFactory(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::collation::tokenattributes::PY_TYPE(CollatedTermAttributeImpl);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CollationAttributeFactory_createInstance(t_CollationAttributeFactory *self)
        {
          ::org::apache::lucene::collation::tokenattributes::CollatedTermAttributeImpl result((jobject) NULL);
          OBJ_CALL(result = self->object.createInstance());
          return ::org::apache::lucene::collation::tokenattributes::t_CollatedTermAttributeImpl::wrap_Object(result);
        }
        static PyObject *t_CollationAttributeFactory_get__parameters_(t_CollationAttributeFactory *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/NGramFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/ngram/NGramTokenFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *NGramFilterFactory::class$ = NULL;
          jmethodID *NGramFilterFactory::mids$ = NULL;
          bool NGramFilterFactory::live$ = false;

          jclass NGramFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/NGramFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_f78e1f4d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/ngram/NGramTokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NGramFilterFactory::NGramFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ngram::NGramTokenFilter NGramFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::ngram::NGramTokenFilter(env->callObjectMethod(this$, mids$[mid_create_f78e1f4d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_NGramFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NGramFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NGramFilterFactory_init_(t_NGramFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NGramFilterFactory_create(t_NGramFilterFactory *self, PyObject *args);

          static PyMethodDef t_NGramFilterFactory__methods_[] = {
            DECLARE_METHOD(t_NGramFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NGramFilterFactory, t_NGramFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, NGramFilterFactory, t_NGramFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_NGramFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(NGramFilterFactory), module, "NGramFilterFactory", 0);
          }

          void t_NGramFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NGramFilterFactory).tp_dict, "class_", make_descriptor(NGramFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NGramFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_NGramFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NGramFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NGramFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NGramFilterFactory::initializeClass, 1)))
              return NULL;
            return t_NGramFilterFactory::wrap_Object(NGramFilterFactory(((t_NGramFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_NGramFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NGramFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NGramFilterFactory_init_(t_NGramFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            NGramFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = NGramFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NGramFilterFactory_create(t_NGramFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::ngram::NGramTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::ngram::t_NGramTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NGramFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterDirectoryReader.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FilterDirectoryReader$SubReaderWrapper.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterDirectoryReader::class$ = NULL;
        jmethodID *FilterDirectoryReader::mids$ = NULL;
        bool FilterDirectoryReader::live$ = false;

        jclass FilterDirectoryReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterDirectoryReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1e43081e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/DirectoryReader;)V");
            mids$[mid_init$_c3fa2163] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/DirectoryReader;Lorg/apache/lucene/index/FilterDirectoryReader$SubReaderWrapper;)V");
            mids$[mid_getIndexCommit_09307276] = env->getMethodID(cls, "getIndexCommit", "()Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_getVersion_54c6a17a] = env->getMethodID(cls, "getVersion", "()J");
            mids$[mid_isCurrent_54c6a16a] = env->getMethodID(cls, "isCurrent", "()Z");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");
            mids$[mid_doWrapDirectoryReader_5bb3c60f] = env->getMethodID(cls, "doWrapDirectoryReader", "(Lorg/apache/lucene/index/DirectoryReader;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doOpenIfChanged_26fd6272] = env->getMethodID(cls, "doOpenIfChanged", "(Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doOpenIfChanged_1de06693] = env->getMethodID(cls, "doOpenIfChanged", "()Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doOpenIfChanged_e4ee522b] = env->getMethodID(cls, "doOpenIfChanged", "(Lorg/apache/lucene/index/IndexWriter;Z)Lorg/apache/lucene/index/DirectoryReader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterDirectoryReader::FilterDirectoryReader(const ::org::apache::lucene::index::DirectoryReader & a0) : ::org::apache::lucene::index::DirectoryReader(env->newObject(initializeClass, &mids$, mid_init$_1e43081e, a0.this$)) {}

        FilterDirectoryReader::FilterDirectoryReader(const ::org::apache::lucene::index::DirectoryReader & a0, const ::org::apache::lucene::index::FilterDirectoryReader$SubReaderWrapper & a1) : ::org::apache::lucene::index::DirectoryReader(env->newObject(initializeClass, &mids$, mid_init$_c3fa2163, a0.this$, a1.this$)) {}

        ::org::apache::lucene::index::IndexCommit FilterDirectoryReader::getIndexCommit() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_getIndexCommit_09307276]));
        }

        jlong FilterDirectoryReader::getVersion() const
        {
          return env->callLongMethod(this$, mids$[mid_getVersion_54c6a17a]);
        }

        jboolean FilterDirectoryReader::isCurrent() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCurrent_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/FilterDirectoryReader$StandardReaderWrapper.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterDirectoryReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectoryReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectoryReader_of_(t_FilterDirectoryReader *self, PyObject *args);
        static int t_FilterDirectoryReader_init_(t_FilterDirectoryReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterDirectoryReader_getIndexCommit(t_FilterDirectoryReader *self, PyObject *args);
        static PyObject *t_FilterDirectoryReader_getVersion(t_FilterDirectoryReader *self, PyObject *args);
        static PyObject *t_FilterDirectoryReader_isCurrent(t_FilterDirectoryReader *self, PyObject *args);
        static PyObject *t_FilterDirectoryReader_get__current(t_FilterDirectoryReader *self, void *data);
        static PyObject *t_FilterDirectoryReader_get__indexCommit(t_FilterDirectoryReader *self, void *data);
        static PyObject *t_FilterDirectoryReader_get__version(t_FilterDirectoryReader *self, void *data);
        static PyObject *t_FilterDirectoryReader_get__parameters_(t_FilterDirectoryReader *self, void *data);
        static PyGetSetDef t_FilterDirectoryReader__fields_[] = {
          DECLARE_GET_FIELD(t_FilterDirectoryReader, current),
          DECLARE_GET_FIELD(t_FilterDirectoryReader, indexCommit),
          DECLARE_GET_FIELD(t_FilterDirectoryReader, version),
          DECLARE_GET_FIELD(t_FilterDirectoryReader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterDirectoryReader__methods_[] = {
          DECLARE_METHOD(t_FilterDirectoryReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectoryReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectoryReader, of_, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectoryReader, getIndexCommit, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectoryReader, getVersion, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectoryReader, isCurrent, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterDirectoryReader, t_FilterDirectoryReader, ::org::apache::lucene::index::DirectoryReader, FilterDirectoryReader, t_FilterDirectoryReader_init_, 0, 0, t_FilterDirectoryReader__fields_, 0, 0);
        PyObject *t_FilterDirectoryReader::wrap_Object(const FilterDirectoryReader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterDirectoryReader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterDirectoryReader *self = (t_FilterDirectoryReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FilterDirectoryReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterDirectoryReader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterDirectoryReader *self = (t_FilterDirectoryReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FilterDirectoryReader::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterDirectoryReader), module, "FilterDirectoryReader", 0);
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader).tp_dict, "StandardReaderWrapper", make_descriptor(&PY_TYPE(FilterDirectoryReader$StandardReaderWrapper)));
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader).tp_dict, "SubReaderWrapper", make_descriptor(&PY_TYPE(FilterDirectoryReader$SubReaderWrapper)));
        }

        void t_FilterDirectoryReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader).tp_dict, "class_", make_descriptor(FilterDirectoryReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader).tp_dict, "wrapfn_", make_descriptor(t_FilterDirectoryReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterDirectoryReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterDirectoryReader::initializeClass, 1)))
            return NULL;
          return t_FilterDirectoryReader::wrap_Object(FilterDirectoryReader(((t_FilterDirectoryReader *) arg)->object.this$));
        }
        static PyObject *t_FilterDirectoryReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterDirectoryReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterDirectoryReader_of_(t_FilterDirectoryReader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FilterDirectoryReader_init_(t_FilterDirectoryReader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::DirectoryReader a0((jobject) NULL);
              PyTypeObject **p0;
              FilterDirectoryReader object((jobject) NULL);

              if (!parseArgs(args, "K", ::org::apache::lucene::index::DirectoryReader::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_DirectoryReader::parameters_))
              {
                INT_CALL(object = FilterDirectoryReader(a0));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(AtomicReader);
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::DirectoryReader a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::FilterDirectoryReader$SubReaderWrapper a1((jobject) NULL);
              PyTypeObject **p1;
              FilterDirectoryReader object((jobject) NULL);

              if (!parseArgs(args, "KK", ::org::apache::lucene::index::DirectoryReader::initializeClass, ::org::apache::lucene::index::FilterDirectoryReader$SubReaderWrapper::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_DirectoryReader::parameters_, &a1, &p1, ::org::apache::lucene::index::t_FilterDirectoryReader$SubReaderWrapper::parameters_))
              {
                INT_CALL(object = FilterDirectoryReader(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(AtomicReader);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterDirectoryReader_getIndexCommit(t_FilterDirectoryReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getIndexCommit());
            return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterDirectoryReader), (PyObject *) self, "getIndexCommit", args, 2);
        }

        static PyObject *t_FilterDirectoryReader_getVersion(t_FilterDirectoryReader *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getVersion());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterDirectoryReader), (PyObject *) self, "getVersion", args, 2);
        }

        static PyObject *t_FilterDirectoryReader_isCurrent(t_FilterDirectoryReader *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCurrent());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilterDirectoryReader), (PyObject *) self, "isCurrent", args, 2);
        }
        static PyObject *t_FilterDirectoryReader_get__parameters_(t_FilterDirectoryReader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_FilterDirectoryReader_get__current(t_FilterDirectoryReader *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCurrent());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_FilterDirectoryReader_get__indexCommit(t_FilterDirectoryReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexCommit value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(value);
        }

        static PyObject *t_FilterDirectoryReader_get__version(t_FilterDirectoryReader *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getVersion());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/CollectionUtil.h"
#include "java/util/List.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *CollectionUtil::class$ = NULL;
        jmethodID *CollectionUtil::mids$ = NULL;
        bool CollectionUtil::live$ = false;

        jclass CollectionUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/CollectionUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_introSort_1fde8fc3] = env->getStaticMethodID(cls, "introSort", "(Ljava/util/List;)V");
            mids$[mid_introSort_b59215b8] = env->getStaticMethodID(cls, "introSort", "(Ljava/util/List;Ljava/util/Comparator;)V");
            mids$[mid_timSort_1fde8fc3] = env->getStaticMethodID(cls, "timSort", "(Ljava/util/List;)V");
            mids$[mid_timSort_b59215b8] = env->getStaticMethodID(cls, "timSort", "(Ljava/util/List;Ljava/util/Comparator;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void CollectionUtil::introSort(const ::java::util::List & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_1fde8fc3], a0.this$);
        }

        void CollectionUtil::introSort(const ::java::util::List & a0, const ::java::util::Comparator & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_b59215b8], a0.this$, a1.this$);
        }

        void CollectionUtil::timSort(const ::java::util::List & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_1fde8fc3], a0.this$);
        }

        void CollectionUtil::timSort(const ::java::util::List & a0, const ::java::util::Comparator & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_b59215b8], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_CollectionUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollectionUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollectionUtil_introSort(PyTypeObject *type, PyObject *args);
        static PyObject *t_CollectionUtil_timSort(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_CollectionUtil__methods_[] = {
          DECLARE_METHOD(t_CollectionUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollectionUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollectionUtil, introSort, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CollectionUtil, timSort, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CollectionUtil, t_CollectionUtil, ::java::lang::Object, CollectionUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_CollectionUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(CollectionUtil), module, "CollectionUtil", 0);
        }

        void t_CollectionUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CollectionUtil).tp_dict, "class_", make_descriptor(CollectionUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CollectionUtil).tp_dict, "wrapfn_", make_descriptor(t_CollectionUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CollectionUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollectionUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollectionUtil::initializeClass, 1)))
            return NULL;
          return t_CollectionUtil::wrap_Object(CollectionUtil(((t_CollectionUtil *) arg)->object.this$));
        }
        static PyObject *t_CollectionUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollectionUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CollectionUtil_introSort(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::CollectionUtil::introSort(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::util::Comparator a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::CollectionUtil::introSort(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "introSort", args);
          return NULL;
        }

        static PyObject *t_CollectionUtil_timSort(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::CollectionUtil::timSort(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::util::Comparator a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::CollectionUtil::timSort(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "timSort", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OfflineSorter$ByteSequencesWriter.h"
#include "java/io/DataOutput.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/File.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OfflineSorter$ByteSequencesWriter::class$ = NULL;
        jmethodID *OfflineSorter$ByteSequencesWriter::mids$ = NULL;
        bool OfflineSorter$ByteSequencesWriter::live$ = false;

        jclass OfflineSorter$ByteSequencesWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OfflineSorter$ByteSequencesWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
            mids$[mid_init$_cfb051e6] = env->getMethodID(cls, "<init>", "(Ljava/io/DataOutput;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_write_7bc03dc4] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_write_49b4f12b] = env->getMethodID(cls, "write", "([B)V");
            mids$[mid_write_86f4435f] = env->getMethodID(cls, "write", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OfflineSorter$ByteSequencesWriter::OfflineSorter$ByteSequencesWriter(const ::java::io::File & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        OfflineSorter$ByteSequencesWriter::OfflineSorter$ByteSequencesWriter(const ::java::io::DataOutput & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cfb051e6, a0.this$)) {}

        void OfflineSorter$ByteSequencesWriter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void OfflineSorter$ByteSequencesWriter::write(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_write_7bc03dc4], a0.this$);
        }

        void OfflineSorter$ByteSequencesWriter::write(const JArray< jbyte > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_write_49b4f12b], a0.this$);
        }

        void OfflineSorter$ByteSequencesWriter::write(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_write_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OfflineSorter$ByteSequencesWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter$ByteSequencesWriter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OfflineSorter$ByteSequencesWriter_init_(t_OfflineSorter$ByteSequencesWriter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OfflineSorter$ByteSequencesWriter_close(t_OfflineSorter$ByteSequencesWriter *self);
        static PyObject *t_OfflineSorter$ByteSequencesWriter_write(t_OfflineSorter$ByteSequencesWriter *self, PyObject *args);

        static PyMethodDef t_OfflineSorter$ByteSequencesWriter__methods_[] = {
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesWriter, close, METH_NOARGS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesWriter, write, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OfflineSorter$ByteSequencesWriter, t_OfflineSorter$ByteSequencesWriter, ::java::lang::Object, OfflineSorter$ByteSequencesWriter, t_OfflineSorter$ByteSequencesWriter_init_, 0, 0, 0, 0, 0);

        void t_OfflineSorter$ByteSequencesWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(OfflineSorter$ByteSequencesWriter), module, "OfflineSorter$ByteSequencesWriter", 0);
        }

        void t_OfflineSorter$ByteSequencesWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OfflineSorter$ByteSequencesWriter).tp_dict, "class_", make_descriptor(OfflineSorter$ByteSequencesWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$ByteSequencesWriter).tp_dict, "wrapfn_", make_descriptor(t_OfflineSorter$ByteSequencesWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$ByteSequencesWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OfflineSorter$ByteSequencesWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OfflineSorter$ByteSequencesWriter::initializeClass, 1)))
            return NULL;
          return t_OfflineSorter$ByteSequencesWriter::wrap_Object(OfflineSorter$ByteSequencesWriter(((t_OfflineSorter$ByteSequencesWriter *) arg)->object.this$));
        }
        static PyObject *t_OfflineSorter$ByteSequencesWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OfflineSorter$ByteSequencesWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OfflineSorter$ByteSequencesWriter_init_(t_OfflineSorter$ByteSequencesWriter *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::File a0((jobject) NULL);
              OfflineSorter$ByteSequencesWriter object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = OfflineSorter$ByteSequencesWriter(a0));
                self->object = object;
                break;
              }
            }
            {
              ::java::io::DataOutput a0((jobject) NULL);
              OfflineSorter$ByteSequencesWriter object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::DataOutput::initializeClass, &a0))
              {
                INT_CALL(object = OfflineSorter$ByteSequencesWriter(a0));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OfflineSorter$ByteSequencesWriter_close(t_OfflineSorter$ByteSequencesWriter *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_OfflineSorter$ByteSequencesWriter_write(t_OfflineSorter$ByteSequencesWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.write(a0));
                Py_RETURN_NONE;
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(self->object.write(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.write(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "write", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SearcherFactory.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SearcherFactory::class$ = NULL;
        jmethodID *SearcherFactory::mids$ = NULL;
        bool SearcherFactory::live$ = false;

        jclass SearcherFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SearcherFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_newSearcher_bd3e99c0] = env->getMethodID(cls, "newSearcher", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/IndexSearcher;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SearcherFactory::SearcherFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::IndexSearcher SearcherFactory::newSearcher(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::IndexSearcher(env->callObjectMethod(this$, mids$[mid_newSearcher_bd3e99c0], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SearcherFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SearcherFactory_init_(t_SearcherFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SearcherFactory_newSearcher(t_SearcherFactory *self, PyObject *arg);

        static PyMethodDef t_SearcherFactory__methods_[] = {
          DECLARE_METHOD(t_SearcherFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherFactory, newSearcher, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SearcherFactory, t_SearcherFactory, ::java::lang::Object, SearcherFactory, t_SearcherFactory_init_, 0, 0, 0, 0, 0);

        void t_SearcherFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(SearcherFactory), module, "SearcherFactory", 0);
        }

        void t_SearcherFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SearcherFactory).tp_dict, "class_", make_descriptor(SearcherFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SearcherFactory).tp_dict, "wrapfn_", make_descriptor(t_SearcherFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SearcherFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SearcherFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SearcherFactory::initializeClass, 1)))
            return NULL;
          return t_SearcherFactory::wrap_Object(SearcherFactory(((t_SearcherFactory *) arg)->object.this$));
        }
        static PyObject *t_SearcherFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SearcherFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SearcherFactory_init_(t_SearcherFactory *self, PyObject *args, PyObject *kwds)
        {
          SearcherFactory object((jobject) NULL);

          INT_CALL(object = SearcherFactory());
          self->object = object;

          return 0;
        }

        static PyObject *t_SearcherFactory_newSearcher(t_SearcherFactory *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::IndexSearcher result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.newSearcher(a0));
            return ::org::apache::lucene::search::t_IndexSearcher::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "newSearcher", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PhraseQuery.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PhraseQuery::class$ = NULL;
        jmethodID *PhraseQuery::mids$ = NULL;
        bool PhraseQuery::live$ = false;

        jclass PhraseQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PhraseQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_7eca6a81] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_add_05555589] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/Term;I)V");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getPositions_dab10e75] = env->getMethodID(cls, "getPositions", "()[I");
            mids$[mid_getSlop_54c6a179] = env->getMethodID(cls, "getSlop", "()I");
            mids$[mid_getTerms_2b86e588] = env->getMethodID(cls, "getTerms", "()[Lorg/apache/lucene/index/Term;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setSlop_39c7bd3c] = env->getMethodID(cls, "setSlop", "(I)V");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PhraseQuery::PhraseQuery() : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PhraseQuery::add(const ::org::apache::lucene::index::Term & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_7eca6a81], a0.this$);
        }

        void PhraseQuery::add(const ::org::apache::lucene::index::Term & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_05555589], a0.this$, a1);
        }

        ::org::apache::lucene::search::Weight PhraseQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean PhraseQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void PhraseQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        JArray< jint > PhraseQuery::getPositions() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getPositions_dab10e75]));
        }

        jint PhraseQuery::getSlop() const
        {
          return env->callIntMethod(this$, mids$[mid_getSlop_54c6a179]);
        }

        JArray< ::org::apache::lucene::index::Term > PhraseQuery::getTerms() const
        {
          return JArray< ::org::apache::lucene::index::Term >(env->callObjectMethod(this$, mids$[mid_getTerms_2b86e588]));
        }

        jint PhraseQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query PhraseQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        void PhraseQuery::setSlop(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setSlop_39c7bd3c], a0);
        }

        ::java::lang::String PhraseQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PhraseQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PhraseQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PhraseQuery_init_(t_PhraseQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PhraseQuery_add(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_createWeight(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_equals(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_extractTerms(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_getPositions(t_PhraseQuery *self);
        static PyObject *t_PhraseQuery_getSlop(t_PhraseQuery *self);
        static PyObject *t_PhraseQuery_getTerms(t_PhraseQuery *self);
        static PyObject *t_PhraseQuery_hashCode(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_rewrite(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_setSlop(t_PhraseQuery *self, PyObject *arg);
        static PyObject *t_PhraseQuery_toString(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_get__positions(t_PhraseQuery *self, void *data);
        static PyObject *t_PhraseQuery_get__slop(t_PhraseQuery *self, void *data);
        static int t_PhraseQuery_set__slop(t_PhraseQuery *self, PyObject *arg, void *data);
        static PyObject *t_PhraseQuery_get__terms(t_PhraseQuery *self, void *data);
        static PyGetSetDef t_PhraseQuery__fields_[] = {
          DECLARE_GET_FIELD(t_PhraseQuery, positions),
          DECLARE_GETSET_FIELD(t_PhraseQuery, slop),
          DECLARE_GET_FIELD(t_PhraseQuery, terms),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PhraseQuery__methods_[] = {
          DECLARE_METHOD(t_PhraseQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PhraseQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PhraseQuery, add, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery, getPositions, METH_NOARGS),
          DECLARE_METHOD(t_PhraseQuery, getSlop, METH_NOARGS),
          DECLARE_METHOD(t_PhraseQuery, getTerms, METH_NOARGS),
          DECLARE_METHOD(t_PhraseQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery, setSlop, METH_O),
          DECLARE_METHOD(t_PhraseQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PhraseQuery, t_PhraseQuery, ::org::apache::lucene::search::Query, PhraseQuery, t_PhraseQuery_init_, 0, 0, t_PhraseQuery__fields_, 0, 0);

        void t_PhraseQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(PhraseQuery), module, "PhraseQuery", 0);
        }

        void t_PhraseQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PhraseQuery).tp_dict, "class_", make_descriptor(PhraseQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PhraseQuery).tp_dict, "wrapfn_", make_descriptor(t_PhraseQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PhraseQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PhraseQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PhraseQuery::initializeClass, 1)))
            return NULL;
          return t_PhraseQuery::wrap_Object(PhraseQuery(((t_PhraseQuery *) arg)->object.this$));
        }
        static PyObject *t_PhraseQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PhraseQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PhraseQuery_init_(t_PhraseQuery *self, PyObject *args, PyObject *kwds)
        {
          PhraseQuery object((jobject) NULL);

          INT_CALL(object = PhraseQuery());
          self->object = object;

          return 0;
        }

        static PyObject *t_PhraseQuery_add(t_PhraseQuery *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_PhraseQuery_createWeight(t_PhraseQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(PhraseQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_PhraseQuery_equals(t_PhraseQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PhraseQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PhraseQuery_extractTerms(t_PhraseQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PhraseQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_PhraseQuery_getPositions(t_PhraseQuery *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.getPositions());
          return result.wrap();
        }

        static PyObject *t_PhraseQuery_getSlop(t_PhraseQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getSlop());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_PhraseQuery_getTerms(t_PhraseQuery *self)
        {
          JArray< ::org::apache::lucene::index::Term > result((jobject) NULL);
          OBJ_CALL(result = self->object.getTerms());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_Term::wrap_jobject);
        }

        static PyObject *t_PhraseQuery_hashCode(t_PhraseQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(PhraseQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_PhraseQuery_rewrite(t_PhraseQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(PhraseQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_PhraseQuery_setSlop(t_PhraseQuery *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setSlop(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setSlop", arg);
          return NULL;
        }

        static PyObject *t_PhraseQuery_toString(t_PhraseQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(PhraseQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_PhraseQuery_get__positions(t_PhraseQuery *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object.getPositions());
          return value.wrap();
        }

        static PyObject *t_PhraseQuery_get__slop(t_PhraseQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getSlop());
          return PyInt_FromLong((long) value);
        }
        static int t_PhraseQuery_set__slop(t_PhraseQuery *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setSlop(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "slop", arg);
          return -1;
        }

        static PyObject *t_PhraseQuery_get__terms(t_PhraseQuery *self, void *data)
        {
          JArray< ::org::apache::lucene::index::Term > value((jobject) NULL);
          OBJ_CALL(value = self->object.getTerms());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_Term::wrap_jobject);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/German2Stemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *German2Stemmer::class$ = NULL;
        jmethodID *German2Stemmer::mids$ = NULL;
        bool German2Stemmer::live$ = false;

        jclass German2Stemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/German2Stemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        German2Stemmer::German2Stemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean German2Stemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint German2Stemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean German2Stemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_German2Stemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_German2Stemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_German2Stemmer_init_(t_German2Stemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_German2Stemmer_equals(t_German2Stemmer *self, PyObject *args);
        static PyObject *t_German2Stemmer_hashCode(t_German2Stemmer *self, PyObject *args);
        static PyObject *t_German2Stemmer_stem(t_German2Stemmer *self, PyObject *args);

        static PyMethodDef t_German2Stemmer__methods_[] = {
          DECLARE_METHOD(t_German2Stemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_German2Stemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_German2Stemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_German2Stemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_German2Stemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(German2Stemmer, t_German2Stemmer, ::org::tartarus::snowball::SnowballProgram, German2Stemmer, t_German2Stemmer_init_, 0, 0, 0, 0, 0);

        void t_German2Stemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(German2Stemmer), module, "German2Stemmer", 0);
        }

        void t_German2Stemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(German2Stemmer).tp_dict, "class_", make_descriptor(German2Stemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(German2Stemmer).tp_dict, "wrapfn_", make_descriptor(t_German2Stemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(German2Stemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_German2Stemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, German2Stemmer::initializeClass, 1)))
            return NULL;
          return t_German2Stemmer::wrap_Object(German2Stemmer(((t_German2Stemmer *) arg)->object.this$));
        }
        static PyObject *t_German2Stemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, German2Stemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_German2Stemmer_init_(t_German2Stemmer *self, PyObject *args, PyObject *kwds)
        {
          German2Stemmer object((jobject) NULL);

          INT_CALL(object = German2Stemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_German2Stemmer_equals(t_German2Stemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(German2Stemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_German2Stemmer_hashCode(t_German2Stemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(German2Stemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_German2Stemmer_stem(t_German2Stemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(German2Stemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SmallFloat.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SmallFloat::class$ = NULL;
        jmethodID *SmallFloat::mids$ = NULL;
        bool SmallFloat::live$ = false;

        jclass SmallFloat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SmallFloat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_byte315ToFloat_b2271697] = env->getStaticMethodID(cls, "byte315ToFloat", "(B)F");
            mids$[mid_byte52ToFloat_b2271697] = env->getStaticMethodID(cls, "byte52ToFloat", "(B)F");
            mids$[mid_byteToFloat_277ea3d7] = env->getStaticMethodID(cls, "byteToFloat", "(BII)F");
            mids$[mid_floatToByte_c388dc8f] = env->getStaticMethodID(cls, "floatToByte", "(FII)B");
            mids$[mid_floatToByte315_06298cbf] = env->getStaticMethodID(cls, "floatToByte315", "(F)B");
            mids$[mid_floatToByte52_06298cbf] = env->getStaticMethodID(cls, "floatToByte52", "(F)B");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jfloat SmallFloat::byte315ToFloat(jbyte a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticFloatMethod(cls, mids$[mid_byte315ToFloat_b2271697], a0);
        }

        jfloat SmallFloat::byte52ToFloat(jbyte a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticFloatMethod(cls, mids$[mid_byte52ToFloat_b2271697], a0);
        }

        jfloat SmallFloat::byteToFloat(jbyte a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticFloatMethod(cls, mids$[mid_byteToFloat_277ea3d7], a0, a1, a2);
        }

        jbyte SmallFloat::floatToByte(jfloat a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticByteMethod(cls, mids$[mid_floatToByte_c388dc8f], a0, a1, a2);
        }

        jbyte SmallFloat::floatToByte315(jfloat a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticByteMethod(cls, mids$[mid_floatToByte315_06298cbf], a0);
        }

        jbyte SmallFloat::floatToByte52(jfloat a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticByteMethod(cls, mids$[mid_floatToByte52_06298cbf], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SmallFloat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SmallFloat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SmallFloat_byte315ToFloat(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SmallFloat_byte52ToFloat(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SmallFloat_byteToFloat(PyTypeObject *type, PyObject *args);
        static PyObject *t_SmallFloat_floatToByte(PyTypeObject *type, PyObject *args);
        static PyObject *t_SmallFloat_floatToByte315(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SmallFloat_floatToByte52(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_SmallFloat__methods_[] = {
          DECLARE_METHOD(t_SmallFloat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, byte315ToFloat, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, byte52ToFloat, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, byteToFloat, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, floatToByte, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, floatToByte315, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, floatToByte52, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SmallFloat, t_SmallFloat, ::java::lang::Object, SmallFloat, abstract_init, 0, 0, 0, 0, 0);

        void t_SmallFloat::install(PyObject *module)
        {
          installType(&PY_TYPE(SmallFloat), module, "SmallFloat", 0);
        }

        void t_SmallFloat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SmallFloat).tp_dict, "class_", make_descriptor(SmallFloat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SmallFloat).tp_dict, "wrapfn_", make_descriptor(t_SmallFloat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SmallFloat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SmallFloat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SmallFloat::initializeClass, 1)))
            return NULL;
          return t_SmallFloat::wrap_Object(SmallFloat(((t_SmallFloat *) arg)->object.this$));
        }
        static PyObject *t_SmallFloat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SmallFloat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SmallFloat_byte315ToFloat(PyTypeObject *type, PyObject *arg)
        {
          jbyte a0;
          jfloat result;

          if (!parseArg(arg, "B", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::byte315ToFloat(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "byte315ToFloat", arg);
          return NULL;
        }

        static PyObject *t_SmallFloat_byte52ToFloat(PyTypeObject *type, PyObject *arg)
        {
          jbyte a0;
          jfloat result;

          if (!parseArg(arg, "B", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::byte52ToFloat(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "byte52ToFloat", arg);
          return NULL;
        }

        static PyObject *t_SmallFloat_byteToFloat(PyTypeObject *type, PyObject *args)
        {
          jbyte a0;
          jint a1;
          jint a2;
          jfloat result;

          if (!parseArgs(args, "BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::byteToFloat(a0, a1, a2));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "byteToFloat", args);
          return NULL;
        }

        static PyObject *t_SmallFloat_floatToByte(PyTypeObject *type, PyObject *args)
        {
          jfloat a0;
          jint a1;
          jint a2;
          jbyte result;

          if (!parseArgs(args, "FII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::floatToByte(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "floatToByte", args);
          return NULL;
        }

        static PyObject *t_SmallFloat_floatToByte315(PyTypeObject *type, PyObject *arg)
        {
          jfloat a0;
          jbyte result;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::floatToByte315(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "floatToByte315", arg);
          return NULL;
        }

        static PyObject *t_SmallFloat_floatToByte52(PyTypeObject *type, PyObject *arg)
        {
          jfloat a0;
          jbyte result;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::floatToByte52(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "floatToByte52", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/DirectSpellChecker.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/spell/SuggestMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *DirectSpellChecker::class$ = NULL;
          jmethodID *DirectSpellChecker::mids$ = NULL;
          bool DirectSpellChecker::live$ = false;
          ::org::apache::lucene::search::spell::StringDistance *DirectSpellChecker::INTERNAL_LEVENSHTEIN = NULL;

          jclass DirectSpellChecker::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/DirectSpellChecker");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getAccuracy_54c6a176] = env->getMethodID(cls, "getAccuracy", "()F");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_getDistance_a5face5e] = env->getMethodID(cls, "getDistance", "()Lorg/apache/lucene/search/spell/StringDistance;");
              mids$[mid_getLowerCaseTerms_54c6a16a] = env->getMethodID(cls, "getLowerCaseTerms", "()Z");
              mids$[mid_getMaxEdits_54c6a179] = env->getMethodID(cls, "getMaxEdits", "()I");
              mids$[mid_getMaxInspections_54c6a179] = env->getMethodID(cls, "getMaxInspections", "()I");
              mids$[mid_getMaxQueryFrequency_54c6a176] = env->getMethodID(cls, "getMaxQueryFrequency", "()F");
              mids$[mid_getMinPrefix_54c6a179] = env->getMethodID(cls, "getMinPrefix", "()I");
              mids$[mid_getMinQueryLength_54c6a179] = env->getMethodID(cls, "getMinQueryLength", "()I");
              mids$[mid_getThresholdFrequency_54c6a176] = env->getMethodID(cls, "getThresholdFrequency", "()F");
              mids$[mid_setAccuracy_06298cab] = env->getMethodID(cls, "setAccuracy", "(F)V");
              mids$[mid_setComparator_6ffdd545] = env->getMethodID(cls, "setComparator", "(Ljava/util/Comparator;)V");
              mids$[mid_setDistance_9c934047] = env->getMethodID(cls, "setDistance", "(Lorg/apache/lucene/search/spell/StringDistance;)V");
              mids$[mid_setLowerCaseTerms_bb0c767f] = env->getMethodID(cls, "setLowerCaseTerms", "(Z)V");
              mids$[mid_setMaxEdits_39c7bd3c] = env->getMethodID(cls, "setMaxEdits", "(I)V");
              mids$[mid_setMaxInspections_39c7bd3c] = env->getMethodID(cls, "setMaxInspections", "(I)V");
              mids$[mid_setMaxQueryFrequency_06298cab] = env->getMethodID(cls, "setMaxQueryFrequency", "(F)V");
              mids$[mid_setMinPrefix_39c7bd3c] = env->getMethodID(cls, "setMinPrefix", "(I)V");
              mids$[mid_setMinQueryLength_39c7bd3c] = env->getMethodID(cls, "setMinQueryLength", "(I)V");
              mids$[mid_setThresholdFrequency_06298cab] = env->getMethodID(cls, "setThresholdFrequency", "(F)V");
              mids$[mid_suggestSimilar_45727077] = env->getMethodID(cls, "suggestSimilar", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;)[Lorg/apache/lucene/search/spell/SuggestWord;");
              mids$[mid_suggestSimilar_cd50864e] = env->getMethodID(cls, "suggestSimilar", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/spell/SuggestMode;)[Lorg/apache/lucene/search/spell/SuggestWord;");
              mids$[mid_suggestSimilar_96cb19cd] = env->getMethodID(cls, "suggestSimilar", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/spell/SuggestMode;F)[Lorg/apache/lucene/search/spell/SuggestWord;");
              mids$[mid_suggestSimilar_dc649c5f] = env->getMethodID(cls, "suggestSimilar", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;IIFLorg/apache/lucene/util/CharsRef;)Ljava/util/Collection;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              INTERNAL_LEVENSHTEIN = new ::org::apache::lucene::search::spell::StringDistance(env->getStaticObjectField(cls, "INTERNAL_LEVENSHTEIN", "Lorg/apache/lucene/search/spell/StringDistance;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DirectSpellChecker::DirectSpellChecker() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat DirectSpellChecker::getAccuracy() const
          {
            return env->callFloatMethod(this$, mids$[mid_getAccuracy_54c6a176]);
          }

          ::java::util::Comparator DirectSpellChecker::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          ::org::apache::lucene::search::spell::StringDistance DirectSpellChecker::getDistance() const
          {
            return ::org::apache::lucene::search::spell::StringDistance(env->callObjectMethod(this$, mids$[mid_getDistance_a5face5e]));
          }

          jboolean DirectSpellChecker::getLowerCaseTerms() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getLowerCaseTerms_54c6a16a]);
          }

          jint DirectSpellChecker::getMaxEdits() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxEdits_54c6a179]);
          }

          jint DirectSpellChecker::getMaxInspections() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxInspections_54c6a179]);
          }

          jfloat DirectSpellChecker::getMaxQueryFrequency() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMaxQueryFrequency_54c6a176]);
          }

          jint DirectSpellChecker::getMinPrefix() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinPrefix_54c6a179]);
          }

          jint DirectSpellChecker::getMinQueryLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinQueryLength_54c6a179]);
          }

          jfloat DirectSpellChecker::getThresholdFrequency() const
          {
            return env->callFloatMethod(this$, mids$[mid_getThresholdFrequency_54c6a176]);
          }

          void DirectSpellChecker::setAccuracy(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAccuracy_06298cab], a0);
          }

          void DirectSpellChecker::setComparator(const ::java::util::Comparator & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setComparator_6ffdd545], a0.this$);
          }

          void DirectSpellChecker::setDistance(const ::org::apache::lucene::search::spell::StringDistance & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDistance_9c934047], a0.this$);
          }

          void DirectSpellChecker::setLowerCaseTerms(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setLowerCaseTerms_bb0c767f], a0);
          }

          void DirectSpellChecker::setMaxEdits(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxEdits_39c7bd3c], a0);
          }

          void DirectSpellChecker::setMaxInspections(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxInspections_39c7bd3c], a0);
          }

          void DirectSpellChecker::setMaxQueryFrequency(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxQueryFrequency_06298cab], a0);
          }

          void DirectSpellChecker::setMinPrefix(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinPrefix_39c7bd3c], a0);
          }

          void DirectSpellChecker::setMinQueryLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinQueryLength_39c7bd3c], a0);
          }

          void DirectSpellChecker::setThresholdFrequency(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setThresholdFrequency_06298cab], a0);
          }

          JArray< ::org::apache::lucene::search::spell::SuggestWord > DirectSpellChecker::suggestSimilar(const ::org::apache::lucene::index::Term & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2) const
          {
            return JArray< ::org::apache::lucene::search::spell::SuggestWord >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_45727077], a0.this$, a1, a2.this$));
          }

          JArray< ::org::apache::lucene::search::spell::SuggestWord > DirectSpellChecker::suggestSimilar(const ::org::apache::lucene::index::Term & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::org::apache::lucene::search::spell::SuggestMode & a3) const
          {
            return JArray< ::org::apache::lucene::search::spell::SuggestWord >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_cd50864e], a0.this$, a1, a2.this$, a3.this$));
          }

          JArray< ::org::apache::lucene::search::spell::SuggestWord > DirectSpellChecker::suggestSimilar(const ::org::apache::lucene::index::Term & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::org::apache::lucene::search::spell::SuggestMode & a3, jfloat a4) const
          {
            return JArray< ::org::apache::lucene::search::spell::SuggestWord >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_96cb19cd], a0.this$, a1, a2.this$, a3.this$, a4));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_DirectSpellChecker_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectSpellChecker_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DirectSpellChecker_init_(t_DirectSpellChecker *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DirectSpellChecker_getAccuracy(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getComparator(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getDistance(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getLowerCaseTerms(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getMaxEdits(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getMaxInspections(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getMaxQueryFrequency(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getMinPrefix(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getMinQueryLength(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getThresholdFrequency(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_setAccuracy(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setComparator(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setDistance(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setLowerCaseTerms(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setMaxEdits(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setMaxInspections(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setMaxQueryFrequency(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setMinPrefix(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setMinQueryLength(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setThresholdFrequency(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_suggestSimilar(t_DirectSpellChecker *self, PyObject *args);
          static PyObject *t_DirectSpellChecker_get__accuracy(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__accuracy(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__comparator(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__comparator(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__distance(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__distance(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__lowerCaseTerms(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__lowerCaseTerms(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__maxEdits(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__maxEdits(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__maxInspections(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__maxInspections(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__maxQueryFrequency(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__maxQueryFrequency(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__minPrefix(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__minPrefix(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__minQueryLength(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__minQueryLength(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__thresholdFrequency(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__thresholdFrequency(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyGetSetDef t_DirectSpellChecker__fields_[] = {
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, accuracy),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, comparator),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, distance),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, lowerCaseTerms),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, maxEdits),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, maxInspections),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, maxQueryFrequency),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, minPrefix),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, minQueryLength),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, thresholdFrequency),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DirectSpellChecker__methods_[] = {
            DECLARE_METHOD(t_DirectSpellChecker, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectSpellChecker, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectSpellChecker, getAccuracy, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getDistance, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getLowerCaseTerms, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getMaxEdits, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getMaxInspections, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getMaxQueryFrequency, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getMinPrefix, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getMinQueryLength, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getThresholdFrequency, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, setAccuracy, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setComparator, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setDistance, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setLowerCaseTerms, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setMaxEdits, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setMaxInspections, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setMaxQueryFrequency, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setMinPrefix, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setMinQueryLength, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setThresholdFrequency, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, suggestSimilar, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DirectSpellChecker, t_DirectSpellChecker, ::java::lang::Object, DirectSpellChecker, t_DirectSpellChecker_init_, 0, 0, t_DirectSpellChecker__fields_, 0, 0);

          void t_DirectSpellChecker::install(PyObject *module)
          {
            installType(&PY_TYPE(DirectSpellChecker), module, "DirectSpellChecker", 0);
          }

          void t_DirectSpellChecker::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DirectSpellChecker).tp_dict, "class_", make_descriptor(DirectSpellChecker::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DirectSpellChecker).tp_dict, "wrapfn_", make_descriptor(t_DirectSpellChecker::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DirectSpellChecker).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DirectSpellChecker::initializeClass);
            PyDict_SetItemString(PY_TYPE(DirectSpellChecker).tp_dict, "INTERNAL_LEVENSHTEIN", make_descriptor(::org::apache::lucene::search::spell::t_StringDistance::wrap_Object(*DirectSpellChecker::INTERNAL_LEVENSHTEIN)));
          }

          static PyObject *t_DirectSpellChecker_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DirectSpellChecker::initializeClass, 1)))
              return NULL;
            return t_DirectSpellChecker::wrap_Object(DirectSpellChecker(((t_DirectSpellChecker *) arg)->object.this$));
          }
          static PyObject *t_DirectSpellChecker_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DirectSpellChecker::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DirectSpellChecker_init_(t_DirectSpellChecker *self, PyObject *args, PyObject *kwds)
          {
            DirectSpellChecker object((jobject) NULL);

            INT_CALL(object = DirectSpellChecker());
            self->object = object;

            return 0;
          }

          static PyObject *t_DirectSpellChecker_getAccuracy(t_DirectSpellChecker *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getAccuracy());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_DirectSpellChecker_getComparator(t_DirectSpellChecker *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::search::spell::PY_TYPE(SuggestWord));
          }

          static PyObject *t_DirectSpellChecker_getDistance(t_DirectSpellChecker *self)
          {
            ::org::apache::lucene::search::spell::StringDistance result((jobject) NULL);
            OBJ_CALL(result = self->object.getDistance());
            return ::org::apache::lucene::search::spell::t_StringDistance::wrap_Object(result);
          }

          static PyObject *t_DirectSpellChecker_getLowerCaseTerms(t_DirectSpellChecker *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getLowerCaseTerms());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_DirectSpellChecker_getMaxEdits(t_DirectSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxEdits());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_DirectSpellChecker_getMaxInspections(t_DirectSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxInspections());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_DirectSpellChecker_getMaxQueryFrequency(t_DirectSpellChecker *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMaxQueryFrequency());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_DirectSpellChecker_getMinPrefix(t_DirectSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinPrefix());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_DirectSpellChecker_getMinQueryLength(t_DirectSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinQueryLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_DirectSpellChecker_getThresholdFrequency(t_DirectSpellChecker *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getThresholdFrequency());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_DirectSpellChecker_setAccuracy(t_DirectSpellChecker *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setAccuracy(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAccuracy", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setComparator(t_DirectSpellChecker *self, PyObject *arg)
          {
            ::java::util::Comparator a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
            {
              OBJ_CALL(self->object.setComparator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setComparator", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setDistance(t_DirectSpellChecker *self, PyObject *arg)
          {
            ::org::apache::lucene::search::spell::StringDistance a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::spell::StringDistance::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setDistance(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDistance", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setLowerCaseTerms(t_DirectSpellChecker *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setLowerCaseTerms(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLowerCaseTerms", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setMaxEdits(t_DirectSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxEdits(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxEdits", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setMaxInspections(t_DirectSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxInspections(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxInspections", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setMaxQueryFrequency(t_DirectSpellChecker *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setMaxQueryFrequency(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxQueryFrequency", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setMinPrefix(t_DirectSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinPrefix(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinPrefix", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setMinQueryLength(t_DirectSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinQueryLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinQueryLength", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setThresholdFrequency(t_DirectSpellChecker *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setThresholdFrequency(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setThresholdFrequency", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_suggestSimilar(t_DirectSpellChecker *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                JArray< ::org::apache::lucene::search::spell::SuggestWord > result((jobject) NULL);

                if (!parseArgs(args, "kIk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spell::t_SuggestWord::wrap_jobject);
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                ::org::apache::lucene::search::spell::SuggestMode a3((jobject) NULL);
                PyTypeObject **p3;
                JArray< ::org::apache::lucene::search::spell::SuggestWord > result((jobject) NULL);

                if (!parseArgs(args, "kIkK", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2, a3));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spell::t_SuggestWord::wrap_jobject);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                ::org::apache::lucene::search::spell::SuggestMode a3((jobject) NULL);
                PyTypeObject **p3;
                jfloat a4;
                JArray< ::org::apache::lucene::search::spell::SuggestWord > result((jobject) NULL);

                if (!parseArgs(args, "kIkKF", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_, &a4))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2, a3, a4));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spell::t_SuggestWord::wrap_jobject);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "suggestSimilar", args);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_get__accuracy(t_DirectSpellChecker *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getAccuracy());
            return PyFloat_FromDouble((double) value);
          }
          static int t_DirectSpellChecker_set__accuracy(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setAccuracy(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "accuracy", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__comparator(t_DirectSpellChecker *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
          static int t_DirectSpellChecker_set__comparator(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Comparator value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Comparator::initializeClass, &value))
              {
                INT_CALL(self->object.setComparator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "comparator", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__distance(t_DirectSpellChecker *self, void *data)
          {
            ::org::apache::lucene::search::spell::StringDistance value((jobject) NULL);
            OBJ_CALL(value = self->object.getDistance());
            return ::org::apache::lucene::search::spell::t_StringDistance::wrap_Object(value);
          }
          static int t_DirectSpellChecker_set__distance(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::spell::StringDistance value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::spell::StringDistance::initializeClass, &value))
              {
                INT_CALL(self->object.setDistance(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "distance", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__lowerCaseTerms(t_DirectSpellChecker *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getLowerCaseTerms());
            Py_RETURN_BOOL(value);
          }
          static int t_DirectSpellChecker_set__lowerCaseTerms(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setLowerCaseTerms(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "lowerCaseTerms", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__maxEdits(t_DirectSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxEdits());
            return PyInt_FromLong((long) value);
          }
          static int t_DirectSpellChecker_set__maxEdits(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxEdits(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxEdits", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__maxInspections(t_DirectSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxInspections());
            return PyInt_FromLong((long) value);
          }
          static int t_DirectSpellChecker_set__maxInspections(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxInspections(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxInspections", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__maxQueryFrequency(t_DirectSpellChecker *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMaxQueryFrequency());
            return PyFloat_FromDouble((double) value);
          }
          static int t_DirectSpellChecker_set__maxQueryFrequency(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setMaxQueryFrequency(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxQueryFrequency", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__minPrefix(t_DirectSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinPrefix());
            return PyInt_FromLong((long) value);
          }
          static int t_DirectSpellChecker_set__minPrefix(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinPrefix(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minPrefix", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__minQueryLength(t_DirectSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinQueryLength());
            return PyInt_FromLong((long) value);
          }
          static int t_DirectSpellChecker_set__minQueryLength(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinQueryLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minQueryLength", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__thresholdFrequency(t_DirectSpellChecker *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getThresholdFrequency());
            return PyFloat_FromDouble((double) value);
          }
          static int t_DirectSpellChecker_set__thresholdFrequency(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setThresholdFrequency(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "thresholdFrequency", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "java/util/List.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/CompositeReaderContext.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexReaderContext::class$ = NULL;
        jmethodID *IndexReaderContext::mids$ = NULL;
        jfieldID *IndexReaderContext::fids$ = NULL;
        bool IndexReaderContext::live$ = false;

        jclass IndexReaderContext::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexReaderContext");

            mids$ = new jmethodID[max_mid];
            mids$[mid_children_87851566] = env->getMethodID(cls, "children", "()Ljava/util/List;");
            mids$[mid_leaves_87851566] = env->getMethodID(cls, "leaves", "()Ljava/util/List;");
            mids$[mid_reader_94bbd010] = env->getMethodID(cls, "reader", "()Lorg/apache/lucene/index/IndexReader;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docBaseInParent] = env->getFieldID(cls, "docBaseInParent", "I");
            fids$[fid_isTopLevel] = env->getFieldID(cls, "isTopLevel", "Z");
            fids$[fid_ordInParent] = env->getFieldID(cls, "ordInParent", "I");
            fids$[fid_parent] = env->getFieldID(cls, "parent", "Lorg/apache/lucene/index/CompositeReaderContext;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::List IndexReaderContext::children() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_children_87851566]));
        }

        ::java::util::List IndexReaderContext::leaves() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_leaves_87851566]));
        }

        ::org::apache::lucene::index::IndexReader IndexReaderContext::reader() const
        {
          return ::org::apache::lucene::index::IndexReader(env->callObjectMethod(this$, mids$[mid_reader_94bbd010]));
        }

        jint IndexReaderContext::_get_docBaseInParent() const
        {
          return env->getIntField(this$, fids$[fid_docBaseInParent]);
        }

        jboolean IndexReaderContext::_get_isTopLevel() const
        {
          return env->getBooleanField(this$, fids$[fid_isTopLevel]);
        }

        jint IndexReaderContext::_get_ordInParent() const
        {
          return env->getIntField(this$, fids$[fid_ordInParent]);
        }

        ::org::apache::lucene::index::CompositeReaderContext IndexReaderContext::_get_parent() const
        {
          return ::org::apache::lucene::index::CompositeReaderContext(env->getObjectField(this$, fids$[fid_parent]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexReaderContext_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReaderContext_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReaderContext_children(t_IndexReaderContext *self);
        static PyObject *t_IndexReaderContext_leaves(t_IndexReaderContext *self);
        static PyObject *t_IndexReaderContext_reader(t_IndexReaderContext *self);
        static PyObject *t_IndexReaderContext_get__docBaseInParent(t_IndexReaderContext *self, void *data);
        static PyObject *t_IndexReaderContext_get__isTopLevel(t_IndexReaderContext *self, void *data);
        static PyObject *t_IndexReaderContext_get__ordInParent(t_IndexReaderContext *self, void *data);
        static PyObject *t_IndexReaderContext_get__parent(t_IndexReaderContext *self, void *data);

        static PyGetSetDef t_IndexReaderContext__fields_[] = {
          DECLARE_GET_FIELD(t_IndexReaderContext, docBaseInParent),
          DECLARE_GET_FIELD(t_IndexReaderContext, isTopLevel),
          DECLARE_GET_FIELD(t_IndexReaderContext, ordInParent),
          DECLARE_GET_FIELD(t_IndexReaderContext, parent),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexReaderContext__methods_[] = {
          DECLARE_METHOD(t_IndexReaderContext, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReaderContext, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReaderContext, children, METH_NOARGS),
          DECLARE_METHOD(t_IndexReaderContext, leaves, METH_NOARGS),
          DECLARE_METHOD(t_IndexReaderContext, reader, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexReaderContext, t_IndexReaderContext, ::java::lang::Object, IndexReaderContext, abstract_init, 0, 0, t_IndexReaderContext__fields_, 0, 0);

        void t_IndexReaderContext::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexReaderContext), module, "IndexReaderContext", 0);
        }

        void t_IndexReaderContext::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexReaderContext).tp_dict, "class_", make_descriptor(IndexReaderContext::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexReaderContext).tp_dict, "wrapfn_", make_descriptor(t_IndexReaderContext::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexReaderContext).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexReaderContext_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexReaderContext::initializeClass, 1)))
            return NULL;
          return t_IndexReaderContext::wrap_Object(IndexReaderContext(((t_IndexReaderContext *) arg)->object.this$));
        }
        static PyObject *t_IndexReaderContext_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexReaderContext::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexReaderContext_children(t_IndexReaderContext *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.children());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(IndexReaderContext));
        }

        static PyObject *t_IndexReaderContext_leaves(t_IndexReaderContext *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.leaves());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(AtomicReaderContext));
        }

        static PyObject *t_IndexReaderContext_reader(t_IndexReaderContext *self)
        {
          ::org::apache::lucene::index::IndexReader result((jobject) NULL);
          OBJ_CALL(result = self->object.reader());
          return ::org::apache::lucene::index::t_IndexReader::wrap_Object(result);
        }

        static PyObject *t_IndexReaderContext_get__docBaseInParent(t_IndexReaderContext *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docBaseInParent());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_IndexReaderContext_get__isTopLevel(t_IndexReaderContext *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_isTopLevel());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_IndexReaderContext_get__ordInParent(t_IndexReaderContext *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_ordInParent());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_IndexReaderContext_get__parent(t_IndexReaderContext *self, void *data)
        {
          ::org::apache::lucene::index::CompositeReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object._get_parent());
          return ::org::apache::lucene::index::t_CompositeReaderContext::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/analysis/tokenattributes/PayloadAttribute.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PayloadAttributeImpl::class$ = NULL;
          jmethodID *PayloadAttributeImpl::mids$ = NULL;
          bool PayloadAttributeImpl::live$ = false;

          jclass PayloadAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_7bc03dc4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_clone_fdeb4a36] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl;");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getPayload_4ae19461] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setPayload_7bc03dc4] = env->getMethodID(cls, "setPayload", "(Lorg/apache/lucene/util/BytesRef;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadAttributeImpl::PayloadAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          PayloadAttributeImpl::PayloadAttributeImpl(const ::org::apache::lucene::util::BytesRef & a0) : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_7bc03dc4, a0.this$)) {}

          void PayloadAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          PayloadAttributeImpl PayloadAttributeImpl::clone() const
          {
            return PayloadAttributeImpl(env->callObjectMethod(this$, mids$[mid_clone_fdeb4a36]));
          }

          void PayloadAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jboolean PayloadAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef PayloadAttributeImpl::getPayload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_4ae19461]));
          }

          jint PayloadAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void PayloadAttributeImpl::setPayload(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPayload_7bc03dc4], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PayloadAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadAttributeImpl_init_(t_PayloadAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadAttributeImpl_clear(t_PayloadAttributeImpl *self, PyObject *args);
          static PyObject *t_PayloadAttributeImpl_clone(t_PayloadAttributeImpl *self, PyObject *args);
          static PyObject *t_PayloadAttributeImpl_copyTo(t_PayloadAttributeImpl *self, PyObject *args);
          static PyObject *t_PayloadAttributeImpl_equals(t_PayloadAttributeImpl *self, PyObject *args);
          static PyObject *t_PayloadAttributeImpl_getPayload(t_PayloadAttributeImpl *self);
          static PyObject *t_PayloadAttributeImpl_hashCode(t_PayloadAttributeImpl *self, PyObject *args);
          static PyObject *t_PayloadAttributeImpl_setPayload(t_PayloadAttributeImpl *self, PyObject *arg);
          static PyObject *t_PayloadAttributeImpl_get__payload(t_PayloadAttributeImpl *self, void *data);
          static int t_PayloadAttributeImpl_set__payload(t_PayloadAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_PayloadAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_PayloadAttributeImpl, payload),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PayloadAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_PayloadAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, clone, METH_VARARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, getPayload, METH_NOARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, setPayload, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadAttributeImpl, t_PayloadAttributeImpl, ::org::apache::lucene::util::AttributeImpl, PayloadAttributeImpl, t_PayloadAttributeImpl_init_, 0, 0, t_PayloadAttributeImpl__fields_, 0, 0);

          void t_PayloadAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadAttributeImpl), module, "PayloadAttributeImpl", 0);
          }

          void t_PayloadAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadAttributeImpl).tp_dict, "class_", make_descriptor(PayloadAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_PayloadAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_PayloadAttributeImpl::wrap_Object(PayloadAttributeImpl(((t_PayloadAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_PayloadAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadAttributeImpl_init_(t_PayloadAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                PayloadAttributeImpl object((jobject) NULL);

                INT_CALL(object = PayloadAttributeImpl());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                PayloadAttributeImpl object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
                {
                  INT_CALL(object = PayloadAttributeImpl(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PayloadAttributeImpl_clear(t_PayloadAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PayloadAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_PayloadAttributeImpl_clone(t_PayloadAttributeImpl *self, PyObject *args)
          {
            PayloadAttributeImpl result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_PayloadAttributeImpl::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PayloadAttributeImpl), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_PayloadAttributeImpl_copyTo(t_PayloadAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PayloadAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_PayloadAttributeImpl_equals(t_PayloadAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PayloadAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PayloadAttributeImpl_getPayload(t_PayloadAttributeImpl *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_PayloadAttributeImpl_hashCode(t_PayloadAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PayloadAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PayloadAttributeImpl_setPayload(t_PayloadAttributeImpl *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setPayload(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPayload", arg);
            return NULL;
          }

          static PyObject *t_PayloadAttributeImpl_get__payload(t_PayloadAttributeImpl *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
          static int t_PayloadAttributeImpl_set__payload(t_PayloadAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::util::BytesRef value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
              {
                INT_CALL(self->object.setPayload(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "payload", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/MatchAllDocsQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *MatchAllDocsQueryNodeProcessor::class$ = NULL;
              jmethodID *MatchAllDocsQueryNodeProcessor::mids$ = NULL;
              bool MatchAllDocsQueryNodeProcessor::live$ = false;

              jclass MatchAllDocsQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/MatchAllDocsQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MatchAllDocsQueryNodeProcessor::MatchAllDocsQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_MatchAllDocsQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MatchAllDocsQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MatchAllDocsQueryNodeProcessor_init_(t_MatchAllDocsQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_MatchAllDocsQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_MatchAllDocsQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchAllDocsQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MatchAllDocsQueryNodeProcessor, t_MatchAllDocsQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, MatchAllDocsQueryNodeProcessor, t_MatchAllDocsQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_MatchAllDocsQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(MatchAllDocsQueryNodeProcessor), module, "MatchAllDocsQueryNodeProcessor", 0);
              }

              void t_MatchAllDocsQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNodeProcessor).tp_dict, "class_", make_descriptor(MatchAllDocsQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_MatchAllDocsQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MatchAllDocsQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MatchAllDocsQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_MatchAllDocsQueryNodeProcessor::wrap_Object(MatchAllDocsQueryNodeProcessor(((t_MatchAllDocsQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_MatchAllDocsQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MatchAllDocsQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MatchAllDocsQueryNodeProcessor_init_(t_MatchAllDocsQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                MatchAllDocsQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = MatchAllDocsQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiNormalizationFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiNormalizationFilterFactory::class$ = NULL;
          jmethodID *HindiNormalizationFilterFactory::mids$ = NULL;
          bool HindiNormalizationFilterFactory::live$ = false;

          jclass HindiNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiNormalizationFilterFactory::HindiNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream HindiNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory HindiNormalizationFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiNormalizationFilterFactory_init_(t_HindiNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiNormalizationFilterFactory_create(t_HindiNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_HindiNormalizationFilterFactory_getMultiTermComponent(t_HindiNormalizationFilterFactory *self);
          static PyObject *t_HindiNormalizationFilterFactory_get__multiTermComponent(t_HindiNormalizationFilterFactory *self, void *data);
          static PyGetSetDef t_HindiNormalizationFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_HindiNormalizationFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_HindiNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HindiNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_HindiNormalizationFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HindiNormalizationFilterFactory, t_HindiNormalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, HindiNormalizationFilterFactory, t_HindiNormalizationFilterFactory_init_, 0, 0, t_HindiNormalizationFilterFactory__fields_, 0, 0);

          void t_HindiNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiNormalizationFilterFactory), module, "HindiNormalizationFilterFactory", 0);
          }

          void t_HindiNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HindiNormalizationFilterFactory).tp_dict, "class_", make_descriptor(HindiNormalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HindiNormalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_HindiNormalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HindiNormalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HindiNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HindiNormalizationFilterFactory::wrap_Object(HindiNormalizationFilterFactory(((t_HindiNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HindiNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiNormalizationFilterFactory_init_(t_HindiNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HindiNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HindiNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HindiNormalizationFilterFactory_create(t_HindiNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(HindiNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_HindiNormalizationFilterFactory_getMultiTermComponent(t_HindiNormalizationFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_HindiNormalizationFilterFactory_get__multiTermComponent(t_HindiNormalizationFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldPhraseList::class$ = NULL;
          jmethodID *FieldPhraseList::mids$ = NULL;
          bool FieldPhraseList::live$ = false;

          jclass FieldPhraseList::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldPhraseList");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e0573fb6] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;)V");
              mids$[mid_init$_ed2eefc8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/vectorhighlight/FieldTermStack;Lorg/apache/lucene/search/vectorhighlight/FieldQuery;)V");
              mids$[mid_init$_5d494a16] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/vectorhighlight/FieldTermStack;Lorg/apache/lucene/search/vectorhighlight/FieldQuery;I)V");
              mids$[mid_addIfNoOverlap_3f58e089] = env->getMethodID(cls, "addIfNoOverlap", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo;)V");
              mids$[mid_getPhraseList_87851566] = env->getMethodID(cls, "getPhraseList", "()Ljava/util/List;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldPhraseList::FieldPhraseList(const JArray< FieldPhraseList > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e0573fb6, a0.this$)) {}

          FieldPhraseList::FieldPhraseList(const ::org::apache::lucene::search::vectorhighlight::FieldTermStack & a0, const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ed2eefc8, a0.this$, a1.this$)) {}

          FieldPhraseList::FieldPhraseList(const ::org::apache::lucene::search::vectorhighlight::FieldTermStack & a0, const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5d494a16, a0.this$, a1.this$, a2)) {}

          void FieldPhraseList::addIfNoOverlap(const ::org::apache::lucene::search::vectorhighlight::FieldPhraseList$WeightedPhraseInfo & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_addIfNoOverlap_3f58e089], a0.this$);
          }

          ::java::util::List FieldPhraseList::getPhraseList() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getPhraseList_87851566]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldPhraseList_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldPhraseList_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldPhraseList_init_(t_FieldPhraseList *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldPhraseList_addIfNoOverlap(t_FieldPhraseList *self, PyObject *arg);
          static PyObject *t_FieldPhraseList_getPhraseList(t_FieldPhraseList *self);
          static PyObject *t_FieldPhraseList_get__phraseList(t_FieldPhraseList *self, void *data);
          static PyGetSetDef t_FieldPhraseList__fields_[] = {
            DECLARE_GET_FIELD(t_FieldPhraseList, phraseList),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldPhraseList__methods_[] = {
            DECLARE_METHOD(t_FieldPhraseList, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList, addIfNoOverlap, METH_O),
            DECLARE_METHOD(t_FieldPhraseList, getPhraseList, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldPhraseList, t_FieldPhraseList, ::java::lang::Object, FieldPhraseList, t_FieldPhraseList_init_, 0, 0, t_FieldPhraseList__fields_, 0, 0);

          void t_FieldPhraseList::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldPhraseList), module, "FieldPhraseList", 0);
            PyDict_SetItemString(PY_TYPE(FieldPhraseList).tp_dict, "WeightedPhraseInfo", make_descriptor(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo)));
          }

          void t_FieldPhraseList::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldPhraseList).tp_dict, "class_", make_descriptor(FieldPhraseList::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldPhraseList).tp_dict, "wrapfn_", make_descriptor(t_FieldPhraseList::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldPhraseList).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldPhraseList_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldPhraseList::initializeClass, 1)))
              return NULL;
            return t_FieldPhraseList::wrap_Object(FieldPhraseList(((t_FieldPhraseList *) arg)->object.this$));
          }
          static PyObject *t_FieldPhraseList_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldPhraseList::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldPhraseList_init_(t_FieldPhraseList *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< FieldPhraseList > a0((jobject) NULL);
                FieldPhraseList object((jobject) NULL);

                if (!parseArgs(args, "[k", FieldPhraseList::initializeClass, &a0))
                {
                  INT_CALL(object = FieldPhraseList(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldTermStack a0((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a1((jobject) NULL);
                FieldPhraseList object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::vectorhighlight::FieldTermStack::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = FieldPhraseList(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldTermStack a0((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a1((jobject) NULL);
                jint a2;
                FieldPhraseList object((jobject) NULL);

                if (!parseArgs(args, "kkI", ::org::apache::lucene::search::vectorhighlight::FieldTermStack::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = FieldPhraseList(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldPhraseList_addIfNoOverlap(t_FieldPhraseList *self, PyObject *arg)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldPhraseList$WeightedPhraseInfo a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::vectorhighlight::FieldPhraseList$WeightedPhraseInfo::initializeClass, &a0))
            {
              OBJ_CALL(self->object.addIfNoOverlap(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addIfNoOverlap", arg);
            return NULL;
          }

          static PyObject *t_FieldPhraseList_getPhraseList(t_FieldPhraseList *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getPhraseList());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldPhraseList$WeightedPhraseInfo));
          }

          static PyObject *t_FieldPhraseList_get__phraseList(t_FieldPhraseList *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getPhraseList());
            return ::java::util::t_List::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternReplaceCharFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/CharFilter.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternReplaceCharFilterFactory::class$ = NULL;
          jmethodID *PatternReplaceCharFilterFactory::mids$ = NULL;
          bool PatternReplaceCharFilterFactory::live$ = false;

          jclass PatternReplaceCharFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternReplaceCharFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_567624d1] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Lorg/apache/lucene/analysis/CharFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternReplaceCharFilterFactory::PatternReplaceCharFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::CharFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::CharFilter PatternReplaceCharFilterFactory::create(const ::java::io::Reader & a0) const
          {
            return ::org::apache::lucene::analysis::CharFilter(env->callObjectMethod(this$, mids$[mid_create_567624d1], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternReplaceCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternReplaceCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternReplaceCharFilterFactory_init_(t_PatternReplaceCharFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternReplaceCharFilterFactory_create(t_PatternReplaceCharFilterFactory *self, PyObject *args);

          static PyMethodDef t_PatternReplaceCharFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PatternReplaceCharFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceCharFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceCharFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternReplaceCharFilterFactory, t_PatternReplaceCharFilterFactory, ::org::apache::lucene::analysis::util::CharFilterFactory, PatternReplaceCharFilterFactory, t_PatternReplaceCharFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PatternReplaceCharFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternReplaceCharFilterFactory), module, "PatternReplaceCharFilterFactory", 0);
          }

          void t_PatternReplaceCharFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternReplaceCharFilterFactory).tp_dict, "class_", make_descriptor(PatternReplaceCharFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternReplaceCharFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PatternReplaceCharFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternReplaceCharFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternReplaceCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternReplaceCharFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PatternReplaceCharFilterFactory::wrap_Object(PatternReplaceCharFilterFactory(((t_PatternReplaceCharFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PatternReplaceCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternReplaceCharFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternReplaceCharFilterFactory_init_(t_PatternReplaceCharFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PatternReplaceCharFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PatternReplaceCharFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternReplaceCharFilterFactory_create(t_PatternReplaceCharFilterFactory *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::org::apache::lucene::analysis::CharFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_CharFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PatternReplaceCharFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/MultiLevelSkipListWriter.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *MultiLevelSkipListWriter::class$ = NULL;
        jmethodID *MultiLevelSkipListWriter::mids$ = NULL;
        bool MultiLevelSkipListWriter::live$ = false;

        jclass MultiLevelSkipListWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/MultiLevelSkipListWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_bufferSkip_39c7bd3c] = env->getMethodID(cls, "bufferSkip", "(I)V");
            mids$[mid_writeSkip_faad6216] = env->getMethodID(cls, "writeSkip", "(Lorg/apache/lucene/store/IndexOutput;)J");
            mids$[mid_init_54c6a166] = env->getMethodID(cls, "init", "()V");
            mids$[mid_resetSkip_54c6a166] = env->getMethodID(cls, "resetSkip", "()V");
            mids$[mid_writeSkipData_a31eeaec] = env->getMethodID(cls, "writeSkipData", "(ILorg/apache/lucene/store/IndexOutput;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void MultiLevelSkipListWriter::bufferSkip(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_bufferSkip_39c7bd3c], a0);
        }

        jlong MultiLevelSkipListWriter::writeSkip(const ::org::apache::lucene::store::IndexOutput & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_writeSkip_faad6216], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_MultiLevelSkipListWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiLevelSkipListWriter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiLevelSkipListWriter_bufferSkip(t_MultiLevelSkipListWriter *self, PyObject *arg);
        static PyObject *t_MultiLevelSkipListWriter_writeSkip(t_MultiLevelSkipListWriter *self, PyObject *arg);

        static PyMethodDef t_MultiLevelSkipListWriter__methods_[] = {
          DECLARE_METHOD(t_MultiLevelSkipListWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiLevelSkipListWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiLevelSkipListWriter, bufferSkip, METH_O),
          DECLARE_METHOD(t_MultiLevelSkipListWriter, writeSkip, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiLevelSkipListWriter, t_MultiLevelSkipListWriter, ::java::lang::Object, MultiLevelSkipListWriter, abstract_init, 0, 0, 0, 0, 0);

        void t_MultiLevelSkipListWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiLevelSkipListWriter), module, "MultiLevelSkipListWriter", 0);
        }

        void t_MultiLevelSkipListWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiLevelSkipListWriter).tp_dict, "class_", make_descriptor(MultiLevelSkipListWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiLevelSkipListWriter).tp_dict, "wrapfn_", make_descriptor(t_MultiLevelSkipListWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiLevelSkipListWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiLevelSkipListWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiLevelSkipListWriter::initializeClass, 1)))
            return NULL;
          return t_MultiLevelSkipListWriter::wrap_Object(MultiLevelSkipListWriter(((t_MultiLevelSkipListWriter *) arg)->object.this$));
        }
        static PyObject *t_MultiLevelSkipListWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiLevelSkipListWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiLevelSkipListWriter_bufferSkip(t_MultiLevelSkipListWriter *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.bufferSkip(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "bufferSkip", arg);
          return NULL;
        }

        static PyObject *t_MultiLevelSkipListWriter_writeSkip(t_MultiLevelSkipListWriter *self, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexOutput::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.writeSkip(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "writeSkip", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/store/PythonLockFactory.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {

        ::java::lang::Class *PythonLockFactory::class$ = NULL;
        jmethodID *PythonLockFactory::mids$ = NULL;
        bool PythonLockFactory::live$ = false;

        jclass PythonLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/store/PythonLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonLockFactory::PythonLockFactory() : ::org::apache::lucene::store::LockFactory(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonLockFactory::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonLockFactory::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonLockFactory::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {
        static PyObject *t_PythonLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonLockFactory_init_(t_PythonLockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonLockFactory_finalize(t_PythonLockFactory *self);
        static PyObject *t_PythonLockFactory_pythonExtension(t_PythonLockFactory *self, PyObject *args);
        static void JNICALL t_PythonLockFactory_clearLock0(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonLockFactory_makeLock1(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonLockFactory_pythonDecRef2(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonLockFactory_get__self(t_PythonLockFactory *self, void *data);
        static PyGetSetDef t_PythonLockFactory__fields_[] = {
          DECLARE_GET_FIELD(t_PythonLockFactory, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonLockFactory__methods_[] = {
          DECLARE_METHOD(t_PythonLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonLockFactory, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonLockFactory, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonLockFactory, t_PythonLockFactory, ::org::apache::lucene::store::LockFactory, PythonLockFactory, t_PythonLockFactory_init_, 0, 0, t_PythonLockFactory__fields_, 0, 0);

        void t_PythonLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonLockFactory), module, "PythonLockFactory", 1);
        }

        void t_PythonLockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonLockFactory).tp_dict, "class_", make_descriptor(PythonLockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonLockFactory).tp_dict, "wrapfn_", make_descriptor(t_PythonLockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonLockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonLockFactory::initializeClass);
          JNINativeMethod methods[] = {
            { "clearLock", "(Ljava/lang/String;)V", (void *) t_PythonLockFactory_clearLock0 },
            { "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;", (void *) t_PythonLockFactory_makeLock1 },
            { "pythonDecRef", "()V", (void *) t_PythonLockFactory_pythonDecRef2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonLockFactory::initializeClass, 1)))
            return NULL;
          return t_PythonLockFactory::wrap_Object(PythonLockFactory(((t_PythonLockFactory *) arg)->object.this$));
        }
        static PyObject *t_PythonLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonLockFactory_init_(t_PythonLockFactory *self, PyObject *args, PyObject *kwds)
        {
          PythonLockFactory object((jobject) NULL);

          INT_CALL(object = PythonLockFactory());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonLockFactory_finalize(t_PythonLockFactory *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonLockFactory_pythonExtension(t_PythonLockFactory *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static void JNICALL t_PythonLockFactory_clearLock0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLockFactory::mids$[PythonLockFactory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "clearLock", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jobject JNICALL t_PythonLockFactory_makeLock1(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLockFactory::mids$[PythonLockFactory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::store::Lock value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "makeLock", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::store::Lock::initializeClass, &value))
          {
            throwTypeError("makeLock", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonLockFactory_pythonDecRef2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLockFactory::mids$[PythonLockFactory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonLockFactory::mids$[PythonLockFactory::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonLockFactory_get__self(t_PythonLockFactory *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonAttributeImpl.h"
#include "java/lang/Throwable.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonAttributeImpl::class$ = NULL;
        jmethodID *PythonAttributeImpl::mids$ = NULL;
        bool PythonAttributeImpl::live$ = false;

        jclass PythonAttributeImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonAttributeImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonAttributeImpl::PythonAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean PythonAttributeImpl::equals(const ::java::lang::Object & a0) const
        {
          return env->callNonvirtualBooleanMethod(this$, (jclass) ::org::apache::lucene::util::AttributeImpl::class$->this$, ::java::lang::Object::mids$[::java::lang::Object::mid_equals_290588e2], a0.this$);
        }

        void PythonAttributeImpl::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jint PythonAttributeImpl::hashCode() const
        {
          return env->callNonvirtualIntMethod(this$, (jclass) ::org::apache::lucene::util::AttributeImpl::class$->this$, ::java::lang::Object::mids$[::java::lang::Object::mid_hashCode_54c6a179]);
        }

        jlong PythonAttributeImpl::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonAttributeImpl::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonAttributeImpl_init_(t_PythonAttributeImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonAttributeImpl_equals(t_PythonAttributeImpl *self, PyObject *args);
        static PyObject *t_PythonAttributeImpl_finalize(t_PythonAttributeImpl *self);
        static PyObject *t_PythonAttributeImpl_hashCode(t_PythonAttributeImpl *self, PyObject *args);
        static PyObject *t_PythonAttributeImpl_pythonExtension(t_PythonAttributeImpl *self, PyObject *args);
        static void JNICALL t_PythonAttributeImpl_clear0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonAttributeImpl_copyTo1(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonAttributeImpl_equals2(JNIEnv *jenv, jobject jobj, jobject a0);
        static jint JNICALL t_PythonAttributeImpl_hashCode3(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonAttributeImpl_pythonDecRef4(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonAttributeImpl_get__self(t_PythonAttributeImpl *self, void *data);
        static PyGetSetDef t_PythonAttributeImpl__fields_[] = {
          DECLARE_GET_FIELD(t_PythonAttributeImpl, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonAttributeImpl__methods_[] = {
          DECLARE_METHOD(t_PythonAttributeImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonAttributeImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonAttributeImpl, equals, METH_VARARGS),
          DECLARE_METHOD(t_PythonAttributeImpl, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonAttributeImpl, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_PythonAttributeImpl, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonAttributeImpl, t_PythonAttributeImpl, ::org::apache::lucene::util::AttributeImpl, PythonAttributeImpl, t_PythonAttributeImpl_init_, 0, 0, t_PythonAttributeImpl__fields_, 0, 0);

        void t_PythonAttributeImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonAttributeImpl), module, "PythonAttributeImpl", 1);
        }

        void t_PythonAttributeImpl::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonAttributeImpl).tp_dict, "class_", make_descriptor(PythonAttributeImpl::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_PythonAttributeImpl::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonAttributeImpl::initializeClass);
          JNINativeMethod methods[] = {
            { "clear", "()V", (void *) t_PythonAttributeImpl_clear0 },
            { "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V", (void *) t_PythonAttributeImpl_copyTo1 },
            { "equals", "(Ljava/lang/Object;)Z", (void *) t_PythonAttributeImpl_equals2 },
            { "hashCode", "()I", (void *) t_PythonAttributeImpl_hashCode3 },
            { "pythonDecRef", "()V", (void *) t_PythonAttributeImpl_pythonDecRef4 },
          };
          env->registerNatives(cls, methods, 5);
        }

        static PyObject *t_PythonAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonAttributeImpl::initializeClass, 1)))
            return NULL;
          return t_PythonAttributeImpl::wrap_Object(PythonAttributeImpl(((t_PythonAttributeImpl *) arg)->object.this$));
        }
        static PyObject *t_PythonAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonAttributeImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonAttributeImpl_init_(t_PythonAttributeImpl *self, PyObject *args, PyObject *kwds)
        {
          PythonAttributeImpl object((jobject) NULL);

          INT_CALL(object = PythonAttributeImpl());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonAttributeImpl_equals(t_PythonAttributeImpl *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PythonAttributeImpl), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PythonAttributeImpl_finalize(t_PythonAttributeImpl *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonAttributeImpl_hashCode(t_PythonAttributeImpl *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(PythonAttributeImpl), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_PythonAttributeImpl_pythonExtension(t_PythonAttributeImpl *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static void JNICALL t_PythonAttributeImpl_clear0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "clear", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonAttributeImpl_copyTo1(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = ::org::apache::lucene::util::t_AttributeImpl::wrap_Object(::org::apache::lucene::util::AttributeImpl(a0));
          PyObject *result = PyObject_CallMethod(obj, "copyTo", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonAttributeImpl_equals2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "equals", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("equals", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jint JNICALL t_PythonAttributeImpl_hashCode3(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "hashCode", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("hashCode", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static void JNICALL t_PythonAttributeImpl_pythonDecRef4(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonAttributeImpl_get__self(t_PythonAttributeImpl *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/stempel/StempelPolishStemFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {

          ::java::lang::Class *StempelPolishStemFilterFactory::class$ = NULL;
          jmethodID *StempelPolishStemFilterFactory::mids$ = NULL;
          bool StempelPolishStemFilterFactory::live$ = false;

          jclass StempelPolishStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/stempel/StempelPolishStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StempelPolishStemFilterFactory::StempelPolishStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream StempelPolishStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {
          static PyObject *t_StempelPolishStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StempelPolishStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StempelPolishStemFilterFactory_init_(t_StempelPolishStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StempelPolishStemFilterFactory_create(t_StempelPolishStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_StempelPolishStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_StempelPolishStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelPolishStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelPolishStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StempelPolishStemFilterFactory, t_StempelPolishStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, StempelPolishStemFilterFactory, t_StempelPolishStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_StempelPolishStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(StempelPolishStemFilterFactory), module, "StempelPolishStemFilterFactory", 0);
          }

          void t_StempelPolishStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StempelPolishStemFilterFactory).tp_dict, "class_", make_descriptor(StempelPolishStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StempelPolishStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_StempelPolishStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StempelPolishStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StempelPolishStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StempelPolishStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_StempelPolishStemFilterFactory::wrap_Object(StempelPolishStemFilterFactory(((t_StempelPolishStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_StempelPolishStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StempelPolishStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StempelPolishStemFilterFactory_init_(t_StempelPolishStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            StempelPolishStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = StempelPolishStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StempelPolishStemFilterFactory_create(t_StempelPolishStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StempelPolishStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *TermToBytesRefAttribute::class$ = NULL;
          jmethodID *TermToBytesRefAttribute::mids$ = NULL;
          bool TermToBytesRefAttribute::live$ = false;

          jclass TermToBytesRefAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_fillBytesRef_54c6a166] = env->getMethodID(cls, "fillBytesRef", "()V");
              mids$[mid_getBytesRef_4ae19461] = env->getMethodID(cls, "getBytesRef", "()Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void TermToBytesRefAttribute::fillBytesRef() const
          {
            env->callVoidMethod(this$, mids$[mid_fillBytesRef_54c6a166]);
          }

          ::org::apache::lucene::util::BytesRef TermToBytesRefAttribute::getBytesRef() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getBytesRef_4ae19461]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_TermToBytesRefAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermToBytesRefAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermToBytesRefAttribute_fillBytesRef(t_TermToBytesRefAttribute *self);
          static PyObject *t_TermToBytesRefAttribute_getBytesRef(t_TermToBytesRefAttribute *self);
          static PyObject *t_TermToBytesRefAttribute_get__bytesRef(t_TermToBytesRefAttribute *self, void *data);
          static PyGetSetDef t_TermToBytesRefAttribute__fields_[] = {
            DECLARE_GET_FIELD(t_TermToBytesRefAttribute, bytesRef),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TermToBytesRefAttribute__methods_[] = {
            DECLARE_METHOD(t_TermToBytesRefAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermToBytesRefAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermToBytesRefAttribute, fillBytesRef, METH_NOARGS),
            DECLARE_METHOD(t_TermToBytesRefAttribute, getBytesRef, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TermToBytesRefAttribute, t_TermToBytesRefAttribute, ::org::apache::lucene::util::Attribute, TermToBytesRefAttribute, abstract_init, 0, 0, t_TermToBytesRefAttribute__fields_, 0, 0);

          void t_TermToBytesRefAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(TermToBytesRefAttribute), module, "TermToBytesRefAttribute", 0);
          }

          void t_TermToBytesRefAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TermToBytesRefAttribute).tp_dict, "class_", make_descriptor(TermToBytesRefAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TermToBytesRefAttribute).tp_dict, "wrapfn_", make_descriptor(t_TermToBytesRefAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TermToBytesRefAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TermToBytesRefAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TermToBytesRefAttribute::initializeClass, 1)))
              return NULL;
            return t_TermToBytesRefAttribute::wrap_Object(TermToBytesRefAttribute(((t_TermToBytesRefAttribute *) arg)->object.this$));
          }
          static PyObject *t_TermToBytesRefAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TermToBytesRefAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TermToBytesRefAttribute_fillBytesRef(t_TermToBytesRefAttribute *self)
          {
            OBJ_CALL(self->object.fillBytesRef());
            Py_RETURN_NONE;
          }

          static PyObject *t_TermToBytesRefAttribute_getBytesRef(t_TermToBytesRefAttribute *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getBytesRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_TermToBytesRefAttribute_get__bytesRef(t_TermToBytesRefAttribute *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getBytesRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/TernaryTree.h"
#include "java/io/PrintStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Enumeration.h"
#include "java/lang/Cloneable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *TernaryTree::class$ = NULL;
            jmethodID *TernaryTree::mids$ = NULL;
            bool TernaryTree::live$ = false;

            jclass TernaryTree::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/TernaryTree");

                mids$ = new jmethodID[max_mid];
                mids$[mid_balance_54c6a166] = env->getMethodID(cls, "balance", "()V");
                mids$[mid_clone_30bcff98] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/compound/hyphenation/TernaryTree;");
                mids$[mid_find_5fdc3f57] = env->getMethodID(cls, "find", "(Ljava/lang/String;)I");
                mids$[mid_find_ec6430eb] = env->getMethodID(cls, "find", "([CI)I");
                mids$[mid_insert_7420ac50] = env->getMethodID(cls, "insert", "(Ljava/lang/String;C)V");
                mids$[mid_insert_6d377140] = env->getMethodID(cls, "insert", "([CIC)V");
                mids$[mid_keys_39f88070] = env->getMethodID(cls, "keys", "()Ljava/util/Enumeration;");
                mids$[mid_knows_5fdc3f44] = env->getMethodID(cls, "knows", "(Ljava/lang/String;)Z");
                mids$[mid_printStats_1b7c898b] = env->getMethodID(cls, "printStats", "(Ljava/io/PrintStream;)V");
                mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
                mids$[mid_strcmp_979cf09d] = env->getStaticMethodID(cls, "strcmp", "(Ljava/lang/String;[CI)I");
                mids$[mid_strcmp_aa5dc2ed] = env->getStaticMethodID(cls, "strcmp", "([CI[CI)I");
                mids$[mid_strcpy_aa5dc2f2] = env->getStaticMethodID(cls, "strcpy", "([CI[CI)V");
                mids$[mid_strlen_700e23c9] = env->getStaticMethodID(cls, "strlen", "([C)I");
                mids$[mid_strlen_ec6430eb] = env->getStaticMethodID(cls, "strlen", "([CI)I");
                mids$[mid_trimToSize_54c6a166] = env->getMethodID(cls, "trimToSize", "()V");
                mids$[mid_init_54c6a166] = env->getMethodID(cls, "init", "()V");
                mids$[mid_insertBalanced_7e9fa7a8] = env->getMethodID(cls, "insertBalanced", "([Ljava/lang/String;[CII)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void TernaryTree::balance() const
            {
              env->callVoidMethod(this$, mids$[mid_balance_54c6a166]);
            }

            TernaryTree TernaryTree::clone() const
            {
              return TernaryTree(env->callObjectMethod(this$, mids$[mid_clone_30bcff98]));
            }

            jint TernaryTree::find(const ::java::lang::String & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_find_5fdc3f57], a0.this$);
            }

            jint TernaryTree::find(const JArray< jchar > & a0, jint a1) const
            {
              return env->callIntMethod(this$, mids$[mid_find_ec6430eb], a0.this$, a1);
            }

            void TernaryTree::insert(const ::java::lang::String & a0, jchar a1) const
            {
              env->callVoidMethod(this$, mids$[mid_insert_7420ac50], a0.this$, a1);
            }

            void TernaryTree::insert(const JArray< jchar > & a0, jint a1, jchar a2) const
            {
              env->callVoidMethod(this$, mids$[mid_insert_6d377140], a0.this$, a1, a2);
            }

            ::java::util::Enumeration TernaryTree::keys() const
            {
              return ::java::util::Enumeration(env->callObjectMethod(this$, mids$[mid_keys_39f88070]));
            }

            jboolean TernaryTree::knows(const ::java::lang::String & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_knows_5fdc3f44], a0.this$);
            }

            void TernaryTree::printStats(const ::java::io::PrintStream & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_printStats_1b7c898b], a0.this$);
            }

            jint TernaryTree::size() const
            {
              return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
            }

            jint TernaryTree::strcmp(const ::java::lang::String & a0, const JArray< jchar > & a1, jint a2)
            {
              jclass cls = env->getClass(initializeClass);
              return env->callStaticIntMethod(cls, mids$[mid_strcmp_979cf09d], a0.this$, a1.this$, a2);
            }

            jint TernaryTree::strcmp(const JArray< jchar > & a0, jint a1, const JArray< jchar > & a2, jint a3)
            {
              jclass cls = env->getClass(initializeClass);
              return env->callStaticIntMethod(cls, mids$[mid_strcmp_aa5dc2ed], a0.this$, a1, a2.this$, a3);
            }

            void TernaryTree::strcpy(const JArray< jchar > & a0, jint a1, const JArray< jchar > & a2, jint a3)
            {
              jclass cls = env->getClass(initializeClass);
              env->callStaticVoidMethod(cls, mids$[mid_strcpy_aa5dc2f2], a0.this$, a1, a2.this$, a3);
            }

            jint TernaryTree::strlen(const JArray< jchar > & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return env->callStaticIntMethod(cls, mids$[mid_strlen_700e23c9], a0.this$);
            }

            jint TernaryTree::strlen(const JArray< jchar > & a0, jint a1)
            {
              jclass cls = env->getClass(initializeClass);
              return env->callStaticIntMethod(cls, mids$[mid_strlen_ec6430eb], a0.this$, a1);
            }

            void TernaryTree::trimToSize() const
            {
              env->callVoidMethod(this$, mids$[mid_trimToSize_54c6a166]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_TernaryTree_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TernaryTree_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TernaryTree_balance(t_TernaryTree *self);
            static PyObject *t_TernaryTree_clone(t_TernaryTree *self);
            static PyObject *t_TernaryTree_find(t_TernaryTree *self, PyObject *args);
            static PyObject *t_TernaryTree_insert(t_TernaryTree *self, PyObject *args);
            static PyObject *t_TernaryTree_keys(t_TernaryTree *self);
            static PyObject *t_TernaryTree_knows(t_TernaryTree *self, PyObject *arg);
            static PyObject *t_TernaryTree_printStats(t_TernaryTree *self, PyObject *arg);
            static PyObject *t_TernaryTree_size(t_TernaryTree *self);
            static PyObject *t_TernaryTree_strcmp(PyTypeObject *type, PyObject *args);
            static PyObject *t_TernaryTree_strcpy(PyTypeObject *type, PyObject *args);
            static PyObject *t_TernaryTree_strlen(PyTypeObject *type, PyObject *args);
            static PyObject *t_TernaryTree_trimToSize(t_TernaryTree *self);

            static PyMethodDef t_TernaryTree__methods_[] = {
              DECLARE_METHOD(t_TernaryTree, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree, balance, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree, clone, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree, find, METH_VARARGS),
              DECLARE_METHOD(t_TernaryTree, insert, METH_VARARGS),
              DECLARE_METHOD(t_TernaryTree, keys, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree, knows, METH_O),
              DECLARE_METHOD(t_TernaryTree, printStats, METH_O),
              DECLARE_METHOD(t_TernaryTree, size, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree, strcmp, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree, strcpy, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree, strlen, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree, trimToSize, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TernaryTree, t_TernaryTree, ::java::lang::Object, TernaryTree, abstract_init, 0, 0, 0, 0, 0);

            void t_TernaryTree::install(PyObject *module)
            {
              installType(&PY_TYPE(TernaryTree), module, "TernaryTree", 0);
            }

            void t_TernaryTree::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TernaryTree).tp_dict, "class_", make_descriptor(TernaryTree::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TernaryTree).tp_dict, "wrapfn_", make_descriptor(t_TernaryTree::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TernaryTree).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TernaryTree_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TernaryTree::initializeClass, 1)))
                return NULL;
              return t_TernaryTree::wrap_Object(TernaryTree(((t_TernaryTree *) arg)->object.this$));
            }
            static PyObject *t_TernaryTree_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TernaryTree::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TernaryTree_balance(t_TernaryTree *self)
            {
              OBJ_CALL(self->object.balance());
              Py_RETURN_NONE;
            }

            static PyObject *t_TernaryTree_clone(t_TernaryTree *self)
            {
              TernaryTree result((jobject) NULL);
              OBJ_CALL(result = self->object.clone());
              return t_TernaryTree::wrap_Object(result);
            }

            static PyObject *t_TernaryTree_find(t_TernaryTree *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  jint result;

                  if (!parseArgs(args, "s", &a0))
                  {
                    OBJ_CALL(result = self->object.find(a0));
                    return PyInt_FromLong((long) result);
                  }
                }
                break;
               case 2:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  jint result;

                  if (!parseArgs(args, "[CI", &a0, &a1))
                  {
                    OBJ_CALL(result = self->object.find(a0, a1));
                    return PyInt_FromLong((long) result);
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "find", args);
              return NULL;
            }

            static PyObject *t_TernaryTree_insert(t_TernaryTree *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  jchar a1;

                  if (!parseArgs(args, "sC", &a0, &a1))
                  {
                    OBJ_CALL(self->object.insert(a0, a1));
                    Py_RETURN_NONE;
                  }
                }
                break;
               case 3:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  jchar a2;

                  if (!parseArgs(args, "[CIC", &a0, &a1, &a2))
                  {
                    OBJ_CALL(self->object.insert(a0, a1, a2));
                    Py_RETURN_NONE;
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "insert", args);
              return NULL;
            }

            static PyObject *t_TernaryTree_keys(t_TernaryTree *self)
            {
              ::java::util::Enumeration result((jobject) NULL);
              OBJ_CALL(result = self->object.keys());
              return ::java::util::t_Enumeration::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            static PyObject *t_TernaryTree_knows(t_TernaryTree *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              jboolean result;

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.knows(a0));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "knows", arg);
              return NULL;
            }

            static PyObject *t_TernaryTree_printStats(t_TernaryTree *self, PyObject *arg)
            {
              ::java::io::PrintStream a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
              {
                OBJ_CALL(self->object.printStats(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "printStats", arg);
              return NULL;
            }

            static PyObject *t_TernaryTree_size(t_TernaryTree *self)
            {
              jint result;
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_TernaryTree_strcmp(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  ::java::lang::String a0((jobject) NULL);
                  JArray< jchar > a1((jobject) NULL);
                  jint a2;
                  jint result;

                  if (!parseArgs(args, "s[CI", &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::strcmp(a0, a1, a2));
                    return PyInt_FromLong((long) result);
                  }
                }
                break;
               case 4:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  JArray< jchar > a2((jobject) NULL);
                  jint a3;
                  jint result;

                  if (!parseArgs(args, "[CI[CI", &a0, &a1, &a2, &a3))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::strcmp(a0, a1, a2, a3));
                    return PyInt_FromLong((long) result);
                  }
                }
              }

              PyErr_SetArgsError(type, "strcmp", args);
              return NULL;
            }

            static PyObject *t_TernaryTree_strcpy(PyTypeObject *type, PyObject *args)
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              JArray< jchar > a2((jobject) NULL);
              jint a3;

              if (!parseArgs(args, "[CI[CI", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::strcpy(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError(type, "strcpy", args);
              return NULL;
            }

            static PyObject *t_TernaryTree_strlen(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint result;

                  if (!parseArgs(args, "[C", &a0))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::strlen(a0));
                    return PyInt_FromLong((long) result);
                  }
                }
                break;
               case 2:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  jint result;

                  if (!parseArgs(args, "[CI", &a0, &a1))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::strlen(a0, a1));
                    return PyInt_FromLong((long) result);
                  }
                }
              }

              PyErr_SetArgsError(type, "strlen", args);
              return NULL;
            }

            static PyObject *t_TernaryTree_trimToSize(t_TernaryTree *self)
            {
              OBJ_CALL(self->object.trimToSize());
              Py_RETURN_NONE;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *WordDelimiterFilter::class$ = NULL;
          jmethodID *WordDelimiterFilter::mids$ = NULL;
          bool WordDelimiterFilter::live$ = false;
          jint WordDelimiterFilter::ALPHA = (jint) 0;
          jint WordDelimiterFilter::ALPHANUM = (jint) 0;
          jint WordDelimiterFilter::CATENATE_ALL = (jint) 0;
          jint WordDelimiterFilter::CATENATE_NUMBERS = (jint) 0;
          jint WordDelimiterFilter::CATENATE_WORDS = (jint) 0;
          jint WordDelimiterFilter::DIGIT = (jint) 0;
          jint WordDelimiterFilter::GENERATE_NUMBER_PARTS = (jint) 0;
          jint WordDelimiterFilter::GENERATE_WORD_PARTS = (jint) 0;
          jint WordDelimiterFilter::LOWER = (jint) 0;
          jint WordDelimiterFilter::PRESERVE_ORIGINAL = (jint) 0;
          jint WordDelimiterFilter::SPLIT_ON_CASE_CHANGE = (jint) 0;
          jint WordDelimiterFilter::SPLIT_ON_NUMERICS = (jint) 0;
          jint WordDelimiterFilter::STEM_ENGLISH_POSSESSIVE = (jint) 0;
          jint WordDelimiterFilter::SUBWORD_DELIM = (jint) 0;
          jint WordDelimiterFilter::UPPER = (jint) 0;

          jclass WordDelimiterFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_635fa7aa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;ILorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_9bd98551] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;[BILorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ALPHA = env->getStaticIntField(cls, "ALPHA");
              ALPHANUM = env->getStaticIntField(cls, "ALPHANUM");
              CATENATE_ALL = env->getStaticIntField(cls, "CATENATE_ALL");
              CATENATE_NUMBERS = env->getStaticIntField(cls, "CATENATE_NUMBERS");
              CATENATE_WORDS = env->getStaticIntField(cls, "CATENATE_WORDS");
              DIGIT = env->getStaticIntField(cls, "DIGIT");
              GENERATE_NUMBER_PARTS = env->getStaticIntField(cls, "GENERATE_NUMBER_PARTS");
              GENERATE_WORD_PARTS = env->getStaticIntField(cls, "GENERATE_WORD_PARTS");
              LOWER = env->getStaticIntField(cls, "LOWER");
              PRESERVE_ORIGINAL = env->getStaticIntField(cls, "PRESERVE_ORIGINAL");
              SPLIT_ON_CASE_CHANGE = env->getStaticIntField(cls, "SPLIT_ON_CASE_CHANGE");
              SPLIT_ON_NUMERICS = env->getStaticIntField(cls, "SPLIT_ON_NUMERICS");
              STEM_ENGLISH_POSSESSIVE = env->getStaticIntField(cls, "STEM_ENGLISH_POSSESSIVE");
              SUBWORD_DELIM = env->getStaticIntField(cls, "SUBWORD_DELIM");
              UPPER = env->getStaticIntField(cls, "UPPER");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WordDelimiterFilter::WordDelimiterFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jint a2, const ::org::apache::lucene::analysis::util::CharArraySet & a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_635fa7aa, a0.this$, a1.this$, a2, a3.this$)) {}

          WordDelimiterFilter::WordDelimiterFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const JArray< jbyte > & a2, jint a3, const ::org::apache::lucene::analysis::util::CharArraySet & a4) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_9bd98551, a0.this$, a1.this$, a2.this$, a3, a4.this$)) {}

          jboolean WordDelimiterFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void WordDelimiterFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_WordDelimiterFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordDelimiterFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WordDelimiterFilter_init_(t_WordDelimiterFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WordDelimiterFilter_incrementToken(t_WordDelimiterFilter *self, PyObject *args);
          static PyObject *t_WordDelimiterFilter_reset(t_WordDelimiterFilter *self, PyObject *args);

          static PyMethodDef t_WordDelimiterFilter__methods_[] = {
            DECLARE_METHOD(t_WordDelimiterFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_WordDelimiterFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WordDelimiterFilter, t_WordDelimiterFilter, ::org::apache::lucene::analysis::TokenFilter, WordDelimiterFilter, t_WordDelimiterFilter_init_, 0, 0, 0, 0, 0);

          void t_WordDelimiterFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(WordDelimiterFilter), module, "WordDelimiterFilter", 0);
          }

          void t_WordDelimiterFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "class_", make_descriptor(WordDelimiterFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "wrapfn_", make_descriptor(t_WordDelimiterFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(WordDelimiterFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "ALPHA", make_descriptor(WordDelimiterFilter::ALPHA));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "ALPHANUM", make_descriptor(WordDelimiterFilter::ALPHANUM));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "CATENATE_ALL", make_descriptor(WordDelimiterFilter::CATENATE_ALL));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "CATENATE_NUMBERS", make_descriptor(WordDelimiterFilter::CATENATE_NUMBERS));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "CATENATE_WORDS", make_descriptor(WordDelimiterFilter::CATENATE_WORDS));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "DIGIT", make_descriptor(WordDelimiterFilter::DIGIT));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "GENERATE_NUMBER_PARTS", make_descriptor(WordDelimiterFilter::GENERATE_NUMBER_PARTS));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "GENERATE_WORD_PARTS", make_descriptor(WordDelimiterFilter::GENERATE_WORD_PARTS));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "LOWER", make_descriptor(WordDelimiterFilter::LOWER));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "PRESERVE_ORIGINAL", make_descriptor(WordDelimiterFilter::PRESERVE_ORIGINAL));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "SPLIT_ON_CASE_CHANGE", make_descriptor(WordDelimiterFilter::SPLIT_ON_CASE_CHANGE));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "SPLIT_ON_NUMERICS", make_descriptor(WordDelimiterFilter::SPLIT_ON_NUMERICS));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "STEM_ENGLISH_POSSESSIVE", make_descriptor(WordDelimiterFilter::STEM_ENGLISH_POSSESSIVE));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "SUBWORD_DELIM", make_descriptor(WordDelimiterFilter::SUBWORD_DELIM));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "UPPER", make_descriptor(WordDelimiterFilter::UPPER));
          }

          static PyObject *t_WordDelimiterFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordDelimiterFilter::initializeClass, 1)))
              return NULL;
            return t_WordDelimiterFilter::wrap_Object(WordDelimiterFilter(((t_WordDelimiterFilter *) arg)->object.this$));
          }
          static PyObject *t_WordDelimiterFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordDelimiterFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WordDelimiterFilter_init_(t_WordDelimiterFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jint a2;
                ::org::apache::lucene::analysis::util::CharArraySet a3((jobject) NULL);
                PyTypeObject **p3;
                WordDelimiterFilter object((jobject) NULL);

                if (!parseArgs(args, "KkIK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = WordDelimiterFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                JArray< jbyte > a2((jobject) NULL);
                jint a3;
                ::org::apache::lucene::analysis::util::CharArraySet a4((jobject) NULL);
                PyTypeObject **p4;
                WordDelimiterFilter object((jobject) NULL);

                if (!parseArgs(args, "Kk[BIK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4, &p4, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = WordDelimiterFilter(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WordDelimiterFilter_incrementToken(t_WordDelimiterFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(WordDelimiterFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_WordDelimiterFilter_reset(t_WordDelimiterFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(WordDelimiterFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletionBuilder.h"
#include "org/apache/lucene/search/suggest/fst/BytesRefSorter.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletion.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *FSTCompletionBuilder::class$ = NULL;
            jmethodID *FSTCompletionBuilder::mids$ = NULL;
            bool FSTCompletionBuilder::live$ = false;
            jint FSTCompletionBuilder::DEFAULT_BUCKETS = (jint) 0;

            jclass FSTCompletionBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/FSTCompletionBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_4a786a26] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/search/suggest/fst/BytesRefSorter;I)V");
                mids$[mid_add_738fc2ce] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;I)V");
                mids$[mid_build_18e9287a] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/search/suggest/fst/FSTCompletion;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                DEFAULT_BUCKETS = env->getStaticIntField(cls, "DEFAULT_BUCKETS");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FSTCompletionBuilder::FSTCompletionBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            FSTCompletionBuilder::FSTCompletionBuilder(jint a0, const ::org::apache::lucene::search::suggest::fst::BytesRefSorter & a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4a786a26, a0, a1.this$, a2)) {}

            void FSTCompletionBuilder::add(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_add_738fc2ce], a0.this$, a1);
            }

            ::org::apache::lucene::search::suggest::fst::FSTCompletion FSTCompletionBuilder::build() const
            {
              return ::org::apache::lucene::search::suggest::fst::FSTCompletion(env->callObjectMethod(this$, mids$[mid_build_18e9287a]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_FSTCompletionBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTCompletionBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FSTCompletionBuilder_init_(t_FSTCompletionBuilder *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FSTCompletionBuilder_add(t_FSTCompletionBuilder *self, PyObject *args);
            static PyObject *t_FSTCompletionBuilder_build(t_FSTCompletionBuilder *self);

            static PyMethodDef t_FSTCompletionBuilder__methods_[] = {
              DECLARE_METHOD(t_FSTCompletionBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletionBuilder, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletionBuilder, add, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionBuilder, build, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FSTCompletionBuilder, t_FSTCompletionBuilder, ::java::lang::Object, FSTCompletionBuilder, t_FSTCompletionBuilder_init_, 0, 0, 0, 0, 0);

            void t_FSTCompletionBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTCompletionBuilder), module, "FSTCompletionBuilder", 0);
            }

            void t_FSTCompletionBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FSTCompletionBuilder).tp_dict, "class_", make_descriptor(FSTCompletionBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FSTCompletionBuilder).tp_dict, "wrapfn_", make_descriptor(t_FSTCompletionBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FSTCompletionBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(FSTCompletionBuilder::initializeClass);
              PyDict_SetItemString(PY_TYPE(FSTCompletionBuilder).tp_dict, "DEFAULT_BUCKETS", make_descriptor(FSTCompletionBuilder::DEFAULT_BUCKETS));
            }

            static PyObject *t_FSTCompletionBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTCompletionBuilder::initializeClass, 1)))
                return NULL;
              return t_FSTCompletionBuilder::wrap_Object(FSTCompletionBuilder(((t_FSTCompletionBuilder *) arg)->object.this$));
            }
            static PyObject *t_FSTCompletionBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTCompletionBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FSTCompletionBuilder_init_(t_FSTCompletionBuilder *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  FSTCompletionBuilder object((jobject) NULL);

                  INT_CALL(object = FSTCompletionBuilder());
                  self->object = object;
                  break;
                }
                goto err;
               case 3:
                {
                  jint a0;
                  ::org::apache::lucene::search::suggest::fst::BytesRefSorter a1((jobject) NULL);
                  jint a2;
                  FSTCompletionBuilder object((jobject) NULL);

                  if (!parseArgs(args, "IkI", ::org::apache::lucene::search::suggest::fst::BytesRefSorter::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = FSTCompletionBuilder(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FSTCompletionBuilder_add(t_FSTCompletionBuilder *self, PyObject *args)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "add", args);
              return NULL;
            }

            static PyObject *t_FSTCompletionBuilder_build(t_FSTCompletionBuilder *self)
            {
              ::org::apache::lucene::search::suggest::fst::FSTCompletion result((jobject) NULL);
              OBJ_CALL(result = self->object.build());
              return ::org::apache::lucene::search::suggest::fst::t_FSTCompletion::wrap_Object(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/BufferedIndexInput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/RandomAccessInput.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *BufferedIndexInput::class$ = NULL;
        jmethodID *BufferedIndexInput::mids$ = NULL;
        bool BufferedIndexInput::live$ = false;
        jint BufferedIndexInput::BUFFER_SIZE = (jint) 0;
        jint BufferedIndexInput::MERGE_BUFFER_SIZE = (jint) 0;
        jint BufferedIndexInput::MIN_BUFFER_SIZE = (jint) 0;

        jclass BufferedIndexInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/BufferedIndexInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_501c6f1c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
            mids$[mid_bufferSize_e43288a5] = env->getStaticMethodID(cls, "bufferSize", "(Lorg/apache/lucene/store/IOContext;)I");
            mids$[mid_clone_c014db58] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/store/BufferedIndexInput;");
            mids$[mid_getBufferSize_54c6a179] = env->getMethodID(cls, "getBufferSize", "()I");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readByte_0ee6df3b] = env->getMethodID(cls, "readByte", "(J)B");
            mids$[mid_readBytes_86f4435f] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_readBytes_717964e8] = env->getMethodID(cls, "readBytes", "([BIIZ)V");
            mids$[mid_readInt_54c6a179] = env->getMethodID(cls, "readInt", "()I");
            mids$[mid_readInt_0ee6df30] = env->getMethodID(cls, "readInt", "(J)I");
            mids$[mid_readLong_54c6a17a] = env->getMethodID(cls, "readLong", "()J");
            mids$[mid_readLong_0ee6df33] = env->getMethodID(cls, "readLong", "(J)J");
            mids$[mid_readShort_54c6a163] = env->getMethodID(cls, "readShort", "()S");
            mids$[mid_readShort_0ee6df2a] = env->getMethodID(cls, "readShort", "(J)S");
            mids$[mid_readVInt_54c6a179] = env->getMethodID(cls, "readVInt", "()I");
            mids$[mid_readVLong_54c6a17a] = env->getMethodID(cls, "readVLong", "()J");
            mids$[mid_seek_0ee6df2f] = env->getMethodID(cls, "seek", "(J)V");
            mids$[mid_setBufferSize_39c7bd3c] = env->getMethodID(cls, "setBufferSize", "(I)V");
            mids$[mid_slice_d00c83eb] = env->getMethodID(cls, "slice", "(Ljava/lang/String;JJ)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_wrap_3bd7a9bc] = env->getStaticMethodID(cls, "wrap", "(Ljava/lang/String;Lorg/apache/lucene/store/IndexInput;JJ)Lorg/apache/lucene/store/BufferedIndexInput;");
            mids$[mid_flushBuffer_b3b465fc] = env->getMethodID(cls, "flushBuffer", "(Lorg/apache/lucene/store/IndexOutput;J)I");
            mids$[mid_newBuffer_49b4f12b] = env->getMethodID(cls, "newBuffer", "([B)V");
            mids$[mid_readInternal_86f4435f] = env->getMethodID(cls, "readInternal", "([BII)V");
            mids$[mid_seekInternal_0ee6df2f] = env->getMethodID(cls, "seekInternal", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            BUFFER_SIZE = env->getStaticIntField(cls, "BUFFER_SIZE");
            MERGE_BUFFER_SIZE = env->getStaticIntField(cls, "MERGE_BUFFER_SIZE");
            MIN_BUFFER_SIZE = env->getStaticIntField(cls, "MIN_BUFFER_SIZE");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BufferedIndexInput::BufferedIndexInput(const ::java::lang::String & a0) : ::org::apache::lucene::store::IndexInput(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        BufferedIndexInput::BufferedIndexInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) : ::org::apache::lucene::store::IndexInput(env->newObject(initializeClass, &mids$, mid_init$_501c6f1c, a0.this$, a1.this$)) {}

        BufferedIndexInput::BufferedIndexInput(const ::java::lang::String & a0, jint a1) : ::org::apache::lucene::store::IndexInput(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

        jint BufferedIndexInput::bufferSize(const ::org::apache::lucene::store::IOContext & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bufferSize_e43288a5], a0.this$);
        }

        BufferedIndexInput BufferedIndexInput::clone() const
        {
          return BufferedIndexInput(env->callObjectMethod(this$, mids$[mid_clone_c014db58]));
        }

        jint BufferedIndexInput::getBufferSize() const
        {
          return env->callIntMethod(this$, mids$[mid_getBufferSize_54c6a179]);
        }

        jlong BufferedIndexInput::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_54c6a17a]);
        }

        jbyte BufferedIndexInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
        }

        jbyte BufferedIndexInput::readByte(jlong a0) const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_0ee6df3b], a0);
        }

        void BufferedIndexInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_86f4435f], a0.this$, a1, a2);
        }

        void BufferedIndexInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2, jboolean a3) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_717964e8], a0.this$, a1, a2, a3);
        }

        jint BufferedIndexInput::readInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_54c6a179]);
        }

        jint BufferedIndexInput::readInt(jlong a0) const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_0ee6df30], a0);
        }

        jlong BufferedIndexInput::readLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_54c6a17a]);
        }

        jlong BufferedIndexInput::readLong(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_0ee6df33], a0);
        }

        jshort BufferedIndexInput::readShort() const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_54c6a163]);
        }

        jshort BufferedIndexInput::readShort(jlong a0) const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_0ee6df2a], a0);
        }

        jint BufferedIndexInput::readVInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readVInt_54c6a179]);
        }

        jlong BufferedIndexInput::readVLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readVLong_54c6a17a]);
        }

        void BufferedIndexInput::seek(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seek_0ee6df2f], a0);
        }

        void BufferedIndexInput::setBufferSize(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBufferSize_39c7bd3c], a0);
        }

        ::org::apache::lucene::store::IndexInput BufferedIndexInput::slice(const ::java::lang::String & a0, jlong a1, jlong a2) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_slice_d00c83eb], a0.this$, a1, a2));
        }

        BufferedIndexInput BufferedIndexInput::wrap(const ::java::lang::String & a0, const ::org::apache::lucene::store::IndexInput & a1, jlong a2, jlong a3)
        {
          jclass cls = env->getClass(initializeClass);
          return BufferedIndexInput(env->callStaticObjectMethod(cls, mids$[mid_wrap_3bd7a9bc], a0.this$, a1.this$, a2, a3));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_BufferedIndexInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedIndexInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BufferedIndexInput_init_(t_BufferedIndexInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BufferedIndexInput_bufferSize(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedIndexInput_clone(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_getBufferSize(t_BufferedIndexInput *self);
        static PyObject *t_BufferedIndexInput_getFilePointer(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readByte(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readBytes(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readInt(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readLong(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readShort(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readVInt(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readVLong(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_seek(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_setBufferSize(t_BufferedIndexInput *self, PyObject *arg);
        static PyObject *t_BufferedIndexInput_slice(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_wrap(PyTypeObject *type, PyObject *args);
        static PyObject *t_BufferedIndexInput_get__filePointer(t_BufferedIndexInput *self, void *data);
        static PyGetSetDef t_BufferedIndexInput__fields_[] = {
          DECLARE_GET_FIELD(t_BufferedIndexInput, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BufferedIndexInput__methods_[] = {
          DECLARE_METHOD(t_BufferedIndexInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedIndexInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedIndexInput, bufferSize, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedIndexInput, clone, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, getBufferSize, METH_NOARGS),
          DECLARE_METHOD(t_BufferedIndexInput, getFilePointer, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readByte, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readInt, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readLong, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readShort, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readVInt, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readVLong, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, seek, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, setBufferSize, METH_O),
          DECLARE_METHOD(t_BufferedIndexInput, slice, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, wrap, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BufferedIndexInput, t_BufferedIndexInput, ::org::apache::lucene::store::IndexInput, BufferedIndexInput, t_BufferedIndexInput_init_, 0, 0, t_BufferedIndexInput__fields_, 0, 0);

        void t_BufferedIndexInput::install(PyObject *module)
        {
          installType(&PY_TYPE(BufferedIndexInput), module, "BufferedIndexInput", 0);
        }

        void t_BufferedIndexInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BufferedIndexInput).tp_dict, "class_", make_descriptor(BufferedIndexInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BufferedIndexInput).tp_dict, "wrapfn_", make_descriptor(t_BufferedIndexInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BufferedIndexInput).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BufferedIndexInput::initializeClass);
          PyDict_SetItemString(PY_TYPE(BufferedIndexInput).tp_dict, "BUFFER_SIZE", make_descriptor(BufferedIndexInput::BUFFER_SIZE));
          PyDict_SetItemString(PY_TYPE(BufferedIndexInput).tp_dict, "MERGE_BUFFER_SIZE", make_descriptor(BufferedIndexInput::MERGE_BUFFER_SIZE));
          PyDict_SetItemString(PY_TYPE(BufferedIndexInput).tp_dict, "MIN_BUFFER_SIZE", make_descriptor(BufferedIndexInput::MIN_BUFFER_SIZE));
        }

        static PyObject *t_BufferedIndexInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BufferedIndexInput::initializeClass, 1)))
            return NULL;
          return t_BufferedIndexInput::wrap_Object(BufferedIndexInput(((t_BufferedIndexInput *) arg)->object.this$));
        }
        static PyObject *t_BufferedIndexInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BufferedIndexInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BufferedIndexInput_init_(t_BufferedIndexInput *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              BufferedIndexInput object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = BufferedIndexInput(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::store::IOContext a1((jobject) NULL);
              BufferedIndexInput object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
              {
                INT_CALL(object = BufferedIndexInput(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              BufferedIndexInput object((jobject) NULL);

              if (!parseArgs(args, "sI", &a0, &a1))
              {
                INT_CALL(object = BufferedIndexInput(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BufferedIndexInput_bufferSize(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::IOContext a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IOContext::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::store::BufferedIndexInput::bufferSize(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bufferSize", arg);
          return NULL;
        }

        static PyObject *t_BufferedIndexInput_clone(t_BufferedIndexInput *self, PyObject *args)
        {
          BufferedIndexInput result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_BufferedIndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_BufferedIndexInput_getBufferSize(t_BufferedIndexInput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getBufferSize());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_BufferedIndexInput_getFilePointer(t_BufferedIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFilePointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "getFilePointer", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readByte(t_BufferedIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jbyte result;
              OBJ_CALL(result = self->object.readByte());
              return PyInt_FromLong((long) result);
            }
            break;
           case 1:
            {
              jlong a0;
              jbyte result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.readByte(a0));
                return PyInt_FromLong((long) result);
              }
            }
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readBytes(t_BufferedIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.readBytes(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            break;
           case 4:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              jboolean a3;

              if (!parseArgs(args, "[BIIZ", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(self->object.readBytes(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "readBytes", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readInt(t_BufferedIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jint result;
              OBJ_CALL(result = self->object.readInt());
              return PyInt_FromLong((long) result);
            }
            break;
           case 1:
            {
              jlong a0;
              jint result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.readInt(a0));
                return PyInt_FromLong((long) result);
              }
            }
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "readInt", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readLong(t_BufferedIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.readLong());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.readLong(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "readLong", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readShort(t_BufferedIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jshort result;
              OBJ_CALL(result = self->object.readShort());
              return PyInt_FromLong((long) result);
            }
            break;
           case 1:
            {
              jlong a0;
              jshort result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.readShort(a0));
                return PyInt_FromLong((long) result);
              }
            }
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "readShort", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readVInt(t_BufferedIndexInput *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readVInt());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "readVInt", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readVLong(t_BufferedIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readVLong());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "readVLong", args, 2);
        }

        static PyObject *t_BufferedIndexInput_seek(t_BufferedIndexInput *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.seek(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "seek", args, 2);
        }

        static PyObject *t_BufferedIndexInput_setBufferSize(t_BufferedIndexInput *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setBufferSize(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBufferSize", arg);
          return NULL;
        }

        static PyObject *t_BufferedIndexInput_slice(t_BufferedIndexInput *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sJJ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.slice(a0, a1, a2));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "slice", args, 2);
        }

        static PyObject *t_BufferedIndexInput_wrap(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IndexInput a1((jobject) NULL);
          jlong a2;
          jlong a3;
          BufferedIndexInput result((jobject) NULL);

          if (!parseArgs(args, "skJJ", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::store::BufferedIndexInput::wrap(a0, a1, a2, a3));
            return t_BufferedIndexInput::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "wrap", args);
          return NULL;
        }

        static PyObject *t_BufferedIndexInput_get__filePointer(t_BufferedIndexInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *SearcherTaxonomyManager$SearcherAndTaxonomy::class$ = NULL;
          jmethodID *SearcherTaxonomyManager$SearcherAndTaxonomy::mids$ = NULL;
          jfieldID *SearcherTaxonomyManager$SearcherAndTaxonomy::fids$ = NULL;
          bool SearcherTaxonomyManager$SearcherAndTaxonomy::live$ = false;

          jclass SearcherTaxonomyManager$SearcherAndTaxonomy::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8978d829] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_searcher] = env->getFieldID(cls, "searcher", "Lorg/apache/lucene/search/IndexSearcher;");
              fids$[fid_taxonomyReader] = env->getFieldID(cls, "taxonomyReader", "Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SearcherTaxonomyManager$SearcherAndTaxonomy::SearcherTaxonomyManager$SearcherAndTaxonomy(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8978d829, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::IndexSearcher SearcherTaxonomyManager$SearcherAndTaxonomy::_get_searcher() const
          {
            return ::org::apache::lucene::search::IndexSearcher(env->getObjectField(this$, fids$[fid_searcher]));
          }

          ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader SearcherTaxonomyManager$SearcherAndTaxonomy::_get_taxonomyReader() const
          {
            return ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader(env->getObjectField(this$, fids$[fid_taxonomyReader]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_of_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, PyObject *args);
          static int t_SearcherTaxonomyManager$SearcherAndTaxonomy_init_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__searcher(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data);
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__taxonomyReader(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data);

          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__parameters_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data);
          static PyGetSetDef t_SearcherTaxonomyManager$SearcherAndTaxonomy__fields_[] = {
            DECLARE_GET_FIELD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, searcher),
            DECLARE_GET_FIELD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, taxonomyReader),
            DECLARE_GET_FIELD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SearcherTaxonomyManager$SearcherAndTaxonomy__methods_[] = {
            DECLARE_METHOD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy, t_SearcherTaxonomyManager$SearcherAndTaxonomy, ::java::lang::Object, SearcherTaxonomyManager$SearcherAndTaxonomy, t_SearcherTaxonomyManager$SearcherAndTaxonomy_init_, 0, 0, t_SearcherTaxonomyManager$SearcherAndTaxonomy__fields_, 0, 0);
          PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_Object(const SearcherTaxonomyManager$SearcherAndTaxonomy& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearcherTaxonomyManager$SearcherAndTaxonomy *self = (t_SearcherTaxonomyManager$SearcherAndTaxonomy *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearcherTaxonomyManager$SearcherAndTaxonomy *self = (t_SearcherTaxonomyManager$SearcherAndTaxonomy *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SearcherTaxonomyManager$SearcherAndTaxonomy::install(PyObject *module)
          {
            installType(&PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy), module, "SearcherTaxonomyManager$SearcherAndTaxonomy", 0);
          }

          void t_SearcherTaxonomyManager$SearcherAndTaxonomy::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy).tp_dict, "class_", make_descriptor(SearcherTaxonomyManager$SearcherAndTaxonomy::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy).tp_dict, "wrapfn_", make_descriptor(t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SearcherTaxonomyManager$SearcherAndTaxonomy::initializeClass, 1)))
              return NULL;
            return t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_Object(SearcherTaxonomyManager$SearcherAndTaxonomy(((t_SearcherTaxonomyManager$SearcherAndTaxonomy *) arg)->object.this$));
          }
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SearcherTaxonomyManager$SearcherAndTaxonomy::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_of_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SearcherTaxonomyManager$SearcherAndTaxonomy_init_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader a1((jobject) NULL);
            SearcherTaxonomyManager$SearcherAndTaxonomy object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader::initializeClass, &a0, &a1))
            {
              INT_CALL(object = SearcherTaxonomyManager$SearcherAndTaxonomy(a0, a1));
              self->object = object;
              self->parameters[0] = &::org::apache::lucene::facet::taxonomy::PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__parameters_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__searcher(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data)
          {
            ::org::apache::lucene::search::IndexSearcher value((jobject) NULL);
            OBJ_CALL(value = self->object._get_searcher());
            return ::org::apache::lucene::search::t_IndexSearcher::wrap_Object(value);
          }

          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__taxonomyReader(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data)
          {
            ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader value((jobject) NULL);
            OBJ_CALL(value = self->object._get_taxonomyReader());
            return ::org::apache::lucene::facet::taxonomy::directory::t_DirectoryTaxonomyReader::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/IntTaxonomyFacets.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/lang/String.h"
#include "java/lang/Number.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *IntTaxonomyFacets::class$ = NULL;
          jmethodID *IntTaxonomyFacets::mids$ = NULL;
          bool IntTaxonomyFacets::live$ = false;

          jclass IntTaxonomyFacets::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/IntTaxonomyFacets");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getSpecificValue_8ecbcac9] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
              mids$[mid_getTopChildren_37e8c044] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");
              mids$[mid_rollup_54c6a166] = env->getMethodID(cls, "rollup", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Number IntTaxonomyFacets::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_8ecbcac9], a0.this$, a1.this$));
          }

          ::org::apache::lucene::facet::FacetResult IntTaxonomyFacets::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
          {
            return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_37e8c044], a0, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_IntTaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntTaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntTaxonomyFacets_getSpecificValue(t_IntTaxonomyFacets *self, PyObject *args);
          static PyObject *t_IntTaxonomyFacets_getTopChildren(t_IntTaxonomyFacets *self, PyObject *args);

          static PyMethodDef t_IntTaxonomyFacets__methods_[] = {
            DECLARE_METHOD(t_IntTaxonomyFacets, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntTaxonomyFacets, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntTaxonomyFacets, getSpecificValue, METH_VARARGS),
            DECLARE_METHOD(t_IntTaxonomyFacets, getTopChildren, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IntTaxonomyFacets, t_IntTaxonomyFacets, ::org::apache::lucene::facet::taxonomy::TaxonomyFacets, IntTaxonomyFacets, abstract_init, 0, 0, 0, 0, 0);

          void t_IntTaxonomyFacets::install(PyObject *module)
          {
            installType(&PY_TYPE(IntTaxonomyFacets), module, "IntTaxonomyFacets", 0);
          }

          void t_IntTaxonomyFacets::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IntTaxonomyFacets).tp_dict, "class_", make_descriptor(IntTaxonomyFacets::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IntTaxonomyFacets).tp_dict, "wrapfn_", make_descriptor(t_IntTaxonomyFacets::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IntTaxonomyFacets).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntTaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntTaxonomyFacets::initializeClass, 1)))
              return NULL;
            return t_IntTaxonomyFacets::wrap_Object(IntTaxonomyFacets(((t_IntTaxonomyFacets *) arg)->object.this$));
          }
          static PyObject *t_IntTaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntTaxonomyFacets::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IntTaxonomyFacets_getSpecificValue(t_IntTaxonomyFacets *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::java::lang::Number result((jobject) NULL);

            if (!parseArgs(args, "s[s", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
              return ::java::lang::t_Number::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntTaxonomyFacets), (PyObject *) self, "getSpecificValue", args, 2);
          }

          static PyObject *t_IntTaxonomyFacets_getTopChildren(t_IntTaxonomyFacets *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

            if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
              return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntTaxonomyFacets), (PyObject *) self, "getTopChildren", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexQuery.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexQueryCapable.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {

            ::java::lang::Class *RegexQuery::class$ = NULL;
            jmethodID *RegexQuery::mids$ = NULL;
            bool RegexQuery::live$ = false;

            jclass RegexQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/regex/RegexQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getRegexImplementation_814365f4] = env->getMethodID(cls, "getRegexImplementation", "()Lorg/apache/lucene/sandbox/queries/regex/RegexCapabilities;");
                mids$[mid_getTerm_0f71f314] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_setRegexImplementation_06bf498d] = env->getMethodID(cls, "setRegexImplementation", "(Lorg/apache/lucene/sandbox/queries/regex/RegexCapabilities;)V");
                mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_getTermsEnum_0bc2a5ab] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/FilteredTermsEnum;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            RegexQuery::RegexQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

            jboolean RegexQuery::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities RegexQuery::getRegexImplementation() const
            {
              return ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities(env->callObjectMethod(this$, mids$[mid_getRegexImplementation_814365f4]));
            }

            ::org::apache::lucene::index::Term RegexQuery::getTerm() const
            {
              return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_0f71f314]));
            }

            jint RegexQuery::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            void RegexQuery::setRegexImplementation(const ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setRegexImplementation_06bf498d], a0.this$);
            }

            ::java::lang::String RegexQuery::toString(const ::java::lang::String & a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {
            static PyObject *t_RegexQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_RegexQuery_init_(t_RegexQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_RegexQuery_equals(t_RegexQuery *self, PyObject *args);
            static PyObject *t_RegexQuery_getRegexImplementation(t_RegexQuery *self);
            static PyObject *t_RegexQuery_getTerm(t_RegexQuery *self);
            static PyObject *t_RegexQuery_hashCode(t_RegexQuery *self, PyObject *args);
            static PyObject *t_RegexQuery_setRegexImplementation(t_RegexQuery *self, PyObject *arg);
            static PyObject *t_RegexQuery_toString(t_RegexQuery *self, PyObject *args);
            static PyObject *t_RegexQuery_get__regexImplementation(t_RegexQuery *self, void *data);
            static int t_RegexQuery_set__regexImplementation(t_RegexQuery *self, PyObject *arg, void *data);
            static PyObject *t_RegexQuery_get__term(t_RegexQuery *self, void *data);
            static PyGetSetDef t_RegexQuery__fields_[] = {
              DECLARE_GETSET_FIELD(t_RegexQuery, regexImplementation),
              DECLARE_GET_FIELD(t_RegexQuery, term),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_RegexQuery__methods_[] = {
              DECLARE_METHOD(t_RegexQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexQuery, equals, METH_VARARGS),
              DECLARE_METHOD(t_RegexQuery, getRegexImplementation, METH_NOARGS),
              DECLARE_METHOD(t_RegexQuery, getTerm, METH_NOARGS),
              DECLARE_METHOD(t_RegexQuery, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_RegexQuery, setRegexImplementation, METH_O),
              DECLARE_METHOD(t_RegexQuery, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(RegexQuery, t_RegexQuery, ::org::apache::lucene::search::MultiTermQuery, RegexQuery, t_RegexQuery_init_, 0, 0, t_RegexQuery__fields_, 0, 0);

            void t_RegexQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(RegexQuery), module, "RegexQuery", 0);
            }

            void t_RegexQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(RegexQuery).tp_dict, "class_", make_descriptor(RegexQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(RegexQuery).tp_dict, "wrapfn_", make_descriptor(t_RegexQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(RegexQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RegexQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RegexQuery::initializeClass, 1)))
                return NULL;
              return t_RegexQuery::wrap_Object(RegexQuery(((t_RegexQuery *) arg)->object.this$));
            }
            static PyObject *t_RegexQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RegexQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_RegexQuery_init_(t_RegexQuery *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              RegexQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                INT_CALL(object = RegexQuery(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_RegexQuery_equals(t_RegexQuery *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(RegexQuery), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_RegexQuery_getRegexImplementation(t_RegexQuery *self)
            {
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities result((jobject) NULL);
              OBJ_CALL(result = self->object.getRegexImplementation());
              return ::org::apache::lucene::sandbox::queries::regex::t_RegexCapabilities::wrap_Object(result);
            }

            static PyObject *t_RegexQuery_getTerm(t_RegexQuery *self)
            {
              ::org::apache::lucene::index::Term result((jobject) NULL);
              OBJ_CALL(result = self->object.getTerm());
              return ::org::apache::lucene::index::t_Term::wrap_Object(result);
            }

            static PyObject *t_RegexQuery_hashCode(t_RegexQuery *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(RegexQuery), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_RegexQuery_setRegexImplementation(t_RegexQuery *self, PyObject *arg)
            {
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setRegexImplementation(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setRegexImplementation", arg);
              return NULL;
            }

            static PyObject *t_RegexQuery_toString(t_RegexQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(RegexQuery), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_RegexQuery_get__regexImplementation(t_RegexQuery *self, void *data)
            {
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities value((jobject) NULL);
              OBJ_CALL(value = self->object.getRegexImplementation());
              return ::org::apache::lucene::sandbox::queries::regex::t_RegexCapabilities::wrap_Object(value);
            }
            static int t_RegexQuery_set__regexImplementation(t_RegexQuery *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities::initializeClass, &value))
                {
                  INT_CALL(self->object.setRegexImplementation(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "regexImplementation", arg);
              return -1;
            }

            static PyObject *t_RegexQuery_get__term(t_RegexQuery *self, void *data)
            {
              ::org::apache::lucene::index::Term value((jobject) NULL);
              OBJ_CALL(value = self->object.getTerm());
              return ::org::apache::lucene::index::t_Term::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniNormalizationFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ckb/SoraniNormalizationFilter.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniNormalizationFilterFactory::class$ = NULL;
          jmethodID *SoraniNormalizationFilterFactory::mids$ = NULL;
          bool SoraniNormalizationFilterFactory::live$ = false;

          jclass SoraniNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_3fe7ed52] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/ckb/SoraniNormalizationFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniNormalizationFilterFactory::SoraniNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ckb::SoraniNormalizationFilter SoraniNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::ckb::SoraniNormalizationFilter(env->callObjectMethod(this$, mids$[mid_create_3fe7ed52], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory SoraniNormalizationFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniNormalizationFilterFactory_init_(t_SoraniNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniNormalizationFilterFactory_create(t_SoraniNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_SoraniNormalizationFilterFactory_getMultiTermComponent(t_SoraniNormalizationFilterFactory *self);
          static PyObject *t_SoraniNormalizationFilterFactory_get__multiTermComponent(t_SoraniNormalizationFilterFactory *self, void *data);
          static PyGetSetDef t_SoraniNormalizationFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_SoraniNormalizationFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SoraniNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SoraniNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_SoraniNormalizationFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SoraniNormalizationFilterFactory, t_SoraniNormalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, SoraniNormalizationFilterFactory, t_SoraniNormalizationFilterFactory_init_, 0, 0, t_SoraniNormalizationFilterFactory__fields_, 0, 0);

          void t_SoraniNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniNormalizationFilterFactory), module, "SoraniNormalizationFilterFactory", 0);
          }

          void t_SoraniNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SoraniNormalizationFilterFactory).tp_dict, "class_", make_descriptor(SoraniNormalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SoraniNormalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_SoraniNormalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SoraniNormalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SoraniNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SoraniNormalizationFilterFactory::wrap_Object(SoraniNormalizationFilterFactory(((t_SoraniNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SoraniNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniNormalizationFilterFactory_init_(t_SoraniNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SoraniNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SoraniNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SoraniNormalizationFilterFactory_create(t_SoraniNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::ckb::SoraniNormalizationFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::ckb::t_SoraniNormalizationFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SoraniNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_SoraniNormalizationFilterFactory_getMultiTermComponent(t_SoraniNormalizationFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_SoraniNormalizationFilterFactory_get__multiTermComponent(t_SoraniNormalizationFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/it/ItalianLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {

          ::java::lang::Class *ItalianLightStemmer::class$ = NULL;
          jmethodID *ItalianLightStemmer::mids$ = NULL;
          bool ItalianLightStemmer::live$ = false;

          jclass ItalianLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/it/ItalianLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ItalianLightStemmer::ItalianLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint ItalianLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {
          static PyObject *t_ItalianLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ItalianLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ItalianLightStemmer_init_(t_ItalianLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ItalianLightStemmer_stem(t_ItalianLightStemmer *self, PyObject *args);

          static PyMethodDef t_ItalianLightStemmer__methods_[] = {
            DECLARE_METHOD(t_ItalianLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ItalianLightStemmer, t_ItalianLightStemmer, ::java::lang::Object, ItalianLightStemmer, t_ItalianLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_ItalianLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(ItalianLightStemmer), module, "ItalianLightStemmer", 0);
          }

          void t_ItalianLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ItalianLightStemmer).tp_dict, "class_", make_descriptor(ItalianLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ItalianLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_ItalianLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ItalianLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ItalianLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ItalianLightStemmer::initializeClass, 1)))
              return NULL;
            return t_ItalianLightStemmer::wrap_Object(ItalianLightStemmer(((t_ItalianLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_ItalianLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ItalianLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ItalianLightStemmer_init_(t_ItalianLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            ItalianLightStemmer object((jobject) NULL);

            INT_CALL(object = ItalianLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_ItalianLightStemmer_stem(t_ItalianLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/FastCharStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/CharStream.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *FastCharStream::class$ = NULL;
              jmethodID *FastCharStream::mids$ = NULL;
              bool FastCharStream::live$ = false;

              jclass FastCharStream::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/FastCharStream");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                  mids$[mid_BeginToken_54c6a173] = env->getMethodID(cls, "BeginToken", "()C");
                  mids$[mid_Done_54c6a166] = env->getMethodID(cls, "Done", "()V");
                  mids$[mid_GetImage_14c7b5c5] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
                  mids$[mid_GetSuffix_b4292e99] = env->getMethodID(cls, "GetSuffix", "(I)[C");
                  mids$[mid_backup_39c7bd3c] = env->getMethodID(cls, "backup", "(I)V");
                  mids$[mid_getBeginColumn_54c6a179] = env->getMethodID(cls, "getBeginColumn", "()I");
                  mids$[mid_getBeginLine_54c6a179] = env->getMethodID(cls, "getBeginLine", "()I");
                  mids$[mid_getColumn_54c6a179] = env->getMethodID(cls, "getColumn", "()I");
                  mids$[mid_getEndColumn_54c6a179] = env->getMethodID(cls, "getEndColumn", "()I");
                  mids$[mid_getEndLine_54c6a179] = env->getMethodID(cls, "getEndLine", "()I");
                  mids$[mid_getLine_54c6a179] = env->getMethodID(cls, "getLine", "()I");
                  mids$[mid_readChar_54c6a173] = env->getMethodID(cls, "readChar", "()C");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FastCharStream::FastCharStream(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

              jchar FastCharStream::BeginToken() const
              {
                return env->callCharMethod(this$, mids$[mid_BeginToken_54c6a173]);
              }

              void FastCharStream::Done() const
              {
                env->callVoidMethod(this$, mids$[mid_Done_54c6a166]);
              }

              ::java::lang::String FastCharStream::GetImage() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_14c7b5c5]));
              }

              JArray< jchar > FastCharStream::GetSuffix(jint a0) const
              {
                return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_b4292e99], a0));
              }

              void FastCharStream::backup(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_backup_39c7bd3c], a0);
              }

              jint FastCharStream::getBeginColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getBeginColumn_54c6a179]);
              }

              jint FastCharStream::getBeginLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getBeginLine_54c6a179]);
              }

              jint FastCharStream::getColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getColumn_54c6a179]);
              }

              jint FastCharStream::getEndColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getEndColumn_54c6a179]);
              }

              jint FastCharStream::getEndLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getEndLine_54c6a179]);
              }

              jint FastCharStream::getLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getLine_54c6a179]);
              }

              jchar FastCharStream::readChar() const
              {
                return env->callCharMethod(this$, mids$[mid_readChar_54c6a173]);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self);
              static PyObject *t_FastCharStream_Done(t_FastCharStream *self);
              static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self);
              static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg);
              static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg);
              static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self);
              static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self);
              static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self);
              static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self);
              static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self);
              static PyObject *t_FastCharStream_getLine(t_FastCharStream *self);
              static PyObject *t_FastCharStream_readChar(t_FastCharStream *self);
              static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data);
              static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data);
              static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data);
              static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data);
              static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data);
              static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data);
              static PyGetSetDef t_FastCharStream__fields_[] = {
                DECLARE_GET_FIELD(t_FastCharStream, beginColumn),
                DECLARE_GET_FIELD(t_FastCharStream, beginLine),
                DECLARE_GET_FIELD(t_FastCharStream, column),
                DECLARE_GET_FIELD(t_FastCharStream, endColumn),
                DECLARE_GET_FIELD(t_FastCharStream, endLine),
                DECLARE_GET_FIELD(t_FastCharStream, line),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FastCharStream__methods_[] = {
                DECLARE_METHOD(t_FastCharStream, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FastCharStream, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FastCharStream, BeginToken, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, Done, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, GetImage, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, GetSuffix, METH_O),
                DECLARE_METHOD(t_FastCharStream, backup, METH_O),
                DECLARE_METHOD(t_FastCharStream, getBeginColumn, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, getBeginLine, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, getColumn, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, getEndColumn, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, getEndLine, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, getLine, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, readChar, METH_NOARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FastCharStream, t_FastCharStream, ::java::lang::Object, FastCharStream, t_FastCharStream_init_, 0, 0, t_FastCharStream__fields_, 0, 0);

              void t_FastCharStream::install(PyObject *module)
              {
                installType(&PY_TYPE(FastCharStream), module, "FastCharStream", 0);
              }

              void t_FastCharStream::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "class_", make_descriptor(FastCharStream::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "wrapfn_", make_descriptor(t_FastCharStream::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FastCharStream::initializeClass, 1)))
                  return NULL;
                return t_FastCharStream::wrap_Object(FastCharStream(((t_FastCharStream *) arg)->object.this$));
              }
              static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FastCharStream::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds)
              {
                ::java::io::Reader a0((jobject) NULL);
                FastCharStream object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = FastCharStream(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self)
              {
                jchar result;
                OBJ_CALL(result = self->object.BeginToken());
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              static PyObject *t_FastCharStream_Done(t_FastCharStream *self)
              {
                OBJ_CALL(self->object.Done());
                Py_RETURN_NONE;
              }

              static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.GetImage());
                return j2p(result);
              }

              static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg)
              {
                jint a0;
                JArray< jchar > result((jobject) NULL);

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.GetSuffix(a0));
                  return result.wrap();
                }

                PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
                return NULL;
              }

              static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.backup(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "backup", arg);
                return NULL;
              }

              static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBeginColumn());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBeginLine());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getColumn());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEndColumn());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEndLine());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_getLine(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getLine());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_readChar(t_FastCharStream *self)
              {
                jchar result;
                OBJ_CALL(result = self->object.readChar());
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBeginColumn());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBeginLine());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getColumn());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEndColumn());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEndLine());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getLine());
                return PyInt_FromLong((long) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/SpanishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *SpanishStemmer::class$ = NULL;
        jmethodID *SpanishStemmer::mids$ = NULL;
        bool SpanishStemmer::live$ = false;

        jclass SpanishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/SpanishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SpanishStemmer::SpanishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean SpanishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint SpanishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean SpanishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_SpanishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SpanishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SpanishStemmer_init_(t_SpanishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SpanishStemmer_equals(t_SpanishStemmer *self, PyObject *args);
        static PyObject *t_SpanishStemmer_hashCode(t_SpanishStemmer *self, PyObject *args);
        static PyObject *t_SpanishStemmer_stem(t_SpanishStemmer *self, PyObject *args);

        static PyMethodDef t_SpanishStemmer__methods_[] = {
          DECLARE_METHOD(t_SpanishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SpanishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SpanishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_SpanishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_SpanishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SpanishStemmer, t_SpanishStemmer, ::org::tartarus::snowball::SnowballProgram, SpanishStemmer, t_SpanishStemmer_init_, 0, 0, 0, 0, 0);

        void t_SpanishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(SpanishStemmer), module, "SpanishStemmer", 0);
        }

        void t_SpanishStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SpanishStemmer).tp_dict, "class_", make_descriptor(SpanishStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SpanishStemmer).tp_dict, "wrapfn_", make_descriptor(t_SpanishStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SpanishStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SpanishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SpanishStemmer::initializeClass, 1)))
            return NULL;
          return t_SpanishStemmer::wrap_Object(SpanishStemmer(((t_SpanishStemmer *) arg)->object.this$));
        }
        static PyObject *t_SpanishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SpanishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SpanishStemmer_init_(t_SpanishStemmer *self, PyObject *args, PyObject *kwds)
        {
          SpanishStemmer object((jobject) NULL);

          INT_CALL(object = SpanishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_SpanishStemmer_equals(t_SpanishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(SpanishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_SpanishStemmer_hashCode(t_SpanishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SpanishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_SpanishStemmer_stem(t_SpanishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(SpanishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy$OneMerge.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/MergePolicy$DocMap.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/index/MergePolicy$MergeAbortedException.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/MergeInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy$OneMerge::class$ = NULL;
        jmethodID *MergePolicy$OneMerge::mids$ = NULL;
        jfieldID *MergePolicy$OneMerge::fids$ = NULL;
        bool MergePolicy$OneMerge::live$ = false;

        jclass MergePolicy$OneMerge::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy$OneMerge");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
            mids$[mid_checkAborted_2e261ef2] = env->getMethodID(cls, "checkAborted", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_getDocMap_a6eb90c4] = env->getMethodID(cls, "getDocMap", "(Lorg/apache/lucene/index/MergeState;)Lorg/apache/lucene/index/MergePolicy$DocMap;");
            mids$[mid_getMergeInfo_e24ac350] = env->getMethodID(cls, "getMergeInfo", "()Lorg/apache/lucene/store/MergeInfo;");
            mids$[mid_getMergeReaders_87851566] = env->getMethodID(cls, "getMergeReaders", "()Ljava/util/List;");
            mids$[mid_getPause_54c6a16a] = env->getMethodID(cls, "getPause", "()Z");
            mids$[mid_segString_0451c495] = env->getMethodID(cls, "segString", "(Lorg/apache/lucene/store/Directory;)Ljava/lang/String;");
            mids$[mid_setInfo_6649cdf4] = env->getMethodID(cls, "setInfo", "(Lorg/apache/lucene/index/SegmentCommitInfo;)V");
            mids$[mid_setPause_bb0c767f] = env->getMethodID(cls, "setPause", "(Z)V");
            mids$[mid_totalBytesSize_54c6a17a] = env->getMethodID(cls, "totalBytesSize", "()J");
            mids$[mid_totalNumDocs_54c6a179] = env->getMethodID(cls, "totalNumDocs", "()I");

            fids$ = new jfieldID[max_fid];
            fids$[fid_estimatedMergeBytes] = env->getFieldID(cls, "estimatedMergeBytes", "J");
            fids$[fid_segments] = env->getFieldID(cls, "segments", "Ljava/util/List;");
            fids$[fid_totalDocCount] = env->getFieldID(cls, "totalDocCount", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergePolicy$OneMerge::MergePolicy$OneMerge(const ::java::util::List & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

        void MergePolicy$OneMerge::checkAborted(const ::org::apache::lucene::store::Directory & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_checkAborted_2e261ef2], a0.this$);
        }

        ::org::apache::lucene::index::MergePolicy$DocMap MergePolicy$OneMerge::getDocMap(const ::org::apache::lucene::index::MergeState & a0) const
        {
          return ::org::apache::lucene::index::MergePolicy$DocMap(env->callObjectMethod(this$, mids$[mid_getDocMap_a6eb90c4], a0.this$));
        }

        ::org::apache::lucene::store::MergeInfo MergePolicy$OneMerge::getMergeInfo() const
        {
          return ::org::apache::lucene::store::MergeInfo(env->callObjectMethod(this$, mids$[mid_getMergeInfo_e24ac350]));
        }

        ::java::util::List MergePolicy$OneMerge::getMergeReaders() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getMergeReaders_87851566]));
        }

        jboolean MergePolicy$OneMerge::getPause() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getPause_54c6a16a]);
        }

        ::java::lang::String MergePolicy$OneMerge::segString(const ::org::apache::lucene::store::Directory & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_segString_0451c495], a0.this$));
        }

        void MergePolicy$OneMerge::setInfo(const ::org::apache::lucene::index::SegmentCommitInfo & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setInfo_6649cdf4], a0.this$);
        }

        void MergePolicy$OneMerge::setPause(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setPause_bb0c767f], a0);
        }

        jlong MergePolicy$OneMerge::totalBytesSize() const
        {
          return env->callLongMethod(this$, mids$[mid_totalBytesSize_54c6a17a]);
        }

        jint MergePolicy$OneMerge::totalNumDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_totalNumDocs_54c6a179]);
        }

        jlong MergePolicy$OneMerge::_get_estimatedMergeBytes() const
        {
          return env->getLongField(this$, fids$[fid_estimatedMergeBytes]);
        }

        void MergePolicy$OneMerge::_set_estimatedMergeBytes(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_estimatedMergeBytes], a0);
        }

        ::java::util::List MergePolicy$OneMerge::_get_segments() const
        {
          return ::java::util::List(env->getObjectField(this$, fids$[fid_segments]));
        }

        jint MergePolicy$OneMerge::_get_totalDocCount() const
        {
          return env->getIntField(this$, fids$[fid_totalDocCount]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy$OneMerge_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$OneMerge_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergePolicy$OneMerge_init_(t_MergePolicy$OneMerge *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergePolicy$OneMerge_checkAborted(t_MergePolicy$OneMerge *self, PyObject *arg);
        static PyObject *t_MergePolicy$OneMerge_getDocMap(t_MergePolicy$OneMerge *self, PyObject *arg);
        static PyObject *t_MergePolicy$OneMerge_getMergeInfo(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_getMergeReaders(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_getPause(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_segString(t_MergePolicy$OneMerge *self, PyObject *arg);
        static PyObject *t_MergePolicy$OneMerge_setInfo(t_MergePolicy$OneMerge *self, PyObject *arg);
        static PyObject *t_MergePolicy$OneMerge_setPause(t_MergePolicy$OneMerge *self, PyObject *arg);
        static PyObject *t_MergePolicy$OneMerge_totalBytesSize(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_totalNumDocs(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_get__estimatedMergeBytes(t_MergePolicy$OneMerge *self, void *data);
        static int t_MergePolicy$OneMerge_set__estimatedMergeBytes(t_MergePolicy$OneMerge *self, PyObject *arg, void *data);
        static PyObject *t_MergePolicy$OneMerge_get__segments(t_MergePolicy$OneMerge *self, void *data);
        static PyObject *t_MergePolicy$OneMerge_get__totalDocCount(t_MergePolicy$OneMerge *self, void *data);

        static int t_MergePolicy$OneMerge_set__info(t_MergePolicy$OneMerge *self, PyObject *arg, void *data);
        static PyObject *t_MergePolicy$OneMerge_get__mergeInfo(t_MergePolicy$OneMerge *self, void *data);
        static PyObject *t_MergePolicy$OneMerge_get__mergeReaders(t_MergePolicy$OneMerge *self, void *data);
        static PyObject *t_MergePolicy$OneMerge_get__pause(t_MergePolicy$OneMerge *self, void *data);
        static int t_MergePolicy$OneMerge_set__pause(t_MergePolicy$OneMerge *self, PyObject *arg, void *data);
        static PyGetSetDef t_MergePolicy$OneMerge__fields_[] = {
          DECLARE_GETSET_FIELD(t_MergePolicy$OneMerge, estimatedMergeBytes),
          DECLARE_GET_FIELD(t_MergePolicy$OneMerge, segments),
          DECLARE_GET_FIELD(t_MergePolicy$OneMerge, totalDocCount),
          DECLARE_SET_FIELD(t_MergePolicy$OneMerge, info),
          DECLARE_GET_FIELD(t_MergePolicy$OneMerge, mergeInfo),
          DECLARE_GET_FIELD(t_MergePolicy$OneMerge, mergeReaders),
          DECLARE_GETSET_FIELD(t_MergePolicy$OneMerge, pause),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergePolicy$OneMerge__methods_[] = {
          DECLARE_METHOD(t_MergePolicy$OneMerge, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, checkAborted, METH_O),
          DECLARE_METHOD(t_MergePolicy$OneMerge, getDocMap, METH_O),
          DECLARE_METHOD(t_MergePolicy$OneMerge, getMergeInfo, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, getMergeReaders, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, getPause, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, segString, METH_O),
          DECLARE_METHOD(t_MergePolicy$OneMerge, setInfo, METH_O),
          DECLARE_METHOD(t_MergePolicy$OneMerge, setPause, METH_O),
          DECLARE_METHOD(t_MergePolicy$OneMerge, totalBytesSize, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, totalNumDocs, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergePolicy$OneMerge, t_MergePolicy$OneMerge, ::java::lang::Object, MergePolicy$OneMerge, t_MergePolicy$OneMerge_init_, 0, 0, t_MergePolicy$OneMerge__fields_, 0, 0);

        void t_MergePolicy$OneMerge::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy$OneMerge), module, "MergePolicy$OneMerge", 0);
        }

        void t_MergePolicy$OneMerge::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergePolicy$OneMerge).tp_dict, "class_", make_descriptor(MergePolicy$OneMerge::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergePolicy$OneMerge).tp_dict, "wrapfn_", make_descriptor(t_MergePolicy$OneMerge::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergePolicy$OneMerge).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy$OneMerge_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy$OneMerge::initializeClass, 1)))
            return NULL;
          return t_MergePolicy$OneMerge::wrap_Object(MergePolicy$OneMerge(((t_MergePolicy$OneMerge *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy$OneMerge_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy$OneMerge::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergePolicy$OneMerge_init_(t_MergePolicy$OneMerge *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          MergePolicy$OneMerge object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            INT_CALL(object = MergePolicy$OneMerge(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MergePolicy$OneMerge_checkAborted(t_MergePolicy$OneMerge *self, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(self->object.checkAborted(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "checkAborted", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$OneMerge_getDocMap(t_MergePolicy$OneMerge *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$DocMap result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getDocMap(a0));
            return ::org::apache::lucene::index::t_MergePolicy$DocMap::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocMap", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$OneMerge_getMergeInfo(t_MergePolicy$OneMerge *self)
        {
          ::org::apache::lucene::store::MergeInfo result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergeInfo());
          return ::org::apache::lucene::store::t_MergeInfo::wrap_Object(result);
        }

        static PyObject *t_MergePolicy$OneMerge_getMergeReaders(t_MergePolicy$OneMerge *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergeReaders());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(AtomicReader));
        }

        static PyObject *t_MergePolicy$OneMerge_getPause(t_MergePolicy$OneMerge *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getPause());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_MergePolicy$OneMerge_segString(t_MergePolicy$OneMerge *self, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.segString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "segString", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$OneMerge_setInfo(t_MergePolicy$OneMerge *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setInfo(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setInfo", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$OneMerge_setPause(t_MergePolicy$OneMerge *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setPause(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setPause", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$OneMerge_totalBytesSize(t_MergePolicy$OneMerge *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.totalBytesSize());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_MergePolicy$OneMerge_totalNumDocs(t_MergePolicy$OneMerge *self)
        {
          jint result;
          OBJ_CALL(result = self->object.totalNumDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MergePolicy$OneMerge_get__estimatedMergeBytes(t_MergePolicy$OneMerge *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_estimatedMergeBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_MergePolicy$OneMerge_set__estimatedMergeBytes(t_MergePolicy$OneMerge *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_estimatedMergeBytes(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "estimatedMergeBytes", arg);
          return -1;
        }

        static PyObject *t_MergePolicy$OneMerge_get__segments(t_MergePolicy$OneMerge *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segments());
          return ::java::util::t_List::wrap_Object(value);
        }

        static PyObject *t_MergePolicy$OneMerge_get__totalDocCount(t_MergePolicy$OneMerge *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_totalDocCount());
          return PyInt_FromLong((long) value);
        }

        static int t_MergePolicy$OneMerge_set__info(t_MergePolicy$OneMerge *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::SegmentCommitInfo value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &value))
            {
              INT_CALL(self->object.setInfo(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "info", arg);
          return -1;
        }

        static PyObject *t_MergePolicy$OneMerge_get__mergeInfo(t_MergePolicy$OneMerge *self, void *data)
        {
          ::org::apache::lucene::store::MergeInfo value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergeInfo());
          return ::org::apache::lucene::store::t_MergeInfo::wrap_Object(value);
        }

        static PyObject *t_MergePolicy$OneMerge_get__mergeReaders(t_MergePolicy$OneMerge *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergeReaders());
          return ::java::util::t_List::wrap_Object(value);
        }

        static PyObject *t_MergePolicy$OneMerge_get__pause(t_MergePolicy$OneMerge *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getPause());
          Py_RETURN_BOOL(value);
        }
        static int t_MergePolicy$OneMerge_set__pause(t_MergePolicy$OneMerge *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setPause(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "pause", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/SimpleFieldFragList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *SimpleFieldFragList::class$ = NULL;
          jmethodID *SimpleFieldFragList::mids$ = NULL;
          bool SimpleFieldFragList::live$ = false;

          jclass SimpleFieldFragList::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/SimpleFieldFragList");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_add_21fbeb2b] = env->getMethodID(cls, "add", "(IILjava/util/List;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleFieldFragList::SimpleFieldFragList(jint a0) : ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          void SimpleFieldFragList::add(jint a0, jint a1, const ::java::util::List & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_add_21fbeb2b], a0, a1, a2.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_SimpleFieldFragList_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleFieldFragList_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleFieldFragList_init_(t_SimpleFieldFragList *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleFieldFragList_add(t_SimpleFieldFragList *self, PyObject *args);

          static PyMethodDef t_SimpleFieldFragList__methods_[] = {
            DECLARE_METHOD(t_SimpleFieldFragList, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFieldFragList, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFieldFragList, add, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleFieldFragList, t_SimpleFieldFragList, ::org::apache::lucene::search::vectorhighlight::FieldFragList, SimpleFieldFragList, t_SimpleFieldFragList_init_, 0, 0, 0, 0, 0);

          void t_SimpleFieldFragList::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleFieldFragList), module, "SimpleFieldFragList", 0);
          }

          void t_SimpleFieldFragList::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleFieldFragList).tp_dict, "class_", make_descriptor(SimpleFieldFragList::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleFieldFragList).tp_dict, "wrapfn_", make_descriptor(t_SimpleFieldFragList::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleFieldFragList).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleFieldFragList_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleFieldFragList::initializeClass, 1)))
              return NULL;
            return t_SimpleFieldFragList::wrap_Object(SimpleFieldFragList(((t_SimpleFieldFragList *) arg)->object.this$));
          }
          static PyObject *t_SimpleFieldFragList_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleFieldFragList::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleFieldFragList_init_(t_SimpleFieldFragList *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            SimpleFieldFragList object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = SimpleFieldFragList(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleFieldFragList_add(t_SimpleFieldFragList *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::util::List a2((jobject) NULL);
            PyTypeObject **p2;

            if (!parseArgs(args, "IIK", ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(self->object.add(a0, a1, a2));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SimpleFieldFragList), (PyObject *) self, "add", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/messages/QueryParserMessages.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace messages {

              ::java::lang::Class *QueryParserMessages::class$ = NULL;
              jmethodID *QueryParserMessages::mids$ = NULL;
              bool QueryParserMessages::live$ = false;
              ::java::lang::String *QueryParserMessages::COULD_NOT_PARSE_NUMBER = NULL;
              ::java::lang::String *QueryParserMessages::EMPTY_MESSAGE = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_CANNOT_PARSE = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_ESCAPE_CHARACTER = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_FUZZY_EDITS = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_FUZZY_LIMITS = NULL;
              ::java::lang::String *QueryParserMessages::LEADING_WILDCARD_NOT_ALLOWED = NULL;
              ::java::lang::String *QueryParserMessages::LUCENE_QUERY_CONVERSION_ERROR = NULL;
              ::java::lang::String *QueryParserMessages::NODE_ACTION_NOT_SUPPORTED = NULL;
              ::java::lang::String *QueryParserMessages::NUMBER_CLASS_NOT_SUPPORTED_BY_NUMERIC_RANGE_QUERY = NULL;
              ::java::lang::String *QueryParserMessages::NUMERIC_CANNOT_BE_EMPTY = NULL;
              ::java::lang::String *QueryParserMessages::PARAMETER_VALUE_NOT_SUPPORTED = NULL;
              ::java::lang::String *QueryParserMessages::TOO_MANY_BOOLEAN_CLAUSES = NULL;
              ::java::lang::String *QueryParserMessages::UNSUPPORTED_NUMERIC_DATA_TYPE = NULL;
              ::java::lang::String *QueryParserMessages::WILDCARD_NOT_SUPPORTED = NULL;

              jclass QueryParserMessages::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/messages/QueryParserMessages");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  COULD_NOT_PARSE_NUMBER = new ::java::lang::String(env->getStaticObjectField(cls, "COULD_NOT_PARSE_NUMBER", "Ljava/lang/String;"));
                  EMPTY_MESSAGE = new ::java::lang::String(env->getStaticObjectField(cls, "EMPTY_MESSAGE", "Ljava/lang/String;"));
                  INVALID_SYNTAX = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX", "Ljava/lang/String;"));
                  INVALID_SYNTAX_CANNOT_PARSE = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_CANNOT_PARSE", "Ljava/lang/String;"));
                  INVALID_SYNTAX_ESCAPE_CHARACTER = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_ESCAPE_CHARACTER", "Ljava/lang/String;"));
                  INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE", "Ljava/lang/String;"));
                  INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION", "Ljava/lang/String;"));
                  INVALID_SYNTAX_FUZZY_EDITS = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_FUZZY_EDITS", "Ljava/lang/String;"));
                  INVALID_SYNTAX_FUZZY_LIMITS = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_FUZZY_LIMITS", "Ljava/lang/String;"));
                  LEADING_WILDCARD_NOT_ALLOWED = new ::java::lang::String(env->getStaticObjectField(cls, "LEADING_WILDCARD_NOT_ALLOWED", "Ljava/lang/String;"));
                  LUCENE_QUERY_CONVERSION_ERROR = new ::java::lang::String(env->getStaticObjectField(cls, "LUCENE_QUERY_CONVERSION_ERROR", "Ljava/lang/String;"));
                  NODE_ACTION_NOT_SUPPORTED = new ::java::lang::String(env->getStaticObjectField(cls, "NODE_ACTION_NOT_SUPPORTED", "Ljava/lang/String;"));
                  NUMBER_CLASS_NOT_SUPPORTED_BY_NUMERIC_RANGE_QUERY = new ::java::lang::String(env->getStaticObjectField(cls, "NUMBER_CLASS_NOT_SUPPORTED_BY_NUMERIC_RANGE_QUERY", "Ljava/lang/String;"));
                  NUMERIC_CANNOT_BE_EMPTY = new ::java::lang::String(env->getStaticObjectField(cls, "NUMERIC_CANNOT_BE_EMPTY", "Ljava/lang/String;"));
                  PARAMETER_VALUE_NOT_SUPPORTED = new ::java::lang::String(env->getStaticObjectField(cls, "PARAMETER_VALUE_NOT_SUPPORTED", "Ljava/lang/String;"));
                  TOO_MANY_BOOLEAN_CLAUSES = new ::java::lang::String(env->getStaticObjectField(cls, "TOO_MANY_BOOLEAN_CLAUSES", "Ljava/lang/String;"));
                  UNSUPPORTED_NUMERIC_DATA_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "UNSUPPORTED_NUMERIC_DATA_TYPE", "Ljava/lang/String;"));
                  WILDCARD_NOT_SUPPORTED = new ::java::lang::String(env->getStaticObjectField(cls, "WILDCARD_NOT_SUPPORTED", "Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace messages {
              static PyObject *t_QueryParserMessages_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryParserMessages_instance_(PyTypeObject *type, PyObject *arg);

              static PyMethodDef t_QueryParserMessages__methods_[] = {
                DECLARE_METHOD(t_QueryParserMessages, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryParserMessages, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryParserMessages, t_QueryParserMessages, ::org::apache::lucene::queryparser::flexible::messages::NLS, QueryParserMessages, abstract_init, 0, 0, 0, 0, 0);

              void t_QueryParserMessages::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryParserMessages), module, "QueryParserMessages", 0);
              }

              void t_QueryParserMessages::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "class_", make_descriptor(QueryParserMessages::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "wrapfn_", make_descriptor(t_QueryParserMessages::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(QueryParserMessages::initializeClass);
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "COULD_NOT_PARSE_NUMBER", make_descriptor(j2p(*QueryParserMessages::COULD_NOT_PARSE_NUMBER)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "EMPTY_MESSAGE", make_descriptor(j2p(*QueryParserMessages::EMPTY_MESSAGE)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "INVALID_SYNTAX", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "INVALID_SYNTAX_CANNOT_PARSE", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_CANNOT_PARSE)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "INVALID_SYNTAX_ESCAPE_CHARACTER", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_ESCAPE_CHARACTER)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "INVALID_SYNTAX_FUZZY_EDITS", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_FUZZY_EDITS)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "INVALID_SYNTAX_FUZZY_LIMITS", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_FUZZY_LIMITS)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "LEADING_WILDCARD_NOT_ALLOWED", make_descriptor(j2p(*QueryParserMessages::LEADING_WILDCARD_NOT_ALLOWED)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "LUCENE_QUERY_CONVERSION_ERROR", make_descriptor(j2p(*QueryParserMessages::LUCENE_QUERY_CONVERSION_ERROR)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "NODE_ACTION_NOT_SUPPORTED", make_descriptor(j2p(*QueryParserMessages::NODE_ACTION_NOT_SUPPORTED)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "NUMBER_CLASS_NOT_SUPPORTED_BY_NUMERIC_RANGE_QUERY", make_descriptor(j2p(*QueryParserMessages::NUMBER_CLASS_NOT_SUPPORTED_BY_NUMERIC_RANGE_QUERY)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "NUMERIC_CANNOT_BE_EMPTY", make_descriptor(j2p(*QueryParserMessages::NUMERIC_CANNOT_BE_EMPTY)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "PARAMETER_VALUE_NOT_SUPPORTED", make_descriptor(j2p(*QueryParserMessages::PARAMETER_VALUE_NOT_SUPPORTED)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "TOO_MANY_BOOLEAN_CLAUSES", make_descriptor(j2p(*QueryParserMessages::TOO_MANY_BOOLEAN_CLAUSES)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "UNSUPPORTED_NUMERIC_DATA_TYPE", make_descriptor(j2p(*QueryParserMessages::UNSUPPORTED_NUMERIC_DATA_TYPE)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "WILDCARD_NOT_SUPPORTED", make_descriptor(j2p(*QueryParserMessages::WILDCARD_NOT_SUPPORTED)));
              }

              static PyObject *t_QueryParserMessages_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryParserMessages::initializeClass, 1)))
                  return NULL;
                return t_QueryParserMessages::wrap_Object(QueryParserMessages(((t_QueryParserMessages *) arg)->object.this$));
              }
              static PyObject *t_QueryParserMessages_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryParserMessages::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RateLimitedDirectoryWrapper.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Double.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IOContext$Context.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/RateLimiter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RateLimitedDirectoryWrapper::class$ = NULL;
        jmethodID *RateLimitedDirectoryWrapper::mids$ = NULL;
        bool RateLimitedDirectoryWrapper::live$ = false;

        jclass RateLimitedDirectoryWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RateLimitedDirectoryWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_copy_146bec62] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_getMaxWriteMBPerSec_c79e30dc] = env->getMethodID(cls, "getMaxWriteMBPerSec", "(Lorg/apache/lucene/store/IOContext$Context;)Ljava/lang/Double;");
            mids$[mid_setMaxWriteMBPerSec_947ec9bf] = env->getMethodID(cls, "setMaxWriteMBPerSec", "(Ljava/lang/Double;Lorg/apache/lucene/store/IOContext$Context;)V");
            mids$[mid_setRateLimiter_6afce4a8] = env->getMethodID(cls, "setRateLimiter", "(Lorg/apache/lucene/store/RateLimiter;Lorg/apache/lucene/store/IOContext$Context;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RateLimitedDirectoryWrapper::RateLimitedDirectoryWrapper(const ::org::apache::lucene::store::Directory & a0) : ::org::apache::lucene::store::FilterDirectory(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

        void RateLimitedDirectoryWrapper::copy(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_146bec62], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        ::org::apache::lucene::store::IndexOutput RateLimitedDirectoryWrapper::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        ::java::lang::Double RateLimitedDirectoryWrapper::getMaxWriteMBPerSec(const ::org::apache::lucene::store::IOContext$Context & a0) const
        {
          return ::java::lang::Double(env->callObjectMethod(this$, mids$[mid_getMaxWriteMBPerSec_c79e30dc], a0.this$));
        }

        void RateLimitedDirectoryWrapper::setMaxWriteMBPerSec(const ::java::lang::Double & a0, const ::org::apache::lucene::store::IOContext$Context & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxWriteMBPerSec_947ec9bf], a0.this$, a1.this$);
        }

        void RateLimitedDirectoryWrapper::setRateLimiter(const ::org::apache::lucene::store::RateLimiter & a0, const ::org::apache::lucene::store::IOContext$Context & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setRateLimiter_6afce4a8], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RateLimitedDirectoryWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RateLimitedDirectoryWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RateLimitedDirectoryWrapper_init_(t_RateLimitedDirectoryWrapper *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RateLimitedDirectoryWrapper_copy(t_RateLimitedDirectoryWrapper *self, PyObject *args);
        static PyObject *t_RateLimitedDirectoryWrapper_createOutput(t_RateLimitedDirectoryWrapper *self, PyObject *args);
        static PyObject *t_RateLimitedDirectoryWrapper_getMaxWriteMBPerSec(t_RateLimitedDirectoryWrapper *self, PyObject *arg);
        static PyObject *t_RateLimitedDirectoryWrapper_setMaxWriteMBPerSec(t_RateLimitedDirectoryWrapper *self, PyObject *args);
        static PyObject *t_RateLimitedDirectoryWrapper_setRateLimiter(t_RateLimitedDirectoryWrapper *self, PyObject *args);

        static PyMethodDef t_RateLimitedDirectoryWrapper__methods_[] = {
          DECLARE_METHOD(t_RateLimitedDirectoryWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimitedDirectoryWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimitedDirectoryWrapper, copy, METH_VARARGS),
          DECLARE_METHOD(t_RateLimitedDirectoryWrapper, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_RateLimitedDirectoryWrapper, getMaxWriteMBPerSec, METH_O),
          DECLARE_METHOD(t_RateLimitedDirectoryWrapper, setMaxWriteMBPerSec, METH_VARARGS),
          DECLARE_METHOD(t_RateLimitedDirectoryWrapper, setRateLimiter, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RateLimitedDirectoryWrapper, t_RateLimitedDirectoryWrapper, ::org::apache::lucene::store::FilterDirectory, RateLimitedDirectoryWrapper, t_RateLimitedDirectoryWrapper_init_, 0, 0, 0, 0, 0);

        void t_RateLimitedDirectoryWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(RateLimitedDirectoryWrapper), module, "RateLimitedDirectoryWrapper", 0);
        }

        void t_RateLimitedDirectoryWrapper::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RateLimitedDirectoryWrapper).tp_dict, "class_", make_descriptor(RateLimitedDirectoryWrapper::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RateLimitedDirectoryWrapper).tp_dict, "wrapfn_", make_descriptor(t_RateLimitedDirectoryWrapper::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RateLimitedDirectoryWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RateLimitedDirectoryWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RateLimitedDirectoryWrapper::initializeClass, 1)))
            return NULL;
          return t_RateLimitedDirectoryWrapper::wrap_Object(RateLimitedDirectoryWrapper(((t_RateLimitedDirectoryWrapper *) arg)->object.this$));
        }
        static PyObject *t_RateLimitedDirectoryWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RateLimitedDirectoryWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RateLimitedDirectoryWrapper_init_(t_RateLimitedDirectoryWrapper *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          RateLimitedDirectoryWrapper object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            INT_CALL(object = RateLimitedDirectoryWrapper(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RateLimitedDirectoryWrapper_copy(t_RateLimitedDirectoryWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);

          if (!parseArgs(args, "kssk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.copy(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RateLimitedDirectoryWrapper), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_RateLimitedDirectoryWrapper_createOutput(t_RateLimitedDirectoryWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(RateLimitedDirectoryWrapper), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_RateLimitedDirectoryWrapper_getMaxWriteMBPerSec(t_RateLimitedDirectoryWrapper *self, PyObject *arg)
        {
          ::org::apache::lucene::store::IOContext$Context a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Double result((jobject) NULL);

          if (!parseArg(arg, "K", ::org::apache::lucene::store::IOContext$Context::initializeClass, &a0, &p0, ::org::apache::lucene::store::t_IOContext$Context::parameters_))
          {
            OBJ_CALL(result = self->object.getMaxWriteMBPerSec(a0));
            return ::java::lang::t_Double::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getMaxWriteMBPerSec", arg);
          return NULL;
        }

        static PyObject *t_RateLimitedDirectoryWrapper_setMaxWriteMBPerSec(t_RateLimitedDirectoryWrapper *self, PyObject *args)
        {
          ::java::lang::Double a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext$Context a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "OK", &::java::lang::PY_TYPE(Double), ::org::apache::lucene::store::IOContext$Context::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::store::t_IOContext$Context::parameters_))
          {
            OBJ_CALL(self->object.setMaxWriteMBPerSec(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxWriteMBPerSec", args);
          return NULL;
        }

        static PyObject *t_RateLimitedDirectoryWrapper_setRateLimiter(t_RateLimitedDirectoryWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::store::RateLimiter a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext$Context a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "kK", ::org::apache::lucene::store::RateLimiter::initializeClass, ::org::apache::lucene::store::IOContext$Context::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::store::t_IOContext$Context::parameters_))
          {
            OBJ_CALL(self->object.setRateLimiter(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setRateLimiter", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/io/IOException.h"
#include "java/lang/Cloneable.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *TermVectorsReader::class$ = NULL;
        jmethodID *TermVectorsReader::mids$ = NULL;
        bool TermVectorsReader::live$ = false;

        jclass TermVectorsReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/TermVectorsReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_clone_475a2624] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/TermVectorsReader;");
            mids$[mid_get_ef1c9c73] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/index/Fields;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TermVectorsReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        TermVectorsReader TermVectorsReader::clone() const
        {
          return TermVectorsReader(env->callObjectMethod(this$, mids$[mid_clone_475a2624]));
        }

        ::org::apache::lucene::index::Fields TermVectorsReader::get(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_get_ef1c9c73], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_TermVectorsReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsReader_checkIntegrity(t_TermVectorsReader *self);
        static PyObject *t_TermVectorsReader_clone(t_TermVectorsReader *self);
        static PyObject *t_TermVectorsReader_get(t_TermVectorsReader *self, PyObject *arg);

        static PyMethodDef t_TermVectorsReader__methods_[] = {
          DECLARE_METHOD(t_TermVectorsReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsReader, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsReader, clone, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsReader, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermVectorsReader, t_TermVectorsReader, ::java::lang::Object, TermVectorsReader, abstract_init, 0, 0, 0, 0, 0);

        void t_TermVectorsReader::install(PyObject *module)
        {
          installType(&PY_TYPE(TermVectorsReader), module, "TermVectorsReader", 0);
        }

        void t_TermVectorsReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermVectorsReader).tp_dict, "class_", make_descriptor(TermVectorsReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermVectorsReader).tp_dict, "wrapfn_", make_descriptor(t_TermVectorsReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermVectorsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermVectorsReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermVectorsReader::initializeClass, 1)))
            return NULL;
          return t_TermVectorsReader::wrap_Object(TermVectorsReader(((t_TermVectorsReader *) arg)->object.this$));
        }
        static PyObject *t_TermVectorsReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermVectorsReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermVectorsReader_checkIntegrity(t_TermVectorsReader *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermVectorsReader_clone(t_TermVectorsReader *self)
        {
          TermVectorsReader result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_TermVectorsReader::wrap_Object(result);
        }

        static PyObject *t_TermVectorsReader_get(t_TermVectorsReader *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/LiveIndexWriterConfig.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/index/IndexWriterConfig$OpenMode.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "org/apache/lucene/index/MergeScheduler.h"
#include "org/apache/lucene/index/IndexWriter$IndexReaderWarmer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *LiveIndexWriterConfig::class$ = NULL;
        jmethodID *LiveIndexWriterConfig::mids$ = NULL;
        bool LiveIndexWriterConfig::live$ = false;

        jclass LiveIndexWriterConfig::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/LiveIndexWriterConfig");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
            mids$[mid_getCheckIntegrityAtMerge_54c6a16a] = env->getMethodID(cls, "getCheckIntegrityAtMerge", "()Z");
            mids$[mid_getCodec_27f0a02b] = env->getMethodID(cls, "getCodec", "()Lorg/apache/lucene/codecs/Codec;");
            mids$[mid_getIndexCommit_09307276] = env->getMethodID(cls, "getIndexCommit", "()Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_getIndexDeletionPolicy_a18376c3] = env->getMethodID(cls, "getIndexDeletionPolicy", "()Lorg/apache/lucene/index/IndexDeletionPolicy;");
            mids$[mid_getInfoStream_1923150b] = env->getMethodID(cls, "getInfoStream", "()Lorg/apache/lucene/util/InfoStream;");
            mids$[mid_getMaxBufferedDeleteTerms_54c6a179] = env->getMethodID(cls, "getMaxBufferedDeleteTerms", "()I");
            mids$[mid_getMaxBufferedDocs_54c6a179] = env->getMethodID(cls, "getMaxBufferedDocs", "()I");
            mids$[mid_getMaxThreadStates_54c6a179] = env->getMethodID(cls, "getMaxThreadStates", "()I");
            mids$[mid_getMergePolicy_753f8dfd] = env->getMethodID(cls, "getMergePolicy", "()Lorg/apache/lucene/index/MergePolicy;");
            mids$[mid_getMergeScheduler_ff96d655] = env->getMethodID(cls, "getMergeScheduler", "()Lorg/apache/lucene/index/MergeScheduler;");
            mids$[mid_getMergedSegmentWarmer_b145c9d7] = env->getMethodID(cls, "getMergedSegmentWarmer", "()Lorg/apache/lucene/index/IndexWriter$IndexReaderWarmer;");
            mids$[mid_getOpenMode_4134b214] = env->getMethodID(cls, "getOpenMode", "()Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;");
            mids$[mid_getRAMBufferSizeMB_54c6a174] = env->getMethodID(cls, "getRAMBufferSizeMB", "()D");
            mids$[mid_getRAMPerThreadHardLimitMB_54c6a179] = env->getMethodID(cls, "getRAMPerThreadHardLimitMB", "()I");
            mids$[mid_getReaderPooling_54c6a16a] = env->getMethodID(cls, "getReaderPooling", "()Z");
            mids$[mid_getReaderTermsIndexDivisor_54c6a179] = env->getMethodID(cls, "getReaderTermsIndexDivisor", "()I");
            mids$[mid_getSimilarity_efcb1233] = env->getMethodID(cls, "getSimilarity", "()Lorg/apache/lucene/search/similarities/Similarity;");
            mids$[mid_getTermIndexInterval_54c6a179] = env->getMethodID(cls, "getTermIndexInterval", "()I");
            mids$[mid_getUseCompoundFile_54c6a16a] = env->getMethodID(cls, "getUseCompoundFile", "()Z");
            mids$[mid_getWriteLockTimeout_54c6a17a] = env->getMethodID(cls, "getWriteLockTimeout", "()J");
            mids$[mid_setCheckIntegrityAtMerge_7cdcb09b] = env->getMethodID(cls, "setCheckIntegrityAtMerge", "(Z)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setMaxBufferedDeleteTerms_4e167404] = env->getMethodID(cls, "setMaxBufferedDeleteTerms", "(I)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setMaxBufferedDocs_4e167404] = env->getMethodID(cls, "setMaxBufferedDocs", "(I)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setMergedSegmentWarmer_02b4678e] = env->getMethodID(cls, "setMergedSegmentWarmer", "(Lorg/apache/lucene/index/IndexWriter$IndexReaderWarmer;)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setRAMBufferSizeMB_e14feba1] = env->getMethodID(cls, "setRAMBufferSizeMB", "(D)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setReaderTermsIndexDivisor_4e167404] = env->getMethodID(cls, "setReaderTermsIndexDivisor", "(I)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setTermIndexInterval_4e167404] = env->getMethodID(cls, "setTermIndexInterval", "(I)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setUseCompoundFile_7cdcb09b] = env->getMethodID(cls, "setUseCompoundFile", "(Z)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::analysis::Analyzer LiveIndexWriterConfig::getAnalyzer() const
        {
          return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
        }

        jboolean LiveIndexWriterConfig::getCheckIntegrityAtMerge() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getCheckIntegrityAtMerge_54c6a16a]);
        }

        ::org::apache::lucene::codecs::Codec LiveIndexWriterConfig::getCodec() const
        {
          return ::org::apache::lucene::codecs::Codec(env->callObjectMethod(this$, mids$[mid_getCodec_27f0a02b]));
        }

        ::org::apache::lucene::index::IndexCommit LiveIndexWriterConfig::getIndexCommit() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_getIndexCommit_09307276]));
        }

        ::org::apache::lucene::index::IndexDeletionPolicy LiveIndexWriterConfig::getIndexDeletionPolicy() const
        {
          return ::org::apache::lucene::index::IndexDeletionPolicy(env->callObjectMethod(this$, mids$[mid_getIndexDeletionPolicy_a18376c3]));
        }

        ::org::apache::lucene::util::InfoStream LiveIndexWriterConfig::getInfoStream() const
        {
          return ::org::apache::lucene::util::InfoStream(env->callObjectMethod(this$, mids$[mid_getInfoStream_1923150b]));
        }

        jint LiveIndexWriterConfig::getMaxBufferedDeleteTerms() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxBufferedDeleteTerms_54c6a179]);
        }

        jint LiveIndexWriterConfig::getMaxBufferedDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxBufferedDocs_54c6a179]);
        }

        jint LiveIndexWriterConfig::getMaxThreadStates() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxThreadStates_54c6a179]);
        }

        ::org::apache::lucene::index::MergePolicy LiveIndexWriterConfig::getMergePolicy() const
        {
          return ::org::apache::lucene::index::MergePolicy(env->callObjectMethod(this$, mids$[mid_getMergePolicy_753f8dfd]));
        }

        ::org::apache::lucene::index::MergeScheduler LiveIndexWriterConfig::getMergeScheduler() const
        {
          return ::org::apache::lucene::index::MergeScheduler(env->callObjectMethod(this$, mids$[mid_getMergeScheduler_ff96d655]));
        }

        ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer LiveIndexWriterConfig::getMergedSegmentWarmer() const
        {
          return ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer(env->callObjectMethod(this$, mids$[mid_getMergedSegmentWarmer_b145c9d7]));
        }

        ::org::apache::lucene::index::IndexWriterConfig$OpenMode LiveIndexWriterConfig::getOpenMode() const
        {
          return ::org::apache::lucene::index::IndexWriterConfig$OpenMode(env->callObjectMethod(this$, mids$[mid_getOpenMode_4134b214]));
        }

        jdouble LiveIndexWriterConfig::getRAMBufferSizeMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getRAMBufferSizeMB_54c6a174]);
        }

        jint LiveIndexWriterConfig::getRAMPerThreadHardLimitMB() const
        {
          return env->callIntMethod(this$, mids$[mid_getRAMPerThreadHardLimitMB_54c6a179]);
        }

        jboolean LiveIndexWriterConfig::getReaderPooling() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getReaderPooling_54c6a16a]);
        }

        jint LiveIndexWriterConfig::getReaderTermsIndexDivisor() const
        {
          return env->callIntMethod(this$, mids$[mid_getReaderTermsIndexDivisor_54c6a179]);
        }

        ::org::apache::lucene::search::similarities::Similarity LiveIndexWriterConfig::getSimilarity() const
        {
          return ::org::apache::lucene::search::similarities::Similarity(env->callObjectMethod(this$, mids$[mid_getSimilarity_efcb1233]));
        }

        jint LiveIndexWriterConfig::getTermIndexInterval() const
        {
          return env->callIntMethod(this$, mids$[mid_getTermIndexInterval_54c6a179]);
        }

        jboolean LiveIndexWriterConfig::getUseCompoundFile() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getUseCompoundFile_54c6a16a]);
        }

        jlong LiveIndexWriterConfig::getWriteLockTimeout() const
        {
          return env->callLongMethod(this$, mids$[mid_getWriteLockTimeout_54c6a17a]);
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setCheckIntegrityAtMerge(jboolean a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setCheckIntegrityAtMerge_7cdcb09b], a0));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setMaxBufferedDeleteTerms(jint a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMaxBufferedDeleteTerms_4e167404], a0));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setMaxBufferedDocs(jint a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMaxBufferedDocs_4e167404], a0));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setMergedSegmentWarmer(const ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer & a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMergedSegmentWarmer_02b4678e], a0.this$));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setRAMBufferSizeMB(jdouble a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setRAMBufferSizeMB_e14feba1], a0));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setReaderTermsIndexDivisor(jint a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setReaderTermsIndexDivisor_4e167404], a0));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setTermIndexInterval(jint a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setTermIndexInterval_4e167404], a0));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setUseCompoundFile(jboolean a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setUseCompoundFile_7cdcb09b], a0));
        }

        ::java::lang::String LiveIndexWriterConfig::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_LiveIndexWriterConfig_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_getAnalyzer(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getCheckIntegrityAtMerge(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getCodec(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getIndexCommit(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getIndexDeletionPolicy(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getInfoStream(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getMaxBufferedDeleteTerms(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getMaxBufferedDocs(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getMaxThreadStates(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getMergePolicy(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getMergeScheduler(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getMergedSegmentWarmer(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getOpenMode(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getRAMBufferSizeMB(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getRAMPerThreadHardLimitMB(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getReaderPooling(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getReaderTermsIndexDivisor(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getSimilarity(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getTermIndexInterval(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getUseCompoundFile(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getWriteLockTimeout(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_setCheckIntegrityAtMerge(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setMaxBufferedDeleteTerms(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setMaxBufferedDocs(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setMergedSegmentWarmer(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setRAMBufferSizeMB(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setReaderTermsIndexDivisor(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setTermIndexInterval(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setUseCompoundFile(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_toString(t_LiveIndexWriterConfig *self, PyObject *args);
        static PyObject *t_LiveIndexWriterConfig_get__analyzer(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__checkIntegrityAtMerge(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__checkIntegrityAtMerge(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__codec(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__indexCommit(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__indexDeletionPolicy(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__infoStream(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__maxBufferedDeleteTerms(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__maxBufferedDeleteTerms(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__maxBufferedDocs(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__maxBufferedDocs(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__maxThreadStates(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__mergePolicy(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__mergeScheduler(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__mergedSegmentWarmer(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__mergedSegmentWarmer(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__openMode(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__rAMBufferSizeMB(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__rAMBufferSizeMB(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__rAMPerThreadHardLimitMB(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__readerPooling(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__readerTermsIndexDivisor(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__readerTermsIndexDivisor(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__similarity(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__termIndexInterval(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__termIndexInterval(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__useCompoundFile(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__useCompoundFile(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__writeLockTimeout(t_LiveIndexWriterConfig *self, void *data);
        static PyGetSetDef t_LiveIndexWriterConfig__fields_[] = {
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, analyzer),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, checkIntegrityAtMerge),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, codec),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, indexCommit),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, indexDeletionPolicy),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, infoStream),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, maxBufferedDeleteTerms),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, maxBufferedDocs),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, maxThreadStates),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, mergePolicy),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, mergeScheduler),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, mergedSegmentWarmer),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, openMode),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, rAMBufferSizeMB),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, rAMPerThreadHardLimitMB),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, readerPooling),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, readerTermsIndexDivisor),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, similarity),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, termIndexInterval),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, useCompoundFile),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, writeLockTimeout),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LiveIndexWriterConfig__methods_[] = {
          DECLARE_METHOD(t_LiveIndexWriterConfig, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getAnalyzer, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getCheckIntegrityAtMerge, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getCodec, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getIndexCommit, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getIndexDeletionPolicy, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getInfoStream, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getMaxBufferedDeleteTerms, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getMaxBufferedDocs, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getMaxThreadStates, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getMergePolicy, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getMergeScheduler, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getMergedSegmentWarmer, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getOpenMode, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getRAMBufferSizeMB, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getRAMPerThreadHardLimitMB, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getReaderPooling, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getReaderTermsIndexDivisor, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getSimilarity, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getTermIndexInterval, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getUseCompoundFile, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getWriteLockTimeout, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setCheckIntegrityAtMerge, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setMaxBufferedDeleteTerms, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setMaxBufferedDocs, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setMergedSegmentWarmer, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setRAMBufferSizeMB, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setReaderTermsIndexDivisor, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setTermIndexInterval, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setUseCompoundFile, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LiveIndexWriterConfig, t_LiveIndexWriterConfig, ::java::lang::Object, LiveIndexWriterConfig, abstract_init, 0, 0, t_LiveIndexWriterConfig__fields_, 0, 0);

        void t_LiveIndexWriterConfig::install(PyObject *module)
        {
          installType(&PY_TYPE(LiveIndexWriterConfig), module, "LiveIndexWriterConfig", 0);
        }

        void t_LiveIndexWriterConfig::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LiveIndexWriterConfig).tp_dict, "class_", make_descriptor(LiveIndexWriterConfig::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LiveIndexWriterConfig).tp_dict, "wrapfn_", make_descriptor(t_LiveIndexWriterConfig::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LiveIndexWriterConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LiveIndexWriterConfig_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LiveIndexWriterConfig::initializeClass, 1)))
            return NULL;
          return t_LiveIndexWriterConfig::wrap_Object(LiveIndexWriterConfig(((t_LiveIndexWriterConfig *) arg)->object.this$));
        }
        static PyObject *t_LiveIndexWriterConfig_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LiveIndexWriterConfig::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_LiveIndexWriterConfig_getAnalyzer(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
          OBJ_CALL(result = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getCheckIntegrityAtMerge(t_LiveIndexWriterConfig *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getCheckIntegrityAtMerge());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getCodec(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::codecs::Codec result((jobject) NULL);
          OBJ_CALL(result = self->object.getCodec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getIndexCommit(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getIndexDeletionPolicy(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexDeletionPolicy());
          return ::org::apache::lucene::index::t_IndexDeletionPolicy::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getInfoStream(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::util::InfoStream result((jobject) NULL);
          OBJ_CALL(result = self->object.getInfoStream());
          return ::org::apache::lucene::util::t_InfoStream::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getMaxBufferedDeleteTerms(t_LiveIndexWriterConfig *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxBufferedDeleteTerms());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getMaxBufferedDocs(t_LiveIndexWriterConfig *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxBufferedDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getMaxThreadStates(t_LiveIndexWriterConfig *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxThreadStates());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getMergePolicy(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::MergePolicy result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergePolicy());
          return ::org::apache::lucene::index::t_MergePolicy::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getMergeScheduler(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::MergeScheduler result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergeScheduler());
          return ::org::apache::lucene::index::t_MergeScheduler::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getMergedSegmentWarmer(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergedSegmentWarmer());
          return ::org::apache::lucene::index::t_IndexWriter$IndexReaderWarmer::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getOpenMode(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::IndexWriterConfig$OpenMode result((jobject) NULL);
          OBJ_CALL(result = self->object.getOpenMode());
          return ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getRAMBufferSizeMB(t_LiveIndexWriterConfig *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getRAMBufferSizeMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getRAMPerThreadHardLimitMB(t_LiveIndexWriterConfig *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getRAMPerThreadHardLimitMB());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getReaderPooling(t_LiveIndexWriterConfig *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getReaderPooling());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getReaderTermsIndexDivisor(t_LiveIndexWriterConfig *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getReaderTermsIndexDivisor());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getSimilarity(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::search::similarities::Similarity result((jobject) NULL);
          OBJ_CALL(result = self->object.getSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getTermIndexInterval(t_LiveIndexWriterConfig *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getTermIndexInterval());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getUseCompoundFile(t_LiveIndexWriterConfig *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getUseCompoundFile());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getWriteLockTimeout(t_LiveIndexWriterConfig *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getWriteLockTimeout());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_LiveIndexWriterConfig_setCheckIntegrityAtMerge(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jboolean a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.setCheckIntegrityAtMerge(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setCheckIntegrityAtMerge", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setMaxBufferedDeleteTerms(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jint a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxBufferedDeleteTerms(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxBufferedDeleteTerms", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setMaxBufferedDocs(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jint a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxBufferedDocs(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxBufferedDocs", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setMergedSegmentWarmer(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer a0((jobject) NULL);
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setMergedSegmentWarmer(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMergedSegmentWarmer", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setRAMBufferSizeMB(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jdouble a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setRAMBufferSizeMB(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setRAMBufferSizeMB", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setReaderTermsIndexDivisor(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jint a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setReaderTermsIndexDivisor(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setReaderTermsIndexDivisor", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setTermIndexInterval(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jint a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setTermIndexInterval(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setTermIndexInterval", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setUseCompoundFile(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jboolean a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.setUseCompoundFile(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setUseCompoundFile", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_toString(t_LiveIndexWriterConfig *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(LiveIndexWriterConfig), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_LiveIndexWriterConfig_get__analyzer(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
          OBJ_CALL(value = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__checkIntegrityAtMerge(t_LiveIndexWriterConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getCheckIntegrityAtMerge());
          Py_RETURN_BOOL(value);
        }
        static int t_LiveIndexWriterConfig_set__checkIntegrityAtMerge(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setCheckIntegrityAtMerge(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "checkIntegrityAtMerge", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__codec(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::codecs::Codec value((jobject) NULL);
          OBJ_CALL(value = self->object.getCodec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__indexCommit(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexCommit value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__indexDeletionPolicy(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexDeletionPolicy());
          return ::org::apache::lucene::index::t_IndexDeletionPolicy::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__infoStream(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::util::InfoStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getInfoStream());
          return ::org::apache::lucene::util::t_InfoStream::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__maxBufferedDeleteTerms(t_LiveIndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxBufferedDeleteTerms());
          return PyInt_FromLong((long) value);
        }
        static int t_LiveIndexWriterConfig_set__maxBufferedDeleteTerms(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxBufferedDeleteTerms(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxBufferedDeleteTerms", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__maxBufferedDocs(t_LiveIndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxBufferedDocs());
          return PyInt_FromLong((long) value);
        }
        static int t_LiveIndexWriterConfig_set__maxBufferedDocs(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxBufferedDocs(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxBufferedDocs", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__maxThreadStates(t_LiveIndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxThreadStates());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__mergePolicy(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::MergePolicy value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergePolicy());
          return ::org::apache::lucene::index::t_MergePolicy::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__mergeScheduler(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::MergeScheduler value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergeScheduler());
          return ::org::apache::lucene::index::t_MergeScheduler::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__mergedSegmentWarmer(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergedSegmentWarmer());
          return ::org::apache::lucene::index::t_IndexWriter$IndexReaderWarmer::wrap_Object(value);
        }
        static int t_LiveIndexWriterConfig_set__mergedSegmentWarmer(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer::initializeClass, &value))
            {
              INT_CALL(self->object.setMergedSegmentWarmer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergedSegmentWarmer", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__openMode(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexWriterConfig$OpenMode value((jobject) NULL);
          OBJ_CALL(value = self->object.getOpenMode());
          return ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__rAMBufferSizeMB(t_LiveIndexWriterConfig *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getRAMBufferSizeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_LiveIndexWriterConfig_set__rAMBufferSizeMB(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setRAMBufferSizeMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "rAMBufferSizeMB", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__rAMPerThreadHardLimitMB(t_LiveIndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getRAMPerThreadHardLimitMB());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__readerPooling(t_LiveIndexWriterConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getReaderPooling());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__readerTermsIndexDivisor(t_LiveIndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getReaderTermsIndexDivisor());
          return PyInt_FromLong((long) value);
        }
        static int t_LiveIndexWriterConfig_set__readerTermsIndexDivisor(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setReaderTermsIndexDivisor(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "readerTermsIndexDivisor", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__similarity(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
          OBJ_CALL(value = self->object.getSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__termIndexInterval(t_LiveIndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getTermIndexInterval());
          return PyInt_FromLong((long) value);
        }
        static int t_LiveIndexWriterConfig_set__termIndexInterval(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setTermIndexInterval(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "termIndexInterval", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__useCompoundFile(t_LiveIndexWriterConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getUseCompoundFile());
          Py_RETURN_BOOL(value);
        }
        static int t_LiveIndexWriterConfig_set__useCompoundFile(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setUseCompoundFile(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "useCompoundFile", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__writeLockTimeout(t_LiveIndexWriterConfig *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getWriteLockTimeout());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Error.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Error::class$ = NULL;
    jmethodID *Error::mids$ = NULL;
    bool Error::live$ = false;

    jclass Error::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Error");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Error::Error() : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    Error::Error(const ::java::lang::Throwable & a0) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

    Error::Error(const ::java::lang::String & a0) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    Error::Error(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Error_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Error_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Error_init_(t_Error *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_Error__methods_[] = {
      DECLARE_METHOD(t_Error, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Error, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Error, t_Error, ::java::lang::Throwable, Error, t_Error_init_, 0, 0, 0, 0, 0);

    void t_Error::install(PyObject *module)
    {
      installType(&PY_TYPE(Error), module, "Error", 0);
    }

    void t_Error::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Error).tp_dict, "class_", make_descriptor(Error::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Error).tp_dict, "wrapfn_", make_descriptor(t_Error::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Error).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Error_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Error::initializeClass, 1)))
        return NULL;
      return t_Error::wrap_Object(Error(((t_Error *) arg)->object.this$));
    }
    static PyObject *t_Error_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Error::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Error_init_(t_Error *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          Error object((jobject) NULL);

          INT_CALL(object = Error());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::Throwable a0((jobject) NULL);
          Error object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            INT_CALL(object = Error(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Error object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Error(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Throwable a1((jobject) NULL);
          Error object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Error(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/DocIdBitSet.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/util/BitSet.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *DocIdBitSet::class$ = NULL;
        jmethodID *DocIdBitSet::mids$ = NULL;
        bool DocIdBitSet::live$ = false;

        jclass DocIdBitSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/DocIdBitSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c8849d64] = env->getMethodID(cls, "<init>", "(Ljava/util/BitSet;)V");
            mids$[mid_bits_03c2457d] = env->getMethodID(cls, "bits", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_get_39c7bd30] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_getBitSet_59c0eb4d] = env->getMethodID(cls, "getBitSet", "()Ljava/util/BitSet;");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocIdBitSet::DocIdBitSet(const ::java::util::BitSet & a0) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_c8849d64, a0.this$)) {}

        ::org::apache::lucene::util::Bits DocIdBitSet::bits() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_bits_03c2457d]));
        }

        jboolean DocIdBitSet::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_39c7bd30], a0);
        }

        ::java::util::BitSet DocIdBitSet::getBitSet() const
        {
          return ::java::util::BitSet(env->callObjectMethod(this$, mids$[mid_getBitSet_59c0eb4d]));
        }

        jboolean DocIdBitSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        ::org::apache::lucene::search::DocIdSetIterator DocIdBitSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
        }

        jint DocIdBitSet::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }

        jlong DocIdBitSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_DocIdBitSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocIdBitSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocIdBitSet_init_(t_DocIdBitSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocIdBitSet_bits(t_DocIdBitSet *self, PyObject *args);
        static PyObject *t_DocIdBitSet_get(t_DocIdBitSet *self, PyObject *arg);
        static PyObject *t_DocIdBitSet_getBitSet(t_DocIdBitSet *self);
        static PyObject *t_DocIdBitSet_isCacheable(t_DocIdBitSet *self, PyObject *args);
        static PyObject *t_DocIdBitSet_iterator(t_DocIdBitSet *self, PyObject *args);
        static PyObject *t_DocIdBitSet_length(t_DocIdBitSet *self);
        static PyObject *t_DocIdBitSet_ramBytesUsed(t_DocIdBitSet *self, PyObject *args);
        static PyObject *t_DocIdBitSet_get__bitSet(t_DocIdBitSet *self, void *data);
        static PyObject *t_DocIdBitSet_get__cacheable(t_DocIdBitSet *self, void *data);
        static PyGetSetDef t_DocIdBitSet__fields_[] = {
          DECLARE_GET_FIELD(t_DocIdBitSet, bitSet),
          DECLARE_GET_FIELD(t_DocIdBitSet, cacheable),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocIdBitSet__methods_[] = {
          DECLARE_METHOD(t_DocIdBitSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdBitSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdBitSet, bits, METH_VARARGS),
          DECLARE_METHOD(t_DocIdBitSet, get, METH_O),
          DECLARE_METHOD(t_DocIdBitSet, getBitSet, METH_NOARGS),
          DECLARE_METHOD(t_DocIdBitSet, isCacheable, METH_VARARGS),
          DECLARE_METHOD(t_DocIdBitSet, iterator, METH_VARARGS),
          DECLARE_METHOD(t_DocIdBitSet, length, METH_NOARGS),
          DECLARE_METHOD(t_DocIdBitSet, ramBytesUsed, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocIdBitSet, t_DocIdBitSet, ::org::apache::lucene::search::DocIdSet, DocIdBitSet, t_DocIdBitSet_init_, 0, 0, t_DocIdBitSet__fields_, 0, 0);

        void t_DocIdBitSet::install(PyObject *module)
        {
          installType(&PY_TYPE(DocIdBitSet), module, "DocIdBitSet", 0);
        }

        void t_DocIdBitSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocIdBitSet).tp_dict, "class_", make_descriptor(DocIdBitSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocIdBitSet).tp_dict, "wrapfn_", make_descriptor(t_DocIdBitSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocIdBitSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocIdBitSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocIdBitSet::initializeClass, 1)))
            return NULL;
          return t_DocIdBitSet::wrap_Object(DocIdBitSet(((t_DocIdBitSet *) arg)->object.this$));
        }
        static PyObject *t_DocIdBitSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocIdBitSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocIdBitSet_init_(t_DocIdBitSet *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::BitSet a0((jobject) NULL);
          DocIdBitSet object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::BitSet::initializeClass, &a0))
          {
            INT_CALL(object = DocIdBitSet(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DocIdBitSet_bits(t_DocIdBitSet *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.bits());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DocIdBitSet), (PyObject *) self, "bits", args, 2);
        }

        static PyObject *t_DocIdBitSet_get(t_DocIdBitSet *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_DocIdBitSet_getBitSet(t_DocIdBitSet *self)
        {
          ::java::util::BitSet result((jobject) NULL);
          OBJ_CALL(result = self->object.getBitSet());
          return ::java::util::t_BitSet::wrap_Object(result);
        }

        static PyObject *t_DocIdBitSet_isCacheable(t_DocIdBitSet *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCacheable());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DocIdBitSet), (PyObject *) self, "isCacheable", args, 2);
        }

        static PyObject *t_DocIdBitSet_iterator(t_DocIdBitSet *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DocIdBitSet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_DocIdBitSet_length(t_DocIdBitSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DocIdBitSet_ramBytesUsed(t_DocIdBitSet *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(DocIdBitSet), (PyObject *) self, "ramBytesUsed", args, 2);
        }

        static PyObject *t_DocIdBitSet_get__bitSet(t_DocIdBitSet *self, void *data)
        {
          ::java::util::BitSet value((jobject) NULL);
          OBJ_CALL(value = self->object.getBitSet());
          return ::java::util::t_BitSet::wrap_Object(value);
        }

        static PyObject *t_DocIdBitSet_get__cacheable(t_DocIdBitSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/std31/UAX29URLEmailTokenizerImpl31.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std31 {

            ::java::lang::Class *UAX29URLEmailTokenizerImpl31::class$ = NULL;
            jmethodID *UAX29URLEmailTokenizerImpl31::mids$ = NULL;
            bool UAX29URLEmailTokenizerImpl31::live$ = false;
            jint UAX29URLEmailTokenizerImpl31::EMAIL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::HANGUL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::HIRAGANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::IDEOGRAPHIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::KATAKANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::NUMERIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::URL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::WORD_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::YYEOF = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::YYINITIAL = (jint) 0;

            jclass UAX29URLEmailTokenizerImpl31::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/std31/UAX29URLEmailTokenizerImpl31");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
                mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
                mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
                mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                EMAIL_TYPE = env->getStaticIntField(cls, "EMAIL_TYPE");
                HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
                HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
                IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
                KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
                NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
                SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
                URL_TYPE = env->getStaticIntField(cls, "URL_TYPE");
                WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
                YYEOF = env->getStaticIntField(cls, "YYEOF");
                YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            UAX29URLEmailTokenizerImpl31::UAX29URLEmailTokenizerImpl31(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jint UAX29URLEmailTokenizerImpl31::getNextToken() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl31::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
            }

            void UAX29URLEmailTokenizerImpl31::yybegin(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
            }

            jint UAX29URLEmailTokenizerImpl31::yychar() const
            {
              return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
            }

            jchar UAX29URLEmailTokenizerImpl31::yycharat(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
            }

            void UAX29URLEmailTokenizerImpl31::yyclose() const
            {
              env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
            }

            jint UAX29URLEmailTokenizerImpl31::yylength() const
            {
              return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl31::yypushback(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
            }

            void UAX29URLEmailTokenizerImpl31::yyreset(const ::java::io::Reader & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
            }

            jint UAX29URLEmailTokenizerImpl31::yystate() const
            {
              return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
            }

            ::java::lang::String UAX29URLEmailTokenizerImpl31::yytext() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std31 {
            static PyObject *t_UAX29URLEmailTokenizerImpl31_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_instance_(PyTypeObject *type, PyObject *arg);
            static int t_UAX29URLEmailTokenizerImpl31_init_(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *args, PyObject *kwds);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_getNextToken(t_UAX29URLEmailTokenizerImpl31 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_getText(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yybegin(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yychar(t_UAX29URLEmailTokenizerImpl31 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yycharat(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yyclose(t_UAX29URLEmailTokenizerImpl31 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yylength(t_UAX29URLEmailTokenizerImpl31 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yypushback(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yyreset(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yystate(t_UAX29URLEmailTokenizerImpl31 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yytext(t_UAX29URLEmailTokenizerImpl31 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_get__nextToken(t_UAX29URLEmailTokenizerImpl31 *self, void *data);
            static PyGetSetDef t_UAX29URLEmailTokenizerImpl31__fields_[] = {
              DECLARE_GET_FIELD(t_UAX29URLEmailTokenizerImpl31, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_UAX29URLEmailTokenizerImpl31__methods_[] = {
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, getText, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yybegin, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yychar, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yycharat, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yyclose, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yylength, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yypushback, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yyreset, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yystate, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yytext, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(UAX29URLEmailTokenizerImpl31, t_UAX29URLEmailTokenizerImpl31, ::java::lang::Object, UAX29URLEmailTokenizerImpl31, t_UAX29URLEmailTokenizerImpl31_init_, 0, 0, t_UAX29URLEmailTokenizerImpl31__fields_, 0, 0);

            void t_UAX29URLEmailTokenizerImpl31::install(PyObject *module)
            {
              installType(&PY_TYPE(UAX29URLEmailTokenizerImpl31), module, "UAX29URLEmailTokenizerImpl31", 0);
            }

            void t_UAX29URLEmailTokenizerImpl31::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "class_", make_descriptor(UAX29URLEmailTokenizerImpl31::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizerImpl31::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(UAX29URLEmailTokenizerImpl31::initializeClass);
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "EMAIL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::EMAIL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "HANGUL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::HANGUL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "HIRAGANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::HIRAGANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::IDEOGRAPHIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "KATAKANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::KATAKANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "NUMERIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::NUMERIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::SOUTH_EAST_ASIAN_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "URL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::URL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "WORD_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::WORD_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "YYEOF", make_descriptor(UAX29URLEmailTokenizerImpl31::YYEOF));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "YYINITIAL", make_descriptor(UAX29URLEmailTokenizerImpl31::YYINITIAL));
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, UAX29URLEmailTokenizerImpl31::initializeClass, 1)))
                return NULL;
              return t_UAX29URLEmailTokenizerImpl31::wrap_Object(UAX29URLEmailTokenizerImpl31(((t_UAX29URLEmailTokenizerImpl31 *) arg)->object.this$));
            }
            static PyObject *t_UAX29URLEmailTokenizerImpl31_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, UAX29URLEmailTokenizerImpl31::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_UAX29URLEmailTokenizerImpl31_init_(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              UAX29URLEmailTokenizerImpl31 object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = UAX29URLEmailTokenizerImpl31(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_getNextToken(t_UAX29URLEmailTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextToken());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_getText(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
              {
                OBJ_CALL(self->object.getText(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getText", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yybegin(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yybegin(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yychar(t_UAX29URLEmailTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yychar());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yycharat(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.yycharat(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yyclose(t_UAX29URLEmailTokenizerImpl31 *self)
            {
              OBJ_CALL(self->object.yyclose());
              Py_RETURN_NONE;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yylength(t_UAX29URLEmailTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yylength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yypushback(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yypushback(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yyreset(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.yyreset(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yystate(t_UAX29URLEmailTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yystate());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yytext(t_UAX29URLEmailTokenizerImpl31 *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.yytext());
              return j2p(result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_get__nextToken(t_UAX29URLEmailTokenizerImpl31 *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextToken());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/ext/ExtendableQueryParser.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/ext/Extensions.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {

          ::java::lang::Class *ExtendableQueryParser::class$ = NULL;
          jmethodID *ExtendableQueryParser::mids$ = NULL;
          bool ExtendableQueryParser::live$ = false;

          jclass ExtendableQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/ext/ExtendableQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_504c192d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init$_5a825d0f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/queryparser/ext/Extensions;)V");
              mids$[mid_getExtensionFieldDelimiter_54c6a173] = env->getMethodID(cls, "getExtensionFieldDelimiter", "()C");
              mids$[mid_getFieldQuery_bd696f55] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ExtendableQueryParser::ExtendableQueryParser(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_504c192d, a0.this$, a1.this$, a2.this$)) {}

          ExtendableQueryParser::ExtendableQueryParser(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2, const ::org::apache::lucene::queryparser::ext::Extensions & a3) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_5a825d0f, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          jchar ExtendableQueryParser::getExtensionFieldDelimiter() const
          {
            return env->callCharMethod(this$, mids$[mid_getExtensionFieldDelimiter_54c6a173]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {
          static PyObject *t_ExtendableQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ExtendableQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ExtendableQueryParser_init_(t_ExtendableQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ExtendableQueryParser_getExtensionFieldDelimiter(t_ExtendableQueryParser *self);
          static PyObject *t_ExtendableQueryParser_get__extensionFieldDelimiter(t_ExtendableQueryParser *self, void *data);
          static PyGetSetDef t_ExtendableQueryParser__fields_[] = {
            DECLARE_GET_FIELD(t_ExtendableQueryParser, extensionFieldDelimiter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ExtendableQueryParser__methods_[] = {
            DECLARE_METHOD(t_ExtendableQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ExtendableQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ExtendableQueryParser, getExtensionFieldDelimiter, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ExtendableQueryParser, t_ExtendableQueryParser, ::org::apache::lucene::queryparser::classic::QueryParser, ExtendableQueryParser, t_ExtendableQueryParser_init_, 0, 0, t_ExtendableQueryParser__fields_, 0, 0);

          void t_ExtendableQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(ExtendableQueryParser), module, "ExtendableQueryParser", 0);
          }

          void t_ExtendableQueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ExtendableQueryParser).tp_dict, "class_", make_descriptor(ExtendableQueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ExtendableQueryParser).tp_dict, "wrapfn_", make_descriptor(t_ExtendableQueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ExtendableQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ExtendableQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ExtendableQueryParser::initializeClass, 1)))
              return NULL;
            return t_ExtendableQueryParser::wrap_Object(ExtendableQueryParser(((t_ExtendableQueryParser *) arg)->object.this$));
          }
          static PyObject *t_ExtendableQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ExtendableQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ExtendableQueryParser_init_(t_ExtendableQueryParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                ExtendableQueryParser object((jobject) NULL);

                if (!parseArgs(args, "Ksk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = ExtendableQueryParser(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                ::org::apache::lucene::queryparser::ext::Extensions a3((jobject) NULL);
                ExtendableQueryParser object((jobject) NULL);

                if (!parseArgs(args, "Kskk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::queryparser::ext::Extensions::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  INT_CALL(object = ExtendableQueryParser(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ExtendableQueryParser_getExtensionFieldDelimiter(t_ExtendableQueryParser *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.getExtensionFieldDelimiter());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_ExtendableQueryParser_get__extensionFieldDelimiter(t_ExtendableQueryParser *self, void *data)
          {
            jchar value;
            OBJ_CALL(value = self->object.getExtensionFieldDelimiter());
            return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/IrishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *IrishStemmer::class$ = NULL;
        jmethodID *IrishStemmer::mids$ = NULL;
        bool IrishStemmer::live$ = false;

        jclass IrishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/IrishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IrishStemmer::IrishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean IrishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint IrishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean IrishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_IrishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IrishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IrishStemmer_init_(t_IrishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IrishStemmer_equals(t_IrishStemmer *self, PyObject *args);
        static PyObject *t_IrishStemmer_hashCode(t_IrishStemmer *self, PyObject *args);
        static PyObject *t_IrishStemmer_stem(t_IrishStemmer *self, PyObject *args);

        static PyMethodDef t_IrishStemmer__methods_[] = {
          DECLARE_METHOD(t_IrishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IrishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IrishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_IrishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IrishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IrishStemmer, t_IrishStemmer, ::org::tartarus::snowball::SnowballProgram, IrishStemmer, t_IrishStemmer_init_, 0, 0, 0, 0, 0);

        void t_IrishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(IrishStemmer), module, "IrishStemmer", 0);
        }

        void t_IrishStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IrishStemmer).tp_dict, "class_", make_descriptor(IrishStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IrishStemmer).tp_dict, "wrapfn_", make_descriptor(t_IrishStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IrishStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IrishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IrishStemmer::initializeClass, 1)))
            return NULL;
          return t_IrishStemmer::wrap_Object(IrishStemmer(((t_IrishStemmer *) arg)->object.this$));
        }
        static PyObject *t_IrishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IrishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IrishStemmer_init_(t_IrishStemmer *self, PyObject *args, PyObject *kwds)
        {
          IrishStemmer object((jobject) NULL);

          INT_CALL(object = IrishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_IrishStemmer_equals(t_IrishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(IrishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IrishStemmer_hashCode(t_IrishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IrishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IrishStemmer_stem(t_IrishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(IrishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LimitTokenCountFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LimitTokenCountFilter::class$ = NULL;
          jmethodID *LimitTokenCountFilter::mids$ = NULL;
          bool LimitTokenCountFilter::live$ = false;

          jclass LimitTokenCountFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LimitTokenCountFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_init$_4f7f61d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;IZ)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LimitTokenCountFilter::LimitTokenCountFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          LimitTokenCountFilter::LimitTokenCountFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_4f7f61d3, a0.this$, a1, a2)) {}

          jboolean LimitTokenCountFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void LimitTokenCountFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LimitTokenCountFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LimitTokenCountFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LimitTokenCountFilter_init_(t_LimitTokenCountFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LimitTokenCountFilter_incrementToken(t_LimitTokenCountFilter *self, PyObject *args);
          static PyObject *t_LimitTokenCountFilter_reset(t_LimitTokenCountFilter *self, PyObject *args);

          static PyMethodDef t_LimitTokenCountFilter__methods_[] = {
            DECLARE_METHOD(t_LimitTokenCountFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_LimitTokenCountFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LimitTokenCountFilter, t_LimitTokenCountFilter, ::org::apache::lucene::analysis::TokenFilter, LimitTokenCountFilter, t_LimitTokenCountFilter_init_, 0, 0, 0, 0, 0);

          void t_LimitTokenCountFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(LimitTokenCountFilter), module, "LimitTokenCountFilter", 0);
          }

          void t_LimitTokenCountFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilter).tp_dict, "class_", make_descriptor(LimitTokenCountFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilter).tp_dict, "wrapfn_", make_descriptor(t_LimitTokenCountFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LimitTokenCountFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LimitTokenCountFilter::initializeClass, 1)))
              return NULL;
            return t_LimitTokenCountFilter::wrap_Object(LimitTokenCountFilter(((t_LimitTokenCountFilter *) arg)->object.this$));
          }
          static PyObject *t_LimitTokenCountFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LimitTokenCountFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LimitTokenCountFilter_init_(t_LimitTokenCountFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                LimitTokenCountFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LimitTokenCountFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                jboolean a2;
                LimitTokenCountFilter object((jobject) NULL);

                if (!parseArgs(args, "kIZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = LimitTokenCountFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LimitTokenCountFilter_incrementToken(t_LimitTokenCountFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(LimitTokenCountFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_LimitTokenCountFilter_reset(t_LimitTokenCountFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(LimitTokenCountFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianMinimalStemFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianMinimalStemFilterFactory::class$ = NULL;
          jmethodID *GalicianMinimalStemFilterFactory::mids$ = NULL;
          bool GalicianMinimalStemFilterFactory::live$ = false;

          jclass GalicianMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianMinimalStemFilterFactory::GalicianMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GalicianMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianMinimalStemFilterFactory_init_(t_GalicianMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianMinimalStemFilterFactory_create(t_GalicianMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GalicianMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GalicianMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GalicianMinimalStemFilterFactory, t_GalicianMinimalStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GalicianMinimalStemFilterFactory, t_GalicianMinimalStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_GalicianMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianMinimalStemFilterFactory), module, "GalicianMinimalStemFilterFactory", 0);
          }

          void t_GalicianMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemFilterFactory).tp_dict, "class_", make_descriptor(GalicianMinimalStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GalicianMinimalStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GalicianMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GalicianMinimalStemFilterFactory::wrap_Object(GalicianMinimalStemFilterFactory(((t_GalicianMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GalicianMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianMinimalStemFilterFactory_init_(t_GalicianMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GalicianMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GalicianMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GalicianMinimalStemFilterFactory_create(t_GalicianMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GalicianMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/DoubleBarrelLRUCache.h"
#include "org/apache/lucene/util/DoubleBarrelLRUCache$CloneableKey.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *DoubleBarrelLRUCache::class$ = NULL;
        jmethodID *DoubleBarrelLRUCache::mids$ = NULL;
        bool DoubleBarrelLRUCache::live$ = false;

        jclass DoubleBarrelLRUCache::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/DoubleBarrelLRUCache");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_get_08c4f70e] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/util/DoubleBarrelLRUCache$CloneableKey;)Ljava/lang/Object;");
            mids$[mid_put_49de5bfd] = env->getMethodID(cls, "put", "(Lorg/apache/lucene/util/DoubleBarrelLRUCache$CloneableKey;Ljava/lang/Object;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DoubleBarrelLRUCache::DoubleBarrelLRUCache(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        ::java::lang::Object DoubleBarrelLRUCache::get(const ::org::apache::lucene::util::DoubleBarrelLRUCache$CloneableKey & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_08c4f70e], a0.this$));
        }

        void DoubleBarrelLRUCache::put(const ::org::apache::lucene::util::DoubleBarrelLRUCache$CloneableKey & a0, const ::java::lang::Object & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_put_49de5bfd], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_DoubleBarrelLRUCache_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleBarrelLRUCache_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleBarrelLRUCache_of_(t_DoubleBarrelLRUCache *self, PyObject *args);
        static int t_DoubleBarrelLRUCache_init_(t_DoubleBarrelLRUCache *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DoubleBarrelLRUCache_get(t_DoubleBarrelLRUCache *self, PyObject *arg);
        static PyObject *t_DoubleBarrelLRUCache_put(t_DoubleBarrelLRUCache *self, PyObject *args);
        static PyObject *t_DoubleBarrelLRUCache_get__parameters_(t_DoubleBarrelLRUCache *self, void *data);
        static PyGetSetDef t_DoubleBarrelLRUCache__fields_[] = {
          DECLARE_GET_FIELD(t_DoubleBarrelLRUCache, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DoubleBarrelLRUCache__methods_[] = {
          DECLARE_METHOD(t_DoubleBarrelLRUCache, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleBarrelLRUCache, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleBarrelLRUCache, of_, METH_VARARGS),
          DECLARE_METHOD(t_DoubleBarrelLRUCache, get, METH_O),
          DECLARE_METHOD(t_DoubleBarrelLRUCache, put, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DoubleBarrelLRUCache, t_DoubleBarrelLRUCache, ::java::lang::Object, DoubleBarrelLRUCache, t_DoubleBarrelLRUCache_init_, 0, 0, t_DoubleBarrelLRUCache__fields_, 0, 0);
        PyObject *t_DoubleBarrelLRUCache::wrap_Object(const DoubleBarrelLRUCache& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_DoubleBarrelLRUCache::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DoubleBarrelLRUCache *self = (t_DoubleBarrelLRUCache *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        PyObject *t_DoubleBarrelLRUCache::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_DoubleBarrelLRUCache::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DoubleBarrelLRUCache *self = (t_DoubleBarrelLRUCache *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        void t_DoubleBarrelLRUCache::install(PyObject *module)
        {
          installType(&PY_TYPE(DoubleBarrelLRUCache), module, "DoubleBarrelLRUCache", 0);
          PyDict_SetItemString(PY_TYPE(DoubleBarrelLRUCache).tp_dict, "CloneableKey", make_descriptor(&PY_TYPE(DoubleBarrelLRUCache$CloneableKey)));
        }

        void t_DoubleBarrelLRUCache::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DoubleBarrelLRUCache).tp_dict, "class_", make_descriptor(DoubleBarrelLRUCache::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DoubleBarrelLRUCache).tp_dict, "wrapfn_", make_descriptor(t_DoubleBarrelLRUCache::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DoubleBarrelLRUCache).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DoubleBarrelLRUCache_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DoubleBarrelLRUCache::initializeClass, 1)))
            return NULL;
          return t_DoubleBarrelLRUCache::wrap_Object(DoubleBarrelLRUCache(((t_DoubleBarrelLRUCache *) arg)->object.this$));
        }
        static PyObject *t_DoubleBarrelLRUCache_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DoubleBarrelLRUCache::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DoubleBarrelLRUCache_of_(t_DoubleBarrelLRUCache *self, PyObject *args)
        {
          if (!parseArg(args, "T", 2, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_DoubleBarrelLRUCache_init_(t_DoubleBarrelLRUCache *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          DoubleBarrelLRUCache object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = DoubleBarrelLRUCache(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DoubleBarrelLRUCache_get(t_DoubleBarrelLRUCache *self, PyObject *arg)
        {
          ::org::apache::lucene::util::DoubleBarrelLRUCache$CloneableKey a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "K", ::org::apache::lucene::util::DoubleBarrelLRUCache$CloneableKey::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_DoubleBarrelLRUCache$CloneableKey::parameters_))
          {
            OBJ_CALL(result = self->object.get(a0));
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_DoubleBarrelLRUCache_put(t_DoubleBarrelLRUCache *self, PyObject *args)
        {
          ::org::apache::lucene::util::DoubleBarrelLRUCache$CloneableKey a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object a1((jobject) NULL);

          if (!parseArgs(args, "KO", ::org::apache::lucene::util::DoubleBarrelLRUCache$CloneableKey::initializeClass, self->parameters[1], &a0, &p0, ::org::apache::lucene::util::t_DoubleBarrelLRUCache$CloneableKey::parameters_, &a1))
          {
            OBJ_CALL(self->object.put(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "put", args);
          return NULL;
        }
        static PyObject *t_DoubleBarrelLRUCache_get__parameters_(t_DoubleBarrelLRUCache *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/SortedIntSet$FrozenIntSet.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/automaton/State.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *SortedIntSet$FrozenIntSet::class$ = NULL;
          jmethodID *SortedIntSet$FrozenIntSet::mids$ = NULL;
          bool SortedIntSet$FrozenIntSet::live$ = false;

          jclass SortedIntSet$FrozenIntSet::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/SortedIntSet$FrozenIntSet");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8b58b7f9] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/util/automaton/State;)V");
              mids$[mid_init$_8bb61283] = env->getMethodID(cls, "<init>", "([IILorg/apache/lucene/util/automaton/State;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedIntSet$FrozenIntSet::SortedIntSet$FrozenIntSet(jint a0, const ::org::apache::lucene::util::automaton::State & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8b58b7f9, a0, a1.this$)) {}

          SortedIntSet$FrozenIntSet::SortedIntSet$FrozenIntSet(const JArray< jint > & a0, jint a1, const ::org::apache::lucene::util::automaton::State & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8bb61283, a0.this$, a1, a2.this$)) {}

          jboolean SortedIntSet$FrozenIntSet::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint SortedIntSet$FrozenIntSet::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String SortedIntSet$FrozenIntSet::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_SortedIntSet$FrozenIntSet_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedIntSet$FrozenIntSet_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedIntSet$FrozenIntSet_init_(t_SortedIntSet$FrozenIntSet *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedIntSet$FrozenIntSet_equals(t_SortedIntSet$FrozenIntSet *self, PyObject *args);
          static PyObject *t_SortedIntSet$FrozenIntSet_hashCode(t_SortedIntSet$FrozenIntSet *self, PyObject *args);
          static PyObject *t_SortedIntSet$FrozenIntSet_toString(t_SortedIntSet$FrozenIntSet *self, PyObject *args);

          static PyMethodDef t_SortedIntSet$FrozenIntSet__methods_[] = {
            DECLARE_METHOD(t_SortedIntSet$FrozenIntSet, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedIntSet$FrozenIntSet, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedIntSet$FrozenIntSet, equals, METH_VARARGS),
            DECLARE_METHOD(t_SortedIntSet$FrozenIntSet, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SortedIntSet$FrozenIntSet, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedIntSet$FrozenIntSet, t_SortedIntSet$FrozenIntSet, ::java::lang::Object, SortedIntSet$FrozenIntSet, t_SortedIntSet$FrozenIntSet_init_, 0, 0, 0, 0, 0);

          void t_SortedIntSet$FrozenIntSet::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedIntSet$FrozenIntSet), module, "SortedIntSet$FrozenIntSet", 0);
          }

          void t_SortedIntSet$FrozenIntSet::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedIntSet$FrozenIntSet).tp_dict, "class_", make_descriptor(SortedIntSet$FrozenIntSet::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedIntSet$FrozenIntSet).tp_dict, "wrapfn_", make_descriptor(t_SortedIntSet$FrozenIntSet::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedIntSet$FrozenIntSet).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedIntSet$FrozenIntSet_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedIntSet$FrozenIntSet::initializeClass, 1)))
              return NULL;
            return t_SortedIntSet$FrozenIntSet::wrap_Object(SortedIntSet$FrozenIntSet(((t_SortedIntSet$FrozenIntSet *) arg)->object.this$));
          }
          static PyObject *t_SortedIntSet$FrozenIntSet_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedIntSet$FrozenIntSet::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedIntSet$FrozenIntSet_init_(t_SortedIntSet$FrozenIntSet *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jint a0;
                ::org::apache::lucene::util::automaton::State a1((jobject) NULL);
                SortedIntSet$FrozenIntSet object((jobject) NULL);

                if (!parseArgs(args, "Ik", ::org::apache::lucene::util::automaton::State::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SortedIntSet$FrozenIntSet(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                JArray< jint > a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::util::automaton::State a2((jobject) NULL);
                SortedIntSet$FrozenIntSet object((jobject) NULL);

                if (!parseArgs(args, "[IIk", ::org::apache::lucene::util::automaton::State::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SortedIntSet$FrozenIntSet(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedIntSet$FrozenIntSet_equals(t_SortedIntSet$FrozenIntSet *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SortedIntSet$FrozenIntSet), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SortedIntSet$FrozenIntSet_hashCode(t_SortedIntSet$FrozenIntSet *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SortedIntSet$FrozenIntSet), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SortedIntSet$FrozenIntSet_toString(t_SortedIntSet$FrozenIntSet *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SortedIntSet$FrozenIntSet), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/DistanceQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/DistanceSubQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *DistanceQuery::class$ = NULL;
            jmethodID *DistanceQuery::mids$ = NULL;
            bool DistanceQuery::live$ = false;

            jclass DistanceQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/DistanceQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6c38956d] = env->getMethodID(cls, "<init>", "(Ljava/util/List;ZILjava/lang/String;Z)V");
                mids$[mid_addSpanQueries_0564f431] = env->getMethodID(cls, "addSpanQueries", "(Lorg/apache/lucene/queryparser/surround/query/SpanNearClauseFactory;)V");
                mids$[mid_distanceSubQueryNotAllowed_14c7b5c5] = env->getMethodID(cls, "distanceSubQueryNotAllowed", "()Ljava/lang/String;");
                mids$[mid_getOpDistance_54c6a179] = env->getMethodID(cls, "getOpDistance", "()I");
                mids$[mid_getSpanNearQuery_b440d198] = env->getMethodID(cls, "getSpanNearQuery", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;FLorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_subQueriesOrdered_54c6a16a] = env->getMethodID(cls, "subQueriesOrdered", "()Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DistanceQuery::DistanceQuery(const ::java::util::List & a0, jboolean a1, jint a2, const ::java::lang::String & a3, jboolean a4) : ::org::apache::lucene::queryparser::surround::query::ComposedQuery(env->newObject(initializeClass, &mids$, mid_init$_6c38956d, a0.this$, a1, a2, a3.this$, a4)) {}

            void DistanceQuery::addSpanQueries(const ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addSpanQueries_0564f431], a0.this$);
            }

            ::java::lang::String DistanceQuery::distanceSubQueryNotAllowed() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_distanceSubQueryNotAllowed_14c7b5c5]));
            }

            jint DistanceQuery::getOpDistance() const
            {
              return env->callIntMethod(this$, mids$[mid_getOpDistance_54c6a179]);
            }

            ::org::apache::lucene::search::Query DistanceQuery::getSpanNearQuery(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, jfloat a2, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a3) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getSpanNearQuery_b440d198], a0.this$, a1.this$, a2, a3.this$));
            }

            ::org::apache::lucene::search::Query DistanceQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30], a0.this$, a1.this$));
            }

            jboolean DistanceQuery::subQueriesOrdered() const
            {
              return env->callBooleanMethod(this$, mids$[mid_subQueriesOrdered_54c6a16a]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_DistanceQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DistanceQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DistanceQuery_init_(t_DistanceQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DistanceQuery_addSpanQueries(t_DistanceQuery *self, PyObject *arg);
            static PyObject *t_DistanceQuery_distanceSubQueryNotAllowed(t_DistanceQuery *self);
            static PyObject *t_DistanceQuery_getOpDistance(t_DistanceQuery *self);
            static PyObject *t_DistanceQuery_getSpanNearQuery(t_DistanceQuery *self, PyObject *args);
            static PyObject *t_DistanceQuery_makeLuceneQueryFieldNoBoost(t_DistanceQuery *self, PyObject *args);
            static PyObject *t_DistanceQuery_subQueriesOrdered(t_DistanceQuery *self);
            static PyObject *t_DistanceQuery_get__opDistance(t_DistanceQuery *self, void *data);
            static PyGetSetDef t_DistanceQuery__fields_[] = {
              DECLARE_GET_FIELD(t_DistanceQuery, opDistance),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DistanceQuery__methods_[] = {
              DECLARE_METHOD(t_DistanceQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DistanceQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DistanceQuery, addSpanQueries, METH_O),
              DECLARE_METHOD(t_DistanceQuery, distanceSubQueryNotAllowed, METH_NOARGS),
              DECLARE_METHOD(t_DistanceQuery, getOpDistance, METH_NOARGS),
              DECLARE_METHOD(t_DistanceQuery, getSpanNearQuery, METH_VARARGS),
              DECLARE_METHOD(t_DistanceQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              DECLARE_METHOD(t_DistanceQuery, subQueriesOrdered, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DistanceQuery, t_DistanceQuery, ::org::apache::lucene::queryparser::surround::query::ComposedQuery, DistanceQuery, t_DistanceQuery_init_, 0, 0, t_DistanceQuery__fields_, 0, 0);

            void t_DistanceQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(DistanceQuery), module, "DistanceQuery", 0);
            }

            void t_DistanceQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DistanceQuery).tp_dict, "class_", make_descriptor(DistanceQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DistanceQuery).tp_dict, "wrapfn_", make_descriptor(t_DistanceQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DistanceQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DistanceQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DistanceQuery::initializeClass, 1)))
                return NULL;
              return t_DistanceQuery::wrap_Object(DistanceQuery(((t_DistanceQuery *) arg)->object.this$));
            }
            static PyObject *t_DistanceQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DistanceQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DistanceQuery_init_(t_DistanceQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              jboolean a1;
              jint a2;
              ::java::lang::String a3((jobject) NULL);
              jboolean a4;
              DistanceQuery object((jobject) NULL);

              if (!parseArgs(args, "KZIsZ", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = DistanceQuery(a0, a1, a2, a3, a4));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DistanceQuery_addSpanQueries(t_DistanceQuery *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addSpanQueries(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addSpanQueries", arg);
              return NULL;
            }

            static PyObject *t_DistanceQuery_distanceSubQueryNotAllowed(t_DistanceQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.distanceSubQueryNotAllowed());
              return j2p(result);
            }

            static PyObject *t_DistanceQuery_getOpDistance(t_DistanceQuery *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getOpDistance());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_DistanceQuery_getSpanNearQuery(t_DistanceQuery *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jfloat a2;
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a3((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ksFk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getSpanNearQuery(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getSpanNearQuery", args);
              return NULL;
            }

            static PyObject *t_DistanceQuery_makeLuceneQueryFieldNoBoost(t_DistanceQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DistanceQuery), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }

            static PyObject *t_DistanceQuery_subQueriesOrdered(t_DistanceQuery *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.subQueriesOrdered());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_DistanceQuery_get__opDistance(t_DistanceQuery *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getOpDistance());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/index/IndexReader$ReaderClosedListener.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/document/Document.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexReader::class$ = NULL;
        jmethodID *IndexReader::mids$ = NULL;
        bool IndexReader::live$ = false;

        jclass IndexReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addReaderClosedListener_60172ded] = env->getMethodID(cls, "addReaderClosedListener", "(Lorg/apache/lucene/index/IndexReader$ReaderClosedListener;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_decRef_54c6a166] = env->getMethodID(cls, "decRef", "()V");
            mids$[mid_docFreq_7eca6a9e] = env->getMethodID(cls, "docFreq", "(Lorg/apache/lucene/index/Term;)I");
            mids$[mid_document_9c2cfcf9] = env->getMethodID(cls, "document", "(I)Lorg/apache/lucene/document/Document;");
            mids$[mid_document_f65cb155] = env->getMethodID(cls, "document", "(ILjava/util/Set;)Lorg/apache/lucene/document/Document;");
            mids$[mid_document_a2ea3ebe] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getCombinedCoreAndDeletesKey_846352c3] = env->getMethodID(cls, "getCombinedCoreAndDeletesKey", "()Ljava/lang/Object;");
            mids$[mid_getContext_5823c99a] = env->getMethodID(cls, "getContext", "()Lorg/apache/lucene/index/IndexReaderContext;");
            mids$[mid_getCoreCacheKey_846352c3] = env->getMethodID(cls, "getCoreCacheKey", "()Ljava/lang/Object;");
            mids$[mid_getDocCount_5fdc3f57] = env->getMethodID(cls, "getDocCount", "(Ljava/lang/String;)I");
            mids$[mid_getRefCount_54c6a179] = env->getMethodID(cls, "getRefCount", "()I");
            mids$[mid_getSumDocFreq_5fdc3f54] = env->getMethodID(cls, "getSumDocFreq", "(Ljava/lang/String;)J");
            mids$[mid_getSumTotalTermFreq_5fdc3f54] = env->getMethodID(cls, "getSumTotalTermFreq", "(Ljava/lang/String;)J");
            mids$[mid_getTermVector_ffaa1be2] = env->getMethodID(cls, "getTermVector", "(ILjava/lang/String;)Lorg/apache/lucene/index/Terms;");
            mids$[mid_getTermVectors_ef1c9c73] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_hasDeletions_54c6a16a] = env->getMethodID(cls, "hasDeletions", "()Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_incRef_54c6a166] = env->getMethodID(cls, "incRef", "()V");
            mids$[mid_leaves_87851566] = env->getMethodID(cls, "leaves", "()Ljava/util/List;");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDeletedDocs_54c6a179] = env->getMethodID(cls, "numDeletedDocs", "()I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_open_26fd6272] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_109b8ac7] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/store/Directory;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_d7b74111] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/store/Directory;I)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_13bade12] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/index/IndexCommit;I)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_e4ee522b] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/index/IndexWriter;Z)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_registerParentReader_7d7eaea9] = env->getMethodID(cls, "registerParentReader", "(Lorg/apache/lucene/index/IndexReader;)V");
            mids$[mid_removeReaderClosedListener_60172ded] = env->getMethodID(cls, "removeReaderClosedListener", "(Lorg/apache/lucene/index/IndexReader$ReaderClosedListener;)V");
            mids$[mid_totalTermFreq_7eca6a9d] = env->getMethodID(cls, "totalTermFreq", "(Lorg/apache/lucene/index/Term;)J");
            mids$[mid_tryIncRef_54c6a16a] = env->getMethodID(cls, "tryIncRef", "()Z");
            mids$[mid_ensureOpen_54c6a166] = env->getMethodID(cls, "ensureOpen", "()V");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IndexReader::addReaderClosedListener(const ::org::apache::lucene::index::IndexReader$ReaderClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addReaderClosedListener_60172ded], a0.this$);
        }

        void IndexReader::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void IndexReader::decRef() const
        {
          env->callVoidMethod(this$, mids$[mid_decRef_54c6a166]);
        }

        jint IndexReader::docFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_7eca6a9e], a0.this$);
        }

        ::org::apache::lucene::document::Document IndexReader::document(jint a0) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_document_9c2cfcf9], a0));
        }

        ::org::apache::lucene::document::Document IndexReader::document(jint a0, const ::java::util::Set & a1) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_document_f65cb155], a0, a1.this$));
        }

        void IndexReader::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_document_a2ea3ebe], a0, a1.this$);
        }

        jboolean IndexReader::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::lang::Object IndexReader::getCombinedCoreAndDeletesKey() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getCombinedCoreAndDeletesKey_846352c3]));
        }

        ::org::apache::lucene::index::IndexReaderContext IndexReader::getContext() const
        {
          return ::org::apache::lucene::index::IndexReaderContext(env->callObjectMethod(this$, mids$[mid_getContext_5823c99a]));
        }

        ::java::lang::Object IndexReader::getCoreCacheKey() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getCoreCacheKey_846352c3]));
        }

        jint IndexReader::getDocCount(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_5fdc3f57], a0.this$);
        }

        jint IndexReader::getRefCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getRefCount_54c6a179]);
        }

        jlong IndexReader::getSumDocFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_5fdc3f54], a0.this$);
        }

        jlong IndexReader::getSumTotalTermFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_5fdc3f54], a0.this$);
        }

        ::org::apache::lucene::index::Terms IndexReader::getTermVector(jint a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_getTermVector_ffaa1be2], a0, a1.this$));
        }

        ::org::apache::lucene::index::Fields IndexReader::getTermVectors(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_ef1c9c73], a0));
        }

        jboolean IndexReader::hasDeletions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasDeletions_54c6a16a]);
        }

        jint IndexReader::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        void IndexReader::incRef() const
        {
          env->callVoidMethod(this$, mids$[mid_incRef_54c6a166]);
        }

        ::java::util::List IndexReader::leaves() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_leaves_87851566]));
        }

        jint IndexReader::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        jint IndexReader::numDeletedDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDeletedDocs_54c6a179]);
        }

        jint IndexReader::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }

        ::org::apache::lucene::index::DirectoryReader IndexReader::open(const ::org::apache::lucene::index::IndexCommit & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_26fd6272], a0.this$));
        }

        ::org::apache::lucene::index::DirectoryReader IndexReader::open(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_109b8ac7], a0.this$));
        }

        ::org::apache::lucene::index::DirectoryReader IndexReader::open(const ::org::apache::lucene::store::Directory & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_d7b74111], a0.this$, a1));
        }

        ::org::apache::lucene::index::DirectoryReader IndexReader::open(const ::org::apache::lucene::index::IndexCommit & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_13bade12], a0.this$, a1));
        }

        ::org::apache::lucene::index::DirectoryReader IndexReader::open(const ::org::apache::lucene::index::IndexWriter & a0, jboolean a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_e4ee522b], a0.this$, a1));
        }

        void IndexReader::registerParentReader(const IndexReader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_registerParentReader_7d7eaea9], a0.this$);
        }

        void IndexReader::removeReaderClosedListener(const ::org::apache::lucene::index::IndexReader$ReaderClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeReaderClosedListener_60172ded], a0.this$);
        }

        jlong IndexReader::totalTermFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_7eca6a9d], a0.this$);
        }

        jboolean IndexReader::tryIncRef() const
        {
          return env->callBooleanMethod(this$, mids$[mid_tryIncRef_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReader_addReaderClosedListener(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_close(t_IndexReader *self);
        static PyObject *t_IndexReader_decRef(t_IndexReader *self);
        static PyObject *t_IndexReader_docFreq(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_document(t_IndexReader *self, PyObject *args);
        static PyObject *t_IndexReader_equals(t_IndexReader *self, PyObject *args);
        static PyObject *t_IndexReader_getCombinedCoreAndDeletesKey(t_IndexReader *self);
        static PyObject *t_IndexReader_getContext(t_IndexReader *self);
        static PyObject *t_IndexReader_getCoreCacheKey(t_IndexReader *self);
        static PyObject *t_IndexReader_getDocCount(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_getRefCount(t_IndexReader *self);
        static PyObject *t_IndexReader_getSumDocFreq(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_getSumTotalTermFreq(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_getTermVector(t_IndexReader *self, PyObject *args);
        static PyObject *t_IndexReader_getTermVectors(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_hasDeletions(t_IndexReader *self);
        static PyObject *t_IndexReader_hashCode(t_IndexReader *self, PyObject *args);
        static PyObject *t_IndexReader_incRef(t_IndexReader *self);
        static PyObject *t_IndexReader_leaves(t_IndexReader *self);
        static PyObject *t_IndexReader_maxDoc(t_IndexReader *self);
        static PyObject *t_IndexReader_numDeletedDocs(t_IndexReader *self);
        static PyObject *t_IndexReader_numDocs(t_IndexReader *self);
        static PyObject *t_IndexReader_open(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexReader_registerParentReader(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_removeReaderClosedListener(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_totalTermFreq(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_tryIncRef(t_IndexReader *self);
        static PyObject *t_IndexReader_get__combinedCoreAndDeletesKey(t_IndexReader *self, void *data);
        static PyObject *t_IndexReader_get__context(t_IndexReader *self, void *data);
        static PyObject *t_IndexReader_get__coreCacheKey(t_IndexReader *self, void *data);
        static PyObject *t_IndexReader_get__refCount(t_IndexReader *self, void *data);
        static PyGetSetDef t_IndexReader__fields_[] = {
          DECLARE_GET_FIELD(t_IndexReader, combinedCoreAndDeletesKey),
          DECLARE_GET_FIELD(t_IndexReader, context),
          DECLARE_GET_FIELD(t_IndexReader, coreCacheKey),
          DECLARE_GET_FIELD(t_IndexReader, refCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexReader__methods_[] = {
          DECLARE_METHOD(t_IndexReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReader, addReaderClosedListener, METH_O),
          DECLARE_METHOD(t_IndexReader, close, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, decRef, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, docFreq, METH_O),
          DECLARE_METHOD(t_IndexReader, document, METH_VARARGS),
          DECLARE_METHOD(t_IndexReader, equals, METH_VARARGS),
          DECLARE_METHOD(t_IndexReader, getCombinedCoreAndDeletesKey, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, getContext, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, getCoreCacheKey, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, getDocCount, METH_O),
          DECLARE_METHOD(t_IndexReader, getRefCount, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, getSumDocFreq, METH_O),
          DECLARE_METHOD(t_IndexReader, getSumTotalTermFreq, METH_O),
          DECLARE_METHOD(t_IndexReader, getTermVector, METH_VARARGS),
          DECLARE_METHOD(t_IndexReader, getTermVectors, METH_O),
          DECLARE_METHOD(t_IndexReader, hasDeletions, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IndexReader, incRef, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, leaves, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, maxDoc, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, numDeletedDocs, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, numDocs, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, open, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexReader, registerParentReader, METH_O),
          DECLARE_METHOD(t_IndexReader, removeReaderClosedListener, METH_O),
          DECLARE_METHOD(t_IndexReader, totalTermFreq, METH_O),
          DECLARE_METHOD(t_IndexReader, tryIncRef, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexReader, t_IndexReader, ::java::lang::Object, IndexReader, abstract_init, 0, 0, t_IndexReader__fields_, 0, 0);

        void t_IndexReader::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexReader), module, "IndexReader", 0);
          PyDict_SetItemString(PY_TYPE(IndexReader).tp_dict, "ReaderClosedListener", make_descriptor(&PY_TYPE(IndexReader$ReaderClosedListener)));
        }

        void t_IndexReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexReader).tp_dict, "class_", make_descriptor(IndexReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexReader).tp_dict, "wrapfn_", make_descriptor(t_IndexReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexReader::initializeClass, 1)))
            return NULL;
          return t_IndexReader::wrap_Object(IndexReader(((t_IndexReader *) arg)->object.this$));
        }
        static PyObject *t_IndexReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexReader_addReaderClosedListener(t_IndexReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader$ReaderClosedListener a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader$ReaderClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addReaderClosedListener(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addReaderClosedListener", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_close(t_IndexReader *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexReader_decRef(t_IndexReader *self)
        {
          OBJ_CALL(self->object.decRef());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexReader_docFreq(t_IndexReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.docFreq(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "docFreq", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_document(t_IndexReader *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.document(a0));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              jint a0;
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "IK", ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
              {
                OBJ_CALL(result = self->object.document(a0, a1));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
            {
              jint a0;
              ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

              if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.document(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "document", args);
          return NULL;
        }

        static PyObject *t_IndexReader_equals(t_IndexReader *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(IndexReader), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IndexReader_getCombinedCoreAndDeletesKey(t_IndexReader *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getCombinedCoreAndDeletesKey());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_IndexReader_getContext(t_IndexReader *self)
        {
          ::org::apache::lucene::index::IndexReaderContext result((jobject) NULL);
          OBJ_CALL(result = self->object.getContext());
          return ::org::apache::lucene::index::t_IndexReaderContext::wrap_Object(result);
        }

        static PyObject *t_IndexReader_getCoreCacheKey(t_IndexReader *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getCoreCacheKey());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_IndexReader_getDocCount(t_IndexReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocCount(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocCount", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_getRefCount(t_IndexReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getRefCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexReader_getSumDocFreq(t_IndexReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumDocFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSumDocFreq", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_getSumTotalTermFreq(t_IndexReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumTotalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSumTotalTermFreq", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_getTermVector(t_IndexReader *self, PyObject *args)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArgs(args, "Is", &a0, &a1))
          {
            OBJ_CALL(result = self->object.getTermVector(a0, a1));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getTermVector", args);
          return NULL;
        }

        static PyObject *t_IndexReader_getTermVectors(t_IndexReader *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTermVectors(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getTermVectors", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_hasDeletions(t_IndexReader *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasDeletions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexReader_hashCode(t_IndexReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexReader), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IndexReader_incRef(t_IndexReader *self)
        {
          OBJ_CALL(self->object.incRef());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexReader_leaves(t_IndexReader *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.leaves());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(AtomicReaderContext));
        }

        static PyObject *t_IndexReader_maxDoc(t_IndexReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.maxDoc());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexReader_numDeletedDocs(t_IndexReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numDeletedDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexReader_numDocs(t_IndexReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexReader_open(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::IndexReader::open(a0));
                return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::IndexReader::open(a0));
                return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::IndexReader::open(a0, a1));
                return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::IndexReader::open(a0, a1));
                return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
              jboolean a1;
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "kZ", ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::IndexReader::open(a0, a1));
                return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "open", args);
          return NULL;
        }

        static PyObject *t_IndexReader_registerParentReader(t_IndexReader *self, PyObject *arg)
        {
          IndexReader a0((jobject) NULL);

          if (!parseArg(arg, "k", IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.registerParentReader(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "registerParentReader", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_removeReaderClosedListener(t_IndexReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader$ReaderClosedListener a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader$ReaderClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.removeReaderClosedListener(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "removeReaderClosedListener", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_totalTermFreq(t_IndexReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.totalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "totalTermFreq", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_tryIncRef(t_IndexReader *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.tryIncRef());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexReader_get__combinedCoreAndDeletesKey(t_IndexReader *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getCombinedCoreAndDeletesKey());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_IndexReader_get__context(t_IndexReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object.getContext());
          return ::org::apache::lucene::index::t_IndexReaderContext::wrap_Object(value);
        }

        static PyObject *t_IndexReader_get__coreCacheKey(t_IndexReader *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getCoreCacheKey());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_IndexReader_get__refCount(t_IndexReader *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getRefCount());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/SumFloatFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *SumFloatFunction::class$ = NULL;
            jmethodID *SumFloatFunction::mids$ = NULL;
            bool SumFloatFunction::live$ = false;

            jclass SumFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/SumFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ee9922ca] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_d2e34bb9] = env->getMethodID(cls, "func", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SumFloatFunction::SumFloatFunction(const JArray< ::org::apache::lucene::queries::function::ValueSource > & a0) : ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction(env->newObject(initializeClass, &mids$, mid_init$_ee9922ca, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_SumFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SumFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SumFloatFunction_init_(t_SumFloatFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SumFloatFunction__methods_[] = {
              DECLARE_METHOD(t_SumFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SumFloatFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SumFloatFunction, t_SumFloatFunction, ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction, SumFloatFunction, t_SumFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_SumFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(SumFloatFunction), module, "SumFloatFunction", 0);
            }

            void t_SumFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SumFloatFunction).tp_dict, "class_", make_descriptor(SumFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SumFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_SumFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SumFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SumFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SumFloatFunction::initializeClass, 1)))
                return NULL;
              return t_SumFloatFunction::wrap_Object(SumFloatFunction(((t_SumFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_SumFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SumFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SumFloatFunction_init_(t_SumFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              JArray< ::org::apache::lucene::queries::function::ValueSource > a0((jobject) NULL);
              SumFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = SumFloatFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/RemoveEmptyNonLeafQueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *RemoveEmptyNonLeafQueryNodeProcessor::class$ = NULL;
              jmethodID *RemoveEmptyNonLeafQueryNodeProcessor::mids$ = NULL;
              bool RemoveEmptyNonLeafQueryNodeProcessor::live$ = false;

              jclass RemoveEmptyNonLeafQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/RemoveEmptyNonLeafQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              RemoveEmptyNonLeafQueryNodeProcessor::RemoveEmptyNonLeafQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode RemoveEmptyNonLeafQueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_RemoveEmptyNonLeafQueryNodeProcessor_init_(t_RemoveEmptyNonLeafQueryNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_process(t_RemoveEmptyNonLeafQueryNodeProcessor *self, PyObject *args);

              static PyMethodDef t_RemoveEmptyNonLeafQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_RemoveEmptyNonLeafQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RemoveEmptyNonLeafQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RemoveEmptyNonLeafQueryNodeProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(RemoveEmptyNonLeafQueryNodeProcessor, t_RemoveEmptyNonLeafQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, RemoveEmptyNonLeafQueryNodeProcessor, t_RemoveEmptyNonLeafQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_RemoveEmptyNonLeafQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(RemoveEmptyNonLeafQueryNodeProcessor), module, "RemoveEmptyNonLeafQueryNodeProcessor", 0);
              }

              void t_RemoveEmptyNonLeafQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(RemoveEmptyNonLeafQueryNodeProcessor).tp_dict, "class_", make_descriptor(RemoveEmptyNonLeafQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(RemoveEmptyNonLeafQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_RemoveEmptyNonLeafQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(RemoveEmptyNonLeafQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, RemoveEmptyNonLeafQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_RemoveEmptyNonLeafQueryNodeProcessor::wrap_Object(RemoveEmptyNonLeafQueryNodeProcessor(((t_RemoveEmptyNonLeafQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, RemoveEmptyNonLeafQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_RemoveEmptyNonLeafQueryNodeProcessor_init_(t_RemoveEmptyNonLeafQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                RemoveEmptyNonLeafQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = RemoveEmptyNonLeafQueryNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_process(t_RemoveEmptyNonLeafQueryNodeProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(RemoveEmptyNonLeafQueryNodeProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$primary_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$primary_return::class$ = NULL;
          jmethodID *JavascriptParser$primary_return::mids$ = NULL;
          bool JavascriptParser$primary_return::live$ = false;

          jclass JavascriptParser$primary_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$primary_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$primary_return::JavascriptParser$primary_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$primary_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$primary_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$primary_return_init_(t_JavascriptParser$primary_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$primary_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$primary_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$primary_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$primary_return, t_JavascriptParser$primary_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$primary_return, t_JavascriptParser$primary_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$primary_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$primary_return), module, "JavascriptParser$primary_return", 0);
          }

          void t_JavascriptParser$primary_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$primary_return).tp_dict, "class_", make_descriptor(JavascriptParser$primary_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$primary_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$primary_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$primary_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$primary_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$primary_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$primary_return::wrap_Object(JavascriptParser$primary_return(((t_JavascriptParser$primary_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$primary_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$primary_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$primary_return_init_(t_JavascriptParser$primary_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$primary_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$primary_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeywordRepeatFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeywordRepeatFilterFactory::class$ = NULL;
          jmethodID *KeywordRepeatFilterFactory::mids$ = NULL;
          bool KeywordRepeatFilterFactory::live$ = false;

          jclass KeywordRepeatFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeywordRepeatFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordRepeatFilterFactory::KeywordRepeatFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream KeywordRepeatFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeywordRepeatFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordRepeatFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordRepeatFilterFactory_init_(t_KeywordRepeatFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordRepeatFilterFactory_create(t_KeywordRepeatFilterFactory *self, PyObject *args);

          static PyMethodDef t_KeywordRepeatFilterFactory__methods_[] = {
            DECLARE_METHOD(t_KeywordRepeatFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordRepeatFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordRepeatFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordRepeatFilterFactory, t_KeywordRepeatFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, KeywordRepeatFilterFactory, t_KeywordRepeatFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_KeywordRepeatFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordRepeatFilterFactory), module, "KeywordRepeatFilterFactory", 0);
          }

          void t_KeywordRepeatFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordRepeatFilterFactory).tp_dict, "class_", make_descriptor(KeywordRepeatFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordRepeatFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_KeywordRepeatFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordRepeatFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordRepeatFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordRepeatFilterFactory::initializeClass, 1)))
              return NULL;
            return t_KeywordRepeatFilterFactory::wrap_Object(KeywordRepeatFilterFactory(((t_KeywordRepeatFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_KeywordRepeatFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordRepeatFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordRepeatFilterFactory_init_(t_KeywordRepeatFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            KeywordRepeatFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = KeywordRepeatFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeywordRepeatFilterFactory_create(t_KeywordRepeatFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(KeywordRepeatFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/WeightedSpanTermExtractor.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/highlight/WeightedSpanTerm.h"
#include "java/util/Map.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *WeightedSpanTermExtractor::class$ = NULL;
          jmethodID *WeightedSpanTermExtractor::mids$ = NULL;
          bool WeightedSpanTermExtractor::live$ = false;

          jclass WeightedSpanTermExtractor::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/WeightedSpanTermExtractor");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_getExpandMultiTermQuery_54c6a16a] = env->getMethodID(cls, "getExpandMultiTermQuery", "()Z");
              mids$[mid_getTokenStream_71f550c9] = env->getMethodID(cls, "getTokenStream", "()Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getWeightedSpanTerms_2b00c132] = env->getMethodID(cls, "getWeightedSpanTerms", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/analysis/TokenStream;)Ljava/util/Map;");
              mids$[mid_getWeightedSpanTerms_4bedc0dc] = env->getMethodID(cls, "getWeightedSpanTerms", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;)Ljava/util/Map;");
              mids$[mid_getWeightedSpanTermsWithScores_d44049f9] = env->getMethodID(cls, "getWeightedSpanTermsWithScores", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;Lorg/apache/lucene/index/IndexReader;)Ljava/util/Map;");
              mids$[mid_isCachedTokenStream_54c6a16a] = env->getMethodID(cls, "isCachedTokenStream", "()Z");
              mids$[mid_setExpandMultiTermQuery_bb0c767f] = env->getMethodID(cls, "setExpandMultiTermQuery", "(Z)V");
              mids$[mid_setWrapIfNotCachingTokenFilter_bb0c767f] = env->getMethodID(cls, "setWrapIfNotCachingTokenFilter", "(Z)V");
              mids$[mid_extract_1ecdc9cb] = env->getMethodID(cls, "extract", "(Lorg/apache/lucene/search/Query;Ljava/util/Map;)V");
              mids$[mid_extractUnknownQuery_1ecdc9cb] = env->getMethodID(cls, "extractUnknownQuery", "(Lorg/apache/lucene/search/Query;Ljava/util/Map;)V");
              mids$[mid_extractWeightedSpanTerms_66aae95d] = env->getMethodID(cls, "extractWeightedSpanTerms", "(Ljava/util/Map;Lorg/apache/lucene/search/spans/SpanQuery;)V");
              mids$[mid_mustRewriteQuery_056c189b] = env->getMethodID(cls, "mustRewriteQuery", "(Lorg/apache/lucene/search/spans/SpanQuery;)Z");
              mids$[mid_extractWeightedTerms_f386227d] = env->getMethodID(cls, "extractWeightedTerms", "(Ljava/util/Map;Lorg/apache/lucene/search/Query;)V");
              mids$[mid_fieldNameComparator_5fdc3f44] = env->getMethodID(cls, "fieldNameComparator", "(Ljava/lang/String;)Z");
              mids$[mid_getLeafContext_c2ef2576] = env->getMethodID(cls, "getLeafContext", "()Lorg/apache/lucene/index/AtomicReaderContext;");
              mids$[mid_collectSpanQueryFields_33bf20d1] = env->getMethodID(cls, "collectSpanQueryFields", "(Lorg/apache/lucene/search/spans/SpanQuery;Ljava/util/Set;)V");
              mids$[mid_setMaxDocCharsToAnalyze_39c7bd3c] = env->getMethodID(cls, "setMaxDocCharsToAnalyze", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WeightedSpanTermExtractor::WeightedSpanTermExtractor() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          WeightedSpanTermExtractor::WeightedSpanTermExtractor(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          jboolean WeightedSpanTermExtractor::getExpandMultiTermQuery() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getExpandMultiTermQuery_54c6a16a]);
          }

          ::org::apache::lucene::analysis::TokenStream WeightedSpanTermExtractor::getTokenStream() const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_getTokenStream_71f550c9]));
          }

          ::java::util::Map WeightedSpanTermExtractor::getWeightedSpanTerms(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getWeightedSpanTerms_2b00c132], a0.this$, a1.this$));
          }

          ::java::util::Map WeightedSpanTermExtractor::getWeightedSpanTerms(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::java::lang::String & a2) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getWeightedSpanTerms_4bedc0dc], a0.this$, a1.this$, a2.this$));
          }

          ::java::util::Map WeightedSpanTermExtractor::getWeightedSpanTermsWithScores(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::java::lang::String & a2, const ::org::apache::lucene::index::IndexReader & a3) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getWeightedSpanTermsWithScores_d44049f9], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          jboolean WeightedSpanTermExtractor::isCachedTokenStream() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isCachedTokenStream_54c6a16a]);
          }

          void WeightedSpanTermExtractor::setExpandMultiTermQuery(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setExpandMultiTermQuery_bb0c767f], a0);
          }

          void WeightedSpanTermExtractor::setWrapIfNotCachingTokenFilter(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setWrapIfNotCachingTokenFilter_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_WeightedSpanTermExtractor_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WeightedSpanTermExtractor_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WeightedSpanTermExtractor_init_(t_WeightedSpanTermExtractor *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WeightedSpanTermExtractor_getExpandMultiTermQuery(t_WeightedSpanTermExtractor *self);
          static PyObject *t_WeightedSpanTermExtractor_getTokenStream(t_WeightedSpanTermExtractor *self);
          static PyObject *t_WeightedSpanTermExtractor_getWeightedSpanTerms(t_WeightedSpanTermExtractor *self, PyObject *args);
          static PyObject *t_WeightedSpanTermExtractor_getWeightedSpanTermsWithScores(t_WeightedSpanTermExtractor *self, PyObject *args);
          static PyObject *t_WeightedSpanTermExtractor_isCachedTokenStream(t_WeightedSpanTermExtractor *self);
          static PyObject *t_WeightedSpanTermExtractor_setExpandMultiTermQuery(t_WeightedSpanTermExtractor *self, PyObject *arg);
          static PyObject *t_WeightedSpanTermExtractor_setWrapIfNotCachingTokenFilter(t_WeightedSpanTermExtractor *self, PyObject *arg);
          static PyObject *t_WeightedSpanTermExtractor_get__cachedTokenStream(t_WeightedSpanTermExtractor *self, void *data);
          static PyObject *t_WeightedSpanTermExtractor_get__expandMultiTermQuery(t_WeightedSpanTermExtractor *self, void *data);
          static int t_WeightedSpanTermExtractor_set__expandMultiTermQuery(t_WeightedSpanTermExtractor *self, PyObject *arg, void *data);
          static PyObject *t_WeightedSpanTermExtractor_get__tokenStream(t_WeightedSpanTermExtractor *self, void *data);
          static int t_WeightedSpanTermExtractor_set__wrapIfNotCachingTokenFilter(t_WeightedSpanTermExtractor *self, PyObject *arg, void *data);
          static PyGetSetDef t_WeightedSpanTermExtractor__fields_[] = {
            DECLARE_GET_FIELD(t_WeightedSpanTermExtractor, cachedTokenStream),
            DECLARE_GETSET_FIELD(t_WeightedSpanTermExtractor, expandMultiTermQuery),
            DECLARE_GET_FIELD(t_WeightedSpanTermExtractor, tokenStream),
            DECLARE_SET_FIELD(t_WeightedSpanTermExtractor, wrapIfNotCachingTokenFilter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_WeightedSpanTermExtractor__methods_[] = {
            DECLARE_METHOD(t_WeightedSpanTermExtractor, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, getExpandMultiTermQuery, METH_NOARGS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, getTokenStream, METH_NOARGS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, getWeightedSpanTerms, METH_VARARGS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, getWeightedSpanTermsWithScores, METH_VARARGS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, isCachedTokenStream, METH_NOARGS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, setExpandMultiTermQuery, METH_O),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, setWrapIfNotCachingTokenFilter, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WeightedSpanTermExtractor, t_WeightedSpanTermExtractor, ::java::lang::Object, WeightedSpanTermExtractor, t_WeightedSpanTermExtractor_init_, 0, 0, t_WeightedSpanTermExtractor__fields_, 0, 0);

          void t_WeightedSpanTermExtractor::install(PyObject *module)
          {
            installType(&PY_TYPE(WeightedSpanTermExtractor), module, "WeightedSpanTermExtractor", 0);
          }

          void t_WeightedSpanTermExtractor::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WeightedSpanTermExtractor).tp_dict, "class_", make_descriptor(WeightedSpanTermExtractor::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WeightedSpanTermExtractor).tp_dict, "wrapfn_", make_descriptor(t_WeightedSpanTermExtractor::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WeightedSpanTermExtractor).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WeightedSpanTermExtractor_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WeightedSpanTermExtractor::initializeClass, 1)))
              return NULL;
            return t_WeightedSpanTermExtractor::wrap_Object(WeightedSpanTermExtractor(((t_WeightedSpanTermExtractor *) arg)->object.this$));
          }
          static PyObject *t_WeightedSpanTermExtractor_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WeightedSpanTermExtractor::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WeightedSpanTermExtractor_init_(t_WeightedSpanTermExtractor *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                WeightedSpanTermExtractor object((jobject) NULL);

                INT_CALL(object = WeightedSpanTermExtractor());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                WeightedSpanTermExtractor object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = WeightedSpanTermExtractor(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WeightedSpanTermExtractor_getExpandMultiTermQuery(t_WeightedSpanTermExtractor *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getExpandMultiTermQuery());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_WeightedSpanTermExtractor_getTokenStream(t_WeightedSpanTermExtractor *self)
          {
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);
            OBJ_CALL(result = self->object.getTokenStream());
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          static PyObject *t_WeightedSpanTermExtractor_getWeightedSpanTerms(t_WeightedSpanTermExtractor *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::java::util::Map result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.getWeightedSpanTerms(a0, a1));
                  return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::org::apache::lucene::search::highlight::PY_TYPE(WeightedSpanTerm));
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::java::util::Map result((jobject) NULL);

                if (!parseArgs(args, "kks", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getWeightedSpanTerms(a0, a1, a2));
                  return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::org::apache::lucene::search::highlight::PY_TYPE(WeightedSpanTerm));
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getWeightedSpanTerms", args);
            return NULL;
          }

          static PyObject *t_WeightedSpanTermExtractor_getWeightedSpanTermsWithScores(t_WeightedSpanTermExtractor *self, PyObject *args)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::index::IndexReader a3((jobject) NULL);
            ::java::util::Map result((jobject) NULL);

            if (!parseArgs(args, "kksk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.getWeightedSpanTermsWithScores(a0, a1, a2, a3));
              return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::org::apache::lucene::search::highlight::PY_TYPE(WeightedSpanTerm));
            }

            PyErr_SetArgsError((PyObject *) self, "getWeightedSpanTermsWithScores", args);
            return NULL;
          }

          static PyObject *t_WeightedSpanTermExtractor_isCachedTokenStream(t_WeightedSpanTermExtractor *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isCachedTokenStream());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_WeightedSpanTermExtractor_setExpandMultiTermQuery(t_WeightedSpanTermExtractor *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setExpandMultiTermQuery(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setExpandMultiTermQuery", arg);
            return NULL;
          }

          static PyObject *t_WeightedSpanTermExtractor_setWrapIfNotCachingTokenFilter(t_WeightedSpanTermExtractor *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setWrapIfNotCachingTokenFilter(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setWrapIfNotCachingTokenFilter", arg);
            return NULL;
          }

          static PyObject *t_WeightedSpanTermExtractor_get__cachedTokenStream(t_WeightedSpanTermExtractor *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isCachedTokenStream());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_WeightedSpanTermExtractor_get__expandMultiTermQuery(t_WeightedSpanTermExtractor *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getExpandMultiTermQuery());
            Py_RETURN_BOOL(value);
          }
          static int t_WeightedSpanTermExtractor_set__expandMultiTermQuery(t_WeightedSpanTermExtractor *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setExpandMultiTermQuery(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "expandMultiTermQuery", arg);
            return -1;
          }

          static PyObject *t_WeightedSpanTermExtractor_get__tokenStream(t_WeightedSpanTermExtractor *self, void *data)
          {
            ::org::apache::lucene::analysis::TokenStream value((jobject) NULL);
            OBJ_CALL(value = self->object.getTokenStream());
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(value);
          }

          static int t_WeightedSpanTermExtractor_set__wrapIfNotCachingTokenFilter(t_WeightedSpanTermExtractor *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setWrapIfNotCachingTokenFilter(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "wrapIfNotCachingTokenFilter", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/util/Locale.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {

              ::java::lang::Class *EscapeQuerySyntax::class$ = NULL;
              jmethodID *EscapeQuerySyntax::mids$ = NULL;
              bool EscapeQuerySyntax::live$ = false;

              jclass EscapeQuerySyntax::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_escape_dd58ce7f] = env->getMethodID(cls, "escape", "(Ljava/lang/CharSequence;Ljava/util/Locale;Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;)Ljava/lang/CharSequence;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::CharSequence EscapeQuerySyntax::escape(const ::java::lang::CharSequence & a0, const ::java::util::Locale & a1, const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type & a2) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_escape_dd58ce7f], a0.this$, a1.this$, a2.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {
              static PyObject *t_EscapeQuerySyntax_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntax_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntax_escape(t_EscapeQuerySyntax *self, PyObject *args);

              static PyMethodDef t_EscapeQuerySyntax__methods_[] = {
                DECLARE_METHOD(t_EscapeQuerySyntax, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntax, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntax, escape, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(EscapeQuerySyntax, t_EscapeQuerySyntax, ::java::lang::Object, EscapeQuerySyntax, abstract_init, 0, 0, 0, 0, 0);

              void t_EscapeQuerySyntax::install(PyObject *module)
              {
                installType(&PY_TYPE(EscapeQuerySyntax), module, "EscapeQuerySyntax", 0);
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax).tp_dict, "Type", make_descriptor(&PY_TYPE(EscapeQuerySyntax$Type)));
              }

              void t_EscapeQuerySyntax::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax).tp_dict, "class_", make_descriptor(EscapeQuerySyntax::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax).tp_dict, "wrapfn_", make_descriptor(t_EscapeQuerySyntax::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_EscapeQuerySyntax_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, EscapeQuerySyntax::initializeClass, 1)))
                  return NULL;
                return t_EscapeQuerySyntax::wrap_Object(EscapeQuerySyntax(((t_EscapeQuerySyntax *) arg)->object.this$));
              }
              static PyObject *t_EscapeQuerySyntax_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, EscapeQuerySyntax::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_EscapeQuerySyntax_escape(t_EscapeQuerySyntax *self, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::util::Locale a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "OkK", &::java::lang::PY_TYPE(CharSequence), ::java::util::Locale::initializeClass, ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::queryparser::flexible::core::parser::t_EscapeQuerySyntax$Type::parameters_))
                {
                  OBJ_CALL(result = self->object.escape(a0, a1, a2));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "escape", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/DeletedQueryNode.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *DeletedQueryNode::class$ = NULL;
              jmethodID *DeletedQueryNode::mids$ = NULL;
              bool DeletedQueryNode::live$ = false;

              jclass DeletedQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/DeletedQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              DeletedQueryNode::DeletedQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode DeletedQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence DeletedQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String DeletedQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_DeletedQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_DeletedQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_DeletedQueryNode_init_(t_DeletedQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_DeletedQueryNode_cloneTree(t_DeletedQueryNode *self, PyObject *args);
              static PyObject *t_DeletedQueryNode_toQueryString(t_DeletedQueryNode *self, PyObject *args);
              static PyObject *t_DeletedQueryNode_toString(t_DeletedQueryNode *self, PyObject *args);

              static PyMethodDef t_DeletedQueryNode__methods_[] = {
                DECLARE_METHOD(t_DeletedQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DeletedQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DeletedQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_DeletedQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_DeletedQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(DeletedQueryNode, t_DeletedQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, DeletedQueryNode, t_DeletedQueryNode_init_, 0, 0, 0, 0, 0);

              void t_DeletedQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(DeletedQueryNode), module, "DeletedQueryNode", 0);
              }

              void t_DeletedQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(DeletedQueryNode).tp_dict, "class_", make_descriptor(DeletedQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(DeletedQueryNode).tp_dict, "wrapfn_", make_descriptor(t_DeletedQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(DeletedQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_DeletedQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, DeletedQueryNode::initializeClass, 1)))
                  return NULL;
                return t_DeletedQueryNode::wrap_Object(DeletedQueryNode(((t_DeletedQueryNode *) arg)->object.this$));
              }
              static PyObject *t_DeletedQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, DeletedQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_DeletedQueryNode_init_(t_DeletedQueryNode *self, PyObject *args, PyObject *kwds)
              {
                DeletedQueryNode object((jobject) NULL);

                INT_CALL(object = DeletedQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_DeletedQueryNode_cloneTree(t_DeletedQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(DeletedQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_DeletedQueryNode_toQueryString(t_DeletedQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(DeletedQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_DeletedQueryNode_toString(t_DeletedQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(DeletedQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/System.h"
#include "java/io/PrintStream.h"
#include "java/lang/Class.h"
#include "java/lang/SecurityManager.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/io/InputStream.h"
#include "java/util/Properties.h"
#include "java/io/Console.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *System::class$ = NULL;
    jmethodID *System::mids$ = NULL;
    bool System::live$ = false;
    ::java::io::PrintStream *System::err = NULL;
    ::java::io::InputStream *System::in = NULL;
    ::java::io::PrintStream *System::out = NULL;

    jclass System::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/System");

        mids$ = new jmethodID[max_mid];
        mids$[mid_arraycopy_8bcf5170] = env->getStaticMethodID(cls, "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V");
        mids$[mid_clearProperty_97a5258f] = env->getStaticMethodID(cls, "clearProperty", "(Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_console_d6171648] = env->getStaticMethodID(cls, "console", "()Ljava/io/Console;");
        mids$[mid_currentTimeMillis_54c6a17a] = env->getStaticMethodID(cls, "currentTimeMillis", "()J");
        mids$[mid_exit_39c7bd3c] = env->getStaticMethodID(cls, "exit", "(I)V");
        mids$[mid_gc_54c6a166] = env->getStaticMethodID(cls, "gc", "()V");
        mids$[mid_getProperties_7e96414d] = env->getStaticMethodID(cls, "getProperties", "()Ljava/util/Properties;");
        mids$[mid_getProperty_97a5258f] = env->getStaticMethodID(cls, "getProperty", "(Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_getProperty_aacea7e9] = env->getStaticMethodID(cls, "getProperty", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_getSecurityManager_0361f9be] = env->getStaticMethodID(cls, "getSecurityManager", "()Ljava/lang/SecurityManager;");
        mids$[mid_getenv_db60befd] = env->getStaticMethodID(cls, "getenv", "()Ljava/util/Map;");
        mids$[mid_getenv_97a5258f] = env->getStaticMethodID(cls, "getenv", "(Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_identityHashCode_290588f1] = env->getStaticMethodID(cls, "identityHashCode", "(Ljava/lang/Object;)I");
        mids$[mid_lineSeparator_14c7b5c5] = env->getStaticMethodID(cls, "lineSeparator", "()Ljava/lang/String;");
        mids$[mid_load_5fdc3f48] = env->getStaticMethodID(cls, "load", "(Ljava/lang/String;)V");
        mids$[mid_loadLibrary_5fdc3f48] = env->getStaticMethodID(cls, "loadLibrary", "(Ljava/lang/String;)V");
        mids$[mid_mapLibraryName_97a5258f] = env->getStaticMethodID(cls, "mapLibraryName", "(Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_nanoTime_54c6a17a] = env->getStaticMethodID(cls, "nanoTime", "()J");
        mids$[mid_runFinalization_54c6a166] = env->getStaticMethodID(cls, "runFinalization", "()V");
        mids$[mid_runFinalizersOnExit_bb0c767f] = env->getStaticMethodID(cls, "runFinalizersOnExit", "(Z)V");
        mids$[mid_setErr_1b7c898b] = env->getStaticMethodID(cls, "setErr", "(Ljava/io/PrintStream;)V");
        mids$[mid_setIn_be2e4f90] = env->getStaticMethodID(cls, "setIn", "(Ljava/io/InputStream;)V");
        mids$[mid_setOut_1b7c898b] = env->getStaticMethodID(cls, "setOut", "(Ljava/io/PrintStream;)V");
        mids$[mid_setProperties_c4afb15c] = env->getStaticMethodID(cls, "setProperties", "(Ljava/util/Properties;)V");
        mids$[mid_setProperty_aacea7e9] = env->getStaticMethodID(cls, "setProperty", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_setSecurityManager_c35b0b0b] = env->getStaticMethodID(cls, "setSecurityManager", "(Ljava/lang/SecurityManager;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        err = new ::java::io::PrintStream(env->getStaticObjectField(cls, "err", "Ljava/io/PrintStream;"));
        in = new ::java::io::InputStream(env->getStaticObjectField(cls, "in", "Ljava/io/InputStream;"));
        out = new ::java::io::PrintStream(env->getStaticObjectField(cls, "out", "Ljava/io/PrintStream;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    void System::arraycopy(const ::java::lang::Object & a0, jint a1, const ::java::lang::Object & a2, jint a3, jint a4)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_arraycopy_8bcf5170], a0.this$, a1, a2.this$, a3, a4);
    }

    ::java::lang::String System::clearProperty(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_clearProperty_97a5258f], a0.this$));
    }

    ::java::io::Console System::console()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::io::Console(env->callStaticObjectMethod(cls, mids$[mid_console_d6171648]));
    }

    jlong System::currentTimeMillis()
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_currentTimeMillis_54c6a17a]);
    }

    void System::exit(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_exit_39c7bd3c], a0);
    }

    void System::gc()
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_gc_54c6a166]);
    }

    ::java::util::Properties System::getProperties()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Properties(env->callStaticObjectMethod(cls, mids$[mid_getProperties_7e96414d]));
    }

    ::java::lang::String System::getProperty(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getProperty_97a5258f], a0.this$));
    }

    ::java::lang::String System::getProperty(const ::java::lang::String & a0, const ::java::lang::String & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getProperty_aacea7e9], a0.this$, a1.this$));
    }

    ::java::lang::SecurityManager System::getSecurityManager()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::SecurityManager(env->callStaticObjectMethod(cls, mids$[mid_getSecurityManager_0361f9be]));
    }

    ::java::util::Map System::getenv()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_getenv_db60befd]));
    }

    ::java::lang::String System::getenv(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getenv_97a5258f], a0.this$));
    }

    jint System::identityHashCode(const ::java::lang::Object & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_identityHashCode_290588f1], a0.this$);
    }

    ::java::lang::String System::lineSeparator()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_lineSeparator_14c7b5c5]));
    }

    void System::load(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_load_5fdc3f48], a0.this$);
    }

    void System::loadLibrary(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_loadLibrary_5fdc3f48], a0.this$);
    }

    ::java::lang::String System::mapLibraryName(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_mapLibraryName_97a5258f], a0.this$));
    }

    jlong System::nanoTime()
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_nanoTime_54c6a17a]);
    }

    void System::runFinalization()
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_runFinalization_54c6a166]);
    }

    void System::runFinalizersOnExit(jboolean a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_runFinalizersOnExit_bb0c767f], a0);
    }

    void System::setErr(const ::java::io::PrintStream & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setErr_1b7c898b], a0.this$);
    }

    void System::setIn(const ::java::io::InputStream & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setIn_be2e4f90], a0.this$);
    }

    void System::setOut(const ::java::io::PrintStream & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setOut_1b7c898b], a0.this$);
    }

    void System::setProperties(const ::java::util::Properties & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setProperties_c4afb15c], a0.this$);
    }

    ::java::lang::String System::setProperty(const ::java::lang::String & a0, const ::java::lang::String & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_setProperty_aacea7e9], a0.this$, a1.this$));
    }

    void System::setSecurityManager(const ::java::lang::SecurityManager & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setSecurityManager_c35b0b0b], a0.this$);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_System_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_arraycopy(PyTypeObject *type, PyObject *args);
    static PyObject *t_System_clearProperty(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_console(PyTypeObject *type);
    static PyObject *t_System_currentTimeMillis(PyTypeObject *type);
    static PyObject *t_System_exit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_gc(PyTypeObject *type);
    static PyObject *t_System_getProperties(PyTypeObject *type);
    static PyObject *t_System_getProperty(PyTypeObject *type, PyObject *args);
    static PyObject *t_System_getSecurityManager(PyTypeObject *type);
    static PyObject *t_System_getenv(PyTypeObject *type, PyObject *args);
    static PyObject *t_System_identityHashCode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_lineSeparator(PyTypeObject *type);
    static PyObject *t_System_load(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_loadLibrary(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_mapLibraryName(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_nanoTime(PyTypeObject *type);
    static PyObject *t_System_runFinalization(PyTypeObject *type);
    static PyObject *t_System_runFinalizersOnExit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_setErr(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_setIn(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_setOut(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_setProperties(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_setProperty(PyTypeObject *type, PyObject *args);
    static PyObject *t_System_setSecurityManager(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_get__env(t_System *self, void *data);
    static int t_System_set__err(t_System *self, PyObject *arg, void *data);
    static int t_System_set__in(t_System *self, PyObject *arg, void *data);
    static int t_System_set__out(t_System *self, PyObject *arg, void *data);
    static PyObject *t_System_get__properties(t_System *self, void *data);
    static int t_System_set__properties(t_System *self, PyObject *arg, void *data);
    static PyObject *t_System_get__securityManager(t_System *self, void *data);
    static int t_System_set__securityManager(t_System *self, PyObject *arg, void *data);
    static PyGetSetDef t_System__fields_[] = {
      DECLARE_GET_FIELD(t_System, env),
      DECLARE_SET_FIELD(t_System, err),
      DECLARE_SET_FIELD(t_System, in),
      DECLARE_SET_FIELD(t_System, out),
      DECLARE_GETSET_FIELD(t_System, properties),
      DECLARE_GETSET_FIELD(t_System, securityManager),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_System__methods_[] = {
      DECLARE_METHOD(t_System, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, arraycopy, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_System, clearProperty, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, console, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, currentTimeMillis, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, exit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, gc, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, getProperties, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, getProperty, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_System, getSecurityManager, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, getenv, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_System, identityHashCode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, lineSeparator, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, load, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, loadLibrary, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, mapLibraryName, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, nanoTime, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, runFinalization, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, runFinalizersOnExit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, setErr, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, setIn, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, setOut, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, setProperties, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, setProperty, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_System, setSecurityManager, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(System, t_System, ::java::lang::Object, System, abstract_init, 0, 0, t_System__fields_, 0, 0);

    void t_System::install(PyObject *module)
    {
      installType(&PY_TYPE(System), module, "System", 0);
    }

    void t_System::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(System).tp_dict, "class_", make_descriptor(System::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(System).tp_dict, "wrapfn_", make_descriptor(t_System::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(System).tp_dict, "boxfn_", make_descriptor(boxObject));
      env->getClass(System::initializeClass);
      PyDict_SetItemString(PY_TYPE(System).tp_dict, "err", make_descriptor(::java::io::t_PrintStream::wrap_Object(*System::err)));
      PyDict_SetItemString(PY_TYPE(System).tp_dict, "in", make_descriptor(::java::io::t_InputStream::wrap_Object(*System::in)));
      PyDict_SetItemString(PY_TYPE(System).tp_dict, "out", make_descriptor(::java::io::t_PrintStream::wrap_Object(*System::out)));
    }

    static PyObject *t_System_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, System::initializeClass, 1)))
        return NULL;
      return t_System::wrap_Object(System(((t_System *) arg)->object.this$));
    }
    static PyObject *t_System_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, System::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_System_arraycopy(PyTypeObject *type, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jint a1;
      ::java::lang::Object a2((jobject) NULL);
      jint a3;
      jint a4;

      if (!parseArgs(args, "oIoII", &a0, &a1, &a2, &a3, &a4))
      {
        OBJ_CALL(::java::lang::System::arraycopy(a0, a1, a2, a3, a4));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "arraycopy", args);
      return NULL;
    }

    static PyObject *t_System_clearProperty(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::System::clearProperty(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "clearProperty", arg);
      return NULL;
    }

    static PyObject *t_System_console(PyTypeObject *type)
    {
      ::java::io::Console result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::System::console());
      return ::java::io::t_Console::wrap_Object(result);
    }

    static PyObject *t_System_currentTimeMillis(PyTypeObject *type)
    {
      jlong result;
      OBJ_CALL(result = ::java::lang::System::currentTimeMillis());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_System_exit(PyTypeObject *type, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(::java::lang::System::exit(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "exit", arg);
      return NULL;
    }

    static PyObject *t_System_gc(PyTypeObject *type)
    {
      OBJ_CALL(::java::lang::System::gc());
      Py_RETURN_NONE;
    }

    static PyObject *t_System_getProperties(PyTypeObject *type)
    {
      ::java::util::Properties result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::System::getProperties());
      return ::java::util::t_Properties::wrap_Object(result);
    }

    static PyObject *t_System_getProperty(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::System::getProperty(a0));
            return j2p(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::System::getProperty(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getProperty", args);
      return NULL;
    }

    static PyObject *t_System_getSecurityManager(PyTypeObject *type)
    {
      ::java::lang::SecurityManager result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::System::getSecurityManager());
      return ::java::lang::t_SecurityManager::wrap_Object(result);
    }

    static PyObject *t_System_getenv(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = ::java::lang::System::getenv());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }
        break;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::System::getenv(a0));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getenv", args);
      return NULL;
    }

    static PyObject *t_System_identityHashCode(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = ::java::lang::System::identityHashCode(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "identityHashCode", arg);
      return NULL;
    }

    static PyObject *t_System_lineSeparator(PyTypeObject *type)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::System::lineSeparator());
      return j2p(result);
    }

    static PyObject *t_System_load(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(::java::lang::System::load(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "load", arg);
      return NULL;
    }

    static PyObject *t_System_loadLibrary(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(::java::lang::System::loadLibrary(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "loadLibrary", arg);
      return NULL;
    }

    static PyObject *t_System_mapLibraryName(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::System::mapLibraryName(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "mapLibraryName", arg);
      return NULL;
    }

    static PyObject *t_System_nanoTime(PyTypeObject *type)
    {
      jlong result;
      OBJ_CALL(result = ::java::lang::System::nanoTime());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_System_runFinalization(PyTypeObject *type)
    {
      OBJ_CALL(::java::lang::System::runFinalization());
      Py_RETURN_NONE;
    }

    static PyObject *t_System_runFinalizersOnExit(PyTypeObject *type, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(::java::lang::System::runFinalizersOnExit(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "runFinalizersOnExit", arg);
      return NULL;
    }

    static PyObject *t_System_setErr(PyTypeObject *type, PyObject *arg)
    {
      ::java::io::PrintStream a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
      {
        OBJ_CALL(::java::lang::System::setErr(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setErr", arg);
      return NULL;
    }

    static PyObject *t_System_setIn(PyTypeObject *type, PyObject *arg)
    {
      ::java::io::InputStream a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
      {
        OBJ_CALL(::java::lang::System::setIn(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setIn", arg);
      return NULL;
    }

    static PyObject *t_System_setOut(PyTypeObject *type, PyObject *arg)
    {
      ::java::io::PrintStream a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
      {
        OBJ_CALL(::java::lang::System::setOut(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setOut", arg);
      return NULL;
    }

    static PyObject *t_System_setProperties(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Properties a0((jobject) NULL);
      PyTypeObject **p0;

      if (!parseArg(arg, "K", ::java::util::Properties::initializeClass, &a0, &p0, ::java::util::t_Properties::parameters_))
      {
        OBJ_CALL(::java::lang::System::setProperties(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setProperties", arg);
      return NULL;
    }

    static PyObject *t_System_setProperty(PyTypeObject *type, PyObject *args)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::lang::String a1((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "ss", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::System::setProperty(a0, a1));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "setProperty", args);
      return NULL;
    }

    static PyObject *t_System_setSecurityManager(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::SecurityManager a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::lang::SecurityManager::initializeClass, &a0))
      {
        OBJ_CALL(::java::lang::System::setSecurityManager(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setSecurityManager", arg);
      return NULL;
    }

    static PyObject *t_System_get__env(t_System *self, void *data)
    {
      ::java::util::Map value((jobject) NULL);
      OBJ_CALL(value = self->object.getenv());
      return ::java::util::t_Map::wrap_Object(value);
    }

    static int t_System_set__err(t_System *self, PyObject *arg, void *data)
    {
      {
        ::java::io::PrintStream value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
        {
          INT_CALL(self->object.setErr(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "err", arg);
      return -1;
    }

    static int t_System_set__in(t_System *self, PyObject *arg, void *data)
    {
      {
        ::java::io::InputStream value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &value))
        {
          INT_CALL(self->object.setIn(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "in", arg);
      return -1;
    }

    static int t_System_set__out(t_System *self, PyObject *arg, void *data)
    {
      {
        ::java::io::PrintStream value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
        {
          INT_CALL(self->object.setOut(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "out", arg);
      return -1;
    }

    static PyObject *t_System_get__properties(t_System *self, void *data)
    {
      ::java::util::Properties value((jobject) NULL);
      OBJ_CALL(value = self->object.getProperties());
      return ::java::util::t_Properties::wrap_Object(value);
    }
    static int t_System_set__properties(t_System *self, PyObject *arg, void *data)
    {
      {
        ::java::util::Properties value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::Properties::initializeClass, &value))
        {
          INT_CALL(self->object.setProperties(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "properties", arg);
      return -1;
    }

    static PyObject *t_System_get__securityManager(t_System *self, void *data)
    {
      ::java::lang::SecurityManager value((jobject) NULL);
      OBJ_CALL(value = self->object.getSecurityManager());
      return ::java::lang::t_SecurityManager::wrap_Object(value);
    }
    static int t_System_set__securityManager(t_System *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::SecurityManager value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::lang::SecurityManager::initializeClass, &value))
        {
          INT_CALL(self->object.setSecurityManager(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "securityManager", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/QueryWrapperFilter.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *QueryWrapperFilter::class$ = NULL;
        jmethodID *QueryWrapperFilter::mids$ = NULL;
        bool QueryWrapperFilter::live$ = false;

        jclass QueryWrapperFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/QueryWrapperFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e301113] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        QueryWrapperFilter::QueryWrapperFilter(const ::org::apache::lucene::search::Query & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_6e301113, a0.this$)) {}

        jboolean QueryWrapperFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet QueryWrapperFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Query QueryWrapperFilter::getQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
        }

        jint QueryWrapperFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String QueryWrapperFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_QueryWrapperFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_QueryWrapperFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_QueryWrapperFilter_init_(t_QueryWrapperFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_QueryWrapperFilter_equals(t_QueryWrapperFilter *self, PyObject *args);
        static PyObject *t_QueryWrapperFilter_getDocIdSet(t_QueryWrapperFilter *self, PyObject *args);
        static PyObject *t_QueryWrapperFilter_getQuery(t_QueryWrapperFilter *self);
        static PyObject *t_QueryWrapperFilter_hashCode(t_QueryWrapperFilter *self, PyObject *args);
        static PyObject *t_QueryWrapperFilter_toString(t_QueryWrapperFilter *self, PyObject *args);
        static PyObject *t_QueryWrapperFilter_get__query(t_QueryWrapperFilter *self, void *data);
        static PyGetSetDef t_QueryWrapperFilter__fields_[] = {
          DECLARE_GET_FIELD(t_QueryWrapperFilter, query),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_QueryWrapperFilter__methods_[] = {
          DECLARE_METHOD(t_QueryWrapperFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryWrapperFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryWrapperFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_QueryWrapperFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_QueryWrapperFilter, getQuery, METH_NOARGS),
          DECLARE_METHOD(t_QueryWrapperFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_QueryWrapperFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(QueryWrapperFilter, t_QueryWrapperFilter, ::org::apache::lucene::search::Filter, QueryWrapperFilter, t_QueryWrapperFilter_init_, 0, 0, t_QueryWrapperFilter__fields_, 0, 0);

        void t_QueryWrapperFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(QueryWrapperFilter), module, "QueryWrapperFilter", 0);
        }

        void t_QueryWrapperFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(QueryWrapperFilter).tp_dict, "class_", make_descriptor(QueryWrapperFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(QueryWrapperFilter).tp_dict, "wrapfn_", make_descriptor(t_QueryWrapperFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(QueryWrapperFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_QueryWrapperFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, QueryWrapperFilter::initializeClass, 1)))
            return NULL;
          return t_QueryWrapperFilter::wrap_Object(QueryWrapperFilter(((t_QueryWrapperFilter *) arg)->object.this$));
        }
        static PyObject *t_QueryWrapperFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, QueryWrapperFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_QueryWrapperFilter_init_(t_QueryWrapperFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          QueryWrapperFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            INT_CALL(object = QueryWrapperFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_QueryWrapperFilter_equals(t_QueryWrapperFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(QueryWrapperFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_QueryWrapperFilter_getDocIdSet(t_QueryWrapperFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(QueryWrapperFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_QueryWrapperFilter_getQuery(t_QueryWrapperFilter *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_QueryWrapperFilter_hashCode(t_QueryWrapperFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(QueryWrapperFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_QueryWrapperFilter_toString(t_QueryWrapperFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(QueryWrapperFilter), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_QueryWrapperFilter_get__query(t_QueryWrapperFilter *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SrndTruncQuery.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SrndTruncQuery::class$ = NULL;
            jmethodID *SrndTruncQuery::mids$ = NULL;
            bool SrndTruncQuery::live$ = false;

            jclass SrndTruncQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SrndTruncQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d9707974] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;CC)V");
                mids$[mid_getTruncated_14c7b5c5] = env->getMethodID(cls, "getTruncated", "()Ljava/lang/String;");
                mids$[mid_toStringUnquoted_14c7b5c5] = env->getMethodID(cls, "toStringUnquoted", "()Ljava/lang/String;");
                mids$[mid_visitMatchingTerms_330199a1] = env->getMethodID(cls, "visitMatchingTerms", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor;)V");
                mids$[mid_matchingChar_87fd5456] = env->getMethodID(cls, "matchingChar", "(C)Z");
                mids$[mid_appendRegExpForChar_1dca1640] = env->getMethodID(cls, "appendRegExpForChar", "(CLjava/lang/StringBuilder;)V");
                mids$[mid_truncatedToPrefixAndPattern_54c6a166] = env->getMethodID(cls, "truncatedToPrefixAndPattern", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SrndTruncQuery::SrndTruncQuery(const ::java::lang::String & a0, jchar a1, jchar a2) : ::org::apache::lucene::queryparser::surround::query::SimpleTerm(env->newObject(initializeClass, &mids$, mid_init$_d9707974, a0.this$, a1, a2)) {}

            ::java::lang::String SrndTruncQuery::getTruncated() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTruncated_14c7b5c5]));
            }

            ::java::lang::String SrndTruncQuery::toStringUnquoted() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringUnquoted_14c7b5c5]));
            }

            void SrndTruncQuery::visitMatchingTerms(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor & a2) const
            {
              env->callVoidMethod(this$, mids$[mid_visitMatchingTerms_330199a1], a0.this$, a1.this$, a2.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SrndTruncQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SrndTruncQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SrndTruncQuery_init_(t_SrndTruncQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SrndTruncQuery_getTruncated(t_SrndTruncQuery *self);
            static PyObject *t_SrndTruncQuery_toStringUnquoted(t_SrndTruncQuery *self, PyObject *args);
            static PyObject *t_SrndTruncQuery_visitMatchingTerms(t_SrndTruncQuery *self, PyObject *args);
            static PyObject *t_SrndTruncQuery_get__truncated(t_SrndTruncQuery *self, void *data);
            static PyGetSetDef t_SrndTruncQuery__fields_[] = {
              DECLARE_GET_FIELD(t_SrndTruncQuery, truncated),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SrndTruncQuery__methods_[] = {
              DECLARE_METHOD(t_SrndTruncQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndTruncQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndTruncQuery, getTruncated, METH_NOARGS),
              DECLARE_METHOD(t_SrndTruncQuery, toStringUnquoted, METH_VARARGS),
              DECLARE_METHOD(t_SrndTruncQuery, visitMatchingTerms, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SrndTruncQuery, t_SrndTruncQuery, ::org::apache::lucene::queryparser::surround::query::SimpleTerm, SrndTruncQuery, t_SrndTruncQuery_init_, 0, 0, t_SrndTruncQuery__fields_, 0, 0);

            void t_SrndTruncQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(SrndTruncQuery), module, "SrndTruncQuery", 0);
            }

            void t_SrndTruncQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SrndTruncQuery).tp_dict, "class_", make_descriptor(SrndTruncQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SrndTruncQuery).tp_dict, "wrapfn_", make_descriptor(t_SrndTruncQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SrndTruncQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SrndTruncQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SrndTruncQuery::initializeClass, 1)))
                return NULL;
              return t_SrndTruncQuery::wrap_Object(SrndTruncQuery(((t_SrndTruncQuery *) arg)->object.this$));
            }
            static PyObject *t_SrndTruncQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SrndTruncQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SrndTruncQuery_init_(t_SrndTruncQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              jchar a1;
              jchar a2;
              SrndTruncQuery object((jobject) NULL);

              if (!parseArgs(args, "sCC", &a0, &a1, &a2))
              {
                INT_CALL(object = SrndTruncQuery(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SrndTruncQuery_getTruncated(t_SrndTruncQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getTruncated());
              return j2p(result);
            }

            static PyObject *t_SrndTruncQuery_toStringUnquoted(t_SrndTruncQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toStringUnquoted());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SrndTruncQuery), (PyObject *) self, "toStringUnquoted", args, 2);
            }

            static PyObject *t_SrndTruncQuery_visitMatchingTerms(t_SrndTruncQuery *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor a2((jobject) NULL);

              if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.visitMatchingTerms(a0, a1, a2));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SrndTruncQuery), (PyObject *) self, "visitMatchingTerms", args, 2);
            }

            static PyObject *t_SrndTruncQuery_get__truncated(t_SrndTruncQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getTruncated());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Short.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Short::class$ = NULL;
    jmethodID *Short::mids$ = NULL;
    bool Short::live$ = false;
    jshort Short::MAX_VALUE = (jshort) 0;
    jshort Short::MIN_VALUE = (jshort) 0;
    jint Short::SIZE = (jint) 0;
    ::java::lang::Class *Short::TYPE = NULL;

    jclass Short::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Short");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_3bc40c6a] = env->getMethodID(cls, "<init>", "(S)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_5729c2d1] = env->getStaticMethodID(cls, "compare", "(SS)I");
        mids$[mid_compareTo_6b8573d1] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Short;)I");
        mids$[mid_decode_88c4db41] = env->getStaticMethodID(cls, "decode", "(Ljava/lang/String;)Ljava/lang/Short;");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_parseShort_5fdc3f4d] = env->getStaticMethodID(cls, "parseShort", "(Ljava/lang/String;)S");
        mids$[mid_parseShort_6e53ccc3] = env->getStaticMethodID(cls, "parseShort", "(Ljava/lang/String;I)S");
        mids$[mid_reverseBytes_3bc40c6f] = env->getStaticMethodID(cls, "reverseBytes", "(S)S");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_9c2e4c45] = env->getStaticMethodID(cls, "toString", "(S)Ljava/lang/String;");
        mids$[mid_valueOf_5d563b1b] = env->getStaticMethodID(cls, "valueOf", "(S)Ljava/lang/Short;");
        mids$[mid_valueOf_88c4db41] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Short;");
        mids$[mid_valueOf_0f6bcb23] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;I)Ljava/lang/Short;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        MAX_VALUE = env->getStaticShortField(cls, "MAX_VALUE");
        MIN_VALUE = env->getStaticShortField(cls, "MIN_VALUE");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Short::Short(jshort a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_3bc40c6a, a0)) {}

    Short::Short(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    jbyte Short::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jint Short::compare(jshort a0, jshort a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_5729c2d1], a0, a1);
    }

    jint Short::compareTo(const Short & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_6b8573d1], a0.this$);
    }

    Short Short::decode(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Short(env->callStaticObjectMethod(cls, mids$[mid_decode_88c4db41], a0.this$));
    }

    jdouble Short::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jboolean Short::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jfloat Short::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    jint Short::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint Short::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jlong Short::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jshort Short::parseShort(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticShortMethod(cls, mids$[mid_parseShort_5fdc3f4d], a0.this$);
    }

    jshort Short::parseShort(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticShortMethod(cls, mids$[mid_parseShort_6e53ccc3], a0.this$, a1);
    }

    jshort Short::reverseBytes(jshort a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticShortMethod(cls, mids$[mid_reverseBytes_3bc40c6f], a0);
    }

    jshort Short::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }

    ::java::lang::String Short::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Short::toString(jshort a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_9c2e4c45], a0));
    }

    Short Short::valueOf(jshort a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Short(env->callStaticObjectMethod(cls, mids$[mid_valueOf_5d563b1b], a0));
    }

    Short Short::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Short(env->callStaticObjectMethod(cls, mids$[mid_valueOf_88c4db41], a0.this$));
    }

    Short Short::valueOf(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Short(env->callStaticObjectMethod(cls, mids$[mid_valueOf_0f6bcb23], a0.this$, a1));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Short_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Short_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Short_init_(t_Short *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Short_byteValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Short_compareTo(t_Short *self, PyObject *arg);
    static PyObject *t_Short_decode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Short_doubleValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_equals(t_Short *self, PyObject *args);
    static PyObject *t_Short_floatValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_hashCode(t_Short *self, PyObject *args);
    static PyObject *t_Short_intValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_longValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_parseShort(PyTypeObject *type, PyObject *args);
    static PyObject *t_Short_reverseBytes(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Short_shortValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_toString(t_Short *self, PyObject *args);
    static PyObject *t_Short_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Short_valueOf(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Short__methods_[] = {
      DECLARE_METHOD(t_Short, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Short, compareTo, METH_O),
      DECLARE_METHOD(t_Short, decode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, equals, METH_VARARGS),
      DECLARE_METHOD(t_Short, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Short, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, parseShort, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Short, reverseBytes, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, toString, METH_VARARGS),
      DECLARE_METHOD(t_Short, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Short, t_Short, ::java::lang::Number, Short, t_Short_init_, 0, 0, 0, 0, 0);

    void t_Short::install(PyObject *module)
    {
      installType(&PY_TYPE(Short), module, "Short", 0);
    }

    void t_Short::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "class_", make_descriptor(Short::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "wrapfn_", make_descriptor(unboxShort));
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "boxfn_", make_descriptor(boxShort));
      env->getClass(Short::initializeClass);
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "MAX_VALUE", make_descriptor(Short::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "MIN_VALUE", make_descriptor(Short::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "SIZE", make_descriptor(Short::SIZE));
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Short::TYPE)));
    }

    static PyObject *t_Short_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Short::initializeClass, 1)))
        return NULL;
      return t_Short::wrap_Object(Short(((t_Short *) arg)->object.this$));
    }
    static PyObject *t_Short_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Short::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Short_init_(t_Short *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jshort a0;
          Short object((jobject) NULL);

          if (!parseArgs(args, "S", &a0))
          {
            INT_CALL(object = Short(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Short object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Short(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Short_byteValue(t_Short *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Short_compare(PyTypeObject *type, PyObject *args)
    {
      jshort a0;
      jshort a1;
      jint result;

      if (!parseArgs(args, "SS", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Short::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Short_compareTo(t_Short *self, PyObject *arg)
    {
      Short a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Short), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Short_decode(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      Short result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Short::decode(a0));
        return t_Short::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "decode", arg);
      return NULL;
    }

    static PyObject *t_Short_doubleValue(t_Short *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Short_equals(t_Short *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Short_floatValue(t_Short *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Short_hashCode(t_Short *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Short_intValue(t_Short *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Short_longValue(t_Short *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Short_parseShort(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          jshort result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Short::parseShort(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jshort result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Short::parseShort(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "parseShort", args);
      return NULL;
    }

    static PyObject *t_Short_reverseBytes(PyTypeObject *type, PyObject *arg)
    {
      jshort a0;
      jshort result;

      if (!parseArg(arg, "S", &a0))
      {
        OBJ_CALL(result = ::java::lang::Short::reverseBytes(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "reverseBytes", arg);
      return NULL;
    }

    static PyObject *t_Short_shortValue(t_Short *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Short_toString(t_Short *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Short_toString_(PyTypeObject *type, PyObject *args)
    {
      jshort a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "S", &a0))
      {
        OBJ_CALL(result = ::java::lang::Short::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Short_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jshort a0;
          Short result((jobject) NULL);

          if (!parseArgs(args, "S", &a0))
          {
            OBJ_CALL(result = ::java::lang::Short::valueOf(a0));
            return t_Short::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Short result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Short::valueOf(a0));
            return t_Short::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          Short result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Short::valueOf(a0, a1));
            return t_Short::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyWriter.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "java/util/Map.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyWriter::class$ = NULL;
          jmethodID *TaxonomyWriter::mids$ = NULL;
          bool TaxonomyWriter::live$ = false;

          jclass TaxonomyWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_addCategory_283f83f5] = env->getMethodID(cls, "addCategory", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
              mids$[mid_getCommitData_db60befd] = env->getMethodID(cls, "getCommitData", "()Ljava/util/Map;");
              mids$[mid_getParent_39c7bd23] = env->getMethodID(cls, "getParent", "(I)I");
              mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");
              mids$[mid_setCommitData_4c9e2b1c] = env->getMethodID(cls, "setCommitData", "(Ljava/util/Map;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint TaxonomyWriter::addCategory(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_addCategory_283f83f5], a0.this$);
          }

          ::java::util::Map TaxonomyWriter::getCommitData() const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getCommitData_db60befd]));
          }

          jint TaxonomyWriter::getParent(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_getParent_39c7bd23], a0);
          }

          jint TaxonomyWriter::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
          }

          void TaxonomyWriter::setCommitData(const ::java::util::Map & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setCommitData_4c9e2b1c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyWriter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyWriter_addCategory(t_TaxonomyWriter *self, PyObject *arg);
          static PyObject *t_TaxonomyWriter_getCommitData(t_TaxonomyWriter *self);
          static PyObject *t_TaxonomyWriter_getParent(t_TaxonomyWriter *self, PyObject *arg);
          static PyObject *t_TaxonomyWriter_getSize(t_TaxonomyWriter *self);
          static PyObject *t_TaxonomyWriter_setCommitData(t_TaxonomyWriter *self, PyObject *arg);
          static PyObject *t_TaxonomyWriter_get__commitData(t_TaxonomyWriter *self, void *data);
          static int t_TaxonomyWriter_set__commitData(t_TaxonomyWriter *self, PyObject *arg, void *data);
          static PyObject *t_TaxonomyWriter_get__size(t_TaxonomyWriter *self, void *data);
          static PyGetSetDef t_TaxonomyWriter__fields_[] = {
            DECLARE_GETSET_FIELD(t_TaxonomyWriter, commitData),
            DECLARE_GET_FIELD(t_TaxonomyWriter, size),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TaxonomyWriter__methods_[] = {
            DECLARE_METHOD(t_TaxonomyWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyWriter, addCategory, METH_O),
            DECLARE_METHOD(t_TaxonomyWriter, getCommitData, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyWriter, getParent, METH_O),
            DECLARE_METHOD(t_TaxonomyWriter, getSize, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyWriter, setCommitData, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyWriter, t_TaxonomyWriter, ::java::io::Closeable, TaxonomyWriter, abstract_init, 0, 0, t_TaxonomyWriter__fields_, 0, 0);

          void t_TaxonomyWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyWriter), module, "TaxonomyWriter", 0);
          }

          void t_TaxonomyWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyWriter).tp_dict, "class_", make_descriptor(TaxonomyWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyWriter).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyWriter::initializeClass, 1)))
              return NULL;
            return t_TaxonomyWriter::wrap_Object(TaxonomyWriter(((t_TaxonomyWriter *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TaxonomyWriter_addCategory(t_TaxonomyWriter *self, PyObject *arg)
          {
            ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.addCategory(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "addCategory", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyWriter_getCommitData(t_TaxonomyWriter *self)
          {
            ::java::util::Map result((jobject) NULL);
            OBJ_CALL(result = self->object.getCommitData());
            return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_TaxonomyWriter_getParent(t_TaxonomyWriter *self, PyObject *arg)
          {
            jint a0;
            jint result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getParent(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getParent", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyWriter_getSize(t_TaxonomyWriter *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_TaxonomyWriter_setCommitData(t_TaxonomyWriter *self, PyObject *arg)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(self->object.setCommitData(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setCommitData", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyWriter_get__commitData(t_TaxonomyWriter *self, void *data)
          {
            ::java::util::Map value((jobject) NULL);
            OBJ_CALL(value = self->object.getCommitData());
            return ::java::util::t_Map::wrap_Object(value);
          }
          static int t_TaxonomyWriter_set__commitData(t_TaxonomyWriter *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Map value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
              {
                INT_CALL(self->object.setCommitData(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "commitData", arg);
            return -1;
          }

          static PyObject *t_TaxonomyWriter_get__size(t_TaxonomyWriter *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/BoolFunction.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *BoolFunction::class$ = NULL;
            jmethodID *BoolFunction::mids$ = NULL;
            bool BoolFunction::live$ = false;

            jclass BoolFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/BoolFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BoolFunction::BoolFunction() : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_BoolFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BoolFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BoolFunction_init_(t_BoolFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_BoolFunction__methods_[] = {
              DECLARE_METHOD(t_BoolFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BoolFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BoolFunction, t_BoolFunction, ::org::apache::lucene::queries::function::ValueSource, BoolFunction, t_BoolFunction_init_, 0, 0, 0, 0, 0);

            void t_BoolFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(BoolFunction), module, "BoolFunction", 0);
            }

            void t_BoolFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BoolFunction).tp_dict, "class_", make_descriptor(BoolFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BoolFunction).tp_dict, "wrapfn_", make_descriptor(t_BoolFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BoolFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BoolFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BoolFunction::initializeClass, 1)))
                return NULL;
              return t_BoolFunction::wrap_Object(BoolFunction(((t_BoolFunction *) arg)->object.this$));
            }
            static PyObject *t_BoolFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BoolFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BoolFunction_init_(t_BoolFunction *self, PyObject *args, PyObject *kwds)
            {
              BoolFunction object((jobject) NULL);

              INT_CALL(object = BoolFunction());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *DuplicateFilter$KeepMode::class$ = NULL;
          jmethodID *DuplicateFilter$KeepMode::mids$ = NULL;
          bool DuplicateFilter$KeepMode::live$ = false;
          DuplicateFilter$KeepMode *DuplicateFilter$KeepMode::KM_USE_FIRST_OCCURRENCE = NULL;
          DuplicateFilter$KeepMode *DuplicateFilter$KeepMode::KM_USE_LAST_OCCURRENCE = NULL;

          jclass DuplicateFilter$KeepMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_06462cf5] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode;");
              mids$[mid_values_3fb3ce7b] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              KM_USE_FIRST_OCCURRENCE = new DuplicateFilter$KeepMode(env->getStaticObjectField(cls, "KM_USE_FIRST_OCCURRENCE", "Lorg/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode;"));
              KM_USE_LAST_OCCURRENCE = new DuplicateFilter$KeepMode(env->getStaticObjectField(cls, "KM_USE_LAST_OCCURRENCE", "Lorg/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DuplicateFilter$KeepMode DuplicateFilter$KeepMode::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return DuplicateFilter$KeepMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_06462cf5], a0.this$));
          }

          JArray< DuplicateFilter$KeepMode > DuplicateFilter$KeepMode::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< DuplicateFilter$KeepMode >(env->callStaticObjectMethod(cls, mids$[mid_values_3fb3ce7b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_DuplicateFilter$KeepMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DuplicateFilter$KeepMode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DuplicateFilter$KeepMode_of_(t_DuplicateFilter$KeepMode *self, PyObject *args);
          static PyObject *t_DuplicateFilter$KeepMode_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_DuplicateFilter$KeepMode_values(PyTypeObject *type);
          static PyObject *t_DuplicateFilter$KeepMode_get__parameters_(t_DuplicateFilter$KeepMode *self, void *data);
          static PyGetSetDef t_DuplicateFilter$KeepMode__fields_[] = {
            DECLARE_GET_FIELD(t_DuplicateFilter$KeepMode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DuplicateFilter$KeepMode__methods_[] = {
            DECLARE_METHOD(t_DuplicateFilter$KeepMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter$KeepMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter$KeepMode, of_, METH_VARARGS),
            DECLARE_METHOD(t_DuplicateFilter$KeepMode, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter$KeepMode, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DuplicateFilter$KeepMode, t_DuplicateFilter$KeepMode, ::java::lang::Enum, DuplicateFilter$KeepMode, abstract_init, 0, 0, t_DuplicateFilter$KeepMode__fields_, 0, 0);
          PyObject *t_DuplicateFilter$KeepMode::wrap_Object(const DuplicateFilter$KeepMode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_DuplicateFilter$KeepMode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DuplicateFilter$KeepMode *self = (t_DuplicateFilter$KeepMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_DuplicateFilter$KeepMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_DuplicateFilter$KeepMode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DuplicateFilter$KeepMode *self = (t_DuplicateFilter$KeepMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_DuplicateFilter$KeepMode::install(PyObject *module)
          {
            installType(&PY_TYPE(DuplicateFilter$KeepMode), module, "DuplicateFilter$KeepMode", 0);
          }

          void t_DuplicateFilter$KeepMode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$KeepMode).tp_dict, "class_", make_descriptor(DuplicateFilter$KeepMode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$KeepMode).tp_dict, "wrapfn_", make_descriptor(t_DuplicateFilter$KeepMode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$KeepMode).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DuplicateFilter$KeepMode::initializeClass);
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$KeepMode).tp_dict, "KM_USE_FIRST_OCCURRENCE", make_descriptor(t_DuplicateFilter$KeepMode::wrap_Object(*DuplicateFilter$KeepMode::KM_USE_FIRST_OCCURRENCE)));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$KeepMode).tp_dict, "KM_USE_LAST_OCCURRENCE", make_descriptor(t_DuplicateFilter$KeepMode::wrap_Object(*DuplicateFilter$KeepMode::KM_USE_LAST_OCCURRENCE)));
          }

          static PyObject *t_DuplicateFilter$KeepMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DuplicateFilter$KeepMode::initializeClass, 1)))
              return NULL;
            return t_DuplicateFilter$KeepMode::wrap_Object(DuplicateFilter$KeepMode(((t_DuplicateFilter$KeepMode *) arg)->object.this$));
          }
          static PyObject *t_DuplicateFilter$KeepMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DuplicateFilter$KeepMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_DuplicateFilter$KeepMode_of_(t_DuplicateFilter$KeepMode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_DuplicateFilter$KeepMode_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            DuplicateFilter$KeepMode result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode::valueOf(a0));
              return t_DuplicateFilter$KeepMode::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_DuplicateFilter$KeepMode_values(PyTypeObject *type)
          {
            JArray< DuplicateFilter$KeepMode > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode::values());
            return JArray<jobject>(result.this$).wrap(t_DuplicateFilter$KeepMode::wrap_jobject);
          }
          static PyObject *t_DuplicateFilter$KeepMode_get__parameters_(t_DuplicateFilter$KeepMode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/ShortDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *ShortDocValuesField::class$ = NULL;
        jmethodID *ShortDocValuesField::mids$ = NULL;
        bool ShortDocValuesField::live$ = false;

        jclass ShortDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/ShortDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_20464280] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;S)V");
            mids$[mid_setShortValue_3bc40c6a] = env->getMethodID(cls, "setShortValue", "(S)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ShortDocValuesField::ShortDocValuesField(const ::java::lang::String & a0, jshort a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_20464280, a0.this$, a1)) {}

        void ShortDocValuesField::setShortValue(jshort a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setShortValue_3bc40c6a], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_ShortDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ShortDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ShortDocValuesField_init_(t_ShortDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ShortDocValuesField_setShortValue(t_ShortDocValuesField *self, PyObject *args);
        static int t_ShortDocValuesField_set__shortValue(t_ShortDocValuesField *self, PyObject *arg, void *data);
        static PyGetSetDef t_ShortDocValuesField__fields_[] = {
          DECLARE_SET_FIELD(t_ShortDocValuesField, shortValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ShortDocValuesField__methods_[] = {
          DECLARE_METHOD(t_ShortDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ShortDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ShortDocValuesField, setShortValue, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ShortDocValuesField, t_ShortDocValuesField, ::org::apache::lucene::document::NumericDocValuesField, ShortDocValuesField, t_ShortDocValuesField_init_, 0, 0, t_ShortDocValuesField__fields_, 0, 0);

        void t_ShortDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(ShortDocValuesField), module, "ShortDocValuesField", 0);
        }

        void t_ShortDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ShortDocValuesField).tp_dict, "class_", make_descriptor(ShortDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ShortDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_ShortDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ShortDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ShortDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ShortDocValuesField::initializeClass, 1)))
            return NULL;
          return t_ShortDocValuesField::wrap_Object(ShortDocValuesField(((t_ShortDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_ShortDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ShortDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ShortDocValuesField_init_(t_ShortDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jshort a1;
          ShortDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sS", &a0, &a1))
          {
            INT_CALL(object = ShortDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ShortDocValuesField_setShortValue(t_ShortDocValuesField *self, PyObject *args)
        {
          jshort a0;

          if (!parseArgs(args, "S", &a0))
          {
            OBJ_CALL(self->object.setShortValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ShortDocValuesField), (PyObject *) self, "setShortValue", args, 2);
        }

        static int t_ShortDocValuesField_set__shortValue(t_ShortDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jshort value;
            if (!parseArg(arg, "S", &value))
            {
              INT_CALL(self->object.setShortValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "shortValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/messages/MessageImpl.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/util/Locale.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {

            ::java::lang::Class *MessageImpl::class$ = NULL;
            jmethodID *MessageImpl::mids$ = NULL;
            bool MessageImpl::live$ = false;

            jclass MessageImpl::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/messages/MessageImpl");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_ddea115c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/Object;)V");
                mids$[mid_getArguments_94e49c77] = env->getMethodID(cls, "getArguments", "()[Ljava/lang/Object;");
                mids$[mid_getKey_14c7b5c5] = env->getMethodID(cls, "getKey", "()Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_14c7b5c5] = env->getMethodID(cls, "getLocalizedMessage", "()Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_c0fb304e] = env->getMethodID(cls, "getLocalizedMessage", "(Ljava/util/Locale;)Ljava/lang/String;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MessageImpl::MessageImpl(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            MessageImpl::MessageImpl(const ::java::lang::String & a0, const JArray< ::java::lang::Object > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ddea115c, a0.this$, a1.this$)) {}

            JArray< ::java::lang::Object > MessageImpl::getArguments() const
            {
              return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_getArguments_94e49c77]));
            }

            ::java::lang::String MessageImpl::getKey() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getKey_14c7b5c5]));
            }

            ::java::lang::String MessageImpl::getLocalizedMessage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_14c7b5c5]));
            }

            ::java::lang::String MessageImpl::getLocalizedMessage(const ::java::util::Locale & a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_c0fb304e], a0.this$));
            }

            ::java::lang::String MessageImpl::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {
            static PyObject *t_MessageImpl_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MessageImpl_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MessageImpl_init_(t_MessageImpl *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MessageImpl_getArguments(t_MessageImpl *self);
            static PyObject *t_MessageImpl_getKey(t_MessageImpl *self);
            static PyObject *t_MessageImpl_getLocalizedMessage(t_MessageImpl *self, PyObject *args);
            static PyObject *t_MessageImpl_toString(t_MessageImpl *self, PyObject *args);
            static PyObject *t_MessageImpl_get__arguments(t_MessageImpl *self, void *data);
            static PyObject *t_MessageImpl_get__key(t_MessageImpl *self, void *data);
            static PyObject *t_MessageImpl_get__localizedMessage(t_MessageImpl *self, void *data);
            static PyGetSetDef t_MessageImpl__fields_[] = {
              DECLARE_GET_FIELD(t_MessageImpl, arguments),
              DECLARE_GET_FIELD(t_MessageImpl, key),
              DECLARE_GET_FIELD(t_MessageImpl, localizedMessage),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_MessageImpl__methods_[] = {
              DECLARE_METHOD(t_MessageImpl, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MessageImpl, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MessageImpl, getArguments, METH_NOARGS),
              DECLARE_METHOD(t_MessageImpl, getKey, METH_NOARGS),
              DECLARE_METHOD(t_MessageImpl, getLocalizedMessage, METH_VARARGS),
              DECLARE_METHOD(t_MessageImpl, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MessageImpl, t_MessageImpl, ::java::lang::Object, MessageImpl, t_MessageImpl_init_, 0, 0, t_MessageImpl__fields_, 0, 0);

            void t_MessageImpl::install(PyObject *module)
            {
              installType(&PY_TYPE(MessageImpl), module, "MessageImpl", 0);
            }

            void t_MessageImpl::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MessageImpl).tp_dict, "class_", make_descriptor(MessageImpl::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MessageImpl).tp_dict, "wrapfn_", make_descriptor(t_MessageImpl::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MessageImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MessageImpl_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MessageImpl::initializeClass, 1)))
                return NULL;
              return t_MessageImpl::wrap_Object(MessageImpl(((t_MessageImpl *) arg)->object.this$));
            }
            static PyObject *t_MessageImpl_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MessageImpl::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MessageImpl_init_(t_MessageImpl *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  MessageImpl object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = MessageImpl(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  JArray< ::java::lang::Object > a1((jobject) NULL);
                  MessageImpl object((jobject) NULL);

                  if (!parseArgs(args, "s[o", &a0, &a1))
                  {
                    INT_CALL(object = MessageImpl(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_MessageImpl_getArguments(t_MessageImpl *self)
            {
              JArray< ::java::lang::Object > result((jobject) NULL);
              OBJ_CALL(result = self->object.getArguments());
              return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
            }

            static PyObject *t_MessageImpl_getKey(t_MessageImpl *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getKey());
              return j2p(result);
            }

            static PyObject *t_MessageImpl_getLocalizedMessage(t_MessageImpl *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  ::java::lang::String result((jobject) NULL);
                  OBJ_CALL(result = self->object.getLocalizedMessage());
                  return j2p(result);
                }
                break;
               case 1:
                {
                  ::java::util::Locale a0((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
                  {
                    OBJ_CALL(result = self->object.getLocalizedMessage(a0));
                    return j2p(result);
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "getLocalizedMessage", args);
              return NULL;
            }

            static PyObject *t_MessageImpl_toString(t_MessageImpl *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(MessageImpl), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_MessageImpl_get__arguments(t_MessageImpl *self, void *data)
            {
              JArray< ::java::lang::Object > value((jobject) NULL);
              OBJ_CALL(value = self->object.getArguments());
              return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
            }

            static PyObject *t_MessageImpl_get__key(t_MessageImpl *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getKey());
              return j2p(value);
            }

            static PyObject *t_MessageImpl_get__localizedMessage(t_MessageImpl *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getLocalizedMessage());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene49/Lucene49Codec.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene49 {

          ::java::lang::Class *Lucene49Codec::class$ = NULL;
          jmethodID *Lucene49Codec::mids$ = NULL;
          bool Lucene49Codec::live$ = false;

          jclass Lucene49Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene49/Lucene49Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getDocValuesFormatForField_36ef78ba] = env->getMethodID(cls, "getDocValuesFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_getPostingsFormatForField_19d2f1c6] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene49Codec::Lucene49Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesFormat Lucene49Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene49Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
          }

          ::org::apache::lucene::codecs::DocValuesFormat Lucene49Codec::getDocValuesFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_getDocValuesFormatForField_36ef78ba], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene49Codec::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_19d2f1c6], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene49Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene49Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene49Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene49Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene49Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene49Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene49 {
          static PyObject *t_Lucene49Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene49Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene49Codec_init_(t_Lucene49Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene49Codec_docValuesFormat(t_Lucene49Codec *self, PyObject *args);
          static PyObject *t_Lucene49Codec_fieldInfosFormat(t_Lucene49Codec *self, PyObject *args);
          static PyObject *t_Lucene49Codec_getDocValuesFormatForField(t_Lucene49Codec *self, PyObject *arg);
          static PyObject *t_Lucene49Codec_getPostingsFormatForField(t_Lucene49Codec *self, PyObject *arg);
          static PyObject *t_Lucene49Codec_liveDocsFormat(t_Lucene49Codec *self, PyObject *args);
          static PyObject *t_Lucene49Codec_normsFormat(t_Lucene49Codec *self, PyObject *args);
          static PyObject *t_Lucene49Codec_postingsFormat(t_Lucene49Codec *self, PyObject *args);
          static PyObject *t_Lucene49Codec_segmentInfoFormat(t_Lucene49Codec *self, PyObject *args);
          static PyObject *t_Lucene49Codec_storedFieldsFormat(t_Lucene49Codec *self, PyObject *args);
          static PyObject *t_Lucene49Codec_termVectorsFormat(t_Lucene49Codec *self, PyObject *args);

          static PyMethodDef t_Lucene49Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene49Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene49Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene49Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49Codec, getDocValuesFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene49Codec, getPostingsFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene49Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene49Codec, t_Lucene49Codec, ::org::apache::lucene::codecs::Codec, Lucene49Codec, t_Lucene49Codec_init_, 0, 0, 0, 0, 0);

          void t_Lucene49Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene49Codec), module, "Lucene49Codec", 0);
          }

          void t_Lucene49Codec::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene49Codec).tp_dict, "class_", make_descriptor(Lucene49Codec::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene49Codec).tp_dict, "wrapfn_", make_descriptor(t_Lucene49Codec::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene49Codec).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene49Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene49Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene49Codec::wrap_Object(Lucene49Codec(((t_Lucene49Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene49Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene49Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene49Codec_init_(t_Lucene49Codec *self, PyObject *args, PyObject *kwds)
          {
            Lucene49Codec object((jobject) NULL);

            INT_CALL(object = Lucene49Codec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene49Codec_docValuesFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene49Codec_fieldInfosFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene49Codec_getDocValuesFormatForField(t_Lucene49Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDocValuesFormatForField(a0));
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDocValuesFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene49Codec_getPostingsFormatForField(t_Lucene49Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene49Codec_liveDocsFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene49Codec_normsFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene49Codec_postingsFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene49Codec_segmentInfoFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene49Codec_storedFieldsFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene49Codec_termVectorsFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$bitwise_xor_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$bitwise_xor_return::class$ = NULL;
          jmethodID *JavascriptParser$bitwise_xor_return::mids$ = NULL;
          bool JavascriptParser$bitwise_xor_return::live$ = false;

          jclass JavascriptParser$bitwise_xor_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$bitwise_xor_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$bitwise_xor_return::JavascriptParser$bitwise_xor_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$bitwise_xor_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$bitwise_xor_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$bitwise_xor_return_init_(t_JavascriptParser$bitwise_xor_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$bitwise_xor_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$bitwise_xor_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$bitwise_xor_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$bitwise_xor_return, t_JavascriptParser$bitwise_xor_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$bitwise_xor_return, t_JavascriptParser$bitwise_xor_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$bitwise_xor_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$bitwise_xor_return), module, "JavascriptParser$bitwise_xor_return", 0);
          }

          void t_JavascriptParser$bitwise_xor_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_xor_return).tp_dict, "class_", make_descriptor(JavascriptParser$bitwise_xor_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_xor_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$bitwise_xor_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_xor_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$bitwise_xor_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$bitwise_xor_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$bitwise_xor_return::wrap_Object(JavascriptParser$bitwise_xor_return(((t_JavascriptParser$bitwise_xor_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$bitwise_xor_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$bitwise_xor_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$bitwise_xor_return_init_(t_JavascriptParser$bitwise_xor_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$bitwise_xor_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$bitwise_xor_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$CacheEntry.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$CacheEntry::class$ = NULL;
        jmethodID *FieldCache$CacheEntry::mids$ = NULL;
        bool FieldCache$CacheEntry::live$ = false;

        jclass FieldCache$CacheEntry::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$CacheEntry");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6f799b58] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Class;Ljava/lang/Object;Lorg/apache/lucene/util/Accountable;)V");
            mids$[mid_getCacheType_44a5f2c9] = env->getMethodID(cls, "getCacheType", "()Ljava/lang/Class;");
            mids$[mid_getCustom_846352c3] = env->getMethodID(cls, "getCustom", "()Ljava/lang/Object;");
            mids$[mid_getEstimatedSize_14c7b5c5] = env->getMethodID(cls, "getEstimatedSize", "()Ljava/lang/String;");
            mids$[mid_getFieldName_14c7b5c5] = env->getMethodID(cls, "getFieldName", "()Ljava/lang/String;");
            mids$[mid_getReaderKey_846352c3] = env->getMethodID(cls, "getReaderKey", "()Ljava/lang/Object;");
            mids$[mid_getValue_846352c3] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$CacheEntry::FieldCache$CacheEntry(const ::java::lang::Object & a0, const ::java::lang::String & a1, const ::java::lang::Class & a2, const ::java::lang::Object & a3, const ::org::apache::lucene::util::Accountable & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6f799b58, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

        ::java::lang::Class FieldCache$CacheEntry::getCacheType() const
        {
          return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_getCacheType_44a5f2c9]));
        }

        ::java::lang::Object FieldCache$CacheEntry::getCustom() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getCustom_846352c3]));
        }

        ::java::lang::String FieldCache$CacheEntry::getEstimatedSize() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getEstimatedSize_14c7b5c5]));
        }

        ::java::lang::String FieldCache$CacheEntry::getFieldName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldName_14c7b5c5]));
        }

        ::java::lang::Object FieldCache$CacheEntry::getReaderKey() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getReaderKey_846352c3]));
        }

        ::java::lang::Object FieldCache$CacheEntry::getValue() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_846352c3]));
        }

        ::java::lang::String FieldCache$CacheEntry::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$CacheEntry_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$CacheEntry_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$CacheEntry_init_(t_FieldCache$CacheEntry *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$CacheEntry_getCacheType(t_FieldCache$CacheEntry *self);
        static PyObject *t_FieldCache$CacheEntry_getCustom(t_FieldCache$CacheEntry *self);
        static PyObject *t_FieldCache$CacheEntry_getEstimatedSize(t_FieldCache$CacheEntry *self);
        static PyObject *t_FieldCache$CacheEntry_getFieldName(t_FieldCache$CacheEntry *self);
        static PyObject *t_FieldCache$CacheEntry_getReaderKey(t_FieldCache$CacheEntry *self);
        static PyObject *t_FieldCache$CacheEntry_getValue(t_FieldCache$CacheEntry *self);
        static PyObject *t_FieldCache$CacheEntry_toString(t_FieldCache$CacheEntry *self, PyObject *args);
        static PyObject *t_FieldCache$CacheEntry_get__cacheType(t_FieldCache$CacheEntry *self, void *data);
        static PyObject *t_FieldCache$CacheEntry_get__custom(t_FieldCache$CacheEntry *self, void *data);
        static PyObject *t_FieldCache$CacheEntry_get__estimatedSize(t_FieldCache$CacheEntry *self, void *data);
        static PyObject *t_FieldCache$CacheEntry_get__fieldName(t_FieldCache$CacheEntry *self, void *data);
        static PyObject *t_FieldCache$CacheEntry_get__readerKey(t_FieldCache$CacheEntry *self, void *data);
        static PyObject *t_FieldCache$CacheEntry_get__value(t_FieldCache$CacheEntry *self, void *data);
        static PyGetSetDef t_FieldCache$CacheEntry__fields_[] = {
          DECLARE_GET_FIELD(t_FieldCache$CacheEntry, cacheType),
          DECLARE_GET_FIELD(t_FieldCache$CacheEntry, custom),
          DECLARE_GET_FIELD(t_FieldCache$CacheEntry, estimatedSize),
          DECLARE_GET_FIELD(t_FieldCache$CacheEntry, fieldName),
          DECLARE_GET_FIELD(t_FieldCache$CacheEntry, readerKey),
          DECLARE_GET_FIELD(t_FieldCache$CacheEntry, value),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldCache$CacheEntry__methods_[] = {
          DECLARE_METHOD(t_FieldCache$CacheEntry, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, getCacheType, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, getCustom, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, getEstimatedSize, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, getFieldName, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, getReaderKey, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, getValue, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$CacheEntry, t_FieldCache$CacheEntry, ::java::lang::Object, FieldCache$CacheEntry, t_FieldCache$CacheEntry_init_, 0, 0, t_FieldCache$CacheEntry__fields_, 0, 0);

        void t_FieldCache$CacheEntry::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$CacheEntry), module, "FieldCache$CacheEntry", 0);
        }

        void t_FieldCache$CacheEntry::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$CacheEntry).tp_dict, "class_", make_descriptor(FieldCache$CacheEntry::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$CacheEntry).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$CacheEntry::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$CacheEntry).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$CacheEntry_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$CacheEntry::initializeClass, 1)))
            return NULL;
          return t_FieldCache$CacheEntry::wrap_Object(FieldCache$CacheEntry(((t_FieldCache$CacheEntry *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$CacheEntry_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$CacheEntry::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$CacheEntry_init_(t_FieldCache$CacheEntry *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::Class a2((jobject) NULL);
          PyTypeObject **p2;
          ::java::lang::Object a3((jobject) NULL);
          ::org::apache::lucene::util::Accountable a4((jobject) NULL);
          FieldCache$CacheEntry object((jobject) NULL);

          if (!parseArgs(args, "osKok", ::java::lang::Class::initializeClass, ::org::apache::lucene::util::Accountable::initializeClass, &a0, &a1, &a2, &p2, ::java::lang::t_Class::parameters_, &a3, &a4))
          {
            INT_CALL(object = FieldCache$CacheEntry(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldCache$CacheEntry_getCacheType(t_FieldCache$CacheEntry *self)
        {
          ::java::lang::Class result((jobject) NULL);
          OBJ_CALL(result = self->object.getCacheType());
          return ::java::lang::t_Class::wrap_Object(result);
        }

        static PyObject *t_FieldCache$CacheEntry_getCustom(t_FieldCache$CacheEntry *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getCustom());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_FieldCache$CacheEntry_getEstimatedSize(t_FieldCache$CacheEntry *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getEstimatedSize());
          return j2p(result);
        }

        static PyObject *t_FieldCache$CacheEntry_getFieldName(t_FieldCache$CacheEntry *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldName());
          return j2p(result);
        }

        static PyObject *t_FieldCache$CacheEntry_getReaderKey(t_FieldCache$CacheEntry *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getReaderKey());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_FieldCache$CacheEntry_getValue(t_FieldCache$CacheEntry *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getValue());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_FieldCache$CacheEntry_toString(t_FieldCache$CacheEntry *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldCache$CacheEntry), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FieldCache$CacheEntry_get__cacheType(t_FieldCache$CacheEntry *self, void *data)
        {
          ::java::lang::Class value((jobject) NULL);
          OBJ_CALL(value = self->object.getCacheType());
          return ::java::lang::t_Class::wrap_Object(value);
        }

        static PyObject *t_FieldCache$CacheEntry_get__custom(t_FieldCache$CacheEntry *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getCustom());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_FieldCache$CacheEntry_get__estimatedSize(t_FieldCache$CacheEntry *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getEstimatedSize());
          return j2p(value);
        }

        static PyObject *t_FieldCache$CacheEntry_get__fieldName(t_FieldCache$CacheEntry *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldName());
          return j2p(value);
        }

        static PyObject *t_FieldCache$CacheEntry_get__readerKey(t_FieldCache$CacheEntry *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getReaderKey());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_FieldCache$CacheEntry_get__value(t_FieldCache$CacheEntry *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getValue());
          return ::java::lang::t_Object::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/ParseException.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/Token.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *ParseException::class$ = NULL;
              jmethodID *ParseException::mids$ = NULL;
              jfieldID *ParseException::fids$ = NULL;
              bool ParseException::live$ = false;

              jclass ParseException::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/ParseException");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_1dde9d59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;)V");
                  mids$[mid_init$_8fff18a5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;[[I[Ljava/lang/String;)V");

                  fids$ = new jfieldID[max_fid];
                  fids$[fid_currentToken] = env->getFieldID(cls, "currentToken", "Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  fids$[fid_expectedTokenSequences] = env->getFieldID(cls, "expectedTokenSequences", "[[I");
                  fids$[fid_tokenImage] = env->getFieldID(cls, "tokenImage", "[Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ParseException::ParseException() : ::org::apache::lucene::queryparser::flexible::core::QueryNodeParseException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ParseException::ParseException(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0) : ::org::apache::lucene::queryparser::flexible::core::QueryNodeParseException(env->newObject(initializeClass, &mids$, mid_init$_1dde9d59, a0.this$)) {}

              ParseException::ParseException(const ::org::apache::lucene::queryparser::flexible::standard::parser::Token & a0, const JArray< JArray< jint > > & a1, const JArray< ::java::lang::String > & a2) : ::org::apache::lucene::queryparser::flexible::core::QueryNodeParseException(env->newObject(initializeClass, &mids$, mid_init$_8fff18a5, a0.this$, a1.this$, a2.this$)) {}

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token ParseException::_get_currentToken() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->getObjectField(this$, fids$[fid_currentToken]));
              }

              void ParseException::_set_currentToken(const ::org::apache::lucene::queryparser::flexible::standard::parser::Token & a0) const
              {
                env->setObjectField(this$, fids$[fid_currentToken], a0.this$);
              }

              JArray< JArray< jint > > ParseException::_get_expectedTokenSequences() const
              {
                return JArray< JArray< jint > >(env->getObjectField(this$, fids$[fid_expectedTokenSequences]));
              }

              void ParseException::_set_expectedTokenSequences(const JArray< JArray< jint > > & a0) const
              {
                env->setObjectField(this$, fids$[fid_expectedTokenSequences], a0.this$);
              }

              JArray< ::java::lang::String > ParseException::_get_tokenImage() const
              {
                return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_tokenImage]));
              }

              void ParseException::_set_tokenImage(const JArray< ::java::lang::String > & a0) const
              {
                env->setObjectField(this$, fids$[fid_tokenImage], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg);
              static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds);
              static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data);
              static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data);
              static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data);
              static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data);
              static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data);
              static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data);

              static PyGetSetDef t_ParseException__fields_[] = {
                DECLARE_GETSET_FIELD(t_ParseException, currentToken),
                DECLARE_GETSET_FIELD(t_ParseException, expectedTokenSequences),
                DECLARE_GETSET_FIELD(t_ParseException, tokenImage),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ParseException__methods_[] = {
                DECLARE_METHOD(t_ParseException, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ParseException, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ParseException, t_ParseException, ::org::apache::lucene::queryparser::flexible::core::QueryNodeParseException, ParseException, t_ParseException_init_, 0, 0, t_ParseException__fields_, 0, 0);

              void t_ParseException::install(PyObject *module)
              {
                installType(&PY_TYPE(ParseException), module, "ParseException", 0);
              }

              void t_ParseException::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "class_", make_descriptor(ParseException::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "wrapfn_", make_descriptor(t_ParseException::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ParseException::initializeClass, 1)))
                  return NULL;
                return t_ParseException::wrap_Object(ParseException(((t_ParseException *) arg)->object.this$));
              }
              static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ParseException::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    ParseException object((jobject) NULL);

                    INT_CALL(object = ParseException());
                    self->object = object;
                    break;
                  }
                  goto err;
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                    ParseException object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &a0))
                    {
                      INT_CALL(object = ParseException(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 3:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::Token a0((jobject) NULL);
                    JArray< JArray< jint > > a1((jobject) NULL);
                    JArray< ::java::lang::String > a2((jobject) NULL);
                    ParseException object((jobject) NULL);

                    if (!parseArgs(args, "k[[I[s", ::org::apache::lucene::queryparser::flexible::standard::parser::Token::initializeClass, &a0, &a1, &a2))
                    {
                      INT_CALL(object = ParseException(a0, a1, a2));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                OBJ_CALL(value = self->object._get_currentToken());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(value);
              }
              static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::Token::initializeClass, &value))
                {
                  INT_CALL(self->object._set_currentToken(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "currentToken", arg);
                return -1;
              }

              static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data)
              {
                JArray< JArray< jint > > value((jobject) NULL);
                OBJ_CALL(value = self->object._get_expectedTokenSequences());
                return JArray<jobject>(value.this$).wrap(NULL);
              }
              static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data)
              {
                JArray< JArray< jint > > value((jobject) NULL);
                if (!parseArg(arg, "[[I", &value))
                {
                  INT_CALL(self->object._set_expectedTokenSequences(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "expectedTokenSequences", arg);
                return -1;
              }

              static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data)
              {
                JArray< ::java::lang::String > value((jobject) NULL);
                OBJ_CALL(value = self->object._get_tokenImage());
                return JArray<jstring>(value.this$).wrap();
              }
              static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data)
              {
                JArray< ::java::lang::String > value((jobject) NULL);
                if (!parseArg(arg, "[s", &value))
                {
                  INT_CALL(self->object._set_tokenImage(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "tokenImage", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/CompoundFileDirectory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/Lock.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *CompoundFileDirectory::class$ = NULL;
        jmethodID *CompoundFileDirectory::mids$ = NULL;
        bool CompoundFileDirectory::live$ = false;

        jclass CompoundFileDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/CompoundFileDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f1dc2b71] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;Z)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getDirectory_1f3934bb] = env->getMethodID(cls, "getDirectory", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_renameFile_4a264742] = env->getMethodID(cls, "renameFile", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CompoundFileDirectory::CompoundFileDirectory(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2, jboolean a3) : ::org::apache::lucene::store::BaseDirectory(env->newObject(initializeClass, &mids$, mid_init$_f1dc2b71, a0.this$, a1.this$, a2.this$, a3)) {}

        void CompoundFileDirectory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::store::IndexOutput CompoundFileDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void CompoundFileDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        jboolean CompoundFileDirectory::fileExists(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fileExists_5fdc3f44], a0.this$);
        }

        jlong CompoundFileDirectory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_5fdc3f54], a0.this$);
        }

        ::org::apache::lucene::store::Directory CompoundFileDirectory::getDirectory() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDirectory_1f3934bb]));
        }

        ::java::lang::String CompoundFileDirectory::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
        }

        JArray< ::java::lang::String > CompoundFileDirectory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_2e6d5245]));
        }

        ::org::apache::lucene::store::Lock CompoundFileDirectory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }

        ::org::apache::lucene::store::IndexInput CompoundFileDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }

        void CompoundFileDirectory::renameFile(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_renameFile_4a264742], a0.this$, a1.this$);
        }

        void CompoundFileDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }

        ::java::lang::String CompoundFileDirectory::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/store/CompoundFileDirectory$FileEntry.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_CompoundFileDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompoundFileDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CompoundFileDirectory_init_(t_CompoundFileDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CompoundFileDirectory_close(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_createOutput(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_deleteFile(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_fileExists(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_fileLength(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_getDirectory(t_CompoundFileDirectory *self);
        static PyObject *t_CompoundFileDirectory_getName(t_CompoundFileDirectory *self);
        static PyObject *t_CompoundFileDirectory_listAll(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_makeLock(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_openInput(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_renameFile(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_sync(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_toString(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_get__directory(t_CompoundFileDirectory *self, void *data);
        static PyObject *t_CompoundFileDirectory_get__name(t_CompoundFileDirectory *self, void *data);
        static PyGetSetDef t_CompoundFileDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_CompoundFileDirectory, directory),
          DECLARE_GET_FIELD(t_CompoundFileDirectory, name),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CompoundFileDirectory__methods_[] = {
          DECLARE_METHOD(t_CompoundFileDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompoundFileDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompoundFileDirectory, close, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, fileExists, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, fileLength, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, getDirectory, METH_NOARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, getName, METH_NOARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, listAll, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, makeLock, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, renameFile, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, sync, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CompoundFileDirectory, t_CompoundFileDirectory, ::org::apache::lucene::store::BaseDirectory, CompoundFileDirectory, t_CompoundFileDirectory_init_, 0, 0, t_CompoundFileDirectory__fields_, 0, 0);

        void t_CompoundFileDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(CompoundFileDirectory), module, "CompoundFileDirectory", 0);
          PyDict_SetItemString(PY_TYPE(CompoundFileDirectory).tp_dict, "FileEntry", make_descriptor(&PY_TYPE(CompoundFileDirectory$FileEntry)));
        }

        void t_CompoundFileDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CompoundFileDirectory).tp_dict, "class_", make_descriptor(CompoundFileDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CompoundFileDirectory).tp_dict, "wrapfn_", make_descriptor(t_CompoundFileDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CompoundFileDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CompoundFileDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CompoundFileDirectory::initializeClass, 1)))
            return NULL;
          return t_CompoundFileDirectory::wrap_Object(CompoundFileDirectory(((t_CompoundFileDirectory *) arg)->object.this$));
        }
        static PyObject *t_CompoundFileDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CompoundFileDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CompoundFileDirectory_init_(t_CompoundFileDirectory *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          jboolean a3;
          CompoundFileDirectory object((jobject) NULL);

          if (!parseArgs(args, "kskZ", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = CompoundFileDirectory(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CompoundFileDirectory_close(t_CompoundFileDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_createOutput(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_deleteFile(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_fileExists(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileExists(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "fileExists", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_fileLength(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "fileLength", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_getDirectory(t_CompoundFileDirectory *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_CompoundFileDirectory_getName(t_CompoundFileDirectory *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }

        static PyObject *t_CompoundFileDirectory_listAll(t_CompoundFileDirectory *self, PyObject *args)
        {
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.listAll());
            return JArray<jstring>(result.this$).wrap();
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "listAll", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_makeLock(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "makeLock", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_openInput(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_renameFile(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.renameFile(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "renameFile", args);
          return NULL;
        }

        static PyObject *t_CompoundFileDirectory_sync(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_toString(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_get__directory(t_CompoundFileDirectory *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_CompoundFileDirectory_get__name(t_CompoundFileDirectory *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator::class$ = NULL;
        jmethodID *FieldComparator::mids$ = NULL;
        bool FieldComparator::live$ = false;

        jclass FieldComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_compareValues_466982ed] = env->getMethodID(cls, "compareValues", "(Ljava/lang/Object;Ljava/lang/Object;)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_setTopValue_290588ee] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Object;)V");
            mids$[mid_value_29be6a55] = env->getMethodID(cls, "value", "(I)Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator::FieldComparator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint FieldComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        jint FieldComparator::compareValues(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compareValues_466982ed], a0.this$, a1.this$);
        }

        void FieldComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        FieldComparator FieldComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }

        void FieldComparator::setTopValue(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_290588ee], a0.this$);
        }

        ::java::lang::Object FieldComparator::value(jint a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_value_29be6a55], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/FieldComparator$TermValComparator.h"
#include "org/apache/lucene/search/FieldComparator$TermOrdValComparator.h"
#include "org/apache/lucene/search/FieldComparator$DocComparator.h"
#include "org/apache/lucene/search/FieldComparator$RelevanceComparator.h"
#include "org/apache/lucene/search/FieldComparator$LongComparator.h"
#include "org/apache/lucene/search/FieldComparator$IntComparator.h"
#include "org/apache/lucene/search/FieldComparator$ShortComparator.h"
#include "org/apache/lucene/search/FieldComparator$FloatComparator.h"
#include "org/apache/lucene/search/FieldComparator$DoubleComparator.h"
#include "org/apache/lucene/search/FieldComparator$ByteComparator.h"
#include "org/apache/lucene/search/FieldComparator$NumericComparator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator_of_(t_FieldComparator *self, PyObject *args);
        static int t_FieldComparator_init_(t_FieldComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator_compare(t_FieldComparator *self, PyObject *args);
        static PyObject *t_FieldComparator_compareBottom(t_FieldComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator_compareTop(t_FieldComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator_compareValues(t_FieldComparator *self, PyObject *args);
        static PyObject *t_FieldComparator_copy(t_FieldComparator *self, PyObject *args);
        static PyObject *t_FieldComparator_setBottom(t_FieldComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator_setNextReader(t_FieldComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator_setScorer(t_FieldComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator_setTopValue(t_FieldComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator_value(t_FieldComparator *self, PyObject *arg);
        static int t_FieldComparator_set__bottom(t_FieldComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator_set__nextReader(t_FieldComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator_set__scorer(t_FieldComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator_set__topValue(t_FieldComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator_get__parameters_(t_FieldComparator *self, void *data);
        static PyGetSetDef t_FieldComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator, scorer),
          DECLARE_SET_FIELD(t_FieldComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator, compareBottom, METH_O),
          DECLARE_METHOD(t_FieldComparator, compareTop, METH_O),
          DECLARE_METHOD(t_FieldComparator, compareValues, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator, setBottom, METH_O),
          DECLARE_METHOD(t_FieldComparator, setNextReader, METH_O),
          DECLARE_METHOD(t_FieldComparator, setScorer, METH_O),
          DECLARE_METHOD(t_FieldComparator, setTopValue, METH_O),
          DECLARE_METHOD(t_FieldComparator, value, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator, t_FieldComparator, ::java::lang::Object, FieldComparator, t_FieldComparator_init_, 0, 0, t_FieldComparator__fields_, 0, 0);
        PyObject *t_FieldComparator::wrap_Object(const FieldComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator *self = (t_FieldComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator *self = (t_FieldComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator), module, "FieldComparator", 0);
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "TermValComparator", make_descriptor(&PY_TYPE(FieldComparator$TermValComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "TermOrdValComparator", make_descriptor(&PY_TYPE(FieldComparator$TermOrdValComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "DocComparator", make_descriptor(&PY_TYPE(FieldComparator$DocComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "RelevanceComparator", make_descriptor(&PY_TYPE(FieldComparator$RelevanceComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "LongComparator", make_descriptor(&PY_TYPE(FieldComparator$LongComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "IntComparator", make_descriptor(&PY_TYPE(FieldComparator$IntComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "ShortComparator", make_descriptor(&PY_TYPE(FieldComparator$ShortComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "FloatComparator", make_descriptor(&PY_TYPE(FieldComparator$FloatComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "DoubleComparator", make_descriptor(&PY_TYPE(FieldComparator$DoubleComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "ByteComparator", make_descriptor(&PY_TYPE(FieldComparator$ByteComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "NumericComparator", make_descriptor(&PY_TYPE(FieldComparator$NumericComparator)));
        }

        void t_FieldComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "class_", make_descriptor(FieldComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator::wrap_Object(FieldComparator(((t_FieldComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator_of_(t_FieldComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator_init_(t_FieldComparator *self, PyObject *args, PyObject *kwds)
        {
          FieldComparator object((jobject) NULL);

          INT_CALL(object = FieldComparator());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldComparator_compare(t_FieldComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compare", args);
          return NULL;
        }

        static PyObject *t_FieldComparator_compareBottom(t_FieldComparator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareBottom", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator_compareTop(t_FieldComparator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTop", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator_compareValues(t_FieldComparator *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
          {
            OBJ_CALL(result = self->object.compareValues(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareValues", args);
          return NULL;
        }

        static PyObject *t_FieldComparator_copy(t_FieldComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copy", args);
          return NULL;
        }

        static PyObject *t_FieldComparator_setBottom(t_FieldComparator *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBottom", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator_setNextReader(t_FieldComparator *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          FieldComparator result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return t_FieldComparator::wrap_Object(result, self->parameters[0]);
          }

          PyErr_SetArgsError((PyObject *) self, "setNextReader", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator_setScorer(t_FieldComparator *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setScorer", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator_setTopValue(t_FieldComparator *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setTopValue", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator_value(t_FieldComparator *self, PyObject *arg)
        {
          jint a0;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "value", arg);
          return NULL;
        }
        static PyObject *t_FieldComparator_get__parameters_(t_FieldComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator_set__bottom(t_FieldComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator_set__nextReader(t_FieldComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator_set__scorer(t_FieldComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }

        static int t_FieldComparator_set__topValue(t_FieldComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiTermsEnum.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiTermsEnum::class$ = NULL;
        jmethodID *MultiTermsEnum::mids$ = NULL;
        bool MultiTermsEnum::live$ = false;

        jclass MultiTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a8f03305] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/ReaderSlice;)V");
            mids$[mid_docFreq_54c6a179] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_docs_e6d4c3ef] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_docsAndPositions_b5d9c11b] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_getMatchCount_54c6a179] = env->getMethodID(cls, "getMatchCount", "()I");
            mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
            mids$[mid_seekCeil_fa9d72c4] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_seekExact_7bc03dc8] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_seekExact_0ee6df2f] = env->getMethodID(cls, "seekExact", "(J)V");
            mids$[mid_term_4ae19461] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermsEnum::MultiTermsEnum(const JArray< ::org::apache::lucene::index::ReaderSlice > & a0) : ::org::apache::lucene::index::TermsEnum(env->newObject(initializeClass, &mids$, mid_init$_a8f03305, a0.this$)) {}

        jint MultiTermsEnum::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_54c6a179]);
        }

        ::org::apache::lucene::index::DocsEnum MultiTermsEnum::docs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_e6d4c3ef], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum MultiTermsEnum::docsAndPositions(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsAndPositionsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_b5d9c11b], a0.this$, a1.this$, a2));
        }

        ::java::util::Comparator MultiTermsEnum::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        jint MultiTermsEnum::getMatchCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getMatchCount_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef MultiTermsEnum::next() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
        }

        jlong MultiTermsEnum::ord() const
        {
          return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
        }

        ::org::apache::lucene::index::TermsEnum$SeekStatus MultiTermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_fa9d72c4], a0.this$));
        }

        jboolean MultiTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_seekExact_7bc03dc8], a0.this$);
        }

        void MultiTermsEnum::seekExact(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_0ee6df2f], a0);
        }

        ::org::apache::lucene::util::BytesRef MultiTermsEnum::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_4ae19461]));
        }

        ::java::lang::String MultiTermsEnum::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jlong MultiTermsEnum::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiTermsEnum_init_(t_MultiTermsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermsEnum_docFreq(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_docs(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_docsAndPositions(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_getComparator(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_getMatchCount(t_MultiTermsEnum *self);
        static PyObject *t_MultiTermsEnum_next(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_ord(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_seekCeil(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_seekExact(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_term(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_toString(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_totalTermFreq(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_get__comparator(t_MultiTermsEnum *self, void *data);
        static PyObject *t_MultiTermsEnum_get__matchCount(t_MultiTermsEnum *self, void *data);
        static PyGetSetDef t_MultiTermsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTermsEnum, comparator),
          DECLARE_GET_FIELD(t_MultiTermsEnum, matchCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTermsEnum__methods_[] = {
          DECLARE_METHOD(t_MultiTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermsEnum, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, docs, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, docsAndPositions, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, getMatchCount, METH_NOARGS),
          DECLARE_METHOD(t_MultiTermsEnum, next, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, ord, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, seekCeil, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, seekExact, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, term, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, toString, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTermsEnum, t_MultiTermsEnum, ::org::apache::lucene::index::TermsEnum, MultiTermsEnum, t_MultiTermsEnum_init_, PyObject_SelfIter, ((PyObject *(*)(t_MultiTermsEnum *)) get_next< t_MultiTermsEnum,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_MultiTermsEnum__fields_, 0, 0);

        void t_MultiTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermsEnum), module, "MultiTermsEnum", 0);
        }

        void t_MultiTermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTermsEnum).tp_dict, "class_", make_descriptor(MultiTermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_MultiTermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermsEnum::initializeClass, 1)))
            return NULL;
          return t_MultiTermsEnum::wrap_Object(MultiTermsEnum(((t_MultiTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_MultiTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiTermsEnum_init_(t_MultiTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          JArray< ::org::apache::lucene::index::ReaderSlice > a0((jobject) NULL);
          MultiTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "[k", ::org::apache::lucene::index::ReaderSlice::initializeClass, &a0))
          {
            INT_CALL(object = MultiTermsEnum(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiTermsEnum_docFreq(t_MultiTermsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docFreq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_MultiTermsEnum_docs(t_MultiTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docs(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "docs", args, 2);
        }

        static PyObject *t_MultiTermsEnum_docsAndPositions(t_MultiTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsAndPositionsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "docsAndPositions", args, 2);
        }

        static PyObject *t_MultiTermsEnum_getComparator(t_MultiTermsEnum *self, PyObject *args)
        {
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_MultiTermsEnum_getMatchCount(t_MultiTermsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMatchCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MultiTermsEnum_next(t_MultiTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "next", args, 2);
        }

        static PyObject *t_MultiTermsEnum_ord(t_MultiTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "ord", args, 2);
        }

        static PyObject *t_MultiTermsEnum_seekCeil(t_MultiTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.seekCeil(a0));
            return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "seekCeil", args, 2);
        }

        static PyObject *t_MultiTermsEnum_seekExact(t_MultiTermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.seekExact(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.seekExact(a0));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "seekExact", args, 2);
        }

        static PyObject *t_MultiTermsEnum_term(t_MultiTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.term());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "term", args, 2);
        }

        static PyObject *t_MultiTermsEnum_toString(t_MultiTermsEnum *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MultiTermsEnum_totalTermFreq(t_MultiTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.totalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "totalTermFreq", args, 2);
        }

        static PyObject *t_MultiTermsEnum_get__comparator(t_MultiTermsEnum *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_MultiTermsEnum_get__matchCount(t_MultiTermsEnum *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMatchCount());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/FilterIterator.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *FilterIterator::class$ = NULL;
        jmethodID *FilterIterator::mids$ = NULL;
        bool FilterIterator::live$ = false;

        jclass FilterIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/FilterIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_106d97d5] = env->getMethodID(cls, "<init>", "(Ljava/util/Iterator;)V");
            mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
            mids$[mid_next_846352c3] = env->getMethodID(cls, "next", "()Ljava/lang/Object;");
            mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");
            mids$[mid_predicateFunction_290588e2] = env->getMethodID(cls, "predicateFunction", "(Ljava/lang/Object;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterIterator::FilterIterator(const ::java::util::Iterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_106d97d5, a0.this$)) {}

        jboolean FilterIterator::hasNext() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNext_54c6a16a]);
        }

        ::java::lang::Object FilterIterator::next() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_next_846352c3]));
        }

        void FilterIterator::remove() const
        {
          env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_FilterIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterIterator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterIterator_of_(t_FilterIterator *self, PyObject *args);
        static int t_FilterIterator_init_(t_FilterIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterIterator_hasNext(t_FilterIterator *self);
        static PyObject *t_FilterIterator_next(t_FilterIterator *self);
        static PyObject *t_FilterIterator_remove(t_FilterIterator *self);
        static PyObject *t_FilterIterator_get__parameters_(t_FilterIterator *self, void *data);
        static PyGetSetDef t_FilterIterator__fields_[] = {
          DECLARE_GET_FIELD(t_FilterIterator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterIterator__methods_[] = {
          DECLARE_METHOD(t_FilterIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterIterator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FilterIterator, hasNext, METH_NOARGS),
          DECLARE_METHOD(t_FilterIterator, next, METH_NOARGS),
          DECLARE_METHOD(t_FilterIterator, remove, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterIterator, t_FilterIterator, ::java::lang::Object, FilterIterator, t_FilterIterator_init_, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Iterator *)) get_generic_iterator_next< ::java::util::t_Iterator,::java::lang::t_Object >), t_FilterIterator__fields_, 0, 0);
        PyObject *t_FilterIterator::wrap_Object(const FilterIterator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterIterator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterIterator *self = (t_FilterIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FilterIterator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterIterator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterIterator *self = (t_FilterIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FilterIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterIterator), module, "FilterIterator", 0);
        }

        void t_FilterIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterIterator).tp_dict, "class_", make_descriptor(FilterIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterIterator).tp_dict, "wrapfn_", make_descriptor(t_FilterIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterIterator::initializeClass, 1)))
            return NULL;
          return t_FilterIterator::wrap_Object(FilterIterator(((t_FilterIterator *) arg)->object.this$));
        }
        static PyObject *t_FilterIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterIterator_of_(t_FilterIterator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FilterIterator_init_(t_FilterIterator *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::Iterator a0((jobject) NULL);
          PyTypeObject **p0;
          FilterIterator object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Iterator::initializeClass, &a0, &p0, ::java::util::t_Iterator::parameters_))
          {
            INT_CALL(object = FilterIterator(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterIterator_hasNext(t_FilterIterator *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasNext());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FilterIterator_next(t_FilterIterator *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.next());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_FilterIterator_remove(t_FilterIterator *self)
        {
          OBJ_CALL(self->object.remove());
          Py_RETURN_NONE;
        }
        static PyObject *t_FilterIterator_get__parameters_(t_FilterIterator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCacheDocIdSet.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCacheDocIdSet::class$ = NULL;
        jmethodID *FieldCacheDocIdSet::mids$ = NULL;
        bool FieldCacheDocIdSet::live$ = false;

        jclass FieldCacheDocIdSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCacheDocIdSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c0d572fa] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/util/Bits;)V");
            mids$[mid_bits_03c2457d] = env->getMethodID(cls, "bits", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_matchDoc_39c7bd30] = env->getMethodID(cls, "matchDoc", "(I)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCacheDocIdSet::FieldCacheDocIdSet(jint a0, const ::org::apache::lucene::util::Bits & a1) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_c0d572fa, a0, a1.this$)) {}

        ::org::apache::lucene::util::Bits FieldCacheDocIdSet::bits() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_bits_03c2457d]));
        }

        jboolean FieldCacheDocIdSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        ::org::apache::lucene::search::DocIdSetIterator FieldCacheDocIdSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCacheDocIdSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheDocIdSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCacheDocIdSet_init_(t_FieldCacheDocIdSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCacheDocIdSet_bits(t_FieldCacheDocIdSet *self, PyObject *args);
        static PyObject *t_FieldCacheDocIdSet_isCacheable(t_FieldCacheDocIdSet *self, PyObject *args);
        static PyObject *t_FieldCacheDocIdSet_iterator(t_FieldCacheDocIdSet *self, PyObject *args);
        static PyObject *t_FieldCacheDocIdSet_get__cacheable(t_FieldCacheDocIdSet *self, void *data);
        static PyGetSetDef t_FieldCacheDocIdSet__fields_[] = {
          DECLARE_GET_FIELD(t_FieldCacheDocIdSet, cacheable),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldCacheDocIdSet__methods_[] = {
          DECLARE_METHOD(t_FieldCacheDocIdSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheDocIdSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheDocIdSet, bits, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheDocIdSet, isCacheable, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheDocIdSet, iterator, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheDocIdSet, t_FieldCacheDocIdSet, ::org::apache::lucene::search::DocIdSet, FieldCacheDocIdSet, t_FieldCacheDocIdSet_init_, 0, 0, t_FieldCacheDocIdSet__fields_, 0, 0);

        void t_FieldCacheDocIdSet::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheDocIdSet), module, "FieldCacheDocIdSet", 0);
        }

        void t_FieldCacheDocIdSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheDocIdSet).tp_dict, "class_", make_descriptor(FieldCacheDocIdSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheDocIdSet).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheDocIdSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheDocIdSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCacheDocIdSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheDocIdSet::initializeClass, 1)))
            return NULL;
          return t_FieldCacheDocIdSet::wrap_Object(FieldCacheDocIdSet(((t_FieldCacheDocIdSet *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheDocIdSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheDocIdSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCacheDocIdSet_init_(t_FieldCacheDocIdSet *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          FieldCacheDocIdSet object((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            INT_CALL(object = FieldCacheDocIdSet(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldCacheDocIdSet_bits(t_FieldCacheDocIdSet *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.bits());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldCacheDocIdSet), (PyObject *) self, "bits", args, 2);
        }

        static PyObject *t_FieldCacheDocIdSet_isCacheable(t_FieldCacheDocIdSet *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCacheable());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FieldCacheDocIdSet), (PyObject *) self, "isCacheable", args, 2);
        }

        static PyObject *t_FieldCacheDocIdSet_iterator(t_FieldCacheDocIdSet *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldCacheDocIdSet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_FieldCacheDocIdSet_get__cacheable(t_FieldCacheDocIdSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/analysis/standard/UAX29URLEmailTokenizer.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *UAX29URLEmailTokenizerFactory::class$ = NULL;
          jmethodID *UAX29URLEmailTokenizerFactory::mids$ = NULL;
          bool UAX29URLEmailTokenizerFactory::live$ = false;

          jclass UAX29URLEmailTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ca873381] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/standard/UAX29URLEmailTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UAX29URLEmailTokenizerFactory::UAX29URLEmailTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::standard::UAX29URLEmailTokenizer UAX29URLEmailTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::standard::UAX29URLEmailTokenizer(env->callObjectMethod(this$, mids$[mid_create_ca873381], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_UAX29URLEmailTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UAX29URLEmailTokenizerFactory_init_(t_UAX29URLEmailTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UAX29URLEmailTokenizerFactory_create(t_UAX29URLEmailTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_UAX29URLEmailTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_UAX29URLEmailTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UAX29URLEmailTokenizerFactory, t_UAX29URLEmailTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, UAX29URLEmailTokenizerFactory, t_UAX29URLEmailTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_UAX29URLEmailTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(UAX29URLEmailTokenizerFactory), module, "UAX29URLEmailTokenizerFactory", 0);
          }

          void t_UAX29URLEmailTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerFactory).tp_dict, "class_", make_descriptor(UAX29URLEmailTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UAX29URLEmailTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UAX29URLEmailTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_UAX29URLEmailTokenizerFactory::wrap_Object(UAX29URLEmailTokenizerFactory(((t_UAX29URLEmailTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_UAX29URLEmailTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UAX29URLEmailTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UAX29URLEmailTokenizerFactory_init_(t_UAX29URLEmailTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            UAX29URLEmailTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = UAX29URLEmailTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UAX29URLEmailTokenizerFactory_create(t_UAX29URLEmailTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::standard::UAX29URLEmailTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::standard::t_UAX29URLEmailTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(UAX29URLEmailTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/PhraseSlopQueryNode.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *PhraseSlopQueryNode::class$ = NULL;
              jmethodID *PhraseSlopQueryNode::mids$ = NULL;
              bool PhraseSlopQueryNode::live$ = false;

              jclass PhraseSlopQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/PhraseSlopQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_bc870487] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;I)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getChild_b387c5e6] = env->getMethodID(cls, "getChild", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getValue_54c6a179] = env->getMethodID(cls, "getValue", "()I");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PhraseSlopQueryNode::PhraseSlopQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, jint a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_bc870487, a0.this$, a1)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode PhraseSlopQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode PhraseSlopQueryNode::getChild() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getChild_b387c5e6]));
              }

              ::java::lang::CharSequence PhraseSlopQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              jint PhraseSlopQueryNode::getValue() const
              {
                return env->callIntMethod(this$, mids$[mid_getValue_54c6a179]);
              }

              void PhraseSlopQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence PhraseSlopQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String PhraseSlopQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_PhraseSlopQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PhraseSlopQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PhraseSlopQueryNode_init_(t_PhraseSlopQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PhraseSlopQueryNode_cloneTree(t_PhraseSlopQueryNode *self, PyObject *args);
              static PyObject *t_PhraseSlopQueryNode_getChild(t_PhraseSlopQueryNode *self);
              static PyObject *t_PhraseSlopQueryNode_getField(t_PhraseSlopQueryNode *self);
              static PyObject *t_PhraseSlopQueryNode_getValue(t_PhraseSlopQueryNode *self);
              static PyObject *t_PhraseSlopQueryNode_setField(t_PhraseSlopQueryNode *self, PyObject *arg);
              static PyObject *t_PhraseSlopQueryNode_toQueryString(t_PhraseSlopQueryNode *self, PyObject *args);
              static PyObject *t_PhraseSlopQueryNode_toString(t_PhraseSlopQueryNode *self, PyObject *args);
              static PyObject *t_PhraseSlopQueryNode_get__child(t_PhraseSlopQueryNode *self, void *data);
              static PyObject *t_PhraseSlopQueryNode_get__field(t_PhraseSlopQueryNode *self, void *data);
              static int t_PhraseSlopQueryNode_set__field(t_PhraseSlopQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_PhraseSlopQueryNode_get__value(t_PhraseSlopQueryNode *self, void *data);
              static PyGetSetDef t_PhraseSlopQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_PhraseSlopQueryNode, child),
                DECLARE_GETSET_FIELD(t_PhraseSlopQueryNode, field),
                DECLARE_GET_FIELD(t_PhraseSlopQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_PhraseSlopQueryNode__methods_[] = {
                DECLARE_METHOD(t_PhraseSlopQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, getChild, METH_NOARGS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, setField, METH_O),
                DECLARE_METHOD(t_PhraseSlopQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PhraseSlopQueryNode, t_PhraseSlopQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, PhraseSlopQueryNode, t_PhraseSlopQueryNode_init_, 0, 0, t_PhraseSlopQueryNode__fields_, 0, 0);

              void t_PhraseSlopQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(PhraseSlopQueryNode), module, "PhraseSlopQueryNode", 0);
              }

              void t_PhraseSlopQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PhraseSlopQueryNode).tp_dict, "class_", make_descriptor(PhraseSlopQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PhraseSlopQueryNode).tp_dict, "wrapfn_", make_descriptor(t_PhraseSlopQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PhraseSlopQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PhraseSlopQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PhraseSlopQueryNode::initializeClass, 1)))
                  return NULL;
                return t_PhraseSlopQueryNode::wrap_Object(PhraseSlopQueryNode(((t_PhraseSlopQueryNode *) arg)->object.this$));
              }
              static PyObject *t_PhraseSlopQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PhraseSlopQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PhraseSlopQueryNode_init_(t_PhraseSlopQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                jint a1;
                PhraseSlopQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = PhraseSlopQueryNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_PhraseSlopQueryNode_cloneTree(t_PhraseSlopQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(PhraseSlopQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_PhraseSlopQueryNode_getChild(t_PhraseSlopQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_PhraseSlopQueryNode_getField(t_PhraseSlopQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_PhraseSlopQueryNode_getValue(t_PhraseSlopQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getValue());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_PhraseSlopQueryNode_setField(t_PhraseSlopQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_PhraseSlopQueryNode_toQueryString(t_PhraseSlopQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(PhraseSlopQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_PhraseSlopQueryNode_toString(t_PhraseSlopQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(PhraseSlopQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_PhraseSlopQueryNode_get__child(t_PhraseSlopQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }

              static PyObject *t_PhraseSlopQueryNode_get__field(t_PhraseSlopQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_PhraseSlopQueryNode_set__field(t_PhraseSlopQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_PhraseSlopQueryNode_get__value(t_PhraseSlopQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getValue());
                return PyInt_FromLong((long) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *RemoveDuplicatesTokenFilter::class$ = NULL;
          jmethodID *RemoveDuplicatesTokenFilter::mids$ = NULL;
          bool RemoveDuplicatesTokenFilter::live$ = false;

          jclass RemoveDuplicatesTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RemoveDuplicatesTokenFilter::RemoveDuplicatesTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean RemoveDuplicatesTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void RemoveDuplicatesTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_RemoveDuplicatesTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RemoveDuplicatesTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RemoveDuplicatesTokenFilter_init_(t_RemoveDuplicatesTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RemoveDuplicatesTokenFilter_incrementToken(t_RemoveDuplicatesTokenFilter *self, PyObject *args);
          static PyObject *t_RemoveDuplicatesTokenFilter_reset(t_RemoveDuplicatesTokenFilter *self, PyObject *args);

          static PyMethodDef t_RemoveDuplicatesTokenFilter__methods_[] = {
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RemoveDuplicatesTokenFilter, t_RemoveDuplicatesTokenFilter, ::org::apache::lucene::analysis::TokenFilter, RemoveDuplicatesTokenFilter, t_RemoveDuplicatesTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_RemoveDuplicatesTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(RemoveDuplicatesTokenFilter), module, "RemoveDuplicatesTokenFilter", 0);
          }

          void t_RemoveDuplicatesTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RemoveDuplicatesTokenFilter).tp_dict, "class_", make_descriptor(RemoveDuplicatesTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RemoveDuplicatesTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_RemoveDuplicatesTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RemoveDuplicatesTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RemoveDuplicatesTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RemoveDuplicatesTokenFilter::initializeClass, 1)))
              return NULL;
            return t_RemoveDuplicatesTokenFilter::wrap_Object(RemoveDuplicatesTokenFilter(((t_RemoveDuplicatesTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_RemoveDuplicatesTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RemoveDuplicatesTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RemoveDuplicatesTokenFilter_init_(t_RemoveDuplicatesTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            RemoveDuplicatesTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = RemoveDuplicatesTokenFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RemoveDuplicatesTokenFilter_incrementToken(t_RemoveDuplicatesTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(RemoveDuplicatesTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_RemoveDuplicatesTokenFilter_reset(t_RemoveDuplicatesTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(RemoveDuplicatesTokenFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/Expression.h"
#include "org/apache/lucene/search/Rescorer.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/expressions/Bindings.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/search/SortField.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {

        ::java::lang::Class *Expression::class$ = NULL;
        jmethodID *Expression::mids$ = NULL;
        jfieldID *Expression::fids$ = NULL;
        bool Expression::live$ = false;

        jclass Expression::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/Expression");

            mids$ = new jmethodID[max_mid];
            mids$[mid_evaluate_d2e34bbb] = env->getMethodID(cls, "evaluate", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)D");
            mids$[mid_getRescorer_2fab3242] = env->getMethodID(cls, "getRescorer", "(Lorg/apache/lucene/expressions/Bindings;)Lorg/apache/lucene/search/Rescorer;");
            mids$[mid_getSortField_5395b0cd] = env->getMethodID(cls, "getSortField", "(Lorg/apache/lucene/expressions/Bindings;Z)Lorg/apache/lucene/search/SortField;");
            mids$[mid_getValueSource_125265df] = env->getMethodID(cls, "getValueSource", "(Lorg/apache/lucene/expressions/Bindings;)Lorg/apache/lucene/queries/function/ValueSource;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_sourceText] = env->getFieldID(cls, "sourceText", "Ljava/lang/String;");
            fids$[fid_variables] = env->getFieldID(cls, "variables", "[Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jdouble Expression::evaluate(jint a0, const JArray< ::org::apache::lucene::queries::function::FunctionValues > & a1) const
        {
          return env->callDoubleMethod(this$, mids$[mid_evaluate_d2e34bbb], a0, a1.this$);
        }

        ::org::apache::lucene::search::Rescorer Expression::getRescorer(const ::org::apache::lucene::expressions::Bindings & a0) const
        {
          return ::org::apache::lucene::search::Rescorer(env->callObjectMethod(this$, mids$[mid_getRescorer_2fab3242], a0.this$));
        }

        ::org::apache::lucene::search::SortField Expression::getSortField(const ::org::apache::lucene::expressions::Bindings & a0, jboolean a1) const
        {
          return ::org::apache::lucene::search::SortField(env->callObjectMethod(this$, mids$[mid_getSortField_5395b0cd], a0.this$, a1));
        }

        ::org::apache::lucene::queries::function::ValueSource Expression::getValueSource(const ::org::apache::lucene::expressions::Bindings & a0) const
        {
          return ::org::apache::lucene::queries::function::ValueSource(env->callObjectMethod(this$, mids$[mid_getValueSource_125265df], a0.this$));
        }

        ::java::lang::String Expression::_get_sourceText() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_sourceText]));
        }

        JArray< ::java::lang::String > Expression::_get_variables() const
        {
          return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_variables]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        static PyObject *t_Expression_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Expression_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Expression_evaluate(t_Expression *self, PyObject *args);
        static PyObject *t_Expression_getRescorer(t_Expression *self, PyObject *arg);
        static PyObject *t_Expression_getSortField(t_Expression *self, PyObject *args);
        static PyObject *t_Expression_getValueSource(t_Expression *self, PyObject *arg);
        static PyObject *t_Expression_get__sourceText(t_Expression *self, void *data);
        static PyObject *t_Expression_get__variables(t_Expression *self, void *data);

        static PyGetSetDef t_Expression__fields_[] = {
          DECLARE_GET_FIELD(t_Expression, sourceText),
          DECLARE_GET_FIELD(t_Expression, variables),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Expression__methods_[] = {
          DECLARE_METHOD(t_Expression, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Expression, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Expression, evaluate, METH_VARARGS),
          DECLARE_METHOD(t_Expression, getRescorer, METH_O),
          DECLARE_METHOD(t_Expression, getSortField, METH_VARARGS),
          DECLARE_METHOD(t_Expression, getValueSource, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Expression, t_Expression, ::java::lang::Object, Expression, abstract_init, 0, 0, t_Expression__fields_, 0, 0);

        void t_Expression::install(PyObject *module)
        {
          installType(&PY_TYPE(Expression), module, "Expression", 0);
        }

        void t_Expression::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Expression).tp_dict, "class_", make_descriptor(Expression::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Expression).tp_dict, "wrapfn_", make_descriptor(t_Expression::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Expression).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Expression_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Expression::initializeClass, 1)))
            return NULL;
          return t_Expression::wrap_Object(Expression(((t_Expression *) arg)->object.this$));
        }
        static PyObject *t_Expression_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Expression::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Expression_evaluate(t_Expression *self, PyObject *args)
        {
          jint a0;
          JArray< ::org::apache::lucene::queries::function::FunctionValues > a1((jobject) NULL);
          jdouble result;

          if (!parseArgs(args, "I[k", ::org::apache::lucene::queries::function::FunctionValues::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.evaluate(a0, a1));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "evaluate", args);
          return NULL;
        }

        static PyObject *t_Expression_getRescorer(t_Expression *self, PyObject *arg)
        {
          ::org::apache::lucene::expressions::Bindings a0((jobject) NULL);
          ::org::apache::lucene::search::Rescorer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::expressions::Bindings::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getRescorer(a0));
            return ::org::apache::lucene::search::t_Rescorer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getRescorer", arg);
          return NULL;
        }

        static PyObject *t_Expression_getSortField(t_Expression *self, PyObject *args)
        {
          ::org::apache::lucene::expressions::Bindings a0((jobject) NULL);
          jboolean a1;
          ::org::apache::lucene::search::SortField result((jobject) NULL);

          if (!parseArgs(args, "kZ", ::org::apache::lucene::expressions::Bindings::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getSortField(a0, a1));
            return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortField", args);
          return NULL;
        }

        static PyObject *t_Expression_getValueSource(t_Expression *self, PyObject *arg)
        {
          ::org::apache::lucene::expressions::Bindings a0((jobject) NULL);
          ::org::apache::lucene::queries::function::ValueSource result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::expressions::Bindings::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getValueSource(a0));
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getValueSource", arg);
          return NULL;
        }

        static PyObject *t_Expression_get__sourceText(t_Expression *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_sourceText());
          return j2p(value);
        }

        static PyObject *t_Expression_get__variables(t_Expression *self, void *data)
        {
          JArray< ::java::lang::String > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_variables());
          return JArray<jstring>(value.this$).wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CorruptIndexException.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CorruptIndexException::class$ = NULL;
        jmethodID *CorruptIndexException::mids$ = NULL;
        bool CorruptIndexException::live$ = false;

        jclass CorruptIndexException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CorruptIndexException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CorruptIndexException::CorruptIndexException(const ::java::lang::String & a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        CorruptIndexException::CorruptIndexException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CorruptIndexException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CorruptIndexException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CorruptIndexException_init_(t_CorruptIndexException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_CorruptIndexException__methods_[] = {
          DECLARE_METHOD(t_CorruptIndexException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CorruptIndexException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CorruptIndexException, t_CorruptIndexException, ::java::io::IOException, CorruptIndexException, t_CorruptIndexException_init_, 0, 0, 0, 0, 0);

        void t_CorruptIndexException::install(PyObject *module)
        {
          installType(&PY_TYPE(CorruptIndexException), module, "CorruptIndexException", 0);
        }

        void t_CorruptIndexException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CorruptIndexException).tp_dict, "class_", make_descriptor(CorruptIndexException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CorruptIndexException).tp_dict, "wrapfn_", make_descriptor(t_CorruptIndexException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CorruptIndexException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CorruptIndexException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CorruptIndexException::initializeClass, 1)))
            return NULL;
          return t_CorruptIndexException::wrap_Object(CorruptIndexException(((t_CorruptIndexException *) arg)->object.this$));
        }
        static PyObject *t_CorruptIndexException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CorruptIndexException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CorruptIndexException_init_(t_CorruptIndexException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              CorruptIndexException object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = CorruptIndexException(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Throwable a1((jobject) NULL);
              CorruptIndexException object((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
              {
                INT_CALL(object = CorruptIndexException(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder$ScoreComparator.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *ScoreOrderFragmentsBuilder$ScoreComparator::class$ = NULL;
          jmethodID *ScoreOrderFragmentsBuilder$ScoreComparator::mids$ = NULL;
          bool ScoreOrderFragmentsBuilder$ScoreComparator::live$ = false;

          jclass ScoreOrderFragmentsBuilder$ScoreComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder$ScoreComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compare_79a08e77] = env->getMethodID(cls, "compare", "(Lorg/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo;Lorg/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo;)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScoreOrderFragmentsBuilder$ScoreComparator::ScoreOrderFragmentsBuilder$ScoreComparator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint ScoreOrderFragmentsBuilder$ScoreComparator::compare(const ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo & a0, const ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compare_79a08e77], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScoreOrderFragmentsBuilder$ScoreComparator_init_(t_ScoreOrderFragmentsBuilder$ScoreComparator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_compare(t_ScoreOrderFragmentsBuilder$ScoreComparator *self, PyObject *args);

          static PyMethodDef t_ScoreOrderFragmentsBuilder$ScoreComparator__methods_[] = {
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder$ScoreComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder$ScoreComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder$ScoreComparator, compare, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ScoreOrderFragmentsBuilder$ScoreComparator, t_ScoreOrderFragmentsBuilder$ScoreComparator, ::java::lang::Object, ScoreOrderFragmentsBuilder$ScoreComparator, t_ScoreOrderFragmentsBuilder$ScoreComparator_init_, 0, 0, 0, 0, 0);

          void t_ScoreOrderFragmentsBuilder$ScoreComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(ScoreOrderFragmentsBuilder$ScoreComparator), module, "ScoreOrderFragmentsBuilder$ScoreComparator", 0);
          }

          void t_ScoreOrderFragmentsBuilder$ScoreComparator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ScoreOrderFragmentsBuilder$ScoreComparator).tp_dict, "class_", make_descriptor(ScoreOrderFragmentsBuilder$ScoreComparator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ScoreOrderFragmentsBuilder$ScoreComparator).tp_dict, "wrapfn_", make_descriptor(t_ScoreOrderFragmentsBuilder$ScoreComparator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ScoreOrderFragmentsBuilder$ScoreComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScoreOrderFragmentsBuilder$ScoreComparator::initializeClass, 1)))
              return NULL;
            return t_ScoreOrderFragmentsBuilder$ScoreComparator::wrap_Object(ScoreOrderFragmentsBuilder$ScoreComparator(((t_ScoreOrderFragmentsBuilder$ScoreComparator *) arg)->object.this$));
          }
          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScoreOrderFragmentsBuilder$ScoreComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScoreOrderFragmentsBuilder$ScoreComparator_init_(t_ScoreOrderFragmentsBuilder$ScoreComparator *self, PyObject *args, PyObject *kwds)
          {
            ScoreOrderFragmentsBuilder$ScoreComparator object((jobject) NULL);

            INT_CALL(object = ScoreOrderFragmentsBuilder$ScoreComparator());
            self->object = object;

            return 0;
          }

          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_compare(t_ScoreOrderFragmentsBuilder$ScoreComparator *self, PyObject *args)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo a0((jobject) NULL);
            ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo a1((jobject) NULL);
            jint result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.compare(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compare", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilteredQuery$FilterStrategy.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/BulkScorer.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilteredQuery$FilterStrategy::class$ = NULL;
        jmethodID *FilteredQuery$FilterStrategy::mids$ = NULL;
        bool FilteredQuery$FilterStrategy::live$ = false;

        jclass FilteredQuery$FilterStrategy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilteredQuery$FilterStrategy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_filteredBulkScorer_b5c185de] = env->getMethodID(cls, "filteredBulkScorer", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/search/Weight;ZLorg/apache/lucene/search/DocIdSet;)Lorg/apache/lucene/search/BulkScorer;");
            mids$[mid_filteredScorer_05f41f97] = env->getMethodID(cls, "filteredScorer", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/DocIdSet;)Lorg/apache/lucene/search/Scorer;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilteredQuery$FilterStrategy::FilteredQuery$FilterStrategy() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::BulkScorer FilteredQuery$FilterStrategy::filteredBulkScorer(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::search::Weight & a1, jboolean a2, const ::org::apache::lucene::search::DocIdSet & a3) const
        {
          return ::org::apache::lucene::search::BulkScorer(env->callObjectMethod(this$, mids$[mid_filteredBulkScorer_b5c185de], a0.this$, a1.this$, a2, a3.this$));
        }

        ::org::apache::lucene::search::Scorer FilteredQuery$FilterStrategy::filteredScorer(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::search::Weight & a1, const ::org::apache::lucene::search::DocIdSet & a2) const
        {
          return ::org::apache::lucene::search::Scorer(env->callObjectMethod(this$, mids$[mid_filteredScorer_05f41f97], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilteredQuery$FilterStrategy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilteredQuery$FilterStrategy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilteredQuery$FilterStrategy_init_(t_FilteredQuery$FilterStrategy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilteredQuery$FilterStrategy_filteredBulkScorer(t_FilteredQuery$FilterStrategy *self, PyObject *args);
        static PyObject *t_FilteredQuery$FilterStrategy_filteredScorer(t_FilteredQuery$FilterStrategy *self, PyObject *args);

        static PyMethodDef t_FilteredQuery$FilterStrategy__methods_[] = {
          DECLARE_METHOD(t_FilteredQuery$FilterStrategy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredQuery$FilterStrategy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredQuery$FilterStrategy, filteredBulkScorer, METH_VARARGS),
          DECLARE_METHOD(t_FilteredQuery$FilterStrategy, filteredScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilteredQuery$FilterStrategy, t_FilteredQuery$FilterStrategy, ::java::lang::Object, FilteredQuery$FilterStrategy, t_FilteredQuery$FilterStrategy_init_, 0, 0, 0, 0, 0);

        void t_FilteredQuery$FilterStrategy::install(PyObject *module)
        {
          installType(&PY_TYPE(FilteredQuery$FilterStrategy), module, "FilteredQuery$FilterStrategy", 0);
        }

        void t_FilteredQuery$FilterStrategy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilteredQuery$FilterStrategy).tp_dict, "class_", make_descriptor(FilteredQuery$FilterStrategy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilteredQuery$FilterStrategy).tp_dict, "wrapfn_", make_descriptor(t_FilteredQuery$FilterStrategy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilteredQuery$FilterStrategy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilteredQuery$FilterStrategy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilteredQuery$FilterStrategy::initializeClass, 1)))
            return NULL;
          return t_FilteredQuery$FilterStrategy::wrap_Object(FilteredQuery$FilterStrategy(((t_FilteredQuery$FilterStrategy *) arg)->object.this$));
        }
        static PyObject *t_FilteredQuery$FilterStrategy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilteredQuery$FilterStrategy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilteredQuery$FilterStrategy_init_(t_FilteredQuery$FilterStrategy *self, PyObject *args, PyObject *kwds)
        {
          FilteredQuery$FilterStrategy object((jobject) NULL);

          INT_CALL(object = FilteredQuery$FilterStrategy());
          self->object = object;

          return 0;
        }

        static PyObject *t_FilteredQuery$FilterStrategy_filteredBulkScorer(t_FilteredQuery$FilterStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::Weight a1((jobject) NULL);
          jboolean a2;
          ::org::apache::lucene::search::DocIdSet a3((jobject) NULL);
          ::org::apache::lucene::search::BulkScorer result((jobject) NULL);

          if (!parseArgs(args, "kkZk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::search::Weight::initializeClass, ::org::apache::lucene::search::DocIdSet::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.filteredBulkScorer(a0, a1, a2, a3));
            return ::org::apache::lucene::search::t_BulkScorer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "filteredBulkScorer", args);
          return NULL;
        }

        static PyObject *t_FilteredQuery$FilterStrategy_filteredScorer(t_FilteredQuery$FilterStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::Weight a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet a2((jobject) NULL);
          ::org::apache::lucene::search::Scorer result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::search::Weight::initializeClass, ::org::apache::lucene::search::DocIdSet::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.filteredScorer(a0, a1, a2));
            return ::org::apache::lucene::search::t_Scorer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "filteredScorer", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMSimilarity.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$CollectionModel.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMSimilarity::class$ = NULL;
          jmethodID *LMSimilarity::mids$ = NULL;
          bool LMSimilarity::live$ = false;

          jclass LMSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_fb5c3f12] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/LMSimilarity$CollectionModel;)V");
              mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_explain_347d95f8] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Explanation;Lorg/apache/lucene/search/similarities/BasicStats;IFF)V");
              mids$[mid_fillBasicStats_c856a532] = env->getMethodID(cls, "fillBasicStats", "(Lorg/apache/lucene/search/similarities/BasicStats;Lorg/apache/lucene/search/CollectionStatistics;Lorg/apache/lucene/search/TermStatistics;)V");
              mids$[mid_newStats_5129800c] = env->getMethodID(cls, "newStats", "(Ljava/lang/String;F)Lorg/apache/lucene/search/similarities/BasicStats;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LMSimilarity::LMSimilarity() : ::org::apache::lucene::search::similarities::SimilarityBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          LMSimilarity::LMSimilarity(const ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel & a0) : ::org::apache::lucene::search::similarities::SimilarityBase(env->newObject(initializeClass, &mids$, mid_init$_fb5c3f12, a0.this$)) {}

          ::java::lang::String LMSimilarity::getName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
          }

          ::java::lang::String LMSimilarity::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$DefaultCollectionModel.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$LMStats.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LMSimilarity_init_(t_LMSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LMSimilarity_getName(t_LMSimilarity *self);
          static PyObject *t_LMSimilarity_toString(t_LMSimilarity *self, PyObject *args);
          static PyObject *t_LMSimilarity_get__name(t_LMSimilarity *self, void *data);
          static PyGetSetDef t_LMSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_LMSimilarity, name),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMSimilarity__methods_[] = {
            DECLARE_METHOD(t_LMSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity, getName, METH_NOARGS),
            DECLARE_METHOD(t_LMSimilarity, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LMSimilarity, t_LMSimilarity, ::org::apache::lucene::search::similarities::SimilarityBase, LMSimilarity, t_LMSimilarity_init_, 0, 0, t_LMSimilarity__fields_, 0, 0);

          void t_LMSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(LMSimilarity), module, "LMSimilarity", 0);
            PyDict_SetItemString(PY_TYPE(LMSimilarity).tp_dict, "DefaultCollectionModel", make_descriptor(&PY_TYPE(LMSimilarity$DefaultCollectionModel)));
            PyDict_SetItemString(PY_TYPE(LMSimilarity).tp_dict, "CollectionModel", make_descriptor(&PY_TYPE(LMSimilarity$CollectionModel)));
            PyDict_SetItemString(PY_TYPE(LMSimilarity).tp_dict, "LMStats", make_descriptor(&PY_TYPE(LMSimilarity$LMStats)));
          }

          void t_LMSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LMSimilarity).tp_dict, "class_", make_descriptor(LMSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LMSimilarity).tp_dict, "wrapfn_", make_descriptor(t_LMSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LMSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMSimilarity::initializeClass, 1)))
              return NULL;
            return t_LMSimilarity::wrap_Object(LMSimilarity(((t_LMSimilarity *) arg)->object.this$));
          }
          static PyObject *t_LMSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LMSimilarity_init_(t_LMSimilarity *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                LMSimilarity object((jobject) NULL);

                INT_CALL(object = LMSimilarity());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel a0((jobject) NULL);
                LMSimilarity object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel::initializeClass, &a0))
                {
                  INT_CALL(object = LMSimilarity(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LMSimilarity_getName(t_LMSimilarity *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getName());
            return j2p(result);
          }

          static PyObject *t_LMSimilarity_toString(t_LMSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LMSimilarity), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_LMSimilarity_get__name(t_LMSimilarity *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/document/Document.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "java/lang/String.h"
#include "java/util/concurrent/ExecutorService.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/search/TopFieldDocs.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/search/Collector.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *IndexSearcher::class$ = NULL;
        jmethodID *IndexSearcher::mids$ = NULL;
        bool IndexSearcher::live$ = false;

        jclass IndexSearcher::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/IndexSearcher");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7d7eaea9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;)V");
            mids$[mid_init$_4df5686b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReaderContext;)V");
            mids$[mid_init$_b62f0212] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReaderContext;Ljava/util/concurrent/ExecutorService;)V");
            mids$[mid_init$_17c46694] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/util/concurrent/ExecutorService;)V");
            mids$[mid_collectionStatistics_3acb4b2e] = env->getMethodID(cls, "collectionStatistics", "(Ljava/lang/String;)Lorg/apache/lucene/search/CollectionStatistics;");
            mids$[mid_createNormalizedWeight_fd935220] = env->getMethodID(cls, "createNormalizedWeight", "(Lorg/apache/lucene/search/Query;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_doc_9c2cfcf9] = env->getMethodID(cls, "doc", "(I)Lorg/apache/lucene/document/Document;");
            mids$[mid_doc_f65cb155] = env->getMethodID(cls, "doc", "(ILjava/util/Set;)Lorg/apache/lucene/document/Document;");
            mids$[mid_doc_a2ea3ebe] = env->getMethodID(cls, "doc", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_document_f65cb155] = env->getMethodID(cls, "document", "(ILjava/util/Set;)Lorg/apache/lucene/document/Document;");
            mids$[mid_explain_5241f7f4] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Query;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_getDefaultSimilarity_efcb1233] = env->getStaticMethodID(cls, "getDefaultSimilarity", "()Lorg/apache/lucene/search/similarities/Similarity;");
            mids$[mid_getIndexReader_94bbd010] = env->getMethodID(cls, "getIndexReader", "()Lorg/apache/lucene/index/IndexReader;");
            mids$[mid_getSimilarity_efcb1233] = env->getMethodID(cls, "getSimilarity", "()Lorg/apache/lucene/search/similarities/Similarity;");
            mids$[mid_getTopReaderContext_5823c99a] = env->getMethodID(cls, "getTopReaderContext", "()Lorg/apache/lucene/index/IndexReaderContext;");
            mids$[mid_rewrite_b1155c95] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/search/Query;)Lorg/apache/lucene/search/Query;");
            mids$[mid_search_01552069] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_search_5e8d6ed3] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_search_d8b721b3] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_search_8e69de9d] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_search_9a382bd2] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;ILorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_search_e8c6fc04] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_search_e0d35976] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;ZZ)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_searchAfter_131bd79f] = env->getMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_fb33e921] = env->getMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;ILorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_86183cf1] = env->getMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_59c01c23] = env->getMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_3f95b001] = env->getMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;ZZ)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_setSimilarity_3b778066] = env->getMethodID(cls, "setSimilarity", "(Lorg/apache/lucene/search/similarities/Similarity;)V");
            mids$[mid_termStatistics_699f82fc] = env->getMethodID(cls, "termStatistics", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/index/TermContext;)Lorg/apache/lucene/search/TermStatistics;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_search_d30ddef1] = env->getMethodID(cls, "search", "(Ljava/util/List;Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_search_8ccf64e3] = env->getMethodID(cls, "search", "(Ljava/util/List;Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/FieldDoc;ILorg/apache/lucene/search/Sort;ZZZ)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_search_ec76ede8] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/FieldDoc;ILorg/apache/lucene/search/Sort;ZZZ)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_search_1352a6c3] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Weight;ILorg/apache/lucene/search/Sort;ZZ)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_search_4d4907ad] = env->getMethodID(cls, "search", "(Ljava/util/List;Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/ScoreDoc;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_search_5b056f10] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/ScoreDoc;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_explain_423d06cb] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Weight;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_slices_240d90fc] = env->getMethodID(cls, "slices", "(Ljava/util/List;)[Lorg/apache/lucene/search/IndexSearcher$LeafSlice;");
            mids$[mid_wrapFilter_d642d32f] = env->getMethodID(cls, "wrapFilter", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;)Lorg/apache/lucene/search/Query;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexSearcher::IndexSearcher(const ::org::apache::lucene::index::IndexReader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7d7eaea9, a0.this$)) {}

        IndexSearcher::IndexSearcher(const ::org::apache::lucene::index::IndexReaderContext & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4df5686b, a0.this$)) {}

        IndexSearcher::IndexSearcher(const ::org::apache::lucene::index::IndexReaderContext & a0, const ::java::util::concurrent::ExecutorService & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b62f0212, a0.this$, a1.this$)) {}

        IndexSearcher::IndexSearcher(const ::org::apache::lucene::index::IndexReader & a0, const ::java::util::concurrent::ExecutorService & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_17c46694, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::CollectionStatistics IndexSearcher::collectionStatistics(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::search::CollectionStatistics(env->callObjectMethod(this$, mids$[mid_collectionStatistics_3acb4b2e], a0.this$));
        }

        ::org::apache::lucene::search::Weight IndexSearcher::createNormalizedWeight(const ::org::apache::lucene::search::Query & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createNormalizedWeight_fd935220], a0.this$));
        }

        ::org::apache::lucene::document::Document IndexSearcher::doc(jint a0) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_doc_9c2cfcf9], a0));
        }

        ::org::apache::lucene::document::Document IndexSearcher::doc(jint a0, const ::java::util::Set & a1) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_doc_f65cb155], a0, a1.this$));
        }

        void IndexSearcher::doc(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_doc_a2ea3ebe], a0, a1.this$);
        }

        ::org::apache::lucene::document::Document IndexSearcher::document(jint a0, const ::java::util::Set & a1) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_document_f65cb155], a0, a1.this$));
        }

        ::org::apache::lucene::search::Explanation IndexSearcher::explain(const ::org::apache::lucene::search::Query & a0, jint a1) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_5241f7f4], a0.this$, a1));
        }

        ::org::apache::lucene::search::similarities::Similarity IndexSearcher::getDefaultSimilarity()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::similarities::Similarity(env->callStaticObjectMethod(cls, mids$[mid_getDefaultSimilarity_efcb1233]));
        }

        ::org::apache::lucene::index::IndexReader IndexSearcher::getIndexReader() const
        {
          return ::org::apache::lucene::index::IndexReader(env->callObjectMethod(this$, mids$[mid_getIndexReader_94bbd010]));
        }

        ::org::apache::lucene::search::similarities::Similarity IndexSearcher::getSimilarity() const
        {
          return ::org::apache::lucene::search::similarities::Similarity(env->callObjectMethod(this$, mids$[mid_getSimilarity_efcb1233]));
        }

        ::org::apache::lucene::index::IndexReaderContext IndexSearcher::getTopReaderContext() const
        {
          return ::org::apache::lucene::index::IndexReaderContext(env->callObjectMethod(this$, mids$[mid_getTopReaderContext_5823c99a]));
        }

        ::org::apache::lucene::search::Query IndexSearcher::rewrite(const ::org::apache::lucene::search::Query & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_b1155c95], a0.this$));
        }

        void IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Collector & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_search_01552069], a0.this$, a1.this$);
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, jint a1) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_search_5e8d6ed3], a0.this$, a1));
        }

        void IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1, const ::org::apache::lucene::search::Collector & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_search_d8b721b3], a0.this$, a1.this$, a2.this$);
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1, jint a2) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_search_8e69de9d], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::TopFieldDocs IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, jint a1, const ::org::apache::lucene::search::Sort & a2) const
        {
          return ::org::apache::lucene::search::TopFieldDocs(env->callObjectMethod(this$, mids$[mid_search_9a382bd2], a0.this$, a1, a2.this$));
        }

        ::org::apache::lucene::search::TopFieldDocs IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1, jint a2, const ::org::apache::lucene::search::Sort & a3) const
        {
          return ::org::apache::lucene::search::TopFieldDocs(env->callObjectMethod(this$, mids$[mid_search_e8c6fc04], a0.this$, a1.this$, a2, a3.this$));
        }

        ::org::apache::lucene::search::TopFieldDocs IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1, jint a2, const ::org::apache::lucene::search::Sort & a3, jboolean a4, jboolean a5) const
        {
          return ::org::apache::lucene::search::TopFieldDocs(env->callObjectMethod(this$, mids$[mid_search_e0d35976], a0.this$, a1.this$, a2, a3.this$, a4, a5));
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::searchAfter(const ::org::apache::lucene::search::ScoreDoc & a0, const ::org::apache::lucene::search::Query & a1, jint a2) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_searchAfter_131bd79f], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::searchAfter(const ::org::apache::lucene::search::ScoreDoc & a0, const ::org::apache::lucene::search::Query & a1, jint a2, const ::org::apache::lucene::search::Sort & a3) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_searchAfter_fb33e921], a0.this$, a1.this$, a2, a3.this$));
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::searchAfter(const ::org::apache::lucene::search::ScoreDoc & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::Filter & a2, jint a3) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_searchAfter_86183cf1], a0.this$, a1.this$, a2.this$, a3));
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::searchAfter(const ::org::apache::lucene::search::ScoreDoc & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::Filter & a2, jint a3, const ::org::apache::lucene::search::Sort & a4) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_searchAfter_59c01c23], a0.this$, a1.this$, a2.this$, a3, a4.this$));
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::searchAfter(const ::org::apache::lucene::search::ScoreDoc & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::Filter & a2, jint a3, const ::org::apache::lucene::search::Sort & a4, jboolean a5, jboolean a6) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_searchAfter_3f95b001], a0.this$, a1.this$, a2.this$, a3, a4.this$, a5, a6));
        }

        void IndexSearcher::setSimilarity(const ::org::apache::lucene::search::similarities::Similarity & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setSimilarity_3b778066], a0.this$);
        }

        ::org::apache::lucene::search::TermStatistics IndexSearcher::termStatistics(const ::org::apache::lucene::index::Term & a0, const ::org::apache::lucene::index::TermContext & a1) const
        {
          return ::org::apache::lucene::search::TermStatistics(env->callObjectMethod(this$, mids$[mid_termStatistics_699f82fc], a0.this$, a1.this$));
        }

        ::java::lang::String IndexSearcher::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/IndexSearcher$LeafSlice.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_IndexSearcher_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSearcher_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexSearcher_init_(t_IndexSearcher *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexSearcher_collectionStatistics(t_IndexSearcher *self, PyObject *arg);
        static PyObject *t_IndexSearcher_createNormalizedWeight(t_IndexSearcher *self, PyObject *arg);
        static PyObject *t_IndexSearcher_doc(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_document(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_explain(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_getDefaultSimilarity(PyTypeObject *type);
        static PyObject *t_IndexSearcher_getIndexReader(t_IndexSearcher *self);
        static PyObject *t_IndexSearcher_getSimilarity(t_IndexSearcher *self);
        static PyObject *t_IndexSearcher_getTopReaderContext(t_IndexSearcher *self);
        static PyObject *t_IndexSearcher_rewrite(t_IndexSearcher *self, PyObject *arg);
        static PyObject *t_IndexSearcher_search(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_searchAfter(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_setSimilarity(t_IndexSearcher *self, PyObject *arg);
        static PyObject *t_IndexSearcher_termStatistics(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_toString(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_get__defaultSimilarity(t_IndexSearcher *self, void *data);
        static PyObject *t_IndexSearcher_get__indexReader(t_IndexSearcher *self, void *data);
        static PyObject *t_IndexSearcher_get__similarity(t_IndexSearcher *self, void *data);
        static int t_IndexSearcher_set__similarity(t_IndexSearcher *self, PyObject *arg, void *data);
        static PyObject *t_IndexSearcher_get__topReaderContext(t_IndexSearcher *self, void *data);
        static PyGetSetDef t_IndexSearcher__fields_[] = {
          DECLARE_GET_FIELD(t_IndexSearcher, defaultSimilarity),
          DECLARE_GET_FIELD(t_IndexSearcher, indexReader),
          DECLARE_GETSET_FIELD(t_IndexSearcher, similarity),
          DECLARE_GET_FIELD(t_IndexSearcher, topReaderContext),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexSearcher__methods_[] = {
          DECLARE_METHOD(t_IndexSearcher, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSearcher, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSearcher, collectionStatistics, METH_O),
          DECLARE_METHOD(t_IndexSearcher, createNormalizedWeight, METH_O),
          DECLARE_METHOD(t_IndexSearcher, doc, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, document, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, explain, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, getDefaultSimilarity, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexSearcher, getIndexReader, METH_NOARGS),
          DECLARE_METHOD(t_IndexSearcher, getSimilarity, METH_NOARGS),
          DECLARE_METHOD(t_IndexSearcher, getTopReaderContext, METH_NOARGS),
          DECLARE_METHOD(t_IndexSearcher, rewrite, METH_O),
          DECLARE_METHOD(t_IndexSearcher, search, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, searchAfter, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, setSimilarity, METH_O),
          DECLARE_METHOD(t_IndexSearcher, termStatistics, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexSearcher, t_IndexSearcher, ::java::lang::Object, IndexSearcher, t_IndexSearcher_init_, 0, 0, t_IndexSearcher__fields_, 0, 0);

        void t_IndexSearcher::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexSearcher), module, "IndexSearcher", 0);
          PyDict_SetItemString(PY_TYPE(IndexSearcher).tp_dict, "LeafSlice", make_descriptor(&PY_TYPE(IndexSearcher$LeafSlice)));
        }

        void t_IndexSearcher::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexSearcher).tp_dict, "class_", make_descriptor(IndexSearcher::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexSearcher).tp_dict, "wrapfn_", make_descriptor(t_IndexSearcher::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexSearcher).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexSearcher_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexSearcher::initializeClass, 1)))
            return NULL;
          return t_IndexSearcher::wrap_Object(IndexSearcher(((t_IndexSearcher *) arg)->object.this$));
        }
        static PyObject *t_IndexSearcher_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexSearcher::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexSearcher_init_(t_IndexSearcher *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              IndexSearcher object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
              {
                INT_CALL(object = IndexSearcher(a0));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
              IndexSearcher object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReaderContext::initializeClass, &a0))
              {
                INT_CALL(object = IndexSearcher(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
              ::java::util::concurrent::ExecutorService a1((jobject) NULL);
              IndexSearcher object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReaderContext::initializeClass, ::java::util::concurrent::ExecutorService::initializeClass, &a0, &a1))
              {
                INT_CALL(object = IndexSearcher(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::util::concurrent::ExecutorService a1((jobject) NULL);
              IndexSearcher object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::java::util::concurrent::ExecutorService::initializeClass, &a0, &a1))
              {
                INT_CALL(object = IndexSearcher(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexSearcher_collectionStatistics(t_IndexSearcher *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::search::CollectionStatistics result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.collectionStatistics(a0));
            return ::org::apache::lucene::search::t_CollectionStatistics::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "collectionStatistics", arg);
          return NULL;
        }

        static PyObject *t_IndexSearcher_createNormalizedWeight(t_IndexSearcher *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createNormalizedWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "createNormalizedWeight", arg);
          return NULL;
        }

        static PyObject *t_IndexSearcher_doc(t_IndexSearcher *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.doc(a0));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              jint a0;
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "IK", ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
              {
                OBJ_CALL(result = self->object.doc(a0, a1));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
            {
              jint a0;
              ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

              if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.doc(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "doc", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_document(t_IndexSearcher *self, PyObject *args)
        {
          jint a0;
          ::java::util::Set a1((jobject) NULL);
          PyTypeObject **p1;
          ::org::apache::lucene::document::Document result((jobject) NULL);

          if (!parseArgs(args, "IK", ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(result = self->object.document(a0, a1));
            return ::org::apache::lucene::document::t_Document::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "document", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_explain(t_IndexSearcher *self, PyObject *args)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.explain(a0, a1));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "explain", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_getDefaultSimilarity(PyTypeObject *type)
        {
          ::org::apache::lucene::search::similarities::Similarity result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::IndexSearcher::getDefaultSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(result);
        }

        static PyObject *t_IndexSearcher_getIndexReader(t_IndexSearcher *self)
        {
          ::org::apache::lucene::index::IndexReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexReader());
          return ::org::apache::lucene::index::t_IndexReader::wrap_Object(result);
        }

        static PyObject *t_IndexSearcher_getSimilarity(t_IndexSearcher *self)
        {
          ::org::apache::lucene::search::similarities::Similarity result((jobject) NULL);
          OBJ_CALL(result = self->object.getSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(result);
        }

        static PyObject *t_IndexSearcher_getTopReaderContext(t_IndexSearcher *self)
        {
          ::org::apache::lucene::index::IndexReaderContext result((jobject) NULL);
          OBJ_CALL(result = self->object.getTopReaderContext());
          return ::org::apache::lucene::index::t_IndexReaderContext::wrap_Object(result);
        }

        static PyObject *t_IndexSearcher_rewrite(t_IndexSearcher *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rewrite", arg);
          return NULL;
        }

        static PyObject *t_IndexSearcher_search(t_IndexSearcher *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::Collector a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.search(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.search(a0, a1));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);
              ::org::apache::lucene::search::Collector a2((jobject) NULL);

              if (!parseArgs(args, "kkk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.search(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkI", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.search(a0, a1, a2));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::search::Sort a2((jobject) NULL);
              ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

              if (!parseArgs(args, "kIk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.search(a0, a1, a2));
                return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::Sort a3((jobject) NULL);
              ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

              if (!parseArgs(args, "kkIk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.search(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
              }
            }
            break;
           case 6:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::Sort a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

              if (!parseArgs(args, "kkIkZZ", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = self->object.search(a0, a1, a2, a3, a4, a5));
                return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "search", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_searchAfter(t_IndexSearcher *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::search::ScoreDoc a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkI", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.searchAfter(a0, a1, a2));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::search::ScoreDoc a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::Sort a3((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkIk", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.searchAfter(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::search::ScoreDoc a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              ::org::apache::lucene::search::Filter a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkI", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.searchAfter(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 5:
            {
              ::org::apache::lucene::search::ScoreDoc a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              ::org::apache::lucene::search::Filter a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::Sort a4((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkIk", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = self->object.searchAfter(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 7:
            {
              ::org::apache::lucene::search::ScoreDoc a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              ::org::apache::lucene::search::Filter a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::Sort a4((jobject) NULL);
              jboolean a5;
              jboolean a6;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkIkZZ", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
              {
                OBJ_CALL(result = self->object.searchAfter(a0, a1, a2, a3, a4, a5, a6));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "searchAfter", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_setSimilarity(t_IndexSearcher *self, PyObject *arg)
        {
          ::org::apache::lucene::search::similarities::Similarity a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::Similarity::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setSimilarity(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setSimilarity", arg);
          return NULL;
        }

        static PyObject *t_IndexSearcher_termStatistics(t_IndexSearcher *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::org::apache::lucene::index::TermContext a1((jobject) NULL);
          ::org::apache::lucene::search::TermStatistics result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::TermContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.termStatistics(a0, a1));
            return ::org::apache::lucene::search::t_TermStatistics::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "termStatistics", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_toString(t_IndexSearcher *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(IndexSearcher), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_IndexSearcher_get__defaultSimilarity(t_IndexSearcher *self, void *data)
        {
          ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
          OBJ_CALL(value = self->object.getDefaultSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(value);
        }

        static PyObject *t_IndexSearcher_get__indexReader(t_IndexSearcher *self, void *data)
        {
          ::org::apache::lucene::index::IndexReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexReader());
          return ::org::apache::lucene::index::t_IndexReader::wrap_Object(value);
        }

        static PyObject *t_IndexSearcher_get__similarity(t_IndexSearcher *self, void *data)
        {
          ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
          OBJ_CALL(value = self->object.getSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(value);
        }
        static int t_IndexSearcher_set__similarity(t_IndexSearcher *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::Similarity::initializeClass, &value))
            {
              INT_CALL(self->object.setSimilarity(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "similarity", arg);
          return -1;
        }

        static PyObject *t_IndexSearcher_get__topReaderContext(t_IndexSearcher *self, void *data)
        {
          ::org::apache::lucene::index::IndexReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object.getTopReaderContext());
          return ::org::apache::lucene::index::t_IndexReaderContext::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/HTMLStripCharFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *HTMLStripCharFilterFactory::class$ = NULL;
          jmethodID *HTMLStripCharFilterFactory::mids$ = NULL;
          bool HTMLStripCharFilterFactory::live$ = false;

          jclass HTMLStripCharFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/HTMLStripCharFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ca5f8ca1] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Lorg/apache/lucene/analysis/charfilter/HTMLStripCharFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HTMLStripCharFilterFactory::HTMLStripCharFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::CharFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::charfilter::HTMLStripCharFilter HTMLStripCharFilterFactory::create(const ::java::io::Reader & a0) const
          {
            return ::org::apache::lucene::analysis::charfilter::HTMLStripCharFilter(env->callObjectMethod(this$, mids$[mid_create_ca5f8ca1], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_HTMLStripCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HTMLStripCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HTMLStripCharFilterFactory_init_(t_HTMLStripCharFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HTMLStripCharFilterFactory_create(t_HTMLStripCharFilterFactory *self, PyObject *args);

          static PyMethodDef t_HTMLStripCharFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HTMLStripCharFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HTMLStripCharFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HTMLStripCharFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HTMLStripCharFilterFactory, t_HTMLStripCharFilterFactory, ::org::apache::lucene::analysis::util::CharFilterFactory, HTMLStripCharFilterFactory, t_HTMLStripCharFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_HTMLStripCharFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HTMLStripCharFilterFactory), module, "HTMLStripCharFilterFactory", 0);
          }

          void t_HTMLStripCharFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HTMLStripCharFilterFactory).tp_dict, "class_", make_descriptor(HTMLStripCharFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HTMLStripCharFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_HTMLStripCharFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HTMLStripCharFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HTMLStripCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HTMLStripCharFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HTMLStripCharFilterFactory::wrap_Object(HTMLStripCharFilterFactory(((t_HTMLStripCharFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HTMLStripCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HTMLStripCharFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HTMLStripCharFilterFactory_init_(t_HTMLStripCharFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HTMLStripCharFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HTMLStripCharFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HTMLStripCharFilterFactory_create(t_HTMLStripCharFilterFactory *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::org::apache::lucene::analysis::charfilter::HTMLStripCharFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::charfilter::t_HTMLStripCharFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(HTMLStripCharFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *AnalyzerQueryNodeProcessor::class$ = NULL;
              jmethodID *AnalyzerQueryNodeProcessor::mids$ = NULL;
              bool AnalyzerQueryNodeProcessor::live$ = false;

              jclass AnalyzerQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              AnalyzerQueryNodeProcessor::AnalyzerQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode AnalyzerQueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_AnalyzerQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AnalyzerQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_AnalyzerQueryNodeProcessor_init_(t_AnalyzerQueryNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_AnalyzerQueryNodeProcessor_process(t_AnalyzerQueryNodeProcessor *self, PyObject *args);

              static PyMethodDef t_AnalyzerQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_AnalyzerQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnalyzerQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnalyzerQueryNodeProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(AnalyzerQueryNodeProcessor, t_AnalyzerQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, AnalyzerQueryNodeProcessor, t_AnalyzerQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_AnalyzerQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(AnalyzerQueryNodeProcessor), module, "AnalyzerQueryNodeProcessor", 0);
              }

              void t_AnalyzerQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(AnalyzerQueryNodeProcessor).tp_dict, "class_", make_descriptor(AnalyzerQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(AnalyzerQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_AnalyzerQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(AnalyzerQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AnalyzerQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AnalyzerQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_AnalyzerQueryNodeProcessor::wrap_Object(AnalyzerQueryNodeProcessor(((t_AnalyzerQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_AnalyzerQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AnalyzerQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_AnalyzerQueryNodeProcessor_init_(t_AnalyzerQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                AnalyzerQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = AnalyzerQueryNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_AnalyzerQueryNodeProcessor_process(t_AnalyzerQueryNodeProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(AnalyzerQueryNodeProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/messages/NLSException.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {

            ::java::lang::Class *NLSException::class$ = NULL;
            jmethodID *NLSException::mids$ = NULL;
            bool NLSException::live$ = false;

            jclass NLSException::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/messages/NLSException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getMessageObject_1bceed44] = env->getMethodID(cls, "getMessageObject", "()Lorg/apache/lucene/queryparser/flexible/messages/Message;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::org::apache::lucene::queryparser::flexible::messages::Message NLSException::getMessageObject() const
            {
              return ::org::apache::lucene::queryparser::flexible::messages::Message(env->callObjectMethod(this$, mids$[mid_getMessageObject_1bceed44]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {
            static PyObject *t_NLSException_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NLSException_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NLSException_getMessageObject(t_NLSException *self);
            static PyObject *t_NLSException_get__messageObject(t_NLSException *self, void *data);
            static PyGetSetDef t_NLSException__fields_[] = {
              DECLARE_GET_FIELD(t_NLSException, messageObject),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_NLSException__methods_[] = {
              DECLARE_METHOD(t_NLSException, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NLSException, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NLSException, getMessageObject, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NLSException, t_NLSException, ::java::lang::Object, NLSException, abstract_init, 0, 0, t_NLSException__fields_, 0, 0);

            void t_NLSException::install(PyObject *module)
            {
              installType(&PY_TYPE(NLSException), module, "NLSException", 0);
            }

            void t_NLSException::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NLSException).tp_dict, "class_", make_descriptor(NLSException::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NLSException).tp_dict, "wrapfn_", make_descriptor(t_NLSException::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NLSException).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NLSException_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NLSException::initializeClass, 1)))
                return NULL;
              return t_NLSException::wrap_Object(NLSException(((t_NLSException *) arg)->object.this$));
            }
            static PyObject *t_NLSException_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NLSException::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_NLSException_getMessageObject(t_NLSException *self)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message result((jobject) NULL);
              OBJ_CALL(result = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(result);
            }

            static PyObject *t_NLSException_get__messageObject(t_NLSException *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message value((jobject) NULL);
              OBJ_CALL(value = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/DoubleDocValues.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/queries/function/ValueSourceScorer.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *DoubleDocValues::class$ = NULL;
            jmethodID *DoubleDocValues::mids$ = NULL;
            bool DoubleDocValues::live$ = false;

            jclass DoubleDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/DoubleDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_boolVal_39c7bd30] = env->getMethodID(cls, "boolVal", "(I)Z");
                mids$[mid_byteVal_39c7bd28] = env->getMethodID(cls, "byteVal", "(I)B");
                mids$[mid_doubleVal_39c7bd2e] = env->getMethodID(cls, "doubleVal", "(I)D");
                mids$[mid_floatVal_39c7bd2c] = env->getMethodID(cls, "floatVal", "(I)F");
                mids$[mid_getRangeScorer_d201bc96] = env->getMethodID(cls, "getRangeScorer", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/queries/function/ValueSourceScorer;");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_intVal_39c7bd23] = env->getMethodID(cls, "intVal", "(I)I");
                mids$[mid_longVal_39c7bd20] = env->getMethodID(cls, "longVal", "(I)J");
                mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_shortVal_39c7bd39] = env->getMethodID(cls, "shortVal", "(I)S");
                mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DoubleDocValues::DoubleDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            jboolean DoubleDocValues::boolVal(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_boolVal_39c7bd30], a0);
            }

            jbyte DoubleDocValues::byteVal(jint a0) const
            {
              return env->callByteMethod(this$, mids$[mid_byteVal_39c7bd28], a0);
            }

            jdouble DoubleDocValues::doubleVal(jint a0) const
            {
              return env->callDoubleMethod(this$, mids$[mid_doubleVal_39c7bd2e], a0);
            }

            jfloat DoubleDocValues::floatVal(jint a0) const
            {
              return env->callFloatMethod(this$, mids$[mid_floatVal_39c7bd2c], a0);
            }

            ::org::apache::lucene::queries::function::ValueSourceScorer DoubleDocValues::getRangeScorer(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) const
            {
              return ::org::apache::lucene::queries::function::ValueSourceScorer(env->callObjectMethod(this$, mids$[mid_getRangeScorer_d201bc96], a0.this$, a1.this$, a2.this$, a3, a4));
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller DoubleDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            jint DoubleDocValues::intVal(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_intVal_39c7bd23], a0);
            }

            jlong DoubleDocValues::longVal(jint a0) const
            {
              return env->callLongMethod(this$, mids$[mid_longVal_39c7bd20], a0);
            }

            ::java::lang::Object DoubleDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
            }

            jshort DoubleDocValues::shortVal(jint a0) const
            {
              return env->callShortMethod(this$, mids$[mid_shortVal_39c7bd39], a0);
            }

            ::java::lang::String DoubleDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
            }

            ::java::lang::String DoubleDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_DoubleDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DoubleDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DoubleDocValues_init_(t_DoubleDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DoubleDocValues_boolVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_byteVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_doubleVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_floatVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_getRangeScorer(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_getValueFiller(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_intVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_longVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_objectVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_shortVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_strVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_toString(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_get__valueFiller(t_DoubleDocValues *self, void *data);
            static PyGetSetDef t_DoubleDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_DoubleDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DoubleDocValues__methods_[] = {
              DECLARE_METHOD(t_DoubleDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DoubleDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DoubleDocValues, boolVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, byteVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, doubleVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, floatVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, getRangeScorer, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, intVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, longVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, shortVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DoubleDocValues, t_DoubleDocValues, ::org::apache::lucene::queries::function::FunctionValues, DoubleDocValues, t_DoubleDocValues_init_, 0, 0, t_DoubleDocValues__fields_, 0, 0);

            void t_DoubleDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(DoubleDocValues), module, "DoubleDocValues", 0);
            }

            void t_DoubleDocValues::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DoubleDocValues).tp_dict, "class_", make_descriptor(DoubleDocValues::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DoubleDocValues).tp_dict, "wrapfn_", make_descriptor(t_DoubleDocValues::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DoubleDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DoubleDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DoubleDocValues::initializeClass, 1)))
                return NULL;
              return t_DoubleDocValues::wrap_Object(DoubleDocValues(((t_DoubleDocValues *) arg)->object.this$));
            }
            static PyObject *t_DoubleDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DoubleDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DoubleDocValues_init_(t_DoubleDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              DoubleDocValues object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = DoubleDocValues(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DoubleDocValues_boolVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.boolVal(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "boolVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_byteVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              jbyte result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.byteVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "byteVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_doubleVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              jdouble result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.doubleVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "doubleVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_floatVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.floatVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "floatVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_getRangeScorer(t_DoubleDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              ::org::apache::lucene::queries::function::ValueSourceScorer result((jobject) NULL);

              if (!parseArgs(args, "kssZZ", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = self->object.getRangeScorer(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::queries::function::t_ValueSourceScorer::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "getRangeScorer", args, 2);
            }

            static PyObject *t_DoubleDocValues_getValueFiller(t_DoubleDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_DoubleDocValues_intVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.intVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "intVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_longVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              jlong result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.longVal(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "longVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_objectVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_shortVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              jshort result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.shortVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "shortVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_strVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_toString(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_DoubleDocValues_get__valueFiller(t_DoubleDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractGroupFacetCollector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/grouping/AbstractGroupFacetCollector$GroupedFacetResult.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractGroupFacetCollector::class$ = NULL;
          jmethodID *AbstractGroupFacetCollector::mids$ = NULL;
          bool AbstractGroupFacetCollector::live$ = false;

          jclass AbstractGroupFacetCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractGroupFacetCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_mergeSegmentResults_e901ef94] = env->getMethodID(cls, "mergeSegmentResults", "(IIZ)Lorg/apache/lucene/search/grouping/AbstractGroupFacetCollector$GroupedFacetResult;");
              mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
              mids$[mid_createSegmentResult_d8ccc374] = env->getMethodID(cls, "createSegmentResult", "()Lorg/apache/lucene/search/grouping/AbstractGroupFacetCollector$SegmentResult;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean AbstractGroupFacetCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          ::org::apache::lucene::search::grouping::AbstractGroupFacetCollector$GroupedFacetResult AbstractGroupFacetCollector::mergeSegmentResults(jint a0, jint a1, jboolean a2) const
          {
            return ::org::apache::lucene::search::grouping::AbstractGroupFacetCollector$GroupedFacetResult(env->callObjectMethod(this$, mids$[mid_mergeSegmentResults_e901ef94], a0, a1, a2));
          }

          void AbstractGroupFacetCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/grouping/AbstractGroupFacetCollector$FacetEntry.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractGroupFacetCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractGroupFacetCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractGroupFacetCollector_acceptsDocsOutOfOrder(t_AbstractGroupFacetCollector *self, PyObject *args);
          static PyObject *t_AbstractGroupFacetCollector_mergeSegmentResults(t_AbstractGroupFacetCollector *self, PyObject *args);
          static PyObject *t_AbstractGroupFacetCollector_setScorer(t_AbstractGroupFacetCollector *self, PyObject *args);
          static int t_AbstractGroupFacetCollector_set__scorer(t_AbstractGroupFacetCollector *self, PyObject *arg, void *data);
          static PyGetSetDef t_AbstractGroupFacetCollector__fields_[] = {
            DECLARE_SET_FIELD(t_AbstractGroupFacetCollector, scorer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractGroupFacetCollector__methods_[] = {
            DECLARE_METHOD(t_AbstractGroupFacetCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector, mergeSegmentResults, METH_VARARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractGroupFacetCollector, t_AbstractGroupFacetCollector, ::org::apache::lucene::search::Collector, AbstractGroupFacetCollector, abstract_init, 0, 0, t_AbstractGroupFacetCollector__fields_, 0, 0);

          void t_AbstractGroupFacetCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractGroupFacetCollector), module, "AbstractGroupFacetCollector", 0);
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector).tp_dict, "FacetEntry", make_descriptor(&PY_TYPE(AbstractGroupFacetCollector$FacetEntry)));
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector).tp_dict, "GroupedFacetResult", make_descriptor(&PY_TYPE(AbstractGroupFacetCollector$GroupedFacetResult)));
          }

          void t_AbstractGroupFacetCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector).tp_dict, "class_", make_descriptor(AbstractGroupFacetCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector).tp_dict, "wrapfn_", make_descriptor(t_AbstractGroupFacetCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractGroupFacetCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractGroupFacetCollector::initializeClass, 1)))
              return NULL;
            return t_AbstractGroupFacetCollector::wrap_Object(AbstractGroupFacetCollector(((t_AbstractGroupFacetCollector *) arg)->object.this$));
          }
          static PyObject *t_AbstractGroupFacetCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractGroupFacetCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractGroupFacetCollector_acceptsDocsOutOfOrder(t_AbstractGroupFacetCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractGroupFacetCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_AbstractGroupFacetCollector_mergeSegmentResults(t_AbstractGroupFacetCollector *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jboolean a2;
            ::org::apache::lucene::search::grouping::AbstractGroupFacetCollector$GroupedFacetResult result((jobject) NULL);

            if (!parseArgs(args, "IIZ", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.mergeSegmentResults(a0, a1, a2));
              return ::org::apache::lucene::search::grouping::t_AbstractGroupFacetCollector$GroupedFacetResult::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "mergeSegmentResults", args);
            return NULL;
          }

          static PyObject *t_AbstractGroupFacetCollector_setScorer(t_AbstractGroupFacetCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorer a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractGroupFacetCollector), (PyObject *) self, "setScorer", args, 2);
          }

          static int t_AbstractGroupFacetCollector_set__scorer(t_AbstractGroupFacetCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/KStemFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *KStemFilterFactory::class$ = NULL;
          jmethodID *KStemFilterFactory::mids$ = NULL;
          bool KStemFilterFactory::live$ = false;

          jclass KStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/KStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2969f76d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KStemFilterFactory::KStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter KStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_2969f76d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_KStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KStemFilterFactory_init_(t_KStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KStemFilterFactory_create(t_KStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_KStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_KStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KStemFilterFactory, t_KStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, KStemFilterFactory, t_KStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_KStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(KStemFilterFactory), module, "KStemFilterFactory", 0);
          }

          void t_KStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KStemFilterFactory).tp_dict, "class_", make_descriptor(KStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_KStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_KStemFilterFactory::wrap_Object(KStemFilterFactory(((t_KStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_KStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KStemFilterFactory_init_(t_KStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            KStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = KStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KStemFilterFactory_create(t_KStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(KStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy$MergeException.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy$MergeException::class$ = NULL;
        jmethodID *MergePolicy$MergeException::mids$ = NULL;
        bool MergePolicy$MergeException::live$ = false;

        jclass MergePolicy$MergeException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy$MergeException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_972c7504] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_init$_1f8035c0] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_getDirectory_1f3934bb] = env->getMethodID(cls, "getDirectory", "()Lorg/apache/lucene/store/Directory;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergePolicy$MergeException::MergePolicy$MergeException(const ::java::lang::String & a0, const ::org::apache::lucene::store::Directory & a1) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_972c7504, a0.this$, a1.this$)) {}

        MergePolicy$MergeException::MergePolicy$MergeException(const ::java::lang::Throwable & a0, const ::org::apache::lucene::store::Directory & a1) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_1f8035c0, a0.this$, a1.this$)) {}

        ::org::apache::lucene::store::Directory MergePolicy$MergeException::getDirectory() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDirectory_1f3934bb]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy$MergeException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$MergeException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergePolicy$MergeException_init_(t_MergePolicy$MergeException *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergePolicy$MergeException_getDirectory(t_MergePolicy$MergeException *self);
        static PyObject *t_MergePolicy$MergeException_get__directory(t_MergePolicy$MergeException *self, void *data);
        static PyGetSetDef t_MergePolicy$MergeException__fields_[] = {
          DECLARE_GET_FIELD(t_MergePolicy$MergeException, directory),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergePolicy$MergeException__methods_[] = {
          DECLARE_METHOD(t_MergePolicy$MergeException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$MergeException, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$MergeException, getDirectory, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergePolicy$MergeException, t_MergePolicy$MergeException, ::java::lang::RuntimeException, MergePolicy$MergeException, t_MergePolicy$MergeException_init_, 0, 0, t_MergePolicy$MergeException__fields_, 0, 0);

        void t_MergePolicy$MergeException::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy$MergeException), module, "MergePolicy$MergeException", 0);
        }

        void t_MergePolicy$MergeException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeException).tp_dict, "class_", make_descriptor(MergePolicy$MergeException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeException).tp_dict, "wrapfn_", make_descriptor(t_MergePolicy$MergeException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy$MergeException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy$MergeException::initializeClass, 1)))
            return NULL;
          return t_MergePolicy$MergeException::wrap_Object(MergePolicy$MergeException(((t_MergePolicy$MergeException *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy$MergeException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy$MergeException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergePolicy$MergeException_init_(t_MergePolicy$MergeException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::store::Directory a1((jobject) NULL);
              MergePolicy$MergeException object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = MergePolicy$MergeException(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::Throwable a0((jobject) NULL);
              ::org::apache::lucene::store::Directory a1((jobject) NULL);
              MergePolicy$MergeException object((jobject) NULL);

              if (!parseArgs(args, "kk", ::java::lang::Throwable::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = MergePolicy$MergeException(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MergePolicy$MergeException_getDirectory(t_MergePolicy$MergeException *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_MergePolicy$MergeException_get__directory(t_MergePolicy$MergeException *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanQuery::class$ = NULL;
          jmethodID *SpanQuery::mids$ = NULL;
          bool SpanQuery::live$ = false;

          jclass SpanQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanQuery::SpanQuery() : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Weight SpanQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          ::java::lang::String SpanQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::search::spans::Spans SpanQuery::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanQuery_init_(t_SpanQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanQuery_createWeight(t_SpanQuery *self, PyObject *args);
          static PyObject *t_SpanQuery_getField(t_SpanQuery *self);
          static PyObject *t_SpanQuery_getSpans(t_SpanQuery *self, PyObject *args);
          static PyObject *t_SpanQuery_get__field(t_SpanQuery *self, void *data);
          static PyGetSetDef t_SpanQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanQuery, field),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanQuery__methods_[] = {
            DECLARE_METHOD(t_SpanQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_SpanQuery, getField, METH_NOARGS),
            DECLARE_METHOD(t_SpanQuery, getSpans, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanQuery, t_SpanQuery, ::org::apache::lucene::search::Query, SpanQuery, t_SpanQuery_init_, 0, 0, t_SpanQuery__fields_, 0, 0);

          void t_SpanQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanQuery), module, "SpanQuery", 0);
          }

          void t_SpanQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanQuery).tp_dict, "class_", make_descriptor(SpanQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanQuery::initializeClass, 1)))
              return NULL;
            return t_SpanQuery::wrap_Object(SpanQuery(((t_SpanQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanQuery_init_(t_SpanQuery *self, PyObject *args, PyObject *kwds)
          {
            SpanQuery object((jobject) NULL);

            INT_CALL(object = SpanQuery());
            self->object = object;

            return 0;
          }

          static PyObject *t_SpanQuery_createWeight(t_SpanQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_SpanQuery_getField(t_SpanQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getField());
            return j2p(result);
          }

          static PyObject *t_SpanQuery_getSpans(t_SpanQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getSpans", args);
            return NULL;
          }

          static PyObject *t_SpanQuery_get__field(t_SpanQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/RandomAccessInput.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *IndexInput::class$ = NULL;
        jmethodID *IndexInput::mids$ = NULL;
        bool IndexInput::live$ = false;

        jclass IndexInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/IndexInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clone_4baa952b] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_length_54c6a17a] = env->getMethodID(cls, "length", "()J");
            mids$[mid_randomAccessSlice_27267c8d] = env->getMethodID(cls, "randomAccessSlice", "(JJ)Lorg/apache/lucene/store/RandomAccessInput;");
            mids$[mid_seek_0ee6df2f] = env->getMethodID(cls, "seek", "(J)V");
            mids$[mid_slice_d00c83eb] = env->getMethodID(cls, "slice", "(Ljava/lang/String;JJ)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexInput IndexInput::clone() const
        {
          return IndexInput(env->callObjectMethod(this$, mids$[mid_clone_4baa952b]));
        }

        void IndexInput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jlong IndexInput::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_54c6a17a]);
        }

        jlong IndexInput::length() const
        {
          return env->callLongMethod(this$, mids$[mid_length_54c6a17a]);
        }

        ::org::apache::lucene::store::RandomAccessInput IndexInput::randomAccessSlice(jlong a0, jlong a1) const
        {
          return ::org::apache::lucene::store::RandomAccessInput(env->callObjectMethod(this$, mids$[mid_randomAccessSlice_27267c8d], a0, a1));
        }

        void IndexInput::seek(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seek_0ee6df2f], a0);
        }

        IndexInput IndexInput::slice(const ::java::lang::String & a0, jlong a1, jlong a2) const
        {
          return IndexInput(env->callObjectMethod(this$, mids$[mid_slice_d00c83eb], a0.this$, a1, a2));
        }

        ::java::lang::String IndexInput::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_IndexInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexInput_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexInput_clone(t_IndexInput *self, PyObject *args);
        static PyObject *t_IndexInput_close(t_IndexInput *self);
        static PyObject *t_IndexInput_getFilePointer(t_IndexInput *self);
        static PyObject *t_IndexInput_length(t_IndexInput *self);
        static PyObject *t_IndexInput_randomAccessSlice(t_IndexInput *self, PyObject *args);
        static PyObject *t_IndexInput_seek(t_IndexInput *self, PyObject *arg);
        static PyObject *t_IndexInput_slice(t_IndexInput *self, PyObject *args);
        static PyObject *t_IndexInput_toString(t_IndexInput *self, PyObject *args);
        static PyObject *t_IndexInput_get__filePointer(t_IndexInput *self, void *data);
        static PyGetSetDef t_IndexInput__fields_[] = {
          DECLARE_GET_FIELD(t_IndexInput, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexInput__methods_[] = {
          DECLARE_METHOD(t_IndexInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexInput, clone, METH_VARARGS),
          DECLARE_METHOD(t_IndexInput, close, METH_NOARGS),
          DECLARE_METHOD(t_IndexInput, getFilePointer, METH_NOARGS),
          DECLARE_METHOD(t_IndexInput, length, METH_NOARGS),
          DECLARE_METHOD(t_IndexInput, randomAccessSlice, METH_VARARGS),
          DECLARE_METHOD(t_IndexInput, seek, METH_O),
          DECLARE_METHOD(t_IndexInput, slice, METH_VARARGS),
          DECLARE_METHOD(t_IndexInput, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexInput, t_IndexInput, ::org::apache::lucene::store::DataInput, IndexInput, abstract_init, 0, 0, t_IndexInput__fields_, 0, 0);

        void t_IndexInput::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexInput), module, "IndexInput", 0);
        }

        void t_IndexInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexInput).tp_dict, "class_", make_descriptor(IndexInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexInput).tp_dict, "wrapfn_", make_descriptor(t_IndexInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexInput::initializeClass, 1)))
            return NULL;
          return t_IndexInput::wrap_Object(IndexInput(((t_IndexInput *) arg)->object.this$));
        }
        static PyObject *t_IndexInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexInput_clone(t_IndexInput *self, PyObject *args)
        {
          IndexInput result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexInput), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_IndexInput_close(t_IndexInput *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexInput_getFilePointer(t_IndexInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexInput_length(t_IndexInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.length());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexInput_randomAccessSlice(t_IndexInput *self, PyObject *args)
        {
          jlong a0;
          jlong a1;
          ::org::apache::lucene::store::RandomAccessInput result((jobject) NULL);

          if (!parseArgs(args, "JJ", &a0, &a1))
          {
            OBJ_CALL(result = self->object.randomAccessSlice(a0, a1));
            return ::org::apache::lucene::store::t_RandomAccessInput::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "randomAccessSlice", args);
          return NULL;
        }

        static PyObject *t_IndexInput_seek(t_IndexInput *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.seek(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "seek", arg);
          return NULL;
        }

        static PyObject *t_IndexInput_slice(t_IndexInput *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sJJ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.slice(a0, a1, a2));
            return t_IndexInput::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "slice", args);
          return NULL;
        }

        static PyObject *t_IndexInput_toString(t_IndexInput *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(IndexInput), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_IndexInput_get__filePointer(t_IndexInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/ext/Extensions$Pair.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {

          ::java::lang::Class *Extensions$Pair::class$ = NULL;
          jmethodID *Extensions$Pair::mids$ = NULL;
          jfieldID *Extensions$Pair::fids$ = NULL;
          bool Extensions$Pair::live$ = false;

          jclass Extensions$Pair::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/ext/Extensions$Pair");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_466982f2] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;Ljava/lang/Object;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_cud] = env->getFieldID(cls, "cud", "Ljava/lang/Object;");
              fids$[fid_cur] = env->getFieldID(cls, "cur", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Extensions$Pair::Extensions$Pair(const ::java::lang::Object & a0, const ::java::lang::Object & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_466982f2, a0.this$, a1.this$)) {}

          ::java::lang::Object Extensions$Pair::_get_cud() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_cud]));
          }

          ::java::lang::Object Extensions$Pair::_get_cur() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_cur]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {
          static PyObject *t_Extensions$Pair_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Extensions$Pair_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Extensions$Pair_of_(t_Extensions$Pair *self, PyObject *args);
          static int t_Extensions$Pair_init_(t_Extensions$Pair *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Extensions$Pair_get__cud(t_Extensions$Pair *self, void *data);
          static PyObject *t_Extensions$Pair_get__cur(t_Extensions$Pair *self, void *data);

          static PyObject *t_Extensions$Pair_get__parameters_(t_Extensions$Pair *self, void *data);
          static PyGetSetDef t_Extensions$Pair__fields_[] = {
            DECLARE_GET_FIELD(t_Extensions$Pair, cud),
            DECLARE_GET_FIELD(t_Extensions$Pair, cur),
            DECLARE_GET_FIELD(t_Extensions$Pair, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Extensions$Pair__methods_[] = {
            DECLARE_METHOD(t_Extensions$Pair, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Extensions$Pair, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Extensions$Pair, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Extensions$Pair, t_Extensions$Pair, ::java::lang::Object, Extensions$Pair, t_Extensions$Pair_init_, 0, 0, t_Extensions$Pair__fields_, 0, 0);
          PyObject *t_Extensions$Pair::wrap_Object(const Extensions$Pair& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_Extensions$Pair::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Extensions$Pair *self = (t_Extensions$Pair *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_Extensions$Pair::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_Extensions$Pair::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Extensions$Pair *self = (t_Extensions$Pair *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_Extensions$Pair::install(PyObject *module)
          {
            installType(&PY_TYPE(Extensions$Pair), module, "Extensions$Pair", 0);
          }

          void t_Extensions$Pair::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Extensions$Pair).tp_dict, "class_", make_descriptor(Extensions$Pair::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Extensions$Pair).tp_dict, "wrapfn_", make_descriptor(t_Extensions$Pair::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Extensions$Pair).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Extensions$Pair_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Extensions$Pair::initializeClass, 1)))
              return NULL;
            return t_Extensions$Pair::wrap_Object(Extensions$Pair(((t_Extensions$Pair *) arg)->object.this$));
          }
          static PyObject *t_Extensions$Pair_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Extensions$Pair::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Extensions$Pair_of_(t_Extensions$Pair *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Extensions$Pair_init_(t_Extensions$Pair *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            Extensions$Pair object((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              INT_CALL(object = Extensions$Pair(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_Extensions$Pair_get__parameters_(t_Extensions$Pair *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Extensions$Pair_get__cud(t_Extensions$Pair *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_cud());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_Extensions$Pair_get__cur(t_Extensions$Pair *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_cur());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *AtomicReaderContext::class$ = NULL;
        jmethodID *AtomicReaderContext::mids$ = NULL;
        jfieldID *AtomicReaderContext::fids$ = NULL;
        bool AtomicReaderContext::live$ = false;

        jclass AtomicReaderContext::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/AtomicReaderContext");

            mids$ = new jmethodID[max_mid];
            mids$[mid_children_87851566] = env->getMethodID(cls, "children", "()Ljava/util/List;");
            mids$[mid_leaves_87851566] = env->getMethodID(cls, "leaves", "()Ljava/util/List;");
            mids$[mid_reader_dea1bc38] = env->getMethodID(cls, "reader", "()Lorg/apache/lucene/index/AtomicReader;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docBase] = env->getFieldID(cls, "docBase", "I");
            fids$[fid_ord] = env->getFieldID(cls, "ord", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::List AtomicReaderContext::children() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_children_87851566]));
        }

        ::java::util::List AtomicReaderContext::leaves() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_leaves_87851566]));
        }

        ::org::apache::lucene::index::AtomicReader AtomicReaderContext::reader() const
        {
          return ::org::apache::lucene::index::AtomicReader(env->callObjectMethod(this$, mids$[mid_reader_dea1bc38]));
        }

        jint AtomicReaderContext::_get_docBase() const
        {
          return env->getIntField(this$, fids$[fid_docBase]);
        }

        jint AtomicReaderContext::_get_ord() const
        {
          return env->getIntField(this$, fids$[fid_ord]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_AtomicReaderContext_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AtomicReaderContext_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AtomicReaderContext_children(t_AtomicReaderContext *self, PyObject *args);
        static PyObject *t_AtomicReaderContext_leaves(t_AtomicReaderContext *self, PyObject *args);
        static PyObject *t_AtomicReaderContext_reader(t_AtomicReaderContext *self, PyObject *args);
        static PyObject *t_AtomicReaderContext_get__docBase(t_AtomicReaderContext *self, void *data);
        static PyObject *t_AtomicReaderContext_get__ord(t_AtomicReaderContext *self, void *data);

        static PyGetSetDef t_AtomicReaderContext__fields_[] = {
          DECLARE_GET_FIELD(t_AtomicReaderContext, docBase),
          DECLARE_GET_FIELD(t_AtomicReaderContext, ord),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_AtomicReaderContext__methods_[] = {
          DECLARE_METHOD(t_AtomicReaderContext, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AtomicReaderContext, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AtomicReaderContext, children, METH_VARARGS),
          DECLARE_METHOD(t_AtomicReaderContext, leaves, METH_VARARGS),
          DECLARE_METHOD(t_AtomicReaderContext, reader, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AtomicReaderContext, t_AtomicReaderContext, ::org::apache::lucene::index::IndexReaderContext, AtomicReaderContext, abstract_init, 0, 0, t_AtomicReaderContext__fields_, 0, 0);

        void t_AtomicReaderContext::install(PyObject *module)
        {
          installType(&PY_TYPE(AtomicReaderContext), module, "AtomicReaderContext", 0);
        }

        void t_AtomicReaderContext::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AtomicReaderContext).tp_dict, "class_", make_descriptor(AtomicReaderContext::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AtomicReaderContext).tp_dict, "wrapfn_", make_descriptor(t_AtomicReaderContext::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AtomicReaderContext).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AtomicReaderContext_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AtomicReaderContext::initializeClass, 1)))
            return NULL;
          return t_AtomicReaderContext::wrap_Object(AtomicReaderContext(((t_AtomicReaderContext *) arg)->object.this$));
        }
        static PyObject *t_AtomicReaderContext_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AtomicReaderContext::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_AtomicReaderContext_children(t_AtomicReaderContext *self, PyObject *args)
        {
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.children());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(IndexReaderContext));
          }

          return callSuper(&PY_TYPE(AtomicReaderContext), (PyObject *) self, "children", args, 2);
        }

        static PyObject *t_AtomicReaderContext_leaves(t_AtomicReaderContext *self, PyObject *args)
        {
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.leaves());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(AtomicReaderContext));
          }

          return callSuper(&PY_TYPE(AtomicReaderContext), (PyObject *) self, "leaves", args, 2);
        }

        static PyObject *t_AtomicReaderContext_reader(t_AtomicReaderContext *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.reader());
            return ::org::apache::lucene::index::t_AtomicReader::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(AtomicReaderContext), (PyObject *) self, "reader", args, 2);
        }

        static PyObject *t_AtomicReaderContext_get__docBase(t_AtomicReaderContext *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docBase());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_AtomicReaderContext_get__ord(t_AtomicReaderContext *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_ord());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/FreeTextSuggester.h"
#include "java/util/Set.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *FreeTextSuggester::class$ = NULL;
            jmethodID *FreeTextSuggester::mids$ = NULL;
            bool FreeTextSuggester::live$ = false;
            jdouble FreeTextSuggester::ALPHA = (jdouble) 0;
            ::java::lang::String *FreeTextSuggester::CODEC_NAME = NULL;
            jint FreeTextSuggester::DEFAULT_GRAMS = (jint) 0;
            jbyte FreeTextSuggester::DEFAULT_SEPARATOR = (jbyte) 0;
            jint FreeTextSuggester::VERSION_CURRENT = (jint) 0;
            jint FreeTextSuggester::VERSION_START = (jint) 0;

            jclass FreeTextSuggester::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/FreeTextSuggester");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_6a3c5772] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_9c9ed338] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;I)V");
                mids$[mid_init$_942dba41] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;IB)V");
                mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_build_a548a403] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;D)V");
                mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_560b361c] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;I)Ljava/util/List;");
                mids$[mid_lookup_afd51678] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;I)Ljava/util/List;");
                mids$[mid_lookup_8aa7b45d] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;ZI)Ljava/util/List;");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                ALPHA = env->getStaticDoubleField(cls, "ALPHA");
                CODEC_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "CODEC_NAME", "Ljava/lang/String;"));
                DEFAULT_GRAMS = env->getStaticIntField(cls, "DEFAULT_GRAMS");
                DEFAULT_SEPARATOR = env->getStaticByteField(cls, "DEFAULT_SEPARATOR");
                VERSION_CURRENT = env->getStaticIntField(cls, "VERSION_CURRENT");
                VERSION_START = env->getStaticIntField(cls, "VERSION_START");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FreeTextSuggester::FreeTextSuggester(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}

            FreeTextSuggester::FreeTextSuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_6a3c5772, a0.this$, a1.this$)) {}

            FreeTextSuggester::FreeTextSuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1, jint a2) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_9c9ed338, a0.this$, a1.this$, a2)) {}

            FreeTextSuggester::FreeTextSuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1, jint a2, jbyte a3) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_942dba41, a0.this$, a1.this$, a2, a3)) {}

            void FreeTextSuggester::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
            }

            void FreeTextSuggester::build(const ::org::apache::lucene::search::suggest::InputIterator & a0, jdouble a1) const
            {
              env->callVoidMethod(this$, mids$[mid_build_a548a403], a0.this$, a1);
            }

            ::java::lang::Object FreeTextSuggester::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
            }

            jlong FreeTextSuggester::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
            }

            jboolean FreeTextSuggester::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
            }

            ::java::util::List FreeTextSuggester::lookup(const ::java::lang::CharSequence & a0, jint a1) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_560b361c], a0.this$, a1));
            }

            ::java::util::List FreeTextSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jint a2) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_afd51678], a0.this$, a1.this$, a2));
            }

            ::java::util::List FreeTextSuggester::lookup(const ::java::lang::CharSequence & a0, jboolean a1, jint a2) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_8aa7b45d], a0.this$, a1, a2));
            }

            ::java::util::List FreeTextSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            jlong FreeTextSuggester::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            jboolean FreeTextSuggester::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_FreeTextSuggester_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FreeTextSuggester_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FreeTextSuggester_init_(t_FreeTextSuggester *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FreeTextSuggester_build(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_get(t_FreeTextSuggester *self, PyObject *arg);
            static PyObject *t_FreeTextSuggester_getCount(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_load(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_lookup(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_ramBytesUsed(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_store(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_get__count(t_FreeTextSuggester *self, void *data);
            static PyGetSetDef t_FreeTextSuggester__fields_[] = {
              DECLARE_GET_FIELD(t_FreeTextSuggester, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FreeTextSuggester__methods_[] = {
              DECLARE_METHOD(t_FreeTextSuggester, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FreeTextSuggester, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FreeTextSuggester, build, METH_VARARGS),
              DECLARE_METHOD(t_FreeTextSuggester, get, METH_O),
              DECLARE_METHOD(t_FreeTextSuggester, getCount, METH_VARARGS),
              DECLARE_METHOD(t_FreeTextSuggester, load, METH_VARARGS),
              DECLARE_METHOD(t_FreeTextSuggester, lookup, METH_VARARGS),
              DECLARE_METHOD(t_FreeTextSuggester, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_FreeTextSuggester, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FreeTextSuggester, t_FreeTextSuggester, ::org::apache::lucene::search::suggest::Lookup, FreeTextSuggester, t_FreeTextSuggester_init_, 0, 0, t_FreeTextSuggester__fields_, 0, 0);

            void t_FreeTextSuggester::install(PyObject *module)
            {
              installType(&PY_TYPE(FreeTextSuggester), module, "FreeTextSuggester", 0);
            }

            void t_FreeTextSuggester::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "class_", make_descriptor(FreeTextSuggester::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "wrapfn_", make_descriptor(t_FreeTextSuggester::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(FreeTextSuggester::initializeClass);
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "ALPHA", make_descriptor(FreeTextSuggester::ALPHA));
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "CODEC_NAME", make_descriptor(j2p(*FreeTextSuggester::CODEC_NAME)));
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "DEFAULT_GRAMS", make_descriptor(FreeTextSuggester::DEFAULT_GRAMS));
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "DEFAULT_SEPARATOR", make_descriptor(FreeTextSuggester::DEFAULT_SEPARATOR));
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "VERSION_CURRENT", make_descriptor(FreeTextSuggester::VERSION_CURRENT));
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "VERSION_START", make_descriptor(FreeTextSuggester::VERSION_START));
            }

            static PyObject *t_FreeTextSuggester_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FreeTextSuggester::initializeClass, 1)))
                return NULL;
              return t_FreeTextSuggester::wrap_Object(FreeTextSuggester(((t_FreeTextSuggester *) arg)->object.this$));
            }
            static PyObject *t_FreeTextSuggester_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FreeTextSuggester::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FreeTextSuggester_init_(t_FreeTextSuggester *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  FreeTextSuggester object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                  {
                    INT_CALL(object = FreeTextSuggester(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  FreeTextSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = FreeTextSuggester(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 3:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  jint a2;
                  FreeTextSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kkI", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = FreeTextSuggester(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 4:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  jint a2;
                  jbyte a3;
                  FreeTextSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kkIB", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3))
                  {
                    INT_CALL(object = FreeTextSuggester(a0, a1, a2, a3));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FreeTextSuggester_build(t_FreeTextSuggester *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
                  {
                    OBJ_CALL(self->object.build(a0));
                    Py_RETURN_NONE;
                  }
                }
                break;
               case 2:
                {
                  ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);
                  jdouble a1;

                  if (!parseArgs(args, "kD", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0, &a1))
                  {
                    OBJ_CALL(self->object.build(a0, a1));
                    Py_RETURN_NONE;
                  }
                }
              }

              return callSuper(&PY_TYPE(FreeTextSuggester), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_FreeTextSuggester_get(t_FreeTextSuggester *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_FreeTextSuggester_getCount(t_FreeTextSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(FreeTextSuggester), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_FreeTextSuggester_load(t_FreeTextSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(FreeTextSuggester), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_FreeTextSuggester_lookup(t_FreeTextSuggester *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 2:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  jint a1;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                break;
               case 3:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jint a2;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  jboolean a1;
                  jint a2;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OZI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                break;
               case 4:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jboolean a2;
                  jint a3;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
              }

              return callSuper(&PY_TYPE(FreeTextSuggester), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_FreeTextSuggester_ramBytesUsed(t_FreeTextSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(FreeTextSuggester), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_FreeTextSuggester_store(t_FreeTextSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(FreeTextSuggester), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_FreeTextSuggester_get__count(t_FreeTextSuggester *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchMinimalStemmer::class$ = NULL;
          jmethodID *FrenchMinimalStemmer::mids$ = NULL;
          bool FrenchMinimalStemmer::live$ = false;

          jclass FrenchMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchMinimalStemmer::FrenchMinimalStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint FrenchMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchMinimalStemmer_init_(t_FrenchMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchMinimalStemmer_stem(t_FrenchMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_FrenchMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_FrenchMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchMinimalStemmer, t_FrenchMinimalStemmer, ::java::lang::Object, FrenchMinimalStemmer, t_FrenchMinimalStemmer_init_, 0, 0, 0, 0, 0);

          void t_FrenchMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchMinimalStemmer), module, "FrenchMinimalStemmer", 0);
          }

          void t_FrenchMinimalStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemmer).tp_dict, "class_", make_descriptor(FrenchMinimalStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemmer).tp_dict, "wrapfn_", make_descriptor(t_FrenchMinimalStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_FrenchMinimalStemmer::wrap_Object(FrenchMinimalStemmer(((t_FrenchMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_FrenchMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchMinimalStemmer_init_(t_FrenchMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            FrenchMinimalStemmer object((jobject) NULL);

            INT_CALL(object = FrenchMinimalStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_FrenchMinimalStemmer_stem(t_FrenchMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/ClasspathResourceLoader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/lang/ClassLoader.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *ClasspathResourceLoader::class$ = NULL;
          jmethodID *ClasspathResourceLoader::mids$ = NULL;
          bool ClasspathResourceLoader::live$ = false;

          jclass ClasspathResourceLoader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/ClasspathResourceLoader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_a5deaff4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Class;)V");
              mids$[mid_init$_9110048d] = env->getMethodID(cls, "<init>", "(Ljava/lang/ClassLoader;)V");
              mids$[mid_findClass_4aee1c89] = env->getMethodID(cls, "findClass", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Class;");
              mids$[mid_newInstance_61899367] = env->getMethodID(cls, "newInstance", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;");
              mids$[mid_openResource_222e59eb] = env->getMethodID(cls, "openResource", "(Ljava/lang/String;)Ljava/io/InputStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClasspathResourceLoader::ClasspathResourceLoader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ClasspathResourceLoader::ClasspathResourceLoader(const ::java::lang::Class & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a5deaff4, a0.this$)) {}

          ClasspathResourceLoader::ClasspathResourceLoader(const ::java::lang::ClassLoader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9110048d, a0.this$)) {}

          ::java::lang::Class ClasspathResourceLoader::findClass(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_findClass_4aee1c89], a0.this$, a1.this$));
          }

          ::java::lang::Object ClasspathResourceLoader::newInstance(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_newInstance_61899367], a0.this$, a1.this$));
          }

          ::java::io::InputStream ClasspathResourceLoader::openResource(const ::java::lang::String & a0) const
          {
            return ::java::io::InputStream(env->callObjectMethod(this$, mids$[mid_openResource_222e59eb], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_ClasspathResourceLoader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClasspathResourceLoader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClasspathResourceLoader_init_(t_ClasspathResourceLoader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClasspathResourceLoader_findClass(t_ClasspathResourceLoader *self, PyObject *args);
          static PyObject *t_ClasspathResourceLoader_newInstance(t_ClasspathResourceLoader *self, PyObject *args);
          static PyObject *t_ClasspathResourceLoader_openResource(t_ClasspathResourceLoader *self, PyObject *arg);

          static PyMethodDef t_ClasspathResourceLoader__methods_[] = {
            DECLARE_METHOD(t_ClasspathResourceLoader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClasspathResourceLoader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClasspathResourceLoader, findClass, METH_VARARGS),
            DECLARE_METHOD(t_ClasspathResourceLoader, newInstance, METH_VARARGS),
            DECLARE_METHOD(t_ClasspathResourceLoader, openResource, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ClasspathResourceLoader, t_ClasspathResourceLoader, ::java::lang::Object, ClasspathResourceLoader, t_ClasspathResourceLoader_init_, 0, 0, 0, 0, 0);

          void t_ClasspathResourceLoader::install(PyObject *module)
          {
            installType(&PY_TYPE(ClasspathResourceLoader), module, "ClasspathResourceLoader", 0);
          }

          void t_ClasspathResourceLoader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ClasspathResourceLoader).tp_dict, "class_", make_descriptor(ClasspathResourceLoader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ClasspathResourceLoader).tp_dict, "wrapfn_", make_descriptor(t_ClasspathResourceLoader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ClasspathResourceLoader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ClasspathResourceLoader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClasspathResourceLoader::initializeClass, 1)))
              return NULL;
            return t_ClasspathResourceLoader::wrap_Object(ClasspathResourceLoader(((t_ClasspathResourceLoader *) arg)->object.this$));
          }
          static PyObject *t_ClasspathResourceLoader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClasspathResourceLoader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClasspathResourceLoader_init_(t_ClasspathResourceLoader *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ClasspathResourceLoader object((jobject) NULL);

                INT_CALL(object = ClasspathResourceLoader());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::lang::Class a0((jobject) NULL);
                PyTypeObject **p0;
                ClasspathResourceLoader object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
                {
                  INT_CALL(object = ClasspathResourceLoader(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::ClassLoader a0((jobject) NULL);
                ClasspathResourceLoader object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::lang::ClassLoader::initializeClass, &a0))
                {
                  INT_CALL(object = ClasspathResourceLoader(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClasspathResourceLoader_findClass(t_ClasspathResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Class result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.findClass(a0, a1));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "findClass", args);
            return NULL;
          }

          static PyObject *t_ClasspathResourceLoader_newInstance(t_ClasspathResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.newInstance(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "newInstance", args);
            return NULL;
          }

          static PyObject *t_ClasspathResourceLoader_openResource(t_ClasspathResourceLoader *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::InputStream result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.openResource(a0));
              return ::java::io::t_InputStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "openResource", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/FloatTaxonomyFacets.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/lang/String.h"
#include "java/lang/Number.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *FloatTaxonomyFacets::class$ = NULL;
          jmethodID *FloatTaxonomyFacets::mids$ = NULL;
          bool FloatTaxonomyFacets::live$ = false;

          jclass FloatTaxonomyFacets::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/FloatTaxonomyFacets");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getSpecificValue_8ecbcac9] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
              mids$[mid_getTopChildren_37e8c044] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");
              mids$[mid_rollup_54c6a166] = env->getMethodID(cls, "rollup", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Number FloatTaxonomyFacets::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_8ecbcac9], a0.this$, a1.this$));
          }

          ::org::apache::lucene::facet::FacetResult FloatTaxonomyFacets::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
          {
            return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_37e8c044], a0, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_FloatTaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatTaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatTaxonomyFacets_getSpecificValue(t_FloatTaxonomyFacets *self, PyObject *args);
          static PyObject *t_FloatTaxonomyFacets_getTopChildren(t_FloatTaxonomyFacets *self, PyObject *args);

          static PyMethodDef t_FloatTaxonomyFacets__methods_[] = {
            DECLARE_METHOD(t_FloatTaxonomyFacets, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatTaxonomyFacets, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatTaxonomyFacets, getSpecificValue, METH_VARARGS),
            DECLARE_METHOD(t_FloatTaxonomyFacets, getTopChildren, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FloatTaxonomyFacets, t_FloatTaxonomyFacets, ::org::apache::lucene::facet::taxonomy::TaxonomyFacets, FloatTaxonomyFacets, abstract_init, 0, 0, 0, 0, 0);

          void t_FloatTaxonomyFacets::install(PyObject *module)
          {
            installType(&PY_TYPE(FloatTaxonomyFacets), module, "FloatTaxonomyFacets", 0);
          }

          void t_FloatTaxonomyFacets::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FloatTaxonomyFacets).tp_dict, "class_", make_descriptor(FloatTaxonomyFacets::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FloatTaxonomyFacets).tp_dict, "wrapfn_", make_descriptor(t_FloatTaxonomyFacets::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FloatTaxonomyFacets).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FloatTaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FloatTaxonomyFacets::initializeClass, 1)))
              return NULL;
            return t_FloatTaxonomyFacets::wrap_Object(FloatTaxonomyFacets(((t_FloatTaxonomyFacets *) arg)->object.this$));
          }
          static PyObject *t_FloatTaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FloatTaxonomyFacets::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FloatTaxonomyFacets_getSpecificValue(t_FloatTaxonomyFacets *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::java::lang::Number result((jobject) NULL);

            if (!parseArgs(args, "s[s", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
              return ::java::lang::t_Number::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FloatTaxonomyFacets), (PyObject *) self, "getSpecificValue", args, 2);
          }

          static PyObject *t_FloatTaxonomyFacets_getTopChildren(t_FloatTaxonomyFacets *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

            if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
              return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FloatTaxonomyFacets), (PyObject *) self, "getTopChildren", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/queryparser/classic/PythonMultiFieldQueryParser.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "org/apache/lucene/util/Version.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *PythonMultiFieldQueryParser::class$ = NULL;
          jmethodID *PythonMultiFieldQueryParser::mids$ = NULL;
          bool PythonMultiFieldQueryParser::live$ = false;

          jclass PythonMultiFieldQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/queryparser/classic/PythonMultiFieldQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_822fc5c3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;[Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_getBooleanQuery_3d190f1c] = env->getMethodID(cls, "getBooleanQuery", "(Ljava/util/List;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_bd696f55] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_quoted_bd696f55] = env->getMethodID(cls, "getFieldQuery_quoted", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_quoted_super_bd696f55] = env->getMethodID(cls, "getFieldQuery_quoted_super", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_slop_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery_slop", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_slop_super_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery_slop_super", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFuzzyQuery_45995161] = env->getMethodID(cls, "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
              mids$[mid_getPrefixQuery_38d6e77e] = env->getMethodID(cls, "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRangeQuery_75fd45b6] = env->getMethodID(cls, "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_getWildcardQuery_38d6e77e] = env->getMethodID(cls, "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonMultiFieldQueryParser::PythonMultiFieldQueryParser(const ::org::apache::lucene::util::Version & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser(env->newObject(initializeClass, &mids$, mid_init$_822fc5c3, a0.this$, a1.this$, a2.this$)) {}

          void PythonMultiFieldQueryParser::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getBooleanQuery(const ::java::util::List & a0, jboolean a1) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getBooleanQuery_3d190f1c], a0.this$, a1));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getFieldQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jboolean a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_bd696f55], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getFieldQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jint a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_c7c8d9a8], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getFieldQuery_quoted_super(const ::java::lang::String & a0, const ::java::lang::String & a1, jboolean a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_quoted_super_bd696f55], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getFieldQuery_slop_super(const ::java::lang::String & a0, const ::java::lang::String & a1, jint a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_slop_super_c7c8d9a8], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getFuzzyQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mids$[::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mid_getFuzzyQuery_45995161], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getPrefixQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mids$[::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mid_getPrefixQuery_38d6e77e], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getRangeQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mids$[::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mid_getRangeQuery_75fd45b6], a0.this$, a1.this$, a2.this$, a3, a4));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getWildcardQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mids$[::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mid_getWildcardQuery_38d6e77e], a0.this$, a1.this$));
          }

          jlong PythonMultiFieldQueryParser::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
          }

          void PythonMultiFieldQueryParser::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_PythonMultiFieldQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonMultiFieldQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonMultiFieldQueryParser_init_(t_PythonMultiFieldQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonMultiFieldQueryParser_finalize(t_PythonMultiFieldQueryParser *self);
          static PyObject *t_PythonMultiFieldQueryParser_getBooleanQuery(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery_quoted_super(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery_slop_super(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getFuzzyQuery(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getPrefixQuery(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getRangeQuery(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getWildcardQuery(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_pythonExtension(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getBooleanQuery0(JNIEnv *jenv, jobject jobj, jobject a0, jboolean a1);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getFieldQuery_quoted1(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jboolean a2);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getFieldQuery_slop2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jint a2);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getFuzzyQuery3(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jfloat a2);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getPrefixQuery4(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getRangeQuery5(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jobject a2, jboolean a3, jboolean a4);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getWildcardQuery6(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static void JNICALL t_PythonMultiFieldQueryParser_pythonDecRef7(JNIEnv *jenv, jobject jobj);
          static PyObject *t_PythonMultiFieldQueryParser_get__self(t_PythonMultiFieldQueryParser *self, void *data);
          static PyGetSetDef t_PythonMultiFieldQueryParser__fields_[] = {
            DECLARE_GET_FIELD(t_PythonMultiFieldQueryParser, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonMultiFieldQueryParser__methods_[] = {
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getBooleanQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getFieldQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getFieldQuery_quoted_super, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getFieldQuery_slop_super, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getFuzzyQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getPrefixQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getRangeQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getWildcardQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, pythonExtension, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PythonMultiFieldQueryParser, t_PythonMultiFieldQueryParser, ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser, PythonMultiFieldQueryParser, t_PythonMultiFieldQueryParser_init_, 0, 0, t_PythonMultiFieldQueryParser__fields_, 0, 0);

          void t_PythonMultiFieldQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonMultiFieldQueryParser), module, "PythonMultiFieldQueryParser", 1);
          }

          void t_PythonMultiFieldQueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PythonMultiFieldQueryParser).tp_dict, "class_", make_descriptor(PythonMultiFieldQueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PythonMultiFieldQueryParser).tp_dict, "wrapfn_", make_descriptor(t_PythonMultiFieldQueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PythonMultiFieldQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonMultiFieldQueryParser::initializeClass);
            JNINativeMethod methods[] = {
              { "getBooleanQuery", "(Ljava/util/List;Z)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getBooleanQuery0 },
              { "getFieldQuery_quoted", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getFieldQuery_quoted1 },
              { "getFieldQuery_slop", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getFieldQuery_slop2 },
              { "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getFuzzyQuery3 },
              { "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getPrefixQuery4 },
              { "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getRangeQuery5 },
              { "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getWildcardQuery6 },
              { "pythonDecRef", "()V", (void *) t_PythonMultiFieldQueryParser_pythonDecRef7 },
            };
            env->registerNatives(cls, methods, 8);
          }

          static PyObject *t_PythonMultiFieldQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonMultiFieldQueryParser::initializeClass, 1)))
              return NULL;
            return t_PythonMultiFieldQueryParser::wrap_Object(PythonMultiFieldQueryParser(((t_PythonMultiFieldQueryParser *) arg)->object.this$));
          }
          static PyObject *t_PythonMultiFieldQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonMultiFieldQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonMultiFieldQueryParser_init_(t_PythonMultiFieldQueryParser *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
            PythonMultiFieldQueryParser object((jobject) NULL);

            if (!parseArgs(args, "K[sk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
            {
              INT_CALL(object = PythonMultiFieldQueryParser(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonMultiFieldQueryParser_finalize(t_PythonMultiFieldQueryParser *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getBooleanQuery(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean a1;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "KZ", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
            {
              OBJ_CALL(result = self->object.getBooleanQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getBooleanQuery", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jboolean a2;
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "ssZ", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0, a1, a2));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jint a2;
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "ssI", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0, a1, a2));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery_quoted_super(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jboolean a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssZ", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFieldQuery_quoted_super(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery_quoted_super", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery_slop_super(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssI", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFieldQuery_slop_super(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery_slop_super", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getFuzzyQuery(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssF", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFuzzyQuery(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFuzzyQuery", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getPrefixQuery(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getPrefixQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPrefixQuery", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getRangeQuery(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            jboolean a4;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "sssZZ", &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.getRangeQuery(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getRangeQuery", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getWildcardQuery(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getWildcardQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getWildcardQuery", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_pythonExtension(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getBooleanQuery0(JNIEnv *jenv, jobject jobj, jobject a0, jboolean a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = ::java::util::t_List::wrap_Object(::java::util::List(a0));
            PyObject *o1 = (a1 ? Py_True : Py_False);
            PyObject *result = PyObject_CallMethod(obj, "getBooleanQuery", "OO", o0, o1);
            Py_DECREF(o0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getBooleanQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getFieldQuery_quoted1(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jboolean a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *o2 = (a2 ? Py_True : Py_False);
            PyObject *result = PyObject_CallMethod(obj, "getFieldQuery_quoted", "OOO", o0, o1, o2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFieldQuery_quoted", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getFieldQuery_slop2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jint a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getFieldQuery_slop", "OOi", o0, o1, (int) a2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFieldQuery_slop", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getFuzzyQuery3(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jfloat a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getFuzzyQuery", "OOf", o0, o1, (float) a2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFuzzyQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getPrefixQuery4(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getPrefixQuery", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getPrefixQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getRangeQuery5(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jobject a2, jboolean a3, jboolean a4)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *o2 = env->fromJString((jstring) a2, 0);
            PyObject *o3 = (a3 ? Py_True : Py_False);
            PyObject *o4 = (a4 ? Py_True : Py_False);
            PyObject *result = PyObject_CallMethod(obj, "getRangeQuery", "OOOOO", o0, o1, o2, o3, o4);
            Py_DECREF(o0);
            Py_DECREF(o1);
            Py_DECREF(o2);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getRangeQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getWildcardQuery6(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getWildcardQuery", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getWildcardQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static void JNICALL t_PythonMultiFieldQueryParser_pythonDecRef7(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static PyObject *t_PythonMultiFieldQueryParser_get__self(t_PythonMultiFieldQueryParser *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/function/FunctionFirstPassGroupingCollector.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {

            ::java::lang::Class *FunctionFirstPassGroupingCollector::class$ = NULL;
            jmethodID *FunctionFirstPassGroupingCollector::mids$ = NULL;
            bool FunctionFirstPassGroupingCollector::live$ = false;

            jclass FunctionFirstPassGroupingCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/function/FunctionFirstPassGroupingCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ef44e36a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Ljava/util/Map;Lorg/apache/lucene/search/Sort;I)V");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
                mids$[mid_getDocGroupValue_5767061f] = env->getMethodID(cls, "getDocGroupValue", "(I)Lorg/apache/lucene/util/mutable/MutableValue;");
                mids$[mid_copyDocGroupValue_25e3929d] = env->getMethodID(cls, "copyDocGroupValue", "(Lorg/apache/lucene/util/mutable/MutableValue;Lorg/apache/lucene/util/mutable/MutableValue;)Lorg/apache/lucene/util/mutable/MutableValue;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FunctionFirstPassGroupingCollector::FunctionFirstPassGroupingCollector(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::java::util::Map & a1, const ::org::apache::lucene::search::Sort & a2, jint a3) : ::org::apache::lucene::search::grouping::AbstractFirstPassGroupingCollector(env->newObject(initializeClass, &mids$, mid_init$_ef44e36a, a0.this$, a1.this$, a2.this$, a3)) {}

            void FunctionFirstPassGroupingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {
            static PyObject *t_FunctionFirstPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionFirstPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionFirstPassGroupingCollector_of_(t_FunctionFirstPassGroupingCollector *self, PyObject *args);
            static int t_FunctionFirstPassGroupingCollector_init_(t_FunctionFirstPassGroupingCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FunctionFirstPassGroupingCollector_setNextReader(t_FunctionFirstPassGroupingCollector *self, PyObject *args);
            static int t_FunctionFirstPassGroupingCollector_set__nextReader(t_FunctionFirstPassGroupingCollector *self, PyObject *arg, void *data);
            static PyObject *t_FunctionFirstPassGroupingCollector_get__parameters_(t_FunctionFirstPassGroupingCollector *self, void *data);
            static PyGetSetDef t_FunctionFirstPassGroupingCollector__fields_[] = {
              DECLARE_SET_FIELD(t_FunctionFirstPassGroupingCollector, nextReader),
              DECLARE_GET_FIELD(t_FunctionFirstPassGroupingCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FunctionFirstPassGroupingCollector__methods_[] = {
              DECLARE_METHOD(t_FunctionFirstPassGroupingCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionFirstPassGroupingCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionFirstPassGroupingCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_FunctionFirstPassGroupingCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FunctionFirstPassGroupingCollector, t_FunctionFirstPassGroupingCollector, ::org::apache::lucene::search::grouping::AbstractFirstPassGroupingCollector, FunctionFirstPassGroupingCollector, t_FunctionFirstPassGroupingCollector_init_, 0, 0, t_FunctionFirstPassGroupingCollector__fields_, 0, 0);
            PyObject *t_FunctionFirstPassGroupingCollector::wrap_Object(const FunctionFirstPassGroupingCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionFirstPassGroupingCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionFirstPassGroupingCollector *self = (t_FunctionFirstPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FunctionFirstPassGroupingCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionFirstPassGroupingCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionFirstPassGroupingCollector *self = (t_FunctionFirstPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FunctionFirstPassGroupingCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(FunctionFirstPassGroupingCollector), module, "FunctionFirstPassGroupingCollector", 0);
            }

            void t_FunctionFirstPassGroupingCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FunctionFirstPassGroupingCollector).tp_dict, "class_", make_descriptor(FunctionFirstPassGroupingCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FunctionFirstPassGroupingCollector).tp_dict, "wrapfn_", make_descriptor(t_FunctionFirstPassGroupingCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FunctionFirstPassGroupingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FunctionFirstPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FunctionFirstPassGroupingCollector::initializeClass, 1)))
                return NULL;
              return t_FunctionFirstPassGroupingCollector::wrap_Object(FunctionFirstPassGroupingCollector(((t_FunctionFirstPassGroupingCollector *) arg)->object.this$));
            }
            static PyObject *t_FunctionFirstPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FunctionFirstPassGroupingCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FunctionFirstPassGroupingCollector_of_(t_FunctionFirstPassGroupingCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_FunctionFirstPassGroupingCollector_init_(t_FunctionFirstPassGroupingCollector *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::java::util::Map a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::search::Sort a2((jobject) NULL);
              jint a3;
              FunctionFirstPassGroupingCollector object((jobject) NULL);

              if (!parseArgs(args, "kKkI", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_, &a2, &a3))
              {
                INT_CALL(object = FunctionFirstPassGroupingCollector(a0, a1, a2, a3));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::util::mutable$::PY_TYPE(MutableValue);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FunctionFirstPassGroupingCollector_setNextReader(t_FunctionFirstPassGroupingCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionFirstPassGroupingCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_FunctionFirstPassGroupingCollector_get__parameters_(t_FunctionFirstPassGroupingCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static int t_FunctionFirstPassGroupingCollector_set__nextReader(t_FunctionFirstPassGroupingCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/CorePlusExtensionsParser.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/classic/QueryParser.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *CorePlusExtensionsParser::class$ = NULL;
          jmethodID *CorePlusExtensionsParser::mids$ = NULL;
          bool CorePlusExtensionsParser::live$ = false;

          jclass CorePlusExtensionsParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/CorePlusExtensionsParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_64322899] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/queryparser/classic/QueryParser;)V");
              mids$[mid_init$_d77cc89a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CorePlusExtensionsParser::CorePlusExtensionsParser(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::queryparser::classic::QueryParser & a1) : ::org::apache::lucene::queryparser::xml::CoreParser(env->newObject(initializeClass, &mids$, mid_init$_64322899, a0.this$, a1.this$)) {}

          CorePlusExtensionsParser::CorePlusExtensionsParser(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::queryparser::xml::CoreParser(env->newObject(initializeClass, &mids$, mid_init$_d77cc89a, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_CorePlusExtensionsParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CorePlusExtensionsParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CorePlusExtensionsParser_init_(t_CorePlusExtensionsParser *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_CorePlusExtensionsParser__methods_[] = {
            DECLARE_METHOD(t_CorePlusExtensionsParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CorePlusExtensionsParser, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CorePlusExtensionsParser, t_CorePlusExtensionsParser, ::org::apache::lucene::queryparser::xml::CoreParser, CorePlusExtensionsParser, t_CorePlusExtensionsParser_init_, 0, 0, 0, 0, 0);

          void t_CorePlusExtensionsParser::install(PyObject *module)
          {
            installType(&PY_TYPE(CorePlusExtensionsParser), module, "CorePlusExtensionsParser", 0);
          }

          void t_CorePlusExtensionsParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CorePlusExtensionsParser).tp_dict, "class_", make_descriptor(CorePlusExtensionsParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CorePlusExtensionsParser).tp_dict, "wrapfn_", make_descriptor(t_CorePlusExtensionsParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CorePlusExtensionsParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CorePlusExtensionsParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CorePlusExtensionsParser::initializeClass, 1)))
              return NULL;
            return t_CorePlusExtensionsParser::wrap_Object(CorePlusExtensionsParser(((t_CorePlusExtensionsParser *) arg)->object.this$));
          }
          static PyObject *t_CorePlusExtensionsParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CorePlusExtensionsParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CorePlusExtensionsParser_init_(t_CorePlusExtensionsParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::org::apache::lucene::queryparser::classic::QueryParser a1((jobject) NULL);
                CorePlusExtensionsParser object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::queryparser::classic::QueryParser::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CorePlusExtensionsParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                CorePlusExtensionsParser object((jobject) NULL);

                if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CorePlusExtensionsParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SynonymFilterFactory.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/util/Map.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SynonymFilterFactory::class$ = NULL;
          jmethodID *SynonymFilterFactory::mids$ = NULL;
          bool SynonymFilterFactory::live$ = false;

          jclass SynonymFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SynonymFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SynonymFilterFactory::SynonymFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream SynonymFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          void SynonymFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SynonymFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SynonymFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SynonymFilterFactory_init_(t_SynonymFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SynonymFilterFactory_create(t_SynonymFilterFactory *self, PyObject *args);
          static PyObject *t_SynonymFilterFactory_inform(t_SynonymFilterFactory *self, PyObject *arg);

          static PyMethodDef t_SynonymFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SynonymFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_SynonymFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SynonymFilterFactory, t_SynonymFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, SynonymFilterFactory, t_SynonymFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_SynonymFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SynonymFilterFactory), module, "SynonymFilterFactory", 0);
          }

          void t_SynonymFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SynonymFilterFactory).tp_dict, "class_", make_descriptor(SynonymFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SynonymFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_SynonymFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SynonymFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SynonymFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SynonymFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SynonymFilterFactory::wrap_Object(SynonymFilterFactory(((t_SynonymFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SynonymFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SynonymFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SynonymFilterFactory_init_(t_SynonymFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SynonymFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SynonymFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SynonymFilterFactory_create(t_SynonymFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SynonymFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_SynonymFilterFactory_inform(t_SynonymFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/AbstractRangeQueryNode.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/RangeQueryNode.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *AbstractRangeQueryNode::class$ = NULL;
              jmethodID *AbstractRangeQueryNode::mids$ = NULL;
              bool AbstractRangeQueryNode::live$ = false;

              jclass AbstractRangeQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/AbstractRangeQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getLowerBound_2906e52b] = env->getMethodID(cls, "getLowerBound", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;");
                  mids$[mid_getUpperBound_2906e52b] = env->getMethodID(cls, "getUpperBound", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;");
                  mids$[mid_isLowerInclusive_54c6a16a] = env->getMethodID(cls, "isLowerInclusive", "()Z");
                  mids$[mid_isUpperInclusive_54c6a16a] = env->getMethodID(cls, "isUpperInclusive", "()Z");
                  mids$[mid_setBounds_b72fdc1c] = env->getMethodID(cls, "setBounds", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;ZZ)V");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::CharSequence AbstractRangeQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode AbstractRangeQueryNode::getLowerBound() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode(env->callObjectMethod(this$, mids$[mid_getLowerBound_2906e52b]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode AbstractRangeQueryNode::getUpperBound() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode(env->callObjectMethod(this$, mids$[mid_getUpperBound_2906e52b]));
              }

              jboolean AbstractRangeQueryNode::isLowerInclusive() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isLowerInclusive_54c6a16a]);
              }

              jboolean AbstractRangeQueryNode::isUpperInclusive() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isUpperInclusive_54c6a16a]);
              }

              void AbstractRangeQueryNode::setBounds(const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode & a0, const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode & a1, jboolean a2, jboolean a3) const
              {
                env->callVoidMethod(this$, mids$[mid_setBounds_b72fdc1c], a0.this$, a1.this$, a2, a3);
              }

              void AbstractRangeQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence AbstractRangeQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String AbstractRangeQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_AbstractRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AbstractRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AbstractRangeQueryNode_of_(t_AbstractRangeQueryNode *self, PyObject *args);
              static PyObject *t_AbstractRangeQueryNode_getField(t_AbstractRangeQueryNode *self);
              static PyObject *t_AbstractRangeQueryNode_getLowerBound(t_AbstractRangeQueryNode *self);
              static PyObject *t_AbstractRangeQueryNode_getUpperBound(t_AbstractRangeQueryNode *self);
              static PyObject *t_AbstractRangeQueryNode_isLowerInclusive(t_AbstractRangeQueryNode *self);
              static PyObject *t_AbstractRangeQueryNode_isUpperInclusive(t_AbstractRangeQueryNode *self);
              static PyObject *t_AbstractRangeQueryNode_setBounds(t_AbstractRangeQueryNode *self, PyObject *args);
              static PyObject *t_AbstractRangeQueryNode_setField(t_AbstractRangeQueryNode *self, PyObject *arg);
              static PyObject *t_AbstractRangeQueryNode_toQueryString(t_AbstractRangeQueryNode *self, PyObject *args);
              static PyObject *t_AbstractRangeQueryNode_toString(t_AbstractRangeQueryNode *self, PyObject *args);
              static PyObject *t_AbstractRangeQueryNode_get__field(t_AbstractRangeQueryNode *self, void *data);
              static int t_AbstractRangeQueryNode_set__field(t_AbstractRangeQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_AbstractRangeQueryNode_get__lowerBound(t_AbstractRangeQueryNode *self, void *data);
              static PyObject *t_AbstractRangeQueryNode_get__lowerInclusive(t_AbstractRangeQueryNode *self, void *data);
              static PyObject *t_AbstractRangeQueryNode_get__upperBound(t_AbstractRangeQueryNode *self, void *data);
              static PyObject *t_AbstractRangeQueryNode_get__upperInclusive(t_AbstractRangeQueryNode *self, void *data);
              static PyObject *t_AbstractRangeQueryNode_get__parameters_(t_AbstractRangeQueryNode *self, void *data);
              static PyGetSetDef t_AbstractRangeQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_AbstractRangeQueryNode, field),
                DECLARE_GET_FIELD(t_AbstractRangeQueryNode, lowerBound),
                DECLARE_GET_FIELD(t_AbstractRangeQueryNode, lowerInclusive),
                DECLARE_GET_FIELD(t_AbstractRangeQueryNode, upperBound),
                DECLARE_GET_FIELD(t_AbstractRangeQueryNode, upperInclusive),
                DECLARE_GET_FIELD(t_AbstractRangeQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_AbstractRangeQueryNode__methods_[] = {
                DECLARE_METHOD(t_AbstractRangeQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, of_, METH_VARARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, getLowerBound, METH_NOARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, getUpperBound, METH_NOARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, isLowerInclusive, METH_NOARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, isUpperInclusive, METH_NOARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, setBounds, METH_VARARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, setField, METH_O),
                DECLARE_METHOD(t_AbstractRangeQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(AbstractRangeQueryNode, t_AbstractRangeQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, AbstractRangeQueryNode, abstract_init, 0, 0, t_AbstractRangeQueryNode__fields_, 0, 0);
              PyObject *t_AbstractRangeQueryNode::wrap_Object(const AbstractRangeQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_AbstractRangeQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_AbstractRangeQueryNode *self = (t_AbstractRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_AbstractRangeQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_AbstractRangeQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_AbstractRangeQueryNode *self = (t_AbstractRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_AbstractRangeQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(AbstractRangeQueryNode), module, "AbstractRangeQueryNode", 0);
              }

              void t_AbstractRangeQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(AbstractRangeQueryNode).tp_dict, "class_", make_descriptor(AbstractRangeQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(AbstractRangeQueryNode).tp_dict, "wrapfn_", make_descriptor(t_AbstractRangeQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(AbstractRangeQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AbstractRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AbstractRangeQueryNode::initializeClass, 1)))
                  return NULL;
                return t_AbstractRangeQueryNode::wrap_Object(AbstractRangeQueryNode(((t_AbstractRangeQueryNode *) arg)->object.this$));
              }
              static PyObject *t_AbstractRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AbstractRangeQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_AbstractRangeQueryNode_of_(t_AbstractRangeQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_AbstractRangeQueryNode_getField(t_AbstractRangeQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_AbstractRangeQueryNode_getLowerBound(t_AbstractRangeQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getLowerBound());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(result);
              }

              static PyObject *t_AbstractRangeQueryNode_getUpperBound(t_AbstractRangeQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getUpperBound());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(result);
              }

              static PyObject *t_AbstractRangeQueryNode_isLowerInclusive(t_AbstractRangeQueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isLowerInclusive());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_AbstractRangeQueryNode_isUpperInclusive(t_AbstractRangeQueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isUpperInclusive());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_AbstractRangeQueryNode_setBounds(t_AbstractRangeQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                jboolean a3;

                if (!parseArgs(args, "KKZZ", ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::parameters_, &a1, &p1, ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::parameters_, &a2, &a3))
                {
                  OBJ_CALL(self->object.setBounds(a0, a1, a2, a3));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setBounds", args);
                return NULL;
              }

              static PyObject *t_AbstractRangeQueryNode_setField(t_AbstractRangeQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_AbstractRangeQueryNode_toQueryString(t_AbstractRangeQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(AbstractRangeQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_AbstractRangeQueryNode_toString(t_AbstractRangeQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(AbstractRangeQueryNode), (PyObject *) self, "toString", args, 2);
              }
              static PyObject *t_AbstractRangeQueryNode_get__parameters_(t_AbstractRangeQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }

              static PyObject *t_AbstractRangeQueryNode_get__field(t_AbstractRangeQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_AbstractRangeQueryNode_set__field(t_AbstractRangeQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_AbstractRangeQueryNode_get__lowerBound(t_AbstractRangeQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getLowerBound());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(value);
              }

              static PyObject *t_AbstractRangeQueryNode_get__lowerInclusive(t_AbstractRangeQueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isLowerInclusive());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_AbstractRangeQueryNode_get__upperBound(t_AbstractRangeQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getUpperBound());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(value);
              }

              static PyObject *t_AbstractRangeQueryNode_get__upperInclusive(t_AbstractRangeQueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isUpperInclusive());
                Py_RETURN_BOOL(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/CachedFilterBuilder.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilderFactory.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilderFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *CachedFilterBuilder::class$ = NULL;
            jmethodID *CachedFilterBuilder::mids$ = NULL;
            bool CachedFilterBuilder::live$ = false;

            jclass CachedFilterBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/CachedFilterBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_11d0c47f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/QueryBuilderFactory;Lorg/apache/lucene/queryparser/xml/FilterBuilderFactory;I)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            CachedFilterBuilder::CachedFilterBuilder(const ::org::apache::lucene::queryparser::xml::QueryBuilderFactory & a0, const ::org::apache::lucene::queryparser::xml::FilterBuilderFactory & a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_11d0c47f, a0.this$, a1.this$, a2)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_CachedFilterBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CachedFilterBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_CachedFilterBuilder_init_(t_CachedFilterBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_CachedFilterBuilder__methods_[] = {
              DECLARE_METHOD(t_CachedFilterBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CachedFilterBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(CachedFilterBuilder, t_CachedFilterBuilder, ::java::lang::Object, CachedFilterBuilder, t_CachedFilterBuilder_init_, 0, 0, 0, 0, 0);

            void t_CachedFilterBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(CachedFilterBuilder), module, "CachedFilterBuilder", 0);
            }

            void t_CachedFilterBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(CachedFilterBuilder).tp_dict, "class_", make_descriptor(CachedFilterBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(CachedFilterBuilder).tp_dict, "wrapfn_", make_descriptor(t_CachedFilterBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(CachedFilterBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CachedFilterBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CachedFilterBuilder::initializeClass, 1)))
                return NULL;
              return t_CachedFilterBuilder::wrap_Object(CachedFilterBuilder(((t_CachedFilterBuilder *) arg)->object.this$));
            }
            static PyObject *t_CachedFilterBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CachedFilterBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_CachedFilterBuilder_init_(t_CachedFilterBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::QueryBuilderFactory a0((jobject) NULL);
              ::org::apache::lucene::queryparser::xml::FilterBuilderFactory a1((jobject) NULL);
              jint a2;
              CachedFilterBuilder object((jobject) NULL);

              if (!parseArgs(args, "kkI", ::org::apache::lucene::queryparser::xml::QueryBuilderFactory::initializeClass, ::org::apache::lucene::queryparser::xml::FilterBuilderFactory::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = CachedFilterBuilder(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopTermsRewrite.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopTermsRewrite::class$ = NULL;
        jmethodID *TopTermsRewrite::mids$ = NULL;
        bool TopTermsRewrite::live$ = false;

        jclass TopTermsRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopTermsRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_925c5bbc] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/Query;");
            mids$[mid_getMaxSize_54c6a179] = env->getMethodID(cls, "getMaxSize", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopTermsRewrite::TopTermsRewrite(jint a0) : ::org::apache::lucene::search::TermCollectingRewrite(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        jboolean TopTermsRewrite::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint TopTermsRewrite::getSize() const
        {
          return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
        }

        jint TopTermsRewrite::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query TopTermsRewrite::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_925c5bbc], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopTermsRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopTermsRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopTermsRewrite_of_(t_TopTermsRewrite *self, PyObject *args);
        static int t_TopTermsRewrite_init_(t_TopTermsRewrite *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopTermsRewrite_equals(t_TopTermsRewrite *self, PyObject *args);
        static PyObject *t_TopTermsRewrite_getSize(t_TopTermsRewrite *self);
        static PyObject *t_TopTermsRewrite_hashCode(t_TopTermsRewrite *self, PyObject *args);
        static PyObject *t_TopTermsRewrite_rewrite(t_TopTermsRewrite *self, PyObject *args);
        static PyObject *t_TopTermsRewrite_get__size(t_TopTermsRewrite *self, void *data);
        static PyObject *t_TopTermsRewrite_get__parameters_(t_TopTermsRewrite *self, void *data);
        static PyGetSetDef t_TopTermsRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_TopTermsRewrite, size),
          DECLARE_GET_FIELD(t_TopTermsRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopTermsRewrite__methods_[] = {
          DECLARE_METHOD(t_TopTermsRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopTermsRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopTermsRewrite, of_, METH_VARARGS),
          DECLARE_METHOD(t_TopTermsRewrite, equals, METH_VARARGS),
          DECLARE_METHOD(t_TopTermsRewrite, getSize, METH_NOARGS),
          DECLARE_METHOD(t_TopTermsRewrite, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TopTermsRewrite, rewrite, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopTermsRewrite, t_TopTermsRewrite, ::org::apache::lucene::search::TermCollectingRewrite, TopTermsRewrite, t_TopTermsRewrite_init_, 0, 0, t_TopTermsRewrite__fields_, 0, 0);
        PyObject *t_TopTermsRewrite::wrap_Object(const TopTermsRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopTermsRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopTermsRewrite *self = (t_TopTermsRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopTermsRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopTermsRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopTermsRewrite *self = (t_TopTermsRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopTermsRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(TopTermsRewrite), module, "TopTermsRewrite", 0);
        }

        void t_TopTermsRewrite::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopTermsRewrite).tp_dict, "class_", make_descriptor(TopTermsRewrite::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopTermsRewrite).tp_dict, "wrapfn_", make_descriptor(t_TopTermsRewrite::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopTermsRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopTermsRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopTermsRewrite::initializeClass, 1)))
            return NULL;
          return t_TopTermsRewrite::wrap_Object(TopTermsRewrite(((t_TopTermsRewrite *) arg)->object.this$));
        }
        static PyObject *t_TopTermsRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopTermsRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopTermsRewrite_of_(t_TopTermsRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_TopTermsRewrite_init_(t_TopTermsRewrite *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          TopTermsRewrite object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = TopTermsRewrite(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TopTermsRewrite_equals(t_TopTermsRewrite *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TopTermsRewrite), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TopTermsRewrite_getSize(t_TopTermsRewrite *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getSize());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TopTermsRewrite_hashCode(t_TopTermsRewrite *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(TopTermsRewrite), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TopTermsRewrite_rewrite(t_TopTermsRewrite *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.rewrite(a0, a1));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TopTermsRewrite), (PyObject *) self, "rewrite", args, 2);
        }
        static PyObject *t_TopTermsRewrite_get__parameters_(t_TopTermsRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_TopTermsRewrite_get__size(t_TopTermsRewrite *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getSize());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *FunctionValues$ValueFiller::class$ = NULL;
          jmethodID *FunctionValues$ValueFiller::mids$ = NULL;
          bool FunctionValues$ValueFiller::live$ = false;

          jclass FunctionValues$ValueFiller::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/FunctionValues$ValueFiller");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fillValue_39c7bd3c] = env->getMethodID(cls, "fillValue", "(I)V");
              mids$[mid_getValue_15ab3811] = env->getMethodID(cls, "getValue", "()Lorg/apache/lucene/util/mutable/MutableValue;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FunctionValues$ValueFiller::FunctionValues$ValueFiller() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void FunctionValues$ValueFiller::fillValue(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_fillValue_39c7bd3c], a0);
          }

          ::org::apache::lucene::util::mutable$::MutableValue FunctionValues$ValueFiller::getValue() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_getValue_15ab3811]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_FunctionValues$ValueFiller_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FunctionValues$ValueFiller_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FunctionValues$ValueFiller_init_(t_FunctionValues$ValueFiller *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FunctionValues$ValueFiller_fillValue(t_FunctionValues$ValueFiller *self, PyObject *arg);
          static PyObject *t_FunctionValues$ValueFiller_getValue(t_FunctionValues$ValueFiller *self);
          static PyObject *t_FunctionValues$ValueFiller_get__value(t_FunctionValues$ValueFiller *self, void *data);
          static PyGetSetDef t_FunctionValues$ValueFiller__fields_[] = {
            DECLARE_GET_FIELD(t_FunctionValues$ValueFiller, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FunctionValues$ValueFiller__methods_[] = {
            DECLARE_METHOD(t_FunctionValues$ValueFiller, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionValues$ValueFiller, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionValues$ValueFiller, fillValue, METH_O),
            DECLARE_METHOD(t_FunctionValues$ValueFiller, getValue, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FunctionValues$ValueFiller, t_FunctionValues$ValueFiller, ::java::lang::Object, FunctionValues$ValueFiller, t_FunctionValues$ValueFiller_init_, 0, 0, t_FunctionValues$ValueFiller__fields_, 0, 0);

          void t_FunctionValues$ValueFiller::install(PyObject *module)
          {
            installType(&PY_TYPE(FunctionValues$ValueFiller), module, "FunctionValues$ValueFiller", 0);
          }

          void t_FunctionValues$ValueFiller::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FunctionValues$ValueFiller).tp_dict, "class_", make_descriptor(FunctionValues$ValueFiller::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FunctionValues$ValueFiller).tp_dict, "wrapfn_", make_descriptor(t_FunctionValues$ValueFiller::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FunctionValues$ValueFiller).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FunctionValues$ValueFiller_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FunctionValues$ValueFiller::initializeClass, 1)))
              return NULL;
            return t_FunctionValues$ValueFiller::wrap_Object(FunctionValues$ValueFiller(((t_FunctionValues$ValueFiller *) arg)->object.this$));
          }
          static PyObject *t_FunctionValues$ValueFiller_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FunctionValues$ValueFiller::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FunctionValues$ValueFiller_init_(t_FunctionValues$ValueFiller *self, PyObject *args, PyObject *kwds)
          {
            FunctionValues$ValueFiller object((jobject) NULL);

            INT_CALL(object = FunctionValues$ValueFiller());
            self->object = object;

            return 0;
          }

          static PyObject *t_FunctionValues$ValueFiller_fillValue(t_FunctionValues$ValueFiller *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.fillValue(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "fillValue", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues$ValueFiller_getValue(t_FunctionValues$ValueFiller *self)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);
            OBJ_CALL(result = self->object.getValue());
            return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
          }

          static PyObject *t_FunctionValues$ValueFiller_get__value(t_FunctionValues$ValueFiller *self, void *data)
          {
            ::org::apache::lucene::util::mutable$::MutableValue value((jobject) NULL);
            OBJ_CALL(value = self->object.getValue());
            return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/Range.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *Range::class$ = NULL;
          jmethodID *Range::mids$ = NULL;
          jfieldID *Range::fids$ = NULL;
          bool Range::live$ = false;

          jclass Range::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/Range");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getFilter_f7e0d95b] = env->getMethodID(cls, "getFilter", "(Lorg/apache/lucene/queries/function/ValueSource;)Lorg/apache/lucene/search/Filter;");
              mids$[mid_getFilter_fc904367] = env->getMethodID(cls, "getFilter", "(Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/queries/function/ValueSource;)Lorg/apache/lucene/search/Filter;");
              mids$[mid_failNoMatch_54c6a166] = env->getMethodID(cls, "failNoMatch", "()V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_label] = env->getFieldID(cls, "label", "Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::search::Filter Range::getFilter(const ::org::apache::lucene::queries::function::ValueSource & a0) const
          {
            return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_f7e0d95b], a0.this$));
          }

          ::org::apache::lucene::search::Filter Range::getFilter(const ::org::apache::lucene::search::Filter & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) const
          {
            return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_fc904367], a0.this$, a1.this$));
          }

          ::java::lang::String Range::_get_label() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_label]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_Range_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Range_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Range_getFilter(t_Range *self, PyObject *args);
          static PyObject *t_Range_get__label(t_Range *self, void *data);

          static PyGetSetDef t_Range__fields_[] = {
            DECLARE_GET_FIELD(t_Range, label),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Range__methods_[] = {
            DECLARE_METHOD(t_Range, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Range, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Range, getFilter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Range, t_Range, ::java::lang::Object, Range, abstract_init, 0, 0, t_Range__fields_, 0, 0);

          void t_Range::install(PyObject *module)
          {
            installType(&PY_TYPE(Range), module, "Range", 0);
          }

          void t_Range::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Range).tp_dict, "class_", make_descriptor(Range::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Range).tp_dict, "wrapfn_", make_descriptor(t_Range::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Range).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Range_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Range::initializeClass, 1)))
              return NULL;
            return t_Range::wrap_Object(Range(((t_Range *) arg)->object.this$));
          }
          static PyObject *t_Range_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Range::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Range_getFilter(t_Range *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
                ::org::apache::lucene::search::Filter result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.getFilter(a0));
                  return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::search::Filter a0((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
                ::org::apache::lucene::search::Filter result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.getFilter(a0, a1));
                  return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getFilter", args);
            return NULL;
          }

          static PyObject *t_Range_get__label(t_Range *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_label());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/id/IndonesianStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {

          ::java::lang::Class *IndonesianStemmer::class$ = NULL;
          jmethodID *IndonesianStemmer::mids$ = NULL;
          bool IndonesianStemmer::live$ = false;

          jclass IndonesianStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/id/IndonesianStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_39342af2] = env->getMethodID(cls, "stem", "([CIZ)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndonesianStemmer::IndonesianStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint IndonesianStemmer::stem(const JArray< jchar > & a0, jint a1, jboolean a2) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_39342af2], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {
          static PyObject *t_IndonesianStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndonesianStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndonesianStemmer_init_(t_IndonesianStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndonesianStemmer_stem(t_IndonesianStemmer *self, PyObject *args);

          static PyMethodDef t_IndonesianStemmer__methods_[] = {
            DECLARE_METHOD(t_IndonesianStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndonesianStemmer, t_IndonesianStemmer, ::java::lang::Object, IndonesianStemmer, t_IndonesianStemmer_init_, 0, 0, 0, 0, 0);

          void t_IndonesianStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(IndonesianStemmer), module, "IndonesianStemmer", 0);
          }

          void t_IndonesianStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndonesianStemmer).tp_dict, "class_", make_descriptor(IndonesianStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndonesianStemmer).tp_dict, "wrapfn_", make_descriptor(t_IndonesianStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndonesianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndonesianStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndonesianStemmer::initializeClass, 1)))
              return NULL;
            return t_IndonesianStemmer::wrap_Object(IndonesianStemmer(((t_IndonesianStemmer *) arg)->object.this$));
          }
          static PyObject *t_IndonesianStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndonesianStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndonesianStemmer_init_(t_IndonesianStemmer *self, PyObject *args, PyObject *kwds)
          {
            IndonesianStemmer object((jobject) NULL);

            INT_CALL(object = IndonesianStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_IndonesianStemmer_stem(t_IndonesianStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jboolean a2;
            jint result;

            if (!parseArgs(args, "[CIZ", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.stem(a0, a1, a2));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicNormalizer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicNormalizer::class$ = NULL;
          jmethodID *ArabicNormalizer::mids$ = NULL;
          bool ArabicNormalizer::live$ = false;
          jchar ArabicNormalizer::ALEF = (jchar) 0;
          jchar ArabicNormalizer::ALEF_HAMZA_ABOVE = (jchar) 0;
          jchar ArabicNormalizer::ALEF_HAMZA_BELOW = (jchar) 0;
          jchar ArabicNormalizer::ALEF_MADDA = (jchar) 0;
          jchar ArabicNormalizer::DAMMA = (jchar) 0;
          jchar ArabicNormalizer::DAMMATAN = (jchar) 0;
          jchar ArabicNormalizer::DOTLESS_YEH = (jchar) 0;
          jchar ArabicNormalizer::FATHA = (jchar) 0;
          jchar ArabicNormalizer::FATHATAN = (jchar) 0;
          jchar ArabicNormalizer::HEH = (jchar) 0;
          jchar ArabicNormalizer::KASRA = (jchar) 0;
          jchar ArabicNormalizer::KASRATAN = (jchar) 0;
          jchar ArabicNormalizer::SHADDA = (jchar) 0;
          jchar ArabicNormalizer::SUKUN = (jchar) 0;
          jchar ArabicNormalizer::TATWEEL = (jchar) 0;
          jchar ArabicNormalizer::TEH_MARBUTA = (jchar) 0;
          jchar ArabicNormalizer::YEH = (jchar) 0;

          jclass ArabicNormalizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicNormalizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normalize_ec6430eb] = env->getMethodID(cls, "normalize", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ALEF = env->getStaticCharField(cls, "ALEF");
              ALEF_HAMZA_ABOVE = env->getStaticCharField(cls, "ALEF_HAMZA_ABOVE");
              ALEF_HAMZA_BELOW = env->getStaticCharField(cls, "ALEF_HAMZA_BELOW");
              ALEF_MADDA = env->getStaticCharField(cls, "ALEF_MADDA");
              DAMMA = env->getStaticCharField(cls, "DAMMA");
              DAMMATAN = env->getStaticCharField(cls, "DAMMATAN");
              DOTLESS_YEH = env->getStaticCharField(cls, "DOTLESS_YEH");
              FATHA = env->getStaticCharField(cls, "FATHA");
              FATHATAN = env->getStaticCharField(cls, "FATHATAN");
              HEH = env->getStaticCharField(cls, "HEH");
              KASRA = env->getStaticCharField(cls, "KASRA");
              KASRATAN = env->getStaticCharField(cls, "KASRATAN");
              SHADDA = env->getStaticCharField(cls, "SHADDA");
              SUKUN = env->getStaticCharField(cls, "SUKUN");
              TATWEEL = env->getStaticCharField(cls, "TATWEEL");
              TEH_MARBUTA = env->getStaticCharField(cls, "TEH_MARBUTA");
              YEH = env->getStaticCharField(cls, "YEH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicNormalizer::ArabicNormalizer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint ArabicNormalizer::normalize(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_normalize_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicNormalizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicNormalizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicNormalizer_init_(t_ArabicNormalizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicNormalizer_normalize(t_ArabicNormalizer *self, PyObject *args);

          static PyMethodDef t_ArabicNormalizer__methods_[] = {
            DECLARE_METHOD(t_ArabicNormalizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizer, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicNormalizer, t_ArabicNormalizer, ::java::lang::Object, ArabicNormalizer, t_ArabicNormalizer_init_, 0, 0, 0, 0, 0);

          void t_ArabicNormalizer::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicNormalizer), module, "ArabicNormalizer", 0);
          }

          void t_ArabicNormalizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "class_", make_descriptor(ArabicNormalizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "wrapfn_", make_descriptor(t_ArabicNormalizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ArabicNormalizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "ALEF", make_descriptor(ArabicNormalizer::ALEF));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "ALEF_HAMZA_ABOVE", make_descriptor(ArabicNormalizer::ALEF_HAMZA_ABOVE));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "ALEF_HAMZA_BELOW", make_descriptor(ArabicNormalizer::ALEF_HAMZA_BELOW));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "ALEF_MADDA", make_descriptor(ArabicNormalizer::ALEF_MADDA));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "DAMMA", make_descriptor(ArabicNormalizer::DAMMA));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "DAMMATAN", make_descriptor(ArabicNormalizer::DAMMATAN));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "DOTLESS_YEH", make_descriptor(ArabicNormalizer::DOTLESS_YEH));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "FATHA", make_descriptor(ArabicNormalizer::FATHA));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "FATHATAN", make_descriptor(ArabicNormalizer::FATHATAN));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "HEH", make_descriptor(ArabicNormalizer::HEH));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "KASRA", make_descriptor(ArabicNormalizer::KASRA));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "KASRATAN", make_descriptor(ArabicNormalizer::KASRATAN));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "SHADDA", make_descriptor(ArabicNormalizer::SHADDA));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "SUKUN", make_descriptor(ArabicNormalizer::SUKUN));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "TATWEEL", make_descriptor(ArabicNormalizer::TATWEEL));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "TEH_MARBUTA", make_descriptor(ArabicNormalizer::TEH_MARBUTA));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "YEH", make_descriptor(ArabicNormalizer::YEH));
          }

          static PyObject *t_ArabicNormalizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicNormalizer::initializeClass, 1)))
              return NULL;
            return t_ArabicNormalizer::wrap_Object(ArabicNormalizer(((t_ArabicNormalizer *) arg)->object.this$));
          }
          static PyObject *t_ArabicNormalizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicNormalizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicNormalizer_init_(t_ArabicNormalizer *self, PyObject *args, PyObject *kwds)
          {
            ArabicNormalizer object((jobject) NULL);

            INT_CALL(object = ArabicNormalizer());
            self->object = object;

            return 0;
          }

          static PyObject *t_ArabicNormalizer_normalize(t_ArabicNormalizer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.normalize(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoFormat.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/SegmentInfoReader.h"
#include "org/apache/lucene/codecs/SegmentInfoWriter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {

          ::java::lang::Class *Lucene46SegmentInfoFormat::class$ = NULL;
          jmethodID *Lucene46SegmentInfoFormat::mids$ = NULL;
          bool Lucene46SegmentInfoFormat::live$ = false;
          ::java::lang::String *Lucene46SegmentInfoFormat::SI_EXTENSION = NULL;

          jclass Lucene46SegmentInfoFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getSegmentInfoReader_1e88b6e7] = env->getMethodID(cls, "getSegmentInfoReader", "()Lorg/apache/lucene/codecs/SegmentInfoReader;");
              mids$[mid_getSegmentInfoWriter_2d4ab533] = env->getMethodID(cls, "getSegmentInfoWriter", "()Lorg/apache/lucene/codecs/SegmentInfoWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              SI_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "SI_EXTENSION", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene46SegmentInfoFormat::Lucene46SegmentInfoFormat() : ::org::apache::lucene::codecs::SegmentInfoFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::SegmentInfoReader Lucene46SegmentInfoFormat::getSegmentInfoReader() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoReader(env->callObjectMethod(this$, mids$[mid_getSegmentInfoReader_1e88b6e7]));
          }

          ::org::apache::lucene::codecs::SegmentInfoWriter Lucene46SegmentInfoFormat::getSegmentInfoWriter() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoWriter(env->callObjectMethod(this$, mids$[mid_getSegmentInfoWriter_2d4ab533]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {
          static PyObject *t_Lucene46SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene46SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene46SegmentInfoFormat_init_(t_Lucene46SegmentInfoFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene46SegmentInfoFormat_getSegmentInfoReader(t_Lucene46SegmentInfoFormat *self, PyObject *args);
          static PyObject *t_Lucene46SegmentInfoFormat_getSegmentInfoWriter(t_Lucene46SegmentInfoFormat *self, PyObject *args);
          static PyObject *t_Lucene46SegmentInfoFormat_get__segmentInfoReader(t_Lucene46SegmentInfoFormat *self, void *data);
          static PyObject *t_Lucene46SegmentInfoFormat_get__segmentInfoWriter(t_Lucene46SegmentInfoFormat *self, void *data);
          static PyGetSetDef t_Lucene46SegmentInfoFormat__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene46SegmentInfoFormat, segmentInfoReader),
            DECLARE_GET_FIELD(t_Lucene46SegmentInfoFormat, segmentInfoWriter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene46SegmentInfoFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene46SegmentInfoFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46SegmentInfoFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46SegmentInfoFormat, getSegmentInfoReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46SegmentInfoFormat, getSegmentInfoWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene46SegmentInfoFormat, t_Lucene46SegmentInfoFormat, ::org::apache::lucene::codecs::SegmentInfoFormat, Lucene46SegmentInfoFormat, t_Lucene46SegmentInfoFormat_init_, 0, 0, t_Lucene46SegmentInfoFormat__fields_, 0, 0);

          void t_Lucene46SegmentInfoFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene46SegmentInfoFormat), module, "Lucene46SegmentInfoFormat", 0);
          }

          void t_Lucene46SegmentInfoFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoFormat).tp_dict, "class_", make_descriptor(Lucene46SegmentInfoFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene46SegmentInfoFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene46SegmentInfoFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoFormat).tp_dict, "SI_EXTENSION", make_descriptor(j2p(*Lucene46SegmentInfoFormat::SI_EXTENSION)));
          }

          static PyObject *t_Lucene46SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene46SegmentInfoFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene46SegmentInfoFormat::wrap_Object(Lucene46SegmentInfoFormat(((t_Lucene46SegmentInfoFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene46SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene46SegmentInfoFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene46SegmentInfoFormat_init_(t_Lucene46SegmentInfoFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene46SegmentInfoFormat object((jobject) NULL);

            INT_CALL(object = Lucene46SegmentInfoFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene46SegmentInfoFormat_getSegmentInfoReader(t_Lucene46SegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSegmentInfoReader());
              return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46SegmentInfoFormat), (PyObject *) self, "getSegmentInfoReader", args, 2);
          }

          static PyObject *t_Lucene46SegmentInfoFormat_getSegmentInfoWriter(t_Lucene46SegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoWriter result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSegmentInfoWriter());
              return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46SegmentInfoFormat), (PyObject *) self, "getSegmentInfoWriter", args, 2);
          }

          static PyObject *t_Lucene46SegmentInfoFormat_get__segmentInfoReader(t_Lucene46SegmentInfoFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::SegmentInfoReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getSegmentInfoReader());
            return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(value);
          }

          static PyObject *t_Lucene46SegmentInfoFormat_get__segmentInfoWriter(t_Lucene46SegmentInfoFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::SegmentInfoWriter value((jobject) NULL);
            OBJ_CALL(value = self->object.getSegmentInfoWriter());
            return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianAnalyzer::class$ = NULL;
          jmethodID *NorwegianAnalyzer::mids$ = NULL;
          bool NorwegianAnalyzer::live$ = false;
          ::java::lang::String *NorwegianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass NorwegianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianAnalyzer::NorwegianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          NorwegianAnalyzer::NorwegianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          NorwegianAnalyzer::NorwegianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet NorwegianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianAnalyzer_init_(t_NorwegianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_NorwegianAnalyzer_get__defaultStopSet(t_NorwegianAnalyzer *self, void *data);
          static PyGetSetDef t_NorwegianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_NorwegianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NorwegianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_NorwegianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NorwegianAnalyzer, t_NorwegianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, NorwegianAnalyzer, t_NorwegianAnalyzer_init_, 0, 0, t_NorwegianAnalyzer__fields_, 0, 0);

          void t_NorwegianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianAnalyzer), module, "NorwegianAnalyzer", 0);
          }

          void t_NorwegianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NorwegianAnalyzer).tp_dict, "class_", make_descriptor(NorwegianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NorwegianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_NorwegianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NorwegianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(NorwegianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(NorwegianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*NorwegianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_NorwegianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_NorwegianAnalyzer::wrap_Object(NorwegianAnalyzer(((t_NorwegianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_NorwegianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianAnalyzer_init_(t_NorwegianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                NorwegianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = NorwegianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                NorwegianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = NorwegianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                NorwegianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = NorwegianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::no::NorwegianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_NorwegianAnalyzer_get__defaultStopSet(t_NorwegianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/AppendingPackedLongBuffer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *AppendingPackedLongBuffer::class$ = NULL;
          jmethodID *AppendingPackedLongBuffer::mids$ = NULL;
          bool AppendingPackedLongBuffer::live$ = false;

          jclass AppendingPackedLongBuffer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/AppendingPackedLongBuffer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_init$_a74e6883] = env->getMethodID(cls, "<init>", "(IIF)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AppendingPackedLongBuffer::AppendingPackedLongBuffer() : ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          AppendingPackedLongBuffer::AppendingPackedLongBuffer(jfloat a0) : ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          AppendingPackedLongBuffer::AppendingPackedLongBuffer(jint a0, jint a1, jfloat a2) : ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer(env->newObject(initializeClass, &mids$, mid_init$_a74e6883, a0, a1, a2)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_AppendingPackedLongBuffer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AppendingPackedLongBuffer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AppendingPackedLongBuffer_init_(t_AppendingPackedLongBuffer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_AppendingPackedLongBuffer__methods_[] = {
            DECLARE_METHOD(t_AppendingPackedLongBuffer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AppendingPackedLongBuffer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AppendingPackedLongBuffer, t_AppendingPackedLongBuffer, ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer, AppendingPackedLongBuffer, t_AppendingPackedLongBuffer_init_, 0, 0, 0, 0, 0);

          void t_AppendingPackedLongBuffer::install(PyObject *module)
          {
            installType(&PY_TYPE(AppendingPackedLongBuffer), module, "AppendingPackedLongBuffer", 0);
          }

          void t_AppendingPackedLongBuffer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AppendingPackedLongBuffer).tp_dict, "class_", make_descriptor(AppendingPackedLongBuffer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AppendingPackedLongBuffer).tp_dict, "wrapfn_", make_descriptor(t_AppendingPackedLongBuffer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AppendingPackedLongBuffer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AppendingPackedLongBuffer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AppendingPackedLongBuffer::initializeClass, 1)))
              return NULL;
            return t_AppendingPackedLongBuffer::wrap_Object(AppendingPackedLongBuffer(((t_AppendingPackedLongBuffer *) arg)->object.this$));
          }
          static PyObject *t_AppendingPackedLongBuffer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AppendingPackedLongBuffer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AppendingPackedLongBuffer_init_(t_AppendingPackedLongBuffer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                AppendingPackedLongBuffer object((jobject) NULL);

                INT_CALL(object = AppendingPackedLongBuffer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                AppendingPackedLongBuffer object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = AppendingPackedLongBuffer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                jint a0;
                jint a1;
                jfloat a2;
                AppendingPackedLongBuffer object((jobject) NULL);

                if (!parseArgs(args, "IIF", &a0, &a1, &a2))
                {
                  INT_CALL(object = AppendingPackedLongBuffer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/PatternKeywordMarkerFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/regex/Pattern.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *PatternKeywordMarkerFilter::class$ = NULL;
          jmethodID *PatternKeywordMarkerFilter::mids$ = NULL;
          bool PatternKeywordMarkerFilter::live$ = false;

          jclass PatternKeywordMarkerFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/PatternKeywordMarkerFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_df7fd280] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/util/regex/Pattern;)V");
              mids$[mid_isKeyword_54c6a16a] = env->getMethodID(cls, "isKeyword", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternKeywordMarkerFilter::PatternKeywordMarkerFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::util::regex::Pattern & a1) : ::org::apache::lucene::analysis::miscellaneous::KeywordMarkerFilter(env->newObject(initializeClass, &mids$, mid_init$_df7fd280, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_PatternKeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternKeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternKeywordMarkerFilter_init_(t_PatternKeywordMarkerFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_PatternKeywordMarkerFilter__methods_[] = {
            DECLARE_METHOD(t_PatternKeywordMarkerFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternKeywordMarkerFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternKeywordMarkerFilter, t_PatternKeywordMarkerFilter, ::org::apache::lucene::analysis::miscellaneous::KeywordMarkerFilter, PatternKeywordMarkerFilter, t_PatternKeywordMarkerFilter_init_, 0, 0, 0, 0, 0);

          void t_PatternKeywordMarkerFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternKeywordMarkerFilter), module, "PatternKeywordMarkerFilter", 0);
          }

          void t_PatternKeywordMarkerFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternKeywordMarkerFilter).tp_dict, "class_", make_descriptor(PatternKeywordMarkerFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternKeywordMarkerFilter).tp_dict, "wrapfn_", make_descriptor(t_PatternKeywordMarkerFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternKeywordMarkerFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternKeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternKeywordMarkerFilter::initializeClass, 1)))
              return NULL;
            return t_PatternKeywordMarkerFilter::wrap_Object(PatternKeywordMarkerFilter(((t_PatternKeywordMarkerFilter *) arg)->object.this$));
          }
          static PyObject *t_PatternKeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternKeywordMarkerFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternKeywordMarkerFilter_init_(t_PatternKeywordMarkerFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::java::util::regex::Pattern a1((jobject) NULL);
            PatternKeywordMarkerFilter object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::regex::Pattern::initializeClass, &a0, &a1))
            {
              INT_CALL(object = PatternKeywordMarkerFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/SortedSetDocValuesField.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *SortedSetDocValuesField::class$ = NULL;
        jmethodID *SortedSetDocValuesField::mids$ = NULL;
        bool SortedSetDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *SortedSetDocValuesField::TYPE = NULL;

        jclass SortedSetDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/SortedSetDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedSetDocValuesField::SortedSetDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_SortedSetDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedSetDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedSetDocValuesField_init_(t_SortedSetDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_SortedSetDocValuesField__methods_[] = {
          DECLARE_METHOD(t_SortedSetDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedSetDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedSetDocValuesField, t_SortedSetDocValuesField, ::org::apache::lucene::document::Field, SortedSetDocValuesField, t_SortedSetDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_SortedSetDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedSetDocValuesField), module, "SortedSetDocValuesField", 0);
        }

        void t_SortedSetDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedSetDocValuesField).tp_dict, "class_", make_descriptor(SortedSetDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedSetDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_SortedSetDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedSetDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedSetDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortedSetDocValuesField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*SortedSetDocValuesField::TYPE)));
        }

        static PyObject *t_SortedSetDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedSetDocValuesField::initializeClass, 1)))
            return NULL;
          return t_SortedSetDocValuesField::wrap_Object(SortedSetDocValuesField(((t_SortedSetDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_SortedSetDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedSetDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedSetDocValuesField_init_(t_SortedSetDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          SortedSetDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            INT_CALL(object = SortedSetDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/IDFValueSource.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *IDFValueSource::class$ = NULL;
            jmethodID *IDFValueSource::mids$ = NULL;
            bool IDFValueSource::live$ = false;

            jclass IDFValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/IDFValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b45b6622] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            IDFValueSource::IDFValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3) : ::org::apache::lucene::queries::function::valuesource::DocFreqValueSource(env->newObject(initializeClass, &mids$, mid_init$_b45b6622, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues IDFValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            ::java::lang::String IDFValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_IDFValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_IDFValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_IDFValueSource_init_(t_IDFValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_IDFValueSource_getValues(t_IDFValueSource *self, PyObject *args);
            static PyObject *t_IDFValueSource_name(t_IDFValueSource *self, PyObject *args);

            static PyMethodDef t_IDFValueSource__methods_[] = {
              DECLARE_METHOD(t_IDFValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IDFValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IDFValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_IDFValueSource, name, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(IDFValueSource, t_IDFValueSource, ::org::apache::lucene::queries::function::valuesource::DocFreqValueSource, IDFValueSource, t_IDFValueSource_init_, 0, 0, 0, 0, 0);

            void t_IDFValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(IDFValueSource), module, "IDFValueSource", 0);
            }

            void t_IDFValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(IDFValueSource).tp_dict, "class_", make_descriptor(IDFValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(IDFValueSource).tp_dict, "wrapfn_", make_descriptor(t_IDFValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(IDFValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_IDFValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, IDFValueSource::initializeClass, 1)))
                return NULL;
              return t_IDFValueSource::wrap_Object(IDFValueSource(((t_IDFValueSource *) arg)->object.this$));
            }
            static PyObject *t_IDFValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, IDFValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_IDFValueSource_init_(t_IDFValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              IDFValueSource object((jobject) NULL);

              if (!parseArgs(args, "sssk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = IDFValueSource(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_IDFValueSource_getValues(t_IDFValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(IDFValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_IDFValueSource_name(t_IDFValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.name());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(IDFValueSource), (PyObject *) self, "name", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40TermVectorsFormat.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/codecs/TermVectorsWriter.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40TermVectorsFormat::class$ = NULL;
          jmethodID *Lucene40TermVectorsFormat::mids$ = NULL;
          bool Lucene40TermVectorsFormat::live$ = false;

          jclass Lucene40TermVectorsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40TermVectorsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_vectorsReader_9c23221f] = env->getMethodID(cls, "vectorsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsReader;");
              mids$[mid_vectorsWriter_0c8458c9] = env->getMethodID(cls, "vectorsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40TermVectorsFormat::Lucene40TermVectorsFormat() : ::org::apache::lucene::codecs::TermVectorsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::TermVectorsReader Lucene40TermVectorsFormat::vectorsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_vectorsReader_9c23221f], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::codecs::TermVectorsWriter Lucene40TermVectorsFormat::vectorsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::codecs::TermVectorsWriter(env->callObjectMethod(this$, mids$[mid_vectorsWriter_0c8458c9], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40TermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40TermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40TermVectorsFormat_init_(t_Lucene40TermVectorsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40TermVectorsFormat_vectorsReader(t_Lucene40TermVectorsFormat *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsFormat_vectorsWriter(t_Lucene40TermVectorsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene40TermVectorsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40TermVectorsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40TermVectorsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40TermVectorsFormat, vectorsReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsFormat, vectorsWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40TermVectorsFormat, t_Lucene40TermVectorsFormat, ::org::apache::lucene::codecs::TermVectorsFormat, Lucene40TermVectorsFormat, t_Lucene40TermVectorsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene40TermVectorsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40TermVectorsFormat), module, "Lucene40TermVectorsFormat", 0);
          }

          void t_Lucene40TermVectorsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsFormat).tp_dict, "class_", make_descriptor(Lucene40TermVectorsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40TermVectorsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40TermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40TermVectorsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40TermVectorsFormat::wrap_Object(Lucene40TermVectorsFormat(((t_Lucene40TermVectorsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40TermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40TermVectorsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40TermVectorsFormat_init_(t_Lucene40TermVectorsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40TermVectorsFormat object((jobject) NULL);

            INT_CALL(object = Lucene40TermVectorsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40TermVectorsFormat_vectorsReader(t_Lucene40TermVectorsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.vectorsReader(a0, a1, a2, a3));
              return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsFormat), (PyObject *) self, "vectorsReader", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsFormat_vectorsWriter(t_Lucene40TermVectorsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::codecs::TermVectorsWriter result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.vectorsWriter(a0, a1, a2));
              return ::org::apache::lucene::codecs::t_TermVectorsWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsFormat), (PyObject *) self, "vectorsWriter", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/Scorer$ChildScorer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Scorer::class$ = NULL;
        jmethodID *Scorer::mids$ = NULL;
        bool Scorer::live$ = false;

        jclass Scorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Scorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getChildren_2d2d7de4] = env->getMethodID(cls, "getChildren", "()Ljava/util/Collection;");
            mids$[mid_getWeight_add28ea1] = env->getMethodID(cls, "getWeight", "()Lorg/apache/lucene/search/Weight;");
            mids$[mid_score_54c6a176] = env->getMethodID(cls, "score", "()F");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Collection Scorer::getChildren() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildren_2d2d7de4]));
        }

        ::org::apache::lucene::search::Weight Scorer::getWeight() const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_getWeight_add28ea1]));
        }

        jfloat Scorer::score() const
        {
          return env->callFloatMethod(this$, mids$[mid_score_54c6a176]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Scorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Scorer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Scorer_getChildren(t_Scorer *self);
        static PyObject *t_Scorer_getWeight(t_Scorer *self);
        static PyObject *t_Scorer_score(t_Scorer *self);
        static PyObject *t_Scorer_get__children(t_Scorer *self, void *data);
        static PyObject *t_Scorer_get__weight(t_Scorer *self, void *data);
        static PyGetSetDef t_Scorer__fields_[] = {
          DECLARE_GET_FIELD(t_Scorer, children),
          DECLARE_GET_FIELD(t_Scorer, weight),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Scorer__methods_[] = {
          DECLARE_METHOD(t_Scorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Scorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Scorer, getChildren, METH_NOARGS),
          DECLARE_METHOD(t_Scorer, getWeight, METH_NOARGS),
          DECLARE_METHOD(t_Scorer, score, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Scorer, t_Scorer, ::org::apache::lucene::index::DocsEnum, Scorer, abstract_init, 0, 0, t_Scorer__fields_, 0, 0);

        void t_Scorer::install(PyObject *module)
        {
          installType(&PY_TYPE(Scorer), module, "Scorer", 0);
          PyDict_SetItemString(PY_TYPE(Scorer).tp_dict, "ChildScorer", make_descriptor(&PY_TYPE(Scorer$ChildScorer)));
        }

        void t_Scorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Scorer).tp_dict, "class_", make_descriptor(Scorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Scorer).tp_dict, "wrapfn_", make_descriptor(t_Scorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Scorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Scorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Scorer::initializeClass, 1)))
            return NULL;
          return t_Scorer::wrap_Object(Scorer(((t_Scorer *) arg)->object.this$));
        }
        static PyObject *t_Scorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Scorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Scorer_getChildren(t_Scorer *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.getChildren());
          return ::java::util::t_Collection::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(Scorer$ChildScorer));
        }

        static PyObject *t_Scorer_getWeight(t_Scorer *self)
        {
          ::org::apache::lucene::search::Weight result((jobject) NULL);
          OBJ_CALL(result = self->object.getWeight());
          return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
        }

        static PyObject *t_Scorer_score(t_Scorer *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.score());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Scorer_get__children(t_Scorer *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getChildren());
          return ::java::util::t_Collection::wrap_Object(value);
        }

        static PyObject *t_Scorer_get__weight(t_Scorer *self, void *data)
        {
          ::org::apache::lucene::search::Weight value((jobject) NULL);
          OBJ_CALL(value = self->object.getWeight());
          return ::org::apache::lucene::search::t_Weight::wrap_Object(value);
        }
      }
    }
  }
}
