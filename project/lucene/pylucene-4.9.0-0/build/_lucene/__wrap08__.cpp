#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/SumTotalTermFreqValueSource.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *SumTotalTermFreqValueSource::class$ = NULL;
            jmethodID *SumTotalTermFreqValueSource::mids$ = NULL;
            bool SumTotalTermFreqValueSource::live$ = false;

            jclass SumTotalTermFreqValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/SumTotalTermFreqValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SumTotalTermFreqValueSource::SumTotalTermFreqValueSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            void SumTotalTermFreqValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String SumTotalTermFreqValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean SumTotalTermFreqValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues SumTotalTermFreqValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint SumTotalTermFreqValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String SumTotalTermFreqValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_SumTotalTermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SumTotalTermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SumTotalTermFreqValueSource_init_(t_SumTotalTermFreqValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SumTotalTermFreqValueSource_createWeight(t_SumTotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_SumTotalTermFreqValueSource_description(t_SumTotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_SumTotalTermFreqValueSource_equals(t_SumTotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_SumTotalTermFreqValueSource_getValues(t_SumTotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_SumTotalTermFreqValueSource_hashCode(t_SumTotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_SumTotalTermFreqValueSource_name(t_SumTotalTermFreqValueSource *self);

            static PyMethodDef t_SumTotalTermFreqValueSource__methods_[] = {
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SumTotalTermFreqValueSource, t_SumTotalTermFreqValueSource, ::org::apache::lucene::queries::function::ValueSource, SumTotalTermFreqValueSource, t_SumTotalTermFreqValueSource_init_, 0, 0, 0, 0, 0);

            void t_SumTotalTermFreqValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(SumTotalTermFreqValueSource), module, "SumTotalTermFreqValueSource", 0);
            }

            void t_SumTotalTermFreqValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SumTotalTermFreqValueSource).tp_dict, "class_", make_descriptor(SumTotalTermFreqValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SumTotalTermFreqValueSource).tp_dict, "wrapfn_", make_descriptor(t_SumTotalTermFreqValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SumTotalTermFreqValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SumTotalTermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SumTotalTermFreqValueSource::initializeClass, 1)))
                return NULL;
              return t_SumTotalTermFreqValueSource::wrap_Object(SumTotalTermFreqValueSource(((t_SumTotalTermFreqValueSource *) arg)->object.this$));
            }
            static PyObject *t_SumTotalTermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SumTotalTermFreqValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SumTotalTermFreqValueSource_init_(t_SumTotalTermFreqValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              SumTotalTermFreqValueSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = SumTotalTermFreqValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SumTotalTermFreqValueSource_createWeight(t_SumTotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SumTotalTermFreqValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_SumTotalTermFreqValueSource_description(t_SumTotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SumTotalTermFreqValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_SumTotalTermFreqValueSource_equals(t_SumTotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(SumTotalTermFreqValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_SumTotalTermFreqValueSource_getValues(t_SumTotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(SumTotalTermFreqValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_SumTotalTermFreqValueSource_hashCode(t_SumTotalTermFreqValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(SumTotalTermFreqValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_SumTotalTermFreqValueSource_name(t_SumTotalTermFreqValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/AutomatonProvider.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *AutomatonProvider::class$ = NULL;
          jmethodID *AutomatonProvider::mids$ = NULL;
          bool AutomatonProvider::live$ = false;

          jclass AutomatonProvider::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/AutomatonProvider");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getAutomaton_af13056f] = env->getMethodID(cls, "getAutomaton", "(Ljava/lang/String;)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::automaton::Automaton AutomatonProvider::getAutomaton(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_getAutomaton_af13056f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_AutomatonProvider_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AutomatonProvider_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AutomatonProvider_getAutomaton(t_AutomatonProvider *self, PyObject *arg);

          static PyMethodDef t_AutomatonProvider__methods_[] = {
            DECLARE_METHOD(t_AutomatonProvider, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AutomatonProvider, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AutomatonProvider, getAutomaton, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AutomatonProvider, t_AutomatonProvider, ::java::lang::Object, AutomatonProvider, abstract_init, 0, 0, 0, 0, 0);

          void t_AutomatonProvider::install(PyObject *module)
          {
            installType(&PY_TYPE(AutomatonProvider), module, "AutomatonProvider", 0);
          }

          void t_AutomatonProvider::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AutomatonProvider).tp_dict, "class_", make_descriptor(AutomatonProvider::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AutomatonProvider).tp_dict, "wrapfn_", make_descriptor(t_AutomatonProvider::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AutomatonProvider).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AutomatonProvider_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AutomatonProvider::initializeClass, 1)))
              return NULL;
            return t_AutomatonProvider::wrap_Object(AutomatonProvider(((t_AutomatonProvider *) arg)->object.this$));
          }
          static PyObject *t_AutomatonProvider_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AutomatonProvider::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AutomatonProvider_getAutomaton(t_AutomatonProvider *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getAutomaton(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getAutomaton", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonAttribute::class$ = NULL;
        jmethodID *PythonAttribute::mids$ = NULL;
        bool PythonAttribute::live$ = false;

        jclass PythonAttribute::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonAttribute");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonAttribute_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonAttribute_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_PythonAttribute__methods_[] = {
          DECLARE_METHOD(t_PythonAttribute, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonAttribute, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonAttribute, t_PythonAttribute, ::org::apache::lucene::util::Attribute, PythonAttribute, abstract_init, 0, 0, 0, 0, 0);

        void t_PythonAttribute::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonAttribute), module, "PythonAttribute", 0);
        }

        void t_PythonAttribute::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonAttribute).tp_dict, "class_", make_descriptor(PythonAttribute::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonAttribute).tp_dict, "wrapfn_", make_descriptor(t_PythonAttribute::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PythonAttribute_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonAttribute::initializeClass, 1)))
            return NULL;
          return t_PythonAttribute::wrap_Object(PythonAttribute(((t_PythonAttribute *) arg)->object.this$));
        }
        static PyObject *t_PythonAttribute_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonAttribute::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/MultiSimilarity.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/similarities/Similarity$SimWeight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *MultiSimilarity::class$ = NULL;
          jmethodID *MultiSimilarity::mids$ = NULL;
          bool MultiSimilarity::live$ = false;

          jclass MultiSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/MultiSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_82c64346] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/similarities/Similarity;)V");
              mids$[mid_computeNorm_6ff84e0e] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_computeWeight_8bb6ee0b] = env->getMethodID(cls, "computeWeight", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimWeight;");
              mids$[mid_simScorer_9a2cfed8] = env->getMethodID(cls, "simScorer", "(Lorg/apache/lucene/search/similarities/Similarity$SimWeight;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MultiSimilarity::MultiSimilarity(const JArray< ::org::apache::lucene::search::similarities::Similarity > & a0) : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_82c64346, a0.this$)) {}

          jlong MultiSimilarity::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ff84e0e], a0.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimWeight MultiSimilarity::computeWeight(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimWeight(env->callObjectMethod(this$, mids$[mid_computeWeight_8bb6ee0b], a0, a1.this$, a2.this$));
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer MultiSimilarity::simScorer(const ::org::apache::lucene::search::similarities::Similarity$SimWeight & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_simScorer_9a2cfed8], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_MultiSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MultiSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MultiSimilarity_init_(t_MultiSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MultiSimilarity_computeNorm(t_MultiSimilarity *self, PyObject *args);
          static PyObject *t_MultiSimilarity_computeWeight(t_MultiSimilarity *self, PyObject *args);
          static PyObject *t_MultiSimilarity_simScorer(t_MultiSimilarity *self, PyObject *args);

          static PyMethodDef t_MultiSimilarity__methods_[] = {
            DECLARE_METHOD(t_MultiSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MultiSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MultiSimilarity, computeNorm, METH_VARARGS),
            DECLARE_METHOD(t_MultiSimilarity, computeWeight, METH_VARARGS),
            DECLARE_METHOD(t_MultiSimilarity, simScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MultiSimilarity, t_MultiSimilarity, ::org::apache::lucene::search::similarities::Similarity, MultiSimilarity, t_MultiSimilarity_init_, 0, 0, 0, 0, 0);

          void t_MultiSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(MultiSimilarity), module, "MultiSimilarity", 0);
          }

          void t_MultiSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MultiSimilarity).tp_dict, "class_", make_descriptor(MultiSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MultiSimilarity).tp_dict, "wrapfn_", make_descriptor(t_MultiSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MultiSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MultiSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MultiSimilarity::initializeClass, 1)))
              return NULL;
            return t_MultiSimilarity::wrap_Object(MultiSimilarity(((t_MultiSimilarity *) arg)->object.this$));
          }
          static PyObject *t_MultiSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MultiSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MultiSimilarity_init_(t_MultiSimilarity *self, PyObject *args, PyObject *kwds)
          {
            JArray< ::org::apache::lucene::search::similarities::Similarity > a0((jobject) NULL);
            MultiSimilarity object((jobject) NULL);

            if (!parseArgs(args, "[k", ::org::apache::lucene::search::similarities::Similarity::initializeClass, &a0))
            {
              INT_CALL(object = MultiSimilarity(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MultiSimilarity_computeNorm(t_MultiSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(MultiSimilarity), (PyObject *) self, "computeNorm", args, 2);
          }

          static PyObject *t_MultiSimilarity_computeWeight(t_MultiSimilarity *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimWeight result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.computeWeight(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimWeight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MultiSimilarity), (PyObject *) self, "computeWeight", args, 2);
          }

          static PyObject *t_MultiSimilarity_simScorer(t_MultiSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::Similarity$SimWeight a0((jobject) NULL);
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::similarities::Similarity$SimWeight::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.simScorer(a0, a1));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MultiSimilarity), (PyObject *) self, "simScorer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FieldInfo$IndexOptions.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FieldInfo$IndexOptions::class$ = NULL;
        jmethodID *FieldInfo$IndexOptions::mids$ = NULL;
        bool FieldInfo$IndexOptions::live$ = false;
        FieldInfo$IndexOptions *FieldInfo$IndexOptions::DOCS_AND_FREQS = NULL;
        FieldInfo$IndexOptions *FieldInfo$IndexOptions::DOCS_AND_FREQS_AND_POSITIONS = NULL;
        FieldInfo$IndexOptions *FieldInfo$IndexOptions::DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS = NULL;
        FieldInfo$IndexOptions *FieldInfo$IndexOptions::DOCS_ONLY = NULL;

        jclass FieldInfo$IndexOptions::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FieldInfo$IndexOptions");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_20bf9e20] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/FieldInfo$IndexOptions;");
            mids$[mid_values_84108cce] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/FieldInfo$IndexOptions;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DOCS_AND_FREQS = new FieldInfo$IndexOptions(env->getStaticObjectField(cls, "DOCS_AND_FREQS", "Lorg/apache/lucene/index/FieldInfo$IndexOptions;"));
            DOCS_AND_FREQS_AND_POSITIONS = new FieldInfo$IndexOptions(env->getStaticObjectField(cls, "DOCS_AND_FREQS_AND_POSITIONS", "Lorg/apache/lucene/index/FieldInfo$IndexOptions;"));
            DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS = new FieldInfo$IndexOptions(env->getStaticObjectField(cls, "DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS", "Lorg/apache/lucene/index/FieldInfo$IndexOptions;"));
            DOCS_ONLY = new FieldInfo$IndexOptions(env->getStaticObjectField(cls, "DOCS_ONLY", "Lorg/apache/lucene/index/FieldInfo$IndexOptions;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldInfo$IndexOptions FieldInfo$IndexOptions::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldInfo$IndexOptions(env->callStaticObjectMethod(cls, mids$[mid_valueOf_20bf9e20], a0.this$));
        }

        JArray< FieldInfo$IndexOptions > FieldInfo$IndexOptions::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< FieldInfo$IndexOptions >(env->callStaticObjectMethod(cls, mids$[mid_values_84108cce]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FieldInfo$IndexOptions_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfo$IndexOptions_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfo$IndexOptions_of_(t_FieldInfo$IndexOptions *self, PyObject *args);
        static PyObject *t_FieldInfo$IndexOptions_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldInfo$IndexOptions_values(PyTypeObject *type);
        static PyObject *t_FieldInfo$IndexOptions_get__parameters_(t_FieldInfo$IndexOptions *self, void *data);
        static PyGetSetDef t_FieldInfo$IndexOptions__fields_[] = {
          DECLARE_GET_FIELD(t_FieldInfo$IndexOptions, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldInfo$IndexOptions__methods_[] = {
          DECLARE_METHOD(t_FieldInfo$IndexOptions, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo$IndexOptions, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo$IndexOptions, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldInfo$IndexOptions, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo$IndexOptions, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInfo$IndexOptions, t_FieldInfo$IndexOptions, ::java::lang::Enum, FieldInfo$IndexOptions, abstract_init, 0, 0, t_FieldInfo$IndexOptions__fields_, 0, 0);
        PyObject *t_FieldInfo$IndexOptions::wrap_Object(const FieldInfo$IndexOptions& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldInfo$IndexOptions::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldInfo$IndexOptions *self = (t_FieldInfo$IndexOptions *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldInfo$IndexOptions::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldInfo$IndexOptions::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldInfo$IndexOptions *self = (t_FieldInfo$IndexOptions *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldInfo$IndexOptions::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfo$IndexOptions), module, "FieldInfo$IndexOptions", 0);
        }

        void t_FieldInfo$IndexOptions::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInfo$IndexOptions).tp_dict, "class_", make_descriptor(FieldInfo$IndexOptions::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInfo$IndexOptions).tp_dict, "wrapfn_", make_descriptor(t_FieldInfo$IndexOptions::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInfo$IndexOptions).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldInfo$IndexOptions::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldInfo$IndexOptions).tp_dict, "DOCS_AND_FREQS", make_descriptor(t_FieldInfo$IndexOptions::wrap_Object(*FieldInfo$IndexOptions::DOCS_AND_FREQS)));
          PyDict_SetItemString(PY_TYPE(FieldInfo$IndexOptions).tp_dict, "DOCS_AND_FREQS_AND_POSITIONS", make_descriptor(t_FieldInfo$IndexOptions::wrap_Object(*FieldInfo$IndexOptions::DOCS_AND_FREQS_AND_POSITIONS)));
          PyDict_SetItemString(PY_TYPE(FieldInfo$IndexOptions).tp_dict, "DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS", make_descriptor(t_FieldInfo$IndexOptions::wrap_Object(*FieldInfo$IndexOptions::DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS)));
          PyDict_SetItemString(PY_TYPE(FieldInfo$IndexOptions).tp_dict, "DOCS_ONLY", make_descriptor(t_FieldInfo$IndexOptions::wrap_Object(*FieldInfo$IndexOptions::DOCS_ONLY)));
        }

        static PyObject *t_FieldInfo$IndexOptions_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfo$IndexOptions::initializeClass, 1)))
            return NULL;
          return t_FieldInfo$IndexOptions::wrap_Object(FieldInfo$IndexOptions(((t_FieldInfo$IndexOptions *) arg)->object.this$));
        }
        static PyObject *t_FieldInfo$IndexOptions_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfo$IndexOptions::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldInfo$IndexOptions_of_(t_FieldInfo$IndexOptions *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldInfo$IndexOptions_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          FieldInfo$IndexOptions result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::FieldInfo$IndexOptions::valueOf(a0));
            return t_FieldInfo$IndexOptions::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_FieldInfo$IndexOptions_values(PyTypeObject *type)
        {
          JArray< FieldInfo$IndexOptions > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::FieldInfo$IndexOptions::values());
          return JArray<jobject>(result.this$).wrap(t_FieldInfo$IndexOptions::wrap_jobject);
        }
        static PyObject *t_FieldInfo$IndexOptions_get__parameters_(t_FieldInfo$IndexOptions *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocTermOrdsRewriteMethod.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocTermOrdsRewriteMethod::class$ = NULL;
        jmethodID *DocTermOrdsRewriteMethod::mids$ = NULL;
        bool DocTermOrdsRewriteMethod::live$ = false;

        jclass DocTermOrdsRewriteMethod::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocTermOrdsRewriteMethod");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_925c5bbc] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/Query;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocTermOrdsRewriteMethod::DocTermOrdsRewriteMethod() : ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean DocTermOrdsRewriteMethod::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint DocTermOrdsRewriteMethod::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query DocTermOrdsRewriteMethod::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_925c5bbc], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocTermOrdsRewriteMethod_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocTermOrdsRewriteMethod_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocTermOrdsRewriteMethod_init_(t_DocTermOrdsRewriteMethod *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocTermOrdsRewriteMethod_equals(t_DocTermOrdsRewriteMethod *self, PyObject *args);
        static PyObject *t_DocTermOrdsRewriteMethod_hashCode(t_DocTermOrdsRewriteMethod *self, PyObject *args);
        static PyObject *t_DocTermOrdsRewriteMethod_rewrite(t_DocTermOrdsRewriteMethod *self, PyObject *args);

        static PyMethodDef t_DocTermOrdsRewriteMethod__methods_[] = {
          DECLARE_METHOD(t_DocTermOrdsRewriteMethod, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocTermOrdsRewriteMethod, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocTermOrdsRewriteMethod, equals, METH_VARARGS),
          DECLARE_METHOD(t_DocTermOrdsRewriteMethod, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DocTermOrdsRewriteMethod, rewrite, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocTermOrdsRewriteMethod, t_DocTermOrdsRewriteMethod, ::org::apache::lucene::search::MultiTermQuery$RewriteMethod, DocTermOrdsRewriteMethod, t_DocTermOrdsRewriteMethod_init_, 0, 0, 0, 0, 0);

        void t_DocTermOrdsRewriteMethod::install(PyObject *module)
        {
          installType(&PY_TYPE(DocTermOrdsRewriteMethod), module, "DocTermOrdsRewriteMethod", 0);
        }

        void t_DocTermOrdsRewriteMethod::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocTermOrdsRewriteMethod).tp_dict, "class_", make_descriptor(DocTermOrdsRewriteMethod::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocTermOrdsRewriteMethod).tp_dict, "wrapfn_", make_descriptor(t_DocTermOrdsRewriteMethod::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocTermOrdsRewriteMethod).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocTermOrdsRewriteMethod_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocTermOrdsRewriteMethod::initializeClass, 1)))
            return NULL;
          return t_DocTermOrdsRewriteMethod::wrap_Object(DocTermOrdsRewriteMethod(((t_DocTermOrdsRewriteMethod *) arg)->object.this$));
        }
        static PyObject *t_DocTermOrdsRewriteMethod_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocTermOrdsRewriteMethod::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocTermOrdsRewriteMethod_init_(t_DocTermOrdsRewriteMethod *self, PyObject *args, PyObject *kwds)
        {
          DocTermOrdsRewriteMethod object((jobject) NULL);

          INT_CALL(object = DocTermOrdsRewriteMethod());
          self->object = object;

          return 0;
        }

        static PyObject *t_DocTermOrdsRewriteMethod_equals(t_DocTermOrdsRewriteMethod *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DocTermOrdsRewriteMethod), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DocTermOrdsRewriteMethod_hashCode(t_DocTermOrdsRewriteMethod *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(DocTermOrdsRewriteMethod), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DocTermOrdsRewriteMethod_rewrite(t_DocTermOrdsRewriteMethod *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.rewrite(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DocTermOrdsRewriteMethod), (PyObject *) self, "rewrite", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractGroupFacetCollector$GroupedFacetResult.h"
#include "org/apache/lucene/search/grouping/AbstractGroupFacetCollector$FacetEntry.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractGroupFacetCollector$GroupedFacetResult::class$ = NULL;
          jmethodID *AbstractGroupFacetCollector$GroupedFacetResult::mids$ = NULL;
          bool AbstractGroupFacetCollector$GroupedFacetResult::live$ = false;

          jclass AbstractGroupFacetCollector$GroupedFacetResult::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractGroupFacetCollector$GroupedFacetResult");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_90d4781f] = env->getMethodID(cls, "<init>", "(IIZII)V");
              mids$[mid_addFacetCount_738fc2ce] = env->getMethodID(cls, "addFacetCount", "(Lorg/apache/lucene/util/BytesRef;I)V");
              mids$[mid_getFacetEntries_6bc635fe] = env->getMethodID(cls, "getFacetEntries", "(II)Ljava/util/List;");
              mids$[mid_getTotalCount_54c6a179] = env->getMethodID(cls, "getTotalCount", "()I");
              mids$[mid_getTotalMissingCount_54c6a179] = env->getMethodID(cls, "getTotalMissingCount", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractGroupFacetCollector$GroupedFacetResult::AbstractGroupFacetCollector$GroupedFacetResult(jint a0, jint a1, jboolean a2, jint a3, jint a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_90d4781f, a0, a1, a2, a3, a4)) {}

          void AbstractGroupFacetCollector$GroupedFacetResult::addFacetCount(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addFacetCount_738fc2ce], a0.this$, a1);
          }

          ::java::util::List AbstractGroupFacetCollector$GroupedFacetResult::getFacetEntries(jint a0, jint a1) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getFacetEntries_6bc635fe], a0, a1));
          }

          jint AbstractGroupFacetCollector$GroupedFacetResult::getTotalCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getTotalCount_54c6a179]);
          }

          jint AbstractGroupFacetCollector$GroupedFacetResult::getTotalMissingCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getTotalMissingCount_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AbstractGroupFacetCollector$GroupedFacetResult_init_(t_AbstractGroupFacetCollector$GroupedFacetResult *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_addFacetCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self, PyObject *args);
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_getFacetEntries(t_AbstractGroupFacetCollector$GroupedFacetResult *self, PyObject *args);
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_getTotalCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self);
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_getTotalMissingCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self);
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_get__totalCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self, void *data);
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_get__totalMissingCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self, void *data);
          static PyGetSetDef t_AbstractGroupFacetCollector$GroupedFacetResult__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractGroupFacetCollector$GroupedFacetResult, totalCount),
            DECLARE_GET_FIELD(t_AbstractGroupFacetCollector$GroupedFacetResult, totalMissingCount),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractGroupFacetCollector$GroupedFacetResult__methods_[] = {
            DECLARE_METHOD(t_AbstractGroupFacetCollector$GroupedFacetResult, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$GroupedFacetResult, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$GroupedFacetResult, addFacetCount, METH_VARARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$GroupedFacetResult, getFacetEntries, METH_VARARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$GroupedFacetResult, getTotalCount, METH_NOARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$GroupedFacetResult, getTotalMissingCount, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractGroupFacetCollector$GroupedFacetResult, t_AbstractGroupFacetCollector$GroupedFacetResult, ::java::lang::Object, AbstractGroupFacetCollector$GroupedFacetResult, t_AbstractGroupFacetCollector$GroupedFacetResult_init_, 0, 0, t_AbstractGroupFacetCollector$GroupedFacetResult__fields_, 0, 0);

          void t_AbstractGroupFacetCollector$GroupedFacetResult::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractGroupFacetCollector$GroupedFacetResult), module, "AbstractGroupFacetCollector$GroupedFacetResult", 0);
          }

          void t_AbstractGroupFacetCollector$GroupedFacetResult::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector$GroupedFacetResult).tp_dict, "class_", make_descriptor(AbstractGroupFacetCollector$GroupedFacetResult::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector$GroupedFacetResult).tp_dict, "wrapfn_", make_descriptor(t_AbstractGroupFacetCollector$GroupedFacetResult::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector$GroupedFacetResult).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractGroupFacetCollector$GroupedFacetResult::initializeClass, 1)))
              return NULL;
            return t_AbstractGroupFacetCollector$GroupedFacetResult::wrap_Object(AbstractGroupFacetCollector$GroupedFacetResult(((t_AbstractGroupFacetCollector$GroupedFacetResult *) arg)->object.this$));
          }
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractGroupFacetCollector$GroupedFacetResult::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AbstractGroupFacetCollector$GroupedFacetResult_init_(t_AbstractGroupFacetCollector$GroupedFacetResult *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            jboolean a2;
            jint a3;
            jint a4;
            AbstractGroupFacetCollector$GroupedFacetResult object((jobject) NULL);

            if (!parseArgs(args, "IIZII", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = AbstractGroupFacetCollector$GroupedFacetResult(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_addFacetCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addFacetCount(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addFacetCount", args);
            return NULL;
          }

          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_getFacetEntries(t_AbstractGroupFacetCollector$GroupedFacetResult *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getFacetEntries(a0, a1));
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::grouping::PY_TYPE(AbstractGroupFacetCollector$FacetEntry));
            }

            PyErr_SetArgsError((PyObject *) self, "getFacetEntries", args);
            return NULL;
          }

          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_getTotalCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getTotalCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_getTotalMissingCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getTotalMissingCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_get__totalCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getTotalCount());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_get__totalMissingCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getTotalMissingCount());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/TopFieldDocs.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/util/concurrent/ExecutorService.h"
#include "org/apache/lucene/search/Collector.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/document/Document.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *IndexSearcher::class$ = NULL;
        jmethodID *IndexSearcher::mids$ = NULL;
        bool IndexSearcher::live$ = false;

        jclass IndexSearcher::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/IndexSearcher");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7d7eaea9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;)V");
            mids$[mid_init$_4df5686b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReaderContext;)V");
            mids$[mid_init$_b62f0212] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReaderContext;Ljava/util/concurrent/ExecutorService;)V");
            mids$[mid_init$_17c46694] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/util/concurrent/ExecutorService;)V");
            mids$[mid_collectionStatistics_3acb4b2e] = env->getMethodID(cls, "collectionStatistics", "(Ljava/lang/String;)Lorg/apache/lucene/search/CollectionStatistics;");
            mids$[mid_createNormalizedWeight_fd935220] = env->getMethodID(cls, "createNormalizedWeight", "(Lorg/apache/lucene/search/Query;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_doc_9c2cfcf9] = env->getMethodID(cls, "doc", "(I)Lorg/apache/lucene/document/Document;");
            mids$[mid_doc_f65cb155] = env->getMethodID(cls, "doc", "(ILjava/util/Set;)Lorg/apache/lucene/document/Document;");
            mids$[mid_doc_a2ea3ebe] = env->getMethodID(cls, "doc", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_document_f65cb155] = env->getMethodID(cls, "document", "(ILjava/util/Set;)Lorg/apache/lucene/document/Document;");
            mids$[mid_explain_5241f7f4] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Query;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_getDefaultSimilarity_efcb1233] = env->getStaticMethodID(cls, "getDefaultSimilarity", "()Lorg/apache/lucene/search/similarities/Similarity;");
            mids$[mid_getIndexReader_94bbd010] = env->getMethodID(cls, "getIndexReader", "()Lorg/apache/lucene/index/IndexReader;");
            mids$[mid_getSimilarity_efcb1233] = env->getMethodID(cls, "getSimilarity", "()Lorg/apache/lucene/search/similarities/Similarity;");
            mids$[mid_getTopReaderContext_5823c99a] = env->getMethodID(cls, "getTopReaderContext", "()Lorg/apache/lucene/index/IndexReaderContext;");
            mids$[mid_rewrite_b1155c95] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/search/Query;)Lorg/apache/lucene/search/Query;");
            mids$[mid_search_01552069] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_search_5e8d6ed3] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_search_d8b721b3] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_search_8e69de9d] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_search_9a382bd2] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;ILorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_search_e8c6fc04] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_search_e0d35976] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;ZZ)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_searchAfter_131bd79f] = env->getMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_fb33e921] = env->getMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;ILorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_86183cf1] = env->getMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_59c01c23] = env->getMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_3f95b001] = env->getMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;ZZ)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_setSimilarity_3b778066] = env->getMethodID(cls, "setSimilarity", "(Lorg/apache/lucene/search/similarities/Similarity;)V");
            mids$[mid_termStatistics_699f82fc] = env->getMethodID(cls, "termStatistics", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/index/TermContext;)Lorg/apache/lucene/search/TermStatistics;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_search_d30ddef1] = env->getMethodID(cls, "search", "(Ljava/util/List;Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_search_8ccf64e3] = env->getMethodID(cls, "search", "(Ljava/util/List;Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/FieldDoc;ILorg/apache/lucene/search/Sort;ZZZ)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_search_ec76ede8] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/FieldDoc;ILorg/apache/lucene/search/Sort;ZZZ)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_search_1352a6c3] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Weight;ILorg/apache/lucene/search/Sort;ZZ)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_search_4d4907ad] = env->getMethodID(cls, "search", "(Ljava/util/List;Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/ScoreDoc;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_search_5b056f10] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/ScoreDoc;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_explain_423d06cb] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Weight;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_slices_240d90fc] = env->getMethodID(cls, "slices", "(Ljava/util/List;)[Lorg/apache/lucene/search/IndexSearcher$LeafSlice;");
            mids$[mid_wrapFilter_d642d32f] = env->getMethodID(cls, "wrapFilter", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;)Lorg/apache/lucene/search/Query;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexSearcher::IndexSearcher(const ::org::apache::lucene::index::IndexReader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7d7eaea9, a0.this$)) {}

        IndexSearcher::IndexSearcher(const ::org::apache::lucene::index::IndexReaderContext & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4df5686b, a0.this$)) {}

        IndexSearcher::IndexSearcher(const ::org::apache::lucene::index::IndexReaderContext & a0, const ::java::util::concurrent::ExecutorService & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b62f0212, a0.this$, a1.this$)) {}

        IndexSearcher::IndexSearcher(const ::org::apache::lucene::index::IndexReader & a0, const ::java::util::concurrent::ExecutorService & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_17c46694, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::CollectionStatistics IndexSearcher::collectionStatistics(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::search::CollectionStatistics(env->callObjectMethod(this$, mids$[mid_collectionStatistics_3acb4b2e], a0.this$));
        }

        ::org::apache::lucene::search::Weight IndexSearcher::createNormalizedWeight(const ::org::apache::lucene::search::Query & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createNormalizedWeight_fd935220], a0.this$));
        }

        ::org::apache::lucene::document::Document IndexSearcher::doc(jint a0) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_doc_9c2cfcf9], a0));
        }

        ::org::apache::lucene::document::Document IndexSearcher::doc(jint a0, const ::java::util::Set & a1) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_doc_f65cb155], a0, a1.this$));
        }

        void IndexSearcher::doc(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_doc_a2ea3ebe], a0, a1.this$);
        }

        ::org::apache::lucene::document::Document IndexSearcher::document(jint a0, const ::java::util::Set & a1) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_document_f65cb155], a0, a1.this$));
        }

        ::org::apache::lucene::search::Explanation IndexSearcher::explain(const ::org::apache::lucene::search::Query & a0, jint a1) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_5241f7f4], a0.this$, a1));
        }

        ::org::apache::lucene::search::similarities::Similarity IndexSearcher::getDefaultSimilarity()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::similarities::Similarity(env->callStaticObjectMethod(cls, mids$[mid_getDefaultSimilarity_efcb1233]));
        }

        ::org::apache::lucene::index::IndexReader IndexSearcher::getIndexReader() const
        {
          return ::org::apache::lucene::index::IndexReader(env->callObjectMethod(this$, mids$[mid_getIndexReader_94bbd010]));
        }

        ::org::apache::lucene::search::similarities::Similarity IndexSearcher::getSimilarity() const
        {
          return ::org::apache::lucene::search::similarities::Similarity(env->callObjectMethod(this$, mids$[mid_getSimilarity_efcb1233]));
        }

        ::org::apache::lucene::index::IndexReaderContext IndexSearcher::getTopReaderContext() const
        {
          return ::org::apache::lucene::index::IndexReaderContext(env->callObjectMethod(this$, mids$[mid_getTopReaderContext_5823c99a]));
        }

        ::org::apache::lucene::search::Query IndexSearcher::rewrite(const ::org::apache::lucene::search::Query & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_b1155c95], a0.this$));
        }

        void IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Collector & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_search_01552069], a0.this$, a1.this$);
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, jint a1) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_search_5e8d6ed3], a0.this$, a1));
        }

        void IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1, const ::org::apache::lucene::search::Collector & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_search_d8b721b3], a0.this$, a1.this$, a2.this$);
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1, jint a2) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_search_8e69de9d], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::TopFieldDocs IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, jint a1, const ::org::apache::lucene::search::Sort & a2) const
        {
          return ::org::apache::lucene::search::TopFieldDocs(env->callObjectMethod(this$, mids$[mid_search_9a382bd2], a0.this$, a1, a2.this$));
        }

        ::org::apache::lucene::search::TopFieldDocs IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1, jint a2, const ::org::apache::lucene::search::Sort & a3) const
        {
          return ::org::apache::lucene::search::TopFieldDocs(env->callObjectMethod(this$, mids$[mid_search_e8c6fc04], a0.this$, a1.this$, a2, a3.this$));
        }

        ::org::apache::lucene::search::TopFieldDocs IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1, jint a2, const ::org::apache::lucene::search::Sort & a3, jboolean a4, jboolean a5) const
        {
          return ::org::apache::lucene::search::TopFieldDocs(env->callObjectMethod(this$, mids$[mid_search_e0d35976], a0.this$, a1.this$, a2, a3.this$, a4, a5));
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::searchAfter(const ::org::apache::lucene::search::ScoreDoc & a0, const ::org::apache::lucene::search::Query & a1, jint a2) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_searchAfter_131bd79f], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::searchAfter(const ::org::apache::lucene::search::ScoreDoc & a0, const ::org::apache::lucene::search::Query & a1, jint a2, const ::org::apache::lucene::search::Sort & a3) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_searchAfter_fb33e921], a0.this$, a1.this$, a2, a3.this$));
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::searchAfter(const ::org::apache::lucene::search::ScoreDoc & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::Filter & a2, jint a3) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_searchAfter_86183cf1], a0.this$, a1.this$, a2.this$, a3));
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::searchAfter(const ::org::apache::lucene::search::ScoreDoc & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::Filter & a2, jint a3, const ::org::apache::lucene::search::Sort & a4) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_searchAfter_59c01c23], a0.this$, a1.this$, a2.this$, a3, a4.this$));
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::searchAfter(const ::org::apache::lucene::search::ScoreDoc & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::Filter & a2, jint a3, const ::org::apache::lucene::search::Sort & a4, jboolean a5, jboolean a6) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_searchAfter_3f95b001], a0.this$, a1.this$, a2.this$, a3, a4.this$, a5, a6));
        }

        void IndexSearcher::setSimilarity(const ::org::apache::lucene::search::similarities::Similarity & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setSimilarity_3b778066], a0.this$);
        }

        ::org::apache::lucene::search::TermStatistics IndexSearcher::termStatistics(const ::org::apache::lucene::index::Term & a0, const ::org::apache::lucene::index::TermContext & a1) const
        {
          return ::org::apache::lucene::search::TermStatistics(env->callObjectMethod(this$, mids$[mid_termStatistics_699f82fc], a0.this$, a1.this$));
        }

        ::java::lang::String IndexSearcher::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/IndexSearcher$LeafSlice.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_IndexSearcher_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSearcher_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexSearcher_init_(t_IndexSearcher *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexSearcher_collectionStatistics(t_IndexSearcher *self, PyObject *arg);
        static PyObject *t_IndexSearcher_createNormalizedWeight(t_IndexSearcher *self, PyObject *arg);
        static PyObject *t_IndexSearcher_doc(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_document(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_explain(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_getDefaultSimilarity(PyTypeObject *type);
        static PyObject *t_IndexSearcher_getIndexReader(t_IndexSearcher *self);
        static PyObject *t_IndexSearcher_getSimilarity(t_IndexSearcher *self);
        static PyObject *t_IndexSearcher_getTopReaderContext(t_IndexSearcher *self);
        static PyObject *t_IndexSearcher_rewrite(t_IndexSearcher *self, PyObject *arg);
        static PyObject *t_IndexSearcher_search(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_searchAfter(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_setSimilarity(t_IndexSearcher *self, PyObject *arg);
        static PyObject *t_IndexSearcher_termStatistics(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_toString(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_get__defaultSimilarity(t_IndexSearcher *self, void *data);
        static PyObject *t_IndexSearcher_get__indexReader(t_IndexSearcher *self, void *data);
        static PyObject *t_IndexSearcher_get__similarity(t_IndexSearcher *self, void *data);
        static int t_IndexSearcher_set__similarity(t_IndexSearcher *self, PyObject *arg, void *data);
        static PyObject *t_IndexSearcher_get__topReaderContext(t_IndexSearcher *self, void *data);
        static PyGetSetDef t_IndexSearcher__fields_[] = {
          DECLARE_GET_FIELD(t_IndexSearcher, defaultSimilarity),
          DECLARE_GET_FIELD(t_IndexSearcher, indexReader),
          DECLARE_GETSET_FIELD(t_IndexSearcher, similarity),
          DECLARE_GET_FIELD(t_IndexSearcher, topReaderContext),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexSearcher__methods_[] = {
          DECLARE_METHOD(t_IndexSearcher, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSearcher, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSearcher, collectionStatistics, METH_O),
          DECLARE_METHOD(t_IndexSearcher, createNormalizedWeight, METH_O),
          DECLARE_METHOD(t_IndexSearcher, doc, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, document, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, explain, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, getDefaultSimilarity, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexSearcher, getIndexReader, METH_NOARGS),
          DECLARE_METHOD(t_IndexSearcher, getSimilarity, METH_NOARGS),
          DECLARE_METHOD(t_IndexSearcher, getTopReaderContext, METH_NOARGS),
          DECLARE_METHOD(t_IndexSearcher, rewrite, METH_O),
          DECLARE_METHOD(t_IndexSearcher, search, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, searchAfter, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, setSimilarity, METH_O),
          DECLARE_METHOD(t_IndexSearcher, termStatistics, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexSearcher, t_IndexSearcher, ::java::lang::Object, IndexSearcher, t_IndexSearcher_init_, 0, 0, t_IndexSearcher__fields_, 0, 0);

        void t_IndexSearcher::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexSearcher), module, "IndexSearcher", 0);
          PyDict_SetItemString(PY_TYPE(IndexSearcher).tp_dict, "LeafSlice", make_descriptor(&PY_TYPE(IndexSearcher$LeafSlice)));
        }

        void t_IndexSearcher::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexSearcher).tp_dict, "class_", make_descriptor(IndexSearcher::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexSearcher).tp_dict, "wrapfn_", make_descriptor(t_IndexSearcher::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexSearcher).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexSearcher_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexSearcher::initializeClass, 1)))
            return NULL;
          return t_IndexSearcher::wrap_Object(IndexSearcher(((t_IndexSearcher *) arg)->object.this$));
        }
        static PyObject *t_IndexSearcher_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexSearcher::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexSearcher_init_(t_IndexSearcher *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              IndexSearcher object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
              {
                INT_CALL(object = IndexSearcher(a0));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
              IndexSearcher object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReaderContext::initializeClass, &a0))
              {
                INT_CALL(object = IndexSearcher(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
              ::java::util::concurrent::ExecutorService a1((jobject) NULL);
              IndexSearcher object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReaderContext::initializeClass, ::java::util::concurrent::ExecutorService::initializeClass, &a0, &a1))
              {
                INT_CALL(object = IndexSearcher(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::util::concurrent::ExecutorService a1((jobject) NULL);
              IndexSearcher object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::java::util::concurrent::ExecutorService::initializeClass, &a0, &a1))
              {
                INT_CALL(object = IndexSearcher(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexSearcher_collectionStatistics(t_IndexSearcher *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::search::CollectionStatistics result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.collectionStatistics(a0));
            return ::org::apache::lucene::search::t_CollectionStatistics::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "collectionStatistics", arg);
          return NULL;
        }

        static PyObject *t_IndexSearcher_createNormalizedWeight(t_IndexSearcher *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createNormalizedWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "createNormalizedWeight", arg);
          return NULL;
        }

        static PyObject *t_IndexSearcher_doc(t_IndexSearcher *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.doc(a0));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              jint a0;
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "IK", ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
              {
                OBJ_CALL(result = self->object.doc(a0, a1));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
            {
              jint a0;
              ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

              if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.doc(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "doc", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_document(t_IndexSearcher *self, PyObject *args)
        {
          jint a0;
          ::java::util::Set a1((jobject) NULL);
          PyTypeObject **p1;
          ::org::apache::lucene::document::Document result((jobject) NULL);

          if (!parseArgs(args, "IK", ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(result = self->object.document(a0, a1));
            return ::org::apache::lucene::document::t_Document::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "document", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_explain(t_IndexSearcher *self, PyObject *args)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.explain(a0, a1));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "explain", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_getDefaultSimilarity(PyTypeObject *type)
        {
          ::org::apache::lucene::search::similarities::Similarity result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::IndexSearcher::getDefaultSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(result);
        }

        static PyObject *t_IndexSearcher_getIndexReader(t_IndexSearcher *self)
        {
          ::org::apache::lucene::index::IndexReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexReader());
          return ::org::apache::lucene::index::t_IndexReader::wrap_Object(result);
        }

        static PyObject *t_IndexSearcher_getSimilarity(t_IndexSearcher *self)
        {
          ::org::apache::lucene::search::similarities::Similarity result((jobject) NULL);
          OBJ_CALL(result = self->object.getSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(result);
        }

        static PyObject *t_IndexSearcher_getTopReaderContext(t_IndexSearcher *self)
        {
          ::org::apache::lucene::index::IndexReaderContext result((jobject) NULL);
          OBJ_CALL(result = self->object.getTopReaderContext());
          return ::org::apache::lucene::index::t_IndexReaderContext::wrap_Object(result);
        }

        static PyObject *t_IndexSearcher_rewrite(t_IndexSearcher *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rewrite", arg);
          return NULL;
        }

        static PyObject *t_IndexSearcher_search(t_IndexSearcher *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::Collector a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.search(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.search(a0, a1));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);
              ::org::apache::lucene::search::Collector a2((jobject) NULL);

              if (!parseArgs(args, "kkk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.search(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkI", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.search(a0, a1, a2));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::search::Sort a2((jobject) NULL);
              ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

              if (!parseArgs(args, "kIk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.search(a0, a1, a2));
                return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::Sort a3((jobject) NULL);
              ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

              if (!parseArgs(args, "kkIk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.search(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
              }
            }
            break;
           case 6:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::Sort a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

              if (!parseArgs(args, "kkIkZZ", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = self->object.search(a0, a1, a2, a3, a4, a5));
                return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "search", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_searchAfter(t_IndexSearcher *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::search::ScoreDoc a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkI", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.searchAfter(a0, a1, a2));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::search::ScoreDoc a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::Sort a3((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkIk", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.searchAfter(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::search::ScoreDoc a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              ::org::apache::lucene::search::Filter a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkI", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.searchAfter(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 5:
            {
              ::org::apache::lucene::search::ScoreDoc a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              ::org::apache::lucene::search::Filter a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::Sort a4((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkIk", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = self->object.searchAfter(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 7:
            {
              ::org::apache::lucene::search::ScoreDoc a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              ::org::apache::lucene::search::Filter a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::Sort a4((jobject) NULL);
              jboolean a5;
              jboolean a6;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkIkZZ", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
              {
                OBJ_CALL(result = self->object.searchAfter(a0, a1, a2, a3, a4, a5, a6));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "searchAfter", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_setSimilarity(t_IndexSearcher *self, PyObject *arg)
        {
          ::org::apache::lucene::search::similarities::Similarity a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::Similarity::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setSimilarity(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setSimilarity", arg);
          return NULL;
        }

        static PyObject *t_IndexSearcher_termStatistics(t_IndexSearcher *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::org::apache::lucene::index::TermContext a1((jobject) NULL);
          ::org::apache::lucene::search::TermStatistics result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::TermContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.termStatistics(a0, a1));
            return ::org::apache::lucene::search::t_TermStatistics::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "termStatistics", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_toString(t_IndexSearcher *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(IndexSearcher), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_IndexSearcher_get__defaultSimilarity(t_IndexSearcher *self, void *data)
        {
          ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
          OBJ_CALL(value = self->object.getDefaultSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(value);
        }

        static PyObject *t_IndexSearcher_get__indexReader(t_IndexSearcher *self, void *data)
        {
          ::org::apache::lucene::index::IndexReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexReader());
          return ::org::apache::lucene::index::t_IndexReader::wrap_Object(value);
        }

        static PyObject *t_IndexSearcher_get__similarity(t_IndexSearcher *self, void *data)
        {
          ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
          OBJ_CALL(value = self->object.getSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(value);
        }
        static int t_IndexSearcher_set__similarity(t_IndexSearcher *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::Similarity::initializeClass, &value))
            {
              INT_CALL(self->object.setSimilarity(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "similarity", arg);
          return -1;
        }

        static PyObject *t_IndexSearcher_get__topReaderContext(t_IndexSearcher *self, void *data)
        {
          ::org::apache::lucene::index::IndexReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object.getTopReaderContext());
          return ::org::apache::lucene::index::t_IndexReaderContext::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexFormatTooOldException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexFormatTooOldException::class$ = NULL;
        jmethodID *IndexFormatTooOldException::mids$ = NULL;
        bool IndexFormatTooOldException::live$ = false;

        jclass IndexFormatTooOldException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexFormatTooOldException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_e6fb04e3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;Ljava/lang/String;)V");
            mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_init$_9c112331] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;III)V");
            mids$[mid_init$_b8e753a2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;III)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexFormatTooOldException::IndexFormatTooOldException(const ::org::apache::lucene::store::DataInput & a0, const ::java::lang::String & a1) : ::org::apache::lucene::index::CorruptIndexException(env->newObject(initializeClass, &mids$, mid_init$_e6fb04e3, a0.this$, a1.this$)) {}

        IndexFormatTooOldException::IndexFormatTooOldException(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::org::apache::lucene::index::CorruptIndexException(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

        IndexFormatTooOldException::IndexFormatTooOldException(const ::org::apache::lucene::store::DataInput & a0, jint a1, jint a2, jint a3) : ::org::apache::lucene::index::CorruptIndexException(env->newObject(initializeClass, &mids$, mid_init$_9c112331, a0.this$, a1, a2, a3)) {}

        IndexFormatTooOldException::IndexFormatTooOldException(const ::java::lang::String & a0, jint a1, jint a2, jint a3) : ::org::apache::lucene::index::CorruptIndexException(env->newObject(initializeClass, &mids$, mid_init$_b8e753a2, a0.this$, a1, a2, a3)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexFormatTooOldException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFormatTooOldException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexFormatTooOldException_init_(t_IndexFormatTooOldException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_IndexFormatTooOldException__methods_[] = {
          DECLARE_METHOD(t_IndexFormatTooOldException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFormatTooOldException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexFormatTooOldException, t_IndexFormatTooOldException, ::org::apache::lucene::index::CorruptIndexException, IndexFormatTooOldException, t_IndexFormatTooOldException_init_, 0, 0, 0, 0, 0);

        void t_IndexFormatTooOldException::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexFormatTooOldException), module, "IndexFormatTooOldException", 0);
        }

        void t_IndexFormatTooOldException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexFormatTooOldException).tp_dict, "class_", make_descriptor(IndexFormatTooOldException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexFormatTooOldException).tp_dict, "wrapfn_", make_descriptor(t_IndexFormatTooOldException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexFormatTooOldException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexFormatTooOldException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexFormatTooOldException::initializeClass, 1)))
            return NULL;
          return t_IndexFormatTooOldException::wrap_Object(IndexFormatTooOldException(((t_IndexFormatTooOldException *) arg)->object.this$));
        }
        static PyObject *t_IndexFormatTooOldException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexFormatTooOldException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexFormatTooOldException_init_(t_IndexFormatTooOldException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              IndexFormatTooOldException object((jobject) NULL);

              if (!parseArgs(args, "ks", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
              {
                INT_CALL(object = IndexFormatTooOldException(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              IndexFormatTooOldException object((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                INT_CALL(object = IndexFormatTooOldException(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              IndexFormatTooOldException object((jobject) NULL);

              if (!parseArgs(args, "kIII", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = IndexFormatTooOldException(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              IndexFormatTooOldException object((jobject) NULL);

              if (!parseArgs(args, "sIII", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = IndexFormatTooOldException(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Constants.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Constants::class$ = NULL;
        jmethodID *Constants::mids$ = NULL;
        bool Constants::live$ = false;
        jboolean Constants::FREE_BSD = (jboolean) 0;
        ::java::lang::String *Constants::JAVA_VENDOR = NULL;
        ::java::lang::String *Constants::JAVA_VERSION = NULL;
        jboolean Constants::JRE_IS_64BIT = (jboolean) 0;
        jboolean Constants::JRE_IS_MINIMUM_JAVA6 = (jboolean) 0;
        jboolean Constants::JRE_IS_MINIMUM_JAVA7 = (jboolean) 0;
        jboolean Constants::JRE_IS_MINIMUM_JAVA8 = (jboolean) 0;
        ::java::lang::String *Constants::JVM_NAME = NULL;
        ::java::lang::String *Constants::JVM_VENDOR = NULL;
        ::java::lang::String *Constants::JVM_VERSION = NULL;
        jboolean Constants::LINUX = (jboolean) 0;
        ::java::lang::String *Constants::LUCENE_MAIN_VERSION = NULL;
        ::java::lang::String *Constants::LUCENE_VERSION = NULL;
        jboolean Constants::MAC_OS_X = (jboolean) 0;
        ::java::lang::String *Constants::OS_ARCH = NULL;
        ::java::lang::String *Constants::OS_NAME = NULL;
        ::java::lang::String *Constants::OS_VERSION = NULL;
        jboolean Constants::SUN_OS = (jboolean) 0;
        jboolean Constants::WINDOWS = (jboolean) 0;

        jclass Constants::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Constants");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            FREE_BSD = env->getStaticBooleanField(cls, "FREE_BSD");
            JAVA_VENDOR = new ::java::lang::String(env->getStaticObjectField(cls, "JAVA_VENDOR", "Ljava/lang/String;"));
            JAVA_VERSION = new ::java::lang::String(env->getStaticObjectField(cls, "JAVA_VERSION", "Ljava/lang/String;"));
            JRE_IS_64BIT = env->getStaticBooleanField(cls, "JRE_IS_64BIT");
            JRE_IS_MINIMUM_JAVA6 = env->getStaticBooleanField(cls, "JRE_IS_MINIMUM_JAVA6");
            JRE_IS_MINIMUM_JAVA7 = env->getStaticBooleanField(cls, "JRE_IS_MINIMUM_JAVA7");
            JRE_IS_MINIMUM_JAVA8 = env->getStaticBooleanField(cls, "JRE_IS_MINIMUM_JAVA8");
            JVM_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "JVM_NAME", "Ljava/lang/String;"));
            JVM_VENDOR = new ::java::lang::String(env->getStaticObjectField(cls, "JVM_VENDOR", "Ljava/lang/String;"));
            JVM_VERSION = new ::java::lang::String(env->getStaticObjectField(cls, "JVM_VERSION", "Ljava/lang/String;"));
            LINUX = env->getStaticBooleanField(cls, "LINUX");
            LUCENE_MAIN_VERSION = new ::java::lang::String(env->getStaticObjectField(cls, "LUCENE_MAIN_VERSION", "Ljava/lang/String;"));
            LUCENE_VERSION = new ::java::lang::String(env->getStaticObjectField(cls, "LUCENE_VERSION", "Ljava/lang/String;"));
            MAC_OS_X = env->getStaticBooleanField(cls, "MAC_OS_X");
            OS_ARCH = new ::java::lang::String(env->getStaticObjectField(cls, "OS_ARCH", "Ljava/lang/String;"));
            OS_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "OS_NAME", "Ljava/lang/String;"));
            OS_VERSION = new ::java::lang::String(env->getStaticObjectField(cls, "OS_VERSION", "Ljava/lang/String;"));
            SUN_OS = env->getStaticBooleanField(cls, "SUN_OS");
            WINDOWS = env->getStaticBooleanField(cls, "WINDOWS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Constants_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Constants_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_Constants__methods_[] = {
          DECLARE_METHOD(t_Constants, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Constants, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Constants, t_Constants, ::java::lang::Object, Constants, abstract_init, 0, 0, 0, 0, 0);

        void t_Constants::install(PyObject *module)
        {
          installType(&PY_TYPE(Constants), module, "Constants", 0);
        }

        void t_Constants::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "class_", make_descriptor(Constants::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "wrapfn_", make_descriptor(t_Constants::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Constants::initializeClass);
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "FREE_BSD", make_descriptor(Constants::FREE_BSD));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JAVA_VENDOR", make_descriptor(j2p(*Constants::JAVA_VENDOR)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JAVA_VERSION", make_descriptor(j2p(*Constants::JAVA_VERSION)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JRE_IS_64BIT", make_descriptor(Constants::JRE_IS_64BIT));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JRE_IS_MINIMUM_JAVA6", make_descriptor(Constants::JRE_IS_MINIMUM_JAVA6));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JRE_IS_MINIMUM_JAVA7", make_descriptor(Constants::JRE_IS_MINIMUM_JAVA7));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JRE_IS_MINIMUM_JAVA8", make_descriptor(Constants::JRE_IS_MINIMUM_JAVA8));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JVM_NAME", make_descriptor(j2p(*Constants::JVM_NAME)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JVM_VENDOR", make_descriptor(j2p(*Constants::JVM_VENDOR)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JVM_VERSION", make_descriptor(j2p(*Constants::JVM_VERSION)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "LINUX", make_descriptor(Constants::LINUX));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "LUCENE_MAIN_VERSION", make_descriptor(j2p(*Constants::LUCENE_MAIN_VERSION)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "LUCENE_VERSION", make_descriptor(j2p(*Constants::LUCENE_VERSION)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "MAC_OS_X", make_descriptor(Constants::MAC_OS_X));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "OS_ARCH", make_descriptor(j2p(*Constants::OS_ARCH)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "OS_NAME", make_descriptor(j2p(*Constants::OS_NAME)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "OS_VERSION", make_descriptor(j2p(*Constants::OS_VERSION)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "SUN_OS", make_descriptor(Constants::SUN_OS));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "WINDOWS", make_descriptor(Constants::WINDOWS));
        }

        static PyObject *t_Constants_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Constants::initializeClass, 1)))
            return NULL;
          return t_Constants::wrap_Object(Constants(((t_Constants *) arg)->object.this$));
        }
        static PyObject *t_Constants_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Constants::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/QueryParserBase$MethodRemovedUseAnother.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *QueryParserBase$MethodRemovedUseAnother::class$ = NULL;
          jmethodID *QueryParserBase$MethodRemovedUseAnother::mids$ = NULL;
          bool QueryParserBase$MethodRemovedUseAnother::live$ = false;

          jclass QueryParserBase$MethodRemovedUseAnother::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/QueryParserBase$MethodRemovedUseAnother");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryParserBase$MethodRemovedUseAnother::QueryParserBase$MethodRemovedUseAnother() : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_QueryParserBase$MethodRemovedUseAnother_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParserBase$MethodRemovedUseAnother_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryParserBase$MethodRemovedUseAnother_init_(t_QueryParserBase$MethodRemovedUseAnother *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_QueryParserBase$MethodRemovedUseAnother__methods_[] = {
            DECLARE_METHOD(t_QueryParserBase$MethodRemovedUseAnother, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserBase$MethodRemovedUseAnother, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryParserBase$MethodRemovedUseAnother, t_QueryParserBase$MethodRemovedUseAnother, ::java::lang::Throwable, QueryParserBase$MethodRemovedUseAnother, t_QueryParserBase$MethodRemovedUseAnother_init_, 0, 0, 0, 0, 0);

          void t_QueryParserBase$MethodRemovedUseAnother::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryParserBase$MethodRemovedUseAnother), module, "QueryParserBase$MethodRemovedUseAnother", 0);
          }

          void t_QueryParserBase$MethodRemovedUseAnother::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryParserBase$MethodRemovedUseAnother).tp_dict, "class_", make_descriptor(QueryParserBase$MethodRemovedUseAnother::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryParserBase$MethodRemovedUseAnother).tp_dict, "wrapfn_", make_descriptor(t_QueryParserBase$MethodRemovedUseAnother::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryParserBase$MethodRemovedUseAnother).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryParserBase$MethodRemovedUseAnother_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryParserBase$MethodRemovedUseAnother::initializeClass, 1)))
              return NULL;
            return t_QueryParserBase$MethodRemovedUseAnother::wrap_Object(QueryParserBase$MethodRemovedUseAnother(((t_QueryParserBase$MethodRemovedUseAnother *) arg)->object.this$));
          }
          static PyObject *t_QueryParserBase$MethodRemovedUseAnother_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryParserBase$MethodRemovedUseAnother::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryParserBase$MethodRemovedUseAnother_init_(t_QueryParserBase$MethodRemovedUseAnother *self, PyObject *args, PyObject *kwds)
          {
            QueryParserBase$MethodRemovedUseAnother object((jobject) NULL);

            INT_CALL(object = QueryParserBase$MethodRemovedUseAnother());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/QueryParserBase.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "org/apache/lucene/queryparser/classic/QueryParser$Operator.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "java/lang/String.h"
#include "java/util/TimeZone.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "java/util/Locale.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *QueryParserBase::class$ = NULL;
          jmethodID *QueryParserBase::mids$ = NULL;
          bool QueryParserBase::live$ = false;
          ::org::apache::lucene::queryparser::classic::QueryParser$Operator *QueryParserBase::AND_OPERATOR = NULL;
          ::org::apache::lucene::queryparser::classic::QueryParser$Operator *QueryParserBase::OR_OPERATOR = NULL;

          jclass QueryParserBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/QueryParserBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_ReInit_24bde9d3] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/classic/CharStream;)V");
              mids$[mid_TopLevelQuery_fbed2634] = env->getMethodID(cls, "TopLevelQuery", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_escape_97a5258f] = env->getStaticMethodID(cls, "escape", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getAllowLeadingWildcard_54c6a16a] = env->getMethodID(cls, "getAllowLeadingWildcard", "()Z");
              mids$[mid_getAnalyzeRangeTerms_54c6a16a] = env->getMethodID(cls, "getAnalyzeRangeTerms", "()Z");
              mids$[mid_getAutoGeneratePhraseQueries_54c6a16a] = env->getMethodID(cls, "getAutoGeneratePhraseQueries", "()Z");
              mids$[mid_getDateResolution_65edc44f] = env->getMethodID(cls, "getDateResolution", "(Ljava/lang/String;)Lorg/apache/lucene/document/DateTools$Resolution;");
              mids$[mid_getDefaultOperator_cb1232dd] = env->getMethodID(cls, "getDefaultOperator", "()Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getFuzzyMinSim_54c6a176] = env->getMethodID(cls, "getFuzzyMinSim", "()F");
              mids$[mid_getFuzzyPrefixLength_54c6a179] = env->getMethodID(cls, "getFuzzyPrefixLength", "()I");
              mids$[mid_getLocale_8bb22876] = env->getMethodID(cls, "getLocale", "()Ljava/util/Locale;");
              mids$[mid_getLowercaseExpandedTerms_54c6a16a] = env->getMethodID(cls, "getLowercaseExpandedTerms", "()Z");
              mids$[mid_getMultiTermRewriteMethod_8919154b] = env->getMethodID(cls, "getMultiTermRewriteMethod", "()Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;");
              mids$[mid_getPhraseSlop_54c6a179] = env->getMethodID(cls, "getPhraseSlop", "()I");
              mids$[mid_getTimeZone_6cce40e5] = env->getMethodID(cls, "getTimeZone", "()Ljava/util/TimeZone;");
              mids$[mid_init_504c192d] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_parse_fbed2634] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setAllowLeadingWildcard_bb0c767f] = env->getMethodID(cls, "setAllowLeadingWildcard", "(Z)V");
              mids$[mid_setAnalyzeRangeTerms_bb0c767f] = env->getMethodID(cls, "setAnalyzeRangeTerms", "(Z)V");
              mids$[mid_setAutoGeneratePhraseQueries_bb0c767f] = env->getMethodID(cls, "setAutoGeneratePhraseQueries", "(Z)V");
              mids$[mid_setDateResolution_285c1498] = env->getMethodID(cls, "setDateResolution", "(Lorg/apache/lucene/document/DateTools$Resolution;)V");
              mids$[mid_setDateResolution_04dea022] = env->getMethodID(cls, "setDateResolution", "(Ljava/lang/String;Lorg/apache/lucene/document/DateTools$Resolution;)V");
              mids$[mid_setDefaultOperator_67ef4614] = env->getMethodID(cls, "setDefaultOperator", "(Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;)V");
              mids$[mid_setFuzzyMinSim_06298cab] = env->getMethodID(cls, "setFuzzyMinSim", "(F)V");
              mids$[mid_setFuzzyPrefixLength_39c7bd3c] = env->getMethodID(cls, "setFuzzyPrefixLength", "(I)V");
              mids$[mid_setLocale_56b0e4b3] = env->getMethodID(cls, "setLocale", "(Ljava/util/Locale;)V");
              mids$[mid_setLowercaseExpandedTerms_bb0c767f] = env->getMethodID(cls, "setLowercaseExpandedTerms", "(Z)V");
              mids$[mid_setMultiTermRewriteMethod_c3c3909e] = env->getMethodID(cls, "setMultiTermRewriteMethod", "(Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;)V");
              mids$[mid_setPhraseSlop_39c7bd3c] = env->getMethodID(cls, "setPhraseSlop", "(I)V");
              mids$[mid_setTimeZone_f7b32d20] = env->getMethodID(cls, "setTimeZone", "(Ljava/util/TimeZone;)V");
              mids$[mid_getFieldQuery_bd696f55] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRangeQuery_75fd45b6] = env->getMethodID(cls, "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_newRangeQuery_75fd45b6] = env->getMethodID(cls, "newRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFuzzyQuery_45995161] = env->getMethodID(cls, "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
              mids$[mid_getWildcardQuery_38d6e77e] = env->getMethodID(cls, "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_addClause_fea8e09e] = env->getMethodID(cls, "addClause", "(Ljava/util/List;IILorg/apache/lucene/search/Query;)V");
              mids$[mid_getBooleanQuery_bdd36d85] = env->getMethodID(cls, "getBooleanQuery", "(Ljava/util/List;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getBooleanQuery_3d190f1c] = env->getMethodID(cls, "getBooleanQuery", "(Ljava/util/List;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_newFieldQuery_1840ef4b] = env->getMethodID(cls, "newFieldQuery", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_newBooleanClause_e4ef4efe] = env->getMethodID(cls, "newBooleanClause", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/BooleanClause$Occur;)Lorg/apache/lucene/search/BooleanClause;");
              mids$[mid_newPrefixQuery_c8bbbdc7] = env->getMethodID(cls, "newPrefixQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/Query;");
              mids$[mid_newRegexpQuery_c8bbbdc7] = env->getMethodID(cls, "newRegexpQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/Query;");
              mids$[mid_newFuzzyQuery_6ce03264] = env->getMethodID(cls, "newFuzzyQuery", "(Lorg/apache/lucene/index/Term;FI)Lorg/apache/lucene/search/Query;");
              mids$[mid_analyzeMultitermTerm_e6160577] = env->getMethodID(cls, "analyzeMultitermTerm", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_newMatchAllDocsQuery_97e3851a] = env->getMethodID(cls, "newMatchAllDocsQuery", "()Lorg/apache/lucene/search/Query;");
              mids$[mid_newWildcardQuery_c8bbbdc7] = env->getMethodID(cls, "newWildcardQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRegexpQuery_38d6e77e] = env->getMethodID(cls, "getRegexpQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getPrefixQuery_38d6e77e] = env->getMethodID(cls, "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              AND_OPERATOR = new ::org::apache::lucene::queryparser::classic::QueryParser$Operator(env->getStaticObjectField(cls, "AND_OPERATOR", "Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;"));
              OR_OPERATOR = new ::org::apache::lucene::queryparser::classic::QueryParser$Operator(env->getStaticObjectField(cls, "OR_OPERATOR", "Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void QueryParserBase::ReInit(const ::org::apache::lucene::queryparser::classic::CharStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_ReInit_24bde9d3], a0.this$);
          }

          ::org::apache::lucene::search::Query QueryParserBase::TopLevelQuery(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_TopLevelQuery_fbed2634], a0.this$));
          }

          ::java::lang::String QueryParserBase::escape(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_escape_97a5258f], a0.this$));
          }

          jboolean QueryParserBase::getAllowLeadingWildcard() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getAllowLeadingWildcard_54c6a16a]);
          }

          jboolean QueryParserBase::getAnalyzeRangeTerms() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getAnalyzeRangeTerms_54c6a16a]);
          }

          jboolean QueryParserBase::getAutoGeneratePhraseQueries() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getAutoGeneratePhraseQueries_54c6a16a]);
          }

          ::org::apache::lucene::document::DateTools$Resolution QueryParserBase::getDateResolution(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::document::DateTools$Resolution(env->callObjectMethod(this$, mids$[mid_getDateResolution_65edc44f], a0.this$));
          }

          ::org::apache::lucene::queryparser::classic::QueryParser$Operator QueryParserBase::getDefaultOperator() const
          {
            return ::org::apache::lucene::queryparser::classic::QueryParser$Operator(env->callObjectMethod(this$, mids$[mid_getDefaultOperator_cb1232dd]));
          }

          ::java::lang::String QueryParserBase::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          jfloat QueryParserBase::getFuzzyMinSim() const
          {
            return env->callFloatMethod(this$, mids$[mid_getFuzzyMinSim_54c6a176]);
          }

          jint QueryParserBase::getFuzzyPrefixLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getFuzzyPrefixLength_54c6a179]);
          }

          ::java::util::Locale QueryParserBase::getLocale() const
          {
            return ::java::util::Locale(env->callObjectMethod(this$, mids$[mid_getLocale_8bb22876]));
          }

          jboolean QueryParserBase::getLowercaseExpandedTerms() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getLowercaseExpandedTerms_54c6a16a]);
          }

          ::org::apache::lucene::search::MultiTermQuery$RewriteMethod QueryParserBase::getMultiTermRewriteMethod() const
          {
            return ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->callObjectMethod(this$, mids$[mid_getMultiTermRewriteMethod_8919154b]));
          }

          jint QueryParserBase::getPhraseSlop() const
          {
            return env->callIntMethod(this$, mids$[mid_getPhraseSlop_54c6a179]);
          }

          ::java::util::TimeZone QueryParserBase::getTimeZone() const
          {
            return ::java::util::TimeZone(env->callObjectMethod(this$, mids$[mid_getTimeZone_6cce40e5]));
          }

          void QueryParserBase::init(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_init_504c192d], a0.this$, a1.this$, a2.this$);
          }

          ::org::apache::lucene::search::Query QueryParserBase::parse(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_fbed2634], a0.this$));
          }

          void QueryParserBase::setAllowLeadingWildcard(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAllowLeadingWildcard_bb0c767f], a0);
          }

          void QueryParserBase::setAnalyzeRangeTerms(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAnalyzeRangeTerms_bb0c767f], a0);
          }

          void QueryParserBase::setAutoGeneratePhraseQueries(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAutoGeneratePhraseQueries_bb0c767f], a0);
          }

          void QueryParserBase::setDateResolution(const ::org::apache::lucene::document::DateTools$Resolution & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDateResolution_285c1498], a0.this$);
          }

          void QueryParserBase::setDateResolution(const ::java::lang::String & a0, const ::org::apache::lucene::document::DateTools$Resolution & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setDateResolution_04dea022], a0.this$, a1.this$);
          }

          void QueryParserBase::setDefaultOperator(const ::org::apache::lucene::queryparser::classic::QueryParser$Operator & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDefaultOperator_67ef4614], a0.this$);
          }

          void QueryParserBase::setFuzzyMinSim(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFuzzyMinSim_06298cab], a0);
          }

          void QueryParserBase::setFuzzyPrefixLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFuzzyPrefixLength_39c7bd3c], a0);
          }

          void QueryParserBase::setLocale(const ::java::util::Locale & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setLocale_56b0e4b3], a0.this$);
          }

          void QueryParserBase::setLowercaseExpandedTerms(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setLowercaseExpandedTerms_bb0c767f], a0);
          }

          void QueryParserBase::setMultiTermRewriteMethod(const ::org::apache::lucene::search::MultiTermQuery$RewriteMethod & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMultiTermRewriteMethod_c3c3909e], a0.this$);
          }

          void QueryParserBase::setPhraseSlop(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPhraseSlop_39c7bd3c], a0);
          }

          void QueryParserBase::setTimeZone(const ::java::util::TimeZone & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTimeZone_f7b32d20], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/queryparser/classic/QueryParserBase$MethodRemovedUseAnother.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_QueryParserBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParserBase_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParserBase_ReInit(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_TopLevelQuery(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_escape(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParserBase_getAllowLeadingWildcard(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getAnalyzeRangeTerms(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getAutoGeneratePhraseQueries(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getDateResolution(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_getDefaultOperator(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getField(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getFuzzyMinSim(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getFuzzyPrefixLength(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getLocale(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getLowercaseExpandedTerms(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getMultiTermRewriteMethod(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getPhraseSlop(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getTimeZone(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_init(t_QueryParserBase *self, PyObject *args);
          static PyObject *t_QueryParserBase_parse(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setAllowLeadingWildcard(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setAnalyzeRangeTerms(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setAutoGeneratePhraseQueries(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setDateResolution(t_QueryParserBase *self, PyObject *args);
          static PyObject *t_QueryParserBase_setDefaultOperator(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setFuzzyMinSim(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setFuzzyPrefixLength(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setLocale(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setLowercaseExpandedTerms(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setMultiTermRewriteMethod(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setPhraseSlop(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setTimeZone(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_get__allowLeadingWildcard(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__allowLeadingWildcard(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__analyzeRangeTerms(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__analyzeRangeTerms(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__autoGeneratePhraseQueries(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__autoGeneratePhraseQueries(t_QueryParserBase *self, PyObject *arg, void *data);
          static int t_QueryParserBase_set__dateResolution(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__defaultOperator(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__defaultOperator(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__field(t_QueryParserBase *self, void *data);
          static PyObject *t_QueryParserBase_get__fuzzyMinSim(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__fuzzyMinSim(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__fuzzyPrefixLength(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__fuzzyPrefixLength(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__locale(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__locale(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__lowercaseExpandedTerms(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__lowercaseExpandedTerms(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__multiTermRewriteMethod(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__multiTermRewriteMethod(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__phraseSlop(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__phraseSlop(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__timeZone(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__timeZone(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyGetSetDef t_QueryParserBase__fields_[] = {
            DECLARE_GETSET_FIELD(t_QueryParserBase, allowLeadingWildcard),
            DECLARE_GETSET_FIELD(t_QueryParserBase, analyzeRangeTerms),
            DECLARE_GETSET_FIELD(t_QueryParserBase, autoGeneratePhraseQueries),
            DECLARE_SET_FIELD(t_QueryParserBase, dateResolution),
            DECLARE_GETSET_FIELD(t_QueryParserBase, defaultOperator),
            DECLARE_GET_FIELD(t_QueryParserBase, field),
            DECLARE_GETSET_FIELD(t_QueryParserBase, fuzzyMinSim),
            DECLARE_GETSET_FIELD(t_QueryParserBase, fuzzyPrefixLength),
            DECLARE_GETSET_FIELD(t_QueryParserBase, locale),
            DECLARE_GETSET_FIELD(t_QueryParserBase, lowercaseExpandedTerms),
            DECLARE_GETSET_FIELD(t_QueryParserBase, multiTermRewriteMethod),
            DECLARE_GETSET_FIELD(t_QueryParserBase, phraseSlop),
            DECLARE_GETSET_FIELD(t_QueryParserBase, timeZone),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryParserBase__methods_[] = {
            DECLARE_METHOD(t_QueryParserBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserBase, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserBase, ReInit, METH_O),
            DECLARE_METHOD(t_QueryParserBase, TopLevelQuery, METH_O),
            DECLARE_METHOD(t_QueryParserBase, escape, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserBase, getAllowLeadingWildcard, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getAnalyzeRangeTerms, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getAutoGeneratePhraseQueries, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getDateResolution, METH_O),
            DECLARE_METHOD(t_QueryParserBase, getDefaultOperator, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getField, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getFuzzyMinSim, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getFuzzyPrefixLength, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getLocale, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getLowercaseExpandedTerms, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getMultiTermRewriteMethod, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getPhraseSlop, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getTimeZone, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, init, METH_VARARGS),
            DECLARE_METHOD(t_QueryParserBase, parse, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setAllowLeadingWildcard, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setAnalyzeRangeTerms, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setAutoGeneratePhraseQueries, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setDateResolution, METH_VARARGS),
            DECLARE_METHOD(t_QueryParserBase, setDefaultOperator, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setFuzzyMinSim, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setFuzzyPrefixLength, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setLocale, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setLowercaseExpandedTerms, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setMultiTermRewriteMethod, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setPhraseSlop, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setTimeZone, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryParserBase, t_QueryParserBase, ::org::apache::lucene::util::QueryBuilder, QueryParserBase, abstract_init, 0, 0, t_QueryParserBase__fields_, 0, 0);

          void t_QueryParserBase::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryParserBase), module, "QueryParserBase", 0);
            PyDict_SetItemString(PY_TYPE(QueryParserBase).tp_dict, "MethodRemovedUseAnother", make_descriptor(&PY_TYPE(QueryParserBase$MethodRemovedUseAnother)));
          }

          void t_QueryParserBase::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryParserBase).tp_dict, "class_", make_descriptor(QueryParserBase::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryParserBase).tp_dict, "wrapfn_", make_descriptor(t_QueryParserBase::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryParserBase).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(QueryParserBase::initializeClass);
            PyDict_SetItemString(PY_TYPE(QueryParserBase).tp_dict, "AND_OPERATOR", make_descriptor(::org::apache::lucene::queryparser::classic::t_QueryParser$Operator::wrap_Object(*QueryParserBase::AND_OPERATOR)));
            PyDict_SetItemString(PY_TYPE(QueryParserBase).tp_dict, "OR_OPERATOR", make_descriptor(::org::apache::lucene::queryparser::classic::t_QueryParser$Operator::wrap_Object(*QueryParserBase::OR_OPERATOR)));
          }

          static PyObject *t_QueryParserBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryParserBase::initializeClass, 1)))
              return NULL;
            return t_QueryParserBase::wrap_Object(QueryParserBase(((t_QueryParserBase *) arg)->object.this$));
          }
          static PyObject *t_QueryParserBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryParserBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_QueryParserBase_ReInit(t_QueryParserBase *self, PyObject *arg)
          {
            ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.ReInit(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "ReInit", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_TopLevelQuery(t_QueryParserBase *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.TopLevelQuery(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "TopLevelQuery", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_escape(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::QueryParserBase::escape(a0));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "escape", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_getAllowLeadingWildcard(t_QueryParserBase *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getAllowLeadingWildcard());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_QueryParserBase_getAnalyzeRangeTerms(t_QueryParserBase *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getAnalyzeRangeTerms());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_QueryParserBase_getAutoGeneratePhraseQueries(t_QueryParserBase *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getAutoGeneratePhraseQueries());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_QueryParserBase_getDateResolution(t_QueryParserBase *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::document::DateTools$Resolution result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDateResolution(a0));
              return ::org::apache::lucene::document::t_DateTools$Resolution::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDateResolution", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_getDefaultOperator(t_QueryParserBase *self)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser$Operator result((jobject) NULL);
            OBJ_CALL(result = self->object.getDefaultOperator());
            return ::org::apache::lucene::queryparser::classic::t_QueryParser$Operator::wrap_Object(result);
          }

          static PyObject *t_QueryParserBase_getField(t_QueryParserBase *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getField());
            return j2p(result);
          }

          static PyObject *t_QueryParserBase_getFuzzyMinSim(t_QueryParserBase *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getFuzzyMinSim());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryParserBase_getFuzzyPrefixLength(t_QueryParserBase *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getFuzzyPrefixLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_QueryParserBase_getLocale(t_QueryParserBase *self)
          {
            ::java::util::Locale result((jobject) NULL);
            OBJ_CALL(result = self->object.getLocale());
            return ::java::util::t_Locale::wrap_Object(result);
          }

          static PyObject *t_QueryParserBase_getLowercaseExpandedTerms(t_QueryParserBase *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getLowercaseExpandedTerms());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_QueryParserBase_getMultiTermRewriteMethod(t_QueryParserBase *self)
          {
            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermRewriteMethod());
            return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(result);
          }

          static PyObject *t_QueryParserBase_getPhraseSlop(t_QueryParserBase *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPhraseSlop());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_QueryParserBase_getTimeZone(t_QueryParserBase *self)
          {
            ::java::util::TimeZone result((jobject) NULL);
            OBJ_CALL(result = self->object.getTimeZone());
            return ::java::util::t_TimeZone::wrap_Object(result);
          }

          static PyObject *t_QueryParserBase_init(t_QueryParserBase *self, PyObject *args)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);

            if (!parseArgs(args, "Ksk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
            {
              OBJ_CALL(self->object.init(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "init", args);
            return NULL;
          }

          static PyObject *t_QueryParserBase_parse(t_QueryParserBase *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.parse(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "parse", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setAllowLeadingWildcard(t_QueryParserBase *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setAllowLeadingWildcard(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAllowLeadingWildcard", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setAnalyzeRangeTerms(t_QueryParserBase *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setAnalyzeRangeTerms(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAnalyzeRangeTerms", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setAutoGeneratePhraseQueries(t_QueryParserBase *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setAutoGeneratePhraseQueries(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAutoGeneratePhraseQueries", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setDateResolution(t_QueryParserBase *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::document::DateTools$Resolution a0((jobject) NULL);
                PyTypeObject **p0;

                if (!parseArgs(args, "K", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &p0, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
                {
                  OBJ_CALL(self->object.setDateResolution(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::document::DateTools$Resolution a1((jobject) NULL);
                PyTypeObject **p1;

                if (!parseArgs(args, "sK", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
                {
                  OBJ_CALL(self->object.setDateResolution(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "setDateResolution", args);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setDefaultOperator(t_QueryParserBase *self, PyObject *arg)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser$Operator a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::org::apache::lucene::queryparser::classic::QueryParser$Operator::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::classic::t_QueryParser$Operator::parameters_))
            {
              OBJ_CALL(self->object.setDefaultOperator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDefaultOperator", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setFuzzyMinSim(t_QueryParserBase *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setFuzzyMinSim(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFuzzyMinSim", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setFuzzyPrefixLength(t_QueryParserBase *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setFuzzyPrefixLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFuzzyPrefixLength", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setLocale(t_QueryParserBase *self, PyObject *arg)
          {
            ::java::util::Locale a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setLocale(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLocale", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setLowercaseExpandedTerms(t_QueryParserBase *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setLowercaseExpandedTerms(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLowercaseExpandedTerms", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setMultiTermRewriteMethod(t_QueryParserBase *self, PyObject *arg)
          {
            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setMultiTermRewriteMethod(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMultiTermRewriteMethod", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setPhraseSlop(t_QueryParserBase *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPhraseSlop(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPhraseSlop", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setTimeZone(t_QueryParserBase *self, PyObject *arg)
          {
            ::java::util::TimeZone a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setTimeZone(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTimeZone", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_get__allowLeadingWildcard(t_QueryParserBase *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getAllowLeadingWildcard());
            Py_RETURN_BOOL(value);
          }
          static int t_QueryParserBase_set__allowLeadingWildcard(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAllowLeadingWildcard(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "allowLeadingWildcard", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__analyzeRangeTerms(t_QueryParserBase *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getAnalyzeRangeTerms());
            Py_RETURN_BOOL(value);
          }
          static int t_QueryParserBase_set__analyzeRangeTerms(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAnalyzeRangeTerms(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "analyzeRangeTerms", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__autoGeneratePhraseQueries(t_QueryParserBase *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getAutoGeneratePhraseQueries());
            Py_RETURN_BOOL(value);
          }
          static int t_QueryParserBase_set__autoGeneratePhraseQueries(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAutoGeneratePhraseQueries(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "autoGeneratePhraseQueries", arg);
            return -1;
          }

          static int t_QueryParserBase_set__dateResolution(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::document::DateTools$Resolution value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &value))
              {
                INT_CALL(self->object.setDateResolution(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "dateResolution", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__defaultOperator(t_QueryParserBase *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser$Operator value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultOperator());
            return ::org::apache::lucene::queryparser::classic::t_QueryParser$Operator::wrap_Object(value);
          }
          static int t_QueryParserBase_set__defaultOperator(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::queryparser::classic::QueryParser$Operator value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::QueryParser$Operator::initializeClass, &value))
              {
                INT_CALL(self->object.setDefaultOperator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "defaultOperator", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__field(t_QueryParserBase *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_QueryParserBase_get__fuzzyMinSim(t_QueryParserBase *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getFuzzyMinSim());
            return PyFloat_FromDouble((double) value);
          }
          static int t_QueryParserBase_set__fuzzyMinSim(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setFuzzyMinSim(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fuzzyMinSim", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__fuzzyPrefixLength(t_QueryParserBase *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getFuzzyPrefixLength());
            return PyInt_FromLong((long) value);
          }
          static int t_QueryParserBase_set__fuzzyPrefixLength(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setFuzzyPrefixLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fuzzyPrefixLength", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__locale(t_QueryParserBase *self, void *data)
          {
            ::java::util::Locale value((jobject) NULL);
            OBJ_CALL(value = self->object.getLocale());
            return ::java::util::t_Locale::wrap_Object(value);
          }
          static int t_QueryParserBase_set__locale(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Locale value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &value))
              {
                INT_CALL(self->object.setLocale(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "locale", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__lowercaseExpandedTerms(t_QueryParserBase *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getLowercaseExpandedTerms());
            Py_RETURN_BOOL(value);
          }
          static int t_QueryParserBase_set__lowercaseExpandedTerms(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setLowercaseExpandedTerms(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "lowercaseExpandedTerms", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__multiTermRewriteMethod(t_QueryParserBase *self, void *data)
          {
            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermRewriteMethod());
            return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(value);
          }
          static int t_QueryParserBase_set__multiTermRewriteMethod(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &value))
              {
                INT_CALL(self->object.setMultiTermRewriteMethod(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "multiTermRewriteMethod", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__phraseSlop(t_QueryParserBase *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPhraseSlop());
            return PyInt_FromLong((long) value);
          }
          static int t_QueryParserBase_set__phraseSlop(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPhraseSlop(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "phraseSlop", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__timeZone(t_QueryParserBase *self, void *data)
          {
            ::java::util::TimeZone value((jobject) NULL);
            OBJ_CALL(value = self->object.getTimeZone());
            return ::java::util::t_TimeZone::wrap_Object(value);
          }
          static int t_QueryParserBase_set__timeZone(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              ::java::util::TimeZone value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &value))
              {
                INT_CALL(self->object.setTimeZone(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "timeZone", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/NullFragmenter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *NullFragmenter::class$ = NULL;
          jmethodID *NullFragmenter::mids$ = NULL;
          bool NullFragmenter::live$ = false;

          jclass NullFragmenter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/NullFragmenter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_isNewFragment_54c6a16a] = env->getMethodID(cls, "isNewFragment", "()Z");
              mids$[mid_start_7d0c5392] = env->getMethodID(cls, "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NullFragmenter::NullFragmenter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean NullFragmenter::isNewFragment() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNewFragment_54c6a16a]);
          }

          void NullFragmenter::start(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_start_7d0c5392], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_NullFragmenter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NullFragmenter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NullFragmenter_init_(t_NullFragmenter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NullFragmenter_isNewFragment(t_NullFragmenter *self);
          static PyObject *t_NullFragmenter_start(t_NullFragmenter *self, PyObject *args);
          static PyObject *t_NullFragmenter_get__newFragment(t_NullFragmenter *self, void *data);
          static PyGetSetDef t_NullFragmenter__fields_[] = {
            DECLARE_GET_FIELD(t_NullFragmenter, newFragment),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NullFragmenter__methods_[] = {
            DECLARE_METHOD(t_NullFragmenter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NullFragmenter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NullFragmenter, isNewFragment, METH_NOARGS),
            DECLARE_METHOD(t_NullFragmenter, start, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NullFragmenter, t_NullFragmenter, ::java::lang::Object, NullFragmenter, t_NullFragmenter_init_, 0, 0, t_NullFragmenter__fields_, 0, 0);

          void t_NullFragmenter::install(PyObject *module)
          {
            installType(&PY_TYPE(NullFragmenter), module, "NullFragmenter", 0);
          }

          void t_NullFragmenter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NullFragmenter).tp_dict, "class_", make_descriptor(NullFragmenter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NullFragmenter).tp_dict, "wrapfn_", make_descriptor(t_NullFragmenter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NullFragmenter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NullFragmenter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NullFragmenter::initializeClass, 1)))
              return NULL;
            return t_NullFragmenter::wrap_Object(NullFragmenter(((t_NullFragmenter *) arg)->object.this$));
          }
          static PyObject *t_NullFragmenter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NullFragmenter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NullFragmenter_init_(t_NullFragmenter *self, PyObject *args, PyObject *kwds)
          {
            NullFragmenter object((jobject) NULL);

            INT_CALL(object = NullFragmenter());
            self->object = object;

            return 0;
          }

          static PyObject *t_NullFragmenter_isNewFragment(t_NullFragmenter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isNewFragment());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_NullFragmenter_start(t_NullFragmenter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.start(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "start", args);
            return NULL;
          }

          static PyObject *t_NullFragmenter_get__newFragment(t_NullFragmenter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isNewFragment());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/PorterStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *PorterStemmer::class$ = NULL;
        jmethodID *PorterStemmer::mids$ = NULL;
        bool PorterStemmer::live$ = false;

        jclass PorterStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/PorterStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PorterStemmer::PorterStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean PorterStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint PorterStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean PorterStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_PorterStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PorterStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PorterStemmer_init_(t_PorterStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PorterStemmer_equals(t_PorterStemmer *self, PyObject *args);
        static PyObject *t_PorterStemmer_hashCode(t_PorterStemmer *self, PyObject *args);
        static PyObject *t_PorterStemmer_stem(t_PorterStemmer *self, PyObject *args);

        static PyMethodDef t_PorterStemmer__methods_[] = {
          DECLARE_METHOD(t_PorterStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PorterStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PorterStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_PorterStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_PorterStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PorterStemmer, t_PorterStemmer, ::org::tartarus::snowball::SnowballProgram, PorterStemmer, t_PorterStemmer_init_, 0, 0, 0, 0, 0);

        void t_PorterStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(PorterStemmer), module, "PorterStemmer", 0);
        }

        void t_PorterStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PorterStemmer).tp_dict, "class_", make_descriptor(PorterStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PorterStemmer).tp_dict, "wrapfn_", make_descriptor(t_PorterStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PorterStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PorterStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PorterStemmer::initializeClass, 1)))
            return NULL;
          return t_PorterStemmer::wrap_Object(PorterStemmer(((t_PorterStemmer *) arg)->object.this$));
        }
        static PyObject *t_PorterStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PorterStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PorterStemmer_init_(t_PorterStemmer *self, PyObject *args, PyObject *kwds)
        {
          PorterStemmer object((jobject) NULL);

          INT_CALL(object = PorterStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_PorterStemmer_equals(t_PorterStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PorterStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PorterStemmer_hashCode(t_PorterStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(PorterStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_PorterStemmer_stem(t_PorterStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PorterStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/DrillSideways.h"
#include "org/apache/lucene/facet/DrillDownQuery.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/DrillSideways$DrillSidewaysResult.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/FieldDoc.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/Collector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *DrillSideways::class$ = NULL;
        jmethodID *DrillSideways::mids$ = NULL;
        bool DrillSideways::live$ = false;

        jclass DrillSideways::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/DrillSideways");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_47a6ec5e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState;)V");
            mids$[mid_init$_f1ca4e8d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;)V");
            mids$[mid_init$_0ea4c17f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState;)V");
            mids$[mid_search_f5942c04] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/facet/DrillDownQuery;Lorg/apache/lucene/search/Collector;)Lorg/apache/lucene/facet/DrillSideways$DrillSidewaysResult;");
            mids$[mid_search_37cfd26e] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/facet/DrillDownQuery;I)Lorg/apache/lucene/facet/DrillSideways$DrillSidewaysResult;");
            mids$[mid_search_32a5c782] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/facet/DrillDownQuery;I)Lorg/apache/lucene/facet/DrillSideways$DrillSidewaysResult;");
            mids$[mid_search_8da44ba0] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/facet/DrillDownQuery;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/FieldDoc;ILorg/apache/lucene/search/Sort;ZZ)Lorg/apache/lucene/facet/DrillSideways$DrillSidewaysResult;");
            mids$[mid_scoreSubDocsAtOnce_54c6a16a] = env->getMethodID(cls, "scoreSubDocsAtOnce", "()Z");
            mids$[mid_buildFacetsResult_3bbe989f] = env->getMethodID(cls, "buildFacetsResult", "(Lorg/apache/lucene/facet/FacetsCollector;[Lorg/apache/lucene/facet/FacetsCollector;[Ljava/lang/String;)Lorg/apache/lucene/facet/Facets;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DrillSideways::DrillSideways(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_47a6ec5e, a0.this$, a1.this$, a2.this$)) {}

        DrillSideways::DrillSideways(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f1ca4e8d, a0.this$, a1.this$, a2.this$)) {}

        DrillSideways::DrillSideways(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a2, const ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0ea4c17f, a0.this$, a1.this$, a2.this$, a3.this$)) {}

        ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult DrillSideways::search(const ::org::apache::lucene::facet::DrillDownQuery & a0, const ::org::apache::lucene::search::Collector & a1) const
        {
          return ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult(env->callObjectMethod(this$, mids$[mid_search_f5942c04], a0.this$, a1.this$));
        }

        ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult DrillSideways::search(const ::org::apache::lucene::facet::DrillDownQuery & a0, jint a1) const
        {
          return ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult(env->callObjectMethod(this$, mids$[mid_search_37cfd26e], a0.this$, a1));
        }

        ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult DrillSideways::search(const ::org::apache::lucene::search::ScoreDoc & a0, const ::org::apache::lucene::facet::DrillDownQuery & a1, jint a2) const
        {
          return ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult(env->callObjectMethod(this$, mids$[mid_search_32a5c782], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult DrillSideways::search(const ::org::apache::lucene::facet::DrillDownQuery & a0, const ::org::apache::lucene::search::Filter & a1, const ::org::apache::lucene::search::FieldDoc & a2, jint a3, const ::org::apache::lucene::search::Sort & a4, jboolean a5, jboolean a6) const
        {
          return ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult(env->callObjectMethod(this$, mids$[mid_search_8da44ba0], a0.this$, a1.this$, a2.this$, a3, a4.this$, a5, a6));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_DrillSideways_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DrillSideways_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DrillSideways_init_(t_DrillSideways *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DrillSideways_search(t_DrillSideways *self, PyObject *args);

        static PyMethodDef t_DrillSideways__methods_[] = {
          DECLARE_METHOD(t_DrillSideways, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DrillSideways, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DrillSideways, search, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DrillSideways, t_DrillSideways, ::java::lang::Object, DrillSideways, t_DrillSideways_init_, 0, 0, 0, 0, 0);

        void t_DrillSideways::install(PyObject *module)
        {
          installType(&PY_TYPE(DrillSideways), module, "DrillSideways", 0);
          PyDict_SetItemString(PY_TYPE(DrillSideways).tp_dict, "DrillSidewaysResult", make_descriptor(&PY_TYPE(DrillSideways$DrillSidewaysResult)));
        }

        void t_DrillSideways::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DrillSideways).tp_dict, "class_", make_descriptor(DrillSideways::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DrillSideways).tp_dict, "wrapfn_", make_descriptor(t_DrillSideways::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DrillSideways).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DrillSideways_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DrillSideways::initializeClass, 1)))
            return NULL;
          return t_DrillSideways::wrap_Object(DrillSideways(((t_DrillSideways *) arg)->object.this$));
        }
        static PyObject *t_DrillSideways_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DrillSideways::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DrillSideways_init_(t_DrillSideways *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
              ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState a2((jobject) NULL);
              DrillSideways object((jobject) NULL);

              if (!parseArgs(args, "kkk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = DrillSideways(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
              ::org::apache::lucene::facet::taxonomy::TaxonomyReader a2((jobject) NULL);
              DrillSideways object((jobject) NULL);

              if (!parseArgs(args, "kkk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = DrillSideways(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
              ::org::apache::lucene::facet::taxonomy::TaxonomyReader a2((jobject) NULL);
              ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState a3((jobject) NULL);
              DrillSideways object((jobject) NULL);

              if (!parseArgs(args, "kkkk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = DrillSideways(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DrillSideways_search(t_DrillSideways *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::facet::DrillDownQuery a0((jobject) NULL);
              ::org::apache::lucene::search::Collector a1((jobject) NULL);
              ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::facet::DrillDownQuery::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.search(a0, a1));
                return ::org::apache::lucene::facet::t_DrillSideways$DrillSidewaysResult::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::facet::DrillDownQuery a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::DrillDownQuery::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.search(a0, a1));
                return ::org::apache::lucene::facet::t_DrillSideways$DrillSidewaysResult::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::search::ScoreDoc a0((jobject) NULL);
              ::org::apache::lucene::facet::DrillDownQuery a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult result((jobject) NULL);

              if (!parseArgs(args, "kkI", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::facet::DrillDownQuery::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.search(a0, a1, a2));
                return ::org::apache::lucene::facet::t_DrillSideways$DrillSidewaysResult::wrap_Object(result);
              }
            }
            break;
           case 7:
            {
              ::org::apache::lucene::facet::DrillDownQuery a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);
              ::org::apache::lucene::search::FieldDoc a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::Sort a4((jobject) NULL);
              jboolean a5;
              jboolean a6;
              ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult result((jobject) NULL);

              if (!parseArgs(args, "kkkIkZZ", ::org::apache::lucene::facet::DrillDownQuery::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::FieldDoc::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
              {
                OBJ_CALL(result = self->object.search(a0, a1, a2, a3, a4, a5, a6));
                return ::org::apache::lucene::facet::t_DrillSideways$DrillSidewaysResult::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "search", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterDocsEnum.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterAtomicReader$FilterDocsEnum::class$ = NULL;
        jmethodID *FilterAtomicReader$FilterDocsEnum::mids$ = NULL;
        bool FilterAtomicReader$FilterDocsEnum::live$ = false;

        jclass FilterAtomicReader$FilterDocsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterAtomicReader$FilterDocsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_ea9b58a1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/DocsEnum;)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_attributes_f901022b] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterAtomicReader$FilterDocsEnum::FilterAtomicReader$FilterDocsEnum(const ::org::apache::lucene::index::DocsEnum & a0) : ::org::apache::lucene::index::DocsEnum(env->newObject(initializeClass, &mids$, mid_init$_ea9b58a1, a0.this$)) {}

        jint FilterAtomicReader$FilterDocsEnum::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        ::org::apache::lucene::util::AttributeSource FilterAtomicReader$FilterDocsEnum::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_f901022b]));
        }

        jlong FilterAtomicReader$FilterDocsEnum::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint FilterAtomicReader$FilterDocsEnum::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint FilterAtomicReader$FilterDocsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }

        jint FilterAtomicReader$FilterDocsEnum::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterAtomicReader$FilterDocsEnum_init_(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_advance(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_attributes(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_cost(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_docID(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_freq(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_nextDoc(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args);

        static PyMethodDef t_FilterAtomicReader$FilterDocsEnum__methods_[] = {
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, advance, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, attributes, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, cost, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, docID, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, freq, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, nextDoc, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterAtomicReader$FilterDocsEnum, t_FilterAtomicReader$FilterDocsEnum, ::org::apache::lucene::index::DocsEnum, FilterAtomicReader$FilterDocsEnum, t_FilterAtomicReader$FilterDocsEnum_init_, 0, 0, 0, 0, 0);

        void t_FilterAtomicReader$FilterDocsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterAtomicReader$FilterDocsEnum), module, "FilterAtomicReader$FilterDocsEnum", 0);
        }

        void t_FilterAtomicReader$FilterDocsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterDocsEnum).tp_dict, "class_", make_descriptor(FilterAtomicReader$FilterDocsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterDocsEnum).tp_dict, "wrapfn_", make_descriptor(t_FilterAtomicReader$FilterDocsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterDocsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterAtomicReader$FilterDocsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterAtomicReader$FilterDocsEnum::initializeClass, 1)))
            return NULL;
          return t_FilterAtomicReader$FilterDocsEnum::wrap_Object(FilterAtomicReader$FilterDocsEnum(((t_FilterAtomicReader$FilterDocsEnum *) arg)->object.this$));
        }
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterAtomicReader$FilterDocsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterAtomicReader$FilterDocsEnum_init_(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::DocsEnum a0((jobject) NULL);
          FilterAtomicReader$FilterDocsEnum object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::DocsEnum::initializeClass, &a0))
          {
            INT_CALL(object = FilterAtomicReader$FilterDocsEnum(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterAtomicReader$FilterDocsEnum_advance(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsEnum), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsEnum_attributes(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.attributes());
            return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsEnum), (PyObject *) self, "attributes", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsEnum_cost(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsEnum), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsEnum_docID(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsEnum), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsEnum_freq(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsEnum), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsEnum_nextDoc(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsEnum), (PyObject *) self, "nextDoc", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/ByteSequenceOutputs.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *ByteSequenceOutputs::class$ = NULL;
          jmethodID *ByteSequenceOutputs::mids$ = NULL;
          bool ByteSequenceOutputs::live$ = false;

          jclass ByteSequenceOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/ByteSequenceOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_0991fadd] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_common_0991fadd] = env->getMethodID(cls, "common", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getNoOutput_4ae19461] = env->getMethodID(cls, "getNoOutput", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getSingleton_f61c4f3f] = env->getStaticMethodID(cls, "getSingleton", "()Lorg/apache/lucene/util/fst/ByteSequenceOutputs;");
              mids$[mid_outputToString_edfda73b] = env->getMethodID(cls, "outputToString", "(Lorg/apache/lucene/util/BytesRef;)Ljava/lang/String;");
              mids$[mid_ramBytesUsed_7bc03dd8] = env->getMethodID(cls, "ramBytesUsed", "(Lorg/apache/lucene/util/BytesRef;)J");
              mids$[mid_read_78c77a42] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_skipOutput_f5d6a551] = env->getMethodID(cls, "skipOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_subtract_0991fadd] = env->getMethodID(cls, "subtract", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_write_178211b1] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::BytesRef ByteSequenceOutputs::add(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_add_0991fadd], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::BytesRef ByteSequenceOutputs::common(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_common_0991fadd], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::BytesRef ByteSequenceOutputs::getNoOutput() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getNoOutput_4ae19461]));
          }

          ByteSequenceOutputs ByteSequenceOutputs::getSingleton()
          {
            jclass cls = env->getClass(initializeClass);
            return ByteSequenceOutputs(env->callStaticObjectMethod(cls, mids$[mid_getSingleton_f61c4f3f]));
          }

          ::java::lang::String ByteSequenceOutputs::outputToString(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_edfda73b], a0.this$));
          }

          jlong ByteSequenceOutputs::ramBytesUsed(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_7bc03dd8], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef ByteSequenceOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_read_78c77a42], a0.this$));
          }

          void ByteSequenceOutputs::skipOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipOutput_f5d6a551], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef ByteSequenceOutputs::subtract(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_subtract_0991fadd], a0.this$, a1.this$));
          }

          void ByteSequenceOutputs::write(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_178211b1], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_ByteSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ByteSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ByteSequenceOutputs_of_(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_add(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_common(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_getNoOutput(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_getSingleton(PyTypeObject *type);
          static PyObject *t_ByteSequenceOutputs_outputToString(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_ramBytesUsed(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_read(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_skipOutput(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_subtract(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_write(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_get__noOutput(t_ByteSequenceOutputs *self, void *data);
          static PyObject *t_ByteSequenceOutputs_get__singleton(t_ByteSequenceOutputs *self, void *data);
          static PyObject *t_ByteSequenceOutputs_get__parameters_(t_ByteSequenceOutputs *self, void *data);
          static PyGetSetDef t_ByteSequenceOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_ByteSequenceOutputs, noOutput),
            DECLARE_GET_FIELD(t_ByteSequenceOutputs, singleton),
            DECLARE_GET_FIELD(t_ByteSequenceOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ByteSequenceOutputs__methods_[] = {
            DECLARE_METHOD(t_ByteSequenceOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ByteSequenceOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ByteSequenceOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, getSingleton, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_ByteSequenceOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, skipOutput, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ByteSequenceOutputs, t_ByteSequenceOutputs, ::org::apache::lucene::util::fst::Outputs, ByteSequenceOutputs, abstract_init, 0, 0, t_ByteSequenceOutputs__fields_, 0, 0);
          PyObject *t_ByteSequenceOutputs::wrap_Object(const ByteSequenceOutputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ByteSequenceOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ByteSequenceOutputs *self = (t_ByteSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_ByteSequenceOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ByteSequenceOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ByteSequenceOutputs *self = (t_ByteSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_ByteSequenceOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(ByteSequenceOutputs), module, "ByteSequenceOutputs", 0);
          }

          void t_ByteSequenceOutputs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ByteSequenceOutputs).tp_dict, "class_", make_descriptor(ByteSequenceOutputs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ByteSequenceOutputs).tp_dict, "wrapfn_", make_descriptor(t_ByteSequenceOutputs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ByteSequenceOutputs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ByteSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ByteSequenceOutputs::initializeClass, 1)))
              return NULL;
            return t_ByteSequenceOutputs::wrap_Object(ByteSequenceOutputs(((t_ByteSequenceOutputs *) arg)->object.this$));
          }
          static PyObject *t_ByteSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ByteSequenceOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ByteSequenceOutputs_of_(t_ByteSequenceOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_ByteSequenceOutputs_add(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_common(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_getNoOutput(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_getSingleton(PyTypeObject *type)
          {
            ByteSequenceOutputs result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::ByteSequenceOutputs::getSingleton());
            return t_ByteSequenceOutputs::wrap_Object(result);
          }

          static PyObject *t_ByteSequenceOutputs_outputToString(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_ramBytesUsed(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.ramBytesUsed(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_read(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_skipOutput(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipOutput(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "skipOutput", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_subtract(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_write(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_ByteSequenceOutputs_get__parameters_(t_ByteSequenceOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_ByteSequenceOutputs_get__noOutput(t_ByteSequenceOutputs *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_ByteSequenceOutputs_get__singleton(t_ByteSequenceOutputs *self, void *data)
          {
            ByteSequenceOutputs value((jobject) NULL);
            OBJ_CALL(value = self->object.getSingleton());
            return t_ByteSequenceOutputs::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/DistanceQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "org/apache/lucene/queryparser/surround/query/DistanceSubQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *DistanceQuery::class$ = NULL;
            jmethodID *DistanceQuery::mids$ = NULL;
            bool DistanceQuery::live$ = false;

            jclass DistanceQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/DistanceQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6c38956d] = env->getMethodID(cls, "<init>", "(Ljava/util/List;ZILjava/lang/String;Z)V");
                mids$[mid_addSpanQueries_0564f431] = env->getMethodID(cls, "addSpanQueries", "(Lorg/apache/lucene/queryparser/surround/query/SpanNearClauseFactory;)V");
                mids$[mid_distanceSubQueryNotAllowed_14c7b5c5] = env->getMethodID(cls, "distanceSubQueryNotAllowed", "()Ljava/lang/String;");
                mids$[mid_getOpDistance_54c6a179] = env->getMethodID(cls, "getOpDistance", "()I");
                mids$[mid_getSpanNearQuery_b440d198] = env->getMethodID(cls, "getSpanNearQuery", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;FLorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_subQueriesOrdered_54c6a16a] = env->getMethodID(cls, "subQueriesOrdered", "()Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DistanceQuery::DistanceQuery(const ::java::util::List & a0, jboolean a1, jint a2, const ::java::lang::String & a3, jboolean a4) : ::org::apache::lucene::queryparser::surround::query::ComposedQuery(env->newObject(initializeClass, &mids$, mid_init$_6c38956d, a0.this$, a1, a2, a3.this$, a4)) {}

            void DistanceQuery::addSpanQueries(const ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addSpanQueries_0564f431], a0.this$);
            }

            ::java::lang::String DistanceQuery::distanceSubQueryNotAllowed() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_distanceSubQueryNotAllowed_14c7b5c5]));
            }

            jint DistanceQuery::getOpDistance() const
            {
              return env->callIntMethod(this$, mids$[mid_getOpDistance_54c6a179]);
            }

            ::org::apache::lucene::search::Query DistanceQuery::getSpanNearQuery(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, jfloat a2, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a3) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getSpanNearQuery_b440d198], a0.this$, a1.this$, a2, a3.this$));
            }

            ::org::apache::lucene::search::Query DistanceQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30], a0.this$, a1.this$));
            }

            jboolean DistanceQuery::subQueriesOrdered() const
            {
              return env->callBooleanMethod(this$, mids$[mid_subQueriesOrdered_54c6a16a]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_DistanceQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DistanceQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DistanceQuery_init_(t_DistanceQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DistanceQuery_addSpanQueries(t_DistanceQuery *self, PyObject *arg);
            static PyObject *t_DistanceQuery_distanceSubQueryNotAllowed(t_DistanceQuery *self);
            static PyObject *t_DistanceQuery_getOpDistance(t_DistanceQuery *self);
            static PyObject *t_DistanceQuery_getSpanNearQuery(t_DistanceQuery *self, PyObject *args);
            static PyObject *t_DistanceQuery_makeLuceneQueryFieldNoBoost(t_DistanceQuery *self, PyObject *args);
            static PyObject *t_DistanceQuery_subQueriesOrdered(t_DistanceQuery *self);
            static PyObject *t_DistanceQuery_get__opDistance(t_DistanceQuery *self, void *data);
            static PyGetSetDef t_DistanceQuery__fields_[] = {
              DECLARE_GET_FIELD(t_DistanceQuery, opDistance),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DistanceQuery__methods_[] = {
              DECLARE_METHOD(t_DistanceQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DistanceQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DistanceQuery, addSpanQueries, METH_O),
              DECLARE_METHOD(t_DistanceQuery, distanceSubQueryNotAllowed, METH_NOARGS),
              DECLARE_METHOD(t_DistanceQuery, getOpDistance, METH_NOARGS),
              DECLARE_METHOD(t_DistanceQuery, getSpanNearQuery, METH_VARARGS),
              DECLARE_METHOD(t_DistanceQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              DECLARE_METHOD(t_DistanceQuery, subQueriesOrdered, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DistanceQuery, t_DistanceQuery, ::org::apache::lucene::queryparser::surround::query::ComposedQuery, DistanceQuery, t_DistanceQuery_init_, 0, 0, t_DistanceQuery__fields_, 0, 0);

            void t_DistanceQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(DistanceQuery), module, "DistanceQuery", 0);
            }

            void t_DistanceQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DistanceQuery).tp_dict, "class_", make_descriptor(DistanceQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DistanceQuery).tp_dict, "wrapfn_", make_descriptor(t_DistanceQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DistanceQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DistanceQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DistanceQuery::initializeClass, 1)))
                return NULL;
              return t_DistanceQuery::wrap_Object(DistanceQuery(((t_DistanceQuery *) arg)->object.this$));
            }
            static PyObject *t_DistanceQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DistanceQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DistanceQuery_init_(t_DistanceQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              jboolean a1;
              jint a2;
              ::java::lang::String a3((jobject) NULL);
              jboolean a4;
              DistanceQuery object((jobject) NULL);

              if (!parseArgs(args, "KZIsZ", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = DistanceQuery(a0, a1, a2, a3, a4));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DistanceQuery_addSpanQueries(t_DistanceQuery *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addSpanQueries(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addSpanQueries", arg);
              return NULL;
            }

            static PyObject *t_DistanceQuery_distanceSubQueryNotAllowed(t_DistanceQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.distanceSubQueryNotAllowed());
              return j2p(result);
            }

            static PyObject *t_DistanceQuery_getOpDistance(t_DistanceQuery *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getOpDistance());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_DistanceQuery_getSpanNearQuery(t_DistanceQuery *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jfloat a2;
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a3((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ksFk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getSpanNearQuery(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getSpanNearQuery", args);
              return NULL;
            }

            static PyObject *t_DistanceQuery_makeLuceneQueryFieldNoBoost(t_DistanceQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DistanceQuery), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }

            static PyObject *t_DistanceQuery_subQueriesOrdered(t_DistanceQuery *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.subQueriesOrdered());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_DistanceQuery_get__opDistance(t_DistanceQuery *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getOpDistance());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PagedBytes$PagedBytesDataInput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PagedBytes$PagedBytesDataInput::class$ = NULL;
        jmethodID *PagedBytes$PagedBytesDataInput::mids$ = NULL;
        bool PagedBytes$PagedBytesDataInput::live$ = false;

        jclass PagedBytes$PagedBytesDataInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PagedBytes$PagedBytesDataInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clone_da9ab8b7] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/PagedBytes$PagedBytesDataInput;");
            mids$[mid_getPosition_54c6a17a] = env->getMethodID(cls, "getPosition", "()J");
            mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_86f4435f] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_setPosition_0ee6df2f] = env->getMethodID(cls, "setPosition", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PagedBytes$PagedBytesDataInput PagedBytes$PagedBytesDataInput::clone() const
        {
          return PagedBytes$PagedBytesDataInput(env->callObjectMethod(this$, mids$[mid_clone_da9ab8b7]));
        }

        jlong PagedBytes$PagedBytesDataInput::getPosition() const
        {
          return env->callLongMethod(this$, mids$[mid_getPosition_54c6a17a]);
        }

        jbyte PagedBytes$PagedBytesDataInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
        }

        void PagedBytes$PagedBytesDataInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_86f4435f], a0.this$, a1, a2);
        }

        void PagedBytes$PagedBytesDataInput::setPosition(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setPosition_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PagedBytes$PagedBytesDataInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes$PagedBytesDataInput_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes$PagedBytesDataInput_clone(t_PagedBytes$PagedBytesDataInput *self, PyObject *args);
        static PyObject *t_PagedBytes$PagedBytesDataInput_getPosition(t_PagedBytes$PagedBytesDataInput *self);
        static PyObject *t_PagedBytes$PagedBytesDataInput_readByte(t_PagedBytes$PagedBytesDataInput *self, PyObject *args);
        static PyObject *t_PagedBytes$PagedBytesDataInput_readBytes(t_PagedBytes$PagedBytesDataInput *self, PyObject *args);
        static PyObject *t_PagedBytes$PagedBytesDataInput_setPosition(t_PagedBytes$PagedBytesDataInput *self, PyObject *arg);
        static PyObject *t_PagedBytes$PagedBytesDataInput_get__position(t_PagedBytes$PagedBytesDataInput *self, void *data);
        static int t_PagedBytes$PagedBytesDataInput_set__position(t_PagedBytes$PagedBytesDataInput *self, PyObject *arg, void *data);
        static PyGetSetDef t_PagedBytes$PagedBytesDataInput__fields_[] = {
          DECLARE_GETSET_FIELD(t_PagedBytes$PagedBytesDataInput, position),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PagedBytes$PagedBytesDataInput__methods_[] = {
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, clone, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, getPosition, METH_NOARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, readByte, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, setPosition, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PagedBytes$PagedBytesDataInput, t_PagedBytes$PagedBytesDataInput, ::org::apache::lucene::store::DataInput, PagedBytes$PagedBytesDataInput, abstract_init, 0, 0, t_PagedBytes$PagedBytesDataInput__fields_, 0, 0);

        void t_PagedBytes$PagedBytesDataInput::install(PyObject *module)
        {
          installType(&PY_TYPE(PagedBytes$PagedBytesDataInput), module, "PagedBytes$PagedBytesDataInput", 0);
        }

        void t_PagedBytes$PagedBytesDataInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PagedBytes$PagedBytesDataInput).tp_dict, "class_", make_descriptor(PagedBytes$PagedBytesDataInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PagedBytes$PagedBytesDataInput).tp_dict, "wrapfn_", make_descriptor(t_PagedBytes$PagedBytesDataInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PagedBytes$PagedBytesDataInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PagedBytes$PagedBytesDataInput::initializeClass, 1)))
            return NULL;
          return t_PagedBytes$PagedBytesDataInput::wrap_Object(PagedBytes$PagedBytesDataInput(((t_PagedBytes$PagedBytesDataInput *) arg)->object.this$));
        }
        static PyObject *t_PagedBytes$PagedBytesDataInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PagedBytes$PagedBytesDataInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_clone(t_PagedBytes$PagedBytesDataInput *self, PyObject *args)
        {
          PagedBytes$PagedBytesDataInput result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_PagedBytes$PagedBytesDataInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(PagedBytes$PagedBytesDataInput), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_getPosition(t_PagedBytes$PagedBytesDataInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getPosition());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_readByte(t_PagedBytes$PagedBytesDataInput *self, PyObject *args)
        {
          jbyte result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readByte());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(PagedBytes$PagedBytesDataInput), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_readBytes(t_PagedBytes$PagedBytesDataInput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PagedBytes$PagedBytesDataInput), (PyObject *) self, "readBytes", args, 2);
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_setPosition(t_PagedBytes$PagedBytesDataInput *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.setPosition(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setPosition", arg);
          return NULL;
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_get__position(t_PagedBytes$PagedBytesDataInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getPosition());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_PagedBytes$PagedBytesDataInput_set__position(t_PagedBytes$PagedBytesDataInput *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setPosition(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "position", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/DateFormat.h"
#include "java/util/Date.h"
#include "java/lang/String.h"
#include "java/util/Calendar.h"
#include "java/util/TimeZone.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/StringBuffer.h"
#include "java/text/NumberFormat.h"
#include "java/util/Locale.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *DateFormat::class$ = NULL;
    jmethodID *DateFormat::mids$ = NULL;
    bool DateFormat::live$ = false;
    jint DateFormat::AM_PM_FIELD = (jint) 0;
    jint DateFormat::DATE_FIELD = (jint) 0;
    jint DateFormat::DAY_OF_WEEK_FIELD = (jint) 0;
    jint DateFormat::DAY_OF_WEEK_IN_MONTH_FIELD = (jint) 0;
    jint DateFormat::DAY_OF_YEAR_FIELD = (jint) 0;
    jint DateFormat::DEFAULT = (jint) 0;
    jint DateFormat::ERA_FIELD = (jint) 0;
    jint DateFormat::FULL = (jint) 0;
    jint DateFormat::HOUR0_FIELD = (jint) 0;
    jint DateFormat::HOUR1_FIELD = (jint) 0;
    jint DateFormat::HOUR_OF_DAY0_FIELD = (jint) 0;
    jint DateFormat::HOUR_OF_DAY1_FIELD = (jint) 0;
    jint DateFormat::LONG = (jint) 0;
    jint DateFormat::MEDIUM = (jint) 0;
    jint DateFormat::MILLISECOND_FIELD = (jint) 0;
    jint DateFormat::MINUTE_FIELD = (jint) 0;
    jint DateFormat::MONTH_FIELD = (jint) 0;
    jint DateFormat::SECOND_FIELD = (jint) 0;
    jint DateFormat::SHORT = (jint) 0;
    jint DateFormat::TIMEZONE_FIELD = (jint) 0;
    jint DateFormat::WEEK_OF_MONTH_FIELD = (jint) 0;
    jint DateFormat::WEEK_OF_YEAR_FIELD = (jint) 0;
    jint DateFormat::YEAR_FIELD = (jint) 0;

    jclass DateFormat::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/DateFormat");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_format_60ff0f6a] = env->getMethodID(cls, "format", "(Ljava/util/Date;)Ljava/lang/String;");
        mids$[mid_getAvailableLocales_59cb5b46] = env->getStaticMethodID(cls, "getAvailableLocales", "()[Ljava/util/Locale;");
        mids$[mid_getCalendar_5a365c68] = env->getMethodID(cls, "getCalendar", "()Ljava/util/Calendar;");
        mids$[mid_getDateInstance_5b76e92a] = env->getStaticMethodID(cls, "getDateInstance", "()Ljava/text/DateFormat;");
        mids$[mid_getDateInstance_f487f948] = env->getStaticMethodID(cls, "getDateInstance", "(I)Ljava/text/DateFormat;");
        mids$[mid_getDateInstance_0c1a225b] = env->getStaticMethodID(cls, "getDateInstance", "(ILjava/util/Locale;)Ljava/text/DateFormat;");
        mids$[mid_getDateTimeInstance_5b76e92a] = env->getStaticMethodID(cls, "getDateTimeInstance", "()Ljava/text/DateFormat;");
        mids$[mid_getDateTimeInstance_47ab2552] = env->getStaticMethodID(cls, "getDateTimeInstance", "(II)Ljava/text/DateFormat;");
        mids$[mid_getDateTimeInstance_32c76395] = env->getStaticMethodID(cls, "getDateTimeInstance", "(IILjava/util/Locale;)Ljava/text/DateFormat;");
        mids$[mid_getInstance_5b76e92a] = env->getStaticMethodID(cls, "getInstance", "()Ljava/text/DateFormat;");
        mids$[mid_getNumberFormat_6b701965] = env->getMethodID(cls, "getNumberFormat", "()Ljava/text/NumberFormat;");
        mids$[mid_getTimeInstance_5b76e92a] = env->getStaticMethodID(cls, "getTimeInstance", "()Ljava/text/DateFormat;");
        mids$[mid_getTimeInstance_f487f948] = env->getStaticMethodID(cls, "getTimeInstance", "(I)Ljava/text/DateFormat;");
        mids$[mid_getTimeInstance_0c1a225b] = env->getStaticMethodID(cls, "getTimeInstance", "(ILjava/util/Locale;)Ljava/text/DateFormat;");
        mids$[mid_getTimeZone_6cce40e5] = env->getMethodID(cls, "getTimeZone", "()Ljava/util/TimeZone;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_isLenient_54c6a16a] = env->getMethodID(cls, "isLenient", "()Z");
        mids$[mid_parse_e1ca31a4] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)Ljava/util/Date;");
        mids$[mid_setCalendar_3b3fa6b1] = env->getMethodID(cls, "setCalendar", "(Ljava/util/Calendar;)V");
        mids$[mid_setLenient_bb0c767f] = env->getMethodID(cls, "setLenient", "(Z)V");
        mids$[mid_setNumberFormat_d2d1ba24] = env->getMethodID(cls, "setNumberFormat", "(Ljava/text/NumberFormat;)V");
        mids$[mid_setTimeZone_f7b32d20] = env->getMethodID(cls, "setTimeZone", "(Ljava/util/TimeZone;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        AM_PM_FIELD = env->getStaticIntField(cls, "AM_PM_FIELD");
        DATE_FIELD = env->getStaticIntField(cls, "DATE_FIELD");
        DAY_OF_WEEK_FIELD = env->getStaticIntField(cls, "DAY_OF_WEEK_FIELD");
        DAY_OF_WEEK_IN_MONTH_FIELD = env->getStaticIntField(cls, "DAY_OF_WEEK_IN_MONTH_FIELD");
        DAY_OF_YEAR_FIELD = env->getStaticIntField(cls, "DAY_OF_YEAR_FIELD");
        DEFAULT = env->getStaticIntField(cls, "DEFAULT");
        ERA_FIELD = env->getStaticIntField(cls, "ERA_FIELD");
        FULL = env->getStaticIntField(cls, "FULL");
        HOUR0_FIELD = env->getStaticIntField(cls, "HOUR0_FIELD");
        HOUR1_FIELD = env->getStaticIntField(cls, "HOUR1_FIELD");
        HOUR_OF_DAY0_FIELD = env->getStaticIntField(cls, "HOUR_OF_DAY0_FIELD");
        HOUR_OF_DAY1_FIELD = env->getStaticIntField(cls, "HOUR_OF_DAY1_FIELD");
        LONG = env->getStaticIntField(cls, "LONG");
        MEDIUM = env->getStaticIntField(cls, "MEDIUM");
        MILLISECOND_FIELD = env->getStaticIntField(cls, "MILLISECOND_FIELD");
        MINUTE_FIELD = env->getStaticIntField(cls, "MINUTE_FIELD");
        MONTH_FIELD = env->getStaticIntField(cls, "MONTH_FIELD");
        SECOND_FIELD = env->getStaticIntField(cls, "SECOND_FIELD");
        SHORT = env->getStaticIntField(cls, "SHORT");
        TIMEZONE_FIELD = env->getStaticIntField(cls, "TIMEZONE_FIELD");
        WEEK_OF_MONTH_FIELD = env->getStaticIntField(cls, "WEEK_OF_MONTH_FIELD");
        WEEK_OF_YEAR_FIELD = env->getStaticIntField(cls, "WEEK_OF_YEAR_FIELD");
        YEAR_FIELD = env->getStaticIntField(cls, "YEAR_FIELD");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::lang::Object DateFormat::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jboolean DateFormat::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::lang::String DateFormat::format(const ::java::util::Date & a0) const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_format_60ff0f6a], a0.this$));
    }

    JArray< ::java::util::Locale > DateFormat::getAvailableLocales()
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::util::Locale >(env->callStaticObjectMethod(cls, mids$[mid_getAvailableLocales_59cb5b46]));
    }

    ::java::util::Calendar DateFormat::getCalendar() const
    {
      return ::java::util::Calendar(env->callObjectMethod(this$, mids$[mid_getCalendar_5a365c68]));
    }

    DateFormat DateFormat::getDateInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateInstance_5b76e92a]));
    }

    DateFormat DateFormat::getDateInstance(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateInstance_f487f948], a0));
    }

    DateFormat DateFormat::getDateInstance(jint a0, const ::java::util::Locale & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateInstance_0c1a225b], a0, a1.this$));
    }

    DateFormat DateFormat::getDateTimeInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateTimeInstance_5b76e92a]));
    }

    DateFormat DateFormat::getDateTimeInstance(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateTimeInstance_47ab2552], a0, a1));
    }

    DateFormat DateFormat::getDateTimeInstance(jint a0, jint a1, const ::java::util::Locale & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateTimeInstance_32c76395], a0, a1, a2.this$));
    }

    DateFormat DateFormat::getInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getInstance_5b76e92a]));
    }

    ::java::text::NumberFormat DateFormat::getNumberFormat() const
    {
      return ::java::text::NumberFormat(env->callObjectMethod(this$, mids$[mid_getNumberFormat_6b701965]));
    }

    DateFormat DateFormat::getTimeInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getTimeInstance_5b76e92a]));
    }

    DateFormat DateFormat::getTimeInstance(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getTimeInstance_f487f948], a0));
    }

    DateFormat DateFormat::getTimeInstance(jint a0, const ::java::util::Locale & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getTimeInstance_0c1a225b], a0, a1.this$));
    }

    ::java::util::TimeZone DateFormat::getTimeZone() const
    {
      return ::java::util::TimeZone(env->callObjectMethod(this$, mids$[mid_getTimeZone_6cce40e5]));
    }

    jint DateFormat::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jboolean DateFormat::isLenient() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isLenient_54c6a16a]);
    }

    ::java::util::Date DateFormat::parse(const ::java::lang::String & a0) const
    {
      return ::java::util::Date(env->callObjectMethod(this$, mids$[mid_parse_e1ca31a4], a0.this$));
    }

    void DateFormat::setCalendar(const ::java::util::Calendar & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setCalendar_3b3fa6b1], a0.this$);
    }

    void DateFormat::setLenient(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setLenient_bb0c767f], a0);
    }

    void DateFormat::setNumberFormat(const ::java::text::NumberFormat & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setNumberFormat_d2d1ba24], a0.this$);
    }

    void DateFormat::setTimeZone(const ::java::util::TimeZone & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setTimeZone_f7b32d20], a0.this$);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_DateFormat_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_DateFormat_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_DateFormat_clone(t_DateFormat *self, PyObject *args);
    static PyObject *t_DateFormat_equals(t_DateFormat *self, PyObject *args);
    static PyObject *t_DateFormat_format(t_DateFormat *self, PyObject *args);
    static PyObject *t_DateFormat_getAvailableLocales(PyTypeObject *type);
    static PyObject *t_DateFormat_getCalendar(t_DateFormat *self);
    static PyObject *t_DateFormat_getDateInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_DateFormat_getDateTimeInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_DateFormat_getInstance(PyTypeObject *type);
    static PyObject *t_DateFormat_getNumberFormat(t_DateFormat *self);
    static PyObject *t_DateFormat_getTimeInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_DateFormat_getTimeZone(t_DateFormat *self);
    static PyObject *t_DateFormat_hashCode(t_DateFormat *self, PyObject *args);
    static PyObject *t_DateFormat_isLenient(t_DateFormat *self);
    static PyObject *t_DateFormat_parse(t_DateFormat *self, PyObject *arg);
    static PyObject *t_DateFormat_setCalendar(t_DateFormat *self, PyObject *arg);
    static PyObject *t_DateFormat_setLenient(t_DateFormat *self, PyObject *arg);
    static PyObject *t_DateFormat_setNumberFormat(t_DateFormat *self, PyObject *arg);
    static PyObject *t_DateFormat_setTimeZone(t_DateFormat *self, PyObject *arg);
    static PyObject *t_DateFormat_get__availableLocales(t_DateFormat *self, void *data);
    static PyObject *t_DateFormat_get__calendar(t_DateFormat *self, void *data);
    static int t_DateFormat_set__calendar(t_DateFormat *self, PyObject *arg, void *data);
    static PyObject *t_DateFormat_get__dateInstance(t_DateFormat *self, void *data);
    static PyObject *t_DateFormat_get__dateTimeInstance(t_DateFormat *self, void *data);
    static PyObject *t_DateFormat_get__instance(t_DateFormat *self, void *data);
    static PyObject *t_DateFormat_get__lenient(t_DateFormat *self, void *data);
    static int t_DateFormat_set__lenient(t_DateFormat *self, PyObject *arg, void *data);
    static PyObject *t_DateFormat_get__numberFormat(t_DateFormat *self, void *data);
    static int t_DateFormat_set__numberFormat(t_DateFormat *self, PyObject *arg, void *data);
    static PyObject *t_DateFormat_get__timeInstance(t_DateFormat *self, void *data);
    static PyObject *t_DateFormat_get__timeZone(t_DateFormat *self, void *data);
    static int t_DateFormat_set__timeZone(t_DateFormat *self, PyObject *arg, void *data);
    static PyGetSetDef t_DateFormat__fields_[] = {
      DECLARE_GET_FIELD(t_DateFormat, availableLocales),
      DECLARE_GETSET_FIELD(t_DateFormat, calendar),
      DECLARE_GET_FIELD(t_DateFormat, dateInstance),
      DECLARE_GET_FIELD(t_DateFormat, dateTimeInstance),
      DECLARE_GET_FIELD(t_DateFormat, instance),
      DECLARE_GETSET_FIELD(t_DateFormat, lenient),
      DECLARE_GETSET_FIELD(t_DateFormat, numberFormat),
      DECLARE_GET_FIELD(t_DateFormat, timeInstance),
      DECLARE_GETSET_FIELD(t_DateFormat, timeZone),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_DateFormat__methods_[] = {
      DECLARE_METHOD(t_DateFormat, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, clone, METH_VARARGS),
      DECLARE_METHOD(t_DateFormat, equals, METH_VARARGS),
      DECLARE_METHOD(t_DateFormat, format, METH_VARARGS),
      DECLARE_METHOD(t_DateFormat, getAvailableLocales, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, getCalendar, METH_NOARGS),
      DECLARE_METHOD(t_DateFormat, getDateInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, getDateTimeInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, getInstance, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, getNumberFormat, METH_NOARGS),
      DECLARE_METHOD(t_DateFormat, getTimeInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, getTimeZone, METH_NOARGS),
      DECLARE_METHOD(t_DateFormat, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_DateFormat, isLenient, METH_NOARGS),
      DECLARE_METHOD(t_DateFormat, parse, METH_O),
      DECLARE_METHOD(t_DateFormat, setCalendar, METH_O),
      DECLARE_METHOD(t_DateFormat, setLenient, METH_O),
      DECLARE_METHOD(t_DateFormat, setNumberFormat, METH_O),
      DECLARE_METHOD(t_DateFormat, setTimeZone, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(DateFormat, t_DateFormat, ::java::text::Format, DateFormat, abstract_init, 0, 0, t_DateFormat__fields_, 0, 0);

    void t_DateFormat::install(PyObject *module)
    {
      installType(&PY_TYPE(DateFormat), module, "DateFormat", 0);
    }

    void t_DateFormat::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "class_", make_descriptor(DateFormat::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "wrapfn_", make_descriptor(t_DateFormat::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
      env->getClass(DateFormat::initializeClass);
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "AM_PM_FIELD", make_descriptor(DateFormat::AM_PM_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "DATE_FIELD", make_descriptor(DateFormat::DATE_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "DAY_OF_WEEK_FIELD", make_descriptor(DateFormat::DAY_OF_WEEK_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "DAY_OF_WEEK_IN_MONTH_FIELD", make_descriptor(DateFormat::DAY_OF_WEEK_IN_MONTH_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "DAY_OF_YEAR_FIELD", make_descriptor(DateFormat::DAY_OF_YEAR_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "DEFAULT", make_descriptor(DateFormat::DEFAULT));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "ERA_FIELD", make_descriptor(DateFormat::ERA_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "FULL", make_descriptor(DateFormat::FULL));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "HOUR0_FIELD", make_descriptor(DateFormat::HOUR0_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "HOUR1_FIELD", make_descriptor(DateFormat::HOUR1_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "HOUR_OF_DAY0_FIELD", make_descriptor(DateFormat::HOUR_OF_DAY0_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "HOUR_OF_DAY1_FIELD", make_descriptor(DateFormat::HOUR_OF_DAY1_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "LONG", make_descriptor(DateFormat::LONG));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "MEDIUM", make_descriptor(DateFormat::MEDIUM));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "MILLISECOND_FIELD", make_descriptor(DateFormat::MILLISECOND_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "MINUTE_FIELD", make_descriptor(DateFormat::MINUTE_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "MONTH_FIELD", make_descriptor(DateFormat::MONTH_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "SECOND_FIELD", make_descriptor(DateFormat::SECOND_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "SHORT", make_descriptor(DateFormat::SHORT));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "TIMEZONE_FIELD", make_descriptor(DateFormat::TIMEZONE_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "WEEK_OF_MONTH_FIELD", make_descriptor(DateFormat::WEEK_OF_MONTH_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "WEEK_OF_YEAR_FIELD", make_descriptor(DateFormat::WEEK_OF_YEAR_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "YEAR_FIELD", make_descriptor(DateFormat::YEAR_FIELD));
    }

    static PyObject *t_DateFormat_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, DateFormat::initializeClass, 1)))
        return NULL;
      return t_DateFormat::wrap_Object(DateFormat(((t_DateFormat *) arg)->object.this$));
    }
    static PyObject *t_DateFormat_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, DateFormat::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_DateFormat_clone(t_DateFormat *self, PyObject *args)
    {
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.clone());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(DateFormat), (PyObject *) self, "clone", args, 2);
    }

    static PyObject *t_DateFormat_equals(t_DateFormat *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(DateFormat), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_DateFormat_format(t_DateFormat *self, PyObject *args)
    {
      ::java::util::Date a0((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "k", ::java::util::Date::initializeClass, &a0))
      {
        OBJ_CALL(result = self->object.format(a0));
        return j2p(result);
      }

      return callSuper(&PY_TYPE(DateFormat), (PyObject *) self, "format", args, 2);
    }

    static PyObject *t_DateFormat_getAvailableLocales(PyTypeObject *type)
    {
      JArray< ::java::util::Locale > result((jobject) NULL);
      OBJ_CALL(result = ::java::text::DateFormat::getAvailableLocales());
      return JArray<jobject>(result.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_DateFormat_getCalendar(t_DateFormat *self)
    {
      ::java::util::Calendar result((jobject) NULL);
      OBJ_CALL(result = self->object.getCalendar());
      return ::java::util::t_Calendar::wrap_Object(result);
    }

    static PyObject *t_DateFormat_getDateInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          DateFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::DateFormat::getDateInstance());
          return t_DateFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          jint a0;
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getDateInstance(a0));
            return t_DateFormat::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          jint a0;
          ::java::util::Locale a1((jobject) NULL);
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "Ik", ::java::util::Locale::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getDateInstance(a0, a1));
            return t_DateFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getDateInstance", args);
      return NULL;
    }

    static PyObject *t_DateFormat_getDateTimeInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          DateFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::DateFormat::getDateTimeInstance());
          return t_DateFormat::wrap_Object(result);
        }
        break;
       case 2:
        {
          jint a0;
          jint a1;
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getDateTimeInstance(a0, a1));
            return t_DateFormat::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          jint a0;
          jint a1;
          ::java::util::Locale a2((jobject) NULL);
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "IIk", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getDateTimeInstance(a0, a1, a2));
            return t_DateFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getDateTimeInstance", args);
      return NULL;
    }

    static PyObject *t_DateFormat_getInstance(PyTypeObject *type)
    {
      DateFormat result((jobject) NULL);
      OBJ_CALL(result = ::java::text::DateFormat::getInstance());
      return t_DateFormat::wrap_Object(result);
    }

    static PyObject *t_DateFormat_getNumberFormat(t_DateFormat *self)
    {
      ::java::text::NumberFormat result((jobject) NULL);
      OBJ_CALL(result = self->object.getNumberFormat());
      return ::java::text::t_NumberFormat::wrap_Object(result);
    }

    static PyObject *t_DateFormat_getTimeInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          DateFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::DateFormat::getTimeInstance());
          return t_DateFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          jint a0;
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getTimeInstance(a0));
            return t_DateFormat::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          jint a0;
          ::java::util::Locale a1((jobject) NULL);
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "Ik", ::java::util::Locale::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getTimeInstance(a0, a1));
            return t_DateFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getTimeInstance", args);
      return NULL;
    }

    static PyObject *t_DateFormat_getTimeZone(t_DateFormat *self)
    {
      ::java::util::TimeZone result((jobject) NULL);
      OBJ_CALL(result = self->object.getTimeZone());
      return ::java::util::t_TimeZone::wrap_Object(result);
    }

    static PyObject *t_DateFormat_hashCode(t_DateFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(DateFormat), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_DateFormat_isLenient(t_DateFormat *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isLenient());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_DateFormat_parse(t_DateFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::util::Date result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.parse(a0));
        return ::java::util::t_Date::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "parse", arg);
      return NULL;
    }

    static PyObject *t_DateFormat_setCalendar(t_DateFormat *self, PyObject *arg)
    {
      ::java::util::Calendar a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::util::Calendar::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setCalendar(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setCalendar", arg);
      return NULL;
    }

    static PyObject *t_DateFormat_setLenient(t_DateFormat *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setLenient(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setLenient", arg);
      return NULL;
    }

    static PyObject *t_DateFormat_setNumberFormat(t_DateFormat *self, PyObject *arg)
    {
      ::java::text::NumberFormat a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setNumberFormat(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setNumberFormat", arg);
      return NULL;
    }

    static PyObject *t_DateFormat_setTimeZone(t_DateFormat *self, PyObject *arg)
    {
      ::java::util::TimeZone a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setTimeZone(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setTimeZone", arg);
      return NULL;
    }

    static PyObject *t_DateFormat_get__availableLocales(t_DateFormat *self, void *data)
    {
      JArray< ::java::util::Locale > value((jobject) NULL);
      OBJ_CALL(value = self->object.getAvailableLocales());
      return JArray<jobject>(value.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_DateFormat_get__calendar(t_DateFormat *self, void *data)
    {
      ::java::util::Calendar value((jobject) NULL);
      OBJ_CALL(value = self->object.getCalendar());
      return ::java::util::t_Calendar::wrap_Object(value);
    }
    static int t_DateFormat_set__calendar(t_DateFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::util::Calendar value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::Calendar::initializeClass, &value))
        {
          INT_CALL(self->object.setCalendar(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "calendar", arg);
      return -1;
    }

    static PyObject *t_DateFormat_get__dateInstance(t_DateFormat *self, void *data)
    {
      DateFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getDateInstance());
      return t_DateFormat::wrap_Object(value);
    }

    static PyObject *t_DateFormat_get__dateTimeInstance(t_DateFormat *self, void *data)
    {
      DateFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getDateTimeInstance());
      return t_DateFormat::wrap_Object(value);
    }

    static PyObject *t_DateFormat_get__instance(t_DateFormat *self, void *data)
    {
      DateFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getInstance());
      return t_DateFormat::wrap_Object(value);
    }

    static PyObject *t_DateFormat_get__lenient(t_DateFormat *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isLenient());
      Py_RETURN_BOOL(value);
    }
    static int t_DateFormat_set__lenient(t_DateFormat *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setLenient(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "lenient", arg);
      return -1;
    }

    static PyObject *t_DateFormat_get__numberFormat(t_DateFormat *self, void *data)
    {
      ::java::text::NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getNumberFormat());
      return ::java::text::t_NumberFormat::wrap_Object(value);
    }
    static int t_DateFormat_set__numberFormat(t_DateFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::text::NumberFormat value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &value))
        {
          INT_CALL(self->object.setNumberFormat(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "numberFormat", arg);
      return -1;
    }

    static PyObject *t_DateFormat_get__timeInstance(t_DateFormat *self, void *data)
    {
      DateFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getTimeInstance());
      return t_DateFormat::wrap_Object(value);
    }

    static PyObject *t_DateFormat_get__timeZone(t_DateFormat *self, void *data)
    {
      ::java::util::TimeZone value((jobject) NULL);
      OBJ_CALL(value = self->object.getTimeZone());
      return ::java::util::t_TimeZone::wrap_Object(value);
    }
    static int t_DateFormat_set__timeZone(t_DateFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::util::TimeZone value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &value))
        {
          INT_CALL(self->object.setTimeZone(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "timeZone", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PagedBytes$Reader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PagedBytes$Reader::class$ = NULL;
        jmethodID *PagedBytes$Reader::mids$ = NULL;
        bool PagedBytes$Reader::live$ = false;

        jclass PagedBytes$Reader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PagedBytes$Reader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_fill_9e70a0dd] = env->getMethodID(cls, "fill", "(Lorg/apache/lucene/util/BytesRef;J)V");
            mids$[mid_fillSlice_8caa1345] = env->getMethodID(cls, "fillSlice", "(Lorg/apache/lucene/util/BytesRef;JI)V");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void PagedBytes$Reader::fill(const ::org::apache::lucene::util::BytesRef & a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_fill_9e70a0dd], a0.this$, a1);
        }

        void PagedBytes$Reader::fillSlice(const ::org::apache::lucene::util::BytesRef & a0, jlong a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_fillSlice_8caa1345], a0.this$, a1, a2);
        }

        jlong PagedBytes$Reader::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PagedBytes$Reader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes$Reader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes$Reader_fill(t_PagedBytes$Reader *self, PyObject *args);
        static PyObject *t_PagedBytes$Reader_fillSlice(t_PagedBytes$Reader *self, PyObject *args);
        static PyObject *t_PagedBytes$Reader_ramBytesUsed(t_PagedBytes$Reader *self);

        static PyMethodDef t_PagedBytes$Reader__methods_[] = {
          DECLARE_METHOD(t_PagedBytes$Reader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$Reader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$Reader, fill, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$Reader, fillSlice, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$Reader, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PagedBytes$Reader, t_PagedBytes$Reader, ::java::lang::Object, PagedBytes$Reader, abstract_init, 0, 0, 0, 0, 0);

        void t_PagedBytes$Reader::install(PyObject *module)
        {
          installType(&PY_TYPE(PagedBytes$Reader), module, "PagedBytes$Reader", 0);
        }

        void t_PagedBytes$Reader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PagedBytes$Reader).tp_dict, "class_", make_descriptor(PagedBytes$Reader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PagedBytes$Reader).tp_dict, "wrapfn_", make_descriptor(t_PagedBytes$Reader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PagedBytes$Reader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PagedBytes$Reader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PagedBytes$Reader::initializeClass, 1)))
            return NULL;
          return t_PagedBytes$Reader::wrap_Object(PagedBytes$Reader(((t_PagedBytes$Reader *) arg)->object.this$));
        }
        static PyObject *t_PagedBytes$Reader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PagedBytes$Reader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PagedBytes$Reader_fill(t_PagedBytes$Reader *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "kJ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.fill(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "fill", args);
          return NULL;
        }

        static PyObject *t_PagedBytes$Reader_fillSlice(t_PagedBytes$Reader *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong a1;
          jint a2;

          if (!parseArgs(args, "kJI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.fillSlice(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "fillSlice", args);
          return NULL;
        }

        static PyObject *t_PagedBytes$Reader_ramBytesUsed(t_PagedBytes$Reader *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/LevenshteinAutomata.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *LevenshteinAutomata::class$ = NULL;
          jmethodID *LevenshteinAutomata::mids$ = NULL;
          bool LevenshteinAutomata::live$ = false;
          jint LevenshteinAutomata::MAXIMUM_SUPPORTED_DISTANCE = (jint) 0;

          jclass LevenshteinAutomata::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/LevenshteinAutomata");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f3691645] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Z)V");
              mids$[mid_init$_1525174f] = env->getMethodID(cls, "<init>", "([IIZ)V");
              mids$[mid_toAutomaton_d5b8a843] = env->getMethodID(cls, "toAutomaton", "(I)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAXIMUM_SUPPORTED_DISTANCE = env->getStaticIntField(cls, "MAXIMUM_SUPPORTED_DISTANCE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LevenshteinAutomata::LevenshteinAutomata(const ::java::lang::String & a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f3691645, a0.this$, a1)) {}

          LevenshteinAutomata::LevenshteinAutomata(const JArray< jint > & a0, jint a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1525174f, a0.this$, a1, a2)) {}

          ::org::apache::lucene::util::automaton::Automaton LevenshteinAutomata::toAutomaton(jint a0) const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_d5b8a843], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_LevenshteinAutomata_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LevenshteinAutomata_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LevenshteinAutomata_init_(t_LevenshteinAutomata *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LevenshteinAutomata_toAutomaton(t_LevenshteinAutomata *self, PyObject *arg);

          static PyMethodDef t_LevenshteinAutomata__methods_[] = {
            DECLARE_METHOD(t_LevenshteinAutomata, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LevenshteinAutomata, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LevenshteinAutomata, toAutomaton, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LevenshteinAutomata, t_LevenshteinAutomata, ::java::lang::Object, LevenshteinAutomata, t_LevenshteinAutomata_init_, 0, 0, 0, 0, 0);

          void t_LevenshteinAutomata::install(PyObject *module)
          {
            installType(&PY_TYPE(LevenshteinAutomata), module, "LevenshteinAutomata", 0);
          }

          void t_LevenshteinAutomata::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LevenshteinAutomata).tp_dict, "class_", make_descriptor(LevenshteinAutomata::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LevenshteinAutomata).tp_dict, "wrapfn_", make_descriptor(t_LevenshteinAutomata::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LevenshteinAutomata).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(LevenshteinAutomata::initializeClass);
            PyDict_SetItemString(PY_TYPE(LevenshteinAutomata).tp_dict, "MAXIMUM_SUPPORTED_DISTANCE", make_descriptor(LevenshteinAutomata::MAXIMUM_SUPPORTED_DISTANCE));
          }

          static PyObject *t_LevenshteinAutomata_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LevenshteinAutomata::initializeClass, 1)))
              return NULL;
            return t_LevenshteinAutomata::wrap_Object(LevenshteinAutomata(((t_LevenshteinAutomata *) arg)->object.this$));
          }
          static PyObject *t_LevenshteinAutomata_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LevenshteinAutomata::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LevenshteinAutomata_init_(t_LevenshteinAutomata *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean a1;
                LevenshteinAutomata object((jobject) NULL);

                if (!parseArgs(args, "sZ", &a0, &a1))
                {
                  INT_CALL(object = LevenshteinAutomata(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                JArray< jint > a0((jobject) NULL);
                jint a1;
                jboolean a2;
                LevenshteinAutomata object((jobject) NULL);

                if (!parseArgs(args, "[IIZ", &a0, &a1, &a2))
                {
                  INT_CALL(object = LevenshteinAutomata(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LevenshteinAutomata_toAutomaton(t_LevenshteinAutomata *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.toAutomaton(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "toAutomaton", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/LucenePackage.h"
#include "java/lang/Class.h"
#include "java/lang/Package.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {

      ::java::lang::Class *LucenePackage::class$ = NULL;
      jmethodID *LucenePackage::mids$ = NULL;
      bool LucenePackage::live$ = false;

      jclass LucenePackage::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/apache/lucene/LucenePackage");

          mids$ = new jmethodID[max_mid];
          mids$[mid_get_b0f2f7bb] = env->getStaticMethodID(cls, "get", "()Ljava/lang/Package;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ::java::lang::Package LucenePackage::get()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::lang::Package(env->callStaticObjectMethod(cls, mids$[mid_get_b0f2f7bb]));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      static PyObject *t_LucenePackage_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_LucenePackage_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_LucenePackage_get(PyTypeObject *type);

      static PyMethodDef t_LucenePackage__methods_[] = {
        DECLARE_METHOD(t_LucenePackage, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_LucenePackage, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_LucenePackage, get, METH_NOARGS | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(LucenePackage, t_LucenePackage, ::java::lang::Object, LucenePackage, abstract_init, 0, 0, 0, 0, 0);

      void t_LucenePackage::install(PyObject *module)
      {
        installType(&PY_TYPE(LucenePackage), module, "LucenePackage", 0);
      }

      void t_LucenePackage::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(LucenePackage).tp_dict, "class_", make_descriptor(LucenePackage::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(LucenePackage).tp_dict, "wrapfn_", make_descriptor(t_LucenePackage::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(LucenePackage).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_LucenePackage_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, LucenePackage::initializeClass, 1)))
          return NULL;
        return t_LucenePackage::wrap_Object(LucenePackage(((t_LucenePackage *) arg)->object.this$));
      }
      static PyObject *t_LucenePackage_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, LucenePackage::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_LucenePackage_get(PyTypeObject *type)
      {
        ::java::lang::Package result((jobject) NULL);
        OBJ_CALL(result = ::org::apache::lucene::LucenePackage::get());
        return ::java::lang::t_Package::wrap_Object(result);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/MatchAllDocsQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *MatchAllDocsQueryNodeProcessor::class$ = NULL;
              jmethodID *MatchAllDocsQueryNodeProcessor::mids$ = NULL;
              bool MatchAllDocsQueryNodeProcessor::live$ = false;

              jclass MatchAllDocsQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/MatchAllDocsQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MatchAllDocsQueryNodeProcessor::MatchAllDocsQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_MatchAllDocsQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MatchAllDocsQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MatchAllDocsQueryNodeProcessor_init_(t_MatchAllDocsQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_MatchAllDocsQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_MatchAllDocsQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchAllDocsQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MatchAllDocsQueryNodeProcessor, t_MatchAllDocsQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, MatchAllDocsQueryNodeProcessor, t_MatchAllDocsQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_MatchAllDocsQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(MatchAllDocsQueryNodeProcessor), module, "MatchAllDocsQueryNodeProcessor", 0);
              }

              void t_MatchAllDocsQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNodeProcessor).tp_dict, "class_", make_descriptor(MatchAllDocsQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_MatchAllDocsQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MatchAllDocsQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MatchAllDocsQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_MatchAllDocsQueryNodeProcessor::wrap_Object(MatchAllDocsQueryNodeProcessor(((t_MatchAllDocsQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_MatchAllDocsQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MatchAllDocsQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MatchAllDocsQueryNodeProcessor_init_(t_MatchAllDocsQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                MatchAllDocsQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = MatchAllDocsQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelIn.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelIn::class$ = NULL;
          jmethodID *BasicModelIn::mids$ = NULL;
          bool BasicModelIn::live$ = false;

          jclass BasicModelIn::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelIn");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_05d4946a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;F)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelIn::BasicModelIn() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation BasicModelIn::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_05d4946a], a0.this$, a1));
          }

          jfloat BasicModelIn::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModelIn::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelIn_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelIn_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelIn_init_(t_BasicModelIn *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelIn_explain(t_BasicModelIn *self, PyObject *args);
          static PyObject *t_BasicModelIn_score(t_BasicModelIn *self, PyObject *args);
          static PyObject *t_BasicModelIn_toString(t_BasicModelIn *self, PyObject *args);

          static PyMethodDef t_BasicModelIn__methods_[] = {
            DECLARE_METHOD(t_BasicModelIn, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIn, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIn, explain, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelIn, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelIn, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModelIn, t_BasicModelIn, ::org::apache::lucene::search::similarities::BasicModel, BasicModelIn, t_BasicModelIn_init_, 0, 0, 0, 0, 0);

          void t_BasicModelIn::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelIn), module, "BasicModelIn", 0);
          }

          void t_BasicModelIn::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModelIn).tp_dict, "class_", make_descriptor(BasicModelIn::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModelIn).tp_dict, "wrapfn_", make_descriptor(t_BasicModelIn::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModelIn).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelIn_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelIn::initializeClass, 1)))
              return NULL;
            return t_BasicModelIn::wrap_Object(BasicModelIn(((t_BasicModelIn *) arg)->object.this$));
          }
          static PyObject *t_BasicModelIn_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelIn::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelIn_init_(t_BasicModelIn *self, PyObject *args, PyObject *kwds)
          {
            BasicModelIn object((jobject) NULL);

            INT_CALL(object = BasicModelIn());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelIn_explain(t_BasicModelIn *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BasicModelIn), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_BasicModelIn_score(t_BasicModelIn *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicModelIn), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelIn_toString(t_BasicModelIn *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModelIn), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40Codec.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40Codec::class$ = NULL;
          jmethodID *Lucene40Codec::mids$ = NULL;
          bool Lucene40Codec::live$ = false;

          jclass Lucene40Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getPostingsFormatForField_19d2f1c6] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40Codec::Lucene40Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesFormat Lucene40Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene40Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene40Codec::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_19d2f1c6], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene40Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene40Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene40Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene40Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene40Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene40Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40Codec_init_(t_Lucene40Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40Codec_docValuesFormat(t_Lucene40Codec *self, PyObject *args);
          static PyObject *t_Lucene40Codec_fieldInfosFormat(t_Lucene40Codec *self, PyObject *args);
          static PyObject *t_Lucene40Codec_getPostingsFormatForField(t_Lucene40Codec *self, PyObject *arg);
          static PyObject *t_Lucene40Codec_liveDocsFormat(t_Lucene40Codec *self, PyObject *args);
          static PyObject *t_Lucene40Codec_normsFormat(t_Lucene40Codec *self, PyObject *args);
          static PyObject *t_Lucene40Codec_postingsFormat(t_Lucene40Codec *self, PyObject *args);
          static PyObject *t_Lucene40Codec_segmentInfoFormat(t_Lucene40Codec *self, PyObject *args);
          static PyObject *t_Lucene40Codec_storedFieldsFormat(t_Lucene40Codec *self, PyObject *args);
          static PyObject *t_Lucene40Codec_termVectorsFormat(t_Lucene40Codec *self, PyObject *args);

          static PyMethodDef t_Lucene40Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene40Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40Codec, getPostingsFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene40Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40Codec, t_Lucene40Codec, ::org::apache::lucene::codecs::Codec, Lucene40Codec, t_Lucene40Codec_init_, 0, 0, 0, 0, 0);

          void t_Lucene40Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40Codec), module, "Lucene40Codec", 0);
          }

          void t_Lucene40Codec::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40Codec).tp_dict, "class_", make_descriptor(Lucene40Codec::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40Codec).tp_dict, "wrapfn_", make_descriptor(t_Lucene40Codec::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40Codec).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene40Codec::wrap_Object(Lucene40Codec(((t_Lucene40Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene40Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40Codec_init_(t_Lucene40Codec *self, PyObject *args, PyObject *kwds)
          {
            Lucene40Codec object((jobject) NULL);

            INT_CALL(object = Lucene40Codec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40Codec_docValuesFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene40Codec_fieldInfosFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene40Codec_getPostingsFormatForField(t_Lucene40Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene40Codec_liveDocsFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene40Codec_normsFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene40Codec_postingsFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene40Codec_segmentInfoFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene40Codec_storedFieldsFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene40Codec_termVectorsFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/LockStressTest.h"
#include "java/lang/Exception.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *LockStressTest::class$ = NULL;
        jmethodID *LockStressTest::mids$ = NULL;
        bool LockStressTest::live$ = false;

        jclass LockStressTest::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/LockStressTest");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LockStressTest::LockStressTest() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void LockStressTest::main(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_LockStressTest_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LockStressTest_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LockStressTest_init_(t_LockStressTest *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LockStressTest_main(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_LockStressTest__methods_[] = {
          DECLARE_METHOD(t_LockStressTest, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockStressTest, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockStressTest, main, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LockStressTest, t_LockStressTest, ::java::lang::Object, LockStressTest, t_LockStressTest_init_, 0, 0, 0, 0, 0);

        void t_LockStressTest::install(PyObject *module)
        {
          installType(&PY_TYPE(LockStressTest), module, "LockStressTest", 0);
        }

        void t_LockStressTest::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LockStressTest).tp_dict, "class_", make_descriptor(LockStressTest::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LockStressTest).tp_dict, "wrapfn_", make_descriptor(t_LockStressTest::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LockStressTest).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LockStressTest_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LockStressTest::initializeClass, 1)))
            return NULL;
          return t_LockStressTest::wrap_Object(LockStressTest(((t_LockStressTest *) arg)->object.this$));
        }
        static PyObject *t_LockStressTest_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LockStressTest::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LockStressTest_init_(t_LockStressTest *self, PyObject *args, PyObject *kwds)
        {
          LockStressTest object((jobject) NULL);

          INT_CALL(object = LockStressTest());
          self->object = object;

          return 0;
        }

        static PyObject *t_LockStressTest_main(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::java::lang::String > a0((jobject) NULL);

          if (!parseArg(arg, "[s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::store::LockStressTest::main(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "main", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$Floats.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$Floats::class$ = NULL;
        jmethodID *FieldCache$Floats::mids$ = NULL;
        bool FieldCache$Floats::live$ = false;
        FieldCache$Floats *FieldCache$Floats::EMPTY = NULL;

        jclass FieldCache$Floats::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$Floats");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_39c7bd2c] = env->getMethodID(cls, "get", "(I)F");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new FieldCache$Floats(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/FieldCache$Floats;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$Floats::FieldCache$Floats() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jfloat FieldCache$Floats::get(jint a0) const
        {
          return env->callFloatMethod(this$, mids$[mid_get_39c7bd2c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$Floats_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Floats_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$Floats_init_(t_FieldCache$Floats *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$Floats_get(t_FieldCache$Floats *self, PyObject *arg);

        static PyMethodDef t_FieldCache$Floats__methods_[] = {
          DECLARE_METHOD(t_FieldCache$Floats, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Floats, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Floats, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$Floats, t_FieldCache$Floats, ::java::lang::Object, FieldCache$Floats, t_FieldCache$Floats_init_, 0, 0, 0, 0, 0);

        void t_FieldCache$Floats::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$Floats), module, "FieldCache$Floats", 0);
        }

        void t_FieldCache$Floats::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$Floats).tp_dict, "class_", make_descriptor(FieldCache$Floats::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$Floats).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$Floats::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$Floats).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCache$Floats::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCache$Floats).tp_dict, "EMPTY", make_descriptor(t_FieldCache$Floats::wrap_Object(*FieldCache$Floats::EMPTY)));
        }

        static PyObject *t_FieldCache$Floats_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$Floats::initializeClass, 1)))
            return NULL;
          return t_FieldCache$Floats::wrap_Object(FieldCache$Floats(((t_FieldCache$Floats *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$Floats_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$Floats::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$Floats_init_(t_FieldCache$Floats *self, PyObject *args, PyObject *kwds)
        {
          FieldCache$Floats object((jobject) NULL);

          INT_CALL(object = FieldCache$Floats());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCache$Floats_get(t_FieldCache$Floats *self, PyObject *arg)
        {
          jint a0;
          jfloat result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexFormatTooNewException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexFormatTooNewException::class$ = NULL;
        jmethodID *IndexFormatTooNewException::mids$ = NULL;
        bool IndexFormatTooNewException::live$ = false;

        jclass IndexFormatTooNewException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexFormatTooNewException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b8e753a2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;III)V");
            mids$[mid_init$_9c112331] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;III)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexFormatTooNewException::IndexFormatTooNewException(const ::java::lang::String & a0, jint a1, jint a2, jint a3) : ::org::apache::lucene::index::CorruptIndexException(env->newObject(initializeClass, &mids$, mid_init$_b8e753a2, a0.this$, a1, a2, a3)) {}

        IndexFormatTooNewException::IndexFormatTooNewException(const ::org::apache::lucene::store::DataInput & a0, jint a1, jint a2, jint a3) : ::org::apache::lucene::index::CorruptIndexException(env->newObject(initializeClass, &mids$, mid_init$_9c112331, a0.this$, a1, a2, a3)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexFormatTooNewException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFormatTooNewException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexFormatTooNewException_init_(t_IndexFormatTooNewException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_IndexFormatTooNewException__methods_[] = {
          DECLARE_METHOD(t_IndexFormatTooNewException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFormatTooNewException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexFormatTooNewException, t_IndexFormatTooNewException, ::org::apache::lucene::index::CorruptIndexException, IndexFormatTooNewException, t_IndexFormatTooNewException_init_, 0, 0, 0, 0, 0);

        void t_IndexFormatTooNewException::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexFormatTooNewException), module, "IndexFormatTooNewException", 0);
        }

        void t_IndexFormatTooNewException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexFormatTooNewException).tp_dict, "class_", make_descriptor(IndexFormatTooNewException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexFormatTooNewException).tp_dict, "wrapfn_", make_descriptor(t_IndexFormatTooNewException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexFormatTooNewException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexFormatTooNewException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexFormatTooNewException::initializeClass, 1)))
            return NULL;
          return t_IndexFormatTooNewException::wrap_Object(IndexFormatTooNewException(((t_IndexFormatTooNewException *) arg)->object.this$));
        }
        static PyObject *t_IndexFormatTooNewException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexFormatTooNewException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexFormatTooNewException_init_(t_IndexFormatTooNewException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 4:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              IndexFormatTooNewException object((jobject) NULL);

              if (!parseArgs(args, "sIII", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = IndexFormatTooNewException(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              IndexFormatTooNewException object((jobject) NULL);

              if (!parseArgs(args, "kIII", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = IndexFormatTooNewException(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/PatternConsumer.h"
#include "java/util/ArrayList.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *PatternConsumer::class$ = NULL;
            jmethodID *PatternConsumer::mids$ = NULL;
            bool PatternConsumer::live$ = false;

            jclass PatternConsumer::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/PatternConsumer");

                mids$ = new jmethodID[max_mid];
                mids$[mid_addClass_5fdc3f48] = env->getMethodID(cls, "addClass", "(Ljava/lang/String;)V");
                mids$[mid_addException_069f7243] = env->getMethodID(cls, "addException", "(Ljava/lang/String;Ljava/util/ArrayList;)V");
                mids$[mid_addPattern_4a264742] = env->getMethodID(cls, "addPattern", "(Ljava/lang/String;Ljava/lang/String;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void PatternConsumer::addClass(const ::java::lang::String & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addClass_5fdc3f48], a0.this$);
            }

            void PatternConsumer::addException(const ::java::lang::String & a0, const ::java::util::ArrayList & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addException_069f7243], a0.this$, a1.this$);
            }

            void PatternConsumer::addPattern(const ::java::lang::String & a0, const ::java::lang::String & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addPattern_4a264742], a0.this$, a1.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_PatternConsumer_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PatternConsumer_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PatternConsumer_addClass(t_PatternConsumer *self, PyObject *arg);
            static PyObject *t_PatternConsumer_addException(t_PatternConsumer *self, PyObject *args);
            static PyObject *t_PatternConsumer_addPattern(t_PatternConsumer *self, PyObject *args);

            static PyMethodDef t_PatternConsumer__methods_[] = {
              DECLARE_METHOD(t_PatternConsumer, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PatternConsumer, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PatternConsumer, addClass, METH_O),
              DECLARE_METHOD(t_PatternConsumer, addException, METH_VARARGS),
              DECLARE_METHOD(t_PatternConsumer, addPattern, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(PatternConsumer, t_PatternConsumer, ::java::lang::Object, PatternConsumer, abstract_init, 0, 0, 0, 0, 0);

            void t_PatternConsumer::install(PyObject *module)
            {
              installType(&PY_TYPE(PatternConsumer), module, "PatternConsumer", 0);
            }

            void t_PatternConsumer::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(PatternConsumer).tp_dict, "class_", make_descriptor(PatternConsumer::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(PatternConsumer).tp_dict, "wrapfn_", make_descriptor(t_PatternConsumer::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(PatternConsumer).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_PatternConsumer_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, PatternConsumer::initializeClass, 1)))
                return NULL;
              return t_PatternConsumer::wrap_Object(PatternConsumer(((t_PatternConsumer *) arg)->object.this$));
            }
            static PyObject *t_PatternConsumer_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, PatternConsumer::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_PatternConsumer_addClass(t_PatternConsumer *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(self->object.addClass(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addClass", arg);
              return NULL;
            }

            static PyObject *t_PatternConsumer_addException(t_PatternConsumer *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::ArrayList a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "sK", ::java::util::ArrayList::initializeClass, &a0, &a1, &p1, ::java::util::t_ArrayList::parameters_))
              {
                OBJ_CALL(self->object.addException(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addException", args);
              return NULL;
            }

            static PyObject *t_PatternConsumer_addPattern(t_PatternConsumer *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(self->object.addPattern(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addPattern", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/MergeInfo.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *MergeInfo::class$ = NULL;
        jmethodID *MergeInfo::mids$ = NULL;
        jfieldID *MergeInfo::fids$ = NULL;
        bool MergeInfo::live$ = false;

        jclass MergeInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/MergeInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1629c044] = env->getMethodID(cls, "<init>", "(IJZI)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_estimatedMergeBytes] = env->getFieldID(cls, "estimatedMergeBytes", "J");
            fids$[fid_isExternal] = env->getFieldID(cls, "isExternal", "Z");
            fids$[fid_mergeMaxNumSegments] = env->getFieldID(cls, "mergeMaxNumSegments", "I");
            fids$[fid_totalDocCount] = env->getFieldID(cls, "totalDocCount", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergeInfo::MergeInfo(jint a0, jlong a1, jboolean a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1629c044, a0, a1, a2, a3)) {}

        jboolean MergeInfo::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint MergeInfo::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String MergeInfo::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jlong MergeInfo::_get_estimatedMergeBytes() const
        {
          return env->getLongField(this$, fids$[fid_estimatedMergeBytes]);
        }

        jboolean MergeInfo::_get_isExternal() const
        {
          return env->getBooleanField(this$, fids$[fid_isExternal]);
        }

        jint MergeInfo::_get_mergeMaxNumSegments() const
        {
          return env->getIntField(this$, fids$[fid_mergeMaxNumSegments]);
        }

        jint MergeInfo::_get_totalDocCount() const
        {
          return env->getIntField(this$, fids$[fid_totalDocCount]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_MergeInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergeInfo_init_(t_MergeInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergeInfo_equals(t_MergeInfo *self, PyObject *args);
        static PyObject *t_MergeInfo_hashCode(t_MergeInfo *self, PyObject *args);
        static PyObject *t_MergeInfo_toString(t_MergeInfo *self, PyObject *args);
        static PyObject *t_MergeInfo_get__estimatedMergeBytes(t_MergeInfo *self, void *data);
        static PyObject *t_MergeInfo_get__isExternal(t_MergeInfo *self, void *data);
        static PyObject *t_MergeInfo_get__mergeMaxNumSegments(t_MergeInfo *self, void *data);
        static PyObject *t_MergeInfo_get__totalDocCount(t_MergeInfo *self, void *data);

        static PyGetSetDef t_MergeInfo__fields_[] = {
          DECLARE_GET_FIELD(t_MergeInfo, estimatedMergeBytes),
          DECLARE_GET_FIELD(t_MergeInfo, isExternal),
          DECLARE_GET_FIELD(t_MergeInfo, mergeMaxNumSegments),
          DECLARE_GET_FIELD(t_MergeInfo, totalDocCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergeInfo__methods_[] = {
          DECLARE_METHOD(t_MergeInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeInfo, equals, METH_VARARGS),
          DECLARE_METHOD(t_MergeInfo, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_MergeInfo, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergeInfo, t_MergeInfo, ::java::lang::Object, MergeInfo, t_MergeInfo_init_, 0, 0, t_MergeInfo__fields_, 0, 0);

        void t_MergeInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeInfo), module, "MergeInfo", 0);
        }

        void t_MergeInfo::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergeInfo).tp_dict, "class_", make_descriptor(MergeInfo::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergeInfo).tp_dict, "wrapfn_", make_descriptor(t_MergeInfo::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergeInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergeInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeInfo::initializeClass, 1)))
            return NULL;
          return t_MergeInfo::wrap_Object(MergeInfo(((t_MergeInfo *) arg)->object.this$));
        }
        static PyObject *t_MergeInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergeInfo_init_(t_MergeInfo *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jlong a1;
          jboolean a2;
          jint a3;
          MergeInfo object((jobject) NULL);

          if (!parseArgs(args, "IJZI", &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = MergeInfo(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MergeInfo_equals(t_MergeInfo *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MergeInfo), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_MergeInfo_hashCode(t_MergeInfo *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MergeInfo), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_MergeInfo_toString(t_MergeInfo *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MergeInfo), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MergeInfo_get__estimatedMergeBytes(t_MergeInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_estimatedMergeBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_MergeInfo_get__isExternal(t_MergeInfo *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_isExternal());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_MergeInfo_get__mergeMaxNumSegments(t_MergeInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_mergeMaxNumSegments());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_MergeInfo_get__totalDocCount(t_MergeInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_totalDocCount());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/PrintTaxonomyStats.h"
#include "java/io/PrintStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *PrintTaxonomyStats::class$ = NULL;
          jmethodID *PrintTaxonomyStats::mids$ = NULL;
          bool PrintTaxonomyStats::live$ = false;

          jclass PrintTaxonomyStats::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/PrintTaxonomyStats");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
              mids$[mid_printStats_aafb31cf] = env->getStaticMethodID(cls, "printStats", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Ljava/io/PrintStream;Z)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PrintTaxonomyStats::PrintTaxonomyStats() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PrintTaxonomyStats::main(const JArray< ::java::lang::String > & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
          }

          void PrintTaxonomyStats::printStats(const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a0, const ::java::io::PrintStream & a1, jboolean a2)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_printStats_aafb31cf], a0.this$, a1.this$, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_PrintTaxonomyStats_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PrintTaxonomyStats_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PrintTaxonomyStats_init_(t_PrintTaxonomyStats *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PrintTaxonomyStats_main(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PrintTaxonomyStats_printStats(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_PrintTaxonomyStats__methods_[] = {
            DECLARE_METHOD(t_PrintTaxonomyStats, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrintTaxonomyStats, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrintTaxonomyStats, main, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrintTaxonomyStats, printStats, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PrintTaxonomyStats, t_PrintTaxonomyStats, ::java::lang::Object, PrintTaxonomyStats, t_PrintTaxonomyStats_init_, 0, 0, 0, 0, 0);

          void t_PrintTaxonomyStats::install(PyObject *module)
          {
            installType(&PY_TYPE(PrintTaxonomyStats), module, "PrintTaxonomyStats", 0);
          }

          void t_PrintTaxonomyStats::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PrintTaxonomyStats).tp_dict, "class_", make_descriptor(PrintTaxonomyStats::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PrintTaxonomyStats).tp_dict, "wrapfn_", make_descriptor(t_PrintTaxonomyStats::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PrintTaxonomyStats).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PrintTaxonomyStats_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PrintTaxonomyStats::initializeClass, 1)))
              return NULL;
            return t_PrintTaxonomyStats::wrap_Object(PrintTaxonomyStats(((t_PrintTaxonomyStats *) arg)->object.this$));
          }
          static PyObject *t_PrintTaxonomyStats_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PrintTaxonomyStats::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PrintTaxonomyStats_init_(t_PrintTaxonomyStats *self, PyObject *args, PyObject *kwds)
          {
            PrintTaxonomyStats object((jobject) NULL);

            INT_CALL(object = PrintTaxonomyStats());
            self->object = object;

            return 0;
          }

          static PyObject *t_PrintTaxonomyStats_main(PyTypeObject *type, PyObject *arg)
          {
            JArray< ::java::lang::String > a0((jobject) NULL);

            if (!parseArg(arg, "[s", &a0))
            {
              OBJ_CALL(::org::apache::lucene::facet::taxonomy::PrintTaxonomyStats::main(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "main", arg);
            return NULL;
          }

          static PyObject *t_PrintTaxonomyStats_printStats(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::facet::taxonomy::TaxonomyReader a0((jobject) NULL);
            ::java::io::PrintStream a1((jobject) NULL);
            jboolean a2;

            if (!parseArgs(args, "kkZ", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(::org::apache::lucene::facet::taxonomy::PrintTaxonomyStats::printStats(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "printStats", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/BufferedInputIterator.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *BufferedInputIterator::class$ = NULL;
          jmethodID *BufferedInputIterator::mids$ = NULL;
          bool BufferedInputIterator::live$ = false;

          jclass BufferedInputIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/BufferedInputIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1754a234] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
              mids$[mid_contexts_03e99967] = env->getMethodID(cls, "contexts", "()Ljava/util/Set;");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_hasContexts_54c6a16a] = env->getMethodID(cls, "hasContexts", "()Z");
              mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_payload_4ae19461] = env->getMethodID(cls, "payload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BufferedInputIterator::BufferedInputIterator(const ::org::apache::lucene::search::suggest::InputIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1754a234, a0.this$)) {}

          ::java::util::Set BufferedInputIterator::contexts() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_contexts_03e99967]));
          }

          ::java::util::Comparator BufferedInputIterator::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          jboolean BufferedInputIterator::hasContexts() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasContexts_54c6a16a]);
          }

          jboolean BufferedInputIterator::hasPayloads() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
          }

          ::org::apache::lucene::util::BytesRef BufferedInputIterator::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          ::org::apache::lucene::util::BytesRef BufferedInputIterator::payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_payload_4ae19461]));
          }

          jlong BufferedInputIterator::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_BufferedInputIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BufferedInputIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BufferedInputIterator_init_(t_BufferedInputIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BufferedInputIterator_contexts(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_getComparator(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_hasContexts(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_hasPayloads(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_next(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_payload(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_weight(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_get__comparator(t_BufferedInputIterator *self, void *data);
          static PyGetSetDef t_BufferedInputIterator__fields_[] = {
            DECLARE_GET_FIELD(t_BufferedInputIterator, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BufferedInputIterator__methods_[] = {
            DECLARE_METHOD(t_BufferedInputIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BufferedInputIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BufferedInputIterator, contexts, METH_NOARGS),
            DECLARE_METHOD(t_BufferedInputIterator, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_BufferedInputIterator, hasContexts, METH_NOARGS),
            DECLARE_METHOD(t_BufferedInputIterator, hasPayloads, METH_NOARGS),
            DECLARE_METHOD(t_BufferedInputIterator, next, METH_NOARGS),
            DECLARE_METHOD(t_BufferedInputIterator, payload, METH_NOARGS),
            DECLARE_METHOD(t_BufferedInputIterator, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BufferedInputIterator, t_BufferedInputIterator, ::java::lang::Object, BufferedInputIterator, t_BufferedInputIterator_init_, PyObject_SelfIter, ((PyObject *(*)(t_BufferedInputIterator *)) get_next< t_BufferedInputIterator,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_BufferedInputIterator__fields_, 0, 0);

          void t_BufferedInputIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(BufferedInputIterator), module, "BufferedInputIterator", 0);
          }

          void t_BufferedInputIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BufferedInputIterator).tp_dict, "class_", make_descriptor(BufferedInputIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BufferedInputIterator).tp_dict, "wrapfn_", make_descriptor(t_BufferedInputIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BufferedInputIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BufferedInputIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BufferedInputIterator::initializeClass, 1)))
              return NULL;
            return t_BufferedInputIterator::wrap_Object(BufferedInputIterator(((t_BufferedInputIterator *) arg)->object.this$));
          }
          static PyObject *t_BufferedInputIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BufferedInputIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BufferedInputIterator_init_(t_BufferedInputIterator *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);
            BufferedInputIterator object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
            {
              INT_CALL(object = BufferedInputIterator(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BufferedInputIterator_contexts(t_BufferedInputIterator *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.contexts());
            return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_BufferedInputIterator_getComparator(t_BufferedInputIterator *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_BufferedInputIterator_hasContexts(t_BufferedInputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasContexts());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_BufferedInputIterator_hasPayloads(t_BufferedInputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_BufferedInputIterator_next(t_BufferedInputIterator *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_BufferedInputIterator_payload(t_BufferedInputIterator *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.payload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_BufferedInputIterator_weight(t_BufferedInputIterator *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BufferedInputIterator_get__comparator(t_BufferedInputIterator *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BooleanQuery::class$ = NULL;
        jmethodID *BooleanQuery::mids$ = NULL;
        bool BooleanQuery::live$ = false;

        jclass BooleanQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BooleanQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
            mids$[mid_add_982477b6] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/BooleanClause;)V");
            mids$[mid_add_827be425] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/BooleanClause$Occur;)V");
            mids$[mid_clauses_87851566] = env->getMethodID(cls, "clauses", "()Ljava/util/List;");
            mids$[mid_clone_6f9339e7] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/BooleanQuery;");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getClauses_e6b4c83b] = env->getMethodID(cls, "getClauses", "()[Lorg/apache/lucene/search/BooleanClause;");
            mids$[mid_getMaxClauseCount_54c6a179] = env->getStaticMethodID(cls, "getMaxClauseCount", "()I");
            mids$[mid_getMinimumNumberShouldMatch_54c6a179] = env->getMethodID(cls, "getMinimumNumberShouldMatch", "()I");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isCoordDisabled_54c6a16a] = env->getMethodID(cls, "isCoordDisabled", "()Z");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setMaxClauseCount_39c7bd3c] = env->getStaticMethodID(cls, "setMaxClauseCount", "(I)V");
            mids$[mid_setMinimumNumberShouldMatch_39c7bd3c] = env->getMethodID(cls, "setMinimumNumberShouldMatch", "(I)V");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BooleanQuery::BooleanQuery() : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        BooleanQuery::BooleanQuery(jboolean a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

        void BooleanQuery::add(const ::org::apache::lucene::search::BooleanClause & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_982477b6], a0.this$);
        }

        void BooleanQuery::add(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::BooleanClause$Occur & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_827be425], a0.this$, a1.this$);
        }

        ::java::util::List BooleanQuery::clauses() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_clauses_87851566]));
        }

        BooleanQuery BooleanQuery::clone() const
        {
          return BooleanQuery(env->callObjectMethod(this$, mids$[mid_clone_6f9339e7]));
        }

        ::org::apache::lucene::search::Weight BooleanQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean BooleanQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void BooleanQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        JArray< ::org::apache::lucene::search::BooleanClause > BooleanQuery::getClauses() const
        {
          return JArray< ::org::apache::lucene::search::BooleanClause >(env->callObjectMethod(this$, mids$[mid_getClauses_e6b4c83b]));
        }

        jint BooleanQuery::getMaxClauseCount()
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getMaxClauseCount_54c6a179]);
        }

        jint BooleanQuery::getMinimumNumberShouldMatch() const
        {
          return env->callIntMethod(this$, mids$[mid_getMinimumNumberShouldMatch_54c6a179]);
        }

        jint BooleanQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean BooleanQuery::isCoordDisabled() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCoordDisabled_54c6a16a]);
        }

        ::java::util::Iterator BooleanQuery::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        ::org::apache::lucene::search::Query BooleanQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        void BooleanQuery::setMaxClauseCount(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setMaxClauseCount_39c7bd3c], a0);
        }

        void BooleanQuery::setMinimumNumberShouldMatch(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMinimumNumberShouldMatch_39c7bd3c], a0);
        }

        ::java::lang::String BooleanQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/BooleanQuery$TooManyClauses.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BooleanQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BooleanQuery_init_(t_BooleanQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BooleanQuery_add(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_clauses(t_BooleanQuery *self);
        static PyObject *t_BooleanQuery_clone(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_createWeight(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_equals(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_extractTerms(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_getClauses(t_BooleanQuery *self);
        static PyObject *t_BooleanQuery_getMaxClauseCount(PyTypeObject *type);
        static PyObject *t_BooleanQuery_getMinimumNumberShouldMatch(t_BooleanQuery *self);
        static PyObject *t_BooleanQuery_hashCode(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_isCoordDisabled(t_BooleanQuery *self);
        static PyObject *t_BooleanQuery_iterator(t_BooleanQuery *self);
        static PyObject *t_BooleanQuery_rewrite(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_setMaxClauseCount(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanQuery_setMinimumNumberShouldMatch(t_BooleanQuery *self, PyObject *arg);
        static PyObject *t_BooleanQuery_toString(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_get__coordDisabled(t_BooleanQuery *self, void *data);
        static PyObject *t_BooleanQuery_get__maxClauseCount(t_BooleanQuery *self, void *data);
        static int t_BooleanQuery_set__maxClauseCount(t_BooleanQuery *self, PyObject *arg, void *data);
        static PyObject *t_BooleanQuery_get__minimumNumberShouldMatch(t_BooleanQuery *self, void *data);
        static int t_BooleanQuery_set__minimumNumberShouldMatch(t_BooleanQuery *self, PyObject *arg, void *data);
        static PyGetSetDef t_BooleanQuery__fields_[] = {
          DECLARE_GET_FIELD(t_BooleanQuery, coordDisabled),
          DECLARE_GETSET_FIELD(t_BooleanQuery, maxClauseCount),
          DECLARE_GETSET_FIELD(t_BooleanQuery, minimumNumberShouldMatch),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BooleanQuery__methods_[] = {
          DECLARE_METHOD(t_BooleanQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanQuery, add, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, clauses, METH_NOARGS),
          DECLARE_METHOD(t_BooleanQuery, clone, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, getClauses, METH_NOARGS),
          DECLARE_METHOD(t_BooleanQuery, getMaxClauseCount, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_BooleanQuery, getMinimumNumberShouldMatch, METH_NOARGS),
          DECLARE_METHOD(t_BooleanQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, isCoordDisabled, METH_NOARGS),
          DECLARE_METHOD(t_BooleanQuery, iterator, METH_NOARGS),
          DECLARE_METHOD(t_BooleanQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, setMaxClauseCount, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanQuery, setMinimumNumberShouldMatch, METH_O),
          DECLARE_METHOD(t_BooleanQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BooleanQuery, t_BooleanQuery, ::org::apache::lucene::search::Query, BooleanQuery, t_BooleanQuery_init_, ((PyObject *(*)(t_BooleanQuery *)) get_iterator< t_BooleanQuery >), 0, t_BooleanQuery__fields_, 0, 0);

        void t_BooleanQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(BooleanQuery), module, "BooleanQuery", 0);
          PyDict_SetItemString(PY_TYPE(BooleanQuery).tp_dict, "TooManyClauses", make_descriptor(&PY_TYPE(BooleanQuery$TooManyClauses)));
        }

        void t_BooleanQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BooleanQuery).tp_dict, "class_", make_descriptor(BooleanQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BooleanQuery).tp_dict, "wrapfn_", make_descriptor(t_BooleanQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BooleanQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BooleanQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BooleanQuery::initializeClass, 1)))
            return NULL;
          return t_BooleanQuery::wrap_Object(BooleanQuery(((t_BooleanQuery *) arg)->object.this$));
        }
        static PyObject *t_BooleanQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BooleanQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BooleanQuery_init_(t_BooleanQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              BooleanQuery object((jobject) NULL);

              INT_CALL(object = BooleanQuery());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              jboolean a0;
              BooleanQuery object((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                INT_CALL(object = BooleanQuery(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BooleanQuery_add(t_BooleanQuery *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::BooleanClause a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::BooleanClause::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::BooleanClause$Occur a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "kK", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_BooleanQuery_clauses(t_BooleanQuery *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.clauses());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(BooleanClause));
        }

        static PyObject *t_BooleanQuery_clone(t_BooleanQuery *self, PyObject *args)
        {
          BooleanQuery result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_BooleanQuery::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BooleanQuery), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_BooleanQuery_createWeight(t_BooleanQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BooleanQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_BooleanQuery_equals(t_BooleanQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(BooleanQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BooleanQuery_extractTerms(t_BooleanQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BooleanQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_BooleanQuery_getClauses(t_BooleanQuery *self)
        {
          JArray< ::org::apache::lucene::search::BooleanClause > result((jobject) NULL);
          OBJ_CALL(result = self->object.getClauses());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::t_BooleanClause::wrap_jobject);
        }

        static PyObject *t_BooleanQuery_getMaxClauseCount(PyTypeObject *type)
        {
          jint result;
          OBJ_CALL(result = ::org::apache::lucene::search::BooleanQuery::getMaxClauseCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_BooleanQuery_getMinimumNumberShouldMatch(t_BooleanQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMinimumNumberShouldMatch());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_BooleanQuery_hashCode(t_BooleanQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BooleanQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BooleanQuery_isCoordDisabled(t_BooleanQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isCoordDisabled());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_BooleanQuery_iterator(t_BooleanQuery *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(BooleanClause));
        }

        static PyObject *t_BooleanQuery_rewrite(t_BooleanQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BooleanQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_BooleanQuery_setMaxClauseCount(PyTypeObject *type, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(::org::apache::lucene::search::BooleanQuery::setMaxClauseCount(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setMaxClauseCount", arg);
          return NULL;
        }

        static PyObject *t_BooleanQuery_setMinimumNumberShouldMatch(t_BooleanQuery *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setMinimumNumberShouldMatch(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMinimumNumberShouldMatch", arg);
          return NULL;
        }

        static PyObject *t_BooleanQuery_toString(t_BooleanQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(BooleanQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_BooleanQuery_get__coordDisabled(t_BooleanQuery *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCoordDisabled());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_BooleanQuery_get__maxClauseCount(t_BooleanQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxClauseCount());
          return PyInt_FromLong((long) value);
        }
        static int t_BooleanQuery_set__maxClauseCount(t_BooleanQuery *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxClauseCount(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxClauseCount", arg);
          return -1;
        }

        static PyObject *t_BooleanQuery_get__minimumNumberShouldMatch(t_BooleanQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMinimumNumberShouldMatch());
          return PyInt_FromLong((long) value);
        }
        static int t_BooleanQuery_set__minimumNumberShouldMatch(t_BooleanQuery *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMinimumNumberShouldMatch(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "minimumNumberShouldMatch", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/NoTokenFoundQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *NoTokenFoundQueryNode::class$ = NULL;
              jmethodID *NoTokenFoundQueryNode::mids$ = NULL;
              bool NoTokenFoundQueryNode::live$ = false;

              jclass NoTokenFoundQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/NoTokenFoundQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NoTokenFoundQueryNode::NoTokenFoundQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::DeletedQueryNode(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode NoTokenFoundQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence NoTokenFoundQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String NoTokenFoundQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_NoTokenFoundQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NoTokenFoundQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NoTokenFoundQueryNode_init_(t_NoTokenFoundQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_NoTokenFoundQueryNode_cloneTree(t_NoTokenFoundQueryNode *self, PyObject *args);
              static PyObject *t_NoTokenFoundQueryNode_toQueryString(t_NoTokenFoundQueryNode *self, PyObject *args);
              static PyObject *t_NoTokenFoundQueryNode_toString(t_NoTokenFoundQueryNode *self, PyObject *args);

              static PyMethodDef t_NoTokenFoundQueryNode__methods_[] = {
                DECLARE_METHOD(t_NoTokenFoundQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NoTokenFoundQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NoTokenFoundQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_NoTokenFoundQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_NoTokenFoundQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NoTokenFoundQueryNode, t_NoTokenFoundQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::DeletedQueryNode, NoTokenFoundQueryNode, t_NoTokenFoundQueryNode_init_, 0, 0, 0, 0, 0);

              void t_NoTokenFoundQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(NoTokenFoundQueryNode), module, "NoTokenFoundQueryNode", 0);
              }

              void t_NoTokenFoundQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NoTokenFoundQueryNode).tp_dict, "class_", make_descriptor(NoTokenFoundQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NoTokenFoundQueryNode).tp_dict, "wrapfn_", make_descriptor(t_NoTokenFoundQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NoTokenFoundQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NoTokenFoundQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NoTokenFoundQueryNode::initializeClass, 1)))
                  return NULL;
                return t_NoTokenFoundQueryNode::wrap_Object(NoTokenFoundQueryNode(((t_NoTokenFoundQueryNode *) arg)->object.this$));
              }
              static PyObject *t_NoTokenFoundQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NoTokenFoundQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NoTokenFoundQueryNode_init_(t_NoTokenFoundQueryNode *self, PyObject *args, PyObject *kwds)
              {
                NoTokenFoundQueryNode object((jobject) NULL);

                INT_CALL(object = NoTokenFoundQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_NoTokenFoundQueryNode_cloneTree(t_NoTokenFoundQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(NoTokenFoundQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_NoTokenFoundQueryNode_toQueryString(t_NoTokenFoundQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(NoTokenFoundQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_NoTokenFoundQueryNode_toString(t_NoTokenFoundQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(NoTokenFoundQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$logical_and_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$logical_and_return::class$ = NULL;
          jmethodID *JavascriptParser$logical_and_return::mids$ = NULL;
          bool JavascriptParser$logical_and_return::live$ = false;

          jclass JavascriptParser$logical_and_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$logical_and_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$logical_and_return::JavascriptParser$logical_and_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$logical_and_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$logical_and_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$logical_and_return_init_(t_JavascriptParser$logical_and_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$logical_and_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$logical_and_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$logical_and_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$logical_and_return, t_JavascriptParser$logical_and_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$logical_and_return, t_JavascriptParser$logical_and_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$logical_and_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$logical_and_return), module, "JavascriptParser$logical_and_return", 0);
          }

          void t_JavascriptParser$logical_and_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$logical_and_return).tp_dict, "class_", make_descriptor(JavascriptParser$logical_and_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$logical_and_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$logical_and_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$logical_and_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$logical_and_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$logical_and_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$logical_and_return::wrap_Object(JavascriptParser$logical_and_return(((t_JavascriptParser$logical_and_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$logical_and_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$logical_and_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$logical_and_return_init_(t_JavascriptParser$logical_and_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$logical_and_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$logical_and_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/nl/DutchStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/nl/DutchStemmer.h"
#include "java/io/IOException.h"
#include "java/util/HashMap.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace nl {

          ::java::lang::Class *DutchStemFilter::class$ = NULL;
          jmethodID *DutchStemFilter::mids$ = NULL;
          bool DutchStemFilter::live$ = false;

          jclass DutchStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/nl/DutchStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_d492dbba] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/util/Map;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_setStemDictionary_70cdf88c] = env->getMethodID(cls, "setStemDictionary", "(Ljava/util/HashMap;)V");
              mids$[mid_setStemmer_b66a40d3] = env->getMethodID(cls, "setStemmer", "(Lorg/apache/lucene/analysis/nl/DutchStemmer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DutchStemFilter::DutchStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          DutchStemFilter::DutchStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::util::Map & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d492dbba, a0.this$, a1.this$)) {}

          jboolean DutchStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void DutchStemFilter::setStemDictionary(const ::java::util::HashMap & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStemDictionary_70cdf88c], a0.this$);
          }

          void DutchStemFilter::setStemmer(const ::org::apache::lucene::analysis::nl::DutchStemmer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStemmer_b66a40d3], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace nl {
          static PyObject *t_DutchStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DutchStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DutchStemFilter_init_(t_DutchStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DutchStemFilter_incrementToken(t_DutchStemFilter *self, PyObject *args);
          static PyObject *t_DutchStemFilter_setStemDictionary(t_DutchStemFilter *self, PyObject *arg);
          static PyObject *t_DutchStemFilter_setStemmer(t_DutchStemFilter *self, PyObject *arg);
          static int t_DutchStemFilter_set__stemDictionary(t_DutchStemFilter *self, PyObject *arg, void *data);
          static int t_DutchStemFilter_set__stemmer(t_DutchStemFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_DutchStemFilter__fields_[] = {
            DECLARE_SET_FIELD(t_DutchStemFilter, stemDictionary),
            DECLARE_SET_FIELD(t_DutchStemFilter, stemmer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DutchStemFilter__methods_[] = {
            DECLARE_METHOD(t_DutchStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DutchStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DutchStemFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_DutchStemFilter, setStemDictionary, METH_O),
            DECLARE_METHOD(t_DutchStemFilter, setStemmer, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DutchStemFilter, t_DutchStemFilter, ::org::apache::lucene::analysis::TokenFilter, DutchStemFilter, t_DutchStemFilter_init_, 0, 0, t_DutchStemFilter__fields_, 0, 0);

          void t_DutchStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(DutchStemFilter), module, "DutchStemFilter", 0);
          }

          void t_DutchStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DutchStemFilter).tp_dict, "class_", make_descriptor(DutchStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DutchStemFilter).tp_dict, "wrapfn_", make_descriptor(t_DutchStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DutchStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DutchStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DutchStemFilter::initializeClass, 1)))
              return NULL;
            return t_DutchStemFilter::wrap_Object(DutchStemFilter(((t_DutchStemFilter *) arg)->object.this$));
          }
          static PyObject *t_DutchStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DutchStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DutchStemFilter_init_(t_DutchStemFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                DutchStemFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = DutchStemFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                DutchStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  INT_CALL(object = DutchStemFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DutchStemFilter_incrementToken(t_DutchStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(DutchStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_DutchStemFilter_setStemDictionary(t_DutchStemFilter *self, PyObject *arg)
          {
            ::java::util::HashMap a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::HashMap::initializeClass, &a0, &p0, ::java::util::t_HashMap::parameters_))
            {
              OBJ_CALL(self->object.setStemDictionary(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStemDictionary", arg);
            return NULL;
          }

          static PyObject *t_DutchStemFilter_setStemmer(t_DutchStemFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::nl::DutchStemmer a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::nl::DutchStemmer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setStemmer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStemmer", arg);
            return NULL;
          }

          static int t_DutchStemFilter_set__stemDictionary(t_DutchStemFilter *self, PyObject *arg, void *data)
          {
            {
              ::java::util::HashMap value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::HashMap::initializeClass, &value))
              {
                INT_CALL(self->object.setStemDictionary(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stemDictionary", arg);
            return -1;
          }

          static int t_DutchStemFilter_set__stemmer(t_DutchStemFilter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::nl::DutchStemmer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::nl::DutchStemmer::initializeClass, &value))
              {
                INT_CALL(self->object.setStemmer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stemmer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/RemoveEmptyNonLeafQueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *RemoveEmptyNonLeafQueryNodeProcessor::class$ = NULL;
              jmethodID *RemoveEmptyNonLeafQueryNodeProcessor::mids$ = NULL;
              bool RemoveEmptyNonLeafQueryNodeProcessor::live$ = false;

              jclass RemoveEmptyNonLeafQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/RemoveEmptyNonLeafQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              RemoveEmptyNonLeafQueryNodeProcessor::RemoveEmptyNonLeafQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode RemoveEmptyNonLeafQueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_RemoveEmptyNonLeafQueryNodeProcessor_init_(t_RemoveEmptyNonLeafQueryNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_process(t_RemoveEmptyNonLeafQueryNodeProcessor *self, PyObject *args);

              static PyMethodDef t_RemoveEmptyNonLeafQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_RemoveEmptyNonLeafQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RemoveEmptyNonLeafQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RemoveEmptyNonLeafQueryNodeProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(RemoveEmptyNonLeafQueryNodeProcessor, t_RemoveEmptyNonLeafQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, RemoveEmptyNonLeafQueryNodeProcessor, t_RemoveEmptyNonLeafQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_RemoveEmptyNonLeafQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(RemoveEmptyNonLeafQueryNodeProcessor), module, "RemoveEmptyNonLeafQueryNodeProcessor", 0);
              }

              void t_RemoveEmptyNonLeafQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(RemoveEmptyNonLeafQueryNodeProcessor).tp_dict, "class_", make_descriptor(RemoveEmptyNonLeafQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(RemoveEmptyNonLeafQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_RemoveEmptyNonLeafQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(RemoveEmptyNonLeafQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, RemoveEmptyNonLeafQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_RemoveEmptyNonLeafQueryNodeProcessor::wrap_Object(RemoveEmptyNonLeafQueryNodeProcessor(((t_RemoveEmptyNonLeafQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, RemoveEmptyNonLeafQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_RemoveEmptyNonLeafQueryNodeProcessor_init_(t_RemoveEmptyNonLeafQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                RemoveEmptyNonLeafQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = RemoveEmptyNonLeafQueryNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_process(t_RemoveEmptyNonLeafQueryNodeProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(RemoveEmptyNonLeafQueryNodeProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/NumericRangeQueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *NumericRangeQueryBuilder::class$ = NULL;
            jmethodID *NumericRangeQueryBuilder::mids$ = NULL;
            bool NumericRangeQueryBuilder::live$ = false;

            jclass NumericRangeQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/NumericRangeQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            NumericRangeQueryBuilder::NumericRangeQueryBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_NumericRangeQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NumericRangeQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_NumericRangeQueryBuilder_init_(t_NumericRangeQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_NumericRangeQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_NumericRangeQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NumericRangeQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NumericRangeQueryBuilder, t_NumericRangeQueryBuilder, ::java::lang::Object, NumericRangeQueryBuilder, t_NumericRangeQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_NumericRangeQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(NumericRangeQueryBuilder), module, "NumericRangeQueryBuilder", 0);
            }

            void t_NumericRangeQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NumericRangeQueryBuilder).tp_dict, "class_", make_descriptor(NumericRangeQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NumericRangeQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_NumericRangeQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NumericRangeQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NumericRangeQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NumericRangeQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_NumericRangeQueryBuilder::wrap_Object(NumericRangeQueryBuilder(((t_NumericRangeQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_NumericRangeQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NumericRangeQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_NumericRangeQueryBuilder_init_(t_NumericRangeQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              NumericRangeQueryBuilder object((jobject) NULL);

              INT_CALL(object = NumericRangeQueryBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/CategoryPath.h"
#include "java/lang/Comparable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *CategoryPath::class$ = NULL;
          jmethodID *CategoryPath::mids$ = NULL;
          jfieldID *CategoryPath::fids$ = NULL;
          bool CategoryPath::live$ = false;
          CategoryPath *CategoryPath::EMPTY = NULL;

          jclass CategoryPath::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/CategoryPath");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4dd4540c] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;)V");
              mids$[mid_init$_7420ac50] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;C)V");
              mids$[mid_compareTo_07b9a56f] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/facet/taxonomy/CategoryPath;)I");
              mids$[mid_copyFullPath_6d37715f] = env->getMethodID(cls, "copyFullPath", "([CIC)I");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_fullPathLength_54c6a179] = env->getMethodID(cls, "fullPathLength", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_longHashCode_54c6a17a] = env->getMethodID(cls, "longHashCode", "()J");
              mids$[mid_subpath_33144d83] = env->getMethodID(cls, "subpath", "(I)Lorg/apache/lucene/facet/taxonomy/CategoryPath;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_toString_7611a535] = env->getMethodID(cls, "toString", "(C)Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_components] = env->getFieldID(cls, "components", "[Ljava/lang/String;");
              fids$[fid_length] = env->getFieldID(cls, "length", "I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              EMPTY = new CategoryPath(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/facet/taxonomy/CategoryPath;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CategoryPath::CategoryPath(const JArray< ::java::lang::String > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4dd4540c, a0.this$)) {}

          CategoryPath::CategoryPath(const ::java::lang::String & a0, jchar a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7420ac50, a0.this$, a1)) {}

          jint CategoryPath::compareTo(const CategoryPath & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_07b9a56f], a0.this$);
          }

          jint CategoryPath::copyFullPath(const JArray< jchar > & a0, jint a1, jchar a2) const
          {
            return env->callIntMethod(this$, mids$[mid_copyFullPath_6d37715f], a0.this$, a1, a2);
          }

          jboolean CategoryPath::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint CategoryPath::fullPathLength() const
          {
            return env->callIntMethod(this$, mids$[mid_fullPathLength_54c6a179]);
          }

          jint CategoryPath::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jlong CategoryPath::longHashCode() const
          {
            return env->callLongMethod(this$, mids$[mid_longHashCode_54c6a17a]);
          }

          CategoryPath CategoryPath::subpath(jint a0) const
          {
            return CategoryPath(env->callObjectMethod(this$, mids$[mid_subpath_33144d83], a0));
          }

          ::java::lang::String CategoryPath::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::java::lang::String CategoryPath::toString(jchar a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_7611a535], a0));
          }

          JArray< ::java::lang::String > CategoryPath::_get_components() const
          {
            return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_components]));
          }

          jint CategoryPath::_get_length() const
          {
            return env->getIntField(this$, fids$[fid_length]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_CategoryPath_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CategoryPath_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CategoryPath_init_(t_CategoryPath *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CategoryPath_compareTo(t_CategoryPath *self, PyObject *arg);
          static PyObject *t_CategoryPath_copyFullPath(t_CategoryPath *self, PyObject *args);
          static PyObject *t_CategoryPath_equals(t_CategoryPath *self, PyObject *args);
          static PyObject *t_CategoryPath_fullPathLength(t_CategoryPath *self);
          static PyObject *t_CategoryPath_hashCode(t_CategoryPath *self, PyObject *args);
          static PyObject *t_CategoryPath_longHashCode(t_CategoryPath *self);
          static PyObject *t_CategoryPath_subpath(t_CategoryPath *self, PyObject *arg);
          static PyObject *t_CategoryPath_toString(t_CategoryPath *self, PyObject *args);
          static PyObject *t_CategoryPath_get__components(t_CategoryPath *self, void *data);
          static PyObject *t_CategoryPath_get__length(t_CategoryPath *self, void *data);

          static PyGetSetDef t_CategoryPath__fields_[] = {
            DECLARE_GET_FIELD(t_CategoryPath, components),
            DECLARE_GET_FIELD(t_CategoryPath, length),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CategoryPath__methods_[] = {
            DECLARE_METHOD(t_CategoryPath, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CategoryPath, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CategoryPath, compareTo, METH_O),
            DECLARE_METHOD(t_CategoryPath, copyFullPath, METH_VARARGS),
            DECLARE_METHOD(t_CategoryPath, equals, METH_VARARGS),
            DECLARE_METHOD(t_CategoryPath, fullPathLength, METH_NOARGS),
            DECLARE_METHOD(t_CategoryPath, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_CategoryPath, longHashCode, METH_NOARGS),
            DECLARE_METHOD(t_CategoryPath, subpath, METH_O),
            DECLARE_METHOD(t_CategoryPath, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CategoryPath, t_CategoryPath, ::java::lang::Object, CategoryPath, t_CategoryPath_init_, 0, 0, t_CategoryPath__fields_, 0, 0);

          void t_CategoryPath::install(PyObject *module)
          {
            installType(&PY_TYPE(CategoryPath), module, "CategoryPath", 0);
          }

          void t_CategoryPath::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CategoryPath).tp_dict, "class_", make_descriptor(CategoryPath::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CategoryPath).tp_dict, "wrapfn_", make_descriptor(t_CategoryPath::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CategoryPath).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CategoryPath::initializeClass);
            PyDict_SetItemString(PY_TYPE(CategoryPath).tp_dict, "EMPTY", make_descriptor(t_CategoryPath::wrap_Object(*CategoryPath::EMPTY)));
          }

          static PyObject *t_CategoryPath_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CategoryPath::initializeClass, 1)))
              return NULL;
            return t_CategoryPath::wrap_Object(CategoryPath(((t_CategoryPath *) arg)->object.this$));
          }
          static PyObject *t_CategoryPath_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CategoryPath::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CategoryPath_init_(t_CategoryPath *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                CategoryPath object((jobject) NULL);

                if (!parseArgs(args, "[s", &a0))
                {
                  INT_CALL(object = CategoryPath(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jchar a1;
                CategoryPath object((jobject) NULL);

                if (!parseArgs(args, "sC", &a0, &a1))
                {
                  INT_CALL(object = CategoryPath(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CategoryPath_compareTo(t_CategoryPath *self, PyObject *arg)
          {
            CategoryPath a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", CategoryPath::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_CategoryPath_copyFullPath(t_CategoryPath *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jchar a2;
            jint result;

            if (!parseArgs(args, "[CIC", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.copyFullPath(a0, a1, a2));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "copyFullPath", args);
            return NULL;
          }

          static PyObject *t_CategoryPath_equals(t_CategoryPath *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CategoryPath), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_CategoryPath_fullPathLength(t_CategoryPath *self)
          {
            jint result;
            OBJ_CALL(result = self->object.fullPathLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CategoryPath_hashCode(t_CategoryPath *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CategoryPath), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_CategoryPath_longHashCode(t_CategoryPath *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.longHashCode());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_CategoryPath_subpath(t_CategoryPath *self, PyObject *arg)
          {
            jint a0;
            CategoryPath result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.subpath(a0));
              return t_CategoryPath::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subpath", arg);
            return NULL;
          }

          static PyObject *t_CategoryPath_toString(t_CategoryPath *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }
              break;
             case 1:
              {
                jchar a0;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(result = self->object.toString(a0));
                  return j2p(result);
                }
              }
            }

            return callSuper(&PY_TYPE(CategoryPath), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_CategoryPath_get__components(t_CategoryPath *self, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_components());
            return JArray<jstring>(value.this$).wrap();
          }

          static PyObject *t_CategoryPath_get__length(t_CategoryPath *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_length());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/CapitalizationFilter.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *CapitalizationFilter::class$ = NULL;
          jmethodID *CapitalizationFilter::mids$ = NULL;
          bool CapitalizationFilter::live$ = false;
          jint CapitalizationFilter::DEFAULT_MAX_TOKEN_LENGTH = (jint) 0;
          jint CapitalizationFilter::DEFAULT_MAX_WORD_COUNT = (jint) 0;

          jclass CapitalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/CapitalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_e833f6a2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;ZLorg/apache/lucene/analysis/util/CharArraySet;ZLjava/util/Collection;III)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_TOKEN_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_TOKEN_LENGTH");
              DEFAULT_MAX_WORD_COUNT = env->getStaticIntField(cls, "DEFAULT_MAX_WORD_COUNT");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CapitalizationFilter::CapitalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          CapitalizationFilter::CapitalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jboolean a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2, jboolean a3, const ::java::util::Collection & a4, jint a5, jint a6, jint a7) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_e833f6a2, a0.this$, a1, a2.this$, a3, a4.this$, a5, a6, a7)) {}

          jboolean CapitalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_CapitalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CapitalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CapitalizationFilter_init_(t_CapitalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CapitalizationFilter_incrementToken(t_CapitalizationFilter *self, PyObject *args);

          static PyMethodDef t_CapitalizationFilter__methods_[] = {
            DECLARE_METHOD(t_CapitalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CapitalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CapitalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CapitalizationFilter, t_CapitalizationFilter, ::org::apache::lucene::analysis::TokenFilter, CapitalizationFilter, t_CapitalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_CapitalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CapitalizationFilter), module, "CapitalizationFilter", 0);
          }

          void t_CapitalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CapitalizationFilter).tp_dict, "class_", make_descriptor(CapitalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_CapitalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CapitalizationFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(CapitalizationFilter).tp_dict, "DEFAULT_MAX_TOKEN_LENGTH", make_descriptor(CapitalizationFilter::DEFAULT_MAX_TOKEN_LENGTH));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilter).tp_dict, "DEFAULT_MAX_WORD_COUNT", make_descriptor(CapitalizationFilter::DEFAULT_MAX_WORD_COUNT));
          }

          static PyObject *t_CapitalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CapitalizationFilter::initializeClass, 1)))
              return NULL;
            return t_CapitalizationFilter::wrap_Object(CapitalizationFilter(((t_CapitalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_CapitalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CapitalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CapitalizationFilter_init_(t_CapitalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                CapitalizationFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = CapitalizationFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 8:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jboolean a1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                jboolean a3;
                ::java::util::Collection a4((jobject) NULL);
                PyTypeObject **p4;
                jint a5;
                jint a6;
                jint a7;
                CapitalizationFilter object((jobject) NULL);

                if (!parseArgs(args, "kZKZKIII", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a3, &a4, &p4, ::java::util::t_Collection::parameters_, &a5, &a6, &a7))
                {
                  INT_CALL(object = CapitalizationFilter(a0, a1, a2, a3, a4, a5, a6, a7));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CapitalizationFilter_incrementToken(t_CapitalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CapitalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RamUsageEstimator$JvmFeature.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RamUsageEstimator$JvmFeature::class$ = NULL;
        jmethodID *RamUsageEstimator$JvmFeature::mids$ = NULL;
        jfieldID *RamUsageEstimator$JvmFeature::fids$ = NULL;
        bool RamUsageEstimator$JvmFeature::live$ = false;
        RamUsageEstimator$JvmFeature *RamUsageEstimator$JvmFeature::ARRAY_HEADER_SIZE = NULL;
        RamUsageEstimator$JvmFeature *RamUsageEstimator$JvmFeature::FIELD_OFFSETS = NULL;
        RamUsageEstimator$JvmFeature *RamUsageEstimator$JvmFeature::OBJECT_ALIGNMENT = NULL;
        RamUsageEstimator$JvmFeature *RamUsageEstimator$JvmFeature::OBJECT_REFERENCE_SIZE = NULL;

        jclass RamUsageEstimator$JvmFeature::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RamUsageEstimator$JvmFeature");

            mids$ = new jmethodID[max_mid];
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_valueOf_435c0e75] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/util/RamUsageEstimator$JvmFeature;");
            mids$[mid_values_6bc6c637] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/util/RamUsageEstimator$JvmFeature;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_description] = env->getFieldID(cls, "description", "Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            ARRAY_HEADER_SIZE = new RamUsageEstimator$JvmFeature(env->getStaticObjectField(cls, "ARRAY_HEADER_SIZE", "Lorg/apache/lucene/util/RamUsageEstimator$JvmFeature;"));
            FIELD_OFFSETS = new RamUsageEstimator$JvmFeature(env->getStaticObjectField(cls, "FIELD_OFFSETS", "Lorg/apache/lucene/util/RamUsageEstimator$JvmFeature;"));
            OBJECT_ALIGNMENT = new RamUsageEstimator$JvmFeature(env->getStaticObjectField(cls, "OBJECT_ALIGNMENT", "Lorg/apache/lucene/util/RamUsageEstimator$JvmFeature;"));
            OBJECT_REFERENCE_SIZE = new RamUsageEstimator$JvmFeature(env->getStaticObjectField(cls, "OBJECT_REFERENCE_SIZE", "Lorg/apache/lucene/util/RamUsageEstimator$JvmFeature;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String RamUsageEstimator$JvmFeature::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        RamUsageEstimator$JvmFeature RamUsageEstimator$JvmFeature::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return RamUsageEstimator$JvmFeature(env->callStaticObjectMethod(cls, mids$[mid_valueOf_435c0e75], a0.this$));
        }

        JArray< RamUsageEstimator$JvmFeature > RamUsageEstimator$JvmFeature::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< RamUsageEstimator$JvmFeature >(env->callStaticObjectMethod(cls, mids$[mid_values_6bc6c637]));
        }

        ::java::lang::String RamUsageEstimator$JvmFeature::_get_description() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_description]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RamUsageEstimator$JvmFeature_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RamUsageEstimator$JvmFeature_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RamUsageEstimator$JvmFeature_of_(t_RamUsageEstimator$JvmFeature *self, PyObject *args);
        static PyObject *t_RamUsageEstimator$JvmFeature_toString(t_RamUsageEstimator$JvmFeature *self, PyObject *args);
        static PyObject *t_RamUsageEstimator$JvmFeature_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_RamUsageEstimator$JvmFeature_values(PyTypeObject *type);
        static PyObject *t_RamUsageEstimator$JvmFeature_get__description(t_RamUsageEstimator$JvmFeature *self, void *data);

        static PyObject *t_RamUsageEstimator$JvmFeature_get__parameters_(t_RamUsageEstimator$JvmFeature *self, void *data);
        static PyGetSetDef t_RamUsageEstimator$JvmFeature__fields_[] = {
          DECLARE_GET_FIELD(t_RamUsageEstimator$JvmFeature, description),
          DECLARE_GET_FIELD(t_RamUsageEstimator$JvmFeature, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RamUsageEstimator$JvmFeature__methods_[] = {
          DECLARE_METHOD(t_RamUsageEstimator$JvmFeature, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator$JvmFeature, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator$JvmFeature, of_, METH_VARARGS),
          DECLARE_METHOD(t_RamUsageEstimator$JvmFeature, toString, METH_VARARGS),
          DECLARE_METHOD(t_RamUsageEstimator$JvmFeature, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator$JvmFeature, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RamUsageEstimator$JvmFeature, t_RamUsageEstimator$JvmFeature, ::java::lang::Enum, RamUsageEstimator$JvmFeature, abstract_init, 0, 0, t_RamUsageEstimator$JvmFeature__fields_, 0, 0);
        PyObject *t_RamUsageEstimator$JvmFeature::wrap_Object(const RamUsageEstimator$JvmFeature& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RamUsageEstimator$JvmFeature::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RamUsageEstimator$JvmFeature *self = (t_RamUsageEstimator$JvmFeature *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_RamUsageEstimator$JvmFeature::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RamUsageEstimator$JvmFeature::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RamUsageEstimator$JvmFeature *self = (t_RamUsageEstimator$JvmFeature *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_RamUsageEstimator$JvmFeature::install(PyObject *module)
        {
          installType(&PY_TYPE(RamUsageEstimator$JvmFeature), module, "RamUsageEstimator$JvmFeature", 0);
        }

        void t_RamUsageEstimator$JvmFeature::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator$JvmFeature).tp_dict, "class_", make_descriptor(RamUsageEstimator$JvmFeature::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator$JvmFeature).tp_dict, "wrapfn_", make_descriptor(t_RamUsageEstimator$JvmFeature::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator$JvmFeature).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(RamUsageEstimator$JvmFeature::initializeClass);
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator$JvmFeature).tp_dict, "ARRAY_HEADER_SIZE", make_descriptor(t_RamUsageEstimator$JvmFeature::wrap_Object(*RamUsageEstimator$JvmFeature::ARRAY_HEADER_SIZE)));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator$JvmFeature).tp_dict, "FIELD_OFFSETS", make_descriptor(t_RamUsageEstimator$JvmFeature::wrap_Object(*RamUsageEstimator$JvmFeature::FIELD_OFFSETS)));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator$JvmFeature).tp_dict, "OBJECT_ALIGNMENT", make_descriptor(t_RamUsageEstimator$JvmFeature::wrap_Object(*RamUsageEstimator$JvmFeature::OBJECT_ALIGNMENT)));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator$JvmFeature).tp_dict, "OBJECT_REFERENCE_SIZE", make_descriptor(t_RamUsageEstimator$JvmFeature::wrap_Object(*RamUsageEstimator$JvmFeature::OBJECT_REFERENCE_SIZE)));
        }

        static PyObject *t_RamUsageEstimator$JvmFeature_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RamUsageEstimator$JvmFeature::initializeClass, 1)))
            return NULL;
          return t_RamUsageEstimator$JvmFeature::wrap_Object(RamUsageEstimator$JvmFeature(((t_RamUsageEstimator$JvmFeature *) arg)->object.this$));
        }
        static PyObject *t_RamUsageEstimator$JvmFeature_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RamUsageEstimator$JvmFeature::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RamUsageEstimator$JvmFeature_of_(t_RamUsageEstimator$JvmFeature *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_RamUsageEstimator$JvmFeature_toString(t_RamUsageEstimator$JvmFeature *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(RamUsageEstimator$JvmFeature), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_RamUsageEstimator$JvmFeature_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          RamUsageEstimator$JvmFeature result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator$JvmFeature::valueOf(a0));
            return t_RamUsageEstimator$JvmFeature::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_RamUsageEstimator$JvmFeature_values(PyTypeObject *type)
        {
          JArray< RamUsageEstimator$JvmFeature > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator$JvmFeature::values());
          return JArray<jobject>(result.this$).wrap(t_RamUsageEstimator$JvmFeature::wrap_jobject);
        }
        static PyObject *t_RamUsageEstimator$JvmFeature_get__parameters_(t_RamUsageEstimator$JvmFeature *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_RamUsageEstimator$JvmFeature_get__description(t_RamUsageEstimator$JvmFeature *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_description());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SuggestWordScoreComparator.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SuggestWordScoreComparator::class$ = NULL;
          jmethodID *SuggestWordScoreComparator::mids$ = NULL;
          bool SuggestWordScoreComparator::live$ = false;

          jclass SuggestWordScoreComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SuggestWordScoreComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compare_2e903bf1] = env->getMethodID(cls, "compare", "(Lorg/apache/lucene/search/spell/SuggestWord;Lorg/apache/lucene/search/spell/SuggestWord;)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SuggestWordScoreComparator::SuggestWordScoreComparator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint SuggestWordScoreComparator::compare(const ::org::apache::lucene::search::spell::SuggestWord & a0, const ::org::apache::lucene::search::spell::SuggestWord & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compare_2e903bf1], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SuggestWordScoreComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestWordScoreComparator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SuggestWordScoreComparator_init_(t_SuggestWordScoreComparator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SuggestWordScoreComparator_compare(t_SuggestWordScoreComparator *self, PyObject *args);

          static PyMethodDef t_SuggestWordScoreComparator__methods_[] = {
            DECLARE_METHOD(t_SuggestWordScoreComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordScoreComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordScoreComparator, compare, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SuggestWordScoreComparator, t_SuggestWordScoreComparator, ::java::lang::Object, SuggestWordScoreComparator, t_SuggestWordScoreComparator_init_, 0, 0, 0, 0, 0);

          void t_SuggestWordScoreComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(SuggestWordScoreComparator), module, "SuggestWordScoreComparator", 0);
          }

          void t_SuggestWordScoreComparator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SuggestWordScoreComparator).tp_dict, "class_", make_descriptor(SuggestWordScoreComparator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SuggestWordScoreComparator).tp_dict, "wrapfn_", make_descriptor(t_SuggestWordScoreComparator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SuggestWordScoreComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SuggestWordScoreComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SuggestWordScoreComparator::initializeClass, 1)))
              return NULL;
            return t_SuggestWordScoreComparator::wrap_Object(SuggestWordScoreComparator(((t_SuggestWordScoreComparator *) arg)->object.this$));
          }
          static PyObject *t_SuggestWordScoreComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SuggestWordScoreComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SuggestWordScoreComparator_init_(t_SuggestWordScoreComparator *self, PyObject *args, PyObject *kwds)
          {
            SuggestWordScoreComparator object((jobject) NULL);

            INT_CALL(object = SuggestWordScoreComparator());
            self->object = object;

            return 0;
          }

          static PyObject *t_SuggestWordScoreComparator_compare(t_SuggestWordScoreComparator *self, PyObject *args)
          {
            ::org::apache::lucene::search::spell::SuggestWord a0((jobject) NULL);
            ::org::apache::lucene::search::spell::SuggestWord a1((jobject) NULL);
            jint result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::spell::SuggestWord::initializeClass, ::org::apache::lucene::search::spell::SuggestWord::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.compare(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compare", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/CommandLineUtil.h"
#include "java/io/File.h"
#include "java/lang/InstantiationException.h"
#include "org/apache/lucene/store/FSDirectory.h"
#include "java/lang/Class.h"
#include "java/lang/ClassNotFoundException.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/String.h"
#include "java/lang/IllegalAccessException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *CommandLineUtil::class$ = NULL;
        jmethodID *CommandLineUtil::mids$ = NULL;
        bool CommandLineUtil::live$ = false;

        jclass CommandLineUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/CommandLineUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_loadDirectoryClass_7d663d97] = env->getStaticMethodID(cls, "loadDirectoryClass", "(Ljava/lang/String;)Ljava/lang/Class;");
            mids$[mid_loadFSDirectoryClass_7d663d97] = env->getStaticMethodID(cls, "loadFSDirectoryClass", "(Ljava/lang/String;)Ljava/lang/Class;");
            mids$[mid_newFSDirectory_96268b7b] = env->getStaticMethodID(cls, "newFSDirectory", "(Ljava/lang/Class;Ljava/io/File;)Lorg/apache/lucene/store/FSDirectory;");
            mids$[mid_newFSDirectory_75db4bef] = env->getStaticMethodID(cls, "newFSDirectory", "(Ljava/lang/String;Ljava/io/File;)Lorg/apache/lucene/store/FSDirectory;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Class CommandLineUtil::loadDirectoryClass(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::Class(env->callStaticObjectMethod(cls, mids$[mid_loadDirectoryClass_7d663d97], a0.this$));
        }

        ::java::lang::Class CommandLineUtil::loadFSDirectoryClass(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::Class(env->callStaticObjectMethod(cls, mids$[mid_loadFSDirectoryClass_7d663d97], a0.this$));
        }

        ::org::apache::lucene::store::FSDirectory CommandLineUtil::newFSDirectory(const ::java::lang::Class & a0, const ::java::io::File & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::store::FSDirectory(env->callStaticObjectMethod(cls, mids$[mid_newFSDirectory_96268b7b], a0.this$, a1.this$));
        }

        ::org::apache::lucene::store::FSDirectory CommandLineUtil::newFSDirectory(const ::java::lang::String & a0, const ::java::io::File & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::store::FSDirectory(env->callStaticObjectMethod(cls, mids$[mid_newFSDirectory_75db4bef], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_CommandLineUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CommandLineUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CommandLineUtil_loadDirectoryClass(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CommandLineUtil_loadFSDirectoryClass(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CommandLineUtil_newFSDirectory(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_CommandLineUtil__methods_[] = {
          DECLARE_METHOD(t_CommandLineUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommandLineUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommandLineUtil, loadDirectoryClass, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommandLineUtil, loadFSDirectoryClass, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommandLineUtil, newFSDirectory, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CommandLineUtil, t_CommandLineUtil, ::java::lang::Object, CommandLineUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_CommandLineUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(CommandLineUtil), module, "CommandLineUtil", 0);
        }

        void t_CommandLineUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CommandLineUtil).tp_dict, "class_", make_descriptor(CommandLineUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CommandLineUtil).tp_dict, "wrapfn_", make_descriptor(t_CommandLineUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CommandLineUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CommandLineUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CommandLineUtil::initializeClass, 1)))
            return NULL;
          return t_CommandLineUtil::wrap_Object(CommandLineUtil(((t_CommandLineUtil *) arg)->object.this$));
        }
        static PyObject *t_CommandLineUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CommandLineUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CommandLineUtil_loadDirectoryClass(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Class result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::CommandLineUtil::loadDirectoryClass(a0));
            return ::java::lang::t_Class::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "loadDirectoryClass", arg);
          return NULL;
        }

        static PyObject *t_CommandLineUtil_loadFSDirectoryClass(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Class result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::CommandLineUtil::loadFSDirectoryClass(a0));
            return ::java::lang::t_Class::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "loadFSDirectoryClass", arg);
          return NULL;
        }

        static PyObject *t_CommandLineUtil_newFSDirectory(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::Class a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::io::File a1((jobject) NULL);
              ::org::apache::lucene::store::FSDirectory result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::lang::Class::initializeClass, ::java::io::File::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::CommandLineUtil::newFSDirectory(a0, a1));
                return ::org::apache::lucene::store::t_FSDirectory::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::io::File a1((jobject) NULL);
              ::org::apache::lucene::store::FSDirectory result((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::io::File::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::CommandLineUtil::newFSDirectory(a0, a1));
                return ::org::apache::lucene::store::t_FSDirectory::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newFSDirectory", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Encoder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Encoder::class$ = NULL;
          jmethodID *PackedInts$Encoder::mids$ = NULL;
          bool PackedInts$Encoder::live$ = false;

          jclass PackedInts$Encoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Encoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_byteBlockCount_54c6a179] = env->getMethodID(cls, "byteBlockCount", "()I");
              mids$[mid_byteValueCount_54c6a179] = env->getMethodID(cls, "byteValueCount", "()I");
              mids$[mid_encode_b62d11da] = env->getMethodID(cls, "encode", "([JI[BII)V");
              mids$[mid_encode_9d48bd73] = env->getMethodID(cls, "encode", "([II[BII)V");
              mids$[mid_encode_6b7ac502] = env->getMethodID(cls, "encode", "([JI[JII)V");
              mids$[mid_encode_98f8869b] = env->getMethodID(cls, "encode", "([II[JII)V");
              mids$[mid_longBlockCount_54c6a179] = env->getMethodID(cls, "longBlockCount", "()I");
              mids$[mid_longValueCount_54c6a179] = env->getMethodID(cls, "longValueCount", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint PackedInts$Encoder::byteBlockCount() const
          {
            return env->callIntMethod(this$, mids$[mid_byteBlockCount_54c6a179]);
          }

          jint PackedInts$Encoder::byteValueCount() const
          {
            return env->callIntMethod(this$, mids$[mid_byteValueCount_54c6a179]);
          }

          void PackedInts$Encoder::encode(const JArray< jlong > & a0, jint a1, const JArray< jbyte > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_encode_b62d11da], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Encoder::encode(const JArray< jint > & a0, jint a1, const JArray< jbyte > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_encode_9d48bd73], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Encoder::encode(const JArray< jlong > & a0, jint a1, const JArray< jlong > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_encode_6b7ac502], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Encoder::encode(const JArray< jint > & a0, jint a1, const JArray< jlong > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_encode_98f8869b], a0.this$, a1, a2.this$, a3, a4);
          }

          jint PackedInts$Encoder::longBlockCount() const
          {
            return env->callIntMethod(this$, mids$[mid_longBlockCount_54c6a179]);
          }

          jint PackedInts$Encoder::longValueCount() const
          {
            return env->callIntMethod(this$, mids$[mid_longValueCount_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Encoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Encoder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Encoder_byteBlockCount(t_PackedInts$Encoder *self);
          static PyObject *t_PackedInts$Encoder_byteValueCount(t_PackedInts$Encoder *self);
          static PyObject *t_PackedInts$Encoder_encode(t_PackedInts$Encoder *self, PyObject *args);
          static PyObject *t_PackedInts$Encoder_longBlockCount(t_PackedInts$Encoder *self);
          static PyObject *t_PackedInts$Encoder_longValueCount(t_PackedInts$Encoder *self);

          static PyMethodDef t_PackedInts$Encoder__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Encoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Encoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Encoder, byteBlockCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Encoder, byteValueCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Encoder, encode, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Encoder, longBlockCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Encoder, longValueCount, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$Encoder, t_PackedInts$Encoder, ::java::lang::Object, PackedInts$Encoder, abstract_init, 0, 0, 0, 0, 0);

          void t_PackedInts$Encoder::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Encoder), module, "PackedInts$Encoder", 0);
          }

          void t_PackedInts$Encoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$Encoder).tp_dict, "class_", make_descriptor(PackedInts$Encoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$Encoder).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$Encoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$Encoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$Encoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Encoder::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Encoder::wrap_Object(PackedInts$Encoder(((t_PackedInts$Encoder *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Encoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Encoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedInts$Encoder_byteBlockCount(t_PackedInts$Encoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.byteBlockCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Encoder_byteValueCount(t_PackedInts$Encoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.byteValueCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Encoder_encode(t_PackedInts$Encoder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                JArray< jlong > a0((jobject) NULL);
                jint a1;
                JArray< jbyte > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[JI[BII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.encode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jint > a0((jobject) NULL);
                jint a1;
                JArray< jbyte > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[II[BII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.encode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jlong > a0((jobject) NULL);
                jint a1;
                JArray< jlong > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[JI[JII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.encode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jint > a0((jobject) NULL);
                jint a1;
                JArray< jlong > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[II[JII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.encode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "encode", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Encoder_longBlockCount(t_PackedInts$Encoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.longBlockCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Encoder_longValueCount(t_PackedInts$Encoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.longValueCount());
            return PyInt_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/TokenFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/ClassLoader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *TokenFilterFactory::class$ = NULL;
          jmethodID *TokenFilterFactory::mids$ = NULL;
          bool TokenFilterFactory::live$ = false;

          jclass TokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/TokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_availableTokenFilters_03e99967] = env->getStaticMethodID(cls, "availableTokenFilters", "()Ljava/util/Set;");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_forName_489c139a] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;Ljava/util/Map;)Lorg/apache/lucene/analysis/util/TokenFilterFactory;");
              mids$[mid_lookupClass_7d663d97] = env->getStaticMethodID(cls, "lookupClass", "(Ljava/lang/String;)Ljava/lang/Class;");
              mids$[mid_reloadTokenFilters_9110048d] = env->getStaticMethodID(cls, "reloadTokenFilters", "(Ljava/lang/ClassLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::Set TokenFilterFactory::availableTokenFilters()
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availableTokenFilters_03e99967]));
          }

          ::org::apache::lucene::analysis::TokenStream TokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          TokenFilterFactory TokenFilterFactory::forName(const ::java::lang::String & a0, const ::java::util::Map & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return TokenFilterFactory(env->callStaticObjectMethod(cls, mids$[mid_forName_489c139a], a0.this$, a1.this$));
          }

          ::java::lang::Class TokenFilterFactory::lookupClass(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::Class(env->callStaticObjectMethod(cls, mids$[mid_lookupClass_7d663d97], a0.this$));
          }

          void TokenFilterFactory::reloadTokenFilters(const ::java::lang::ClassLoader & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reloadTokenFilters_9110048d], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_TokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenFilterFactory_availableTokenFilters(PyTypeObject *type);
          static PyObject *t_TokenFilterFactory_create(t_TokenFilterFactory *self, PyObject *arg);
          static PyObject *t_TokenFilterFactory_forName(PyTypeObject *type, PyObject *args);
          static PyObject *t_TokenFilterFactory_lookupClass(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenFilterFactory_reloadTokenFilters(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_TokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenFilterFactory, availableTokenFilters, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenFilterFactory, create, METH_O),
            DECLARE_METHOD(t_TokenFilterFactory, forName, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenFilterFactory, lookupClass, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenFilterFactory, reloadTokenFilters, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenFilterFactory, t_TokenFilterFactory, ::org::apache::lucene::analysis::util::AbstractAnalysisFactory, TokenFilterFactory, abstract_init, 0, 0, 0, 0, 0);

          void t_TokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenFilterFactory), module, "TokenFilterFactory", 0);
          }

          void t_TokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenFilterFactory).tp_dict, "class_", make_descriptor(TokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_TokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TokenFilterFactory::wrap_Object(TokenFilterFactory(((t_TokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TokenFilterFactory_availableTokenFilters(PyTypeObject *type)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenFilterFactory::availableTokenFilters());
            return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_TokenFilterFactory_create(t_TokenFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "create", arg);
            return NULL;
          }

          static PyObject *t_TokenFilterFactory_forName(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::Map a1((jobject) NULL);
            PyTypeObject **p1;
            TokenFilterFactory result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenFilterFactory::forName(a0, a1));
              return t_TokenFilterFactory::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "forName", args);
            return NULL;
          }

          static PyObject *t_TokenFilterFactory_lookupClass(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenFilterFactory::lookupClass(a0));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "lookupClass", arg);
            return NULL;
          }

          static PyObject *t_TokenFilterFactory_reloadTokenFilters(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::ClassLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
            {
              OBJ_CALL(::org::apache::lucene::analysis::util::TokenFilterFactory::reloadTokenFilters(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "reloadTokenFilters", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/Comparable.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntsRef::class$ = NULL;
        jmethodID *IntsRef::mids$ = NULL;
        jfieldID *IntsRef::fids$ = NULL;
        bool IntsRef::live$ = false;
        JArray< jint > *IntsRef::EMPTY_INTS = NULL;

        jclass IntsRef::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntsRef");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_3e1ea22c] = env->getMethodID(cls, "<init>", "([III)V");
            mids$[mid_clone_5b734841] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/IntsRef;");
            mids$[mid_compareTo_4defa0f7] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/util/IntsRef;)I");
            mids$[mid_copyInts_4defa0e8] = env->getMethodID(cls, "copyInts", "(Lorg/apache/lucene/util/IntsRef;)V");
            mids$[mid_deepCopyOf_44b4216f] = env->getStaticMethodID(cls, "deepCopyOf", "(Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_grow_39c7bd3c] = env->getMethodID(cls, "grow", "(I)V");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_intsEquals_4defa0e4] = env->getMethodID(cls, "intsEquals", "(Lorg/apache/lucene/util/IntsRef;)Z");
            mids$[mid_isValid_54c6a16a] = env->getMethodID(cls, "isValid", "()Z");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_ints] = env->getFieldID(cls, "ints", "[I");
            fids$[fid_length] = env->getFieldID(cls, "length", "I");
            fids$[fid_offset] = env->getFieldID(cls, "offset", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_INTS = new JArray< jint >(env->getStaticObjectField(cls, "EMPTY_INTS", "[I"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntsRef::IntsRef() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        IntsRef::IntsRef(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        IntsRef::IntsRef(const JArray< jint > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3e1ea22c, a0.this$, a1, a2)) {}

        IntsRef IntsRef::clone() const
        {
          return IntsRef(env->callObjectMethod(this$, mids$[mid_clone_5b734841]));
        }

        jint IntsRef::compareTo(const IntsRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_4defa0f7], a0.this$);
        }

        void IntsRef::copyInts(const IntsRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyInts_4defa0e8], a0.this$);
        }

        IntsRef IntsRef::deepCopyOf(const IntsRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return IntsRef(env->callStaticObjectMethod(cls, mids$[mid_deepCopyOf_44b4216f], a0.this$));
        }

        jboolean IntsRef::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void IntsRef::grow(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_grow_39c7bd3c], a0);
        }

        jint IntsRef::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean IntsRef::intsEquals(const IntsRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_intsEquals_4defa0e4], a0.this$);
        }

        jboolean IntsRef::isValid() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isValid_54c6a16a]);
        }

        ::java::lang::String IntsRef::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        JArray< jint > IntsRef::_get_ints() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_ints]));
        }

        void IntsRef::_set_ints(const JArray< jint > & a0) const
        {
          env->setObjectField(this$, fids$[fid_ints], a0.this$);
        }

        jint IntsRef::_get_length() const
        {
          return env->getIntField(this$, fids$[fid_length]);
        }

        void IntsRef::_set_length(jint a0) const
        {
          env->setIntField(this$, fids$[fid_length], a0);
        }

        jint IntsRef::_get_offset() const
        {
          return env->getIntField(this$, fids$[fid_offset]);
        }

        void IntsRef::_set_offset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_offset], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntsRef_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntsRef_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntsRef_init_(t_IntsRef *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntsRef_clone(t_IntsRef *self);
        static PyObject *t_IntsRef_compareTo(t_IntsRef *self, PyObject *arg);
        static PyObject *t_IntsRef_copyInts(t_IntsRef *self, PyObject *arg);
        static PyObject *t_IntsRef_deepCopyOf(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntsRef_equals(t_IntsRef *self, PyObject *args);
        static PyObject *t_IntsRef_grow(t_IntsRef *self, PyObject *arg);
        static PyObject *t_IntsRef_hashCode(t_IntsRef *self, PyObject *args);
        static PyObject *t_IntsRef_intsEquals(t_IntsRef *self, PyObject *arg);
        static PyObject *t_IntsRef_isValid(t_IntsRef *self);
        static PyObject *t_IntsRef_toString(t_IntsRef *self, PyObject *args);
        static PyObject *t_IntsRef_get__ints(t_IntsRef *self, void *data);
        static int t_IntsRef_set__ints(t_IntsRef *self, PyObject *arg, void *data);
        static PyObject *t_IntsRef_get__length(t_IntsRef *self, void *data);
        static int t_IntsRef_set__length(t_IntsRef *self, PyObject *arg, void *data);
        static PyObject *t_IntsRef_get__offset(t_IntsRef *self, void *data);
        static int t_IntsRef_set__offset(t_IntsRef *self, PyObject *arg, void *data);

        static PyObject *t_IntsRef_get__valid(t_IntsRef *self, void *data);
        static PyGetSetDef t_IntsRef__fields_[] = {
          DECLARE_GETSET_FIELD(t_IntsRef, ints),
          DECLARE_GETSET_FIELD(t_IntsRef, length),
          DECLARE_GETSET_FIELD(t_IntsRef, offset),
          DECLARE_GET_FIELD(t_IntsRef, valid),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IntsRef__methods_[] = {
          DECLARE_METHOD(t_IntsRef, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntsRef, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntsRef, clone, METH_NOARGS),
          DECLARE_METHOD(t_IntsRef, compareTo, METH_O),
          DECLARE_METHOD(t_IntsRef, copyInts, METH_O),
          DECLARE_METHOD(t_IntsRef, deepCopyOf, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntsRef, equals, METH_VARARGS),
          DECLARE_METHOD(t_IntsRef, grow, METH_O),
          DECLARE_METHOD(t_IntsRef, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IntsRef, intsEquals, METH_O),
          DECLARE_METHOD(t_IntsRef, isValid, METH_NOARGS),
          DECLARE_METHOD(t_IntsRef, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntsRef, t_IntsRef, ::java::lang::Object, IntsRef, t_IntsRef_init_, 0, 0, t_IntsRef__fields_, 0, 0);

        void t_IntsRef::install(PyObject *module)
        {
          installType(&PY_TYPE(IntsRef), module, "IntsRef", 0);
        }

        void t_IntsRef::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntsRef).tp_dict, "class_", make_descriptor(IntsRef::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntsRef).tp_dict, "wrapfn_", make_descriptor(t_IntsRef::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntsRef).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IntsRef::initializeClass);
          PyDict_SetItemString(PY_TYPE(IntsRef).tp_dict, "EMPTY_INTS", make_descriptor(IntsRef::EMPTY_INTS->wrap()));
        }

        static PyObject *t_IntsRef_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntsRef::initializeClass, 1)))
            return NULL;
          return t_IntsRef::wrap_Object(IntsRef(((t_IntsRef *) arg)->object.this$));
        }
        static PyObject *t_IntsRef_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntsRef::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntsRef_init_(t_IntsRef *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              IntsRef object((jobject) NULL);

              INT_CALL(object = IntsRef());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              jint a0;
              IntsRef object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = IntsRef(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jint > a0((jobject) NULL);
              jint a1;
              jint a2;
              IntsRef object((jobject) NULL);

              if (!parseArgs(args, "[III", &a0, &a1, &a2))
              {
                INT_CALL(object = IntsRef(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntsRef_clone(t_IntsRef *self)
        {
          IntsRef result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_IntsRef::wrap_Object(result);
        }

        static PyObject *t_IntsRef_compareTo(t_IntsRef *self, PyObject *arg)
        {
          IntsRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", IntsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_IntsRef_copyInts(t_IntsRef *self, PyObject *arg)
        {
          IntsRef a0((jobject) NULL);

          if (!parseArg(arg, "k", IntsRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyInts(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyInts", arg);
          return NULL;
        }

        static PyObject *t_IntsRef_deepCopyOf(PyTypeObject *type, PyObject *arg)
        {
          IntsRef a0((jobject) NULL);
          IntsRef result((jobject) NULL);

          if (!parseArg(arg, "k", IntsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::IntsRef::deepCopyOf(a0));
            return t_IntsRef::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "deepCopyOf", arg);
          return NULL;
        }

        static PyObject *t_IntsRef_equals(t_IntsRef *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(IntsRef), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IntsRef_grow(t_IntsRef *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.grow(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "grow", arg);
          return NULL;
        }

        static PyObject *t_IntsRef_hashCode(t_IntsRef *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IntsRef), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IntsRef_intsEquals(t_IntsRef *self, PyObject *arg)
        {
          IntsRef a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", IntsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.intsEquals(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "intsEquals", arg);
          return NULL;
        }

        static PyObject *t_IntsRef_isValid(t_IntsRef *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isValid());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IntsRef_toString(t_IntsRef *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(IntsRef), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_IntsRef_get__ints(t_IntsRef *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_ints());
          return value.wrap();
        }
        static int t_IntsRef_set__ints(t_IntsRef *self, PyObject *arg, void *data)
        {
          JArray< jint > value((jobject) NULL);
          if (!parseArg(arg, "[I", &value))
          {
            INT_CALL(self->object._set_ints(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "ints", arg);
          return -1;
        }

        static PyObject *t_IntsRef_get__length(t_IntsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_length());
          return PyInt_FromLong((long) value);
        }
        static int t_IntsRef_set__length(t_IntsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_length(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "length", arg);
          return -1;
        }

        static PyObject *t_IntsRef_get__offset(t_IntsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_offset());
          return PyInt_FromLong((long) value);
        }
        static int t_IntsRef_set__offset(t_IntsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_offset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "offset", arg);
          return -1;
        }

        static PyObject *t_IntsRef_get__valid(t_IntsRef *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isValid());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tr/TurkishLowerCaseFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {

          ::java::lang::Class *TurkishLowerCaseFilter::class$ = NULL;
          jmethodID *TurkishLowerCaseFilter::mids$ = NULL;
          bool TurkishLowerCaseFilter::live$ = false;

          jclass TurkishLowerCaseFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tr/TurkishLowerCaseFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TurkishLowerCaseFilter::TurkishLowerCaseFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean TurkishLowerCaseFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {
          static PyObject *t_TurkishLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TurkishLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TurkishLowerCaseFilter_init_(t_TurkishLowerCaseFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TurkishLowerCaseFilter_incrementToken(t_TurkishLowerCaseFilter *self, PyObject *args);

          static PyMethodDef t_TurkishLowerCaseFilter__methods_[] = {
            DECLARE_METHOD(t_TurkishLowerCaseFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishLowerCaseFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishLowerCaseFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TurkishLowerCaseFilter, t_TurkishLowerCaseFilter, ::org::apache::lucene::analysis::TokenFilter, TurkishLowerCaseFilter, t_TurkishLowerCaseFilter_init_, 0, 0, 0, 0, 0);

          void t_TurkishLowerCaseFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TurkishLowerCaseFilter), module, "TurkishLowerCaseFilter", 0);
          }

          void t_TurkishLowerCaseFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TurkishLowerCaseFilter).tp_dict, "class_", make_descriptor(TurkishLowerCaseFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TurkishLowerCaseFilter).tp_dict, "wrapfn_", make_descriptor(t_TurkishLowerCaseFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TurkishLowerCaseFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TurkishLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TurkishLowerCaseFilter::initializeClass, 1)))
              return NULL;
            return t_TurkishLowerCaseFilter::wrap_Object(TurkishLowerCaseFilter(((t_TurkishLowerCaseFilter *) arg)->object.this$));
          }
          static PyObject *t_TurkishLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TurkishLowerCaseFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TurkishLowerCaseFilter_init_(t_TurkishLowerCaseFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            TurkishLowerCaseFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = TurkishLowerCaseFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TurkishLowerCaseFilter_incrementToken(t_TurkishLowerCaseFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TurkishLowerCaseFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/NGramTokenizer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *NGramTokenizer::class$ = NULL;
          jmethodID *NGramTokenizer::mids$ = NULL;
          bool NGramTokenizer::live$ = false;
          jint NGramTokenizer::DEFAULT_MAX_NGRAM_SIZE = (jint) 0;
          jint NGramTokenizer::DEFAULT_MIN_NGRAM_SIZE = (jint) 0;

          jclass NGramTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/NGramTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_47cfcf59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;II)V");
              mids$[mid_init$_0c87564f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;II)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_NGRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_NGRAM_SIZE");
              DEFAULT_MIN_NGRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_NGRAM_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NGramTokenizer::NGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          NGramTokenizer::NGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_47cfcf59, a0.this$, a1.this$, a2, a3)) {}

          NGramTokenizer::NGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_0c87564f, a0.this$, a1.this$, a2.this$, a3, a4)) {}

          void NGramTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean NGramTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void NGramTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_NGramTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NGramTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NGramTokenizer_init_(t_NGramTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NGramTokenizer_end(t_NGramTokenizer *self, PyObject *args);
          static PyObject *t_NGramTokenizer_incrementToken(t_NGramTokenizer *self, PyObject *args);
          static PyObject *t_NGramTokenizer_reset(t_NGramTokenizer *self, PyObject *args);

          static PyMethodDef t_NGramTokenizer__methods_[] = {
            DECLARE_METHOD(t_NGramTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_NGramTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_NGramTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NGramTokenizer, t_NGramTokenizer, ::org::apache::lucene::analysis::Tokenizer, NGramTokenizer, t_NGramTokenizer_init_, 0, 0, 0, 0, 0);

          void t_NGramTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(NGramTokenizer), module, "NGramTokenizer", 0);
          }

          void t_NGramTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NGramTokenizer).tp_dict, "class_", make_descriptor(NGramTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NGramTokenizer).tp_dict, "wrapfn_", make_descriptor(t_NGramTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NGramTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(NGramTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(NGramTokenizer).tp_dict, "DEFAULT_MAX_NGRAM_SIZE", make_descriptor(NGramTokenizer::DEFAULT_MAX_NGRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(NGramTokenizer).tp_dict, "DEFAULT_MIN_NGRAM_SIZE", make_descriptor(NGramTokenizer::DEFAULT_MIN_NGRAM_SIZE));
          }

          static PyObject *t_NGramTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NGramTokenizer::initializeClass, 1)))
              return NULL;
            return t_NGramTokenizer::wrap_Object(NGramTokenizer(((t_NGramTokenizer *) arg)->object.this$));
          }
          static PyObject *t_NGramTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NGramTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NGramTokenizer_init_(t_NGramTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                NGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = NGramTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jint a3;
                NGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KkII", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  INT_CALL(object = NGramTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                jint a3;
                jint a4;
                NGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KkkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = NGramTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NGramTokenizer_end(t_NGramTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(NGramTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_NGramTokenizer_incrementToken(t_NGramTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NGramTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_NGramTokenizer_reset(t_NGramTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(NGramTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SynonymFilter.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SynonymFilter::class$ = NULL;
          jmethodID *SynonymFilter::mids$ = NULL;
          bool SynonymFilter::live$ = false;
          ::java::lang::String *SynonymFilter::TYPE_SYNONYM = NULL;

          jclass SynonymFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SynonymFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6759cd52] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/synonym/SynonymMap;Z)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              TYPE_SYNONYM = new ::java::lang::String(env->getStaticObjectField(cls, "TYPE_SYNONYM", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SynonymFilter::SynonymFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::synonym::SynonymMap & a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_6759cd52, a0.this$, a1.this$, a2)) {}

          jboolean SynonymFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void SynonymFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SynonymFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SynonymFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SynonymFilter_init_(t_SynonymFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SynonymFilter_incrementToken(t_SynonymFilter *self, PyObject *args);
          static PyObject *t_SynonymFilter_reset(t_SynonymFilter *self, PyObject *args);

          static PyMethodDef t_SynonymFilter__methods_[] = {
            DECLARE_METHOD(t_SynonymFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_SynonymFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SynonymFilter, t_SynonymFilter, ::org::apache::lucene::analysis::TokenFilter, SynonymFilter, t_SynonymFilter_init_, 0, 0, 0, 0, 0);

          void t_SynonymFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SynonymFilter), module, "SynonymFilter", 0);
          }

          void t_SynonymFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SynonymFilter).tp_dict, "class_", make_descriptor(SynonymFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SynonymFilter).tp_dict, "wrapfn_", make_descriptor(t_SynonymFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SynonymFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SynonymFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(SynonymFilter).tp_dict, "TYPE_SYNONYM", make_descriptor(j2p(*SynonymFilter::TYPE_SYNONYM)));
          }

          static PyObject *t_SynonymFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SynonymFilter::initializeClass, 1)))
              return NULL;
            return t_SynonymFilter::wrap_Object(SynonymFilter(((t_SynonymFilter *) arg)->object.this$));
          }
          static PyObject *t_SynonymFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SynonymFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SynonymFilter_init_(t_SynonymFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::synonym::SynonymMap a1((jobject) NULL);
            jboolean a2;
            SynonymFilter object((jobject) NULL);

            if (!parseArgs(args, "kkZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::synonym::SynonymMap::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = SynonymFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SynonymFilter_incrementToken(t_SynonymFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SynonymFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_SynonymFilter_reset(t_SynonymFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SynonymFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/PerFieldAnalyzerWrapper.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *PerFieldAnalyzerWrapper::class$ = NULL;
          jmethodID *PerFieldAnalyzerWrapper::mids$ = NULL;
          bool PerFieldAnalyzerWrapper::live$ = false;

          jclass PerFieldAnalyzerWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/PerFieldAnalyzerWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init$_b5f2d646] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/util/Map;)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_getWrappedAnalyzer_29a2299f] = env->getMethodID(cls, "getWrappedAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PerFieldAnalyzerWrapper::PerFieldAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}

          PerFieldAnalyzerWrapper::PerFieldAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::util::Map & a1) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_b5f2d646, a0.this$, a1.this$)) {}

          ::java::lang::String PerFieldAnalyzerWrapper::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_PerFieldAnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PerFieldAnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PerFieldAnalyzerWrapper_init_(t_PerFieldAnalyzerWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PerFieldAnalyzerWrapper_toString(t_PerFieldAnalyzerWrapper *self, PyObject *args);

          static PyMethodDef t_PerFieldAnalyzerWrapper__methods_[] = {
            DECLARE_METHOD(t_PerFieldAnalyzerWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldAnalyzerWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldAnalyzerWrapper, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PerFieldAnalyzerWrapper, t_PerFieldAnalyzerWrapper, ::org::apache::lucene::analysis::AnalyzerWrapper, PerFieldAnalyzerWrapper, t_PerFieldAnalyzerWrapper_init_, 0, 0, 0, 0, 0);

          void t_PerFieldAnalyzerWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(PerFieldAnalyzerWrapper), module, "PerFieldAnalyzerWrapper", 0);
          }

          void t_PerFieldAnalyzerWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PerFieldAnalyzerWrapper).tp_dict, "class_", make_descriptor(PerFieldAnalyzerWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PerFieldAnalyzerWrapper).tp_dict, "wrapfn_", make_descriptor(t_PerFieldAnalyzerWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PerFieldAnalyzerWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PerFieldAnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PerFieldAnalyzerWrapper::initializeClass, 1)))
              return NULL;
            return t_PerFieldAnalyzerWrapper::wrap_Object(PerFieldAnalyzerWrapper(((t_PerFieldAnalyzerWrapper *) arg)->object.this$));
          }
          static PyObject *t_PerFieldAnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PerFieldAnalyzerWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PerFieldAnalyzerWrapper_init_(t_PerFieldAnalyzerWrapper *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                PerFieldAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                {
                  INT_CALL(object = PerFieldAnalyzerWrapper(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                PerFieldAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  INT_CALL(object = PerFieldAnalyzerWrapper(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PerFieldAnalyzerWrapper_toString(t_PerFieldAnalyzerWrapper *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PerFieldAnalyzerWrapper), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *DuplicateFilter$ProcessingMode::class$ = NULL;
          jmethodID *DuplicateFilter$ProcessingMode::mids$ = NULL;
          bool DuplicateFilter$ProcessingMode::live$ = false;
          DuplicateFilter$ProcessingMode *DuplicateFilter$ProcessingMode::PM_FAST_INVALIDATION = NULL;
          DuplicateFilter$ProcessingMode *DuplicateFilter$ProcessingMode::PM_FULL_VALIDATION = NULL;

          jclass DuplicateFilter$ProcessingMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_5b1a28e1] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode;");
              mids$[mid_values_e8e814df] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PM_FAST_INVALIDATION = new DuplicateFilter$ProcessingMode(env->getStaticObjectField(cls, "PM_FAST_INVALIDATION", "Lorg/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode;"));
              PM_FULL_VALIDATION = new DuplicateFilter$ProcessingMode(env->getStaticObjectField(cls, "PM_FULL_VALIDATION", "Lorg/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DuplicateFilter$ProcessingMode DuplicateFilter$ProcessingMode::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return DuplicateFilter$ProcessingMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_5b1a28e1], a0.this$));
          }

          JArray< DuplicateFilter$ProcessingMode > DuplicateFilter$ProcessingMode::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< DuplicateFilter$ProcessingMode >(env->callStaticObjectMethod(cls, mids$[mid_values_e8e814df]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_DuplicateFilter$ProcessingMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DuplicateFilter$ProcessingMode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DuplicateFilter$ProcessingMode_of_(t_DuplicateFilter$ProcessingMode *self, PyObject *args);
          static PyObject *t_DuplicateFilter$ProcessingMode_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_DuplicateFilter$ProcessingMode_values(PyTypeObject *type);
          static PyObject *t_DuplicateFilter$ProcessingMode_get__parameters_(t_DuplicateFilter$ProcessingMode *self, void *data);
          static PyGetSetDef t_DuplicateFilter$ProcessingMode__fields_[] = {
            DECLARE_GET_FIELD(t_DuplicateFilter$ProcessingMode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DuplicateFilter$ProcessingMode__methods_[] = {
            DECLARE_METHOD(t_DuplicateFilter$ProcessingMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter$ProcessingMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter$ProcessingMode, of_, METH_VARARGS),
            DECLARE_METHOD(t_DuplicateFilter$ProcessingMode, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter$ProcessingMode, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DuplicateFilter$ProcessingMode, t_DuplicateFilter$ProcessingMode, ::java::lang::Enum, DuplicateFilter$ProcessingMode, abstract_init, 0, 0, t_DuplicateFilter$ProcessingMode__fields_, 0, 0);
          PyObject *t_DuplicateFilter$ProcessingMode::wrap_Object(const DuplicateFilter$ProcessingMode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_DuplicateFilter$ProcessingMode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DuplicateFilter$ProcessingMode *self = (t_DuplicateFilter$ProcessingMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_DuplicateFilter$ProcessingMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_DuplicateFilter$ProcessingMode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DuplicateFilter$ProcessingMode *self = (t_DuplicateFilter$ProcessingMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_DuplicateFilter$ProcessingMode::install(PyObject *module)
          {
            installType(&PY_TYPE(DuplicateFilter$ProcessingMode), module, "DuplicateFilter$ProcessingMode", 0);
          }

          void t_DuplicateFilter$ProcessingMode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$ProcessingMode).tp_dict, "class_", make_descriptor(DuplicateFilter$ProcessingMode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$ProcessingMode).tp_dict, "wrapfn_", make_descriptor(t_DuplicateFilter$ProcessingMode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$ProcessingMode).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DuplicateFilter$ProcessingMode::initializeClass);
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$ProcessingMode).tp_dict, "PM_FAST_INVALIDATION", make_descriptor(t_DuplicateFilter$ProcessingMode::wrap_Object(*DuplicateFilter$ProcessingMode::PM_FAST_INVALIDATION)));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$ProcessingMode).tp_dict, "PM_FULL_VALIDATION", make_descriptor(t_DuplicateFilter$ProcessingMode::wrap_Object(*DuplicateFilter$ProcessingMode::PM_FULL_VALIDATION)));
          }

          static PyObject *t_DuplicateFilter$ProcessingMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DuplicateFilter$ProcessingMode::initializeClass, 1)))
              return NULL;
            return t_DuplicateFilter$ProcessingMode::wrap_Object(DuplicateFilter$ProcessingMode(((t_DuplicateFilter$ProcessingMode *) arg)->object.this$));
          }
          static PyObject *t_DuplicateFilter$ProcessingMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DuplicateFilter$ProcessingMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_DuplicateFilter$ProcessingMode_of_(t_DuplicateFilter$ProcessingMode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_DuplicateFilter$ProcessingMode_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            DuplicateFilter$ProcessingMode result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode::valueOf(a0));
              return t_DuplicateFilter$ProcessingMode::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_DuplicateFilter$ProcessingMode_values(PyTypeObject *type)
          {
            JArray< DuplicateFilter$ProcessingMode > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode::values());
            return JArray<jobject>(result.this$).wrap(t_DuplicateFilter$ProcessingMode::wrap_jobject);
          }
          static PyObject *t_DuplicateFilter$ProcessingMode_get__parameters_(t_DuplicateFilter$ProcessingMode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/LongRangeCounter$LongRangeNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *LongRangeCounter$LongRangeNode::class$ = NULL;
          jmethodID *LongRangeCounter$LongRangeNode::mids$ = NULL;
          bool LongRangeCounter$LongRangeNode::live$ = false;

          jclass LongRangeCounter$LongRangeNode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/LongRangeCounter$LongRangeNode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ec849fce] = env->getMethodID(cls, "<init>", "(JJLorg/apache/lucene/facet/range/LongRangeCounter$LongRangeNode;Lorg/apache/lucene/facet/range/LongRangeCounter$LongRangeNode;I)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LongRangeCounter$LongRangeNode::LongRangeCounter$LongRangeNode(jlong a0, jlong a1, const LongRangeCounter$LongRangeNode & a2, const LongRangeCounter$LongRangeNode & a3, jint a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ec849fce, a0, a1, a2.this$, a3.this$, a4)) {}

          ::java::lang::String LongRangeCounter$LongRangeNode::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_LongRangeCounter$LongRangeNode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LongRangeCounter$LongRangeNode_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LongRangeCounter$LongRangeNode_init_(t_LongRangeCounter$LongRangeNode *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LongRangeCounter$LongRangeNode_toString(t_LongRangeCounter$LongRangeNode *self, PyObject *args);

          static PyMethodDef t_LongRangeCounter$LongRangeNode__methods_[] = {
            DECLARE_METHOD(t_LongRangeCounter$LongRangeNode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRangeCounter$LongRangeNode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRangeCounter$LongRangeNode, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LongRangeCounter$LongRangeNode, t_LongRangeCounter$LongRangeNode, ::java::lang::Object, LongRangeCounter$LongRangeNode, t_LongRangeCounter$LongRangeNode_init_, 0, 0, 0, 0, 0);

          void t_LongRangeCounter$LongRangeNode::install(PyObject *module)
          {
            installType(&PY_TYPE(LongRangeCounter$LongRangeNode), module, "LongRangeCounter$LongRangeNode", 0);
          }

          void t_LongRangeCounter$LongRangeNode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LongRangeCounter$LongRangeNode).tp_dict, "class_", make_descriptor(LongRangeCounter$LongRangeNode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LongRangeCounter$LongRangeNode).tp_dict, "wrapfn_", make_descriptor(t_LongRangeCounter$LongRangeNode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LongRangeCounter$LongRangeNode).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LongRangeCounter$LongRangeNode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LongRangeCounter$LongRangeNode::initializeClass, 1)))
              return NULL;
            return t_LongRangeCounter$LongRangeNode::wrap_Object(LongRangeCounter$LongRangeNode(((t_LongRangeCounter$LongRangeNode *) arg)->object.this$));
          }
          static PyObject *t_LongRangeCounter$LongRangeNode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LongRangeCounter$LongRangeNode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LongRangeCounter$LongRangeNode_init_(t_LongRangeCounter$LongRangeNode *self, PyObject *args, PyObject *kwds)
          {
            jlong a0;
            jlong a1;
            LongRangeCounter$LongRangeNode a2((jobject) NULL);
            LongRangeCounter$LongRangeNode a3((jobject) NULL);
            jint a4;
            LongRangeCounter$LongRangeNode object((jobject) NULL);

            if (!parseArgs(args, "JJkkI", LongRangeCounter$LongRangeNode::initializeClass, LongRangeCounter$LongRangeNode::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = LongRangeCounter$LongRangeNode(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LongRangeCounter$LongRangeNode_toString(t_LongRangeCounter$LongRangeNode *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LongRangeCounter$LongRangeNode), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/postingshighlight/WholeBreakIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {

          ::java::lang::Class *WholeBreakIterator::class$ = NULL;
          jmethodID *WholeBreakIterator::mids$ = NULL;
          bool WholeBreakIterator::live$ = false;

          jclass WholeBreakIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/postingshighlight/WholeBreakIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_current_54c6a179] = env->getMethodID(cls, "current", "()I");
              mids$[mid_first_54c6a179] = env->getMethodID(cls, "first", "()I");
              mids$[mid_following_39c7bd23] = env->getMethodID(cls, "following", "(I)I");
              mids$[mid_last_54c6a179] = env->getMethodID(cls, "last", "()I");
              mids$[mid_next_54c6a179] = env->getMethodID(cls, "next", "()I");
              mids$[mid_next_39c7bd23] = env->getMethodID(cls, "next", "(I)I");
              mids$[mid_preceding_39c7bd23] = env->getMethodID(cls, "preceding", "(I)I");
              mids$[mid_previous_54c6a179] = env->getMethodID(cls, "previous", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WholeBreakIterator::WholeBreakIterator() : ::java::text::BreakIterator(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint WholeBreakIterator::current() const
          {
            return env->callIntMethod(this$, mids$[mid_current_54c6a179]);
          }

          jint WholeBreakIterator::first() const
          {
            return env->callIntMethod(this$, mids$[mid_first_54c6a179]);
          }

          jint WholeBreakIterator::following(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_following_39c7bd23], a0);
          }

          jint WholeBreakIterator::last() const
          {
            return env->callIntMethod(this$, mids$[mid_last_54c6a179]);
          }

          jint WholeBreakIterator::next() const
          {
            return env->callIntMethod(this$, mids$[mid_next_54c6a179]);
          }

          jint WholeBreakIterator::next(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_next_39c7bd23], a0);
          }

          jint WholeBreakIterator::preceding(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_preceding_39c7bd23], a0);
          }

          jint WholeBreakIterator::previous() const
          {
            return env->callIntMethod(this$, mids$[mid_previous_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {
          static PyObject *t_WholeBreakIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WholeBreakIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WholeBreakIterator_init_(t_WholeBreakIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WholeBreakIterator_current(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_first(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_following(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_last(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_next(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_preceding(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_previous(t_WholeBreakIterator *self, PyObject *args);

          static PyMethodDef t_WholeBreakIterator__methods_[] = {
            DECLARE_METHOD(t_WholeBreakIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WholeBreakIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WholeBreakIterator, current, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, first, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, following, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, last, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, next, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, preceding, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, previous, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WholeBreakIterator, t_WholeBreakIterator, ::java::text::BreakIterator, WholeBreakIterator, t_WholeBreakIterator_init_, 0, 0, 0, 0, 0);

          void t_WholeBreakIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(WholeBreakIterator), module, "WholeBreakIterator", 0);
          }

          void t_WholeBreakIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WholeBreakIterator).tp_dict, "class_", make_descriptor(WholeBreakIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WholeBreakIterator).tp_dict, "wrapfn_", make_descriptor(t_WholeBreakIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WholeBreakIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WholeBreakIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WholeBreakIterator::initializeClass, 1)))
              return NULL;
            return t_WholeBreakIterator::wrap_Object(WholeBreakIterator(((t_WholeBreakIterator *) arg)->object.this$));
          }
          static PyObject *t_WholeBreakIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WholeBreakIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WholeBreakIterator_init_(t_WholeBreakIterator *self, PyObject *args, PyObject *kwds)
          {
            WholeBreakIterator object((jobject) NULL);

            INT_CALL(object = WholeBreakIterator());
            self->object = object;

            return 0;
          }

          static PyObject *t_WholeBreakIterator_current(t_WholeBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.current());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(WholeBreakIterator), (PyObject *) self, "current", args, 2);
          }

          static PyObject *t_WholeBreakIterator_first(t_WholeBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.first());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(WholeBreakIterator), (PyObject *) self, "first", args, 2);
          }

          static PyObject *t_WholeBreakIterator_following(t_WholeBreakIterator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.following(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(WholeBreakIterator), (PyObject *) self, "following", args, 2);
          }

          static PyObject *t_WholeBreakIterator_last(t_WholeBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.last());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(WholeBreakIterator), (PyObject *) self, "last", args, 2);
          }

          static PyObject *t_WholeBreakIterator_next(t_WholeBreakIterator *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.next());
                return PyInt_FromLong((long) result);
              }
              break;
             case 1:
              {
                jint a0;
                jint result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.next(a0));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(WholeBreakIterator), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_WholeBreakIterator_preceding(t_WholeBreakIterator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.preceding(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(WholeBreakIterator), (PyObject *) self, "preceding", args, 2);
          }

          static PyObject *t_WholeBreakIterator_previous(t_WholeBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.previous());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(WholeBreakIterator), (PyObject *) self, "previous", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/FloatAssociationFacetField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *FloatAssociationFacetField::class$ = NULL;
          jmethodID *FloatAssociationFacetField::mids$ = NULL;
          bool FloatAssociationFacetField::live$ = false;

          jclass FloatAssociationFacetField::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/FloatAssociationFacetField");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_000acdbd] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_bytesRefToFloat_7bc03dd4] = env->getStaticMethodID(cls, "bytesRefToFloat", "(Lorg/apache/lucene/util/BytesRef;)F");
              mids$[mid_floatToBytesRef_291d8a68] = env->getStaticMethodID(cls, "floatToBytesRef", "(F)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FloatAssociationFacetField::FloatAssociationFacetField(jfloat a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) : ::org::apache::lucene::facet::taxonomy::AssociationFacetField(env->newObject(initializeClass, &mids$, mid_init$_000acdbd, a0, a1.this$, a2.this$)) {}

          jfloat FloatAssociationFacetField::bytesRefToFloat(const ::org::apache::lucene::util::BytesRef & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticFloatMethod(cls, mids$[mid_bytesRefToFloat_7bc03dd4], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef FloatAssociationFacetField::floatToBytesRef(jfloat a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_floatToBytesRef_291d8a68], a0));
          }

          ::java::lang::String FloatAssociationFacetField::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_FloatAssociationFacetField_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatAssociationFacetField_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FloatAssociationFacetField_init_(t_FloatAssociationFacetField *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FloatAssociationFacetField_bytesRefToFloat(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatAssociationFacetField_floatToBytesRef(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatAssociationFacetField_toString(t_FloatAssociationFacetField *self, PyObject *args);

          static PyMethodDef t_FloatAssociationFacetField__methods_[] = {
            DECLARE_METHOD(t_FloatAssociationFacetField, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatAssociationFacetField, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatAssociationFacetField, bytesRefToFloat, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatAssociationFacetField, floatToBytesRef, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatAssociationFacetField, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FloatAssociationFacetField, t_FloatAssociationFacetField, ::org::apache::lucene::facet::taxonomy::AssociationFacetField, FloatAssociationFacetField, t_FloatAssociationFacetField_init_, 0, 0, 0, 0, 0);

          void t_FloatAssociationFacetField::install(PyObject *module)
          {
            installType(&PY_TYPE(FloatAssociationFacetField), module, "FloatAssociationFacetField", 0);
          }

          void t_FloatAssociationFacetField::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FloatAssociationFacetField).tp_dict, "class_", make_descriptor(FloatAssociationFacetField::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FloatAssociationFacetField).tp_dict, "wrapfn_", make_descriptor(t_FloatAssociationFacetField::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FloatAssociationFacetField).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FloatAssociationFacetField_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FloatAssociationFacetField::initializeClass, 1)))
              return NULL;
            return t_FloatAssociationFacetField::wrap_Object(FloatAssociationFacetField(((t_FloatAssociationFacetField *) arg)->object.this$));
          }
          static PyObject *t_FloatAssociationFacetField_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FloatAssociationFacetField::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FloatAssociationFacetField_init_(t_FloatAssociationFacetField *self, PyObject *args, PyObject *kwds)
          {
            jfloat a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            FloatAssociationFacetField object((jobject) NULL);

            if (!parseArgs(args, "Fs[s", &a0, &a1, &a2))
            {
              INT_CALL(object = FloatAssociationFacetField(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FloatAssociationFacetField_bytesRefToFloat(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jfloat result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::FloatAssociationFacetField::bytesRefToFloat(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError(type, "bytesRefToFloat", arg);
            return NULL;
          }

          static PyObject *t_FloatAssociationFacetField_floatToBytesRef(PyTypeObject *type, PyObject *arg)
          {
            jfloat a0;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::FloatAssociationFacetField::floatToBytesRef(a0));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "floatToBytesRef", arg);
            return NULL;
          }

          static PyObject *t_FloatAssociationFacetField_toString(t_FloatAssociationFacetField *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FloatAssociationFacetField), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$ProximityType.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ProximityQueryNode$ProximityType::class$ = NULL;
              jmethodID *ProximityQueryNode$ProximityType::mids$ = NULL;
              bool ProximityQueryNode$ProximityType::live$ = false;

              jclass ProximityQueryNode$ProximityType::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$ProximityType");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f6618874] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;)V");
                  mids$[mid_init$_4097b5f6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;I)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ProximityQueryNode$ProximityType::ProximityQueryNode$ProximityType(const ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f6618874, a0.this$)) {}

              ProximityQueryNode$ProximityType::ProximityQueryNode$ProximityType(const ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4097b5f6, a0.this$, a1)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ProximityQueryNode$ProximityType_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ProximityQueryNode$ProximityType_instance_(PyTypeObject *type, PyObject *arg);
              static int t_ProximityQueryNode$ProximityType_init_(t_ProximityQueryNode$ProximityType *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_ProximityQueryNode$ProximityType__methods_[] = {
                DECLARE_METHOD(t_ProximityQueryNode$ProximityType, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode$ProximityType, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ProximityQueryNode$ProximityType, t_ProximityQueryNode$ProximityType, ::java::lang::Object, ProximityQueryNode$ProximityType, t_ProximityQueryNode$ProximityType_init_, 0, 0, 0, 0, 0);

              void t_ProximityQueryNode$ProximityType::install(PyObject *module)
              {
                installType(&PY_TYPE(ProximityQueryNode$ProximityType), module, "ProximityQueryNode$ProximityType", 0);
              }

              void t_ProximityQueryNode$ProximityType::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$ProximityType).tp_dict, "class_", make_descriptor(ProximityQueryNode$ProximityType::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$ProximityType).tp_dict, "wrapfn_", make_descriptor(t_ProximityQueryNode$ProximityType::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$ProximityType).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ProximityQueryNode$ProximityType_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ProximityQueryNode$ProximityType::initializeClass, 1)))
                  return NULL;
                return t_ProximityQueryNode$ProximityType::wrap_Object(ProximityQueryNode$ProximityType(((t_ProximityQueryNode$ProximityType *) arg)->object.this$));
              }
              static PyObject *t_ProximityQueryNode$ProximityType_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ProximityQueryNode$ProximityType::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_ProximityQueryNode$ProximityType_init_(t_ProximityQueryNode$ProximityType *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type a0((jobject) NULL);
                    PyTypeObject **p0;
                    ProximityQueryNode$ProximityType object((jobject) NULL);

                    if (!parseArgs(args, "K", ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::parameters_))
                    {
                      INT_CALL(object = ProximityQueryNode$ProximityType(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 2:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type a0((jobject) NULL);
                    PyTypeObject **p0;
                    jint a1;
                    ProximityQueryNode$ProximityType object((jobject) NULL);

                    if (!parseArgs(args, "KI", ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::parameters_, &a1))
                    {
                      INT_CALL(object = ProximityQueryNode$ProximityType(a0, a1));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/BytesRefHash.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SynonymMap::class$ = NULL;
          jmethodID *SynonymMap::mids$ = NULL;
          jfieldID *SynonymMap::fids$ = NULL;
          bool SynonymMap::live$ = false;
          jchar SynonymMap::WORD_SEPARATOR = (jchar) 0;

          jclass SynonymMap::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SynonymMap");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4abf6d88] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;Lorg/apache/lucene/util/BytesRefHash;I)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_fst] = env->getFieldID(cls, "fst", "Lorg/apache/lucene/util/fst/FST;");
              fids$[fid_maxHorizontalContext] = env->getFieldID(cls, "maxHorizontalContext", "I");
              fids$[fid_words] = env->getFieldID(cls, "words", "Lorg/apache/lucene/util/BytesRefHash;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              WORD_SEPARATOR = env->getStaticCharField(cls, "WORD_SEPARATOR");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SynonymMap::SynonymMap(const ::org::apache::lucene::util::fst::FST & a0, const ::org::apache::lucene::util::BytesRefHash & a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4abf6d88, a0.this$, a1.this$, a2)) {}

          ::org::apache::lucene::util::fst::FST SynonymMap::_get_fst() const
          {
            return ::org::apache::lucene::util::fst::FST(env->getObjectField(this$, fids$[fid_fst]));
          }

          jint SynonymMap::_get_maxHorizontalContext() const
          {
            return env->getIntField(this$, fids$[fid_maxHorizontalContext]);
          }

          ::org::apache::lucene::util::BytesRefHash SynonymMap::_get_words() const
          {
            return ::org::apache::lucene::util::BytesRefHash(env->getObjectField(this$, fids$[fid_words]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap$Parser.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SynonymMap_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SynonymMap_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SynonymMap_init_(t_SynonymMap *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SynonymMap_get__fst(t_SynonymMap *self, void *data);
          static PyObject *t_SynonymMap_get__maxHorizontalContext(t_SynonymMap *self, void *data);
          static PyObject *t_SynonymMap_get__words(t_SynonymMap *self, void *data);

          static PyGetSetDef t_SynonymMap__fields_[] = {
            DECLARE_GET_FIELD(t_SynonymMap, fst),
            DECLARE_GET_FIELD(t_SynonymMap, maxHorizontalContext),
            DECLARE_GET_FIELD(t_SynonymMap, words),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SynonymMap__methods_[] = {
            DECLARE_METHOD(t_SynonymMap, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymMap, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SynonymMap, t_SynonymMap, ::java::lang::Object, SynonymMap, t_SynonymMap_init_, 0, 0, t_SynonymMap__fields_, 0, 0);

          void t_SynonymMap::install(PyObject *module)
          {
            installType(&PY_TYPE(SynonymMap), module, "SynonymMap", 0);
            PyDict_SetItemString(PY_TYPE(SynonymMap).tp_dict, "Parser", make_descriptor(&PY_TYPE(SynonymMap$Parser)));
            PyDict_SetItemString(PY_TYPE(SynonymMap).tp_dict, "Builder", make_descriptor(&PY_TYPE(SynonymMap$Builder)));
          }

          void t_SynonymMap::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SynonymMap).tp_dict, "class_", make_descriptor(SynonymMap::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SynonymMap).tp_dict, "wrapfn_", make_descriptor(t_SynonymMap::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SynonymMap).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SynonymMap::initializeClass);
            PyDict_SetItemString(PY_TYPE(SynonymMap).tp_dict, "WORD_SEPARATOR", make_descriptor(SynonymMap::WORD_SEPARATOR));
          }

          static PyObject *t_SynonymMap_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SynonymMap::initializeClass, 1)))
              return NULL;
            return t_SynonymMap::wrap_Object(SynonymMap(((t_SynonymMap *) arg)->object.this$));
          }
          static PyObject *t_SynonymMap_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SynonymMap::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SynonymMap_init_(t_SynonymMap *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::BytesRefHash a1((jobject) NULL);
            jint a2;
            SynonymMap object((jobject) NULL);

            if (!parseArgs(args, "KkI", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::BytesRefHash::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &a2))
            {
              INT_CALL(object = SynonymMap(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SynonymMap_get__fst(t_SynonymMap *self, void *data)
          {
            ::org::apache::lucene::util::fst::FST value((jobject) NULL);
            OBJ_CALL(value = self->object._get_fst());
            return ::org::apache::lucene::util::fst::t_FST::wrap_Object(value);
          }

          static PyObject *t_SynonymMap_get__maxHorizontalContext(t_SynonymMap *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_maxHorizontalContext());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_SynonymMap_get__words(t_SynonymMap *self, void *data)
          {
            ::org::apache::lucene::util::BytesRefHash value((jobject) NULL);
            OBJ_CALL(value = self->object._get_words());
            return ::org::apache::lucene::util::t_BytesRefHash::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *WordDelimiterFilter::class$ = NULL;
          jmethodID *WordDelimiterFilter::mids$ = NULL;
          bool WordDelimiterFilter::live$ = false;
          jint WordDelimiterFilter::ALPHA = (jint) 0;
          jint WordDelimiterFilter::ALPHANUM = (jint) 0;
          jint WordDelimiterFilter::CATENATE_ALL = (jint) 0;
          jint WordDelimiterFilter::CATENATE_NUMBERS = (jint) 0;
          jint WordDelimiterFilter::CATENATE_WORDS = (jint) 0;
          jint WordDelimiterFilter::DIGIT = (jint) 0;
          jint WordDelimiterFilter::GENERATE_NUMBER_PARTS = (jint) 0;
          jint WordDelimiterFilter::GENERATE_WORD_PARTS = (jint) 0;
          jint WordDelimiterFilter::LOWER = (jint) 0;
          jint WordDelimiterFilter::PRESERVE_ORIGINAL = (jint) 0;
          jint WordDelimiterFilter::SPLIT_ON_CASE_CHANGE = (jint) 0;
          jint WordDelimiterFilter::SPLIT_ON_NUMERICS = (jint) 0;
          jint WordDelimiterFilter::STEM_ENGLISH_POSSESSIVE = (jint) 0;
          jint WordDelimiterFilter::SUBWORD_DELIM = (jint) 0;
          jint WordDelimiterFilter::UPPER = (jint) 0;

          jclass WordDelimiterFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_635fa7aa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;ILorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_9bd98551] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;[BILorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ALPHA = env->getStaticIntField(cls, "ALPHA");
              ALPHANUM = env->getStaticIntField(cls, "ALPHANUM");
              CATENATE_ALL = env->getStaticIntField(cls, "CATENATE_ALL");
              CATENATE_NUMBERS = env->getStaticIntField(cls, "CATENATE_NUMBERS");
              CATENATE_WORDS = env->getStaticIntField(cls, "CATENATE_WORDS");
              DIGIT = env->getStaticIntField(cls, "DIGIT");
              GENERATE_NUMBER_PARTS = env->getStaticIntField(cls, "GENERATE_NUMBER_PARTS");
              GENERATE_WORD_PARTS = env->getStaticIntField(cls, "GENERATE_WORD_PARTS");
              LOWER = env->getStaticIntField(cls, "LOWER");
              PRESERVE_ORIGINAL = env->getStaticIntField(cls, "PRESERVE_ORIGINAL");
              SPLIT_ON_CASE_CHANGE = env->getStaticIntField(cls, "SPLIT_ON_CASE_CHANGE");
              SPLIT_ON_NUMERICS = env->getStaticIntField(cls, "SPLIT_ON_NUMERICS");
              STEM_ENGLISH_POSSESSIVE = env->getStaticIntField(cls, "STEM_ENGLISH_POSSESSIVE");
              SUBWORD_DELIM = env->getStaticIntField(cls, "SUBWORD_DELIM");
              UPPER = env->getStaticIntField(cls, "UPPER");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WordDelimiterFilter::WordDelimiterFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jint a2, const ::org::apache::lucene::analysis::util::CharArraySet & a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_635fa7aa, a0.this$, a1.this$, a2, a3.this$)) {}

          WordDelimiterFilter::WordDelimiterFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const JArray< jbyte > & a2, jint a3, const ::org::apache::lucene::analysis::util::CharArraySet & a4) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_9bd98551, a0.this$, a1.this$, a2.this$, a3, a4.this$)) {}

          jboolean WordDelimiterFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void WordDelimiterFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_WordDelimiterFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordDelimiterFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WordDelimiterFilter_init_(t_WordDelimiterFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WordDelimiterFilter_incrementToken(t_WordDelimiterFilter *self, PyObject *args);
          static PyObject *t_WordDelimiterFilter_reset(t_WordDelimiterFilter *self, PyObject *args);

          static PyMethodDef t_WordDelimiterFilter__methods_[] = {
            DECLARE_METHOD(t_WordDelimiterFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_WordDelimiterFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WordDelimiterFilter, t_WordDelimiterFilter, ::org::apache::lucene::analysis::TokenFilter, WordDelimiterFilter, t_WordDelimiterFilter_init_, 0, 0, 0, 0, 0);

          void t_WordDelimiterFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(WordDelimiterFilter), module, "WordDelimiterFilter", 0);
          }

          void t_WordDelimiterFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "class_", make_descriptor(WordDelimiterFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "wrapfn_", make_descriptor(t_WordDelimiterFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(WordDelimiterFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "ALPHA", make_descriptor(WordDelimiterFilter::ALPHA));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "ALPHANUM", make_descriptor(WordDelimiterFilter::ALPHANUM));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "CATENATE_ALL", make_descriptor(WordDelimiterFilter::CATENATE_ALL));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "CATENATE_NUMBERS", make_descriptor(WordDelimiterFilter::CATENATE_NUMBERS));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "CATENATE_WORDS", make_descriptor(WordDelimiterFilter::CATENATE_WORDS));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "DIGIT", make_descriptor(WordDelimiterFilter::DIGIT));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "GENERATE_NUMBER_PARTS", make_descriptor(WordDelimiterFilter::GENERATE_NUMBER_PARTS));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "GENERATE_WORD_PARTS", make_descriptor(WordDelimiterFilter::GENERATE_WORD_PARTS));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "LOWER", make_descriptor(WordDelimiterFilter::LOWER));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "PRESERVE_ORIGINAL", make_descriptor(WordDelimiterFilter::PRESERVE_ORIGINAL));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "SPLIT_ON_CASE_CHANGE", make_descriptor(WordDelimiterFilter::SPLIT_ON_CASE_CHANGE));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "SPLIT_ON_NUMERICS", make_descriptor(WordDelimiterFilter::SPLIT_ON_NUMERICS));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "STEM_ENGLISH_POSSESSIVE", make_descriptor(WordDelimiterFilter::STEM_ENGLISH_POSSESSIVE));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "SUBWORD_DELIM", make_descriptor(WordDelimiterFilter::SUBWORD_DELIM));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "UPPER", make_descriptor(WordDelimiterFilter::UPPER));
          }

          static PyObject *t_WordDelimiterFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordDelimiterFilter::initializeClass, 1)))
              return NULL;
            return t_WordDelimiterFilter::wrap_Object(WordDelimiterFilter(((t_WordDelimiterFilter *) arg)->object.this$));
          }
          static PyObject *t_WordDelimiterFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordDelimiterFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WordDelimiterFilter_init_(t_WordDelimiterFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jint a2;
                ::org::apache::lucene::analysis::util::CharArraySet a3((jobject) NULL);
                PyTypeObject **p3;
                WordDelimiterFilter object((jobject) NULL);

                if (!parseArgs(args, "KkIK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = WordDelimiterFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                JArray< jbyte > a2((jobject) NULL);
                jint a3;
                ::org::apache::lucene::analysis::util::CharArraySet a4((jobject) NULL);
                PyTypeObject **p4;
                WordDelimiterFilter object((jobject) NULL);

                if (!parseArgs(args, "Kk[BIK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4, &p4, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = WordDelimiterFilter(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WordDelimiterFilter_incrementToken(t_WordDelimiterFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(WordDelimiterFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_WordDelimiterFilter_reset(t_WordDelimiterFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(WordDelimiterFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SuggestWord::class$ = NULL;
          jmethodID *SuggestWord::mids$ = NULL;
          jfieldID *SuggestWord::fids$ = NULL;
          bool SuggestWord::live$ = false;

          jclass SuggestWord::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SuggestWord");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_freq] = env->getFieldID(cls, "freq", "I");
              fids$[fid_score] = env->getFieldID(cls, "score", "F");
              fids$[fid_string] = env->getFieldID(cls, "string", "Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SuggestWord::SuggestWord() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint SuggestWord::_get_freq() const
          {
            return env->getIntField(this$, fids$[fid_freq]);
          }

          void SuggestWord::_set_freq(jint a0) const
          {
            env->setIntField(this$, fids$[fid_freq], a0);
          }

          jfloat SuggestWord::_get_score() const
          {
            return env->getFloatField(this$, fids$[fid_score]);
          }

          void SuggestWord::_set_score(jfloat a0) const
          {
            env->setFloatField(this$, fids$[fid_score], a0);
          }

          ::java::lang::String SuggestWord::_get_string() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_string]));
          }

          void SuggestWord::_set_string(const ::java::lang::String & a0) const
          {
            env->setObjectField(this$, fids$[fid_string], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SuggestWord_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestWord_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SuggestWord_init_(t_SuggestWord *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SuggestWord_get__freq(t_SuggestWord *self, void *data);
          static int t_SuggestWord_set__freq(t_SuggestWord *self, PyObject *arg, void *data);
          static PyObject *t_SuggestWord_get__score(t_SuggestWord *self, void *data);
          static int t_SuggestWord_set__score(t_SuggestWord *self, PyObject *arg, void *data);
          static PyObject *t_SuggestWord_get__string(t_SuggestWord *self, void *data);
          static int t_SuggestWord_set__string(t_SuggestWord *self, PyObject *arg, void *data);

          static PyGetSetDef t_SuggestWord__fields_[] = {
            DECLARE_GETSET_FIELD(t_SuggestWord, freq),
            DECLARE_GETSET_FIELD(t_SuggestWord, score),
            DECLARE_GETSET_FIELD(t_SuggestWord, string),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SuggestWord__methods_[] = {
            DECLARE_METHOD(t_SuggestWord, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWord, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SuggestWord, t_SuggestWord, ::java::lang::Object, SuggestWord, t_SuggestWord_init_, 0, 0, t_SuggestWord__fields_, 0, 0);

          void t_SuggestWord::install(PyObject *module)
          {
            installType(&PY_TYPE(SuggestWord), module, "SuggestWord", 0);
          }

          void t_SuggestWord::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SuggestWord).tp_dict, "class_", make_descriptor(SuggestWord::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SuggestWord).tp_dict, "wrapfn_", make_descriptor(t_SuggestWord::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SuggestWord).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SuggestWord_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SuggestWord::initializeClass, 1)))
              return NULL;
            return t_SuggestWord::wrap_Object(SuggestWord(((t_SuggestWord *) arg)->object.this$));
          }
          static PyObject *t_SuggestWord_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SuggestWord::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SuggestWord_init_(t_SuggestWord *self, PyObject *args, PyObject *kwds)
          {
            SuggestWord object((jobject) NULL);

            INT_CALL(object = SuggestWord());
            self->object = object;

            return 0;
          }

          static PyObject *t_SuggestWord_get__freq(t_SuggestWord *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_freq());
            return PyInt_FromLong((long) value);
          }
          static int t_SuggestWord_set__freq(t_SuggestWord *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_freq(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "freq", arg);
            return -1;
          }

          static PyObject *t_SuggestWord_get__score(t_SuggestWord *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object._get_score());
            return PyFloat_FromDouble((double) value);
          }
          static int t_SuggestWord_set__score(t_SuggestWord *self, PyObject *arg, void *data)
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object._set_score(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "score", arg);
            return -1;
          }

          static PyObject *t_SuggestWord_get__string(t_SuggestWord *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_string());
            return j2p(value);
          }
          static int t_SuggestWord_set__string(t_SuggestWord *self, PyObject *arg, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            if (!parseArg(arg, "s", &value))
            {
              INT_CALL(self->object._set_string(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "string", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueInt.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueInt::class$ = NULL;
          jmethodID *MutableValueInt::mids$ = NULL;
          jfieldID *MutableValueInt::fids$ = NULL;
          bool MutableValueInt::live$ = false;

          jclass MutableValueInt::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueInt");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_290588f1] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_d590ce7c] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_290588e2] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueInt::MutableValueInt() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint MutableValueInt::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_290588f1], a0.this$);
          }

          void MutableValueInt::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d590ce7c], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueInt::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          jboolean MutableValueInt::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_290588e2], a0.this$);
          }

          jint MutableValueInt::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::Object MutableValueInt::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }

          jint MutableValueInt::_get_value() const
          {
            return env->getIntField(this$, fids$[fid_value]);
          }

          void MutableValueInt::_set_value(jint a0) const
          {
            env->setIntField(this$, fids$[fid_value], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueInt_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueInt_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueInt_init_(t_MutableValueInt *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueInt_compareSameType(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_copy(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_duplicate(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_equalsSameType(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_hashCode(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_toObject(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_get__value(t_MutableValueInt *self, void *data);
          static int t_MutableValueInt_set__value(t_MutableValueInt *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueInt__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueInt, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueInt__methods_[] = {
            DECLARE_METHOD(t_MutableValueInt, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueInt, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueInt, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueInt, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueInt, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueInt, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueInt, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueInt, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValueInt, t_MutableValueInt, ::org::apache::lucene::util::mutable$::MutableValue, MutableValueInt, t_MutableValueInt_init_, 0, 0, t_MutableValueInt__fields_, 0, 0);

          void t_MutableValueInt::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueInt), module, "MutableValueInt", 0);
          }

          void t_MutableValueInt::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValueInt).tp_dict, "class_", make_descriptor(MutableValueInt::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValueInt).tp_dict, "wrapfn_", make_descriptor(t_MutableValueInt::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValueInt).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueInt_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueInt::initializeClass, 1)))
              return NULL;
            return t_MutableValueInt::wrap_Object(MutableValueInt(((t_MutableValueInt *) arg)->object.this$));
          }
          static PyObject *t_MutableValueInt_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueInt::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueInt_init_(t_MutableValueInt *self, PyObject *args, PyObject *kwds)
          {
            MutableValueInt object((jobject) NULL);

            INT_CALL(object = MutableValueInt());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueInt_compareSameType(t_MutableValueInt *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueInt), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueInt_copy(t_MutableValueInt *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MutableValueInt), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueInt_duplicate(t_MutableValueInt *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueInt), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueInt_equalsSameType(t_MutableValueInt *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MutableValueInt), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueInt_hashCode(t_MutableValueInt *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueInt), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueInt_toObject(t_MutableValueInt *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueInt), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueInt_get__value(t_MutableValueInt *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_value());
            return PyInt_FromLong((long) value);
          }
          static int t_MutableValueInt_set__value(t_MutableValueInt *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/SortField.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Sort::class$ = NULL;
        jmethodID *Sort::mids$ = NULL;
        bool Sort::live$ = false;
        Sort *Sort::INDEXORDER = NULL;
        Sort *Sort::RELEVANCE = NULL;

        jclass Sort::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Sort");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_4176baab] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/SortField;)V");
            mids$[mid_init$_3578f7bf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/SortField;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getSort_4fd90036] = env->getMethodID(cls, "getSort", "()[Lorg/apache/lucene/search/SortField;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_needsScores_54c6a16a] = env->getMethodID(cls, "needsScores", "()Z");
            mids$[mid_rewrite_11e86a55] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Sort;");
            mids$[mid_setSort_3578f7bf] = env->getMethodID(cls, "setSort", "(Lorg/apache/lucene/search/SortField;)V");
            mids$[mid_setSort_4176baab] = env->getMethodID(cls, "setSort", "([Lorg/apache/lucene/search/SortField;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            INDEXORDER = new Sort(env->getStaticObjectField(cls, "INDEXORDER", "Lorg/apache/lucene/search/Sort;"));
            RELEVANCE = new Sort(env->getStaticObjectField(cls, "RELEVANCE", "Lorg/apache/lucene/search/Sort;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Sort::Sort() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        Sort::Sort(const JArray< ::org::apache::lucene::search::SortField > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4176baab, a0.this$)) {}

        Sort::Sort(const ::org::apache::lucene::search::SortField & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3578f7bf, a0.this$)) {}

        jboolean Sort::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        JArray< ::org::apache::lucene::search::SortField > Sort::getSort() const
        {
          return JArray< ::org::apache::lucene::search::SortField >(env->callObjectMethod(this$, mids$[mid_getSort_4fd90036]));
        }

        jint Sort::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean Sort::needsScores() const
        {
          return env->callBooleanMethod(this$, mids$[mid_needsScores_54c6a16a]);
        }

        Sort Sort::rewrite(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return Sort(env->callObjectMethod(this$, mids$[mid_rewrite_11e86a55], a0.this$));
        }

        void Sort::setSort(const ::org::apache::lucene::search::SortField & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setSort_3578f7bf], a0.this$);
        }

        void Sort::setSort(const JArray< ::org::apache::lucene::search::SortField > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setSort_4176baab], a0.this$);
        }

        ::java::lang::String Sort::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Sort_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Sort_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Sort_init_(t_Sort *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Sort_equals(t_Sort *self, PyObject *args);
        static PyObject *t_Sort_getSort(t_Sort *self);
        static PyObject *t_Sort_hashCode(t_Sort *self, PyObject *args);
        static PyObject *t_Sort_needsScores(t_Sort *self);
        static PyObject *t_Sort_rewrite(t_Sort *self, PyObject *arg);
        static PyObject *t_Sort_setSort(t_Sort *self, PyObject *args);
        static PyObject *t_Sort_toString(t_Sort *self, PyObject *args);
        static PyObject *t_Sort_get__sort(t_Sort *self, void *data);
        static int t_Sort_set__sort(t_Sort *self, PyObject *arg, void *data);
        static PyGetSetDef t_Sort__fields_[] = {
          DECLARE_GETSET_FIELD(t_Sort, sort),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Sort__methods_[] = {
          DECLARE_METHOD(t_Sort, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Sort, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Sort, equals, METH_VARARGS),
          DECLARE_METHOD(t_Sort, getSort, METH_NOARGS),
          DECLARE_METHOD(t_Sort, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_Sort, needsScores, METH_NOARGS),
          DECLARE_METHOD(t_Sort, rewrite, METH_O),
          DECLARE_METHOD(t_Sort, setSort, METH_VARARGS),
          DECLARE_METHOD(t_Sort, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Sort, t_Sort, ::java::lang::Object, Sort, t_Sort_init_, 0, 0, t_Sort__fields_, 0, 0);

        void t_Sort::install(PyObject *module)
        {
          installType(&PY_TYPE(Sort), module, "Sort", 0);
        }

        void t_Sort::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Sort).tp_dict, "class_", make_descriptor(Sort::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Sort).tp_dict, "wrapfn_", make_descriptor(t_Sort::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Sort).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Sort::initializeClass);
          PyDict_SetItemString(PY_TYPE(Sort).tp_dict, "INDEXORDER", make_descriptor(t_Sort::wrap_Object(*Sort::INDEXORDER)));
          PyDict_SetItemString(PY_TYPE(Sort).tp_dict, "RELEVANCE", make_descriptor(t_Sort::wrap_Object(*Sort::RELEVANCE)));
        }

        static PyObject *t_Sort_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Sort::initializeClass, 1)))
            return NULL;
          return t_Sort::wrap_Object(Sort(((t_Sort *) arg)->object.this$));
        }
        static PyObject *t_Sort_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Sort::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Sort_init_(t_Sort *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              Sort object((jobject) NULL);

              INT_CALL(object = Sort());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              JArray< ::org::apache::lucene::search::SortField > a0((jobject) NULL);
              Sort object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::search::SortField::initializeClass, &a0))
              {
                INT_CALL(object = Sort(a0));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::search::SortField a0((jobject) NULL);
              Sort object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::SortField::initializeClass, &a0))
              {
                INT_CALL(object = Sort(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Sort_equals(t_Sort *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(Sort), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Sort_getSort(t_Sort *self)
        {
          JArray< ::org::apache::lucene::search::SortField > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSort());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::t_SortField::wrap_jobject);
        }

        static PyObject *t_Sort_hashCode(t_Sort *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(Sort), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Sort_needsScores(t_Sort *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.needsScores());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Sort_rewrite(t_Sort *self, PyObject *arg)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          Sort result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return t_Sort::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rewrite", arg);
          return NULL;
        }

        static PyObject *t_Sort_setSort(t_Sort *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::SortField a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::SortField::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setSort(a0));
                Py_RETURN_NONE;
              }
            }
            {
              JArray< ::org::apache::lucene::search::SortField > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::search::SortField::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setSort(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "setSort", args);
          return NULL;
        }

        static PyObject *t_Sort_toString(t_Sort *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(Sort), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Sort_get__sort(t_Sort *self, void *data)
        {
          JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSort());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_SortField::wrap_jobject);
        }
        static int t_Sort_set__sort(t_Sort *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::SortField value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::SortField::initializeClass, &value))
            {
              INT_CALL(self->object.setSort(value));
              return 0;
            }
          }
          {
            JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
            if (!parseArg(arg, "[k", ::org::apache::lucene::search::SortField::initializeClass, &value))
            {
              INT_CALL(self->object.setSort(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "sort", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ScoreMode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ScoreMode::class$ = NULL;
          jmethodID *ScoreMode::mids$ = NULL;
          bool ScoreMode::live$ = false;
          ScoreMode *ScoreMode::Avg = NULL;
          ScoreMode *ScoreMode::Max = NULL;
          ScoreMode *ScoreMode::None = NULL;
          ScoreMode *ScoreMode::Total = NULL;

          jclass ScoreMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ScoreMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_0d6e5195] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/join/ScoreMode;");
              mids$[mid_values_dbd87c7b] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/join/ScoreMode;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              Avg = new ScoreMode(env->getStaticObjectField(cls, "Avg", "Lorg/apache/lucene/search/join/ScoreMode;"));
              Max = new ScoreMode(env->getStaticObjectField(cls, "Max", "Lorg/apache/lucene/search/join/ScoreMode;"));
              None = new ScoreMode(env->getStaticObjectField(cls, "None", "Lorg/apache/lucene/search/join/ScoreMode;"));
              Total = new ScoreMode(env->getStaticObjectField(cls, "Total", "Lorg/apache/lucene/search/join/ScoreMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScoreMode ScoreMode::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ScoreMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_0d6e5195], a0.this$));
          }

          JArray< ScoreMode > ScoreMode::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< ScoreMode >(env->callStaticObjectMethod(cls, mids$[mid_values_dbd87c7b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ScoreMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScoreMode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScoreMode_of_(t_ScoreMode *self, PyObject *args);
          static PyObject *t_ScoreMode_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_ScoreMode_values(PyTypeObject *type);
          static PyObject *t_ScoreMode_get__parameters_(t_ScoreMode *self, void *data);
          static PyGetSetDef t_ScoreMode__fields_[] = {
            DECLARE_GET_FIELD(t_ScoreMode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ScoreMode__methods_[] = {
            DECLARE_METHOD(t_ScoreMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreMode, of_, METH_VARARGS),
            DECLARE_METHOD(t_ScoreMode, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_ScoreMode, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ScoreMode, t_ScoreMode, ::java::lang::Enum, ScoreMode, abstract_init, 0, 0, t_ScoreMode__fields_, 0, 0);
          PyObject *t_ScoreMode::wrap_Object(const ScoreMode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ScoreMode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ScoreMode *self = (t_ScoreMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_ScoreMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ScoreMode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ScoreMode *self = (t_ScoreMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_ScoreMode::install(PyObject *module)
          {
            installType(&PY_TYPE(ScoreMode), module, "ScoreMode", 0);
          }

          void t_ScoreMode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ScoreMode).tp_dict, "class_", make_descriptor(ScoreMode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ScoreMode).tp_dict, "wrapfn_", make_descriptor(t_ScoreMode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ScoreMode).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ScoreMode::initializeClass);
            PyDict_SetItemString(PY_TYPE(ScoreMode).tp_dict, "Avg", make_descriptor(t_ScoreMode::wrap_Object(*ScoreMode::Avg)));
            PyDict_SetItemString(PY_TYPE(ScoreMode).tp_dict, "Max", make_descriptor(t_ScoreMode::wrap_Object(*ScoreMode::Max)));
            PyDict_SetItemString(PY_TYPE(ScoreMode).tp_dict, "None", make_descriptor(t_ScoreMode::wrap_Object(*ScoreMode::None)));
            PyDict_SetItemString(PY_TYPE(ScoreMode).tp_dict, "Total", make_descriptor(t_ScoreMode::wrap_Object(*ScoreMode::Total)));
          }

          static PyObject *t_ScoreMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScoreMode::initializeClass, 1)))
              return NULL;
            return t_ScoreMode::wrap_Object(ScoreMode(((t_ScoreMode *) arg)->object.this$));
          }
          static PyObject *t_ScoreMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScoreMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ScoreMode_of_(t_ScoreMode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_ScoreMode_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ScoreMode result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::join::ScoreMode::valueOf(a0));
              return t_ScoreMode::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_ScoreMode_values(PyTypeObject *type)
          {
            JArray< ScoreMode > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::search::join::ScoreMode::values());
            return JArray<jobject>(result.this$).wrap(t_ScoreMode::wrap_jobject);
          }
          static PyObject *t_ScoreMode_get__parameters_(t_ScoreMode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy$MergeException.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy$MergeException::class$ = NULL;
        jmethodID *MergePolicy$MergeException::mids$ = NULL;
        bool MergePolicy$MergeException::live$ = false;

        jclass MergePolicy$MergeException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy$MergeException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_972c7504] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_init$_1f8035c0] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_getDirectory_1f3934bb] = env->getMethodID(cls, "getDirectory", "()Lorg/apache/lucene/store/Directory;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergePolicy$MergeException::MergePolicy$MergeException(const ::java::lang::String & a0, const ::org::apache::lucene::store::Directory & a1) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_972c7504, a0.this$, a1.this$)) {}

        MergePolicy$MergeException::MergePolicy$MergeException(const ::java::lang::Throwable & a0, const ::org::apache::lucene::store::Directory & a1) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_1f8035c0, a0.this$, a1.this$)) {}

        ::org::apache::lucene::store::Directory MergePolicy$MergeException::getDirectory() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDirectory_1f3934bb]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy$MergeException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$MergeException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergePolicy$MergeException_init_(t_MergePolicy$MergeException *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergePolicy$MergeException_getDirectory(t_MergePolicy$MergeException *self);
        static PyObject *t_MergePolicy$MergeException_get__directory(t_MergePolicy$MergeException *self, void *data);
        static PyGetSetDef t_MergePolicy$MergeException__fields_[] = {
          DECLARE_GET_FIELD(t_MergePolicy$MergeException, directory),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergePolicy$MergeException__methods_[] = {
          DECLARE_METHOD(t_MergePolicy$MergeException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$MergeException, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$MergeException, getDirectory, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergePolicy$MergeException, t_MergePolicy$MergeException, ::java::lang::RuntimeException, MergePolicy$MergeException, t_MergePolicy$MergeException_init_, 0, 0, t_MergePolicy$MergeException__fields_, 0, 0);

        void t_MergePolicy$MergeException::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy$MergeException), module, "MergePolicy$MergeException", 0);
        }

        void t_MergePolicy$MergeException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeException).tp_dict, "class_", make_descriptor(MergePolicy$MergeException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeException).tp_dict, "wrapfn_", make_descriptor(t_MergePolicy$MergeException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy$MergeException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy$MergeException::initializeClass, 1)))
            return NULL;
          return t_MergePolicy$MergeException::wrap_Object(MergePolicy$MergeException(((t_MergePolicy$MergeException *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy$MergeException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy$MergeException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergePolicy$MergeException_init_(t_MergePolicy$MergeException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::store::Directory a1((jobject) NULL);
              MergePolicy$MergeException object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = MergePolicy$MergeException(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::Throwable a0((jobject) NULL);
              ::org::apache::lucene::store::Directory a1((jobject) NULL);
              MergePolicy$MergeException object((jobject) NULL);

              if (!parseArgs(args, "kk", ::java::lang::Throwable::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = MergePolicy$MergeException(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MergePolicy$MergeException_getDirectory(t_MergePolicy$MergeException *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_MergePolicy$MergeException_get__directory(t_MergePolicy$MergeException *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianMinimalStemFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianMinimalStemFilterFactory::class$ = NULL;
          jmethodID *NorwegianMinimalStemFilterFactory::mids$ = NULL;
          bool NorwegianMinimalStemFilterFactory::live$ = false;

          jclass NorwegianMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianMinimalStemFilterFactory::NorwegianMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream NorwegianMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianMinimalStemFilterFactory_init_(t_NorwegianMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianMinimalStemFilterFactory_create(t_NorwegianMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_NorwegianMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_NorwegianMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NorwegianMinimalStemFilterFactory, t_NorwegianMinimalStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, NorwegianMinimalStemFilterFactory, t_NorwegianMinimalStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_NorwegianMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianMinimalStemFilterFactory), module, "NorwegianMinimalStemFilterFactory", 0);
          }

          void t_NorwegianMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemFilterFactory).tp_dict, "class_", make_descriptor(NorwegianMinimalStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_NorwegianMinimalStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NorwegianMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_NorwegianMinimalStemFilterFactory::wrap_Object(NorwegianMinimalStemFilterFactory(((t_NorwegianMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_NorwegianMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianMinimalStemFilterFactory_init_(t_NorwegianMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            NorwegianMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = NorwegianMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianMinimalStemFilterFactory_create(t_NorwegianMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NorwegianMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/FreeTextSuggester.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *FreeTextSuggester::class$ = NULL;
            jmethodID *FreeTextSuggester::mids$ = NULL;
            bool FreeTextSuggester::live$ = false;
            jdouble FreeTextSuggester::ALPHA = (jdouble) 0;
            ::java::lang::String *FreeTextSuggester::CODEC_NAME = NULL;
            jint FreeTextSuggester::DEFAULT_GRAMS = (jint) 0;
            jbyte FreeTextSuggester::DEFAULT_SEPARATOR = (jbyte) 0;
            jint FreeTextSuggester::VERSION_CURRENT = (jint) 0;
            jint FreeTextSuggester::VERSION_START = (jint) 0;

            jclass FreeTextSuggester::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/FreeTextSuggester");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_6a3c5772] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_9c9ed338] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;I)V");
                mids$[mid_init$_942dba41] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;IB)V");
                mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_build_a548a403] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;D)V");
                mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_560b361c] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;I)Ljava/util/List;");
                mids$[mid_lookup_afd51678] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;I)Ljava/util/List;");
                mids$[mid_lookup_8aa7b45d] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;ZI)Ljava/util/List;");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                ALPHA = env->getStaticDoubleField(cls, "ALPHA");
                CODEC_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "CODEC_NAME", "Ljava/lang/String;"));
                DEFAULT_GRAMS = env->getStaticIntField(cls, "DEFAULT_GRAMS");
                DEFAULT_SEPARATOR = env->getStaticByteField(cls, "DEFAULT_SEPARATOR");
                VERSION_CURRENT = env->getStaticIntField(cls, "VERSION_CURRENT");
                VERSION_START = env->getStaticIntField(cls, "VERSION_START");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FreeTextSuggester::FreeTextSuggester(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}

            FreeTextSuggester::FreeTextSuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_6a3c5772, a0.this$, a1.this$)) {}

            FreeTextSuggester::FreeTextSuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1, jint a2) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_9c9ed338, a0.this$, a1.this$, a2)) {}

            FreeTextSuggester::FreeTextSuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1, jint a2, jbyte a3) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_942dba41, a0.this$, a1.this$, a2, a3)) {}

            void FreeTextSuggester::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
            }

            void FreeTextSuggester::build(const ::org::apache::lucene::search::suggest::InputIterator & a0, jdouble a1) const
            {
              env->callVoidMethod(this$, mids$[mid_build_a548a403], a0.this$, a1);
            }

            ::java::lang::Object FreeTextSuggester::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
            }

            jlong FreeTextSuggester::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
            }

            jboolean FreeTextSuggester::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
            }

            ::java::util::List FreeTextSuggester::lookup(const ::java::lang::CharSequence & a0, jint a1) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_560b361c], a0.this$, a1));
            }

            ::java::util::List FreeTextSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jint a2) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_afd51678], a0.this$, a1.this$, a2));
            }

            ::java::util::List FreeTextSuggester::lookup(const ::java::lang::CharSequence & a0, jboolean a1, jint a2) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_8aa7b45d], a0.this$, a1, a2));
            }

            ::java::util::List FreeTextSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            jlong FreeTextSuggester::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            jboolean FreeTextSuggester::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_FreeTextSuggester_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FreeTextSuggester_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FreeTextSuggester_init_(t_FreeTextSuggester *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FreeTextSuggester_build(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_get(t_FreeTextSuggester *self, PyObject *arg);
            static PyObject *t_FreeTextSuggester_getCount(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_load(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_lookup(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_ramBytesUsed(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_store(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_get__count(t_FreeTextSuggester *self, void *data);
            static PyGetSetDef t_FreeTextSuggester__fields_[] = {
              DECLARE_GET_FIELD(t_FreeTextSuggester, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FreeTextSuggester__methods_[] = {
              DECLARE_METHOD(t_FreeTextSuggester, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FreeTextSuggester, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FreeTextSuggester, build, METH_VARARGS),
              DECLARE_METHOD(t_FreeTextSuggester, get, METH_O),
              DECLARE_METHOD(t_FreeTextSuggester, getCount, METH_VARARGS),
              DECLARE_METHOD(t_FreeTextSuggester, load, METH_VARARGS),
              DECLARE_METHOD(t_FreeTextSuggester, lookup, METH_VARARGS),
              DECLARE_METHOD(t_FreeTextSuggester, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_FreeTextSuggester, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FreeTextSuggester, t_FreeTextSuggester, ::org::apache::lucene::search::suggest::Lookup, FreeTextSuggester, t_FreeTextSuggester_init_, 0, 0, t_FreeTextSuggester__fields_, 0, 0);

            void t_FreeTextSuggester::install(PyObject *module)
            {
              installType(&PY_TYPE(FreeTextSuggester), module, "FreeTextSuggester", 0);
            }

            void t_FreeTextSuggester::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "class_", make_descriptor(FreeTextSuggester::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "wrapfn_", make_descriptor(t_FreeTextSuggester::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(FreeTextSuggester::initializeClass);
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "ALPHA", make_descriptor(FreeTextSuggester::ALPHA));
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "CODEC_NAME", make_descriptor(j2p(*FreeTextSuggester::CODEC_NAME)));
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "DEFAULT_GRAMS", make_descriptor(FreeTextSuggester::DEFAULT_GRAMS));
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "DEFAULT_SEPARATOR", make_descriptor(FreeTextSuggester::DEFAULT_SEPARATOR));
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "VERSION_CURRENT", make_descriptor(FreeTextSuggester::VERSION_CURRENT));
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "VERSION_START", make_descriptor(FreeTextSuggester::VERSION_START));
            }

            static PyObject *t_FreeTextSuggester_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FreeTextSuggester::initializeClass, 1)))
                return NULL;
              return t_FreeTextSuggester::wrap_Object(FreeTextSuggester(((t_FreeTextSuggester *) arg)->object.this$));
            }
            static PyObject *t_FreeTextSuggester_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FreeTextSuggester::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FreeTextSuggester_init_(t_FreeTextSuggester *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  FreeTextSuggester object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                  {
                    INT_CALL(object = FreeTextSuggester(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  FreeTextSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = FreeTextSuggester(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 3:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  jint a2;
                  FreeTextSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kkI", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = FreeTextSuggester(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 4:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  jint a2;
                  jbyte a3;
                  FreeTextSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kkIB", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3))
                  {
                    INT_CALL(object = FreeTextSuggester(a0, a1, a2, a3));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FreeTextSuggester_build(t_FreeTextSuggester *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
                  {
                    OBJ_CALL(self->object.build(a0));
                    Py_RETURN_NONE;
                  }
                }
                break;
               case 2:
                {
                  ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);
                  jdouble a1;

                  if (!parseArgs(args, "kD", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0, &a1))
                  {
                    OBJ_CALL(self->object.build(a0, a1));
                    Py_RETURN_NONE;
                  }
                }
              }

              return callSuper(&PY_TYPE(FreeTextSuggester), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_FreeTextSuggester_get(t_FreeTextSuggester *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_FreeTextSuggester_getCount(t_FreeTextSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(FreeTextSuggester), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_FreeTextSuggester_load(t_FreeTextSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(FreeTextSuggester), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_FreeTextSuggester_lookup(t_FreeTextSuggester *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 2:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  jint a1;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                break;
               case 3:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jint a2;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  jboolean a1;
                  jint a2;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OZI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                break;
               case 4:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jboolean a2;
                  jint a3;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
              }

              return callSuper(&PY_TYPE(FreeTextSuggester), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_FreeTextSuggester_ramBytesUsed(t_FreeTextSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(FreeTextSuggester), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_FreeTextSuggester_store(t_FreeTextSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(FreeTextSuggester), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_FreeTextSuggester_get__count(t_FreeTextSuggester *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$ByteParser.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$ByteParser::class$ = NULL;
        jmethodID *FieldCache$ByteParser::mids$ = NULL;
        bool FieldCache$ByteParser::live$ = false;

        jclass FieldCache$ByteParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$ByteParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_parseByte_7bc03dd0] = env->getMethodID(cls, "parseByte", "(Lorg/apache/lucene/util/BytesRef;)B");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jbyte FieldCache$ByteParser::parseByte(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callByteMethod(this$, mids$[mid_parseByte_7bc03dd0], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$ByteParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$ByteParser_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$ByteParser_parseByte(t_FieldCache$ByteParser *self, PyObject *arg);

        static PyMethodDef t_FieldCache$ByteParser__methods_[] = {
          DECLARE_METHOD(t_FieldCache$ByteParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$ByteParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$ByteParser, parseByte, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$ByteParser, t_FieldCache$ByteParser, ::org::apache::lucene::search::FieldCache$Parser, FieldCache$ByteParser, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCache$ByteParser::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$ByteParser), module, "FieldCache$ByteParser", 0);
        }

        void t_FieldCache$ByteParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$ByteParser).tp_dict, "class_", make_descriptor(FieldCache$ByteParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$ByteParser).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$ByteParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$ByteParser).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$ByteParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$ByteParser::initializeClass, 1)))
            return NULL;
          return t_FieldCache$ByteParser::wrap_Object(FieldCache$ByteParser(((t_FieldCache$ByteParser *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$ByteParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$ByteParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache$ByteParser_parseByte(t_FieldCache$ByteParser *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jbyte result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.parseByte(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "parseByte", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *MultiTermAwareComponent::class$ = NULL;
          jmethodID *MultiTermAwareComponent::mids$ = NULL;
          bool MultiTermAwareComponent::live$ = false;

          jclass MultiTermAwareComponent::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/MultiTermAwareComponent");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory MultiTermAwareComponent::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_MultiTermAwareComponent_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MultiTermAwareComponent_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MultiTermAwareComponent_getMultiTermComponent(t_MultiTermAwareComponent *self);
          static PyObject *t_MultiTermAwareComponent_get__multiTermComponent(t_MultiTermAwareComponent *self, void *data);
          static PyGetSetDef t_MultiTermAwareComponent__fields_[] = {
            DECLARE_GET_FIELD(t_MultiTermAwareComponent, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MultiTermAwareComponent__methods_[] = {
            DECLARE_METHOD(t_MultiTermAwareComponent, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MultiTermAwareComponent, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MultiTermAwareComponent, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MultiTermAwareComponent, t_MultiTermAwareComponent, ::java::lang::Object, MultiTermAwareComponent, abstract_init, 0, 0, t_MultiTermAwareComponent__fields_, 0, 0);

          void t_MultiTermAwareComponent::install(PyObject *module)
          {
            installType(&PY_TYPE(MultiTermAwareComponent), module, "MultiTermAwareComponent", 0);
          }

          void t_MultiTermAwareComponent::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MultiTermAwareComponent).tp_dict, "class_", make_descriptor(MultiTermAwareComponent::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MultiTermAwareComponent).tp_dict, "wrapfn_", make_descriptor(t_MultiTermAwareComponent::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MultiTermAwareComponent).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MultiTermAwareComponent_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MultiTermAwareComponent::initializeClass, 1)))
              return NULL;
            return t_MultiTermAwareComponent::wrap_Object(MultiTermAwareComponent(((t_MultiTermAwareComponent *) arg)->object.this$));
          }
          static PyObject *t_MultiTermAwareComponent_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MultiTermAwareComponent::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_MultiTermAwareComponent_getMultiTermComponent(t_MultiTermAwareComponent *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_MultiTermAwareComponent_get__multiTermComponent(t_MultiTermAwareComponent *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Map$Entry.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *Map$Entry::class$ = NULL;
    jmethodID *Map$Entry::mids$ = NULL;
    bool Map$Entry::live$ = false;

    jclass Map$Entry::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/Map$Entry");

        mids$ = new jmethodID[max_mid];
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_getKey_846352c3] = env->getMethodID(cls, "getKey", "()Ljava/lang/Object;");
        mids$[mid_getValue_846352c3] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_setValue_a932a95f] = env->getMethodID(cls, "setValue", "(Ljava/lang/Object;)Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jboolean Map$Entry::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::lang::Object Map$Entry::getKey() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getKey_846352c3]));
    }

    ::java::lang::Object Map$Entry::getValue() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_846352c3]));
    }

    jint Map$Entry::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    ::java::lang::Object Map$Entry::setValue(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_setValue_a932a95f], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_Map$Entry_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Map$Entry_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Map$Entry_of_(t_Map$Entry *self, PyObject *args);
    static PyObject *t_Map$Entry_equals(t_Map$Entry *self, PyObject *args);
    static PyObject *t_Map$Entry_getKey(t_Map$Entry *self);
    static PyObject *t_Map$Entry_getValue(t_Map$Entry *self);
    static PyObject *t_Map$Entry_hashCode(t_Map$Entry *self, PyObject *args);
    static PyObject *t_Map$Entry_setValue(t_Map$Entry *self, PyObject *arg);
    static PyObject *t_Map$Entry_get__key(t_Map$Entry *self, void *data);
    static PyObject *t_Map$Entry_get__value(t_Map$Entry *self, void *data);
    static int t_Map$Entry_set__value(t_Map$Entry *self, PyObject *arg, void *data);
    static PyObject *t_Map$Entry_get__parameters_(t_Map$Entry *self, void *data);
    static PyGetSetDef t_Map$Entry__fields_[] = {
      DECLARE_GET_FIELD(t_Map$Entry, key),
      DECLARE_GETSET_FIELD(t_Map$Entry, value),
      DECLARE_GET_FIELD(t_Map$Entry, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Map$Entry__methods_[] = {
      DECLARE_METHOD(t_Map$Entry, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Map$Entry, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Map$Entry, of_, METH_VARARGS),
      DECLARE_METHOD(t_Map$Entry, equals, METH_VARARGS),
      DECLARE_METHOD(t_Map$Entry, getKey, METH_NOARGS),
      DECLARE_METHOD(t_Map$Entry, getValue, METH_NOARGS),
      DECLARE_METHOD(t_Map$Entry, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Map$Entry, setValue, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Map$Entry, t_Map$Entry, ::java::lang::Object, Map$Entry, abstract_init, 0, 0, t_Map$Entry__fields_, 0, 0);
    PyObject *t_Map$Entry::wrap_Object(const Map$Entry& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_Map$Entry::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Map$Entry *self = (t_Map$Entry *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    PyObject *t_Map$Entry::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_Map$Entry::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Map$Entry *self = (t_Map$Entry *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    void t_Map$Entry::install(PyObject *module)
    {
      installType(&PY_TYPE(Map$Entry), module, "Map$Entry", 0);
    }

    void t_Map$Entry::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Map$Entry).tp_dict, "class_", make_descriptor(Map$Entry::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Map$Entry).tp_dict, "wrapfn_", make_descriptor(t_Map$Entry::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Map$Entry).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Map$Entry_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Map$Entry::initializeClass, 1)))
        return NULL;
      return t_Map$Entry::wrap_Object(Map$Entry(((t_Map$Entry *) arg)->object.this$));
    }
    static PyObject *t_Map$Entry_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Map$Entry::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Map$Entry_of_(t_Map$Entry *self, PyObject *args)
    {
      if (!parseArg(args, "T", 2, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_Map$Entry_equals(t_Map$Entry *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Map$Entry), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Map$Entry_getKey(t_Map$Entry *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.getKey());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Map$Entry_getValue(t_Map$Entry *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.getValue());
      return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Map$Entry_hashCode(t_Map$Entry *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Map$Entry), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Map$Entry_setValue(t_Map$Entry *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "O", self->parameters[1], &a0))
      {
        OBJ_CALL(result = self->object.setValue(a0));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "setValue", arg);
      return NULL;
    }
    static PyObject *t_Map$Entry_get__parameters_(t_Map$Entry *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_Map$Entry_get__key(t_Map$Entry *self, void *data)
    {
      ::java::lang::Object value((jobject) NULL);
      OBJ_CALL(value = self->object.getKey());
      return ::java::lang::t_Object::wrap_Object(value);
    }

    static PyObject *t_Map$Entry_get__value(t_Map$Entry *self, void *data)
    {
      ::java::lang::Object value((jobject) NULL);
      OBJ_CALL(value = self->object.getValue());
      return ::java::lang::t_Object::wrap_Object(value);
    }
    static int t_Map$Entry_set__value(t_Map$Entry *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::Object value((jobject) NULL);
        if (!parseArg(arg, "o", &value))
        {
          INT_CALL(self->object.setValue(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "value", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/NamedSPILoader$NamedSPI.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *NamedSPILoader$NamedSPI::class$ = NULL;
        jmethodID *NamedSPILoader$NamedSPI::mids$ = NULL;
        bool NamedSPILoader$NamedSPI::live$ = false;

        jclass NamedSPILoader$NamedSPI::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/NamedSPILoader$NamedSPI");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String NamedSPILoader$NamedSPI::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_NamedSPILoader$NamedSPI_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedSPILoader$NamedSPI_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedSPILoader$NamedSPI_of_(t_NamedSPILoader$NamedSPI *self, PyObject *args);
        static PyObject *t_NamedSPILoader$NamedSPI_getName(t_NamedSPILoader$NamedSPI *self);
        static PyObject *t_NamedSPILoader$NamedSPI_get__name(t_NamedSPILoader$NamedSPI *self, void *data);
        static PyObject *t_NamedSPILoader$NamedSPI_get__parameters_(t_NamedSPILoader$NamedSPI *self, void *data);
        static PyGetSetDef t_NamedSPILoader$NamedSPI__fields_[] = {
          DECLARE_GET_FIELD(t_NamedSPILoader$NamedSPI, name),
          DECLARE_GET_FIELD(t_NamedSPILoader$NamedSPI, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NamedSPILoader$NamedSPI__methods_[] = {
          DECLARE_METHOD(t_NamedSPILoader$NamedSPI, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedSPILoader$NamedSPI, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedSPILoader$NamedSPI, of_, METH_VARARGS),
          DECLARE_METHOD(t_NamedSPILoader$NamedSPI, getName, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NamedSPILoader$NamedSPI, t_NamedSPILoader$NamedSPI, ::java::lang::Object, NamedSPILoader$NamedSPI, abstract_init, 0, 0, t_NamedSPILoader$NamedSPI__fields_, 0, 0);
        PyObject *t_NamedSPILoader$NamedSPI::wrap_Object(const NamedSPILoader$NamedSPI& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NamedSPILoader$NamedSPI::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NamedSPILoader$NamedSPI *self = (t_NamedSPILoader$NamedSPI *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_NamedSPILoader$NamedSPI::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NamedSPILoader$NamedSPI::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NamedSPILoader$NamedSPI *self = (t_NamedSPILoader$NamedSPI *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_NamedSPILoader$NamedSPI::install(PyObject *module)
        {
          installType(&PY_TYPE(NamedSPILoader$NamedSPI), module, "NamedSPILoader$NamedSPI", 0);
        }

        void t_NamedSPILoader$NamedSPI::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NamedSPILoader$NamedSPI).tp_dict, "class_", make_descriptor(NamedSPILoader$NamedSPI::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NamedSPILoader$NamedSPI).tp_dict, "wrapfn_", make_descriptor(t_NamedSPILoader$NamedSPI::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NamedSPILoader$NamedSPI).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NamedSPILoader$NamedSPI_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NamedSPILoader$NamedSPI::initializeClass, 1)))
            return NULL;
          return t_NamedSPILoader$NamedSPI::wrap_Object(NamedSPILoader$NamedSPI(((t_NamedSPILoader$NamedSPI *) arg)->object.this$));
        }
        static PyObject *t_NamedSPILoader$NamedSPI_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NamedSPILoader$NamedSPI::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NamedSPILoader$NamedSPI_of_(t_NamedSPILoader$NamedSPI *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_NamedSPILoader$NamedSPI_getName(t_NamedSPILoader$NamedSPI *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }
        static PyObject *t_NamedSPILoader$NamedSPI_get__parameters_(t_NamedSPILoader$NamedSPI *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_NamedSPILoader$NamedSPI_get__name(t_NamedSPILoader$NamedSPI *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/JaroWinklerDistance.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *JaroWinklerDistance::class$ = NULL;
          jmethodID *JaroWinklerDistance::mids$ = NULL;
          bool JaroWinklerDistance::live$ = false;

          jclass JaroWinklerDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/JaroWinklerDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getDistance_4a264752] = env->getMethodID(cls, "getDistance", "(Ljava/lang/String;Ljava/lang/String;)F");
              mids$[mid_getThreshold_54c6a176] = env->getMethodID(cls, "getThreshold", "()F");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setThreshold_06298cab] = env->getMethodID(cls, "setThreshold", "(F)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JaroWinklerDistance::JaroWinklerDistance() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean JaroWinklerDistance::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jfloat JaroWinklerDistance::getDistance(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_getDistance_4a264752], a0.this$, a1.this$);
          }

          jfloat JaroWinklerDistance::getThreshold() const
          {
            return env->callFloatMethod(this$, mids$[mid_getThreshold_54c6a176]);
          }

          jint JaroWinklerDistance::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void JaroWinklerDistance::setThreshold(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setThreshold_06298cab], a0);
          }

          ::java::lang::String JaroWinklerDistance::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_JaroWinklerDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JaroWinklerDistance_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JaroWinklerDistance_init_(t_JaroWinklerDistance *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JaroWinklerDistance_equals(t_JaroWinklerDistance *self, PyObject *args);
          static PyObject *t_JaroWinklerDistance_getDistance(t_JaroWinklerDistance *self, PyObject *args);
          static PyObject *t_JaroWinklerDistance_getThreshold(t_JaroWinklerDistance *self);
          static PyObject *t_JaroWinklerDistance_hashCode(t_JaroWinklerDistance *self, PyObject *args);
          static PyObject *t_JaroWinklerDistance_setThreshold(t_JaroWinklerDistance *self, PyObject *arg);
          static PyObject *t_JaroWinklerDistance_toString(t_JaroWinklerDistance *self, PyObject *args);
          static PyObject *t_JaroWinklerDistance_get__threshold(t_JaroWinklerDistance *self, void *data);
          static int t_JaroWinklerDistance_set__threshold(t_JaroWinklerDistance *self, PyObject *arg, void *data);
          static PyGetSetDef t_JaroWinklerDistance__fields_[] = {
            DECLARE_GETSET_FIELD(t_JaroWinklerDistance, threshold),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_JaroWinklerDistance__methods_[] = {
            DECLARE_METHOD(t_JaroWinklerDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JaroWinklerDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JaroWinklerDistance, equals, METH_VARARGS),
            DECLARE_METHOD(t_JaroWinklerDistance, getDistance, METH_VARARGS),
            DECLARE_METHOD(t_JaroWinklerDistance, getThreshold, METH_NOARGS),
            DECLARE_METHOD(t_JaroWinklerDistance, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_JaroWinklerDistance, setThreshold, METH_O),
            DECLARE_METHOD(t_JaroWinklerDistance, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JaroWinklerDistance, t_JaroWinklerDistance, ::java::lang::Object, JaroWinklerDistance, t_JaroWinklerDistance_init_, 0, 0, t_JaroWinklerDistance__fields_, 0, 0);

          void t_JaroWinklerDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(JaroWinklerDistance), module, "JaroWinklerDistance", 0);
          }

          void t_JaroWinklerDistance::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JaroWinklerDistance).tp_dict, "class_", make_descriptor(JaroWinklerDistance::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JaroWinklerDistance).tp_dict, "wrapfn_", make_descriptor(t_JaroWinklerDistance::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JaroWinklerDistance).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JaroWinklerDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JaroWinklerDistance::initializeClass, 1)))
              return NULL;
            return t_JaroWinklerDistance::wrap_Object(JaroWinklerDistance(((t_JaroWinklerDistance *) arg)->object.this$));
          }
          static PyObject *t_JaroWinklerDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JaroWinklerDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JaroWinklerDistance_init_(t_JaroWinklerDistance *self, PyObject *args, PyObject *kwds)
          {
            JaroWinklerDistance object((jobject) NULL);

            INT_CALL(object = JaroWinklerDistance());
            self->object = object;

            return 0;
          }

          static PyObject *t_JaroWinklerDistance_equals(t_JaroWinklerDistance *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(JaroWinklerDistance), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_JaroWinklerDistance_getDistance(t_JaroWinklerDistance *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDistance", args);
            return NULL;
          }

          static PyObject *t_JaroWinklerDistance_getThreshold(t_JaroWinklerDistance *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getThreshold());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_JaroWinklerDistance_hashCode(t_JaroWinklerDistance *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(JaroWinklerDistance), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_JaroWinklerDistance_setThreshold(t_JaroWinklerDistance *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setThreshold(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setThreshold", arg);
            return NULL;
          }

          static PyObject *t_JaroWinklerDistance_toString(t_JaroWinklerDistance *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(JaroWinklerDistance), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_JaroWinklerDistance_get__threshold(t_JaroWinklerDistance *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getThreshold());
            return PyFloat_FromDouble((double) value);
          }
          static int t_JaroWinklerDistance_set__threshold(t_JaroWinklerDistance *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setThreshold(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "threshold", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/FuzzyQueryNodeBuilder.h"
#include "org/apache/lucene/search/FuzzyQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *FuzzyQueryNodeBuilder::class$ = NULL;
              jmethodID *FuzzyQueryNodeBuilder::mids$ = NULL;
              bool FuzzyQueryNodeBuilder::live$ = false;

              jclass FuzzyQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/FuzzyQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_0622d624] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/FuzzyQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FuzzyQueryNodeBuilder::FuzzyQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::FuzzyQuery FuzzyQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::FuzzyQuery(env->callObjectMethod(this$, mids$[mid_build_0622d624], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_FuzzyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FuzzyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FuzzyQueryNodeBuilder_init_(t_FuzzyQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FuzzyQueryNodeBuilder_build(t_FuzzyQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_FuzzyQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_FuzzyQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FuzzyQueryNodeBuilder, t_FuzzyQueryNodeBuilder, ::java::lang::Object, FuzzyQueryNodeBuilder, t_FuzzyQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_FuzzyQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(FuzzyQueryNodeBuilder), module, "FuzzyQueryNodeBuilder", 0);
              }

              void t_FuzzyQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNodeBuilder).tp_dict, "class_", make_descriptor(FuzzyQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_FuzzyQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FuzzyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FuzzyQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_FuzzyQueryNodeBuilder::wrap_Object(FuzzyQueryNodeBuilder(((t_FuzzyQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_FuzzyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FuzzyQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FuzzyQueryNodeBuilder_init_(t_FuzzyQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                FuzzyQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = FuzzyQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_FuzzyQueryNodeBuilder_build(t_FuzzyQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::FuzzyQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_FuzzyQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/AnyQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *AnyQueryNodeBuilder::class$ = NULL;
              jmethodID *AnyQueryNodeBuilder::mids$ = NULL;
              bool AnyQueryNodeBuilder::live$ = false;

              jclass AnyQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/AnyQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_e1a6cc4e] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/BooleanQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              AnyQueryNodeBuilder::AnyQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::BooleanQuery AnyQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::BooleanQuery(env->callObjectMethod(this$, mids$[mid_build_e1a6cc4e], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_AnyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AnyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_AnyQueryNodeBuilder_init_(t_AnyQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_AnyQueryNodeBuilder_build(t_AnyQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_AnyQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_AnyQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnyQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnyQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(AnyQueryNodeBuilder, t_AnyQueryNodeBuilder, ::java::lang::Object, AnyQueryNodeBuilder, t_AnyQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_AnyQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(AnyQueryNodeBuilder), module, "AnyQueryNodeBuilder", 0);
              }

              void t_AnyQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(AnyQueryNodeBuilder).tp_dict, "class_", make_descriptor(AnyQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(AnyQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_AnyQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(AnyQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AnyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AnyQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_AnyQueryNodeBuilder::wrap_Object(AnyQueryNodeBuilder(((t_AnyQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_AnyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AnyQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_AnyQueryNodeBuilder_init_(t_AnyQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                AnyQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = AnyQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_AnyQueryNodeBuilder_build(t_AnyQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::BooleanQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_BooleanQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/BlockPackedWriter.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *BlockPackedWriter::class$ = NULL;
          jmethodID *BlockPackedWriter::mids$ = NULL;
          bool BlockPackedWriter::live$ = false;

          jclass BlockPackedWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/BlockPackedWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f4663c33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataOutput;I)V");
              mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockPackedWriter::BlockPackedWriter(const ::org::apache::lucene::store::DataOutput & a0, jint a1) : ::org::apache::lucene::util::packed::AbstractBlockPackedWriter(env->newObject(initializeClass, &mids$, mid_init$_f4663c33, a0.this$, a1)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_BlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockPackedWriter_init_(t_BlockPackedWriter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_BlockPackedWriter__methods_[] = {
            DECLARE_METHOD(t_BlockPackedWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockPackedWriter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BlockPackedWriter, t_BlockPackedWriter, ::org::apache::lucene::util::packed::AbstractBlockPackedWriter, BlockPackedWriter, t_BlockPackedWriter_init_, 0, 0, 0, 0, 0);

          void t_BlockPackedWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockPackedWriter), module, "BlockPackedWriter", 0);
          }

          void t_BlockPackedWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BlockPackedWriter).tp_dict, "class_", make_descriptor(BlockPackedWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BlockPackedWriter).tp_dict, "wrapfn_", make_descriptor(t_BlockPackedWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BlockPackedWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockPackedWriter::initializeClass, 1)))
              return NULL;
            return t_BlockPackedWriter::wrap_Object(BlockPackedWriter(((t_BlockPackedWriter *) arg)->object.this$));
          }
          static PyObject *t_BlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockPackedWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockPackedWriter_init_(t_BlockPackedWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            jint a1;
            BlockPackedWriter object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              INT_CALL(object = BlockPackedWriter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractDistinctValuesCollector$GroupCount.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractDistinctValuesCollector$GroupCount::class$ = NULL;
          jmethodID *AbstractDistinctValuesCollector$GroupCount::mids$ = NULL;
          jfieldID *AbstractDistinctValuesCollector$GroupCount::fids$ = NULL;
          bool AbstractDistinctValuesCollector$GroupCount::live$ = false;

          jclass AbstractDistinctValuesCollector$GroupCount::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractDistinctValuesCollector$GroupCount");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_290588ee] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_groupValue] = env->getFieldID(cls, "groupValue", "Ljava/lang/Object;");
              fids$[fid_uniqueValues] = env->getFieldID(cls, "uniqueValues", "Ljava/util/Set;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractDistinctValuesCollector$GroupCount::AbstractDistinctValuesCollector$GroupCount(const ::java::lang::Object & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_290588ee, a0.this$)) {}

          ::java::lang::Object AbstractDistinctValuesCollector$GroupCount::_get_groupValue() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_groupValue]));
          }

          ::java::util::Set AbstractDistinctValuesCollector$GroupCount::_get_uniqueValues() const
          {
            return ::java::util::Set(env->getObjectField(this$, fids$[fid_uniqueValues]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_of_(t_AbstractDistinctValuesCollector$GroupCount *self, PyObject *args);
          static int t_AbstractDistinctValuesCollector$GroupCount_init_(t_AbstractDistinctValuesCollector$GroupCount *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_get__groupValue(t_AbstractDistinctValuesCollector$GroupCount *self, void *data);
          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_get__uniqueValues(t_AbstractDistinctValuesCollector$GroupCount *self, void *data);

          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_get__parameters_(t_AbstractDistinctValuesCollector$GroupCount *self, void *data);
          static PyGetSetDef t_AbstractDistinctValuesCollector$GroupCount__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractDistinctValuesCollector$GroupCount, groupValue),
            DECLARE_GET_FIELD(t_AbstractDistinctValuesCollector$GroupCount, uniqueValues),
            DECLARE_GET_FIELD(t_AbstractDistinctValuesCollector$GroupCount, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractDistinctValuesCollector$GroupCount__methods_[] = {
            DECLARE_METHOD(t_AbstractDistinctValuesCollector$GroupCount, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractDistinctValuesCollector$GroupCount, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractDistinctValuesCollector$GroupCount, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractDistinctValuesCollector$GroupCount, t_AbstractDistinctValuesCollector$GroupCount, ::java::lang::Object, AbstractDistinctValuesCollector$GroupCount, t_AbstractDistinctValuesCollector$GroupCount_init_, 0, 0, t_AbstractDistinctValuesCollector$GroupCount__fields_, 0, 0);
          PyObject *t_AbstractDistinctValuesCollector$GroupCount::wrap_Object(const AbstractDistinctValuesCollector$GroupCount& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractDistinctValuesCollector$GroupCount::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractDistinctValuesCollector$GroupCount *self = (t_AbstractDistinctValuesCollector$GroupCount *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractDistinctValuesCollector$GroupCount::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractDistinctValuesCollector$GroupCount::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractDistinctValuesCollector$GroupCount *self = (t_AbstractDistinctValuesCollector$GroupCount *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractDistinctValuesCollector$GroupCount::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractDistinctValuesCollector$GroupCount), module, "AbstractDistinctValuesCollector$GroupCount", 0);
          }

          void t_AbstractDistinctValuesCollector$GroupCount::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractDistinctValuesCollector$GroupCount).tp_dict, "class_", make_descriptor(AbstractDistinctValuesCollector$GroupCount::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractDistinctValuesCollector$GroupCount).tp_dict, "wrapfn_", make_descriptor(t_AbstractDistinctValuesCollector$GroupCount::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractDistinctValuesCollector$GroupCount).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractDistinctValuesCollector$GroupCount::initializeClass, 1)))
              return NULL;
            return t_AbstractDistinctValuesCollector$GroupCount::wrap_Object(AbstractDistinctValuesCollector$GroupCount(((t_AbstractDistinctValuesCollector$GroupCount *) arg)->object.this$));
          }
          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractDistinctValuesCollector$GroupCount::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_of_(t_AbstractDistinctValuesCollector$GroupCount *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_AbstractDistinctValuesCollector$GroupCount_init_(t_AbstractDistinctValuesCollector$GroupCount *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::Object a0((jobject) NULL);
            AbstractDistinctValuesCollector$GroupCount object((jobject) NULL);

            if (!parseArgs(args, "o", &a0))
            {
              INT_CALL(object = AbstractDistinctValuesCollector$GroupCount(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_get__parameters_(t_AbstractDistinctValuesCollector$GroupCount *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_get__groupValue(t_AbstractDistinctValuesCollector$GroupCount *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupValue());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_get__uniqueValues(t_AbstractDistinctValuesCollector$GroupCount *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object._get_uniqueValues());
            return ::java::util::t_Set::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene41/Lucene41PostingsFormat.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {

          ::java::lang::Class *Lucene41PostingsFormat::class$ = NULL;
          jmethodID *Lucene41PostingsFormat::mids$ = NULL;
          bool Lucene41PostingsFormat::live$ = false;
          jint Lucene41PostingsFormat::BLOCK_SIZE = (jint) 0;
          ::java::lang::String *Lucene41PostingsFormat::DOC_EXTENSION = NULL;
          ::java::lang::String *Lucene41PostingsFormat::PAY_EXTENSION = NULL;
          ::java::lang::String *Lucene41PostingsFormat::POS_EXTENSION = NULL;

          jclass Lucene41PostingsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene41/Lucene41PostingsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_fieldsConsumer_a15793c6] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
              mids$[mid_fieldsProducer_c86c62bc] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              BLOCK_SIZE = env->getStaticIntField(cls, "BLOCK_SIZE");
              DOC_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "DOC_EXTENSION", "Ljava/lang/String;"));
              PAY_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "PAY_EXTENSION", "Ljava/lang/String;"));
              POS_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "POS_EXTENSION", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene41PostingsFormat::Lucene41PostingsFormat() : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          Lucene41PostingsFormat::Lucene41PostingsFormat(jint a0, jint a1) : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

          ::org::apache::lucene::codecs::FieldsConsumer Lucene41PostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_a15793c6], a0.this$));
          }

          ::org::apache::lucene::codecs::FieldsProducer Lucene41PostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c86c62bc], a0.this$));
          }

          ::java::lang::String Lucene41PostingsFormat::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {
          static PyObject *t_Lucene41PostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene41PostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene41PostingsFormat_init_(t_Lucene41PostingsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene41PostingsFormat_fieldsConsumer(t_Lucene41PostingsFormat *self, PyObject *args);
          static PyObject *t_Lucene41PostingsFormat_fieldsProducer(t_Lucene41PostingsFormat *self, PyObject *args);
          static PyObject *t_Lucene41PostingsFormat_toString(t_Lucene41PostingsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene41PostingsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene41PostingsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsFormat, fieldsProducer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsFormat, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene41PostingsFormat, t_Lucene41PostingsFormat, ::org::apache::lucene::codecs::PostingsFormat, Lucene41PostingsFormat, t_Lucene41PostingsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene41PostingsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene41PostingsFormat), module, "Lucene41PostingsFormat", 0);
          }

          void t_Lucene41PostingsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsFormat).tp_dict, "class_", make_descriptor(Lucene41PostingsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene41PostingsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene41PostingsFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsFormat).tp_dict, "BLOCK_SIZE", make_descriptor(Lucene41PostingsFormat::BLOCK_SIZE));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsFormat).tp_dict, "DOC_EXTENSION", make_descriptor(j2p(*Lucene41PostingsFormat::DOC_EXTENSION)));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsFormat).tp_dict, "PAY_EXTENSION", make_descriptor(j2p(*Lucene41PostingsFormat::PAY_EXTENSION)));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsFormat).tp_dict, "POS_EXTENSION", make_descriptor(j2p(*Lucene41PostingsFormat::POS_EXTENSION)));
          }

          static PyObject *t_Lucene41PostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene41PostingsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene41PostingsFormat::wrap_Object(Lucene41PostingsFormat(((t_Lucene41PostingsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene41PostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene41PostingsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene41PostingsFormat_init_(t_Lucene41PostingsFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Lucene41PostingsFormat object((jobject) NULL);

                INT_CALL(object = Lucene41PostingsFormat());
                self->object = object;
                break;
              }
              goto err;
             case 2:
              {
                jint a0;
                jint a1;
                Lucene41PostingsFormat object((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  INT_CALL(object = Lucene41PostingsFormat(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene41PostingsFormat_fieldsConsumer(t_Lucene41PostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_Lucene41PostingsFormat_fieldsProducer(t_Lucene41PostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }

          static PyObject *t_Lucene41PostingsFormat_toString(t_Lucene41PostingsFormat *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsFormat), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/VirtualMethod.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *VirtualMethod::class$ = NULL;
        jmethodID *VirtualMethod::mids$ = NULL;
        bool VirtualMethod::live$ = false;

        jclass VirtualMethod::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/VirtualMethod");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a7992850] = env->getMethodID(cls, "<init>", "(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)V");
            mids$[mid_compareImplementationDistance_3e1352c7] = env->getStaticMethodID(cls, "compareImplementationDistance", "(Ljava/lang/Class;Lorg/apache/lucene/util/VirtualMethod;Lorg/apache/lucene/util/VirtualMethod;)I");
            mids$[mid_getImplementationDistance_a5deafeb] = env->getMethodID(cls, "getImplementationDistance", "(Ljava/lang/Class;)I");
            mids$[mid_isOverriddenAsOf_a5deaff8] = env->getMethodID(cls, "isOverriddenAsOf", "(Ljava/lang/Class;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        VirtualMethod::VirtualMethod(const ::java::lang::Class & a0, const ::java::lang::String & a1, const JArray< ::java::lang::Class > & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a7992850, a0.this$, a1.this$, a2.this$)) {}

        jint VirtualMethod::compareImplementationDistance(const ::java::lang::Class & a0, const VirtualMethod & a1, const VirtualMethod & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_compareImplementationDistance_3e1352c7], a0.this$, a1.this$, a2.this$);
        }

        jint VirtualMethod::getImplementationDistance(const ::java::lang::Class & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getImplementationDistance_a5deafeb], a0.this$);
        }

        jboolean VirtualMethod::isOverriddenAsOf(const ::java::lang::Class & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_isOverriddenAsOf_a5deaff8], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_VirtualMethod_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_VirtualMethod_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_VirtualMethod_of_(t_VirtualMethod *self, PyObject *args);
        static int t_VirtualMethod_init_(t_VirtualMethod *self, PyObject *args, PyObject *kwds);
        static PyObject *t_VirtualMethod_compareImplementationDistance(PyTypeObject *type, PyObject *args);
        static PyObject *t_VirtualMethod_getImplementationDistance(t_VirtualMethod *self, PyObject *arg);
        static PyObject *t_VirtualMethod_isOverriddenAsOf(t_VirtualMethod *self, PyObject *arg);
        static PyObject *t_VirtualMethod_get__parameters_(t_VirtualMethod *self, void *data);
        static PyGetSetDef t_VirtualMethod__fields_[] = {
          DECLARE_GET_FIELD(t_VirtualMethod, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_VirtualMethod__methods_[] = {
          DECLARE_METHOD(t_VirtualMethod, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_VirtualMethod, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_VirtualMethod, of_, METH_VARARGS),
          DECLARE_METHOD(t_VirtualMethod, compareImplementationDistance, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_VirtualMethod, getImplementationDistance, METH_O),
          DECLARE_METHOD(t_VirtualMethod, isOverriddenAsOf, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(VirtualMethod, t_VirtualMethod, ::java::lang::Object, VirtualMethod, t_VirtualMethod_init_, 0, 0, t_VirtualMethod__fields_, 0, 0);
        PyObject *t_VirtualMethod::wrap_Object(const VirtualMethod& object, PyTypeObject *p0)
        {
          PyObject *obj = t_VirtualMethod::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_VirtualMethod *self = (t_VirtualMethod *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_VirtualMethod::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_VirtualMethod::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_VirtualMethod *self = (t_VirtualMethod *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_VirtualMethod::install(PyObject *module)
        {
          installType(&PY_TYPE(VirtualMethod), module, "VirtualMethod", 0);
        }

        void t_VirtualMethod::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(VirtualMethod).tp_dict, "class_", make_descriptor(VirtualMethod::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(VirtualMethod).tp_dict, "wrapfn_", make_descriptor(t_VirtualMethod::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(VirtualMethod).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_VirtualMethod_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, VirtualMethod::initializeClass, 1)))
            return NULL;
          return t_VirtualMethod::wrap_Object(VirtualMethod(((t_VirtualMethod *) arg)->object.this$));
        }
        static PyObject *t_VirtualMethod_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, VirtualMethod::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_VirtualMethod_of_(t_VirtualMethod *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_VirtualMethod_init_(t_VirtualMethod *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::Class > a2((jobject) NULL);
          PyTypeObject **p2;
          VirtualMethod object((jobject) NULL);

          if (!parseArgs(args, "Ks[K", ::java::lang::Class::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1, &a2, &p2, ::java::lang::t_Class::parameters_))
          {
            INT_CALL(object = VirtualMethod(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_VirtualMethod_compareImplementationDistance(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          VirtualMethod a1((jobject) NULL);
          PyTypeObject **p1;
          VirtualMethod a2((jobject) NULL);
          PyTypeObject **p2;
          jint result;

          if (!parseArgs(args, "KKK", ::java::lang::Class::initializeClass, VirtualMethod::initializeClass, VirtualMethod::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1, &p1, t_VirtualMethod::parameters_, &a2, &p2, t_VirtualMethod::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::VirtualMethod::compareImplementationDistance(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "compareImplementationDistance", args);
          return NULL;
        }

        static PyObject *t_VirtualMethod_getImplementationDistance(t_VirtualMethod *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          jint result;

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.getImplementationDistance(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getImplementationDistance", arg);
          return NULL;
        }

        static PyObject *t_VirtualMethod_isOverriddenAsOf(t_VirtualMethod *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          jboolean result;

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.isOverriddenAsOf(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "isOverriddenAsOf", arg);
          return NULL;
        }
        static PyObject *t_VirtualMethod_get__parameters_(t_VirtualMethod *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Enumeration.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *Enumeration::class$ = NULL;
    jmethodID *Enumeration::mids$ = NULL;
    bool Enumeration::live$ = false;

    jclass Enumeration::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/Enumeration");

        mids$ = new jmethodID[max_mid];
        mids$[mid_hasMoreElements_54c6a16a] = env->getMethodID(cls, "hasMoreElements", "()Z");
        mids$[mid_nextElement_846352c3] = env->getMethodID(cls, "nextElement", "()Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jboolean Enumeration::hasMoreElements() const
    {
      return env->callBooleanMethod(this$, mids$[mid_hasMoreElements_54c6a16a]);
    }

    ::java::lang::Object Enumeration::nextElement() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_nextElement_846352c3]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_Enumeration_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Enumeration_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Enumeration_of_(t_Enumeration *self, PyObject *args);
    static PyObject *t_Enumeration_hasMoreElements(t_Enumeration *self);
    static PyObject *t_Enumeration_nextElement(t_Enumeration *self);
    static PyObject *t_Enumeration_get__parameters_(t_Enumeration *self, void *data);
    static PyGetSetDef t_Enumeration__fields_[] = {
      DECLARE_GET_FIELD(t_Enumeration, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Enumeration__methods_[] = {
      DECLARE_METHOD(t_Enumeration, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Enumeration, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Enumeration, of_, METH_VARARGS),
      DECLARE_METHOD(t_Enumeration, hasMoreElements, METH_NOARGS),
      DECLARE_METHOD(t_Enumeration, nextElement, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Enumeration, t_Enumeration, ::java::lang::Object, Enumeration, abstract_init, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Enumeration *)) get_generic_enumeration_next< ::java::util::t_Enumeration,::java::lang::t_Object >), t_Enumeration__fields_, 0, 0);
    PyObject *t_Enumeration::wrap_Object(const Enumeration& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Enumeration::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Enumeration *self = (t_Enumeration *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_Enumeration::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Enumeration::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Enumeration *self = (t_Enumeration *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_Enumeration::install(PyObject *module)
    {
      installType(&PY_TYPE(Enumeration), module, "Enumeration", 0);
    }

    void t_Enumeration::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Enumeration).tp_dict, "class_", make_descriptor(Enumeration::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Enumeration).tp_dict, "wrapfn_", make_descriptor(t_Enumeration::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Enumeration).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Enumeration_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Enumeration::initializeClass, 1)))
        return NULL;
      return t_Enumeration::wrap_Object(Enumeration(((t_Enumeration *) arg)->object.this$));
    }
    static PyObject *t_Enumeration_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Enumeration::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Enumeration_of_(t_Enumeration *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_Enumeration_hasMoreElements(t_Enumeration *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.hasMoreElements());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Enumeration_nextElement(t_Enumeration *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.nextElement());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }
    static PyObject *t_Enumeration_get__parameters_(t_Enumeration *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingStoredFieldsReader::class$ = NULL;
          jmethodID *CompressingStoredFieldsReader::mids$ = NULL;
          bool CompressingStoredFieldsReader::live$ = false;

          jclass CompressingStoredFieldsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_846e12dd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/String;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;)V");
              mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_clone_ef585f0d] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/StoredFieldsReader;");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_visitDocument_a2ea3ebe] = env->getMethodID(cls, "visitDocument", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingStoredFieldsReader::CompressingStoredFieldsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::java::lang::String & a2, const ::org::apache::lucene::index::FieldInfos & a3, const ::org::apache::lucene::store::IOContext & a4, const ::java::lang::String & a5, const ::org::apache::lucene::codecs::compressing::CompressionMode & a6) : ::org::apache::lucene::codecs::StoredFieldsReader(env->newObject(initializeClass, &mids$, mid_init$_846e12dd, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$)) {}

          void CompressingStoredFieldsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
          }

          ::org::apache::lucene::codecs::StoredFieldsReader CompressingStoredFieldsReader::clone() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_clone_ef585f0d]));
          }

          void CompressingStoredFieldsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          jlong CompressingStoredFieldsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          void CompressingStoredFieldsReader::visitDocument(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_visitDocument_a2ea3ebe], a0, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingStoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompressingStoredFieldsReader_init_(t_CompressingStoredFieldsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompressingStoredFieldsReader_checkIntegrity(t_CompressingStoredFieldsReader *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsReader_clone(t_CompressingStoredFieldsReader *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsReader_close(t_CompressingStoredFieldsReader *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsReader_ramBytesUsed(t_CompressingStoredFieldsReader *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsReader_visitDocument(t_CompressingStoredFieldsReader *self, PyObject *args);

          static PyMethodDef t_CompressingStoredFieldsReader__methods_[] = {
            DECLARE_METHOD(t_CompressingStoredFieldsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, clone, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, visitDocument, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingStoredFieldsReader, t_CompressingStoredFieldsReader, ::org::apache::lucene::codecs::StoredFieldsReader, CompressingStoredFieldsReader, t_CompressingStoredFieldsReader_init_, 0, 0, 0, 0, 0);

          void t_CompressingStoredFieldsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingStoredFieldsReader), module, "CompressingStoredFieldsReader", 0);
          }

          void t_CompressingStoredFieldsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsReader).tp_dict, "class_", make_descriptor(CompressingStoredFieldsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsReader).tp_dict, "wrapfn_", make_descriptor(t_CompressingStoredFieldsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingStoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingStoredFieldsReader::initializeClass, 1)))
              return NULL;
            return t_CompressingStoredFieldsReader::wrap_Object(CompressingStoredFieldsReader(((t_CompressingStoredFieldsReader *) arg)->object.this$));
          }
          static PyObject *t_CompressingStoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingStoredFieldsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompressingStoredFieldsReader_init_(t_CompressingStoredFieldsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a3((jobject) NULL);
            ::org::apache::lucene::store::IOContext a4((jobject) NULL);
            ::java::lang::String a5((jobject) NULL);
            ::org::apache::lucene::codecs::compressing::CompressionMode a6((jobject) NULL);
            CompressingStoredFieldsReader object((jobject) NULL);

            if (!parseArgs(args, "kkskksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              INT_CALL(object = CompressingStoredFieldsReader(a0, a1, a2, a3, a4, a5, a6));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompressingStoredFieldsReader_checkIntegrity(t_CompressingStoredFieldsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsReader_clone(t_CompressingStoredFieldsReader *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsReader), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsReader_close(t_CompressingStoredFieldsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsReader_ramBytesUsed(t_CompressingStoredFieldsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsReader_visitDocument(t_CompressingStoredFieldsReader *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

            if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.visitDocument(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsReader), (PyObject *) self, "visitDocument", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoWriter.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {

          ::java::lang::Class *Lucene46SegmentInfoWriter::class$ = NULL;
          jmethodID *Lucene46SegmentInfoWriter::mids$ = NULL;
          bool Lucene46SegmentInfoWriter::live$ = false;

          jclass Lucene46SegmentInfoWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_write_3589180f] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene46SegmentInfoWriter::Lucene46SegmentInfoWriter() : ::org::apache::lucene::codecs::SegmentInfoWriter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void Lucene46SegmentInfoWriter::write(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_write_3589180f], a0.this$, a1.this$, a2.this$, a3.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {
          static PyObject *t_Lucene46SegmentInfoWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene46SegmentInfoWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene46SegmentInfoWriter_init_(t_Lucene46SegmentInfoWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene46SegmentInfoWriter_write(t_Lucene46SegmentInfoWriter *self, PyObject *args);

          static PyMethodDef t_Lucene46SegmentInfoWriter__methods_[] = {
            DECLARE_METHOD(t_Lucene46SegmentInfoWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46SegmentInfoWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46SegmentInfoWriter, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene46SegmentInfoWriter, t_Lucene46SegmentInfoWriter, ::org::apache::lucene::codecs::SegmentInfoWriter, Lucene46SegmentInfoWriter, t_Lucene46SegmentInfoWriter_init_, 0, 0, 0, 0, 0);

          void t_Lucene46SegmentInfoWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene46SegmentInfoWriter), module, "Lucene46SegmentInfoWriter", 0);
          }

          void t_Lucene46SegmentInfoWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoWriter).tp_dict, "class_", make_descriptor(Lucene46SegmentInfoWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoWriter).tp_dict, "wrapfn_", make_descriptor(t_Lucene46SegmentInfoWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene46SegmentInfoWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene46SegmentInfoWriter::initializeClass, 1)))
              return NULL;
            return t_Lucene46SegmentInfoWriter::wrap_Object(Lucene46SegmentInfoWriter(((t_Lucene46SegmentInfoWriter *) arg)->object.this$));
          }
          static PyObject *t_Lucene46SegmentInfoWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene46SegmentInfoWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene46SegmentInfoWriter_init_(t_Lucene46SegmentInfoWriter *self, PyObject *args, PyObject *kwds)
          {
            Lucene46SegmentInfoWriter object((jobject) NULL);

            INT_CALL(object = Lucene46SegmentInfoWriter());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene46SegmentInfoWriter_write(t_Lucene46SegmentInfoWriter *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.write(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene46SegmentInfoWriter), (PyObject *) self, "write", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/FieldCacheSanityChecker$Insanity.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/FieldCache$CacheEntry.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/FieldCacheSanityChecker$InsanityType.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *FieldCacheSanityChecker$Insanity::class$ = NULL;
        jmethodID *FieldCacheSanityChecker$Insanity::mids$ = NULL;
        bool FieldCacheSanityChecker$Insanity::live$ = false;

        jclass FieldCacheSanityChecker$Insanity::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/FieldCacheSanityChecker$Insanity");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9b412c8f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/FieldCacheSanityChecker$InsanityType;Ljava/lang/String;[Lorg/apache/lucene/search/FieldCache$CacheEntry;)V");
            mids$[mid_getCacheEntries_2bd7104e] = env->getMethodID(cls, "getCacheEntries", "()[Lorg/apache/lucene/search/FieldCache$CacheEntry;");
            mids$[mid_getMsg_14c7b5c5] = env->getMethodID(cls, "getMsg", "()Ljava/lang/String;");
            mids$[mid_getType_e7f4e575] = env->getMethodID(cls, "getType", "()Lorg/apache/lucene/util/FieldCacheSanityChecker$InsanityType;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCacheSanityChecker$Insanity::FieldCacheSanityChecker$Insanity(const ::org::apache::lucene::util::FieldCacheSanityChecker$InsanityType & a0, const ::java::lang::String & a1, const JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9b412c8f, a0.this$, a1.this$, a2.this$)) {}

        JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > FieldCacheSanityChecker$Insanity::getCacheEntries() const
        {
          return JArray< ::org::apache::lucene::search::FieldCache$CacheEntry >(env->callObjectMethod(this$, mids$[mid_getCacheEntries_2bd7104e]));
        }

        ::java::lang::String FieldCacheSanityChecker$Insanity::getMsg() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMsg_14c7b5c5]));
        }

        ::org::apache::lucene::util::FieldCacheSanityChecker$InsanityType FieldCacheSanityChecker$Insanity::getType() const
        {
          return ::org::apache::lucene::util::FieldCacheSanityChecker$InsanityType(env->callObjectMethod(this$, mids$[mid_getType_e7f4e575]));
        }

        ::java::lang::String FieldCacheSanityChecker$Insanity::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_FieldCacheSanityChecker$Insanity_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheSanityChecker$Insanity_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCacheSanityChecker$Insanity_init_(t_FieldCacheSanityChecker$Insanity *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCacheSanityChecker$Insanity_getCacheEntries(t_FieldCacheSanityChecker$Insanity *self);
        static PyObject *t_FieldCacheSanityChecker$Insanity_getMsg(t_FieldCacheSanityChecker$Insanity *self);
        static PyObject *t_FieldCacheSanityChecker$Insanity_getType(t_FieldCacheSanityChecker$Insanity *self);
        static PyObject *t_FieldCacheSanityChecker$Insanity_toString(t_FieldCacheSanityChecker$Insanity *self, PyObject *args);
        static PyObject *t_FieldCacheSanityChecker$Insanity_get__cacheEntries(t_FieldCacheSanityChecker$Insanity *self, void *data);
        static PyObject *t_FieldCacheSanityChecker$Insanity_get__msg(t_FieldCacheSanityChecker$Insanity *self, void *data);
        static PyObject *t_FieldCacheSanityChecker$Insanity_get__type(t_FieldCacheSanityChecker$Insanity *self, void *data);
        static PyGetSetDef t_FieldCacheSanityChecker$Insanity__fields_[] = {
          DECLARE_GET_FIELD(t_FieldCacheSanityChecker$Insanity, cacheEntries),
          DECLARE_GET_FIELD(t_FieldCacheSanityChecker$Insanity, msg),
          DECLARE_GET_FIELD(t_FieldCacheSanityChecker$Insanity, type),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldCacheSanityChecker$Insanity__methods_[] = {
          DECLARE_METHOD(t_FieldCacheSanityChecker$Insanity, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheSanityChecker$Insanity, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheSanityChecker$Insanity, getCacheEntries, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheSanityChecker$Insanity, getMsg, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheSanityChecker$Insanity, getType, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheSanityChecker$Insanity, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheSanityChecker$Insanity, t_FieldCacheSanityChecker$Insanity, ::java::lang::Object, FieldCacheSanityChecker$Insanity, t_FieldCacheSanityChecker$Insanity_init_, 0, 0, t_FieldCacheSanityChecker$Insanity__fields_, 0, 0);

        void t_FieldCacheSanityChecker$Insanity::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheSanityChecker$Insanity), module, "FieldCacheSanityChecker$Insanity", 0);
        }

        void t_FieldCacheSanityChecker$Insanity::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$Insanity).tp_dict, "class_", make_descriptor(FieldCacheSanityChecker$Insanity::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$Insanity).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheSanityChecker$Insanity::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$Insanity).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheSanityChecker$Insanity::initializeClass, 1)))
            return NULL;
          return t_FieldCacheSanityChecker$Insanity::wrap_Object(FieldCacheSanityChecker$Insanity(((t_FieldCacheSanityChecker$Insanity *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheSanityChecker$Insanity_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheSanityChecker$Insanity::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCacheSanityChecker$Insanity_init_(t_FieldCacheSanityChecker$Insanity *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::FieldCacheSanityChecker$InsanityType a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > a2((jobject) NULL);
          FieldCacheSanityChecker$Insanity object((jobject) NULL);

          if (!parseArgs(args, "ks[k", ::org::apache::lucene::util::FieldCacheSanityChecker$InsanityType::initializeClass, ::org::apache::lucene::search::FieldCache$CacheEntry::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = FieldCacheSanityChecker$Insanity(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_getCacheEntries(t_FieldCacheSanityChecker$Insanity *self)
        {
          JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > result((jobject) NULL);
          OBJ_CALL(result = self->object.getCacheEntries());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::t_FieldCache$CacheEntry::wrap_jobject);
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_getMsg(t_FieldCacheSanityChecker$Insanity *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getMsg());
          return j2p(result);
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_getType(t_FieldCacheSanityChecker$Insanity *self)
        {
          ::org::apache::lucene::util::FieldCacheSanityChecker$InsanityType result((jobject) NULL);
          OBJ_CALL(result = self->object.getType());
          return ::org::apache::lucene::util::t_FieldCacheSanityChecker$InsanityType::wrap_Object(result);
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_toString(t_FieldCacheSanityChecker$Insanity *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldCacheSanityChecker$Insanity), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_get__cacheEntries(t_FieldCacheSanityChecker$Insanity *self, void *data)
        {
          JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > value((jobject) NULL);
          OBJ_CALL(value = self->object.getCacheEntries());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_FieldCache$CacheEntry::wrap_jobject);
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_get__msg(t_FieldCacheSanityChecker$Insanity *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getMsg());
          return j2p(value);
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_get__type(t_FieldCacheSanityChecker$Insanity *self, void *data)
        {
          ::org::apache::lucene::util::FieldCacheSanityChecker$InsanityType value((jobject) NULL);
          OBJ_CALL(value = self->object.getType());
          return ::org::apache::lucene::util::t_FieldCacheSanityChecker$InsanityType::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {

          ::java::lang::Class *ReversePathHierarchyTokenizer::class$ = NULL;
          jmethodID *ReversePathHierarchyTokenizer::mids$ = NULL;
          bool ReversePathHierarchyTokenizer::live$ = false;
          jchar ReversePathHierarchyTokenizer::DEFAULT_DELIMITER = (jchar) 0;
          jint ReversePathHierarchyTokenizer::DEFAULT_SKIP = (jint) 0;

          jclass ReversePathHierarchyTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_8c604f56] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;I)V");
              mids$[mid_init$_e27d22ca] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;CI)V");
              mids$[mid_init$_944d83a2] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;IC)V");
              mids$[mid_init$_94478bac] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;CC)V");
              mids$[mid_init$_94f21e72] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;CCI)V");
              mids$[mid_init$_132ff91e] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;ICC)V");
              mids$[mid_init$_df655116] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;CCI)V");
              mids$[mid_init$_5df3b604] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;ICCI)V");
              mids$[mid_init$_0b338d38] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;ICCI)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_DELIMITER = env->getStaticCharField(cls, "DEFAULT_DELIMITER");
              DEFAULT_SKIP = env->getStaticIntField(cls, "DEFAULT_SKIP");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0, jint a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_8c604f56, a0.this$, a1)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0, jchar a1, jint a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_e27d22ca, a0.this$, a1, a2)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0, jint a1, jchar a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_944d83a2, a0.this$, a1, a2)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0, jchar a1, jchar a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_94478bac, a0.this$, a1, a2)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0, jchar a1, jchar a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_94f21e72, a0.this$, a1, a2, a3)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0, jint a1, jchar a2, jchar a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_132ff91e, a0.this$, a1, a2, a3)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jchar a2, jchar a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_df655116, a0.this$, a1.this$, a2, a3, a4)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0, jint a1, jchar a2, jchar a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_5df3b604, a0.this$, a1, a2, a3, a4)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jint a2, jchar a3, jchar a4, jint a5) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_0b338d38, a0.this$, a1.this$, a2, a3, a4, a5)) {}

          void ReversePathHierarchyTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean ReversePathHierarchyTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void ReversePathHierarchyTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {
          static PyObject *t_ReversePathHierarchyTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ReversePathHierarchyTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ReversePathHierarchyTokenizer_init_(t_ReversePathHierarchyTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ReversePathHierarchyTokenizer_end(t_ReversePathHierarchyTokenizer *self, PyObject *args);
          static PyObject *t_ReversePathHierarchyTokenizer_incrementToken(t_ReversePathHierarchyTokenizer *self, PyObject *args);
          static PyObject *t_ReversePathHierarchyTokenizer_reset(t_ReversePathHierarchyTokenizer *self, PyObject *args);

          static PyMethodDef t_ReversePathHierarchyTokenizer__methods_[] = {
            DECLARE_METHOD(t_ReversePathHierarchyTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReversePathHierarchyTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReversePathHierarchyTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_ReversePathHierarchyTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ReversePathHierarchyTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ReversePathHierarchyTokenizer, t_ReversePathHierarchyTokenizer, ::org::apache::lucene::analysis::Tokenizer, ReversePathHierarchyTokenizer, t_ReversePathHierarchyTokenizer_init_, 0, 0, 0, 0, 0);

          void t_ReversePathHierarchyTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(ReversePathHierarchyTokenizer), module, "ReversePathHierarchyTokenizer", 0);
          }

          void t_ReversePathHierarchyTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ReversePathHierarchyTokenizer).tp_dict, "class_", make_descriptor(ReversePathHierarchyTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ReversePathHierarchyTokenizer).tp_dict, "wrapfn_", make_descriptor(t_ReversePathHierarchyTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ReversePathHierarchyTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ReversePathHierarchyTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ReversePathHierarchyTokenizer).tp_dict, "DEFAULT_DELIMITER", make_descriptor(ReversePathHierarchyTokenizer::DEFAULT_DELIMITER));
            PyDict_SetItemString(PY_TYPE(ReversePathHierarchyTokenizer).tp_dict, "DEFAULT_SKIP", make_descriptor(ReversePathHierarchyTokenizer::DEFAULT_SKIP));
          }

          static PyObject *t_ReversePathHierarchyTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ReversePathHierarchyTokenizer::initializeClass, 1)))
              return NULL;
            return t_ReversePathHierarchyTokenizer::wrap_Object(ReversePathHierarchyTokenizer(((t_ReversePathHierarchyTokenizer *) arg)->object.this$));
          }
          static PyObject *t_ReversePathHierarchyTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ReversePathHierarchyTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ReversePathHierarchyTokenizer_init_(t_ReversePathHierarchyTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kI", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::io::Reader a0((jobject) NULL);
                jchar a1;
                jint a2;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kCI", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                jchar a2;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kIC", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                jchar a1;
                jchar a2;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kCC", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::io::Reader a0((jobject) NULL);
                jchar a1;
                jchar a2;
                jint a3;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kCCI", ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                jchar a2;
                jchar a3;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kICC", ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jchar a2;
                jchar a3;
                jint a4;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkCCI", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                jchar a2;
                jchar a3;
                jint a4;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kICCI", ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jchar a3;
                jchar a4;
                jint a5;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkICCI", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ReversePathHierarchyTokenizer_end(t_ReversePathHierarchyTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ReversePathHierarchyTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_ReversePathHierarchyTokenizer_incrementToken(t_ReversePathHierarchyTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ReversePathHierarchyTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ReversePathHierarchyTokenizer_reset(t_ReversePathHierarchyTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ReversePathHierarchyTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinFieldComparator.h"
#include "java/io/IOException.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToParentBlockJoinFieldComparator::class$ = NULL;
          jmethodID *ToParentBlockJoinFieldComparator::mids$ = NULL;
          bool ToParentBlockJoinFieldComparator::live$ = false;

          jclass ToParentBlockJoinFieldComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToParentBlockJoinFieldComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
              mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
              mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
              mids$[mid_setTopValue_290588ee] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Object;)V");
              mids$[mid_value_29be6a55] = env->getMethodID(cls, "value", "(I)Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint ToParentBlockJoinFieldComparator::compare(jint a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
          }

          void ToParentBlockJoinFieldComparator::setBottom(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
          }

          ::org::apache::lucene::search::FieldComparator ToParentBlockJoinFieldComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
          }

          void ToParentBlockJoinFieldComparator::setTopValue(const ::java::lang::Object & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTopValue_290588ee], a0.this$);
          }

          ::java::lang::Object ToParentBlockJoinFieldComparator::value(jint a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_value_29be6a55], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinFieldComparator$Highest.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinFieldComparator$Lowest.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToParentBlockJoinFieldComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinFieldComparator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinFieldComparator_of_(t_ToParentBlockJoinFieldComparator *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator_compare(t_ToParentBlockJoinFieldComparator *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator_setBottom(t_ToParentBlockJoinFieldComparator *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator_setNextReader(t_ToParentBlockJoinFieldComparator *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator_setTopValue(t_ToParentBlockJoinFieldComparator *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator_value(t_ToParentBlockJoinFieldComparator *self, PyObject *args);
          static int t_ToParentBlockJoinFieldComparator_set__bottom(t_ToParentBlockJoinFieldComparator *self, PyObject *arg, void *data);
          static int t_ToParentBlockJoinFieldComparator_set__nextReader(t_ToParentBlockJoinFieldComparator *self, PyObject *arg, void *data);
          static int t_ToParentBlockJoinFieldComparator_set__topValue(t_ToParentBlockJoinFieldComparator *self, PyObject *arg, void *data);
          static PyObject *t_ToParentBlockJoinFieldComparator_get__parameters_(t_ToParentBlockJoinFieldComparator *self, void *data);
          static PyGetSetDef t_ToParentBlockJoinFieldComparator__fields_[] = {
            DECLARE_SET_FIELD(t_ToParentBlockJoinFieldComparator, bottom),
            DECLARE_SET_FIELD(t_ToParentBlockJoinFieldComparator, nextReader),
            DECLARE_SET_FIELD(t_ToParentBlockJoinFieldComparator, topValue),
            DECLARE_GET_FIELD(t_ToParentBlockJoinFieldComparator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ToParentBlockJoinFieldComparator__methods_[] = {
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, of_, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, compare, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, setBottom, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, setNextReader, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, setTopValue, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, value, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ToParentBlockJoinFieldComparator, t_ToParentBlockJoinFieldComparator, ::org::apache::lucene::search::FieldComparator, ToParentBlockJoinFieldComparator, abstract_init, 0, 0, t_ToParentBlockJoinFieldComparator__fields_, 0, 0);
          PyObject *t_ToParentBlockJoinFieldComparator::wrap_Object(const ToParentBlockJoinFieldComparator& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ToParentBlockJoinFieldComparator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ToParentBlockJoinFieldComparator *self = (t_ToParentBlockJoinFieldComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_ToParentBlockJoinFieldComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ToParentBlockJoinFieldComparator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ToParentBlockJoinFieldComparator *self = (t_ToParentBlockJoinFieldComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_ToParentBlockJoinFieldComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(ToParentBlockJoinFieldComparator), module, "ToParentBlockJoinFieldComparator", 0);
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator).tp_dict, "Highest", make_descriptor(&PY_TYPE(ToParentBlockJoinFieldComparator$Highest)));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator).tp_dict, "Lowest", make_descriptor(&PY_TYPE(ToParentBlockJoinFieldComparator$Lowest)));
          }

          void t_ToParentBlockJoinFieldComparator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator).tp_dict, "class_", make_descriptor(ToParentBlockJoinFieldComparator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator).tp_dict, "wrapfn_", make_descriptor(t_ToParentBlockJoinFieldComparator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToParentBlockJoinFieldComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToParentBlockJoinFieldComparator::initializeClass, 1)))
              return NULL;
            return t_ToParentBlockJoinFieldComparator::wrap_Object(ToParentBlockJoinFieldComparator(((t_ToParentBlockJoinFieldComparator *) arg)->object.this$));
          }
          static PyObject *t_ToParentBlockJoinFieldComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToParentBlockJoinFieldComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ToParentBlockJoinFieldComparator_of_(t_ToParentBlockJoinFieldComparator *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator_compare(t_ToParentBlockJoinFieldComparator *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.compare(a0, a1));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator), (PyObject *) self, "compare", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator_setBottom(t_ToParentBlockJoinFieldComparator *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.setBottom(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator), (PyObject *) self, "setBottom", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator_setNextReader(t_ToParentBlockJoinFieldComparator *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.setNextReader(a0));
              return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator), (PyObject *) self, "setNextReader", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator_setTopValue(t_ToParentBlockJoinFieldComparator *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(self->object.setTopValue(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator), (PyObject *) self, "setTopValue", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator_value(t_ToParentBlockJoinFieldComparator *self, PyObject *args)
          {
            jint a0;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.value(a0));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator), (PyObject *) self, "value", args, 2);
          }
          static PyObject *t_ToParentBlockJoinFieldComparator_get__parameters_(t_ToParentBlockJoinFieldComparator *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_ToParentBlockJoinFieldComparator_set__bottom(t_ToParentBlockJoinFieldComparator *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setBottom(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "bottom", arg);
            return -1;
          }

          static int t_ToParentBlockJoinFieldComparator_set__nextReader(t_ToParentBlockJoinFieldComparator *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_ToParentBlockJoinFieldComparator_set__topValue(t_ToParentBlockJoinFieldComparator *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::Object value((jobject) NULL);
              if (!parseArg(arg, "o", &value))
              {
                INT_CALL(self->object.setTopValue(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "topValue", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Analyzer$PerFieldReuseStrategy.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Analyzer$PerFieldReuseStrategy::class$ = NULL;
        jmethodID *Analyzer$PerFieldReuseStrategy::mids$ = NULL;
        bool Analyzer$PerFieldReuseStrategy::live$ = false;

        jclass Analyzer$PerFieldReuseStrategy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Analyzer$PerFieldReuseStrategy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getReusableComponents_19769f4a] = env->getMethodID(cls, "getReusableComponents", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_setReusableComponents_66577a3f] = env->getMethodID(cls, "setReusableComponents", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Analyzer$PerFieldReuseStrategy::Analyzer$PerFieldReuseStrategy() : ::org::apache::lucene::analysis::Analyzer$ReuseStrategy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents Analyzer$PerFieldReuseStrategy::getReusableComponents(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_getReusableComponents_19769f4a], a0.this$, a1.this$));
        }

        void Analyzer$PerFieldReuseStrategy::setReusableComponents(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_setReusableComponents_66577a3f], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Analyzer$PerFieldReuseStrategy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Analyzer$PerFieldReuseStrategy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Analyzer$PerFieldReuseStrategy_init_(t_Analyzer$PerFieldReuseStrategy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Analyzer$PerFieldReuseStrategy_getReusableComponents(t_Analyzer$PerFieldReuseStrategy *self, PyObject *args);
        static PyObject *t_Analyzer$PerFieldReuseStrategy_setReusableComponents(t_Analyzer$PerFieldReuseStrategy *self, PyObject *args);

        static PyMethodDef t_Analyzer$PerFieldReuseStrategy__methods_[] = {
          DECLARE_METHOD(t_Analyzer$PerFieldReuseStrategy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$PerFieldReuseStrategy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$PerFieldReuseStrategy, getReusableComponents, METH_VARARGS),
          DECLARE_METHOD(t_Analyzer$PerFieldReuseStrategy, setReusableComponents, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Analyzer$PerFieldReuseStrategy, t_Analyzer$PerFieldReuseStrategy, ::org::apache::lucene::analysis::Analyzer$ReuseStrategy, Analyzer$PerFieldReuseStrategy, t_Analyzer$PerFieldReuseStrategy_init_, 0, 0, 0, 0, 0);

        void t_Analyzer$PerFieldReuseStrategy::install(PyObject *module)
        {
          installType(&PY_TYPE(Analyzer$PerFieldReuseStrategy), module, "Analyzer$PerFieldReuseStrategy", 0);
        }

        void t_Analyzer$PerFieldReuseStrategy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Analyzer$PerFieldReuseStrategy).tp_dict, "class_", make_descriptor(Analyzer$PerFieldReuseStrategy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Analyzer$PerFieldReuseStrategy).tp_dict, "wrapfn_", make_descriptor(t_Analyzer$PerFieldReuseStrategy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Analyzer$PerFieldReuseStrategy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Analyzer$PerFieldReuseStrategy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Analyzer$PerFieldReuseStrategy::initializeClass, 1)))
            return NULL;
          return t_Analyzer$PerFieldReuseStrategy::wrap_Object(Analyzer$PerFieldReuseStrategy(((t_Analyzer$PerFieldReuseStrategy *) arg)->object.this$));
        }
        static PyObject *t_Analyzer$PerFieldReuseStrategy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Analyzer$PerFieldReuseStrategy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Analyzer$PerFieldReuseStrategy_init_(t_Analyzer$PerFieldReuseStrategy *self, PyObject *args, PyObject *kwds)
        {
          Analyzer$PerFieldReuseStrategy object((jobject) NULL);

          INT_CALL(object = Analyzer$PerFieldReuseStrategy());
          self->object = object;

          return 0;
        }

        static PyObject *t_Analyzer$PerFieldReuseStrategy_getReusableComponents(t_Analyzer$PerFieldReuseStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getReusableComponents(a0, a1));
            return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(Analyzer$PerFieldReuseStrategy), (PyObject *) self, "getReusableComponents", args, 2);
        }

        static PyObject *t_Analyzer$PerFieldReuseStrategy_setReusableComponents(t_Analyzer$PerFieldReuseStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents a2((jobject) NULL);

          if (!parseArgs(args, "ksk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.setReusableComponents(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(Analyzer$PerFieldReuseStrategy), (PyObject *) self, "setReusableComponents", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/CheckIndex$Status$SegmentInfoStatus.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status::class$ = NULL;
        jmethodID *CheckIndex$Status::mids$ = NULL;
        jfieldID *CheckIndex$Status::fids$ = NULL;
        bool CheckIndex$Status::live$ = false;

        jclass CheckIndex$Status::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status");

            fids$ = new jfieldID[max_fid];
            fids$[fid_cantOpenSegments] = env->getFieldID(cls, "cantOpenSegments", "Z");
            fids$[fid_clean] = env->getFieldID(cls, "clean", "Z");
            fids$[fid_dir] = env->getFieldID(cls, "dir", "Lorg/apache/lucene/store/Directory;");
            fids$[fid_maxSegmentName] = env->getFieldID(cls, "maxSegmentName", "I");
            fids$[fid_missingSegmentVersion] = env->getFieldID(cls, "missingSegmentVersion", "Z");
            fids$[fid_missingSegments] = env->getFieldID(cls, "missingSegments", "Z");
            fids$[fid_numBadSegments] = env->getFieldID(cls, "numBadSegments", "I");
            fids$[fid_numSegments] = env->getFieldID(cls, "numSegments", "I");
            fids$[fid_partial] = env->getFieldID(cls, "partial", "Z");
            fids$[fid_segmentInfos] = env->getFieldID(cls, "segmentInfos", "Ljava/util/List;");
            fids$[fid_segmentsChecked] = env->getFieldID(cls, "segmentsChecked", "Ljava/util/List;");
            fids$[fid_segmentsFileName] = env->getFieldID(cls, "segmentsFileName", "Ljava/lang/String;");
            fids$[fid_toolOutOfDate] = env->getFieldID(cls, "toolOutOfDate", "Z");
            fids$[fid_totLoseDocCount] = env->getFieldID(cls, "totLoseDocCount", "I");
            fids$[fid_userData] = env->getFieldID(cls, "userData", "Ljava/util/Map;");
            fids$[fid_validCounter] = env->getFieldID(cls, "validCounter", "Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean CheckIndex$Status::_get_cantOpenSegments() const
        {
          return env->getBooleanField(this$, fids$[fid_cantOpenSegments]);
        }

        void CheckIndex$Status::_set_cantOpenSegments(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_cantOpenSegments], a0);
        }

        jboolean CheckIndex$Status::_get_clean() const
        {
          return env->getBooleanField(this$, fids$[fid_clean]);
        }

        void CheckIndex$Status::_set_clean(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_clean], a0);
        }

        ::org::apache::lucene::store::Directory CheckIndex$Status::_get_dir() const
        {
          return ::org::apache::lucene::store::Directory(env->getObjectField(this$, fids$[fid_dir]));
        }

        void CheckIndex$Status::_set_dir(const ::org::apache::lucene::store::Directory & a0) const
        {
          env->setObjectField(this$, fids$[fid_dir], a0.this$);
        }

        jint CheckIndex$Status::_get_maxSegmentName() const
        {
          return env->getIntField(this$, fids$[fid_maxSegmentName]);
        }

        void CheckIndex$Status::_set_maxSegmentName(jint a0) const
        {
          env->setIntField(this$, fids$[fid_maxSegmentName], a0);
        }

        jboolean CheckIndex$Status::_get_missingSegmentVersion() const
        {
          return env->getBooleanField(this$, fids$[fid_missingSegmentVersion]);
        }

        void CheckIndex$Status::_set_missingSegmentVersion(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_missingSegmentVersion], a0);
        }

        jboolean CheckIndex$Status::_get_missingSegments() const
        {
          return env->getBooleanField(this$, fids$[fid_missingSegments]);
        }

        void CheckIndex$Status::_set_missingSegments(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_missingSegments], a0);
        }

        jint CheckIndex$Status::_get_numBadSegments() const
        {
          return env->getIntField(this$, fids$[fid_numBadSegments]);
        }

        void CheckIndex$Status::_set_numBadSegments(jint a0) const
        {
          env->setIntField(this$, fids$[fid_numBadSegments], a0);
        }

        jint CheckIndex$Status::_get_numSegments() const
        {
          return env->getIntField(this$, fids$[fid_numSegments]);
        }

        void CheckIndex$Status::_set_numSegments(jint a0) const
        {
          env->setIntField(this$, fids$[fid_numSegments], a0);
        }

        jboolean CheckIndex$Status::_get_partial() const
        {
          return env->getBooleanField(this$, fids$[fid_partial]);
        }

        void CheckIndex$Status::_set_partial(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_partial], a0);
        }

        ::java::util::List CheckIndex$Status::_get_segmentInfos() const
        {
          return ::java::util::List(env->getObjectField(this$, fids$[fid_segmentInfos]));
        }

        void CheckIndex$Status::_set_segmentInfos(const ::java::util::List & a0) const
        {
          env->setObjectField(this$, fids$[fid_segmentInfos], a0.this$);
        }

        ::java::util::List CheckIndex$Status::_get_segmentsChecked() const
        {
          return ::java::util::List(env->getObjectField(this$, fids$[fid_segmentsChecked]));
        }

        void CheckIndex$Status::_set_segmentsChecked(const ::java::util::List & a0) const
        {
          env->setObjectField(this$, fids$[fid_segmentsChecked], a0.this$);
        }

        ::java::lang::String CheckIndex$Status::_get_segmentsFileName() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_segmentsFileName]));
        }

        void CheckIndex$Status::_set_segmentsFileName(const ::java::lang::String & a0) const
        {
          env->setObjectField(this$, fids$[fid_segmentsFileName], a0.this$);
        }

        jboolean CheckIndex$Status::_get_toolOutOfDate() const
        {
          return env->getBooleanField(this$, fids$[fid_toolOutOfDate]);
        }

        void CheckIndex$Status::_set_toolOutOfDate(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_toolOutOfDate], a0);
        }

        jint CheckIndex$Status::_get_totLoseDocCount() const
        {
          return env->getIntField(this$, fids$[fid_totLoseDocCount]);
        }

        void CheckIndex$Status::_set_totLoseDocCount(jint a0) const
        {
          env->setIntField(this$, fids$[fid_totLoseDocCount], a0);
        }

        ::java::util::Map CheckIndex$Status::_get_userData() const
        {
          return ::java::util::Map(env->getObjectField(this$, fids$[fid_userData]));
        }

        void CheckIndex$Status::_set_userData(const ::java::util::Map & a0) const
        {
          env->setObjectField(this$, fids$[fid_userData], a0.this$);
        }

        jboolean CheckIndex$Status::_get_validCounter() const
        {
          return env->getBooleanField(this$, fids$[fid_validCounter]);
        }

        void CheckIndex$Status::_set_validCounter(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_validCounter], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/CheckIndex$Status$DocValuesStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermVectorStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$StoredFieldStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermIndexStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$FieldNormStatus.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status_get__cantOpenSegments(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__cantOpenSegments(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__clean(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__clean(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__dir(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__dir(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__maxSegmentName(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__maxSegmentName(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__missingSegmentVersion(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__missingSegmentVersion(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__missingSegments(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__missingSegments(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__numBadSegments(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__numBadSegments(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__numSegments(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__numSegments(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__partial(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__partial(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__segmentInfos(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__segmentInfos(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__segmentsChecked(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__segmentsChecked(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__segmentsFileName(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__segmentsFileName(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__toolOutOfDate(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__toolOutOfDate(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__totLoseDocCount(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__totLoseDocCount(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__userData(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__userData(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__validCounter(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__validCounter(t_CheckIndex$Status *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, cantOpenSegments),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, clean),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, dir),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, maxSegmentName),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, missingSegmentVersion),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, missingSegments),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, numBadSegments),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, numSegments),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, partial),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, segmentInfos),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, segmentsChecked),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, segmentsFileName),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, toolOutOfDate),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, totLoseDocCount),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, userData),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, validCounter),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex$Status, t_CheckIndex$Status, ::java::lang::Object, CheckIndex$Status, abstract_init, 0, 0, t_CheckIndex$Status__fields_, 0, 0);

        void t_CheckIndex$Status::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status), module, "CheckIndex$Status", 0);
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "DocValuesStatus", make_descriptor(&PY_TYPE(CheckIndex$Status$DocValuesStatus)));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "TermVectorStatus", make_descriptor(&PY_TYPE(CheckIndex$Status$TermVectorStatus)));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "StoredFieldStatus", make_descriptor(&PY_TYPE(CheckIndex$Status$StoredFieldStatus)));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "TermIndexStatus", make_descriptor(&PY_TYPE(CheckIndex$Status$TermIndexStatus)));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "FieldNormStatus", make_descriptor(&PY_TYPE(CheckIndex$Status$FieldNormStatus)));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "SegmentInfoStatus", make_descriptor(&PY_TYPE(CheckIndex$Status$SegmentInfoStatus)));
        }

        void t_CheckIndex$Status::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "class_", make_descriptor(CheckIndex$Status::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex$Status::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status::wrap_Object(CheckIndex$Status(((t_CheckIndex$Status *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status_get__cantOpenSegments(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_cantOpenSegments());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__cantOpenSegments(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_cantOpenSegments(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "cantOpenSegments", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__clean(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_clean());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__clean(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_clean(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "clean", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__dir(t_CheckIndex$Status *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object._get_dir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }
        static int t_CheckIndex$Status_set__dir(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &value))
          {
            INT_CALL(self->object._set_dir(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "dir", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__maxSegmentName(t_CheckIndex$Status *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_maxSegmentName());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status_set__maxSegmentName(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_maxSegmentName(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "maxSegmentName", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__missingSegmentVersion(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_missingSegmentVersion());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__missingSegmentVersion(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_missingSegmentVersion(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "missingSegmentVersion", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__missingSegments(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_missingSegments());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__missingSegments(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_missingSegments(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "missingSegments", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__numBadSegments(t_CheckIndex$Status *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_numBadSegments());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status_set__numBadSegments(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_numBadSegments(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "numBadSegments", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__numSegments(t_CheckIndex$Status *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_numSegments());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status_set__numSegments(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_numSegments(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "numSegments", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__partial(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_partial());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__partial(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_partial(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "partial", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__segmentInfos(t_CheckIndex$Status *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentInfos());
          return ::java::util::t_List::wrap_Object(value);
        }
        static int t_CheckIndex$Status_set__segmentInfos(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          ::java::util::List value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::util::List::initializeClass, &value))
          {
            INT_CALL(self->object._set_segmentInfos(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "segmentInfos", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__segmentsChecked(t_CheckIndex$Status *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentsChecked());
          return ::java::util::t_List::wrap_Object(value);
        }
        static int t_CheckIndex$Status_set__segmentsChecked(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          ::java::util::List value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::util::List::initializeClass, &value))
          {
            INT_CALL(self->object._set_segmentsChecked(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "segmentsChecked", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__segmentsFileName(t_CheckIndex$Status *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentsFileName());
          return j2p(value);
        }
        static int t_CheckIndex$Status_set__segmentsFileName(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          if (!parseArg(arg, "s", &value))
          {
            INT_CALL(self->object._set_segmentsFileName(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "segmentsFileName", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__toolOutOfDate(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_toolOutOfDate());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__toolOutOfDate(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_toolOutOfDate(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "toolOutOfDate", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__totLoseDocCount(t_CheckIndex$Status *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_totLoseDocCount());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status_set__totLoseDocCount(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_totLoseDocCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totLoseDocCount", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__userData(t_CheckIndex$Status *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object._get_userData());
          return ::java::util::t_Map::wrap_Object(value);
        }
        static int t_CheckIndex$Status_set__userData(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
          {
            INT_CALL(self->object._set_userData(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "userData", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__validCounter(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_validCounter());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__validCounter(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_validCounter(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "validCounter", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/LongDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *LongDocValuesField::class$ = NULL;
        jmethodID *LongDocValuesField::mids$ = NULL;
        bool LongDocValuesField::live$ = false;

        jclass LongDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/LongDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4372eed5] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongDocValuesField::LongDocValuesField(const ::java::lang::String & a0, jlong a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_4372eed5, a0.this$, a1)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_LongDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongDocValuesField_init_(t_LongDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_LongDocValuesField__methods_[] = {
          DECLARE_METHOD(t_LongDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LongDocValuesField, t_LongDocValuesField, ::org::apache::lucene::document::NumericDocValuesField, LongDocValuesField, t_LongDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_LongDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(LongDocValuesField), module, "LongDocValuesField", 0);
        }

        void t_LongDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LongDocValuesField).tp_dict, "class_", make_descriptor(LongDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LongDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_LongDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LongDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LongDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongDocValuesField::initializeClass, 1)))
            return NULL;
          return t_LongDocValuesField::wrap_Object(LongDocValuesField(((t_LongDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_LongDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongDocValuesField_init_(t_LongDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          LongDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sJ", &a0, &a1))
          {
            INT_CALL(object = LongDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/DefaultSimilarity.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *DefaultSimilarity::class$ = NULL;
          jmethodID *DefaultSimilarity::mids$ = NULL;
          bool DefaultSimilarity::live$ = false;

          jclass DefaultSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/DefaultSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_coord_d8d154b6] = env->getMethodID(cls, "coord", "(II)F");
              mids$[mid_decodeNormValue_0ee6df3f] = env->getMethodID(cls, "decodeNormValue", "(J)F");
              mids$[mid_encodeNormValue_06298cb7] = env->getMethodID(cls, "encodeNormValue", "(F)J");
              mids$[mid_getDiscountOverlaps_54c6a16a] = env->getMethodID(cls, "getDiscountOverlaps", "()Z");
              mids$[mid_idf_a7e12cb4] = env->getMethodID(cls, "idf", "(JJ)F");
              mids$[mid_lengthNorm_6ff84e02] = env->getMethodID(cls, "lengthNorm", "(Lorg/apache/lucene/index/FieldInvertState;)F");
              mids$[mid_queryNorm_06298cbb] = env->getMethodID(cls, "queryNorm", "(F)F");
              mids$[mid_scorePayload_ffd34a82] = env->getMethodID(cls, "scorePayload", "(IIILorg/apache/lucene/util/BytesRef;)F");
              mids$[mid_setDiscountOverlaps_bb0c767f] = env->getMethodID(cls, "setDiscountOverlaps", "(Z)V");
              mids$[mid_sloppyFreq_39c7bd2c] = env->getMethodID(cls, "sloppyFreq", "(I)F");
              mids$[mid_tf_06298cbb] = env->getMethodID(cls, "tf", "(F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DefaultSimilarity::DefaultSimilarity() : ::org::apache::lucene::search::similarities::TFIDFSimilarity(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat DefaultSimilarity::coord(jint a0, jint a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_coord_d8d154b6], a0, a1);
          }

          jfloat DefaultSimilarity::decodeNormValue(jlong a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_decodeNormValue_0ee6df3f], a0);
          }

          jlong DefaultSimilarity::encodeNormValue(jfloat a0) const
          {
            return env->callLongMethod(this$, mids$[mid_encodeNormValue_06298cb7], a0);
          }

          jboolean DefaultSimilarity::getDiscountOverlaps() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getDiscountOverlaps_54c6a16a]);
          }

          jfloat DefaultSimilarity::idf(jlong a0, jlong a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_idf_a7e12cb4], a0, a1);
          }

          jfloat DefaultSimilarity::lengthNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_lengthNorm_6ff84e02], a0.this$);
          }

          jfloat DefaultSimilarity::queryNorm(jfloat a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_queryNorm_06298cbb], a0);
          }

          jfloat DefaultSimilarity::scorePayload(jint a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_scorePayload_ffd34a82], a0, a1, a2, a3.this$);
          }

          void DefaultSimilarity::setDiscountOverlaps(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDiscountOverlaps_bb0c767f], a0);
          }

          jfloat DefaultSimilarity::sloppyFreq(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_sloppyFreq_39c7bd2c], a0);
          }

          jfloat DefaultSimilarity::tf(jfloat a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_tf_06298cbb], a0);
          }

          ::java::lang::String DefaultSimilarity::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_DefaultSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DefaultSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DefaultSimilarity_init_(t_DefaultSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DefaultSimilarity_coord(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_decodeNormValue(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_encodeNormValue(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_getDiscountOverlaps(t_DefaultSimilarity *self);
          static PyObject *t_DefaultSimilarity_idf(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_lengthNorm(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_queryNorm(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_scorePayload(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_setDiscountOverlaps(t_DefaultSimilarity *self, PyObject *arg);
          static PyObject *t_DefaultSimilarity_sloppyFreq(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_tf(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_toString(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_get__discountOverlaps(t_DefaultSimilarity *self, void *data);
          static int t_DefaultSimilarity_set__discountOverlaps(t_DefaultSimilarity *self, PyObject *arg, void *data);
          static PyGetSetDef t_DefaultSimilarity__fields_[] = {
            DECLARE_GETSET_FIELD(t_DefaultSimilarity, discountOverlaps),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DefaultSimilarity__methods_[] = {
            DECLARE_METHOD(t_DefaultSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultSimilarity, coord, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, decodeNormValue, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, encodeNormValue, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, getDiscountOverlaps, METH_NOARGS),
            DECLARE_METHOD(t_DefaultSimilarity, idf, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, lengthNorm, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, queryNorm, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, scorePayload, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, setDiscountOverlaps, METH_O),
            DECLARE_METHOD(t_DefaultSimilarity, sloppyFreq, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, tf, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DefaultSimilarity, t_DefaultSimilarity, ::org::apache::lucene::search::similarities::TFIDFSimilarity, DefaultSimilarity, t_DefaultSimilarity_init_, 0, 0, t_DefaultSimilarity__fields_, 0, 0);

          void t_DefaultSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(DefaultSimilarity), module, "DefaultSimilarity", 0);
          }

          void t_DefaultSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DefaultSimilarity).tp_dict, "class_", make_descriptor(DefaultSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DefaultSimilarity).tp_dict, "wrapfn_", make_descriptor(t_DefaultSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DefaultSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DefaultSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DefaultSimilarity::initializeClass, 1)))
              return NULL;
            return t_DefaultSimilarity::wrap_Object(DefaultSimilarity(((t_DefaultSimilarity *) arg)->object.this$));
          }
          static PyObject *t_DefaultSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DefaultSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DefaultSimilarity_init_(t_DefaultSimilarity *self, PyObject *args, PyObject *kwds)
          {
            DefaultSimilarity object((jobject) NULL);

            INT_CALL(object = DefaultSimilarity());
            self->object = object;

            return 0;
          }

          static PyObject *t_DefaultSimilarity_coord(t_DefaultSimilarity *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.coord(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "coord", args, 2);
          }

          static PyObject *t_DefaultSimilarity_decodeNormValue(t_DefaultSimilarity *self, PyObject *args)
          {
            jlong a0;
            jfloat result;

            if (!parseArgs(args, "J", &a0))
            {
              OBJ_CALL(result = self->object.decodeNormValue(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "decodeNormValue", args, 2);
          }

          static PyObject *t_DefaultSimilarity_encodeNormValue(t_DefaultSimilarity *self, PyObject *args)
          {
            jfloat a0;
            jlong result;

            if (!parseArgs(args, "F", &a0))
            {
              OBJ_CALL(result = self->object.encodeNormValue(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "encodeNormValue", args, 2);
          }

          static PyObject *t_DefaultSimilarity_getDiscountOverlaps(t_DefaultSimilarity *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_DefaultSimilarity_idf(t_DefaultSimilarity *self, PyObject *args)
          {
            jlong a0;
            jlong a1;
            jfloat result;

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.idf(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "idf", args, 2);
          }

          static PyObject *t_DefaultSimilarity_lengthNorm(t_DefaultSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.lengthNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "lengthNorm", args, 2);
          }

          static PyObject *t_DefaultSimilarity_queryNorm(t_DefaultSimilarity *self, PyObject *args)
          {
            jfloat a0;
            jfloat result;

            if (!parseArgs(args, "F", &a0))
            {
              OBJ_CALL(result = self->object.queryNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "queryNorm", args, 2);
          }

          static PyObject *t_DefaultSimilarity_scorePayload(t_DefaultSimilarity *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "IIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.scorePayload(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "scorePayload", args, 2);
          }

          static PyObject *t_DefaultSimilarity_setDiscountOverlaps(t_DefaultSimilarity *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setDiscountOverlaps(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDiscountOverlaps", arg);
            return NULL;
          }

          static PyObject *t_DefaultSimilarity_sloppyFreq(t_DefaultSimilarity *self, PyObject *args)
          {
            jint a0;
            jfloat result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.sloppyFreq(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "sloppyFreq", args, 2);
          }

          static PyObject *t_DefaultSimilarity_tf(t_DefaultSimilarity *self, PyObject *args)
          {
            jfloat a0;
            jfloat result;

            if (!parseArgs(args, "F", &a0))
            {
              OBJ_CALL(result = self->object.tf(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "tf", args, 2);
          }

          static PyObject *t_DefaultSimilarity_toString(t_DefaultSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_DefaultSimilarity_get__discountOverlaps(t_DefaultSimilarity *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(value);
          }
          static int t_DefaultSimilarity_set__discountOverlaps(t_DefaultSimilarity *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setDiscountOverlaps(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "discountOverlaps", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/DeletedQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *DeletedQueryNode::class$ = NULL;
              jmethodID *DeletedQueryNode::mids$ = NULL;
              bool DeletedQueryNode::live$ = false;

              jclass DeletedQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/DeletedQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              DeletedQueryNode::DeletedQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode DeletedQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence DeletedQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String DeletedQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_DeletedQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_DeletedQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_DeletedQueryNode_init_(t_DeletedQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_DeletedQueryNode_cloneTree(t_DeletedQueryNode *self, PyObject *args);
              static PyObject *t_DeletedQueryNode_toQueryString(t_DeletedQueryNode *self, PyObject *args);
              static PyObject *t_DeletedQueryNode_toString(t_DeletedQueryNode *self, PyObject *args);

              static PyMethodDef t_DeletedQueryNode__methods_[] = {
                DECLARE_METHOD(t_DeletedQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DeletedQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DeletedQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_DeletedQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_DeletedQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(DeletedQueryNode, t_DeletedQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, DeletedQueryNode, t_DeletedQueryNode_init_, 0, 0, 0, 0, 0);

              void t_DeletedQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(DeletedQueryNode), module, "DeletedQueryNode", 0);
              }

              void t_DeletedQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(DeletedQueryNode).tp_dict, "class_", make_descriptor(DeletedQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(DeletedQueryNode).tp_dict, "wrapfn_", make_descriptor(t_DeletedQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(DeletedQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_DeletedQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, DeletedQueryNode::initializeClass, 1)))
                  return NULL;
                return t_DeletedQueryNode::wrap_Object(DeletedQueryNode(((t_DeletedQueryNode *) arg)->object.this$));
              }
              static PyObject *t_DeletedQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, DeletedQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_DeletedQueryNode_init_(t_DeletedQueryNode *self, PyObject *args, PyObject *kwds)
              {
                DeletedQueryNode object((jobject) NULL);

                INT_CALL(object = DeletedQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_DeletedQueryNode_cloneTree(t_DeletedQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(DeletedQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_DeletedQueryNode_toQueryString(t_DeletedQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(DeletedQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_DeletedQueryNode_toString(t_DeletedQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(DeletedQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianAnalyzer::class$ = NULL;
          jmethodID *PersianAnalyzer::mids$ = NULL;
          bool PersianAnalyzer::live$ = false;
          ::java::lang::String *PersianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;
          ::java::lang::String *PersianAnalyzer::STOPWORDS_COMMENT = NULL;

          jclass PersianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_initReader_d8fb1c81] = env->getMethodID(cls, "initReader", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              STOPWORDS_COMMENT = new ::java::lang::String(env->getStaticObjectField(cls, "STOPWORDS_COMMENT", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianAnalyzer::PersianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          PersianAnalyzer::PersianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet PersianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianAnalyzer_init_(t_PersianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_PersianAnalyzer_get__defaultStopSet(t_PersianAnalyzer *self, void *data);
          static PyGetSetDef t_PersianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_PersianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PersianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_PersianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PersianAnalyzer, t_PersianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, PersianAnalyzer, t_PersianAnalyzer_init_, 0, 0, t_PersianAnalyzer__fields_, 0, 0);

          void t_PersianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianAnalyzer), module, "PersianAnalyzer", 0);
          }

          void t_PersianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PersianAnalyzer).tp_dict, "class_", make_descriptor(PersianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PersianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_PersianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PersianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PersianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(PersianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*PersianAnalyzer::DEFAULT_STOPWORD_FILE)));
            PyDict_SetItemString(PY_TYPE(PersianAnalyzer).tp_dict, "STOPWORDS_COMMENT", make_descriptor(j2p(*PersianAnalyzer::STOPWORDS_COMMENT)));
          }

          static PyObject *t_PersianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_PersianAnalyzer::wrap_Object(PersianAnalyzer(((t_PersianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_PersianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianAnalyzer_init_(t_PersianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                PersianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = PersianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                PersianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PersianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PersianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::fa::PersianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_PersianAnalyzer_get__defaultStopSet(t_PersianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/ByteArrayDataInput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *ByteArrayDataInput::class$ = NULL;
        jmethodID *ByteArrayDataInput::mids$ = NULL;
        bool ByteArrayDataInput::live$ = false;

        jclass ByteArrayDataInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/ByteArrayDataInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_49b4f12b] = env->getMethodID(cls, "<init>", "([B)V");
            mids$[mid_init$_86f4435f] = env->getMethodID(cls, "<init>", "([BII)V");
            mids$[mid_eof_54c6a16a] = env->getMethodID(cls, "eof", "()Z");
            mids$[mid_getPosition_54c6a179] = env->getMethodID(cls, "getPosition", "()I");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
            mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_86f4435f] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_readInt_54c6a179] = env->getMethodID(cls, "readInt", "()I");
            mids$[mid_readLong_54c6a17a] = env->getMethodID(cls, "readLong", "()J");
            mids$[mid_readShort_54c6a163] = env->getMethodID(cls, "readShort", "()S");
            mids$[mid_readVInt_54c6a179] = env->getMethodID(cls, "readVInt", "()I");
            mids$[mid_readVLong_54c6a17a] = env->getMethodID(cls, "readVLong", "()J");
            mids$[mid_reset_49b4f12b] = env->getMethodID(cls, "reset", "([B)V");
            mids$[mid_reset_86f4435f] = env->getMethodID(cls, "reset", "([BII)V");
            mids$[mid_rewind_54c6a166] = env->getMethodID(cls, "rewind", "()V");
            mids$[mid_setPosition_39c7bd3c] = env->getMethodID(cls, "setPosition", "(I)V");
            mids$[mid_skipBytes_0ee6df2f] = env->getMethodID(cls, "skipBytes", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteArrayDataInput::ByteArrayDataInput() : ::org::apache::lucene::store::DataInput(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ByteArrayDataInput::ByteArrayDataInput(const JArray< jbyte > & a0) : ::org::apache::lucene::store::DataInput(env->newObject(initializeClass, &mids$, mid_init$_49b4f12b, a0.this$)) {}

        ByteArrayDataInput::ByteArrayDataInput(const JArray< jbyte > & a0, jint a1, jint a2) : ::org::apache::lucene::store::DataInput(env->newObject(initializeClass, &mids$, mid_init$_86f4435f, a0.this$, a1, a2)) {}

        jboolean ByteArrayDataInput::eof() const
        {
          return env->callBooleanMethod(this$, mids$[mid_eof_54c6a16a]);
        }

        jint ByteArrayDataInput::getPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_getPosition_54c6a179]);
        }

        jint ByteArrayDataInput::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }

        jbyte ByteArrayDataInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
        }

        void ByteArrayDataInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_86f4435f], a0.this$, a1, a2);
        }

        jint ByteArrayDataInput::readInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_54c6a179]);
        }

        jlong ByteArrayDataInput::readLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_54c6a17a]);
        }

        jshort ByteArrayDataInput::readShort() const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_54c6a163]);
        }

        jint ByteArrayDataInput::readVInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readVInt_54c6a179]);
        }

        jlong ByteArrayDataInput::readVLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readVLong_54c6a17a]);
        }

        void ByteArrayDataInput::reset(const JArray< jbyte > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_49b4f12b], a0.this$);
        }

        void ByteArrayDataInput::reset(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_86f4435f], a0.this$, a1, a2);
        }

        void ByteArrayDataInput::rewind() const
        {
          env->callVoidMethod(this$, mids$[mid_rewind_54c6a166]);
        }

        void ByteArrayDataInput::setPosition(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setPosition_39c7bd3c], a0);
        }

        void ByteArrayDataInput::skipBytes(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_skipBytes_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_ByteArrayDataInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteArrayDataInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteArrayDataInput_init_(t_ByteArrayDataInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteArrayDataInput_eof(t_ByteArrayDataInput *self);
        static PyObject *t_ByteArrayDataInput_getPosition(t_ByteArrayDataInput *self);
        static PyObject *t_ByteArrayDataInput_length(t_ByteArrayDataInput *self);
        static PyObject *t_ByteArrayDataInput_readByte(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readBytes(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readInt(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readLong(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readShort(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readVInt(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readVLong(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_reset(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_rewind(t_ByteArrayDataInput *self);
        static PyObject *t_ByteArrayDataInput_setPosition(t_ByteArrayDataInput *self, PyObject *arg);
        static PyObject *t_ByteArrayDataInput_skipBytes(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_get__position(t_ByteArrayDataInput *self, void *data);
        static int t_ByteArrayDataInput_set__position(t_ByteArrayDataInput *self, PyObject *arg, void *data);
        static PyGetSetDef t_ByteArrayDataInput__fields_[] = {
          DECLARE_GETSET_FIELD(t_ByteArrayDataInput, position),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteArrayDataInput__methods_[] = {
          DECLARE_METHOD(t_ByteArrayDataInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteArrayDataInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteArrayDataInput, eof, METH_NOARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, getPosition, METH_NOARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, length, METH_NOARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readByte, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readInt, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readLong, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readShort, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readVInt, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readVLong, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, reset, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, rewind, METH_NOARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, setPosition, METH_O),
          DECLARE_METHOD(t_ByteArrayDataInput, skipBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ByteArrayDataInput, t_ByteArrayDataInput, ::org::apache::lucene::store::DataInput, ByteArrayDataInput, t_ByteArrayDataInput_init_, 0, 0, t_ByteArrayDataInput__fields_, 0, 0);

        void t_ByteArrayDataInput::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteArrayDataInput), module, "ByteArrayDataInput", 0);
        }

        void t_ByteArrayDataInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ByteArrayDataInput).tp_dict, "class_", make_descriptor(ByteArrayDataInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ByteArrayDataInput).tp_dict, "wrapfn_", make_descriptor(t_ByteArrayDataInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ByteArrayDataInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteArrayDataInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteArrayDataInput::initializeClass, 1)))
            return NULL;
          return t_ByteArrayDataInput::wrap_Object(ByteArrayDataInput(((t_ByteArrayDataInput *) arg)->object.this$));
        }
        static PyObject *t_ByteArrayDataInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteArrayDataInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteArrayDataInput_init_(t_ByteArrayDataInput *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ByteArrayDataInput object((jobject) NULL);

              INT_CALL(object = ByteArrayDataInput());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);
              ByteArrayDataInput object((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                INT_CALL(object = ByteArrayDataInput(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              ByteArrayDataInput object((jobject) NULL);

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                INT_CALL(object = ByteArrayDataInput(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteArrayDataInput_eof(t_ByteArrayDataInput *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.eof());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_ByteArrayDataInput_getPosition(t_ByteArrayDataInput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPosition());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_ByteArrayDataInput_length(t_ByteArrayDataInput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_ByteArrayDataInput_readByte(t_ByteArrayDataInput *self, PyObject *args)
        {
          jbyte result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readByte());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readBytes(t_ByteArrayDataInput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readBytes", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readInt(t_ByteArrayDataInput *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readInt());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readInt", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readLong(t_ByteArrayDataInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readLong());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readLong", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readShort(t_ByteArrayDataInput *self, PyObject *args)
        {
          jshort result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readShort());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readShort", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readVInt(t_ByteArrayDataInput *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readVInt());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readVInt", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readVLong(t_ByteArrayDataInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readVLong());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readVLong", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_reset(t_ByteArrayDataInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(self->object.reset(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.reset(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }

        static PyObject *t_ByteArrayDataInput_rewind(t_ByteArrayDataInput *self)
        {
          OBJ_CALL(self->object.rewind());
          Py_RETURN_NONE;
        }

        static PyObject *t_ByteArrayDataInput_setPosition(t_ByteArrayDataInput *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setPosition(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setPosition", arg);
          return NULL;
        }

        static PyObject *t_ByteArrayDataInput_skipBytes(t_ByteArrayDataInput *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.skipBytes(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "skipBytes", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_get__position(t_ByteArrayDataInput *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPosition());
          return PyInt_FromLong((long) value);
        }
        static int t_ByteArrayDataInput_set__position(t_ByteArrayDataInput *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setPosition(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "position", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/BaseFragListBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FragListBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *BaseFragListBuilder::class$ = NULL;
          jmethodID *BaseFragListBuilder::mids$ = NULL;
          bool BaseFragListBuilder::live$ = false;
          jint BaseFragListBuilder::MARGIN_DEFAULT = (jint) 0;
          jint BaseFragListBuilder::MIN_FRAG_CHAR_SIZE_FACTOR = (jint) 0;

          jclass BaseFragListBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/BaseFragListBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_createFieldFragList_c90c3835] = env->getMethodID(cls, "createFieldFragList", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;I)Lorg/apache/lucene/search/vectorhighlight/FieldFragList;");
              mids$[mid_acceptPhrase_cb592899] = env->getMethodID(cls, "acceptPhrase", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo;II)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MARGIN_DEFAULT = env->getStaticIntField(cls, "MARGIN_DEFAULT");
              MIN_FRAG_CHAR_SIZE_FACTOR = env->getStaticIntField(cls, "MIN_FRAG_CHAR_SIZE_FACTOR");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BaseFragListBuilder::BaseFragListBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          BaseFragListBuilder::BaseFragListBuilder(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_BaseFragListBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BaseFragListBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BaseFragListBuilder_init_(t_BaseFragListBuilder *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_BaseFragListBuilder__methods_[] = {
            DECLARE_METHOD(t_BaseFragListBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BaseFragListBuilder, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BaseFragListBuilder, t_BaseFragListBuilder, ::java::lang::Object, BaseFragListBuilder, t_BaseFragListBuilder_init_, 0, 0, 0, 0, 0);

          void t_BaseFragListBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(BaseFragListBuilder), module, "BaseFragListBuilder", 0);
          }

          void t_BaseFragListBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BaseFragListBuilder).tp_dict, "class_", make_descriptor(BaseFragListBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BaseFragListBuilder).tp_dict, "wrapfn_", make_descriptor(t_BaseFragListBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BaseFragListBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(BaseFragListBuilder::initializeClass);
            PyDict_SetItemString(PY_TYPE(BaseFragListBuilder).tp_dict, "MARGIN_DEFAULT", make_descriptor(BaseFragListBuilder::MARGIN_DEFAULT));
            PyDict_SetItemString(PY_TYPE(BaseFragListBuilder).tp_dict, "MIN_FRAG_CHAR_SIZE_FACTOR", make_descriptor(BaseFragListBuilder::MIN_FRAG_CHAR_SIZE_FACTOR));
          }

          static PyObject *t_BaseFragListBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BaseFragListBuilder::initializeClass, 1)))
              return NULL;
            return t_BaseFragListBuilder::wrap_Object(BaseFragListBuilder(((t_BaseFragListBuilder *) arg)->object.this$));
          }
          static PyObject *t_BaseFragListBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BaseFragListBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BaseFragListBuilder_init_(t_BaseFragListBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                BaseFragListBuilder object((jobject) NULL);

                INT_CALL(object = BaseFragListBuilder());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                BaseFragListBuilder object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = BaseFragListBuilder(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/SortedBytesDocValuesField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *SortedBytesDocValuesField::class$ = NULL;
        jmethodID *SortedBytesDocValuesField::mids$ = NULL;
        bool SortedBytesDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *SortedBytesDocValuesField::TYPE_FIXED_LEN = NULL;
        ::org::apache::lucene::document::FieldType *SortedBytesDocValuesField::TYPE_VAR_LEN = NULL;

        jclass SortedBytesDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/SortedBytesDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_6c8dc377] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Z)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_FIXED_LEN = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_FIXED_LEN", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_VAR_LEN = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_VAR_LEN", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedBytesDocValuesField::SortedBytesDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::SortedDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}

        SortedBytesDocValuesField::SortedBytesDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, jboolean a2) : ::org::apache::lucene::document::SortedDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_6c8dc377, a0.this$, a1.this$, a2)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_SortedBytesDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedBytesDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedBytesDocValuesField_init_(t_SortedBytesDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_SortedBytesDocValuesField__methods_[] = {
          DECLARE_METHOD(t_SortedBytesDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedBytesDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedBytesDocValuesField, t_SortedBytesDocValuesField, ::org::apache::lucene::document::SortedDocValuesField, SortedBytesDocValuesField, t_SortedBytesDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_SortedBytesDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedBytesDocValuesField), module, "SortedBytesDocValuesField", 0);
        }

        void t_SortedBytesDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedBytesDocValuesField).tp_dict, "class_", make_descriptor(SortedBytesDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedBytesDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_SortedBytesDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedBytesDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedBytesDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortedBytesDocValuesField).tp_dict, "TYPE_FIXED_LEN", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*SortedBytesDocValuesField::TYPE_FIXED_LEN)));
          PyDict_SetItemString(PY_TYPE(SortedBytesDocValuesField).tp_dict, "TYPE_VAR_LEN", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*SortedBytesDocValuesField::TYPE_VAR_LEN)));
        }

        static PyObject *t_SortedBytesDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedBytesDocValuesField::initializeClass, 1)))
            return NULL;
          return t_SortedBytesDocValuesField::wrap_Object(SortedBytesDocValuesField(((t_SortedBytesDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_SortedBytesDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedBytesDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedBytesDocValuesField_init_(t_SortedBytesDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              SortedBytesDocValuesField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SortedBytesDocValuesField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              jboolean a2;
              SortedBytesDocValuesField object((jobject) NULL);

              if (!parseArgs(args, "skZ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = SortedBytesDocValuesField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene41/Lucene41StoredFieldsFormat.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {

          ::java::lang::Class *Lucene41StoredFieldsFormat::class$ = NULL;
          jmethodID *Lucene41StoredFieldsFormat::mids$ = NULL;
          bool Lucene41StoredFieldsFormat::live$ = false;

          jclass Lucene41StoredFieldsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene41/Lucene41StoredFieldsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene41StoredFieldsFormat::Lucene41StoredFieldsFormat() : ::org::apache::lucene::codecs::compressing::CompressingStoredFieldsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {
          static PyObject *t_Lucene41StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene41StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene41StoredFieldsFormat_init_(t_Lucene41StoredFieldsFormat *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_Lucene41StoredFieldsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene41StoredFieldsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41StoredFieldsFormat, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene41StoredFieldsFormat, t_Lucene41StoredFieldsFormat, ::org::apache::lucene::codecs::compressing::CompressingStoredFieldsFormat, Lucene41StoredFieldsFormat, t_Lucene41StoredFieldsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene41StoredFieldsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene41StoredFieldsFormat), module, "Lucene41StoredFieldsFormat", 0);
          }

          void t_Lucene41StoredFieldsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene41StoredFieldsFormat).tp_dict, "class_", make_descriptor(Lucene41StoredFieldsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene41StoredFieldsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene41StoredFieldsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene41StoredFieldsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene41StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene41StoredFieldsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene41StoredFieldsFormat::wrap_Object(Lucene41StoredFieldsFormat(((t_Lucene41StoredFieldsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene41StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene41StoredFieldsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene41StoredFieldsFormat_init_(t_Lucene41StoredFieldsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene41StoredFieldsFormat object((jobject) NULL);

            INT_CALL(object = Lucene41StoredFieldsFormat());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekStemFilter::class$ = NULL;
          jmethodID *GreekStemFilter::mids$ = NULL;
          bool GreekStemFilter::live$ = false;

          jclass GreekStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekStemFilter::GreekStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean GreekStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekStemFilter_init_(t_GreekStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekStemFilter_incrementToken(t_GreekStemFilter *self, PyObject *args);

          static PyMethodDef t_GreekStemFilter__methods_[] = {
            DECLARE_METHOD(t_GreekStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GreekStemFilter, t_GreekStemFilter, ::org::apache::lucene::analysis::TokenFilter, GreekStemFilter, t_GreekStemFilter_init_, 0, 0, 0, 0, 0);

          void t_GreekStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekStemFilter), module, "GreekStemFilter", 0);
          }

          void t_GreekStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GreekStemFilter).tp_dict, "class_", make_descriptor(GreekStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GreekStemFilter).tp_dict, "wrapfn_", make_descriptor(t_GreekStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GreekStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GreekStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekStemFilter::initializeClass, 1)))
              return NULL;
            return t_GreekStemFilter::wrap_Object(GreekStemFilter(((t_GreekStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GreekStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekStemFilter_init_(t_GreekStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GreekStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GreekStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GreekStemFilter_incrementToken(t_GreekStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GreekStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/NGramFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/ngram/NGramTokenFilter.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *NGramFilterFactory::class$ = NULL;
          jmethodID *NGramFilterFactory::mids$ = NULL;
          bool NGramFilterFactory::live$ = false;

          jclass NGramFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/NGramFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_f78e1f4d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/ngram/NGramTokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NGramFilterFactory::NGramFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ngram::NGramTokenFilter NGramFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::ngram::NGramTokenFilter(env->callObjectMethod(this$, mids$[mid_create_f78e1f4d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_NGramFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NGramFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NGramFilterFactory_init_(t_NGramFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NGramFilterFactory_create(t_NGramFilterFactory *self, PyObject *args);

          static PyMethodDef t_NGramFilterFactory__methods_[] = {
            DECLARE_METHOD(t_NGramFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NGramFilterFactory, t_NGramFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, NGramFilterFactory, t_NGramFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_NGramFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(NGramFilterFactory), module, "NGramFilterFactory", 0);
          }

          void t_NGramFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NGramFilterFactory).tp_dict, "class_", make_descriptor(NGramFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NGramFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_NGramFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NGramFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NGramFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NGramFilterFactory::initializeClass, 1)))
              return NULL;
            return t_NGramFilterFactory::wrap_Object(NGramFilterFactory(((t_NGramFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_NGramFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NGramFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NGramFilterFactory_init_(t_NGramFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            NGramFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = NGramFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NGramFilterFactory_create(t_NGramFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::ngram::NGramTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::ngram::t_NGramTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NGramFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/MaxPayloadFunction.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *MaxPayloadFunction::class$ = NULL;
          jmethodID *MaxPayloadFunction::mids$ = NULL;
          bool MaxPayloadFunction::live$ = false;

          jclass MaxPayloadFunction::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/MaxPayloadFunction");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_currentScore_9fe8c3f6] = env->getMethodID(cls, "currentScore", "(ILjava/lang/String;IIIFF)F");
              mids$[mid_docScore_08788a8d] = env->getMethodID(cls, "docScore", "(ILjava/lang/String;IF)F");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MaxPayloadFunction::MaxPayloadFunction() : ::org::apache::lucene::search::payloads::PayloadFunction(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat MaxPayloadFunction::currentScore(jint a0, const ::java::lang::String & a1, jint a2, jint a3, jint a4, jfloat a5, jfloat a6) const
          {
            return env->callFloatMethod(this$, mids$[mid_currentScore_9fe8c3f6], a0, a1.this$, a2, a3, a4, a5, a6);
          }

          jfloat MaxPayloadFunction::docScore(jint a0, const ::java::lang::String & a1, jint a2, jfloat a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_docScore_08788a8d], a0, a1.this$, a2, a3);
          }

          jboolean MaxPayloadFunction::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint MaxPayloadFunction::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_MaxPayloadFunction_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MaxPayloadFunction_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MaxPayloadFunction_init_(t_MaxPayloadFunction *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MaxPayloadFunction_currentScore(t_MaxPayloadFunction *self, PyObject *args);
          static PyObject *t_MaxPayloadFunction_docScore(t_MaxPayloadFunction *self, PyObject *args);
          static PyObject *t_MaxPayloadFunction_equals(t_MaxPayloadFunction *self, PyObject *args);
          static PyObject *t_MaxPayloadFunction_hashCode(t_MaxPayloadFunction *self, PyObject *args);

          static PyMethodDef t_MaxPayloadFunction__methods_[] = {
            DECLARE_METHOD(t_MaxPayloadFunction, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MaxPayloadFunction, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MaxPayloadFunction, currentScore, METH_VARARGS),
            DECLARE_METHOD(t_MaxPayloadFunction, docScore, METH_VARARGS),
            DECLARE_METHOD(t_MaxPayloadFunction, equals, METH_VARARGS),
            DECLARE_METHOD(t_MaxPayloadFunction, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MaxPayloadFunction, t_MaxPayloadFunction, ::org::apache::lucene::search::payloads::PayloadFunction, MaxPayloadFunction, t_MaxPayloadFunction_init_, 0, 0, 0, 0, 0);

          void t_MaxPayloadFunction::install(PyObject *module)
          {
            installType(&PY_TYPE(MaxPayloadFunction), module, "MaxPayloadFunction", 0);
          }

          void t_MaxPayloadFunction::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MaxPayloadFunction).tp_dict, "class_", make_descriptor(MaxPayloadFunction::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MaxPayloadFunction).tp_dict, "wrapfn_", make_descriptor(t_MaxPayloadFunction::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MaxPayloadFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MaxPayloadFunction_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MaxPayloadFunction::initializeClass, 1)))
              return NULL;
            return t_MaxPayloadFunction::wrap_Object(MaxPayloadFunction(((t_MaxPayloadFunction *) arg)->object.this$));
          }
          static PyObject *t_MaxPayloadFunction_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MaxPayloadFunction::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MaxPayloadFunction_init_(t_MaxPayloadFunction *self, PyObject *args, PyObject *kwds)
          {
            MaxPayloadFunction object((jobject) NULL);

            INT_CALL(object = MaxPayloadFunction());
            self->object = object;

            return 0;
          }

          static PyObject *t_MaxPayloadFunction_currentScore(t_MaxPayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jint a3;
            jint a4;
            jfloat a5;
            jfloat a6;
            jfloat result;

            if (!parseArgs(args, "IsIIIFF", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              OBJ_CALL(result = self->object.currentScore(a0, a1, a2, a3, a4, a5, a6));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(MaxPayloadFunction), (PyObject *) self, "currentScore", args, 2);
          }

          static PyObject *t_MaxPayloadFunction_docScore(t_MaxPayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jfloat a3;
            jfloat result;

            if (!parseArgs(args, "IsIF", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.docScore(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(MaxPayloadFunction), (PyObject *) self, "docScore", args, 2);
          }

          static PyObject *t_MaxPayloadFunction_equals(t_MaxPayloadFunction *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MaxPayloadFunction), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_MaxPayloadFunction_hashCode(t_MaxPayloadFunction *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MaxPayloadFunction), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/IntDocValues.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/ValueSourceScorer.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *IntDocValues::class$ = NULL;
            jmethodID *IntDocValues::mids$ = NULL;
            bool IntDocValues::live$ = false;

            jclass IntDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/IntDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_byteVal_39c7bd28] = env->getMethodID(cls, "byteVal", "(I)B");
                mids$[mid_doubleVal_39c7bd2e] = env->getMethodID(cls, "doubleVal", "(I)D");
                mids$[mid_floatVal_39c7bd2c] = env->getMethodID(cls, "floatVal", "(I)F");
                mids$[mid_getRangeScorer_d201bc96] = env->getMethodID(cls, "getRangeScorer", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/queries/function/ValueSourceScorer;");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_intVal_39c7bd23] = env->getMethodID(cls, "intVal", "(I)I");
                mids$[mid_longVal_39c7bd20] = env->getMethodID(cls, "longVal", "(I)J");
                mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_shortVal_39c7bd39] = env->getMethodID(cls, "shortVal", "(I)S");
                mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            IntDocValues::IntDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            jbyte IntDocValues::byteVal(jint a0) const
            {
              return env->callByteMethod(this$, mids$[mid_byteVal_39c7bd28], a0);
            }

            jdouble IntDocValues::doubleVal(jint a0) const
            {
              return env->callDoubleMethod(this$, mids$[mid_doubleVal_39c7bd2e], a0);
            }

            jfloat IntDocValues::floatVal(jint a0) const
            {
              return env->callFloatMethod(this$, mids$[mid_floatVal_39c7bd2c], a0);
            }

            ::org::apache::lucene::queries::function::ValueSourceScorer IntDocValues::getRangeScorer(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) const
            {
              return ::org::apache::lucene::queries::function::ValueSourceScorer(env->callObjectMethod(this$, mids$[mid_getRangeScorer_d201bc96], a0.this$, a1.this$, a2.this$, a3, a4));
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller IntDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            jint IntDocValues::intVal(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_intVal_39c7bd23], a0);
            }

            jlong IntDocValues::longVal(jint a0) const
            {
              return env->callLongMethod(this$, mids$[mid_longVal_39c7bd20], a0);
            }

            ::java::lang::Object IntDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
            }

            jshort IntDocValues::shortVal(jint a0) const
            {
              return env->callShortMethod(this$, mids$[mid_shortVal_39c7bd39], a0);
            }

            ::java::lang::String IntDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
            }

            ::java::lang::String IntDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_IntDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_IntDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_IntDocValues_init_(t_IntDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_IntDocValues_byteVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_doubleVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_floatVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_getRangeScorer(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_getValueFiller(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_intVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_longVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_objectVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_shortVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_strVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_toString(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_get__valueFiller(t_IntDocValues *self, void *data);
            static PyGetSetDef t_IntDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_IntDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_IntDocValues__methods_[] = {
              DECLARE_METHOD(t_IntDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IntDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IntDocValues, byteVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, doubleVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, floatVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, getRangeScorer, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, intVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, longVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, shortVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(IntDocValues, t_IntDocValues, ::org::apache::lucene::queries::function::FunctionValues, IntDocValues, t_IntDocValues_init_, 0, 0, t_IntDocValues__fields_, 0, 0);

            void t_IntDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(IntDocValues), module, "IntDocValues", 0);
            }

            void t_IntDocValues::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(IntDocValues).tp_dict, "class_", make_descriptor(IntDocValues::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(IntDocValues).tp_dict, "wrapfn_", make_descriptor(t_IntDocValues::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(IntDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_IntDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, IntDocValues::initializeClass, 1)))
                return NULL;
              return t_IntDocValues::wrap_Object(IntDocValues(((t_IntDocValues *) arg)->object.this$));
            }
            static PyObject *t_IntDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, IntDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_IntDocValues_init_(t_IntDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              IntDocValues object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = IntDocValues(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_IntDocValues_byteVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jbyte result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.byteVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "byteVal", args, 2);
            }

            static PyObject *t_IntDocValues_doubleVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jdouble result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.doubleVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "doubleVal", args, 2);
            }

            static PyObject *t_IntDocValues_floatVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.floatVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "floatVal", args, 2);
            }

            static PyObject *t_IntDocValues_getRangeScorer(t_IntDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              ::org::apache::lucene::queries::function::ValueSourceScorer result((jobject) NULL);

              if (!parseArgs(args, "kssZZ", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = self->object.getRangeScorer(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::queries::function::t_ValueSourceScorer::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "getRangeScorer", args, 2);
            }

            static PyObject *t_IntDocValues_getValueFiller(t_IntDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_IntDocValues_intVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.intVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "intVal", args, 2);
            }

            static PyObject *t_IntDocValues_longVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jlong result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.longVal(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "longVal", args, 2);
            }

            static PyObject *t_IntDocValues_objectVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_IntDocValues_shortVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jshort result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.shortVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "shortVal", args, 2);
            }

            static PyObject *t_IntDocValues_strVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_IntDocValues_toString(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_IntDocValues_get__valueFiller(t_IntDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *AtomicReaderContext::class$ = NULL;
        jmethodID *AtomicReaderContext::mids$ = NULL;
        jfieldID *AtomicReaderContext::fids$ = NULL;
        bool AtomicReaderContext::live$ = false;

        jclass AtomicReaderContext::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/AtomicReaderContext");

            mids$ = new jmethodID[max_mid];
            mids$[mid_children_87851566] = env->getMethodID(cls, "children", "()Ljava/util/List;");
            mids$[mid_leaves_87851566] = env->getMethodID(cls, "leaves", "()Ljava/util/List;");
            mids$[mid_reader_dea1bc38] = env->getMethodID(cls, "reader", "()Lorg/apache/lucene/index/AtomicReader;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docBase] = env->getFieldID(cls, "docBase", "I");
            fids$[fid_ord] = env->getFieldID(cls, "ord", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::List AtomicReaderContext::children() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_children_87851566]));
        }

        ::java::util::List AtomicReaderContext::leaves() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_leaves_87851566]));
        }

        ::org::apache::lucene::index::AtomicReader AtomicReaderContext::reader() const
        {
          return ::org::apache::lucene::index::AtomicReader(env->callObjectMethod(this$, mids$[mid_reader_dea1bc38]));
        }

        jint AtomicReaderContext::_get_docBase() const
        {
          return env->getIntField(this$, fids$[fid_docBase]);
        }

        jint AtomicReaderContext::_get_ord() const
        {
          return env->getIntField(this$, fids$[fid_ord]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_AtomicReaderContext_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AtomicReaderContext_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AtomicReaderContext_children(t_AtomicReaderContext *self, PyObject *args);
        static PyObject *t_AtomicReaderContext_leaves(t_AtomicReaderContext *self, PyObject *args);
        static PyObject *t_AtomicReaderContext_reader(t_AtomicReaderContext *self, PyObject *args);
        static PyObject *t_AtomicReaderContext_get__docBase(t_AtomicReaderContext *self, void *data);
        static PyObject *t_AtomicReaderContext_get__ord(t_AtomicReaderContext *self, void *data);

        static PyGetSetDef t_AtomicReaderContext__fields_[] = {
          DECLARE_GET_FIELD(t_AtomicReaderContext, docBase),
          DECLARE_GET_FIELD(t_AtomicReaderContext, ord),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_AtomicReaderContext__methods_[] = {
          DECLARE_METHOD(t_AtomicReaderContext, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AtomicReaderContext, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AtomicReaderContext, children, METH_VARARGS),
          DECLARE_METHOD(t_AtomicReaderContext, leaves, METH_VARARGS),
          DECLARE_METHOD(t_AtomicReaderContext, reader, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AtomicReaderContext, t_AtomicReaderContext, ::org::apache::lucene::index::IndexReaderContext, AtomicReaderContext, abstract_init, 0, 0, t_AtomicReaderContext__fields_, 0, 0);

        void t_AtomicReaderContext::install(PyObject *module)
        {
          installType(&PY_TYPE(AtomicReaderContext), module, "AtomicReaderContext", 0);
        }

        void t_AtomicReaderContext::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AtomicReaderContext).tp_dict, "class_", make_descriptor(AtomicReaderContext::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AtomicReaderContext).tp_dict, "wrapfn_", make_descriptor(t_AtomicReaderContext::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AtomicReaderContext).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AtomicReaderContext_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AtomicReaderContext::initializeClass, 1)))
            return NULL;
          return t_AtomicReaderContext::wrap_Object(AtomicReaderContext(((t_AtomicReaderContext *) arg)->object.this$));
        }
        static PyObject *t_AtomicReaderContext_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AtomicReaderContext::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_AtomicReaderContext_children(t_AtomicReaderContext *self, PyObject *args)
        {
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.children());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(IndexReaderContext));
          }

          return callSuper(&PY_TYPE(AtomicReaderContext), (PyObject *) self, "children", args, 2);
        }

        static PyObject *t_AtomicReaderContext_leaves(t_AtomicReaderContext *self, PyObject *args)
        {
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.leaves());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(AtomicReaderContext));
          }

          return callSuper(&PY_TYPE(AtomicReaderContext), (PyObject *) self, "leaves", args, 2);
        }

        static PyObject *t_AtomicReaderContext_reader(t_AtomicReaderContext *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.reader());
            return ::org::apache::lucene::index::t_AtomicReader::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(AtomicReaderContext), (PyObject *) self, "reader", args, 2);
        }

        static PyObject *t_AtomicReaderContext_get__docBase(t_AtomicReaderContext *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docBase());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_AtomicReaderContext_get__ord(t_AtomicReaderContext *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_ord());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DateTools$Resolution::class$ = NULL;
        jmethodID *DateTools$Resolution::mids$ = NULL;
        bool DateTools$Resolution::live$ = false;
        DateTools$Resolution *DateTools$Resolution::DAY = NULL;
        DateTools$Resolution *DateTools$Resolution::HOUR = NULL;
        DateTools$Resolution *DateTools$Resolution::MILLISECOND = NULL;
        DateTools$Resolution *DateTools$Resolution::MINUTE = NULL;
        DateTools$Resolution *DateTools$Resolution::MONTH = NULL;
        DateTools$Resolution *DateTools$Resolution::SECOND = NULL;
        DateTools$Resolution *DateTools$Resolution::YEAR = NULL;

        jclass DateTools$Resolution::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DateTools$Resolution");

            mids$ = new jmethodID[max_mid];
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_valueOf_65edc44f] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/document/DateTools$Resolution;");
            mids$[mid_values_aa4de4a9] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/document/DateTools$Resolution;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DAY = new DateTools$Resolution(env->getStaticObjectField(cls, "DAY", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            HOUR = new DateTools$Resolution(env->getStaticObjectField(cls, "HOUR", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            MILLISECOND = new DateTools$Resolution(env->getStaticObjectField(cls, "MILLISECOND", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            MINUTE = new DateTools$Resolution(env->getStaticObjectField(cls, "MINUTE", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            MONTH = new DateTools$Resolution(env->getStaticObjectField(cls, "MONTH", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            SECOND = new DateTools$Resolution(env->getStaticObjectField(cls, "SECOND", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            YEAR = new DateTools$Resolution(env->getStaticObjectField(cls, "YEAR", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String DateTools$Resolution::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        DateTools$Resolution DateTools$Resolution::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DateTools$Resolution(env->callStaticObjectMethod(cls, mids$[mid_valueOf_65edc44f], a0.this$));
        }

        JArray< DateTools$Resolution > DateTools$Resolution::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< DateTools$Resolution >(env->callStaticObjectMethod(cls, mids$[mid_values_aa4de4a9]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DateTools$Resolution_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools$Resolution_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools$Resolution_of_(t_DateTools$Resolution *self, PyObject *args);
        static PyObject *t_DateTools$Resolution_toString(t_DateTools$Resolution *self, PyObject *args);
        static PyObject *t_DateTools$Resolution_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_DateTools$Resolution_values(PyTypeObject *type);
        static PyObject *t_DateTools$Resolution_get__parameters_(t_DateTools$Resolution *self, void *data);
        static PyGetSetDef t_DateTools$Resolution__fields_[] = {
          DECLARE_GET_FIELD(t_DateTools$Resolution, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DateTools$Resolution__methods_[] = {
          DECLARE_METHOD(t_DateTools$Resolution, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools$Resolution, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools$Resolution, of_, METH_VARARGS),
          DECLARE_METHOD(t_DateTools$Resolution, toString, METH_VARARGS),
          DECLARE_METHOD(t_DateTools$Resolution, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DateTools$Resolution, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DateTools$Resolution, t_DateTools$Resolution, ::java::lang::Enum, DateTools$Resolution, abstract_init, 0, 0, t_DateTools$Resolution__fields_, 0, 0);
        PyObject *t_DateTools$Resolution::wrap_Object(const DateTools$Resolution& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DateTools$Resolution::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DateTools$Resolution *self = (t_DateTools$Resolution *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_DateTools$Resolution::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DateTools$Resolution::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DateTools$Resolution *self = (t_DateTools$Resolution *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_DateTools$Resolution::install(PyObject *module)
        {
          installType(&PY_TYPE(DateTools$Resolution), module, "DateTools$Resolution", 0);
        }

        void t_DateTools$Resolution::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "class_", make_descriptor(DateTools$Resolution::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "wrapfn_", make_descriptor(t_DateTools$Resolution::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DateTools$Resolution::initializeClass);
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "DAY", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::DAY)));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "HOUR", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::HOUR)));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "MILLISECOND", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::MILLISECOND)));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "MINUTE", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::MINUTE)));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "MONTH", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::MONTH)));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "SECOND", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::SECOND)));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "YEAR", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::YEAR)));
        }

        static PyObject *t_DateTools$Resolution_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DateTools$Resolution::initializeClass, 1)))
            return NULL;
          return t_DateTools$Resolution::wrap_Object(DateTools$Resolution(((t_DateTools$Resolution *) arg)->object.this$));
        }
        static PyObject *t_DateTools$Resolution_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DateTools$Resolution::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DateTools$Resolution_of_(t_DateTools$Resolution *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_DateTools$Resolution_toString(t_DateTools$Resolution *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(DateTools$Resolution), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_DateTools$Resolution_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          DateTools$Resolution result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DateTools$Resolution::valueOf(a0));
            return t_DateTools$Resolution::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_DateTools$Resolution_values(PyTypeObject *type)
        {
          JArray< DateTools$Resolution > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::document::DateTools$Resolution::values());
          return JArray<jobject>(result.this$).wrap(t_DateTools$Resolution::wrap_jobject);
        }
        static PyObject *t_DateTools$Resolution_get__parameters_(t_DateTools$Resolution *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopDocs::class$ = NULL;
        jmethodID *TopDocs::mids$ = NULL;
        jfieldID *TopDocs::fids$ = NULL;
        bool TopDocs::live$ = false;

        jclass TopDocs::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopDocs");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_63c9a885] = env->getMethodID(cls, "<init>", "(I[Lorg/apache/lucene/search/ScoreDoc;F)V");
            mids$[mid_getMaxScore_54c6a176] = env->getMethodID(cls, "getMaxScore", "()F");
            mids$[mid_merge_732b94b7] = env->getStaticMethodID(cls, "merge", "(Lorg/apache/lucene/search/Sort;I[Lorg/apache/lucene/search/TopDocs;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_merge_15bf4771] = env->getStaticMethodID(cls, "merge", "(Lorg/apache/lucene/search/Sort;II[Lorg/apache/lucene/search/TopDocs;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_setMaxScore_06298cab] = env->getMethodID(cls, "setMaxScore", "(F)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_scoreDocs] = env->getFieldID(cls, "scoreDocs", "[Lorg/apache/lucene/search/ScoreDoc;");
            fids$[fid_totalHits] = env->getFieldID(cls, "totalHits", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopDocs::TopDocs(jint a0, const JArray< ::org::apache::lucene::search::ScoreDoc > & a1, jfloat a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_63c9a885, a0, a1.this$, a2)) {}

        jfloat TopDocs::getMaxScore() const
        {
          return env->callFloatMethod(this$, mids$[mid_getMaxScore_54c6a176]);
        }

        TopDocs TopDocs::merge(const ::org::apache::lucene::search::Sort & a0, jint a1, const JArray< TopDocs > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return TopDocs(env->callStaticObjectMethod(cls, mids$[mid_merge_732b94b7], a0.this$, a1, a2.this$));
        }

        TopDocs TopDocs::merge(const ::org::apache::lucene::search::Sort & a0, jint a1, jint a2, const JArray< TopDocs > & a3)
        {
          jclass cls = env->getClass(initializeClass);
          return TopDocs(env->callStaticObjectMethod(cls, mids$[mid_merge_15bf4771], a0.this$, a1, a2, a3.this$));
        }

        void TopDocs::setMaxScore(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxScore_06298cab], a0);
        }

        JArray< ::org::apache::lucene::search::ScoreDoc > TopDocs::_get_scoreDocs() const
        {
          return JArray< ::org::apache::lucene::search::ScoreDoc >(env->getObjectField(this$, fids$[fid_scoreDocs]));
        }

        void TopDocs::_set_scoreDocs(const JArray< ::org::apache::lucene::search::ScoreDoc > & a0) const
        {
          env->setObjectField(this$, fids$[fid_scoreDocs], a0.this$);
        }

        jint TopDocs::_get_totalHits() const
        {
          return env->getIntField(this$, fids$[fid_totalHits]);
        }

        void TopDocs::_set_totalHits(jint a0) const
        {
          env->setIntField(this$, fids$[fid_totalHits], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopDocs_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopDocs_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TopDocs_init_(t_TopDocs *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopDocs_getMaxScore(t_TopDocs *self);
        static PyObject *t_TopDocs_merge(PyTypeObject *type, PyObject *args);
        static PyObject *t_TopDocs_setMaxScore(t_TopDocs *self, PyObject *arg);
        static PyObject *t_TopDocs_get__scoreDocs(t_TopDocs *self, void *data);
        static int t_TopDocs_set__scoreDocs(t_TopDocs *self, PyObject *arg, void *data);
        static PyObject *t_TopDocs_get__totalHits(t_TopDocs *self, void *data);
        static int t_TopDocs_set__totalHits(t_TopDocs *self, PyObject *arg, void *data);

        static PyObject *t_TopDocs_get__maxScore(t_TopDocs *self, void *data);
        static int t_TopDocs_set__maxScore(t_TopDocs *self, PyObject *arg, void *data);
        static PyGetSetDef t_TopDocs__fields_[] = {
          DECLARE_GETSET_FIELD(t_TopDocs, scoreDocs),
          DECLARE_GETSET_FIELD(t_TopDocs, totalHits),
          DECLARE_GETSET_FIELD(t_TopDocs, maxScore),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopDocs__methods_[] = {
          DECLARE_METHOD(t_TopDocs, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopDocs, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopDocs, getMaxScore, METH_NOARGS),
          DECLARE_METHOD(t_TopDocs, merge, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TopDocs, setMaxScore, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopDocs, t_TopDocs, ::java::lang::Object, TopDocs, t_TopDocs_init_, 0, 0, t_TopDocs__fields_, 0, 0);

        void t_TopDocs::install(PyObject *module)
        {
          installType(&PY_TYPE(TopDocs), module, "TopDocs", 0);
        }

        void t_TopDocs::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopDocs).tp_dict, "class_", make_descriptor(TopDocs::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopDocs).tp_dict, "wrapfn_", make_descriptor(t_TopDocs::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopDocs).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopDocs_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopDocs::initializeClass, 1)))
            return NULL;
          return t_TopDocs::wrap_Object(TopDocs(((t_TopDocs *) arg)->object.this$));
        }
        static PyObject *t_TopDocs_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopDocs::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TopDocs_init_(t_TopDocs *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          JArray< ::org::apache::lucene::search::ScoreDoc > a1((jobject) NULL);
          jfloat a2;
          TopDocs object((jobject) NULL);

          if (!parseArgs(args, "I[kF", ::org::apache::lucene::search::ScoreDoc::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = TopDocs(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TopDocs_getMaxScore(t_TopDocs *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getMaxScore());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TopDocs_merge(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::search::Sort a0((jobject) NULL);
              jint a1;
              JArray< TopDocs > a2((jobject) NULL);
              TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kI[k", ::org::apache::lucene::search::Sort::initializeClass, TopDocs::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopDocs::merge(a0, a1, a2));
                return t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::search::Sort a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< TopDocs > a3((jobject) NULL);
              TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kII[k", ::org::apache::lucene::search::Sort::initializeClass, TopDocs::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopDocs::merge(a0, a1, a2, a3));
                return t_TopDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "merge", args);
          return NULL;
        }

        static PyObject *t_TopDocs_setMaxScore(t_TopDocs *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setMaxScore(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxScore", arg);
          return NULL;
        }

        static PyObject *t_TopDocs_get__scoreDocs(t_TopDocs *self, void *data)
        {
          JArray< ::org::apache::lucene::search::ScoreDoc > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_scoreDocs());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_ScoreDoc::wrap_jobject);
        }
        static int t_TopDocs_set__scoreDocs(t_TopDocs *self, PyObject *arg, void *data)
        {
          JArray< ::org::apache::lucene::search::ScoreDoc > value((jobject) NULL);
          if (!parseArg(arg, "[k", ::org::apache::lucene::search::ScoreDoc::initializeClass, &value))
          {
            INT_CALL(self->object._set_scoreDocs(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "scoreDocs", arg);
          return -1;
        }

        static PyObject *t_TopDocs_get__totalHits(t_TopDocs *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_totalHits());
          return PyInt_FromLong((long) value);
        }
        static int t_TopDocs_set__totalHits(t_TopDocs *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_totalHits(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalHits", arg);
          return -1;
        }

        static PyObject *t_TopDocs_get__maxScore(t_TopDocs *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getMaxScore());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TopDocs_set__maxScore(t_TopDocs *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setMaxScore(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxScore", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/PositiveIntOutputs.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "java/lang/Long.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *PositiveIntOutputs::class$ = NULL;
          jmethodID *PositiveIntOutputs::mids$ = NULL;
          bool PositiveIntOutputs::live$ = false;

          jclass PositiveIntOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/PositiveIntOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_9f6e77f0] = env->getMethodID(cls, "add", "(Ljava/lang/Long;Ljava/lang/Long;)Ljava/lang/Long;");
              mids$[mid_common_9f6e77f0] = env->getMethodID(cls, "common", "(Ljava/lang/Long;Ljava/lang/Long;)Ljava/lang/Long;");
              mids$[mid_getNoOutput_c5e93900] = env->getMethodID(cls, "getNoOutput", "()Ljava/lang/Long;");
              mids$[mid_getSingleton_62a4b337] = env->getStaticMethodID(cls, "getSingleton", "()Lorg/apache/lucene/util/fst/PositiveIntOutputs;");
              mids$[mid_outputToString_d1a33160] = env->getMethodID(cls, "outputToString", "(Ljava/lang/Long;)Ljava/lang/String;");
              mids$[mid_ramBytesUsed_da55802d] = env->getMethodID(cls, "ramBytesUsed", "(Ljava/lang/Long;)J");
              mids$[mid_read_5eca7461] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Ljava/lang/Long;");
              mids$[mid_subtract_9f6e77f0] = env->getMethodID(cls, "subtract", "(Ljava/lang/Long;Ljava/lang/Long;)Ljava/lang/Long;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_write_6466b4a8] = env->getMethodID(cls, "write", "(Ljava/lang/Long;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Long PositiveIntOutputs::add(const ::java::lang::Long & a0, const ::java::lang::Long & a1) const
          {
            return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_add_9f6e77f0], a0.this$, a1.this$));
          }

          ::java::lang::Long PositiveIntOutputs::common(const ::java::lang::Long & a0, const ::java::lang::Long & a1) const
          {
            return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_common_9f6e77f0], a0.this$, a1.this$));
          }

          ::java::lang::Long PositiveIntOutputs::getNoOutput() const
          {
            return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_getNoOutput_c5e93900]));
          }

          PositiveIntOutputs PositiveIntOutputs::getSingleton()
          {
            jclass cls = env->getClass(initializeClass);
            return PositiveIntOutputs(env->callStaticObjectMethod(cls, mids$[mid_getSingleton_62a4b337]));
          }

          ::java::lang::String PositiveIntOutputs::outputToString(const ::java::lang::Long & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_d1a33160], a0.this$));
          }

          jlong PositiveIntOutputs::ramBytesUsed(const ::java::lang::Long & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_da55802d], a0.this$);
          }

          ::java::lang::Long PositiveIntOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_read_5eca7461], a0.this$));
          }

          ::java::lang::Long PositiveIntOutputs::subtract(const ::java::lang::Long & a0, const ::java::lang::Long & a1) const
          {
            return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_subtract_9f6e77f0], a0.this$, a1.this$));
          }

          ::java::lang::String PositiveIntOutputs::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          void PositiveIntOutputs::write(const ::java::lang::Long & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_6466b4a8], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_PositiveIntOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositiveIntOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositiveIntOutputs_of_(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_add(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_common(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_getNoOutput(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_getSingleton(PyTypeObject *type);
          static PyObject *t_PositiveIntOutputs_outputToString(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_ramBytesUsed(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_read(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_subtract(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_toString(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_write(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_get__noOutput(t_PositiveIntOutputs *self, void *data);
          static PyObject *t_PositiveIntOutputs_get__singleton(t_PositiveIntOutputs *self, void *data);
          static PyObject *t_PositiveIntOutputs_get__parameters_(t_PositiveIntOutputs *self, void *data);
          static PyGetSetDef t_PositiveIntOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_PositiveIntOutputs, noOutput),
            DECLARE_GET_FIELD(t_PositiveIntOutputs, singleton),
            DECLARE_GET_FIELD(t_PositiveIntOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PositiveIntOutputs__methods_[] = {
            DECLARE_METHOD(t_PositiveIntOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositiveIntOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositiveIntOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, getSingleton, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_PositiveIntOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, toString, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositiveIntOutputs, t_PositiveIntOutputs, ::org::apache::lucene::util::fst::Outputs, PositiveIntOutputs, abstract_init, 0, 0, t_PositiveIntOutputs__fields_, 0, 0);
          PyObject *t_PositiveIntOutputs::wrap_Object(const PositiveIntOutputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PositiveIntOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PositiveIntOutputs *self = (t_PositiveIntOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_PositiveIntOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PositiveIntOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PositiveIntOutputs *self = (t_PositiveIntOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_PositiveIntOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(PositiveIntOutputs), module, "PositiveIntOutputs", 0);
          }

          void t_PositiveIntOutputs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositiveIntOutputs).tp_dict, "class_", make_descriptor(PositiveIntOutputs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositiveIntOutputs).tp_dict, "wrapfn_", make_descriptor(t_PositiveIntOutputs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositiveIntOutputs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositiveIntOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositiveIntOutputs::initializeClass, 1)))
              return NULL;
            return t_PositiveIntOutputs::wrap_Object(PositiveIntOutputs(((t_PositiveIntOutputs *) arg)->object.this$));
          }
          static PyObject *t_PositiveIntOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositiveIntOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PositiveIntOutputs_of_(t_PositiveIntOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_PositiveIntOutputs_add(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            ::java::lang::Long a1((jobject) NULL);
            ::java::lang::Long result((jobject) NULL);

            if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::java::lang::t_Long::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_common(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            ::java::lang::Long a1((jobject) NULL);
            ::java::lang::Long result((jobject) NULL);

            if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::java::lang::t_Long::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_getNoOutput(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::java::lang::t_Long::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_getSingleton(PyTypeObject *type)
          {
            PositiveIntOutputs result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::PositiveIntOutputs::getSingleton());
            return t_PositiveIntOutputs::wrap_Object(result);
          }

          static PyObject *t_PositiveIntOutputs_outputToString(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Long), &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_ramBytesUsed(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Long), &a0))
            {
              OBJ_CALL(result = self->object.ramBytesUsed(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_read(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::java::lang::Long result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::java::lang::t_Long::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_subtract(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            ::java::lang::Long a1((jobject) NULL);
            ::java::lang::Long result((jobject) NULL);

            if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::java::lang::t_Long::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_toString(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_write(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "Ok", &::java::lang::PY_TYPE(Long), ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_PositiveIntOutputs_get__parameters_(t_PositiveIntOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_PositiveIntOutputs_get__noOutput(t_PositiveIntOutputs *self, void *data)
          {
            ::java::lang::Long value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::java::lang::t_Long::wrap_Object(value);
          }

          static PyObject *t_PositiveIntOutputs_get__singleton(t_PositiveIntOutputs *self, void *data)
          {
            PositiveIntOutputs value((jobject) NULL);
            OBJ_CALL(value = self->object.getSingleton());
            return t_PositiveIntOutputs::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PrefixQuery.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PrefixQuery::class$ = NULL;
        jmethodID *PrefixQuery::mids$ = NULL;
        bool PrefixQuery::live$ = false;

        jclass PrefixQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PrefixQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getPrefix_0f71f314] = env->getMethodID(cls, "getPrefix", "()Lorg/apache/lucene/index/Term;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PrefixQuery::PrefixQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

        jboolean PrefixQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::index::Term PrefixQuery::getPrefix() const
        {
          return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getPrefix_0f71f314]));
        }

        jint PrefixQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String PrefixQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PrefixQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrefixQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PrefixQuery_init_(t_PrefixQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PrefixQuery_equals(t_PrefixQuery *self, PyObject *args);
        static PyObject *t_PrefixQuery_getPrefix(t_PrefixQuery *self);
        static PyObject *t_PrefixQuery_hashCode(t_PrefixQuery *self, PyObject *args);
        static PyObject *t_PrefixQuery_toString(t_PrefixQuery *self, PyObject *args);
        static PyObject *t_PrefixQuery_get__prefix(t_PrefixQuery *self, void *data);
        static PyGetSetDef t_PrefixQuery__fields_[] = {
          DECLARE_GET_FIELD(t_PrefixQuery, prefix),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PrefixQuery__methods_[] = {
          DECLARE_METHOD(t_PrefixQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_PrefixQuery, getPrefix, METH_NOARGS),
          DECLARE_METHOD(t_PrefixQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_PrefixQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PrefixQuery, t_PrefixQuery, ::org::apache::lucene::search::MultiTermQuery, PrefixQuery, t_PrefixQuery_init_, 0, 0, t_PrefixQuery__fields_, 0, 0);

        void t_PrefixQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(PrefixQuery), module, "PrefixQuery", 0);
        }

        void t_PrefixQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PrefixQuery).tp_dict, "class_", make_descriptor(PrefixQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PrefixQuery).tp_dict, "wrapfn_", make_descriptor(t_PrefixQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PrefixQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PrefixQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PrefixQuery::initializeClass, 1)))
            return NULL;
          return t_PrefixQuery::wrap_Object(PrefixQuery(((t_PrefixQuery *) arg)->object.this$));
        }
        static PyObject *t_PrefixQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PrefixQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PrefixQuery_init_(t_PrefixQuery *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          PrefixQuery object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            INT_CALL(object = PrefixQuery(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PrefixQuery_equals(t_PrefixQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PrefixQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PrefixQuery_getPrefix(t_PrefixQuery *self)
        {
          ::org::apache::lucene::index::Term result((jobject) NULL);
          OBJ_CALL(result = self->object.getPrefix());
          return ::org::apache::lucene::index::t_Term::wrap_Object(result);
        }

        static PyObject *t_PrefixQuery_hashCode(t_PrefixQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(PrefixQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_PrefixQuery_toString(t_PrefixQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(PrefixQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_PrefixQuery_get__prefix(t_PrefixQuery *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object.getPrefix());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Mutable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Mutable::class$ = NULL;
          jmethodID *PackedInts$Mutable::mids$ = NULL;
          bool PackedInts$Mutable::live$ = false;

          jclass PackedInts$Mutable::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Mutable");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_fill_534bf2ff] = env->getMethodID(cls, "fill", "(IIJ)V");
              mids$[mid_getBitsPerValue_54c6a179] = env->getMethodID(cls, "getBitsPerValue", "()I");
              mids$[mid_save_27875f57] = env->getMethodID(cls, "save", "(Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_set_03b232b5] = env->getMethodID(cls, "set", "(IJ)V");
              mids$[mid_set_d80d4c9e] = env->getMethodID(cls, "set", "(I[JII)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts$Mutable::PackedInts$Mutable() : ::org::apache::lucene::util::packed::PackedInts$Reader(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PackedInts$Mutable::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void PackedInts$Mutable::fill(jint a0, jint a1, jlong a2) const
          {
            env->callVoidMethod(this$, mids$[mid_fill_534bf2ff], a0, a1, a2);
          }

          jint PackedInts$Mutable::getBitsPerValue() const
          {
            return env->callIntMethod(this$, mids$[mid_getBitsPerValue_54c6a179]);
          }

          void PackedInts$Mutable::save(const ::org::apache::lucene::store::DataOutput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_save_27875f57], a0.this$);
          }

          void PackedInts$Mutable::set(jint a0, jlong a1) const
          {
            env->callVoidMethod(this$, mids$[mid_set_03b232b5], a0, a1);
          }

          jint PackedInts$Mutable::set(jint a0, const JArray< jlong > & a1, jint a2, jint a3) const
          {
            return env->callIntMethod(this$, mids$[mid_set_d80d4c9e], a0, a1.this$, a2, a3);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Mutable_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Mutable_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedInts$Mutable_init_(t_PackedInts$Mutable *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedInts$Mutable_clear(t_PackedInts$Mutable *self);
          static PyObject *t_PackedInts$Mutable_fill(t_PackedInts$Mutable *self, PyObject *args);
          static PyObject *t_PackedInts$Mutable_getBitsPerValue(t_PackedInts$Mutable *self);
          static PyObject *t_PackedInts$Mutable_save(t_PackedInts$Mutable *self, PyObject *arg);
          static PyObject *t_PackedInts$Mutable_set(t_PackedInts$Mutable *self, PyObject *args);
          static PyObject *t_PackedInts$Mutable_get__bitsPerValue(t_PackedInts$Mutable *self, void *data);
          static PyGetSetDef t_PackedInts$Mutable__fields_[] = {
            DECLARE_GET_FIELD(t_PackedInts$Mutable, bitsPerValue),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PackedInts$Mutable__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Mutable, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Mutable, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Mutable, clear, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Mutable, fill, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Mutable, getBitsPerValue, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Mutable, save, METH_O),
            DECLARE_METHOD(t_PackedInts$Mutable, set, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$Mutable, t_PackedInts$Mutable, ::org::apache::lucene::util::packed::PackedInts$Reader, PackedInts$Mutable, t_PackedInts$Mutable_init_, 0, 0, t_PackedInts$Mutable__fields_, 0, 0);

          void t_PackedInts$Mutable::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Mutable), module, "PackedInts$Mutable", 0);
          }

          void t_PackedInts$Mutable::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$Mutable).tp_dict, "class_", make_descriptor(PackedInts$Mutable::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$Mutable).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$Mutable::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$Mutable).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$Mutable_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Mutable::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Mutable::wrap_Object(PackedInts$Mutable(((t_PackedInts$Mutable *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Mutable_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Mutable::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedInts$Mutable_init_(t_PackedInts$Mutable *self, PyObject *args, PyObject *kwds)
          {
            PackedInts$Mutable object((jobject) NULL);

            INT_CALL(object = PackedInts$Mutable());
            self->object = object;

            return 0;
          }

          static PyObject *t_PackedInts$Mutable_clear(t_PackedInts$Mutable *self)
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          static PyObject *t_PackedInts$Mutable_fill(t_PackedInts$Mutable *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jlong a2;

            if (!parseArgs(args, "IIJ", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.fill(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "fill", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Mutable_getBitsPerValue(t_PackedInts$Mutable *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBitsPerValue());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Mutable_save(t_PackedInts$Mutable *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.save(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "save", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Mutable_set(t_PackedInts$Mutable *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jint a0;
                jlong a1;

                if (!parseArgs(args, "IJ", &a0, &a1))
                {
                  OBJ_CALL(self->object.set(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 4:
              {
                jint a0;
                JArray< jlong > a1((jobject) NULL);
                jint a2;
                jint a3;
                jint result;

                if (!parseArgs(args, "I[JII", &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.set(a0, a1, a2, a3));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "set", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Mutable_get__bitsPerValue(t_PackedInts$Mutable *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBitsPerValue());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/WhitespaceTokenizer.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *WhitespaceTokenizer::class$ = NULL;
          jmethodID *WhitespaceTokenizer::mids$ = NULL;
          bool WhitespaceTokenizer::live$ = false;

          jclass WhitespaceTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/WhitespaceTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WhitespaceTokenizer::WhitespaceTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          WhitespaceTokenizer::WhitespaceTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_WhitespaceTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WhitespaceTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WhitespaceTokenizer_init_(t_WhitespaceTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_WhitespaceTokenizer__methods_[] = {
            DECLARE_METHOD(t_WhitespaceTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WhitespaceTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WhitespaceTokenizer, t_WhitespaceTokenizer, ::org::apache::lucene::analysis::util::CharTokenizer, WhitespaceTokenizer, t_WhitespaceTokenizer_init_, 0, 0, 0, 0, 0);

          void t_WhitespaceTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(WhitespaceTokenizer), module, "WhitespaceTokenizer", 0);
          }

          void t_WhitespaceTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WhitespaceTokenizer).tp_dict, "class_", make_descriptor(WhitespaceTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WhitespaceTokenizer).tp_dict, "wrapfn_", make_descriptor(t_WhitespaceTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WhitespaceTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WhitespaceTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WhitespaceTokenizer::initializeClass, 1)))
              return NULL;
            return t_WhitespaceTokenizer::wrap_Object(WhitespaceTokenizer(((t_WhitespaceTokenizer *) arg)->object.this$));
          }
          static PyObject *t_WhitespaceTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WhitespaceTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WhitespaceTokenizer_init_(t_WhitespaceTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                WhitespaceTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = WhitespaceTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                WhitespaceTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = WhitespaceTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternCaptureGroupFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/pattern/PatternCaptureGroupTokenFilter.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternCaptureGroupFilterFactory::class$ = NULL;
          jmethodID *PatternCaptureGroupFilterFactory::mids$ = NULL;
          bool PatternCaptureGroupFilterFactory::live$ = false;

          jclass PatternCaptureGroupFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternCaptureGroupFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_c840bb3a] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/pattern/PatternCaptureGroupTokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternCaptureGroupFilterFactory::PatternCaptureGroupFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::pattern::PatternCaptureGroupTokenFilter PatternCaptureGroupFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::pattern::PatternCaptureGroupTokenFilter(env->callObjectMethod(this$, mids$[mid_create_c840bb3a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternCaptureGroupFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternCaptureGroupFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternCaptureGroupFilterFactory_init_(t_PatternCaptureGroupFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternCaptureGroupFilterFactory_create(t_PatternCaptureGroupFilterFactory *self, PyObject *args);

          static PyMethodDef t_PatternCaptureGroupFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PatternCaptureGroupFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternCaptureGroupFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternCaptureGroupFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternCaptureGroupFilterFactory, t_PatternCaptureGroupFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PatternCaptureGroupFilterFactory, t_PatternCaptureGroupFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PatternCaptureGroupFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternCaptureGroupFilterFactory), module, "PatternCaptureGroupFilterFactory", 0);
          }

          void t_PatternCaptureGroupFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternCaptureGroupFilterFactory).tp_dict, "class_", make_descriptor(PatternCaptureGroupFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternCaptureGroupFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PatternCaptureGroupFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternCaptureGroupFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternCaptureGroupFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternCaptureGroupFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PatternCaptureGroupFilterFactory::wrap_Object(PatternCaptureGroupFilterFactory(((t_PatternCaptureGroupFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PatternCaptureGroupFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternCaptureGroupFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternCaptureGroupFilterFactory_init_(t_PatternCaptureGroupFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PatternCaptureGroupFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PatternCaptureGroupFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternCaptureGroupFilterFactory_create(t_PatternCaptureGroupFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::pattern::PatternCaptureGroupTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::pattern::t_PatternCaptureGroupTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PatternCaptureGroupFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/BlockGroupingCollector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/grouping/TopGroups.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *BlockGroupingCollector::class$ = NULL;
          jmethodID *BlockGroupingCollector::mids$ = NULL;
          bool BlockGroupingCollector::live$ = false;

          jclass BlockGroupingCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/BlockGroupingCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_418a7963] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Sort;IZLorg/apache/lucene/search/Filter;)V");
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
              mids$[mid_getTopGroups_79cd6253] = env->getMethodID(cls, "getTopGroups", "(Lorg/apache/lucene/search/Sort;IIIZ)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
              mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockGroupingCollector::BlockGroupingCollector(const ::org::apache::lucene::search::Sort & a0, jint a1, jboolean a2, const ::org::apache::lucene::search::Filter & a3) : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_418a7963, a0.this$, a1, a2, a3.this$)) {}

          jboolean BlockGroupingCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          void BlockGroupingCollector::collect(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
          }

          ::org::apache::lucene::search::grouping::TopGroups BlockGroupingCollector::getTopGroups(const ::org::apache::lucene::search::Sort & a0, jint a1, jint a2, jint a3, jboolean a4) const
          {
            return ::org::apache::lucene::search::grouping::TopGroups(env->callObjectMethod(this$, mids$[mid_getTopGroups_79cd6253], a0.this$, a1, a2, a3, a4));
          }

          void BlockGroupingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
          }

          void BlockGroupingCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_BlockGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockGroupingCollector_init_(t_BlockGroupingCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockGroupingCollector_acceptsDocsOutOfOrder(t_BlockGroupingCollector *self, PyObject *args);
          static PyObject *t_BlockGroupingCollector_collect(t_BlockGroupingCollector *self, PyObject *args);
          static PyObject *t_BlockGroupingCollector_getTopGroups(t_BlockGroupingCollector *self, PyObject *args);
          static PyObject *t_BlockGroupingCollector_setNextReader(t_BlockGroupingCollector *self, PyObject *args);
          static PyObject *t_BlockGroupingCollector_setScorer(t_BlockGroupingCollector *self, PyObject *args);
          static int t_BlockGroupingCollector_set__nextReader(t_BlockGroupingCollector *self, PyObject *arg, void *data);
          static int t_BlockGroupingCollector_set__scorer(t_BlockGroupingCollector *self, PyObject *arg, void *data);
          static PyGetSetDef t_BlockGroupingCollector__fields_[] = {
            DECLARE_SET_FIELD(t_BlockGroupingCollector, nextReader),
            DECLARE_SET_FIELD(t_BlockGroupingCollector, scorer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BlockGroupingCollector__methods_[] = {
            DECLARE_METHOD(t_BlockGroupingCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockGroupingCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockGroupingCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_BlockGroupingCollector, collect, METH_VARARGS),
            DECLARE_METHOD(t_BlockGroupingCollector, getTopGroups, METH_VARARGS),
            DECLARE_METHOD(t_BlockGroupingCollector, setNextReader, METH_VARARGS),
            DECLARE_METHOD(t_BlockGroupingCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BlockGroupingCollector, t_BlockGroupingCollector, ::org::apache::lucene::search::Collector, BlockGroupingCollector, t_BlockGroupingCollector_init_, 0, 0, t_BlockGroupingCollector__fields_, 0, 0);

          void t_BlockGroupingCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockGroupingCollector), module, "BlockGroupingCollector", 0);
          }

          void t_BlockGroupingCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BlockGroupingCollector).tp_dict, "class_", make_descriptor(BlockGroupingCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BlockGroupingCollector).tp_dict, "wrapfn_", make_descriptor(t_BlockGroupingCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BlockGroupingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockGroupingCollector::initializeClass, 1)))
              return NULL;
            return t_BlockGroupingCollector::wrap_Object(BlockGroupingCollector(((t_BlockGroupingCollector *) arg)->object.this$));
          }
          static PyObject *t_BlockGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockGroupingCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockGroupingCollector_init_(t_BlockGroupingCollector *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Sort a0((jobject) NULL);
            jint a1;
            jboolean a2;
            ::org::apache::lucene::search::Filter a3((jobject) NULL);
            BlockGroupingCollector object((jobject) NULL);

            if (!parseArgs(args, "kIZk", ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = BlockGroupingCollector(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BlockGroupingCollector_acceptsDocsOutOfOrder(t_BlockGroupingCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(BlockGroupingCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_BlockGroupingCollector_collect(t_BlockGroupingCollector *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BlockGroupingCollector), (PyObject *) self, "collect", args, 2);
          }

          static PyObject *t_BlockGroupingCollector_getTopGroups(t_BlockGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Sort a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            jboolean a4;
            ::org::apache::lucene::search::grouping::TopGroups result((jobject) NULL);

            if (!parseArgs(args, "kIIIZ", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.getTopGroups(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::search::grouping::t_TopGroups::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getTopGroups", args);
            return NULL;
          }

          static PyObject *t_BlockGroupingCollector_setNextReader(t_BlockGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setNextReader(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BlockGroupingCollector), (PyObject *) self, "setNextReader", args, 2);
          }

          static PyObject *t_BlockGroupingCollector_setScorer(t_BlockGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorer a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BlockGroupingCollector), (PyObject *) self, "setScorer", args, 2);
          }

          static int t_BlockGroupingCollector_set__nextReader(t_BlockGroupingCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_BlockGroupingCollector_set__scorer(t_BlockGroupingCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/it/ItalianLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {

          ::java::lang::Class *ItalianLightStemFilter::class$ = NULL;
          jmethodID *ItalianLightStemFilter::mids$ = NULL;
          bool ItalianLightStemFilter::live$ = false;

          jclass ItalianLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/it/ItalianLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ItalianLightStemFilter::ItalianLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ItalianLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {
          static PyObject *t_ItalianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ItalianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ItalianLightStemFilter_init_(t_ItalianLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ItalianLightStemFilter_incrementToken(t_ItalianLightStemFilter *self, PyObject *args);

          static PyMethodDef t_ItalianLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_ItalianLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ItalianLightStemFilter, t_ItalianLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, ItalianLightStemFilter, t_ItalianLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_ItalianLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ItalianLightStemFilter), module, "ItalianLightStemFilter", 0);
          }

          void t_ItalianLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ItalianLightStemFilter).tp_dict, "class_", make_descriptor(ItalianLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ItalianLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_ItalianLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ItalianLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ItalianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ItalianLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_ItalianLightStemFilter::wrap_Object(ItalianLightStemFilter(((t_ItalianLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_ItalianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ItalianLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ItalianLightStemFilter_init_(t_ItalianLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ItalianLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ItalianLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ItalianLightStemFilter_incrementToken(t_ItalianLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ItalianLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexReader$ReaderClosedListener.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexReader$ReaderClosedListener::class$ = NULL;
        jmethodID *IndexReader$ReaderClosedListener::mids$ = NULL;
        bool IndexReader$ReaderClosedListener::live$ = false;

        jclass IndexReader$ReaderClosedListener::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexReader$ReaderClosedListener");

            mids$ = new jmethodID[max_mid];
            mids$[mid_onClose_7d7eaea9] = env->getMethodID(cls, "onClose", "(Lorg/apache/lucene/index/IndexReader;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IndexReader$ReaderClosedListener::onClose(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onClose_7d7eaea9], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexReader$ReaderClosedListener_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReader$ReaderClosedListener_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReader$ReaderClosedListener_onClose(t_IndexReader$ReaderClosedListener *self, PyObject *arg);

        static PyMethodDef t_IndexReader$ReaderClosedListener__methods_[] = {
          DECLARE_METHOD(t_IndexReader$ReaderClosedListener, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReader$ReaderClosedListener, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReader$ReaderClosedListener, onClose, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexReader$ReaderClosedListener, t_IndexReader$ReaderClosedListener, ::java::lang::Object, IndexReader$ReaderClosedListener, abstract_init, 0, 0, 0, 0, 0);

        void t_IndexReader$ReaderClosedListener::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexReader$ReaderClosedListener), module, "IndexReader$ReaderClosedListener", 0);
        }

        void t_IndexReader$ReaderClosedListener::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexReader$ReaderClosedListener).tp_dict, "class_", make_descriptor(IndexReader$ReaderClosedListener::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexReader$ReaderClosedListener).tp_dict, "wrapfn_", make_descriptor(t_IndexReader$ReaderClosedListener::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexReader$ReaderClosedListener).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexReader$ReaderClosedListener_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexReader$ReaderClosedListener::initializeClass, 1)))
            return NULL;
          return t_IndexReader$ReaderClosedListener::wrap_Object(IndexReader$ReaderClosedListener(((t_IndexReader$ReaderClosedListener *) arg)->object.this$));
        }
        static PyObject *t_IndexReader$ReaderClosedListener_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexReader$ReaderClosedListener::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexReader$ReaderClosedListener_onClose(t_IndexReader$ReaderClosedListener *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.onClose(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "onClose", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocValues$OrdinalMap.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/LongValues.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocValues$OrdinalMap::class$ = NULL;
        jmethodID *MultiDocValues$OrdinalMap::mids$ = NULL;
        bool MultiDocValues$OrdinalMap::live$ = false;

        jclass MultiDocValues$OrdinalMap::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocValues$OrdinalMap");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f12e599e] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;[Lorg/apache/lucene/index/TermsEnum;)V");
            mids$[mid_init$_222cf653] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;[Lorg/apache/lucene/index/TermsEnum;F)V");
            mids$[mid_getFirstSegmentNumber_0ee6df30] = env->getMethodID(cls, "getFirstSegmentNumber", "(J)I");
            mids$[mid_getFirstSegmentOrd_0ee6df33] = env->getMethodID(cls, "getFirstSegmentOrd", "(J)J");
            mids$[mid_getGlobalOrds_f3def9cd] = env->getMethodID(cls, "getGlobalOrds", "(I)Lorg/apache/lucene/util/LongValues;");
            mids$[mid_getValueCount_54c6a17a] = env->getMethodID(cls, "getValueCount", "()J");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiDocValues$OrdinalMap::MultiDocValues$OrdinalMap(const ::java::lang::Object & a0, const JArray< ::org::apache::lucene::index::TermsEnum > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f12e599e, a0.this$, a1.this$)) {}

        MultiDocValues$OrdinalMap::MultiDocValues$OrdinalMap(const ::java::lang::Object & a0, const JArray< ::org::apache::lucene::index::TermsEnum > & a1, jfloat a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_222cf653, a0.this$, a1.this$, a2)) {}

        jint MultiDocValues$OrdinalMap::getFirstSegmentNumber(jlong a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getFirstSegmentNumber_0ee6df30], a0);
        }

        jlong MultiDocValues$OrdinalMap::getFirstSegmentOrd(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getFirstSegmentOrd_0ee6df33], a0);
        }

        ::org::apache::lucene::util::LongValues MultiDocValues$OrdinalMap::getGlobalOrds(jint a0) const
        {
          return ::org::apache::lucene::util::LongValues(env->callObjectMethod(this$, mids$[mid_getGlobalOrds_f3def9cd], a0));
        }

        jlong MultiDocValues$OrdinalMap::getValueCount() const
        {
          return env->callLongMethod(this$, mids$[mid_getValueCount_54c6a17a]);
        }

        jlong MultiDocValues$OrdinalMap::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocValues$OrdinalMap_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues$OrdinalMap_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiDocValues$OrdinalMap_init_(t_MultiDocValues$OrdinalMap *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiDocValues$OrdinalMap_getFirstSegmentNumber(t_MultiDocValues$OrdinalMap *self, PyObject *arg);
        static PyObject *t_MultiDocValues$OrdinalMap_getFirstSegmentOrd(t_MultiDocValues$OrdinalMap *self, PyObject *arg);
        static PyObject *t_MultiDocValues$OrdinalMap_getGlobalOrds(t_MultiDocValues$OrdinalMap *self, PyObject *arg);
        static PyObject *t_MultiDocValues$OrdinalMap_getValueCount(t_MultiDocValues$OrdinalMap *self);
        static PyObject *t_MultiDocValues$OrdinalMap_ramBytesUsed(t_MultiDocValues$OrdinalMap *self);
        static PyObject *t_MultiDocValues$OrdinalMap_get__valueCount(t_MultiDocValues$OrdinalMap *self, void *data);
        static PyGetSetDef t_MultiDocValues$OrdinalMap__fields_[] = {
          DECLARE_GET_FIELD(t_MultiDocValues$OrdinalMap, valueCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocValues$OrdinalMap__methods_[] = {
          DECLARE_METHOD(t_MultiDocValues$OrdinalMap, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues$OrdinalMap, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues$OrdinalMap, getFirstSegmentNumber, METH_O),
          DECLARE_METHOD(t_MultiDocValues$OrdinalMap, getFirstSegmentOrd, METH_O),
          DECLARE_METHOD(t_MultiDocValues$OrdinalMap, getGlobalOrds, METH_O),
          DECLARE_METHOD(t_MultiDocValues$OrdinalMap, getValueCount, METH_NOARGS),
          DECLARE_METHOD(t_MultiDocValues$OrdinalMap, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocValues$OrdinalMap, t_MultiDocValues$OrdinalMap, ::java::lang::Object, MultiDocValues$OrdinalMap, t_MultiDocValues$OrdinalMap_init_, 0, 0, t_MultiDocValues$OrdinalMap__fields_, 0, 0);

        void t_MultiDocValues$OrdinalMap::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocValues$OrdinalMap), module, "MultiDocValues$OrdinalMap", 0);
        }

        void t_MultiDocValues$OrdinalMap::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocValues$OrdinalMap).tp_dict, "class_", make_descriptor(MultiDocValues$OrdinalMap::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocValues$OrdinalMap).tp_dict, "wrapfn_", make_descriptor(t_MultiDocValues$OrdinalMap::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocValues$OrdinalMap).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocValues$OrdinalMap_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocValues$OrdinalMap::initializeClass, 1)))
            return NULL;
          return t_MultiDocValues$OrdinalMap::wrap_Object(MultiDocValues$OrdinalMap(((t_MultiDocValues$OrdinalMap *) arg)->object.this$));
        }
        static PyObject *t_MultiDocValues$OrdinalMap_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocValues$OrdinalMap::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiDocValues$OrdinalMap_init_(t_MultiDocValues$OrdinalMap *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::Object a0((jobject) NULL);
              JArray< ::org::apache::lucene::index::TermsEnum > a1((jobject) NULL);
              MultiDocValues$OrdinalMap object((jobject) NULL);

              if (!parseArgs(args, "o[k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0, &a1))
              {
                INT_CALL(object = MultiDocValues$OrdinalMap(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::Object a0((jobject) NULL);
              JArray< ::org::apache::lucene::index::TermsEnum > a1((jobject) NULL);
              jfloat a2;
              MultiDocValues$OrdinalMap object((jobject) NULL);

              if (!parseArgs(args, "o[kF", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = MultiDocValues$OrdinalMap(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiDocValues$OrdinalMap_getFirstSegmentNumber(t_MultiDocValues$OrdinalMap *self, PyObject *arg)
        {
          jlong a0;
          jint result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.getFirstSegmentNumber(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getFirstSegmentNumber", arg);
          return NULL;
        }

        static PyObject *t_MultiDocValues$OrdinalMap_getFirstSegmentOrd(t_MultiDocValues$OrdinalMap *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.getFirstSegmentOrd(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getFirstSegmentOrd", arg);
          return NULL;
        }

        static PyObject *t_MultiDocValues$OrdinalMap_getGlobalOrds(t_MultiDocValues$OrdinalMap *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::util::LongValues result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getGlobalOrds(a0));
            return ::org::apache::lucene::util::t_LongValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getGlobalOrds", arg);
          return NULL;
        }

        static PyObject *t_MultiDocValues$OrdinalMap_getValueCount(t_MultiDocValues$OrdinalMap *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getValueCount());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_MultiDocValues$OrdinalMap_ramBytesUsed(t_MultiDocValues$OrdinalMap *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_MultiDocValues$OrdinalMap_get__valueCount(t_MultiDocValues$OrdinalMap *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getValueCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/SpanGradientFormatter.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *SpanGradientFormatter::class$ = NULL;
          jmethodID *SpanGradientFormatter::mids$ = NULL;
          bool SpanGradientFormatter::live$ = false;

          jclass SpanGradientFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/SpanGradientFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ecfb0f33] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_highlightTerm_8838cc58] = env->getMethodID(cls, "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanGradientFormatter::SpanGradientFormatter(jfloat a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::java::lang::String & a3, const ::java::lang::String & a4) : ::org::apache::lucene::search::highlight::GradientFormatter(env->newObject(initializeClass, &mids$, mid_init$_ecfb0f33, a0, a1.this$, a2.this$, a3.this$, a4.this$)) {}

          ::java::lang::String SpanGradientFormatter::highlightTerm(const ::java::lang::String & a0, const ::org::apache::lucene::search::highlight::TokenGroup & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_highlightTerm_8838cc58], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_SpanGradientFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanGradientFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanGradientFormatter_init_(t_SpanGradientFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanGradientFormatter_highlightTerm(t_SpanGradientFormatter *self, PyObject *args);

          static PyMethodDef t_SpanGradientFormatter__methods_[] = {
            DECLARE_METHOD(t_SpanGradientFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanGradientFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanGradientFormatter, highlightTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanGradientFormatter, t_SpanGradientFormatter, ::org::apache::lucene::search::highlight::GradientFormatter, SpanGradientFormatter, t_SpanGradientFormatter_init_, 0, 0, 0, 0, 0);

          void t_SpanGradientFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanGradientFormatter), module, "SpanGradientFormatter", 0);
          }

          void t_SpanGradientFormatter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanGradientFormatter).tp_dict, "class_", make_descriptor(SpanGradientFormatter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanGradientFormatter).tp_dict, "wrapfn_", make_descriptor(t_SpanGradientFormatter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanGradientFormatter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanGradientFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanGradientFormatter::initializeClass, 1)))
              return NULL;
            return t_SpanGradientFormatter::wrap_Object(SpanGradientFormatter(((t_SpanGradientFormatter *) arg)->object.this$));
          }
          static PyObject *t_SpanGradientFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanGradientFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanGradientFormatter_init_(t_SpanGradientFormatter *self, PyObject *args, PyObject *kwds)
          {
            jfloat a0;
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::java::lang::String a3((jobject) NULL);
            ::java::lang::String a4((jobject) NULL);
            SpanGradientFormatter object((jobject) NULL);

            if (!parseArgs(args, "Fssss", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = SpanGradientFormatter(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanGradientFormatter_highlightTerm(t_SpanGradientFormatter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::highlight::TokenGroup a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::search::highlight::TokenGroup::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.highlightTerm(a0, a1));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanGradientFormatter), (PyObject *) self, "highlightTerm", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ParallelCompositeReader.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/CompositeReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ParallelCompositeReader::class$ = NULL;
        jmethodID *ParallelCompositeReader::mids$ = NULL;
        bool ParallelCompositeReader::live$ = false;

        jclass ParallelCompositeReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ParallelCompositeReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0cab4ef6] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/CompositeReader;)V");
            mids$[mid_init$_24b17b53] = env->getMethodID(cls, "<init>", "(Z[Lorg/apache/lucene/index/CompositeReader;)V");
            mids$[mid_init$_9dc0978b] = env->getMethodID(cls, "<init>", "(Z[Lorg/apache/lucene/index/CompositeReader;[Lorg/apache/lucene/index/CompositeReader;)V");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ParallelCompositeReader::ParallelCompositeReader(const JArray< ::org::apache::lucene::index::CompositeReader > & a0) : ::org::apache::lucene::index::BaseCompositeReader(env->newObject(initializeClass, &mids$, mid_init$_0cab4ef6, a0.this$)) {}

        ParallelCompositeReader::ParallelCompositeReader(jboolean a0, const JArray< ::org::apache::lucene::index::CompositeReader > & a1) : ::org::apache::lucene::index::BaseCompositeReader(env->newObject(initializeClass, &mids$, mid_init$_24b17b53, a0, a1.this$)) {}

        ParallelCompositeReader::ParallelCompositeReader(jboolean a0, const JArray< ::org::apache::lucene::index::CompositeReader > & a1, const JArray< ::org::apache::lucene::index::CompositeReader > & a2) : ::org::apache::lucene::index::BaseCompositeReader(env->newObject(initializeClass, &mids$, mid_init$_9dc0978b, a0, a1.this$, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ParallelCompositeReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ParallelCompositeReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ParallelCompositeReader_of_(t_ParallelCompositeReader *self, PyObject *args);
        static int t_ParallelCompositeReader_init_(t_ParallelCompositeReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ParallelCompositeReader_get__parameters_(t_ParallelCompositeReader *self, void *data);
        static PyGetSetDef t_ParallelCompositeReader__fields_[] = {
          DECLARE_GET_FIELD(t_ParallelCompositeReader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ParallelCompositeReader__methods_[] = {
          DECLARE_METHOD(t_ParallelCompositeReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ParallelCompositeReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ParallelCompositeReader, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ParallelCompositeReader, t_ParallelCompositeReader, ::org::apache::lucene::index::BaseCompositeReader, ParallelCompositeReader, t_ParallelCompositeReader_init_, 0, 0, t_ParallelCompositeReader__fields_, 0, 0);
        PyObject *t_ParallelCompositeReader::wrap_Object(const ParallelCompositeReader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ParallelCompositeReader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ParallelCompositeReader *self = (t_ParallelCompositeReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ParallelCompositeReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ParallelCompositeReader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ParallelCompositeReader *self = (t_ParallelCompositeReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ParallelCompositeReader::install(PyObject *module)
        {
          installType(&PY_TYPE(ParallelCompositeReader), module, "ParallelCompositeReader", 0);
        }

        void t_ParallelCompositeReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ParallelCompositeReader).tp_dict, "class_", make_descriptor(ParallelCompositeReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ParallelCompositeReader).tp_dict, "wrapfn_", make_descriptor(t_ParallelCompositeReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ParallelCompositeReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ParallelCompositeReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ParallelCompositeReader::initializeClass, 1)))
            return NULL;
          return t_ParallelCompositeReader::wrap_Object(ParallelCompositeReader(((t_ParallelCompositeReader *) arg)->object.this$));
        }
        static PyObject *t_ParallelCompositeReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ParallelCompositeReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ParallelCompositeReader_of_(t_ParallelCompositeReader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ParallelCompositeReader_init_(t_ParallelCompositeReader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::CompositeReader > a0((jobject) NULL);
              ParallelCompositeReader object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::CompositeReader::initializeClass, &a0))
              {
                INT_CALL(object = ParallelCompositeReader(a0));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(IndexReader);
                break;
              }
            }
            goto err;
           case 2:
            {
              jboolean a0;
              JArray< ::org::apache::lucene::index::CompositeReader > a1((jobject) NULL);
              ParallelCompositeReader object((jobject) NULL);

              if (!parseArgs(args, "Z[k", ::org::apache::lucene::index::CompositeReader::initializeClass, &a0, &a1))
              {
                INT_CALL(object = ParallelCompositeReader(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(IndexReader);
                break;
              }
            }
            goto err;
           case 3:
            {
              jboolean a0;
              JArray< ::org::apache::lucene::index::CompositeReader > a1((jobject) NULL);
              JArray< ::org::apache::lucene::index::CompositeReader > a2((jobject) NULL);
              ParallelCompositeReader object((jobject) NULL);

              if (!parseArgs(args, "Z[k[k", ::org::apache::lucene::index::CompositeReader::initializeClass, ::org::apache::lucene::index::CompositeReader::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = ParallelCompositeReader(a0, a1, a2));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(IndexReader);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_ParallelCompositeReader_get__parameters_(t_ParallelCompositeReader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/IntDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *IntDocValuesField::class$ = NULL;
        jmethodID *IntDocValuesField::mids$ = NULL;
        bool IntDocValuesField::live$ = false;

        jclass IntDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/IntDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
            mids$[mid_setIntValue_39c7bd3c] = env->getMethodID(cls, "setIntValue", "(I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntDocValuesField::IntDocValuesField(const ::java::lang::String & a0, jint a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

        void IntDocValuesField::setIntValue(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setIntValue_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_IntDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntDocValuesField_init_(t_IntDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntDocValuesField_setIntValue(t_IntDocValuesField *self, PyObject *args);
        static int t_IntDocValuesField_set__intValue(t_IntDocValuesField *self, PyObject *arg, void *data);
        static PyGetSetDef t_IntDocValuesField__fields_[] = {
          DECLARE_SET_FIELD(t_IntDocValuesField, intValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IntDocValuesField__methods_[] = {
          DECLARE_METHOD(t_IntDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntDocValuesField, setIntValue, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntDocValuesField, t_IntDocValuesField, ::org::apache::lucene::document::NumericDocValuesField, IntDocValuesField, t_IntDocValuesField_init_, 0, 0, t_IntDocValuesField__fields_, 0, 0);

        void t_IntDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(IntDocValuesField), module, "IntDocValuesField", 0);
        }

        void t_IntDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntDocValuesField).tp_dict, "class_", make_descriptor(IntDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_IntDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntDocValuesField::initializeClass, 1)))
            return NULL;
          return t_IntDocValuesField::wrap_Object(IntDocValuesField(((t_IntDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_IntDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntDocValuesField_init_(t_IntDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          IntDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            INT_CALL(object = IntDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntDocValuesField_setIntValue(t_IntDocValuesField *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setIntValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(IntDocValuesField), (PyObject *) self, "setIntValue", args, 2);
        }

        static int t_IntDocValuesField_set__intValue(t_IntDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setIntValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "intValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/NRTCachingDirectory.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/Lock.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *NRTCachingDirectory::class$ = NULL;
        jmethodID *NRTCachingDirectory::mids$ = NULL;
        bool NRTCachingDirectory::live$ = false;

        jclass NRTCachingDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/NRTCachingDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a6a83a1c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;DD)V");
            mids$[mid_cacheRamBytesUsed_54c6a17a] = env->getMethodID(cls, "cacheRamBytesUsed", "()J");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getDelegate_1f3934bb] = env->getMethodID(cls, "getDelegate", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getLockFactory_e4e9c36d] = env->getMethodID(cls, "getLockFactory", "()Lorg/apache/lucene/store/LockFactory;");
            mids$[mid_getLockID_14c7b5c5] = env->getMethodID(cls, "getLockID", "()Ljava/lang/String;");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_listCachedFiles_2e6d5245] = env->getMethodID(cls, "listCachedFiles", "()[Ljava/lang/String;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_setLockFactory_9892eb8c] = env->getMethodID(cls, "setLockFactory", "(Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_doCacheWrite_501c6f10] = env->getMethodID(cls, "doCacheWrite", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NRTCachingDirectory::NRTCachingDirectory(const ::org::apache::lucene::store::Directory & a0, jdouble a1, jdouble a2) : ::org::apache::lucene::store::Directory(env->newObject(initializeClass, &mids$, mid_init$_a6a83a1c, a0.this$, a1, a2)) {}

        jlong NRTCachingDirectory::cacheRamBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_cacheRamBytesUsed_54c6a17a]);
        }

        void NRTCachingDirectory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        void NRTCachingDirectory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::store::IndexOutput NRTCachingDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void NRTCachingDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        jboolean NRTCachingDirectory::fileExists(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fileExists_5fdc3f44], a0.this$);
        }

        jlong NRTCachingDirectory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_5fdc3f54], a0.this$);
        }

        ::org::apache::lucene::store::Directory NRTCachingDirectory::getDelegate() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDelegate_1f3934bb]));
        }

        ::org::apache::lucene::store::LockFactory NRTCachingDirectory::getLockFactory() const
        {
          return ::org::apache::lucene::store::LockFactory(env->callObjectMethod(this$, mids$[mid_getLockFactory_e4e9c36d]));
        }

        ::java::lang::String NRTCachingDirectory::getLockID() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLockID_14c7b5c5]));
        }

        JArray< ::java::lang::String > NRTCachingDirectory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_2e6d5245]));
        }

        JArray< ::java::lang::String > NRTCachingDirectory::listCachedFiles() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listCachedFiles_2e6d5245]));
        }

        ::org::apache::lucene::store::Lock NRTCachingDirectory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }

        ::org::apache::lucene::store::IndexInput NRTCachingDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }

        void NRTCachingDirectory::setLockFactory(const ::org::apache::lucene::store::LockFactory & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLockFactory_9892eb8c], a0.this$);
        }

        void NRTCachingDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }

        ::java::lang::String NRTCachingDirectory::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_NRTCachingDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NRTCachingDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NRTCachingDirectory_init_(t_NRTCachingDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NRTCachingDirectory_cacheRamBytesUsed(t_NRTCachingDirectory *self);
        static PyObject *t_NRTCachingDirectory_clearLock(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_close(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_createOutput(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_deleteFile(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_fileExists(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_fileLength(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_getDelegate(t_NRTCachingDirectory *self);
        static PyObject *t_NRTCachingDirectory_getLockFactory(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_getLockID(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_listAll(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_listCachedFiles(t_NRTCachingDirectory *self);
        static PyObject *t_NRTCachingDirectory_makeLock(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_openInput(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_setLockFactory(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_sync(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_toString(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_get__delegate(t_NRTCachingDirectory *self, void *data);
        static PyObject *t_NRTCachingDirectory_get__lockFactory(t_NRTCachingDirectory *self, void *data);
        static int t_NRTCachingDirectory_set__lockFactory(t_NRTCachingDirectory *self, PyObject *arg, void *data);
        static PyObject *t_NRTCachingDirectory_get__lockID(t_NRTCachingDirectory *self, void *data);
        static PyGetSetDef t_NRTCachingDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_NRTCachingDirectory, delegate),
          DECLARE_GETSET_FIELD(t_NRTCachingDirectory, lockFactory),
          DECLARE_GET_FIELD(t_NRTCachingDirectory, lockID),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NRTCachingDirectory__methods_[] = {
          DECLARE_METHOD(t_NRTCachingDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NRTCachingDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NRTCachingDirectory, cacheRamBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, close, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, fileExists, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, fileLength, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, getDelegate, METH_NOARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, getLockFactory, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, getLockID, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, listAll, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, listCachedFiles, METH_NOARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, makeLock, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, setLockFactory, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, sync, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NRTCachingDirectory, t_NRTCachingDirectory, ::org::apache::lucene::store::Directory, NRTCachingDirectory, t_NRTCachingDirectory_init_, 0, 0, t_NRTCachingDirectory__fields_, 0, 0);

        void t_NRTCachingDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(NRTCachingDirectory), module, "NRTCachingDirectory", 0);
        }

        void t_NRTCachingDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NRTCachingDirectory).tp_dict, "class_", make_descriptor(NRTCachingDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NRTCachingDirectory).tp_dict, "wrapfn_", make_descriptor(t_NRTCachingDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NRTCachingDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NRTCachingDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NRTCachingDirectory::initializeClass, 1)))
            return NULL;
          return t_NRTCachingDirectory::wrap_Object(NRTCachingDirectory(((t_NRTCachingDirectory *) arg)->object.this$));
        }
        static PyObject *t_NRTCachingDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NRTCachingDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NRTCachingDirectory_init_(t_NRTCachingDirectory *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          jdouble a1;
          jdouble a2;
          NRTCachingDirectory object((jobject) NULL);

          if (!parseArgs(args, "kDD", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = NRTCachingDirectory(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NRTCachingDirectory_cacheRamBytesUsed(t_NRTCachingDirectory *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.cacheRamBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_NRTCachingDirectory_clearLock(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_close(t_NRTCachingDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_createOutput(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_deleteFile(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_fileExists(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileExists(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "fileExists", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_fileLength(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "fileLength", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_getDelegate(t_NRTCachingDirectory *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getDelegate());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_NRTCachingDirectory_getLockFactory(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::org::apache::lucene::store::LockFactory result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLockFactory());
            return ::org::apache::lucene::store::t_LockFactory::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "getLockFactory", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_getLockID(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLockID());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "getLockID", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_listAll(t_NRTCachingDirectory *self, PyObject *args)
        {
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.listAll());
            return JArray<jstring>(result.this$).wrap();
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "listAll", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_listCachedFiles(t_NRTCachingDirectory *self)
        {
          JArray< ::java::lang::String > result((jobject) NULL);
          OBJ_CALL(result = self->object.listCachedFiles());
          return JArray<jstring>(result.this$).wrap();
        }

        static PyObject *t_NRTCachingDirectory_makeLock(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "makeLock", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_openInput(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_setLockFactory(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::org::apache::lucene::store::LockFactory a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setLockFactory(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "setLockFactory", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_sync(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_toString(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_get__delegate(t_NRTCachingDirectory *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getDelegate());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_NRTCachingDirectory_get__lockFactory(t_NRTCachingDirectory *self, void *data)
        {
          ::org::apache::lucene::store::LockFactory value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockFactory());
          return ::org::apache::lucene::store::t_LockFactory::wrap_Object(value);
        }
        static int t_NRTCachingDirectory_set__lockFactory(t_NRTCachingDirectory *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::store::LockFactory value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &value))
            {
              INT_CALL(self->object.setLockFactory(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "lockFactory", arg);
          return -1;
        }

        static PyObject *t_NRTCachingDirectory_get__lockID(t_NRTCachingDirectory *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockID());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *BinaryDocValues::class$ = NULL;
        jmethodID *BinaryDocValues::mids$ = NULL;
        bool BinaryDocValues::live$ = false;

        jclass BinaryDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/BinaryDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_get_b57e9c3f] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/util/BytesRef;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::BytesRef BinaryDocValues::get(jint a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_get_b57e9c3f], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_BinaryDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BinaryDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BinaryDocValues_get(t_BinaryDocValues *self, PyObject *arg);

        static PyMethodDef t_BinaryDocValues__methods_[] = {
          DECLARE_METHOD(t_BinaryDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BinaryDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BinaryDocValues, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BinaryDocValues, t_BinaryDocValues, ::java::lang::Object, BinaryDocValues, abstract_init, 0, 0, 0, 0, 0);

        void t_BinaryDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(BinaryDocValues), module, "BinaryDocValues", 0);
        }

        void t_BinaryDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BinaryDocValues).tp_dict, "class_", make_descriptor(BinaryDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BinaryDocValues).tp_dict, "wrapfn_", make_descriptor(t_BinaryDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BinaryDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BinaryDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BinaryDocValues::initializeClass, 1)))
            return NULL;
          return t_BinaryDocValues::wrap_Object(BinaryDocValues(((t_BinaryDocValues *) arg)->object.this$));
        }
        static PyObject *t_BinaryDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BinaryDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BinaryDocValues_get(t_BinaryDocValues *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *NumericPayloadTokenFilterFactory::class$ = NULL;
          jmethodID *NumericPayloadTokenFilterFactory::mids$ = NULL;
          bool NumericPayloadTokenFilterFactory::live$ = false;

          jclass NumericPayloadTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_21f7b18d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/payloads/NumericPayloadTokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NumericPayloadTokenFilterFactory::NumericPayloadTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::payloads::NumericPayloadTokenFilter NumericPayloadTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::payloads::NumericPayloadTokenFilter(env->callObjectMethod(this$, mids$[mid_create_21f7b18d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_NumericPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NumericPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NumericPayloadTokenFilterFactory_init_(t_NumericPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NumericPayloadTokenFilterFactory_create(t_NumericPayloadTokenFilterFactory *self, PyObject *args);

          static PyMethodDef t_NumericPayloadTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_NumericPayloadTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NumericPayloadTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NumericPayloadTokenFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NumericPayloadTokenFilterFactory, t_NumericPayloadTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, NumericPayloadTokenFilterFactory, t_NumericPayloadTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_NumericPayloadTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(NumericPayloadTokenFilterFactory), module, "NumericPayloadTokenFilterFactory", 0);
          }

          void t_NumericPayloadTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NumericPayloadTokenFilterFactory).tp_dict, "class_", make_descriptor(NumericPayloadTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NumericPayloadTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_NumericPayloadTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NumericPayloadTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NumericPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NumericPayloadTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_NumericPayloadTokenFilterFactory::wrap_Object(NumericPayloadTokenFilterFactory(((t_NumericPayloadTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_NumericPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NumericPayloadTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NumericPayloadTokenFilterFactory_init_(t_NumericPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            NumericPayloadTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = NumericPayloadTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NumericPayloadTokenFilterFactory_create(t_NumericPayloadTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::payloads::NumericPayloadTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::payloads::t_NumericPayloadTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NumericPayloadTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/FilterClause.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Filter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *FilterClause::class$ = NULL;
        jmethodID *FilterClause::mids$ = NULL;
        bool FilterClause::live$ = false;

        jclass FilterClause::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/FilterClause");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7373f548] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/BooleanClause$Occur;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getFilter_b40f961f] = env->getMethodID(cls, "getFilter", "()Lorg/apache/lucene/search/Filter;");
            mids$[mid_getOccur_157730ed] = env->getMethodID(cls, "getOccur", "()Lorg/apache/lucene/search/BooleanClause$Occur;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterClause::FilterClause(const ::org::apache::lucene::search::Filter & a0, const ::org::apache::lucene::search::BooleanClause$Occur & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7373f548, a0.this$, a1.this$)) {}

        jboolean FilterClause::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::Filter FilterClause::getFilter() const
        {
          return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_b40f961f]));
        }

        ::org::apache::lucene::search::BooleanClause$Occur FilterClause::getOccur() const
        {
          return ::org::apache::lucene::search::BooleanClause$Occur(env->callObjectMethod(this$, mids$[mid_getOccur_157730ed]));
        }

        jint FilterClause::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String FilterClause::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_FilterClause_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterClause_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterClause_init_(t_FilterClause *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterClause_equals(t_FilterClause *self, PyObject *args);
        static PyObject *t_FilterClause_getFilter(t_FilterClause *self);
        static PyObject *t_FilterClause_getOccur(t_FilterClause *self);
        static PyObject *t_FilterClause_hashCode(t_FilterClause *self, PyObject *args);
        static PyObject *t_FilterClause_toString(t_FilterClause *self, PyObject *args);
        static PyObject *t_FilterClause_get__filter(t_FilterClause *self, void *data);
        static PyObject *t_FilterClause_get__occur(t_FilterClause *self, void *data);
        static PyGetSetDef t_FilterClause__fields_[] = {
          DECLARE_GET_FIELD(t_FilterClause, filter),
          DECLARE_GET_FIELD(t_FilterClause, occur),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterClause__methods_[] = {
          DECLARE_METHOD(t_FilterClause, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterClause, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterClause, equals, METH_VARARGS),
          DECLARE_METHOD(t_FilterClause, getFilter, METH_NOARGS),
          DECLARE_METHOD(t_FilterClause, getOccur, METH_NOARGS),
          DECLARE_METHOD(t_FilterClause, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FilterClause, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterClause, t_FilterClause, ::java::lang::Object, FilterClause, t_FilterClause_init_, 0, 0, t_FilterClause__fields_, 0, 0);

        void t_FilterClause::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterClause), module, "FilterClause", 0);
        }

        void t_FilterClause::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterClause).tp_dict, "class_", make_descriptor(FilterClause::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterClause).tp_dict, "wrapfn_", make_descriptor(t_FilterClause::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterClause).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterClause_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterClause::initializeClass, 1)))
            return NULL;
          return t_FilterClause::wrap_Object(FilterClause(((t_FilterClause *) arg)->object.this$));
        }
        static PyObject *t_FilterClause_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterClause::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterClause_init_(t_FilterClause *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Filter a0((jobject) NULL);
          ::org::apache::lucene::search::BooleanClause$Occur a1((jobject) NULL);
          PyTypeObject **p1;
          FilterClause object((jobject) NULL);

          if (!parseArgs(args, "kK", ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
          {
            INT_CALL(object = FilterClause(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterClause_equals(t_FilterClause *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilterClause), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FilterClause_getFilter(t_FilterClause *self)
        {
          ::org::apache::lucene::search::Filter result((jobject) NULL);
          OBJ_CALL(result = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
        }

        static PyObject *t_FilterClause_getOccur(t_FilterClause *self)
        {
          ::org::apache::lucene::search::BooleanClause$Occur result((jobject) NULL);
          OBJ_CALL(result = self->object.getOccur());
          return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(result);
        }

        static PyObject *t_FilterClause_hashCode(t_FilterClause *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterClause), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FilterClause_toString(t_FilterClause *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FilterClause), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FilterClause_get__filter(t_FilterClause *self, void *data)
        {
          ::org::apache::lucene::search::Filter value((jobject) NULL);
          OBJ_CALL(value = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(value);
        }

        static PyObject *t_FilterClause_get__occur(t_FilterClause *self, void *data)
        {
          ::org::apache::lucene::search::BooleanClause$Occur value((jobject) NULL);
          OBJ_CALL(value = self->object.getOccur());
          return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SlowCollatedTermRangeQuery.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/text/Collator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SlowCollatedTermRangeQuery::class$ = NULL;
          jmethodID *SlowCollatedTermRangeQuery::mids$ = NULL;
          bool SlowCollatedTermRangeQuery::live$ = false;

          jclass SlowCollatedTermRangeQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SlowCollatedTermRangeQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ad38c2c0] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZLjava/text/Collator;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_field_14c7b5c5] = env->getMethodID(cls, "field", "()Ljava/lang/String;");
              mids$[mid_getCollator_44b7fa29] = env->getMethodID(cls, "getCollator", "()Ljava/text/Collator;");
              mids$[mid_getLowerTerm_14c7b5c5] = env->getMethodID(cls, "getLowerTerm", "()Ljava/lang/String;");
              mids$[mid_getUpperTerm_14c7b5c5] = env->getMethodID(cls, "getUpperTerm", "()Ljava/lang/String;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_includesLower_54c6a16a] = env->getMethodID(cls, "includesLower", "()Z");
              mids$[mid_includesUpper_54c6a16a] = env->getMethodID(cls, "includesUpper", "()Z");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SlowCollatedTermRangeQuery::SlowCollatedTermRangeQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4, const ::java::text::Collator & a5) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_ad38c2c0, a0.this$, a1.this$, a2.this$, a3, a4, a5.this$)) {}

          jboolean SlowCollatedTermRangeQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::java::lang::String SlowCollatedTermRangeQuery::field() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_field_14c7b5c5]));
          }

          ::java::text::Collator SlowCollatedTermRangeQuery::getCollator() const
          {
            return ::java::text::Collator(env->callObjectMethod(this$, mids$[mid_getCollator_44b7fa29]));
          }

          ::java::lang::String SlowCollatedTermRangeQuery::getLowerTerm() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLowerTerm_14c7b5c5]));
          }

          ::java::lang::String SlowCollatedTermRangeQuery::getUpperTerm() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getUpperTerm_14c7b5c5]));
          }

          jint SlowCollatedTermRangeQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jboolean SlowCollatedTermRangeQuery::includesLower() const
          {
            return env->callBooleanMethod(this$, mids$[mid_includesLower_54c6a16a]);
          }

          jboolean SlowCollatedTermRangeQuery::includesUpper() const
          {
            return env->callBooleanMethod(this$, mids$[mid_includesUpper_54c6a16a]);
          }

          ::java::lang::String SlowCollatedTermRangeQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SlowCollatedTermRangeQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowCollatedTermRangeQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SlowCollatedTermRangeQuery_init_(t_SlowCollatedTermRangeQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SlowCollatedTermRangeQuery_equals(t_SlowCollatedTermRangeQuery *self, PyObject *args);
          static PyObject *t_SlowCollatedTermRangeQuery_field(t_SlowCollatedTermRangeQuery *self);
          static PyObject *t_SlowCollatedTermRangeQuery_getCollator(t_SlowCollatedTermRangeQuery *self);
          static PyObject *t_SlowCollatedTermRangeQuery_getLowerTerm(t_SlowCollatedTermRangeQuery *self);
          static PyObject *t_SlowCollatedTermRangeQuery_getUpperTerm(t_SlowCollatedTermRangeQuery *self);
          static PyObject *t_SlowCollatedTermRangeQuery_hashCode(t_SlowCollatedTermRangeQuery *self, PyObject *args);
          static PyObject *t_SlowCollatedTermRangeQuery_includesLower(t_SlowCollatedTermRangeQuery *self);
          static PyObject *t_SlowCollatedTermRangeQuery_includesUpper(t_SlowCollatedTermRangeQuery *self);
          static PyObject *t_SlowCollatedTermRangeQuery_toString(t_SlowCollatedTermRangeQuery *self, PyObject *args);
          static PyObject *t_SlowCollatedTermRangeQuery_get__collator(t_SlowCollatedTermRangeQuery *self, void *data);
          static PyObject *t_SlowCollatedTermRangeQuery_get__lowerTerm(t_SlowCollatedTermRangeQuery *self, void *data);
          static PyObject *t_SlowCollatedTermRangeQuery_get__upperTerm(t_SlowCollatedTermRangeQuery *self, void *data);
          static PyGetSetDef t_SlowCollatedTermRangeQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SlowCollatedTermRangeQuery, collator),
            DECLARE_GET_FIELD(t_SlowCollatedTermRangeQuery, lowerTerm),
            DECLARE_GET_FIELD(t_SlowCollatedTermRangeQuery, upperTerm),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SlowCollatedTermRangeQuery__methods_[] = {
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, field, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, getCollator, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, getLowerTerm, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, getUpperTerm, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, includesLower, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, includesUpper, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SlowCollatedTermRangeQuery, t_SlowCollatedTermRangeQuery, ::org::apache::lucene::search::MultiTermQuery, SlowCollatedTermRangeQuery, t_SlowCollatedTermRangeQuery_init_, 0, 0, t_SlowCollatedTermRangeQuery__fields_, 0, 0);

          void t_SlowCollatedTermRangeQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SlowCollatedTermRangeQuery), module, "SlowCollatedTermRangeQuery", 0);
          }

          void t_SlowCollatedTermRangeQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeQuery).tp_dict, "class_", make_descriptor(SlowCollatedTermRangeQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeQuery).tp_dict, "wrapfn_", make_descriptor(t_SlowCollatedTermRangeQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SlowCollatedTermRangeQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SlowCollatedTermRangeQuery::initializeClass, 1)))
              return NULL;
            return t_SlowCollatedTermRangeQuery::wrap_Object(SlowCollatedTermRangeQuery(((t_SlowCollatedTermRangeQuery *) arg)->object.this$));
          }
          static PyObject *t_SlowCollatedTermRangeQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SlowCollatedTermRangeQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SlowCollatedTermRangeQuery_init_(t_SlowCollatedTermRangeQuery *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            jboolean a4;
            ::java::text::Collator a5((jobject) NULL);
            SlowCollatedTermRangeQuery object((jobject) NULL);

            if (!parseArgs(args, "sssZZk", ::java::text::Collator::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              INT_CALL(object = SlowCollatedTermRangeQuery(a0, a1, a2, a3, a4, a5));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SlowCollatedTermRangeQuery_equals(t_SlowCollatedTermRangeQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SlowCollatedTermRangeQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_field(t_SlowCollatedTermRangeQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.field());
            return j2p(result);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_getCollator(t_SlowCollatedTermRangeQuery *self)
          {
            ::java::text::Collator result((jobject) NULL);
            OBJ_CALL(result = self->object.getCollator());
            return ::java::text::t_Collator::wrap_Object(result);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_getLowerTerm(t_SlowCollatedTermRangeQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getLowerTerm());
            return j2p(result);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_getUpperTerm(t_SlowCollatedTermRangeQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getUpperTerm());
            return j2p(result);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_hashCode(t_SlowCollatedTermRangeQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SlowCollatedTermRangeQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_includesLower(t_SlowCollatedTermRangeQuery *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.includesLower());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_includesUpper(t_SlowCollatedTermRangeQuery *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.includesUpper());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_toString(t_SlowCollatedTermRangeQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SlowCollatedTermRangeQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_get__collator(t_SlowCollatedTermRangeQuery *self, void *data)
          {
            ::java::text::Collator value((jobject) NULL);
            OBJ_CALL(value = self->object.getCollator());
            return ::java::text::t_Collator::wrap_Object(value);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_get__lowerTerm(t_SlowCollatedTermRangeQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getLowerTerm());
            return j2p(value);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_get__upperTerm(t_SlowCollatedTermRangeQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getUpperTerm());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/TrimFilter.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *TrimFilter::class$ = NULL;
          jmethodID *TrimFilter::mids$ = NULL;
          bool TrimFilter::live$ = false;

          jclass TrimFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/TrimFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_db34a9b2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Z)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TrimFilter::TrimFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          TrimFilter::TrimFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_db34a9b2, a0.this$, a1.this$, a2)) {}

          jboolean TrimFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_TrimFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TrimFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TrimFilter_init_(t_TrimFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TrimFilter_incrementToken(t_TrimFilter *self, PyObject *args);

          static PyMethodDef t_TrimFilter__methods_[] = {
            DECLARE_METHOD(t_TrimFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TrimFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TrimFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TrimFilter, t_TrimFilter, ::org::apache::lucene::analysis::TokenFilter, TrimFilter, t_TrimFilter_init_, 0, 0, 0, 0, 0);

          void t_TrimFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TrimFilter), module, "TrimFilter", 0);
          }

          void t_TrimFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TrimFilter).tp_dict, "class_", make_descriptor(TrimFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TrimFilter).tp_dict, "wrapfn_", make_descriptor(t_TrimFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TrimFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TrimFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TrimFilter::initializeClass, 1)))
              return NULL;
            return t_TrimFilter::wrap_Object(TrimFilter(((t_TrimFilter *) arg)->object.this$));
          }
          static PyObject *t_TrimFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TrimFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TrimFilter_init_(t_TrimFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                TrimFilter object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = TrimFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jboolean a2;
                TrimFilter object((jobject) NULL);

                if (!parseArgs(args, "KkZ", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = TrimFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TrimFilter_incrementToken(t_TrimFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TrimFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SlowCollatedTermRangeFilter.h"
#include "org/apache/lucene/sandbox/queries/SlowCollatedTermRangeQuery.h"
#include "java/lang/String.h"
#include "java/text/Collator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SlowCollatedTermRangeFilter::class$ = NULL;
          jmethodID *SlowCollatedTermRangeFilter::mids$ = NULL;
          bool SlowCollatedTermRangeFilter::live$ = false;

          jclass SlowCollatedTermRangeFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SlowCollatedTermRangeFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ad38c2c0] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZLjava/text/Collator;)V");
              mids$[mid_getCollator_44b7fa29] = env->getMethodID(cls, "getCollator", "()Ljava/text/Collator;");
              mids$[mid_getLowerTerm_14c7b5c5] = env->getMethodID(cls, "getLowerTerm", "()Ljava/lang/String;");
              mids$[mid_getUpperTerm_14c7b5c5] = env->getMethodID(cls, "getUpperTerm", "()Ljava/lang/String;");
              mids$[mid_includesLower_54c6a16a] = env->getMethodID(cls, "includesLower", "()Z");
              mids$[mid_includesUpper_54c6a16a] = env->getMethodID(cls, "includesUpper", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SlowCollatedTermRangeFilter::SlowCollatedTermRangeFilter(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4, const ::java::text::Collator & a5) : ::org::apache::lucene::search::MultiTermQueryWrapperFilter(env->newObject(initializeClass, &mids$, mid_init$_ad38c2c0, a0.this$, a1.this$, a2.this$, a3, a4, a5.this$)) {}

          ::java::text::Collator SlowCollatedTermRangeFilter::getCollator() const
          {
            return ::java::text::Collator(env->callObjectMethod(this$, mids$[mid_getCollator_44b7fa29]));
          }

          ::java::lang::String SlowCollatedTermRangeFilter::getLowerTerm() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLowerTerm_14c7b5c5]));
          }

          ::java::lang::String SlowCollatedTermRangeFilter::getUpperTerm() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getUpperTerm_14c7b5c5]));
          }

          jboolean SlowCollatedTermRangeFilter::includesLower() const
          {
            return env->callBooleanMethod(this$, mids$[mid_includesLower_54c6a16a]);
          }

          jboolean SlowCollatedTermRangeFilter::includesUpper() const
          {
            return env->callBooleanMethod(this$, mids$[mid_includesUpper_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SlowCollatedTermRangeFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowCollatedTermRangeFilter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowCollatedTermRangeFilter_of_(t_SlowCollatedTermRangeFilter *self, PyObject *args);
          static int t_SlowCollatedTermRangeFilter_init_(t_SlowCollatedTermRangeFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SlowCollatedTermRangeFilter_getCollator(t_SlowCollatedTermRangeFilter *self);
          static PyObject *t_SlowCollatedTermRangeFilter_getLowerTerm(t_SlowCollatedTermRangeFilter *self);
          static PyObject *t_SlowCollatedTermRangeFilter_getUpperTerm(t_SlowCollatedTermRangeFilter *self);
          static PyObject *t_SlowCollatedTermRangeFilter_includesLower(t_SlowCollatedTermRangeFilter *self);
          static PyObject *t_SlowCollatedTermRangeFilter_includesUpper(t_SlowCollatedTermRangeFilter *self);
          static PyObject *t_SlowCollatedTermRangeFilter_get__collator(t_SlowCollatedTermRangeFilter *self, void *data);
          static PyObject *t_SlowCollatedTermRangeFilter_get__lowerTerm(t_SlowCollatedTermRangeFilter *self, void *data);
          static PyObject *t_SlowCollatedTermRangeFilter_get__upperTerm(t_SlowCollatedTermRangeFilter *self, void *data);
          static PyObject *t_SlowCollatedTermRangeFilter_get__parameters_(t_SlowCollatedTermRangeFilter *self, void *data);
          static PyGetSetDef t_SlowCollatedTermRangeFilter__fields_[] = {
            DECLARE_GET_FIELD(t_SlowCollatedTermRangeFilter, collator),
            DECLARE_GET_FIELD(t_SlowCollatedTermRangeFilter, lowerTerm),
            DECLARE_GET_FIELD(t_SlowCollatedTermRangeFilter, upperTerm),
            DECLARE_GET_FIELD(t_SlowCollatedTermRangeFilter, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SlowCollatedTermRangeFilter__methods_[] = {
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, of_, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, getCollator, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, getLowerTerm, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, getUpperTerm, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, includesLower, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, includesUpper, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SlowCollatedTermRangeFilter, t_SlowCollatedTermRangeFilter, ::org::apache::lucene::search::MultiTermQueryWrapperFilter, SlowCollatedTermRangeFilter, t_SlowCollatedTermRangeFilter_init_, 0, 0, t_SlowCollatedTermRangeFilter__fields_, 0, 0);
          PyObject *t_SlowCollatedTermRangeFilter::wrap_Object(const SlowCollatedTermRangeFilter& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SlowCollatedTermRangeFilter::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SlowCollatedTermRangeFilter *self = (t_SlowCollatedTermRangeFilter *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SlowCollatedTermRangeFilter::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SlowCollatedTermRangeFilter::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SlowCollatedTermRangeFilter *self = (t_SlowCollatedTermRangeFilter *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SlowCollatedTermRangeFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SlowCollatedTermRangeFilter), module, "SlowCollatedTermRangeFilter", 0);
          }

          void t_SlowCollatedTermRangeFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeFilter).tp_dict, "class_", make_descriptor(SlowCollatedTermRangeFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeFilter).tp_dict, "wrapfn_", make_descriptor(t_SlowCollatedTermRangeFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SlowCollatedTermRangeFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SlowCollatedTermRangeFilter::initializeClass, 1)))
              return NULL;
            return t_SlowCollatedTermRangeFilter::wrap_Object(SlowCollatedTermRangeFilter(((t_SlowCollatedTermRangeFilter *) arg)->object.this$));
          }
          static PyObject *t_SlowCollatedTermRangeFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SlowCollatedTermRangeFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SlowCollatedTermRangeFilter_of_(t_SlowCollatedTermRangeFilter *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SlowCollatedTermRangeFilter_init_(t_SlowCollatedTermRangeFilter *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            jboolean a4;
            ::java::text::Collator a5((jobject) NULL);
            SlowCollatedTermRangeFilter object((jobject) NULL);

            if (!parseArgs(args, "sssZZk", ::java::text::Collator::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              INT_CALL(object = SlowCollatedTermRangeFilter(a0, a1, a2, a3, a4, a5));
              self->object = object;
              self->parameters[0] = &::org::apache::lucene::sandbox::queries::PY_TYPE(SlowCollatedTermRangeQuery);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SlowCollatedTermRangeFilter_getCollator(t_SlowCollatedTermRangeFilter *self)
          {
            ::java::text::Collator result((jobject) NULL);
            OBJ_CALL(result = self->object.getCollator());
            return ::java::text::t_Collator::wrap_Object(result);
          }

          static PyObject *t_SlowCollatedTermRangeFilter_getLowerTerm(t_SlowCollatedTermRangeFilter *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getLowerTerm());
            return j2p(result);
          }

          static PyObject *t_SlowCollatedTermRangeFilter_getUpperTerm(t_SlowCollatedTermRangeFilter *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getUpperTerm());
            return j2p(result);
          }

          static PyObject *t_SlowCollatedTermRangeFilter_includesLower(t_SlowCollatedTermRangeFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.includesLower());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SlowCollatedTermRangeFilter_includesUpper(t_SlowCollatedTermRangeFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.includesUpper());
            Py_RETURN_BOOL(result);
          }
          static PyObject *t_SlowCollatedTermRangeFilter_get__parameters_(t_SlowCollatedTermRangeFilter *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_SlowCollatedTermRangeFilter_get__collator(t_SlowCollatedTermRangeFilter *self, void *data)
          {
            ::java::text::Collator value((jobject) NULL);
            OBJ_CALL(value = self->object.getCollator());
            return ::java::text::t_Collator::wrap_Object(value);
          }

          static PyObject *t_SlowCollatedTermRangeFilter_get__lowerTerm(t_SlowCollatedTermRangeFilter *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getLowerTerm());
            return j2p(value);
          }

          static PyObject *t_SlowCollatedTermRangeFilter_get__upperTerm(t_SlowCollatedTermRangeFilter *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getUpperTerm());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanNotBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanNotBuilder::class$ = NULL;
            jmethodID *SpanNotBuilder::mids$ = NULL;
            bool SpanNotBuilder::live$ = false;

            jclass SpanNotBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanNotBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d9ca31a9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/builders/SpanQueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanNotBuilder::SpanNotBuilder(const ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder & a0) : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_d9ca31a9, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanNotBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanNotBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanNotBuilder_init_(t_SpanNotBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanNotBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanNotBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanNotBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanNotBuilder, t_SpanNotBuilder, ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase, SpanNotBuilder, t_SpanNotBuilder_init_, 0, 0, 0, 0, 0);

            void t_SpanNotBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanNotBuilder), module, "SpanNotBuilder", 0);
            }

            void t_SpanNotBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanNotBuilder).tp_dict, "class_", make_descriptor(SpanNotBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanNotBuilder).tp_dict, "wrapfn_", make_descriptor(t_SpanNotBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanNotBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanNotBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanNotBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanNotBuilder::wrap_Object(SpanNotBuilder(((t_SpanNotBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanNotBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanNotBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanNotBuilder_init_(t_SpanNotBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder a0((jobject) NULL);
              SpanNotBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = SpanNotBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiNormalizationFilter::class$ = NULL;
          jmethodID *HindiNormalizationFilter::mids$ = NULL;
          bool HindiNormalizationFilter::live$ = false;

          jclass HindiNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiNormalizationFilter::HindiNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean HindiNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiNormalizationFilter_init_(t_HindiNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiNormalizationFilter_incrementToken(t_HindiNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_HindiNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_HindiNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HindiNormalizationFilter, t_HindiNormalizationFilter, ::org::apache::lucene::analysis::TokenFilter, HindiNormalizationFilter, t_HindiNormalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_HindiNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiNormalizationFilter), module, "HindiNormalizationFilter", 0);
          }

          void t_HindiNormalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HindiNormalizationFilter).tp_dict, "class_", make_descriptor(HindiNormalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HindiNormalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_HindiNormalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HindiNormalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HindiNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_HindiNormalizationFilter::wrap_Object(HindiNormalizationFilter(((t_HindiNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_HindiNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiNormalizationFilter_init_(t_HindiNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            HindiNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = HindiNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HindiNormalizationFilter_incrementToken(t_HindiNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(HindiNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexUpgrader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexUpgrader::class$ = NULL;
        jmethodID *IndexUpgrader::mids$ = NULL;
        bool IndexUpgrader::live$ = false;

        jclass IndexUpgrader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexUpgrader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_3b411aab] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/util/Version;)V");
            mids$[mid_init$_884b85de] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig;Z)V");
            mids$[mid_init$_2b2ed566] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/InfoStream;Z)V");
            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
            mids$[mid_upgrade_54c6a166] = env->getMethodID(cls, "upgrade", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexUpgrader::IndexUpgrader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::util::Version & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3b411aab, a0.this$, a1.this$)) {}

        IndexUpgrader::IndexUpgrader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::IndexWriterConfig & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_884b85de, a0.this$, a1.this$, a2)) {}

        IndexUpgrader::IndexUpgrader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::util::Version & a1, const ::org::apache::lucene::util::InfoStream & a2, jboolean a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2b2ed566, a0.this$, a1.this$, a2.this$, a3)) {}

        void IndexUpgrader::main(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
        }

        void IndexUpgrader::upgrade() const
        {
          env->callVoidMethod(this$, mids$[mid_upgrade_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexUpgrader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexUpgrader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexUpgrader_init_(t_IndexUpgrader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexUpgrader_main(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexUpgrader_upgrade(t_IndexUpgrader *self);

        static PyMethodDef t_IndexUpgrader__methods_[] = {
          DECLARE_METHOD(t_IndexUpgrader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexUpgrader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexUpgrader, main, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexUpgrader, upgrade, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexUpgrader, t_IndexUpgrader, ::java::lang::Object, IndexUpgrader, t_IndexUpgrader_init_, 0, 0, 0, 0, 0);

        void t_IndexUpgrader::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexUpgrader), module, "IndexUpgrader", 0);
        }

        void t_IndexUpgrader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexUpgrader).tp_dict, "class_", make_descriptor(IndexUpgrader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexUpgrader).tp_dict, "wrapfn_", make_descriptor(t_IndexUpgrader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexUpgrader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexUpgrader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexUpgrader::initializeClass, 1)))
            return NULL;
          return t_IndexUpgrader::wrap_Object(IndexUpgrader(((t_IndexUpgrader *) arg)->object.this$));
        }
        static PyObject *t_IndexUpgrader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexUpgrader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexUpgrader_init_(t_IndexUpgrader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::util::Version a1((jobject) NULL);
              PyTypeObject **p1;
              IndexUpgrader object((jobject) NULL);

              if (!parseArgs(args, "kK", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::util::Version::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::t_Version::parameters_))
              {
                INT_CALL(object = IndexUpgrader(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::index::IndexWriterConfig a1((jobject) NULL);
              jboolean a2;
              IndexUpgrader object((jobject) NULL);

              if (!parseArgs(args, "kkZ", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::IndexWriterConfig::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = IndexUpgrader(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::util::Version a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::util::InfoStream a2((jobject) NULL);
              jboolean a3;
              IndexUpgrader object((jobject) NULL);

              if (!parseArgs(args, "kKkZ", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::InfoStream::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::t_Version::parameters_, &a2, &a3))
              {
                INT_CALL(object = IndexUpgrader(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexUpgrader_main(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::java::lang::String > a0((jobject) NULL);

          if (!parseArg(arg, "[s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::IndexUpgrader::main(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "main", arg);
          return NULL;
        }

        static PyObject *t_IndexUpgrader_upgrade(t_IndexUpgrader *self)
        {
          OBJ_CALL(self->object.upgrade());
          Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/Bindings.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {

        ::java::lang::Class *Bindings::class$ = NULL;
        jmethodID *Bindings::mids$ = NULL;
        bool Bindings::live$ = false;

        jclass Bindings::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/Bindings");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getValueSource_3afe260d] = env->getMethodID(cls, "getValueSource", "(Ljava/lang/String;)Lorg/apache/lucene/queries/function/ValueSource;");
            mids$[mid_getScoreValueSource_b62b6193] = env->getMethodID(cls, "getScoreValueSource", "()Lorg/apache/lucene/queries/function/ValueSource;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::queries::function::ValueSource Bindings::getValueSource(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::queries::function::ValueSource(env->callObjectMethod(this$, mids$[mid_getValueSource_3afe260d], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        static PyObject *t_Bindings_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bindings_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bindings_getValueSource(t_Bindings *self, PyObject *arg);

        static PyMethodDef t_Bindings__methods_[] = {
          DECLARE_METHOD(t_Bindings, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bindings, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bindings, getValueSource, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Bindings, t_Bindings, ::java::lang::Object, Bindings, abstract_init, 0, 0, 0, 0, 0);

        void t_Bindings::install(PyObject *module)
        {
          installType(&PY_TYPE(Bindings), module, "Bindings", 0);
        }

        void t_Bindings::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Bindings).tp_dict, "class_", make_descriptor(Bindings::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Bindings).tp_dict, "wrapfn_", make_descriptor(t_Bindings::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Bindings).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Bindings_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Bindings::initializeClass, 1)))
            return NULL;
          return t_Bindings::wrap_Object(Bindings(((t_Bindings *) arg)->object.this$));
        }
        static PyObject *t_Bindings_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Bindings::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Bindings_getValueSource(t_Bindings *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::queries::function::ValueSource result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getValueSource(a0));
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getValueSource", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCacheRewriteMethod.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCacheRewriteMethod::class$ = NULL;
        jmethodID *FieldCacheRewriteMethod::mids$ = NULL;
        bool FieldCacheRewriteMethod::live$ = false;

        jclass FieldCacheRewriteMethod::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCacheRewriteMethod");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_925c5bbc] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/Query;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCacheRewriteMethod::FieldCacheRewriteMethod() : ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean FieldCacheRewriteMethod::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint FieldCacheRewriteMethod::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query FieldCacheRewriteMethod::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_925c5bbc], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCacheRewriteMethod_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheRewriteMethod_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCacheRewriteMethod_init_(t_FieldCacheRewriteMethod *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCacheRewriteMethod_equals(t_FieldCacheRewriteMethod *self, PyObject *args);
        static PyObject *t_FieldCacheRewriteMethod_hashCode(t_FieldCacheRewriteMethod *self, PyObject *args);
        static PyObject *t_FieldCacheRewriteMethod_rewrite(t_FieldCacheRewriteMethod *self, PyObject *args);

        static PyMethodDef t_FieldCacheRewriteMethod__methods_[] = {
          DECLARE_METHOD(t_FieldCacheRewriteMethod, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRewriteMethod, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRewriteMethod, equals, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheRewriteMethod, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheRewriteMethod, rewrite, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheRewriteMethod, t_FieldCacheRewriteMethod, ::org::apache::lucene::search::MultiTermQuery$RewriteMethod, FieldCacheRewriteMethod, t_FieldCacheRewriteMethod_init_, 0, 0, 0, 0, 0);

        void t_FieldCacheRewriteMethod::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheRewriteMethod), module, "FieldCacheRewriteMethod", 0);
        }

        void t_FieldCacheRewriteMethod::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheRewriteMethod).tp_dict, "class_", make_descriptor(FieldCacheRewriteMethod::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheRewriteMethod).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheRewriteMethod::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheRewriteMethod).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCacheRewriteMethod_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheRewriteMethod::initializeClass, 1)))
            return NULL;
          return t_FieldCacheRewriteMethod::wrap_Object(FieldCacheRewriteMethod(((t_FieldCacheRewriteMethod *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheRewriteMethod_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheRewriteMethod::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCacheRewriteMethod_init_(t_FieldCacheRewriteMethod *self, PyObject *args, PyObject *kwds)
        {
          FieldCacheRewriteMethod object((jobject) NULL);

          INT_CALL(object = FieldCacheRewriteMethod());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCacheRewriteMethod_equals(t_FieldCacheRewriteMethod *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FieldCacheRewriteMethod), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FieldCacheRewriteMethod_hashCode(t_FieldCacheRewriteMethod *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldCacheRewriteMethod), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FieldCacheRewriteMethod_rewrite(t_FieldCacheRewriteMethod *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.rewrite(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldCacheRewriteMethod), (PyObject *) self, "rewrite", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/CachingWrapperFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *CachingWrapperFilter::class$ = NULL;
        jmethodID *CachingWrapperFilter::mids$ = NULL;
        bool CachingWrapperFilter::live$ = false;

        jclass CachingWrapperFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/CachingWrapperFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9bb37152] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Filter;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_getFilter_b40f961f] = env->getMethodID(cls, "getFilter", "()Lorg/apache/lucene/search/Filter;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_cacheImpl_33cb740e] = env->getMethodID(cls, "cacheImpl", "(Lorg/apache/lucene/search/DocIdSetIterator;Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_docIdSetToCache_5fee2a54] = env->getMethodID(cls, "docIdSetToCache", "(Lorg/apache/lucene/search/DocIdSet;Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/search/DocIdSet;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CachingWrapperFilter::CachingWrapperFilter(const ::org::apache::lucene::search::Filter & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_9bb37152, a0.this$)) {}

        jboolean CachingWrapperFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet CachingWrapperFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Filter CachingWrapperFilter::getFilter() const
        {
          return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_b40f961f]));
        }

        jint CachingWrapperFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jlong CachingWrapperFilter::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        ::java::lang::String CachingWrapperFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_CachingWrapperFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CachingWrapperFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CachingWrapperFilter_init_(t_CachingWrapperFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CachingWrapperFilter_equals(t_CachingWrapperFilter *self, PyObject *args);
        static PyObject *t_CachingWrapperFilter_getDocIdSet(t_CachingWrapperFilter *self, PyObject *args);
        static PyObject *t_CachingWrapperFilter_getFilter(t_CachingWrapperFilter *self);
        static PyObject *t_CachingWrapperFilter_hashCode(t_CachingWrapperFilter *self, PyObject *args);
        static PyObject *t_CachingWrapperFilter_ramBytesUsed(t_CachingWrapperFilter *self);
        static PyObject *t_CachingWrapperFilter_toString(t_CachingWrapperFilter *self, PyObject *args);
        static PyObject *t_CachingWrapperFilter_get__filter(t_CachingWrapperFilter *self, void *data);
        static PyGetSetDef t_CachingWrapperFilter__fields_[] = {
          DECLARE_GET_FIELD(t_CachingWrapperFilter, filter),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CachingWrapperFilter__methods_[] = {
          DECLARE_METHOD(t_CachingWrapperFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CachingWrapperFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CachingWrapperFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_CachingWrapperFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_CachingWrapperFilter, getFilter, METH_NOARGS),
          DECLARE_METHOD(t_CachingWrapperFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_CachingWrapperFilter, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_CachingWrapperFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CachingWrapperFilter, t_CachingWrapperFilter, ::org::apache::lucene::search::Filter, CachingWrapperFilter, t_CachingWrapperFilter_init_, 0, 0, t_CachingWrapperFilter__fields_, 0, 0);

        void t_CachingWrapperFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(CachingWrapperFilter), module, "CachingWrapperFilter", 0);
        }

        void t_CachingWrapperFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CachingWrapperFilter).tp_dict, "class_", make_descriptor(CachingWrapperFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CachingWrapperFilter).tp_dict, "wrapfn_", make_descriptor(t_CachingWrapperFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CachingWrapperFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CachingWrapperFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CachingWrapperFilter::initializeClass, 1)))
            return NULL;
          return t_CachingWrapperFilter::wrap_Object(CachingWrapperFilter(((t_CachingWrapperFilter *) arg)->object.this$));
        }
        static PyObject *t_CachingWrapperFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CachingWrapperFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CachingWrapperFilter_init_(t_CachingWrapperFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Filter a0((jobject) NULL);
          CachingWrapperFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Filter::initializeClass, &a0))
          {
            INT_CALL(object = CachingWrapperFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CachingWrapperFilter_equals(t_CachingWrapperFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CachingWrapperFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_CachingWrapperFilter_getDocIdSet(t_CachingWrapperFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CachingWrapperFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_CachingWrapperFilter_getFilter(t_CachingWrapperFilter *self)
        {
          ::org::apache::lucene::search::Filter result((jobject) NULL);
          OBJ_CALL(result = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
        }

        static PyObject *t_CachingWrapperFilter_hashCode(t_CachingWrapperFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(CachingWrapperFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_CachingWrapperFilter_ramBytesUsed(t_CachingWrapperFilter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_CachingWrapperFilter_toString(t_CachingWrapperFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(CachingWrapperFilter), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CachingWrapperFilter_get__filter(t_CachingWrapperFilter *self, void *data)
        {
          ::org::apache::lucene::search::Filter value((jobject) NULL);
          OBJ_CALL(value = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/CharFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *CharFilter::class$ = NULL;
        jmethodID *CharFilter::mids$ = NULL;
        bool CharFilter::live$ = false;

        jclass CharFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/CharFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_correctOffset_39c7bd23] = env->getMethodID(cls, "correctOffset", "(I)I");
            mids$[mid_correct_39c7bd23] = env->getMethodID(cls, "correct", "(I)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CharFilter::CharFilter(const ::java::io::Reader & a0) : ::java::io::Reader(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

        void CharFilter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jint CharFilter::correctOffset(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_correctOffset_39c7bd23], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_CharFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CharFilter_init_(t_CharFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CharFilter_close(t_CharFilter *self, PyObject *args);
        static PyObject *t_CharFilter_correctOffset(t_CharFilter *self, PyObject *arg);

        static PyMethodDef t_CharFilter__methods_[] = {
          DECLARE_METHOD(t_CharFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharFilter, close, METH_VARARGS),
          DECLARE_METHOD(t_CharFilter, correctOffset, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CharFilter, t_CharFilter, ::java::io::Reader, CharFilter, t_CharFilter_init_, 0, 0, 0, 0, 0);

        void t_CharFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(CharFilter), module, "CharFilter", 0);
        }

        void t_CharFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CharFilter).tp_dict, "class_", make_descriptor(CharFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CharFilter).tp_dict, "wrapfn_", make_descriptor(t_CharFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CharFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CharFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CharFilter::initializeClass, 1)))
            return NULL;
          return t_CharFilter::wrap_Object(CharFilter(((t_CharFilter *) arg)->object.this$));
        }
        static PyObject *t_CharFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CharFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CharFilter_init_(t_CharFilter *self, PyObject *args, PyObject *kwds)
        {
          ::java::io::Reader a0((jobject) NULL);
          CharFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
          {
            INT_CALL(object = CharFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CharFilter_close(t_CharFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CharFilter), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_CharFilter_correctOffset(t_CharFilter *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.correctOffset(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "correctOffset", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetSumFloatAssociations.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacetSumFloatAssociations::class$ = NULL;
          jmethodID *TaxonomyFacetSumFloatAssociations::mids$ = NULL;
          bool TaxonomyFacetSumFloatAssociations::live$ = false;

          jclass TaxonomyFacetSumFloatAssociations::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacetSumFloatAssociations");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_33dd1605] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");
              mids$[mid_init$_9888e06b] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyFacetSumFloatAssociations::TaxonomyFacetSumFloatAssociations(const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::FacetsCollector & a2) : ::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_33dd1605, a0.this$, a1.this$, a2.this$)) {}

          TaxonomyFacetSumFloatAssociations::TaxonomyFacetSumFloatAssociations(const ::java::lang::String & a0, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a1, const ::org::apache::lucene::facet::FacetsConfig & a2, const ::org::apache::lucene::facet::FacetsCollector & a3) : ::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_9888e06b, a0.this$, a1.this$, a2.this$, a3.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacetSumFloatAssociations_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacetSumFloatAssociations_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyFacetSumFloatAssociations_init_(t_TaxonomyFacetSumFloatAssociations *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_TaxonomyFacetSumFloatAssociations__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacetSumFloatAssociations, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetSumFloatAssociations, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyFacetSumFloatAssociations, t_TaxonomyFacetSumFloatAssociations, ::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets, TaxonomyFacetSumFloatAssociations, t_TaxonomyFacetSumFloatAssociations_init_, 0, 0, 0, 0, 0);

          void t_TaxonomyFacetSumFloatAssociations::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacetSumFloatAssociations), module, "TaxonomyFacetSumFloatAssociations", 0);
          }

          void t_TaxonomyFacetSumFloatAssociations::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumFloatAssociations).tp_dict, "class_", make_descriptor(TaxonomyFacetSumFloatAssociations::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumFloatAssociations).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyFacetSumFloatAssociations::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumFloatAssociations).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacetSumFloatAssociations_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacetSumFloatAssociations::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacetSumFloatAssociations::wrap_Object(TaxonomyFacetSumFloatAssociations(((t_TaxonomyFacetSumFloatAssociations *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacetSumFloatAssociations_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacetSumFloatAssociations::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyFacetSumFloatAssociations_init_(t_TaxonomyFacetSumFloatAssociations *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                TaxonomyFacetSumFloatAssociations object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = TaxonomyFacetSumFloatAssociations(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a2((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a3((jobject) NULL);
                TaxonomyFacetSumFloatAssociations object((jobject) NULL);

                if (!parseArgs(args, "skkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = TaxonomyFacetSumFloatAssociations(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterDocsAndPositionsEnum.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterAtomicReader$FilterDocsAndPositionsEnum::class$ = NULL;
        jmethodID *FilterAtomicReader$FilterDocsAndPositionsEnum::mids$ = NULL;
        bool FilterAtomicReader$FilterDocsAndPositionsEnum::live$ = false;

        jclass FilterAtomicReader$FilterDocsAndPositionsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterAtomicReader$FilterDocsAndPositionsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9604ac16] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/DocsAndPositionsEnum;)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_attributes_f901022b] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_endOffset_54c6a179] = env->getMethodID(cls, "endOffset", "()I");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_getPayload_4ae19461] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_nextPosition_54c6a179] = env->getMethodID(cls, "nextPosition", "()I");
            mids$[mid_startOffset_54c6a179] = env->getMethodID(cls, "startOffset", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterAtomicReader$FilterDocsAndPositionsEnum::FilterAtomicReader$FilterDocsAndPositionsEnum(const ::org::apache::lucene::index::DocsAndPositionsEnum & a0) : ::org::apache::lucene::index::DocsAndPositionsEnum(env->newObject(initializeClass, &mids$, mid_init$_9604ac16, a0.this$)) {}

        jint FilterAtomicReader$FilterDocsAndPositionsEnum::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        ::org::apache::lucene::util::AttributeSource FilterAtomicReader$FilterDocsAndPositionsEnum::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_f901022b]));
        }

        jlong FilterAtomicReader$FilterDocsAndPositionsEnum::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint FilterAtomicReader$FilterDocsAndPositionsEnum::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint FilterAtomicReader$FilterDocsAndPositionsEnum::endOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_endOffset_54c6a179]);
        }

        jint FilterAtomicReader$FilterDocsAndPositionsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef FilterAtomicReader$FilterDocsAndPositionsEnum::getPayload() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_4ae19461]));
        }

        jint FilterAtomicReader$FilterDocsAndPositionsEnum::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }

        jint FilterAtomicReader$FilterDocsAndPositionsEnum::nextPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_nextPosition_54c6a179]);
        }

        jint FilterAtomicReader$FilterDocsAndPositionsEnum::startOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_startOffset_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterAtomicReader$FilterDocsAndPositionsEnum_init_(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_advance(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_attributes(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_cost(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_docID(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_endOffset(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_freq(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_getPayload(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_nextDoc(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_nextPosition(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_startOffset(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_get__payload(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, void *data);
        static PyGetSetDef t_FilterAtomicReader$FilterDocsAndPositionsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, payload),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterAtomicReader$FilterDocsAndPositionsEnum__methods_[] = {
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, advance, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, attributes, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, cost, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, docID, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, endOffset, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, freq, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, getPayload, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, nextPosition, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, startOffset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum, t_FilterAtomicReader$FilterDocsAndPositionsEnum, ::org::apache::lucene::index::DocsAndPositionsEnum, FilterAtomicReader$FilterDocsAndPositionsEnum, t_FilterAtomicReader$FilterDocsAndPositionsEnum_init_, 0, 0, t_FilterAtomicReader$FilterDocsAndPositionsEnum__fields_, 0, 0);

        void t_FilterAtomicReader$FilterDocsAndPositionsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), module, "FilterAtomicReader$FilterDocsAndPositionsEnum", 0);
        }

        void t_FilterAtomicReader$FilterDocsAndPositionsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum).tp_dict, "class_", make_descriptor(FilterAtomicReader$FilterDocsAndPositionsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum).tp_dict, "wrapfn_", make_descriptor(t_FilterAtomicReader$FilterDocsAndPositionsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterAtomicReader$FilterDocsAndPositionsEnum::initializeClass, 1)))
            return NULL;
          return t_FilterAtomicReader$FilterDocsAndPositionsEnum::wrap_Object(FilterAtomicReader$FilterDocsAndPositionsEnum(((t_FilterAtomicReader$FilterDocsAndPositionsEnum *) arg)->object.this$));
        }
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterAtomicReader$FilterDocsAndPositionsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterAtomicReader$FilterDocsAndPositionsEnum_init_(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::DocsAndPositionsEnum a0((jobject) NULL);
          FilterAtomicReader$FilterDocsAndPositionsEnum object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0))
          {
            INT_CALL(object = FilterAtomicReader$FilterDocsAndPositionsEnum(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_advance(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_attributes(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.attributes());
            return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "attributes", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_cost(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_docID(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_endOffset(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.endOffset());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "endOffset", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_freq(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_getPayload(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "getPayload", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_nextDoc(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_nextPosition(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextPosition());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "nextPosition", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_startOffset(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.startOffset());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "startOffset", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_get__payload(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/StrDocValues.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *StrDocValues::class$ = NULL;
            jmethodID *StrDocValues::mids$ = NULL;
            bool StrDocValues::live$ = false;

            jclass StrDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/StrDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_boolVal_39c7bd30] = env->getMethodID(cls, "boolVal", "(I)Z");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            StrDocValues::StrDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            jboolean StrDocValues::boolVal(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_boolVal_39c7bd30], a0);
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller StrDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            ::java::lang::Object StrDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
            }

            ::java::lang::String StrDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
            }

            ::java::lang::String StrDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_StrDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_StrDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_StrDocValues_init_(t_StrDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_StrDocValues_boolVal(t_StrDocValues *self, PyObject *args);
            static PyObject *t_StrDocValues_getValueFiller(t_StrDocValues *self, PyObject *args);
            static PyObject *t_StrDocValues_objectVal(t_StrDocValues *self, PyObject *args);
            static PyObject *t_StrDocValues_strVal(t_StrDocValues *self, PyObject *args);
            static PyObject *t_StrDocValues_toString(t_StrDocValues *self, PyObject *args);
            static PyObject *t_StrDocValues_get__valueFiller(t_StrDocValues *self, void *data);
            static PyGetSetDef t_StrDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_StrDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_StrDocValues__methods_[] = {
              DECLARE_METHOD(t_StrDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StrDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StrDocValues, boolVal, METH_VARARGS),
              DECLARE_METHOD(t_StrDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_StrDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_StrDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_StrDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(StrDocValues, t_StrDocValues, ::org::apache::lucene::queries::function::FunctionValues, StrDocValues, t_StrDocValues_init_, 0, 0, t_StrDocValues__fields_, 0, 0);

            void t_StrDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(StrDocValues), module, "StrDocValues", 0);
            }

            void t_StrDocValues::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(StrDocValues).tp_dict, "class_", make_descriptor(StrDocValues::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(StrDocValues).tp_dict, "wrapfn_", make_descriptor(t_StrDocValues::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(StrDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_StrDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, StrDocValues::initializeClass, 1)))
                return NULL;
              return t_StrDocValues::wrap_Object(StrDocValues(((t_StrDocValues *) arg)->object.this$));
            }
            static PyObject *t_StrDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, StrDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_StrDocValues_init_(t_StrDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              StrDocValues object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = StrDocValues(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_StrDocValues_boolVal(t_StrDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.boolVal(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(StrDocValues), (PyObject *) self, "boolVal", args, 2);
            }

            static PyObject *t_StrDocValues_getValueFiller(t_StrDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(StrDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_StrDocValues_objectVal(t_StrDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(StrDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_StrDocValues_strVal(t_StrDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(StrDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_StrDocValues_toString(t_StrDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(StrDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_StrDocValues_get__valueFiller(t_StrDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DivFloatFunction.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DivFloatFunction::class$ = NULL;
            jmethodID *DivFloatFunction::mids$ = NULL;
            bool DivFloatFunction::live$ = false;

            jclass DivFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DivFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_74aa307e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_3711414a] = env->getMethodID(cls, "func", "(ILorg/apache/lucene/queries/function/FunctionValues;Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DivFloatFunction::DivFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) : ::org::apache::lucene::queries::function::valuesource::DualFloatFunction(env->newObject(initializeClass, &mids$, mid_init$_74aa307e, a0.this$, a1.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DivFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DivFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DivFloatFunction_init_(t_DivFloatFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_DivFloatFunction__methods_[] = {
              DECLARE_METHOD(t_DivFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DivFloatFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DivFloatFunction, t_DivFloatFunction, ::org::apache::lucene::queries::function::valuesource::DualFloatFunction, DivFloatFunction, t_DivFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_DivFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(DivFloatFunction), module, "DivFloatFunction", 0);
            }

            void t_DivFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DivFloatFunction).tp_dict, "class_", make_descriptor(DivFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DivFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_DivFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DivFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DivFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DivFloatFunction::initializeClass, 1)))
                return NULL;
              return t_DivFloatFunction::wrap_Object(DivFloatFunction(((t_DivFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_DivFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DivFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DivFloatFunction_init_(t_DivFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
              DivFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
              {
                INT_CALL(object = DivFloatFunction(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/SortedInputIterator.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *SortedInputIterator::class$ = NULL;
          jmethodID *SortedInputIterator::mids$ = NULL;
          bool SortedInputIterator::live$ = false;

          jclass SortedInputIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/SortedInputIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1754a234] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
              mids$[mid_init$_a76164a7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/suggest/InputIterator;Ljava/util/Comparator;)V");
              mids$[mid_contexts_03e99967] = env->getMethodID(cls, "contexts", "()Ljava/util/Set;");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_hasContexts_54c6a16a] = env->getMethodID(cls, "hasContexts", "()Z");
              mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_payload_4ae19461] = env->getMethodID(cls, "payload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");
              mids$[mid_decode_b368866d] = env->getMethodID(cls, "decode", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/store/ByteArrayDataInput;)J");
              mids$[mid_encode_f3a12df5] = env->getMethodID(cls, "encode", "(Lorg/apache/lucene/util/OfflineSorter$ByteSequencesWriter;Lorg/apache/lucene/store/ByteArrayDataOutput;[BLorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;Ljava/util/Set;J)V");
              mids$[mid_decodePayload_62b5ed46] = env->getMethodID(cls, "decodePayload", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/store/ByteArrayDataInput;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_decodeContexts_8a3417ec] = env->getMethodID(cls, "decodeContexts", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/store/ByteArrayDataInput;)Ljava/util/Set;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedInputIterator::SortedInputIterator(const ::org::apache::lucene::search::suggest::InputIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1754a234, a0.this$)) {}

          SortedInputIterator::SortedInputIterator(const ::org::apache::lucene::search::suggest::InputIterator & a0, const ::java::util::Comparator & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a76164a7, a0.this$, a1.this$)) {}

          ::java::util::Set SortedInputIterator::contexts() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_contexts_03e99967]));
          }

          ::java::util::Comparator SortedInputIterator::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          jboolean SortedInputIterator::hasContexts() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasContexts_54c6a16a]);
          }

          jboolean SortedInputIterator::hasPayloads() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
          }

          ::org::apache::lucene::util::BytesRef SortedInputIterator::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          ::org::apache::lucene::util::BytesRef SortedInputIterator::payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_payload_4ae19461]));
          }

          jlong SortedInputIterator::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_SortedInputIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedInputIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedInputIterator_init_(t_SortedInputIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedInputIterator_contexts(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_getComparator(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_hasContexts(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_hasPayloads(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_next(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_payload(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_weight(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_get__comparator(t_SortedInputIterator *self, void *data);
          static PyGetSetDef t_SortedInputIterator__fields_[] = {
            DECLARE_GET_FIELD(t_SortedInputIterator, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedInputIterator__methods_[] = {
            DECLARE_METHOD(t_SortedInputIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedInputIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedInputIterator, contexts, METH_NOARGS),
            DECLARE_METHOD(t_SortedInputIterator, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_SortedInputIterator, hasContexts, METH_NOARGS),
            DECLARE_METHOD(t_SortedInputIterator, hasPayloads, METH_NOARGS),
            DECLARE_METHOD(t_SortedInputIterator, next, METH_NOARGS),
            DECLARE_METHOD(t_SortedInputIterator, payload, METH_NOARGS),
            DECLARE_METHOD(t_SortedInputIterator, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedInputIterator, t_SortedInputIterator, ::java::lang::Object, SortedInputIterator, t_SortedInputIterator_init_, PyObject_SelfIter, ((PyObject *(*)(t_SortedInputIterator *)) get_next< t_SortedInputIterator,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_SortedInputIterator__fields_, 0, 0);

          void t_SortedInputIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedInputIterator), module, "SortedInputIterator", 0);
          }

          void t_SortedInputIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedInputIterator).tp_dict, "class_", make_descriptor(SortedInputIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedInputIterator).tp_dict, "wrapfn_", make_descriptor(t_SortedInputIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedInputIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedInputIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedInputIterator::initializeClass, 1)))
              return NULL;
            return t_SortedInputIterator::wrap_Object(SortedInputIterator(((t_SortedInputIterator *) arg)->object.this$));
          }
          static PyObject *t_SortedInputIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedInputIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedInputIterator_init_(t_SortedInputIterator *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);
                SortedInputIterator object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
                {
                  INT_CALL(object = SortedInputIterator(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);
                ::java::util::Comparator a1((jobject) NULL);
                PyTypeObject **p1;
                SortedInputIterator object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
                {
                  INT_CALL(object = SortedInputIterator(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedInputIterator_contexts(t_SortedInputIterator *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.contexts());
            return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_SortedInputIterator_getComparator(t_SortedInputIterator *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_SortedInputIterator_hasContexts(t_SortedInputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasContexts());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SortedInputIterator_hasPayloads(t_SortedInputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SortedInputIterator_next(t_SortedInputIterator *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_SortedInputIterator_payload(t_SortedInputIterator *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.payload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_SortedInputIterator_weight(t_SortedInputIterator *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_SortedInputIterator_get__comparator(t_SortedInputIterator *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$Builder.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *StemmerOverrideFilter$Builder::class$ = NULL;
          jmethodID *StemmerOverrideFilter$Builder::mids$ = NULL;
          bool StemmerOverrideFilter$Builder::live$ = false;

          jclass StemmerOverrideFilter$Builder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$Builder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
              mids$[mid_add_db1d05a2] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Z");
              mids$[mid_build_c052cd10] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StemmerOverrideFilter$Builder::StemmerOverrideFilter$Builder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          StemmerOverrideFilter$Builder::StemmerOverrideFilter$Builder(jboolean a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

          jboolean StemmerOverrideFilter$Builder::add(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
          {
            return env->callBooleanMethod(this$, mids$[mid_add_db1d05a2], a0.this$, a1.this$);
          }

          ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap StemmerOverrideFilter$Builder::build() const
          {
            return ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap(env->callObjectMethod(this$, mids$[mid_build_c052cd10]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_StemmerOverrideFilter$Builder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerOverrideFilter$Builder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StemmerOverrideFilter$Builder_init_(t_StemmerOverrideFilter$Builder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StemmerOverrideFilter$Builder_add(t_StemmerOverrideFilter$Builder *self, PyObject *args);
          static PyObject *t_StemmerOverrideFilter$Builder_build(t_StemmerOverrideFilter$Builder *self);

          static PyMethodDef t_StemmerOverrideFilter$Builder__methods_[] = {
            DECLARE_METHOD(t_StemmerOverrideFilter$Builder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter$Builder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter$Builder, add, METH_VARARGS),
            DECLARE_METHOD(t_StemmerOverrideFilter$Builder, build, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StemmerOverrideFilter$Builder, t_StemmerOverrideFilter$Builder, ::java::lang::Object, StemmerOverrideFilter$Builder, t_StemmerOverrideFilter$Builder_init_, 0, 0, 0, 0, 0);

          void t_StemmerOverrideFilter$Builder::install(PyObject *module)
          {
            installType(&PY_TYPE(StemmerOverrideFilter$Builder), module, "StemmerOverrideFilter$Builder", 0);
          }

          void t_StemmerOverrideFilter$Builder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter$Builder).tp_dict, "class_", make_descriptor(StemmerOverrideFilter$Builder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter$Builder).tp_dict, "wrapfn_", make_descriptor(t_StemmerOverrideFilter$Builder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter$Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StemmerOverrideFilter$Builder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StemmerOverrideFilter$Builder::initializeClass, 1)))
              return NULL;
            return t_StemmerOverrideFilter$Builder::wrap_Object(StemmerOverrideFilter$Builder(((t_StemmerOverrideFilter$Builder *) arg)->object.this$));
          }
          static PyObject *t_StemmerOverrideFilter$Builder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StemmerOverrideFilter$Builder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StemmerOverrideFilter$Builder_init_(t_StemmerOverrideFilter$Builder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                StemmerOverrideFilter$Builder object((jobject) NULL);

                INT_CALL(object = StemmerOverrideFilter$Builder());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jboolean a0;
                StemmerOverrideFilter$Builder object((jobject) NULL);

                if (!parseArgs(args, "Z", &a0))
                {
                  INT_CALL(object = StemmerOverrideFilter$Builder(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StemmerOverrideFilter$Builder_add(t_StemmerOverrideFilter$Builder *self, PyObject *args)
          {
            ::java::lang::CharSequence a0((jobject) NULL);
            ::java::lang::CharSequence a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_StemmerOverrideFilter$Builder_build(t_StemmerOverrideFilter$Builder *self)
          {
            ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap result((jobject) NULL);
            OBJ_CALL(result = self->object.build());
            return ::org::apache::lucene::analysis::miscellaneous::t_StemmerOverrideFilter$StemmerOverrideMap::wrap_Object(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkTokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {

          ::java::lang::Class *TeeSinkTokenFilter$SinkTokenStream::class$ = NULL;
          jmethodID *TeeSinkTokenFilter$SinkTokenStream::mids$ = NULL;
          bool TeeSinkTokenFilter$SinkTokenStream::live$ = false;

          jclass TeeSinkTokenFilter$SinkTokenStream::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkTokenStream");

              mids$ = new jmethodID[max_mid];
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void TeeSinkTokenFilter$SinkTokenStream::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean TeeSinkTokenFilter$SinkTokenStream::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void TeeSinkTokenFilter$SinkTokenStream::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_end(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args);
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_incrementToken(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args);
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_reset(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args);

          static PyMethodDef t_TeeSinkTokenFilter$SinkTokenStream__methods_[] = {
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkTokenStream, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkTokenStream, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkTokenStream, end, METH_VARARGS),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkTokenStream, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkTokenStream, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TeeSinkTokenFilter$SinkTokenStream, t_TeeSinkTokenFilter$SinkTokenStream, ::org::apache::lucene::analysis::TokenStream, TeeSinkTokenFilter$SinkTokenStream, abstract_init, 0, 0, 0, 0, 0);

          void t_TeeSinkTokenFilter$SinkTokenStream::install(PyObject *module)
          {
            installType(&PY_TYPE(TeeSinkTokenFilter$SinkTokenStream), module, "TeeSinkTokenFilter$SinkTokenStream", 0);
          }

          void t_TeeSinkTokenFilter$SinkTokenStream::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter$SinkTokenStream).tp_dict, "class_", make_descriptor(TeeSinkTokenFilter$SinkTokenStream::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter$SinkTokenStream).tp_dict, "wrapfn_", make_descriptor(t_TeeSinkTokenFilter$SinkTokenStream::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter$SinkTokenStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TeeSinkTokenFilter$SinkTokenStream::initializeClass, 1)))
              return NULL;
            return t_TeeSinkTokenFilter$SinkTokenStream::wrap_Object(TeeSinkTokenFilter$SinkTokenStream(((t_TeeSinkTokenFilter$SinkTokenStream *) arg)->object.this$));
          }
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TeeSinkTokenFilter$SinkTokenStream::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_end(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(TeeSinkTokenFilter$SinkTokenStream), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_incrementToken(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TeeSinkTokenFilter$SinkTokenStream), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_reset(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(TeeSinkTokenFilter$SinkTokenStream), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/WordBreakSpellChecker.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/spell/CombineSuggestion.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "org/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod.h"
#include "org/apache/lucene/search/spell/SuggestMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *WordBreakSpellChecker::class$ = NULL;
          jmethodID *WordBreakSpellChecker::mids$ = NULL;
          bool WordBreakSpellChecker::live$ = false;
          ::org::apache::lucene::index::Term *WordBreakSpellChecker::SEPARATOR_TERM = NULL;

          jclass WordBreakSpellChecker::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/WordBreakSpellChecker");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getMaxChanges_54c6a179] = env->getMethodID(cls, "getMaxChanges", "()I");
              mids$[mid_getMaxCombineWordLength_54c6a179] = env->getMethodID(cls, "getMaxCombineWordLength", "()I");
              mids$[mid_getMaxEvaluations_54c6a179] = env->getMethodID(cls, "getMaxEvaluations", "()I");
              mids$[mid_getMinBreakWordLength_54c6a179] = env->getMethodID(cls, "getMinBreakWordLength", "()I");
              mids$[mid_getMinSuggestionFrequency_54c6a179] = env->getMethodID(cls, "getMinSuggestionFrequency", "()I");
              mids$[mid_setMaxChanges_39c7bd3c] = env->getMethodID(cls, "setMaxChanges", "(I)V");
              mids$[mid_setMaxCombineWordLength_39c7bd3c] = env->getMethodID(cls, "setMaxCombineWordLength", "(I)V");
              mids$[mid_setMaxEvaluations_39c7bd3c] = env->getMethodID(cls, "setMaxEvaluations", "(I)V");
              mids$[mid_setMinBreakWordLength_39c7bd3c] = env->getMethodID(cls, "setMinBreakWordLength", "(I)V");
              mids$[mid_setMinSuggestionFrequency_39c7bd3c] = env->getMethodID(cls, "setMinSuggestionFrequency", "(I)V");
              mids$[mid_suggestWordBreaks_50deeffc] = env->getMethodID(cls, "suggestWordBreaks", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/spell/SuggestMode;Lorg/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod;)[[Lorg/apache/lucene/search/spell/SuggestWord;");
              mids$[mid_suggestWordCombinations_6d229e7f] = env->getMethodID(cls, "suggestWordCombinations", "([Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/spell/SuggestMode;)[Lorg/apache/lucene/search/spell/CombineSuggestion;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              SEPARATOR_TERM = new ::org::apache::lucene::index::Term(env->getStaticObjectField(cls, "SEPARATOR_TERM", "Lorg/apache/lucene/index/Term;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WordBreakSpellChecker::WordBreakSpellChecker() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint WordBreakSpellChecker::getMaxChanges() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxChanges_54c6a179]);
          }

          jint WordBreakSpellChecker::getMaxCombineWordLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxCombineWordLength_54c6a179]);
          }

          jint WordBreakSpellChecker::getMaxEvaluations() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxEvaluations_54c6a179]);
          }

          jint WordBreakSpellChecker::getMinBreakWordLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinBreakWordLength_54c6a179]);
          }

          jint WordBreakSpellChecker::getMinSuggestionFrequency() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinSuggestionFrequency_54c6a179]);
          }

          void WordBreakSpellChecker::setMaxChanges(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxChanges_39c7bd3c], a0);
          }

          void WordBreakSpellChecker::setMaxCombineWordLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxCombineWordLength_39c7bd3c], a0);
          }

          void WordBreakSpellChecker::setMaxEvaluations(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxEvaluations_39c7bd3c], a0);
          }

          void WordBreakSpellChecker::setMinBreakWordLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinBreakWordLength_39c7bd3c], a0);
          }

          void WordBreakSpellChecker::setMinSuggestionFrequency(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinSuggestionFrequency_39c7bd3c], a0);
          }

          JArray< JArray< ::org::apache::lucene::search::spell::SuggestWord > > WordBreakSpellChecker::suggestWordBreaks(const ::org::apache::lucene::index::Term & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::org::apache::lucene::search::spell::SuggestMode & a3, const ::org::apache::lucene::search::spell::WordBreakSpellChecker$BreakSuggestionSortMethod & a4) const
          {
            return JArray< JArray< ::org::apache::lucene::search::spell::SuggestWord > >(env->callObjectMethod(this$, mids$[mid_suggestWordBreaks_50deeffc], a0.this$, a1, a2.this$, a3.this$, a4.this$));
          }

          JArray< ::org::apache::lucene::search::spell::CombineSuggestion > WordBreakSpellChecker::suggestWordCombinations(const JArray< ::org::apache::lucene::index::Term > & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::org::apache::lucene::search::spell::SuggestMode & a3) const
          {
            return JArray< ::org::apache::lucene::search::spell::CombineSuggestion >(env->callObjectMethod(this$, mids$[mid_suggestWordCombinations_6d229e7f], a0.this$, a1, a2.this$, a3.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_WordBreakSpellChecker_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WordBreakSpellChecker_init_(t_WordBreakSpellChecker *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WordBreakSpellChecker_getMaxChanges(t_WordBreakSpellChecker *self);
          static PyObject *t_WordBreakSpellChecker_getMaxCombineWordLength(t_WordBreakSpellChecker *self);
          static PyObject *t_WordBreakSpellChecker_getMaxEvaluations(t_WordBreakSpellChecker *self);
          static PyObject *t_WordBreakSpellChecker_getMinBreakWordLength(t_WordBreakSpellChecker *self);
          static PyObject *t_WordBreakSpellChecker_getMinSuggestionFrequency(t_WordBreakSpellChecker *self);
          static PyObject *t_WordBreakSpellChecker_setMaxChanges(t_WordBreakSpellChecker *self, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_setMaxCombineWordLength(t_WordBreakSpellChecker *self, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_setMaxEvaluations(t_WordBreakSpellChecker *self, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_setMinBreakWordLength(t_WordBreakSpellChecker *self, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_setMinSuggestionFrequency(t_WordBreakSpellChecker *self, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_suggestWordBreaks(t_WordBreakSpellChecker *self, PyObject *args);
          static PyObject *t_WordBreakSpellChecker_suggestWordCombinations(t_WordBreakSpellChecker *self, PyObject *args);
          static PyObject *t_WordBreakSpellChecker_get__maxChanges(t_WordBreakSpellChecker *self, void *data);
          static int t_WordBreakSpellChecker_set__maxChanges(t_WordBreakSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_WordBreakSpellChecker_get__maxCombineWordLength(t_WordBreakSpellChecker *self, void *data);
          static int t_WordBreakSpellChecker_set__maxCombineWordLength(t_WordBreakSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_WordBreakSpellChecker_get__maxEvaluations(t_WordBreakSpellChecker *self, void *data);
          static int t_WordBreakSpellChecker_set__maxEvaluations(t_WordBreakSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_WordBreakSpellChecker_get__minBreakWordLength(t_WordBreakSpellChecker *self, void *data);
          static int t_WordBreakSpellChecker_set__minBreakWordLength(t_WordBreakSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_WordBreakSpellChecker_get__minSuggestionFrequency(t_WordBreakSpellChecker *self, void *data);
          static int t_WordBreakSpellChecker_set__minSuggestionFrequency(t_WordBreakSpellChecker *self, PyObject *arg, void *data);
          static PyGetSetDef t_WordBreakSpellChecker__fields_[] = {
            DECLARE_GETSET_FIELD(t_WordBreakSpellChecker, maxChanges),
            DECLARE_GETSET_FIELD(t_WordBreakSpellChecker, maxCombineWordLength),
            DECLARE_GETSET_FIELD(t_WordBreakSpellChecker, maxEvaluations),
            DECLARE_GETSET_FIELD(t_WordBreakSpellChecker, minBreakWordLength),
            DECLARE_GETSET_FIELD(t_WordBreakSpellChecker, minSuggestionFrequency),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_WordBreakSpellChecker__methods_[] = {
            DECLARE_METHOD(t_WordBreakSpellChecker, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordBreakSpellChecker, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordBreakSpellChecker, getMaxChanges, METH_NOARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, getMaxCombineWordLength, METH_NOARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, getMaxEvaluations, METH_NOARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, getMinBreakWordLength, METH_NOARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, getMinSuggestionFrequency, METH_NOARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, setMaxChanges, METH_O),
            DECLARE_METHOD(t_WordBreakSpellChecker, setMaxCombineWordLength, METH_O),
            DECLARE_METHOD(t_WordBreakSpellChecker, setMaxEvaluations, METH_O),
            DECLARE_METHOD(t_WordBreakSpellChecker, setMinBreakWordLength, METH_O),
            DECLARE_METHOD(t_WordBreakSpellChecker, setMinSuggestionFrequency, METH_O),
            DECLARE_METHOD(t_WordBreakSpellChecker, suggestWordBreaks, METH_VARARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, suggestWordCombinations, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WordBreakSpellChecker, t_WordBreakSpellChecker, ::java::lang::Object, WordBreakSpellChecker, t_WordBreakSpellChecker_init_, 0, 0, t_WordBreakSpellChecker__fields_, 0, 0);

          void t_WordBreakSpellChecker::install(PyObject *module)
          {
            installType(&PY_TYPE(WordBreakSpellChecker), module, "WordBreakSpellChecker", 0);
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker).tp_dict, "BreakSuggestionSortMethod", make_descriptor(&PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod)));
          }

          void t_WordBreakSpellChecker::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker).tp_dict, "class_", make_descriptor(WordBreakSpellChecker::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker).tp_dict, "wrapfn_", make_descriptor(t_WordBreakSpellChecker::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(WordBreakSpellChecker::initializeClass);
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker).tp_dict, "SEPARATOR_TERM", make_descriptor(::org::apache::lucene::index::t_Term::wrap_Object(*WordBreakSpellChecker::SEPARATOR_TERM)));
          }

          static PyObject *t_WordBreakSpellChecker_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordBreakSpellChecker::initializeClass, 1)))
              return NULL;
            return t_WordBreakSpellChecker::wrap_Object(WordBreakSpellChecker(((t_WordBreakSpellChecker *) arg)->object.this$));
          }
          static PyObject *t_WordBreakSpellChecker_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordBreakSpellChecker::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WordBreakSpellChecker_init_(t_WordBreakSpellChecker *self, PyObject *args, PyObject *kwds)
          {
            WordBreakSpellChecker object((jobject) NULL);

            INT_CALL(object = WordBreakSpellChecker());
            self->object = object;

            return 0;
          }

          static PyObject *t_WordBreakSpellChecker_getMaxChanges(t_WordBreakSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxChanges());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_WordBreakSpellChecker_getMaxCombineWordLength(t_WordBreakSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxCombineWordLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_WordBreakSpellChecker_getMaxEvaluations(t_WordBreakSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxEvaluations());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_WordBreakSpellChecker_getMinBreakWordLength(t_WordBreakSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinBreakWordLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_WordBreakSpellChecker_getMinSuggestionFrequency(t_WordBreakSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinSuggestionFrequency());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_WordBreakSpellChecker_setMaxChanges(t_WordBreakSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxChanges(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxChanges", arg);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_setMaxCombineWordLength(t_WordBreakSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxCombineWordLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxCombineWordLength", arg);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_setMaxEvaluations(t_WordBreakSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxEvaluations(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxEvaluations", arg);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_setMinBreakWordLength(t_WordBreakSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinBreakWordLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinBreakWordLength", arg);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_setMinSuggestionFrequency(t_WordBreakSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinSuggestionFrequency(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinSuggestionFrequency", arg);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_suggestWordBreaks(t_WordBreakSpellChecker *self, PyObject *args)
          {
            ::org::apache::lucene::index::Term a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
            ::org::apache::lucene::search::spell::SuggestMode a3((jobject) NULL);
            PyTypeObject **p3;
            ::org::apache::lucene::search::spell::WordBreakSpellChecker$BreakSuggestionSortMethod a4((jobject) NULL);
            PyTypeObject **p4;
            JArray< JArray< ::org::apache::lucene::search::spell::SuggestWord > > result((jobject) NULL);

            if (!parseArgs(args, "kIkKK", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, ::org::apache::lucene::search::spell::WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_, &a4, &p4, ::org::apache::lucene::search::spell::t_WordBreakSpellChecker$BreakSuggestionSortMethod::parameters_))
            {
              OBJ_CALL(result = self->object.suggestWordBreaks(a0, a1, a2, a3, a4));
              return JArray<jobject>(result.this$).wrap(NULL);
            }

            PyErr_SetArgsError((PyObject *) self, "suggestWordBreaks", args);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_suggestWordCombinations(t_WordBreakSpellChecker *self, PyObject *args)
          {
            JArray< ::org::apache::lucene::index::Term > a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
            ::org::apache::lucene::search::spell::SuggestMode a3((jobject) NULL);
            PyTypeObject **p3;
            JArray< ::org::apache::lucene::search::spell::CombineSuggestion > result((jobject) NULL);

            if (!parseArgs(args, "[kIkK", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_))
            {
              OBJ_CALL(result = self->object.suggestWordCombinations(a0, a1, a2, a3));
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spell::t_CombineSuggestion::wrap_jobject);
            }

            PyErr_SetArgsError((PyObject *) self, "suggestWordCombinations", args);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_get__maxChanges(t_WordBreakSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxChanges());
            return PyInt_FromLong((long) value);
          }
          static int t_WordBreakSpellChecker_set__maxChanges(t_WordBreakSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxChanges(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxChanges", arg);
            return -1;
          }

          static PyObject *t_WordBreakSpellChecker_get__maxCombineWordLength(t_WordBreakSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxCombineWordLength());
            return PyInt_FromLong((long) value);
          }
          static int t_WordBreakSpellChecker_set__maxCombineWordLength(t_WordBreakSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxCombineWordLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxCombineWordLength", arg);
            return -1;
          }

          static PyObject *t_WordBreakSpellChecker_get__maxEvaluations(t_WordBreakSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxEvaluations());
            return PyInt_FromLong((long) value);
          }
          static int t_WordBreakSpellChecker_set__maxEvaluations(t_WordBreakSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxEvaluations(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxEvaluations", arg);
            return -1;
          }

          static PyObject *t_WordBreakSpellChecker_get__minBreakWordLength(t_WordBreakSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinBreakWordLength());
            return PyInt_FromLong((long) value);
          }
          static int t_WordBreakSpellChecker_set__minBreakWordLength(t_WordBreakSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinBreakWordLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minBreakWordLength", arg);
            return -1;
          }

          static PyObject *t_WordBreakSpellChecker_get__minSuggestionFrequency(t_WordBreakSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinSuggestionFrequency());
            return PyInt_FromLong((long) value);
          }
          static int t_WordBreakSpellChecker_set__minSuggestionFrequency(t_WordBreakSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinSuggestionFrequency(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minSuggestionFrequency", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicStemmer::class$ = NULL;
          jmethodID *ArabicStemmer::mids$ = NULL;
          bool ArabicStemmer::live$ = false;
          jchar ArabicStemmer::ALEF = (jchar) 0;
          jchar ArabicStemmer::BEH = (jchar) 0;
          jchar ArabicStemmer::FEH = (jchar) 0;
          jchar ArabicStemmer::HEH = (jchar) 0;
          jchar ArabicStemmer::KAF = (jchar) 0;
          jchar ArabicStemmer::LAM = (jchar) 0;
          jchar ArabicStemmer::NOON = (jchar) 0;
          jchar ArabicStemmer::TEH = (jchar) 0;
          jchar ArabicStemmer::TEH_MARBUTA = (jchar) 0;
          jchar ArabicStemmer::WAW = (jchar) 0;
          jchar ArabicStemmer::YEH = (jchar) 0;
          JArray< JArray< jchar > > *ArabicStemmer::prefixes = NULL;
          JArray< JArray< jchar > > *ArabicStemmer::suffixes = NULL;

          jclass ArabicStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");
              mids$[mid_stemPrefix_ec6430eb] = env->getMethodID(cls, "stemPrefix", "([CI)I");
              mids$[mid_stemSuffix_ec6430eb] = env->getMethodID(cls, "stemSuffix", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ALEF = env->getStaticCharField(cls, "ALEF");
              BEH = env->getStaticCharField(cls, "BEH");
              FEH = env->getStaticCharField(cls, "FEH");
              HEH = env->getStaticCharField(cls, "HEH");
              KAF = env->getStaticCharField(cls, "KAF");
              LAM = env->getStaticCharField(cls, "LAM");
              NOON = env->getStaticCharField(cls, "NOON");
              TEH = env->getStaticCharField(cls, "TEH");
              TEH_MARBUTA = env->getStaticCharField(cls, "TEH_MARBUTA");
              WAW = env->getStaticCharField(cls, "WAW");
              YEH = env->getStaticCharField(cls, "YEH");
              prefixes = new JArray< JArray< jchar > >(env->getStaticObjectField(cls, "prefixes", "[[C"));
              suffixes = new JArray< JArray< jchar > >(env->getStaticObjectField(cls, "suffixes", "[[C"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicStemmer::ArabicStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint ArabicStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }

          jint ArabicStemmer::stemPrefix(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stemPrefix_ec6430eb], a0.this$, a1);
          }

          jint ArabicStemmer::stemSuffix(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stemSuffix_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicStemmer_init_(t_ArabicStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicStemmer_stem(t_ArabicStemmer *self, PyObject *args);
          static PyObject *t_ArabicStemmer_stemPrefix(t_ArabicStemmer *self, PyObject *args);
          static PyObject *t_ArabicStemmer_stemSuffix(t_ArabicStemmer *self, PyObject *args);

          static PyMethodDef t_ArabicStemmer__methods_[] = {
            DECLARE_METHOD(t_ArabicStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemmer, stem, METH_VARARGS),
            DECLARE_METHOD(t_ArabicStemmer, stemPrefix, METH_VARARGS),
            DECLARE_METHOD(t_ArabicStemmer, stemSuffix, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicStemmer, t_ArabicStemmer, ::java::lang::Object, ArabicStemmer, t_ArabicStemmer_init_, 0, 0, 0, 0, 0);

          void t_ArabicStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicStemmer), module, "ArabicStemmer", 0);
          }

          void t_ArabicStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "class_", make_descriptor(ArabicStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "wrapfn_", make_descriptor(t_ArabicStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ArabicStemmer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "ALEF", make_descriptor(ArabicStemmer::ALEF));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "BEH", make_descriptor(ArabicStemmer::BEH));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "FEH", make_descriptor(ArabicStemmer::FEH));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "HEH", make_descriptor(ArabicStemmer::HEH));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "KAF", make_descriptor(ArabicStemmer::KAF));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "LAM", make_descriptor(ArabicStemmer::LAM));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "NOON", make_descriptor(ArabicStemmer::NOON));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "TEH", make_descriptor(ArabicStemmer::TEH));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "TEH_MARBUTA", make_descriptor(ArabicStemmer::TEH_MARBUTA));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "WAW", make_descriptor(ArabicStemmer::WAW));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "YEH", make_descriptor(ArabicStemmer::YEH));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "prefixes", make_descriptor(JArray<jobject>(ArabicStemmer::prefixes->this$).wrap(NULL)));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "suffixes", make_descriptor(JArray<jobject>(ArabicStemmer::suffixes->this$).wrap(NULL)));
          }

          static PyObject *t_ArabicStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicStemmer::initializeClass, 1)))
              return NULL;
            return t_ArabicStemmer::wrap_Object(ArabicStemmer(((t_ArabicStemmer *) arg)->object.this$));
          }
          static PyObject *t_ArabicStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicStemmer_init_(t_ArabicStemmer *self, PyObject *args, PyObject *kwds)
          {
            ArabicStemmer object((jobject) NULL);

            INT_CALL(object = ArabicStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_ArabicStemmer_stem(t_ArabicStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }

          static PyObject *t_ArabicStemmer_stemPrefix(t_ArabicStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stemPrefix(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stemPrefix", args);
            return NULL;
          }

          static PyObject *t_ArabicStemmer_stemSuffix(t_ArabicStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stemSuffix(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stemSuffix", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40SkipListReader.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40SkipListReader::class$ = NULL;
          jmethodID *Lucene40SkipListReader::mids$ = NULL;
          bool Lucene40SkipListReader::live$ = false;

          jclass Lucene40SkipListReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40SkipListReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_949015ba] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IndexInput;II)V");
              mids$[mid_getFreqPointer_54c6a17a] = env->getMethodID(cls, "getFreqPointer", "()J");
              mids$[mid_getOffsetLength_54c6a179] = env->getMethodID(cls, "getOffsetLength", "()I");
              mids$[mid_getPayloadLength_54c6a179] = env->getMethodID(cls, "getPayloadLength", "()I");
              mids$[mid_getProxPointer_54c6a17a] = env->getMethodID(cls, "getProxPointer", "()J");
              mids$[mid_init_05c5678f] = env->getMethodID(cls, "init", "(JJJIZZ)V");
              mids$[mid_seekChild_39c7bd3c] = env->getMethodID(cls, "seekChild", "(I)V");
              mids$[mid_setLastSkipData_39c7bd3c] = env->getMethodID(cls, "setLastSkipData", "(I)V");
              mids$[mid_readSkipData_5203bb2b] = env->getMethodID(cls, "readSkipData", "(ILorg/apache/lucene/store/IndexInput;)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40SkipListReader::Lucene40SkipListReader(const ::org::apache::lucene::store::IndexInput & a0, jint a1, jint a2) : ::org::apache::lucene::codecs::MultiLevelSkipListReader(env->newObject(initializeClass, &mids$, mid_init$_949015ba, a0.this$, a1, a2)) {}

          jlong Lucene40SkipListReader::getFreqPointer() const
          {
            return env->callLongMethod(this$, mids$[mid_getFreqPointer_54c6a17a]);
          }

          jint Lucene40SkipListReader::getOffsetLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getOffsetLength_54c6a179]);
          }

          jint Lucene40SkipListReader::getPayloadLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getPayloadLength_54c6a179]);
          }

          jlong Lucene40SkipListReader::getProxPointer() const
          {
            return env->callLongMethod(this$, mids$[mid_getProxPointer_54c6a17a]);
          }

          void Lucene40SkipListReader::init(jlong a0, jlong a1, jlong a2, jint a3, jboolean a4, jboolean a5) const
          {
            env->callVoidMethod(this$, mids$[mid_init_05c5678f], a0, a1, a2, a3, a4, a5);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40SkipListReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40SkipListReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40SkipListReader_init_(t_Lucene40SkipListReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40SkipListReader_getFreqPointer(t_Lucene40SkipListReader *self);
          static PyObject *t_Lucene40SkipListReader_getOffsetLength(t_Lucene40SkipListReader *self);
          static PyObject *t_Lucene40SkipListReader_getPayloadLength(t_Lucene40SkipListReader *self);
          static PyObject *t_Lucene40SkipListReader_getProxPointer(t_Lucene40SkipListReader *self);
          static PyObject *t_Lucene40SkipListReader_init(t_Lucene40SkipListReader *self, PyObject *args);
          static PyObject *t_Lucene40SkipListReader_get__freqPointer(t_Lucene40SkipListReader *self, void *data);
          static PyObject *t_Lucene40SkipListReader_get__offsetLength(t_Lucene40SkipListReader *self, void *data);
          static PyObject *t_Lucene40SkipListReader_get__payloadLength(t_Lucene40SkipListReader *self, void *data);
          static PyObject *t_Lucene40SkipListReader_get__proxPointer(t_Lucene40SkipListReader *self, void *data);
          static PyGetSetDef t_Lucene40SkipListReader__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene40SkipListReader, freqPointer),
            DECLARE_GET_FIELD(t_Lucene40SkipListReader, offsetLength),
            DECLARE_GET_FIELD(t_Lucene40SkipListReader, payloadLength),
            DECLARE_GET_FIELD(t_Lucene40SkipListReader, proxPointer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene40SkipListReader__methods_[] = {
            DECLARE_METHOD(t_Lucene40SkipListReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SkipListReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SkipListReader, getFreqPointer, METH_NOARGS),
            DECLARE_METHOD(t_Lucene40SkipListReader, getOffsetLength, METH_NOARGS),
            DECLARE_METHOD(t_Lucene40SkipListReader, getPayloadLength, METH_NOARGS),
            DECLARE_METHOD(t_Lucene40SkipListReader, getProxPointer, METH_NOARGS),
            DECLARE_METHOD(t_Lucene40SkipListReader, init, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40SkipListReader, t_Lucene40SkipListReader, ::org::apache::lucene::codecs::MultiLevelSkipListReader, Lucene40SkipListReader, t_Lucene40SkipListReader_init_, 0, 0, t_Lucene40SkipListReader__fields_, 0, 0);

          void t_Lucene40SkipListReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40SkipListReader), module, "Lucene40SkipListReader", 0);
          }

          void t_Lucene40SkipListReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40SkipListReader).tp_dict, "class_", make_descriptor(Lucene40SkipListReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40SkipListReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene40SkipListReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40SkipListReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40SkipListReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40SkipListReader::initializeClass, 1)))
              return NULL;
            return t_Lucene40SkipListReader::wrap_Object(Lucene40SkipListReader(((t_Lucene40SkipListReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene40SkipListReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40SkipListReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40SkipListReader_init_(t_Lucene40SkipListReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            jint a1;
            jint a2;
            Lucene40SkipListReader object((jobject) NULL);

            if (!parseArgs(args, "kII", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = Lucene40SkipListReader(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene40SkipListReader_getFreqPointer(t_Lucene40SkipListReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getFreqPointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Lucene40SkipListReader_getOffsetLength(t_Lucene40SkipListReader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getOffsetLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Lucene40SkipListReader_getPayloadLength(t_Lucene40SkipListReader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPayloadLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Lucene40SkipListReader_getProxPointer(t_Lucene40SkipListReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getProxPointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Lucene40SkipListReader_init(t_Lucene40SkipListReader *self, PyObject *args)
          {
            jlong a0;
            jlong a1;
            jlong a2;
            jint a3;
            jboolean a4;
            jboolean a5;

            if (!parseArgs(args, "JJJIZZ", &a0, &a1, &a2, &a3, &a4, &a5))
            {
              OBJ_CALL(self->object.init(a0, a1, a2, a3, a4, a5));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40SkipListReader), (PyObject *) self, "init", args, 2);
          }

          static PyObject *t_Lucene40SkipListReader_get__freqPointer(t_Lucene40SkipListReader *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getFreqPointer());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_Lucene40SkipListReader_get__offsetLength(t_Lucene40SkipListReader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getOffsetLength());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Lucene40SkipListReader_get__payloadLength(t_Lucene40SkipListReader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPayloadLength());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Lucene40SkipListReader_get__proxPointer(t_Lucene40SkipListReader *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getProxPointer());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanBuilderBase.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanBuilderBase::class$ = NULL;
            jmethodID *SpanBuilderBase::mids$ = NULL;
            bool SpanBuilderBase::live$ = false;

            jclass SpanBuilderBase::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanBuilderBase");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanBuilderBase::SpanBuilderBase() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanBuilderBase_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanBuilderBase_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanBuilderBase_init_(t_SpanBuilderBase *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanBuilderBase__methods_[] = {
              DECLARE_METHOD(t_SpanBuilderBase, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanBuilderBase, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanBuilderBase, t_SpanBuilderBase, ::java::lang::Object, SpanBuilderBase, t_SpanBuilderBase_init_, 0, 0, 0, 0, 0);

            void t_SpanBuilderBase::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanBuilderBase), module, "SpanBuilderBase", 0);
            }

            void t_SpanBuilderBase::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanBuilderBase).tp_dict, "class_", make_descriptor(SpanBuilderBase::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanBuilderBase).tp_dict, "wrapfn_", make_descriptor(t_SpanBuilderBase::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanBuilderBase).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanBuilderBase_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanBuilderBase::initializeClass, 1)))
                return NULL;
              return t_SpanBuilderBase::wrap_Object(SpanBuilderBase(((t_SpanBuilderBase *) arg)->object.this$));
            }
            static PyObject *t_SpanBuilderBase_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanBuilderBase::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanBuilderBase_init_(t_SpanBuilderBase *self, PyObject *args, PyObject *kwds)
            {
              SpanBuilderBase object((jobject) NULL);

              INT_CALL(object = SpanBuilderBase());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/FlushInfo.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *FlushInfo::class$ = NULL;
        jmethodID *FlushInfo::mids$ = NULL;
        jfieldID *FlushInfo::fids$ = NULL;
        bool FlushInfo::live$ = false;

        jclass FlushInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/FlushInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_03b232b5] = env->getMethodID(cls, "<init>", "(IJ)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_estimatedSegmentSize] = env->getFieldID(cls, "estimatedSegmentSize", "J");
            fids$[fid_numDocs] = env->getFieldID(cls, "numDocs", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FlushInfo::FlushInfo(jint a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_03b232b5, a0, a1)) {}

        jboolean FlushInfo::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint FlushInfo::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String FlushInfo::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jlong FlushInfo::_get_estimatedSegmentSize() const
        {
          return env->getLongField(this$, fids$[fid_estimatedSegmentSize]);
        }

        jint FlushInfo::_get_numDocs() const
        {
          return env->getIntField(this$, fids$[fid_numDocs]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_FlushInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FlushInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FlushInfo_init_(t_FlushInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FlushInfo_equals(t_FlushInfo *self, PyObject *args);
        static PyObject *t_FlushInfo_hashCode(t_FlushInfo *self, PyObject *args);
        static PyObject *t_FlushInfo_toString(t_FlushInfo *self, PyObject *args);
        static PyObject *t_FlushInfo_get__estimatedSegmentSize(t_FlushInfo *self, void *data);
        static PyObject *t_FlushInfo_get__numDocs(t_FlushInfo *self, void *data);

        static PyGetSetDef t_FlushInfo__fields_[] = {
          DECLARE_GET_FIELD(t_FlushInfo, estimatedSegmentSize),
          DECLARE_GET_FIELD(t_FlushInfo, numDocs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FlushInfo__methods_[] = {
          DECLARE_METHOD(t_FlushInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FlushInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FlushInfo, equals, METH_VARARGS),
          DECLARE_METHOD(t_FlushInfo, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FlushInfo, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FlushInfo, t_FlushInfo, ::java::lang::Object, FlushInfo, t_FlushInfo_init_, 0, 0, t_FlushInfo__fields_, 0, 0);

        void t_FlushInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(FlushInfo), module, "FlushInfo", 0);
        }

        void t_FlushInfo::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FlushInfo).tp_dict, "class_", make_descriptor(FlushInfo::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FlushInfo).tp_dict, "wrapfn_", make_descriptor(t_FlushInfo::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FlushInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FlushInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FlushInfo::initializeClass, 1)))
            return NULL;
          return t_FlushInfo::wrap_Object(FlushInfo(((t_FlushInfo *) arg)->object.this$));
        }
        static PyObject *t_FlushInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FlushInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FlushInfo_init_(t_FlushInfo *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jlong a1;
          FlushInfo object((jobject) NULL);

          if (!parseArgs(args, "IJ", &a0, &a1))
          {
            INT_CALL(object = FlushInfo(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FlushInfo_equals(t_FlushInfo *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FlushInfo), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FlushInfo_hashCode(t_FlushInfo *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FlushInfo), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FlushInfo_toString(t_FlushInfo *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FlushInfo), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FlushInfo_get__estimatedSegmentSize(t_FlushInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_estimatedSegmentSize());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_FlushInfo_get__numDocs(t_FlushInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_numDocs());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/function/FunctionAllGroupsCollector.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {

            ::java::lang::Class *FunctionAllGroupsCollector::class$ = NULL;
            jmethodID *FunctionAllGroupsCollector::mids$ = NULL;
            bool FunctionAllGroupsCollector::live$ = false;

            jclass FunctionAllGroupsCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/function/FunctionAllGroupsCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_9d3ebac8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Ljava/util/Map;)V");
                mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
                mids$[mid_getGroups_2d2d7de4] = env->getMethodID(cls, "getGroups", "()Ljava/util/Collection;");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FunctionAllGroupsCollector::FunctionAllGroupsCollector(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::java::util::Map & a1) : ::org::apache::lucene::search::grouping::AbstractAllGroupsCollector(env->newObject(initializeClass, &mids$, mid_init$_9d3ebac8, a0.this$, a1.this$)) {}

            void FunctionAllGroupsCollector::collect(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
            }

            ::java::util::Collection FunctionAllGroupsCollector::getGroups() const
            {
              return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getGroups_2d2d7de4]));
            }

            void FunctionAllGroupsCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {
            static PyObject *t_FunctionAllGroupsCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionAllGroupsCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionAllGroupsCollector_of_(t_FunctionAllGroupsCollector *self, PyObject *args);
            static int t_FunctionAllGroupsCollector_init_(t_FunctionAllGroupsCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FunctionAllGroupsCollector_collect(t_FunctionAllGroupsCollector *self, PyObject *args);
            static PyObject *t_FunctionAllGroupsCollector_getGroups(t_FunctionAllGroupsCollector *self, PyObject *args);
            static PyObject *t_FunctionAllGroupsCollector_setNextReader(t_FunctionAllGroupsCollector *self, PyObject *args);
            static PyObject *t_FunctionAllGroupsCollector_get__groups(t_FunctionAllGroupsCollector *self, void *data);
            static int t_FunctionAllGroupsCollector_set__nextReader(t_FunctionAllGroupsCollector *self, PyObject *arg, void *data);
            static PyObject *t_FunctionAllGroupsCollector_get__parameters_(t_FunctionAllGroupsCollector *self, void *data);
            static PyGetSetDef t_FunctionAllGroupsCollector__fields_[] = {
              DECLARE_GET_FIELD(t_FunctionAllGroupsCollector, groups),
              DECLARE_SET_FIELD(t_FunctionAllGroupsCollector, nextReader),
              DECLARE_GET_FIELD(t_FunctionAllGroupsCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FunctionAllGroupsCollector__methods_[] = {
              DECLARE_METHOD(t_FunctionAllGroupsCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionAllGroupsCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionAllGroupsCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_FunctionAllGroupsCollector, collect, METH_VARARGS),
              DECLARE_METHOD(t_FunctionAllGroupsCollector, getGroups, METH_VARARGS),
              DECLARE_METHOD(t_FunctionAllGroupsCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FunctionAllGroupsCollector, t_FunctionAllGroupsCollector, ::org::apache::lucene::search::grouping::AbstractAllGroupsCollector, FunctionAllGroupsCollector, t_FunctionAllGroupsCollector_init_, 0, 0, t_FunctionAllGroupsCollector__fields_, 0, 0);
            PyObject *t_FunctionAllGroupsCollector::wrap_Object(const FunctionAllGroupsCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionAllGroupsCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionAllGroupsCollector *self = (t_FunctionAllGroupsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FunctionAllGroupsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionAllGroupsCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionAllGroupsCollector *self = (t_FunctionAllGroupsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FunctionAllGroupsCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(FunctionAllGroupsCollector), module, "FunctionAllGroupsCollector", 0);
            }

            void t_FunctionAllGroupsCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupsCollector).tp_dict, "class_", make_descriptor(FunctionAllGroupsCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupsCollector).tp_dict, "wrapfn_", make_descriptor(t_FunctionAllGroupsCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FunctionAllGroupsCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FunctionAllGroupsCollector::initializeClass, 1)))
                return NULL;
              return t_FunctionAllGroupsCollector::wrap_Object(FunctionAllGroupsCollector(((t_FunctionAllGroupsCollector *) arg)->object.this$));
            }
            static PyObject *t_FunctionAllGroupsCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FunctionAllGroupsCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FunctionAllGroupsCollector_of_(t_FunctionAllGroupsCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_FunctionAllGroupsCollector_init_(t_FunctionAllGroupsCollector *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::java::util::Map a1((jobject) NULL);
              PyTypeObject **p1;
              FunctionAllGroupsCollector object((jobject) NULL);

              if (!parseArgs(args, "kK", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
              {
                INT_CALL(object = FunctionAllGroupsCollector(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::util::mutable$::PY_TYPE(MutableValue);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FunctionAllGroupsCollector_collect(t_FunctionAllGroupsCollector *self, PyObject *args)
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.collect(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionAllGroupsCollector), (PyObject *) self, "collect", args, 2);
            }

            static PyObject *t_FunctionAllGroupsCollector_getGroups(t_FunctionAllGroupsCollector *self, PyObject *args)
            {
              ::java::util::Collection result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getGroups());
                return ::java::util::t_Collection::wrap_Object(result, &::org::apache::lucene::util::mutable$::PY_TYPE(MutableValue));
              }

              return callSuper(&PY_TYPE(FunctionAllGroupsCollector), (PyObject *) self, "getGroups", args, 2);
            }

            static PyObject *t_FunctionAllGroupsCollector_setNextReader(t_FunctionAllGroupsCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionAllGroupsCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_FunctionAllGroupsCollector_get__parameters_(t_FunctionAllGroupsCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static PyObject *t_FunctionAllGroupsCollector_get__groups(t_FunctionAllGroupsCollector *self, void *data)
            {
              ::java::util::Collection value((jobject) NULL);
              OBJ_CALL(value = self->object.getGroups());
              return ::java::util::t_Collection::wrap_Object(value);
            }

            static int t_FunctionAllGroupsCollector_set__nextReader(t_FunctionAllGroupsCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SearcherFactory.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SearcherFactory::class$ = NULL;
        jmethodID *SearcherFactory::mids$ = NULL;
        bool SearcherFactory::live$ = false;

        jclass SearcherFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SearcherFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_newSearcher_bd3e99c0] = env->getMethodID(cls, "newSearcher", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/IndexSearcher;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SearcherFactory::SearcherFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::IndexSearcher SearcherFactory::newSearcher(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::IndexSearcher(env->callObjectMethod(this$, mids$[mid_newSearcher_bd3e99c0], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SearcherFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SearcherFactory_init_(t_SearcherFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SearcherFactory_newSearcher(t_SearcherFactory *self, PyObject *arg);

        static PyMethodDef t_SearcherFactory__methods_[] = {
          DECLARE_METHOD(t_SearcherFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherFactory, newSearcher, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SearcherFactory, t_SearcherFactory, ::java::lang::Object, SearcherFactory, t_SearcherFactory_init_, 0, 0, 0, 0, 0);

        void t_SearcherFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(SearcherFactory), module, "SearcherFactory", 0);
        }

        void t_SearcherFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SearcherFactory).tp_dict, "class_", make_descriptor(SearcherFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SearcherFactory).tp_dict, "wrapfn_", make_descriptor(t_SearcherFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SearcherFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SearcherFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SearcherFactory::initializeClass, 1)))
            return NULL;
          return t_SearcherFactory::wrap_Object(SearcherFactory(((t_SearcherFactory *) arg)->object.this$));
        }
        static PyObject *t_SearcherFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SearcherFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SearcherFactory_init_(t_SearcherFactory *self, PyObject *args, PyObject *kwds)
        {
          SearcherFactory object((jobject) NULL);

          INT_CALL(object = SearcherFactory());
          self->object = object;

          return 0;
        }

        static PyObject *t_SearcherFactory_newSearcher(t_SearcherFactory *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::IndexSearcher result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.newSearcher(a0));
            return ::org::apache::lucene::search::t_IndexSearcher::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "newSearcher", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SimpleMergedSegmentWarmer.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SimpleMergedSegmentWarmer::class$ = NULL;
        jmethodID *SimpleMergedSegmentWarmer::mids$ = NULL;
        bool SimpleMergedSegmentWarmer::live$ = false;

        jclass SimpleMergedSegmentWarmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SimpleMergedSegmentWarmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a5e6dfa2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/InfoStream;)V");
            mids$[mid_warm_c9e29579] = env->getMethodID(cls, "warm", "(Lorg/apache/lucene/index/AtomicReader;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SimpleMergedSegmentWarmer::SimpleMergedSegmentWarmer(const ::org::apache::lucene::util::InfoStream & a0) : ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer(env->newObject(initializeClass, &mids$, mid_init$_a5e6dfa2, a0.this$)) {}

        void SimpleMergedSegmentWarmer::warm(const ::org::apache::lucene::index::AtomicReader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_warm_c9e29579], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SimpleMergedSegmentWarmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleMergedSegmentWarmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SimpleMergedSegmentWarmer_init_(t_SimpleMergedSegmentWarmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SimpleMergedSegmentWarmer_warm(t_SimpleMergedSegmentWarmer *self, PyObject *args);

        static PyMethodDef t_SimpleMergedSegmentWarmer__methods_[] = {
          DECLARE_METHOD(t_SimpleMergedSegmentWarmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleMergedSegmentWarmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleMergedSegmentWarmer, warm, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SimpleMergedSegmentWarmer, t_SimpleMergedSegmentWarmer, ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer, SimpleMergedSegmentWarmer, t_SimpleMergedSegmentWarmer_init_, 0, 0, 0, 0, 0);

        void t_SimpleMergedSegmentWarmer::install(PyObject *module)
        {
          installType(&PY_TYPE(SimpleMergedSegmentWarmer), module, "SimpleMergedSegmentWarmer", 0);
        }

        void t_SimpleMergedSegmentWarmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SimpleMergedSegmentWarmer).tp_dict, "class_", make_descriptor(SimpleMergedSegmentWarmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SimpleMergedSegmentWarmer).tp_dict, "wrapfn_", make_descriptor(t_SimpleMergedSegmentWarmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SimpleMergedSegmentWarmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SimpleMergedSegmentWarmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SimpleMergedSegmentWarmer::initializeClass, 1)))
            return NULL;
          return t_SimpleMergedSegmentWarmer::wrap_Object(SimpleMergedSegmentWarmer(((t_SimpleMergedSegmentWarmer *) arg)->object.this$));
        }
        static PyObject *t_SimpleMergedSegmentWarmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SimpleMergedSegmentWarmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SimpleMergedSegmentWarmer_init_(t_SimpleMergedSegmentWarmer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::InfoStream a0((jobject) NULL);
          SimpleMergedSegmentWarmer object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::InfoStream::initializeClass, &a0))
          {
            INT_CALL(object = SimpleMergedSegmentWarmer(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SimpleMergedSegmentWarmer_warm(t_SimpleMergedSegmentWarmer *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.warm(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SimpleMergedSegmentWarmer), (PyObject *) self, "warm", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *FunctionValues$ValueFiller::class$ = NULL;
          jmethodID *FunctionValues$ValueFiller::mids$ = NULL;
          bool FunctionValues$ValueFiller::live$ = false;

          jclass FunctionValues$ValueFiller::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/FunctionValues$ValueFiller");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fillValue_39c7bd3c] = env->getMethodID(cls, "fillValue", "(I)V");
              mids$[mid_getValue_15ab3811] = env->getMethodID(cls, "getValue", "()Lorg/apache/lucene/util/mutable/MutableValue;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FunctionValues$ValueFiller::FunctionValues$ValueFiller() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void FunctionValues$ValueFiller::fillValue(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_fillValue_39c7bd3c], a0);
          }

          ::org::apache::lucene::util::mutable$::MutableValue FunctionValues$ValueFiller::getValue() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_getValue_15ab3811]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_FunctionValues$ValueFiller_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FunctionValues$ValueFiller_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FunctionValues$ValueFiller_init_(t_FunctionValues$ValueFiller *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FunctionValues$ValueFiller_fillValue(t_FunctionValues$ValueFiller *self, PyObject *arg);
          static PyObject *t_FunctionValues$ValueFiller_getValue(t_FunctionValues$ValueFiller *self);
          static PyObject *t_FunctionValues$ValueFiller_get__value(t_FunctionValues$ValueFiller *self, void *data);
          static PyGetSetDef t_FunctionValues$ValueFiller__fields_[] = {
            DECLARE_GET_FIELD(t_FunctionValues$ValueFiller, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FunctionValues$ValueFiller__methods_[] = {
            DECLARE_METHOD(t_FunctionValues$ValueFiller, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionValues$ValueFiller, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionValues$ValueFiller, fillValue, METH_O),
            DECLARE_METHOD(t_FunctionValues$ValueFiller, getValue, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FunctionValues$ValueFiller, t_FunctionValues$ValueFiller, ::java::lang::Object, FunctionValues$ValueFiller, t_FunctionValues$ValueFiller_init_, 0, 0, t_FunctionValues$ValueFiller__fields_, 0, 0);

          void t_FunctionValues$ValueFiller::install(PyObject *module)
          {
            installType(&PY_TYPE(FunctionValues$ValueFiller), module, "FunctionValues$ValueFiller", 0);
          }

          void t_FunctionValues$ValueFiller::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FunctionValues$ValueFiller).tp_dict, "class_", make_descriptor(FunctionValues$ValueFiller::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FunctionValues$ValueFiller).tp_dict, "wrapfn_", make_descriptor(t_FunctionValues$ValueFiller::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FunctionValues$ValueFiller).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FunctionValues$ValueFiller_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FunctionValues$ValueFiller::initializeClass, 1)))
              return NULL;
            return t_FunctionValues$ValueFiller::wrap_Object(FunctionValues$ValueFiller(((t_FunctionValues$ValueFiller *) arg)->object.this$));
          }
          static PyObject *t_FunctionValues$ValueFiller_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FunctionValues$ValueFiller::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FunctionValues$ValueFiller_init_(t_FunctionValues$ValueFiller *self, PyObject *args, PyObject *kwds)
          {
            FunctionValues$ValueFiller object((jobject) NULL);

            INT_CALL(object = FunctionValues$ValueFiller());
            self->object = object;

            return 0;
          }

          static PyObject *t_FunctionValues$ValueFiller_fillValue(t_FunctionValues$ValueFiller *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.fillValue(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "fillValue", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues$ValueFiller_getValue(t_FunctionValues$ValueFiller *self)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);
            OBJ_CALL(result = self->object.getValue());
            return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
          }

          static PyObject *t_FunctionValues$ValueFiller_get__value(t_FunctionValues$ValueFiller *self, void *data)
          {
            ::org::apache::lucene::util::mutable$::MutableValue value((jobject) NULL);
            OBJ_CALL(value = self->object.getValue());
            return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/AppendingDeltaPackedLongBuffer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *AppendingDeltaPackedLongBuffer::class$ = NULL;
          jmethodID *AppendingDeltaPackedLongBuffer::mids$ = NULL;
          bool AppendingDeltaPackedLongBuffer::live$ = false;

          jclass AppendingDeltaPackedLongBuffer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/AppendingDeltaPackedLongBuffer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_init$_a74e6883] = env->getMethodID(cls, "<init>", "(IIF)V");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AppendingDeltaPackedLongBuffer::AppendingDeltaPackedLongBuffer() : ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          AppendingDeltaPackedLongBuffer::AppendingDeltaPackedLongBuffer(jfloat a0) : ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          AppendingDeltaPackedLongBuffer::AppendingDeltaPackedLongBuffer(jint a0, jint a1, jfloat a2) : ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer(env->newObject(initializeClass, &mids$, mid_init$_a74e6883, a0, a1, a2)) {}

          jlong AppendingDeltaPackedLongBuffer::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_AppendingDeltaPackedLongBuffer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AppendingDeltaPackedLongBuffer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AppendingDeltaPackedLongBuffer_init_(t_AppendingDeltaPackedLongBuffer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AppendingDeltaPackedLongBuffer_ramBytesUsed(t_AppendingDeltaPackedLongBuffer *self, PyObject *args);

          static PyMethodDef t_AppendingDeltaPackedLongBuffer__methods_[] = {
            DECLARE_METHOD(t_AppendingDeltaPackedLongBuffer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AppendingDeltaPackedLongBuffer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AppendingDeltaPackedLongBuffer, ramBytesUsed, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AppendingDeltaPackedLongBuffer, t_AppendingDeltaPackedLongBuffer, ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer, AppendingDeltaPackedLongBuffer, t_AppendingDeltaPackedLongBuffer_init_, 0, 0, 0, 0, 0);

          void t_AppendingDeltaPackedLongBuffer::install(PyObject *module)
          {
            installType(&PY_TYPE(AppendingDeltaPackedLongBuffer), module, "AppendingDeltaPackedLongBuffer", 0);
          }

          void t_AppendingDeltaPackedLongBuffer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AppendingDeltaPackedLongBuffer).tp_dict, "class_", make_descriptor(AppendingDeltaPackedLongBuffer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AppendingDeltaPackedLongBuffer).tp_dict, "wrapfn_", make_descriptor(t_AppendingDeltaPackedLongBuffer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AppendingDeltaPackedLongBuffer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AppendingDeltaPackedLongBuffer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AppendingDeltaPackedLongBuffer::initializeClass, 1)))
              return NULL;
            return t_AppendingDeltaPackedLongBuffer::wrap_Object(AppendingDeltaPackedLongBuffer(((t_AppendingDeltaPackedLongBuffer *) arg)->object.this$));
          }
          static PyObject *t_AppendingDeltaPackedLongBuffer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AppendingDeltaPackedLongBuffer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AppendingDeltaPackedLongBuffer_init_(t_AppendingDeltaPackedLongBuffer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                AppendingDeltaPackedLongBuffer object((jobject) NULL);

                INT_CALL(object = AppendingDeltaPackedLongBuffer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                AppendingDeltaPackedLongBuffer object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = AppendingDeltaPackedLongBuffer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                jint a0;
                jint a1;
                jfloat a2;
                AppendingDeltaPackedLongBuffer object((jobject) NULL);

                if (!parseArgs(args, "IIF", &a0, &a1, &a2))
                {
                  INT_CALL(object = AppendingDeltaPackedLongBuffer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AppendingDeltaPackedLongBuffer_ramBytesUsed(t_AppendingDeltaPackedLongBuffer *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(AppendingDeltaPackedLongBuffer), (PyObject *) self, "ramBytesUsed", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/MonotonicBlockPackedReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Accountable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *MonotonicBlockPackedReader::class$ = NULL;
          jmethodID *MonotonicBlockPackedReader::mids$ = NULL;
          bool MonotonicBlockPackedReader::live$ = false;

          jclass MonotonicBlockPackedReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/MonotonicBlockPackedReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_get_0ee6df33] = env->getMethodID(cls, "get", "(J)J");
              mids$[mid_of_796f5dbd] = env->getStaticMethodID(cls, "of", "(Lorg/apache/lucene/store/IndexInput;IIJZ)Lorg/apache/lucene/util/packed/MonotonicBlockPackedReader;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");
              mids$[mid_decodeDelta_0ee6df33] = env->getMethodID(cls, "decodeDelta", "(J)J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jlong MonotonicBlockPackedReader::get(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_0ee6df33], a0);
          }

          MonotonicBlockPackedReader MonotonicBlockPackedReader::of(const ::org::apache::lucene::store::IndexInput & a0, jint a1, jint a2, jlong a3, jboolean a4)
          {
            jclass cls = env->getClass(initializeClass);
            return MonotonicBlockPackedReader(env->callStaticObjectMethod(cls, mids$[mid_of_796f5dbd], a0.this$, a1, a2, a3, a4));
          }

          jlong MonotonicBlockPackedReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jlong MonotonicBlockPackedReader::size() const
          {
            return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_MonotonicBlockPackedReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MonotonicBlockPackedReader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MonotonicBlockPackedReader_get(t_MonotonicBlockPackedReader *self, PyObject *args);
          static PyObject *t_MonotonicBlockPackedReader_of(PyTypeObject *type, PyObject *args);
          static PyObject *t_MonotonicBlockPackedReader_ramBytesUsed(t_MonotonicBlockPackedReader *self);
          static PyObject *t_MonotonicBlockPackedReader_size(t_MonotonicBlockPackedReader *self);

          static PyMethodDef t_MonotonicBlockPackedReader__methods_[] = {
            DECLARE_METHOD(t_MonotonicBlockPackedReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MonotonicBlockPackedReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MonotonicBlockPackedReader, get, METH_VARARGS),
            DECLARE_METHOD(t_MonotonicBlockPackedReader, of, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_MonotonicBlockPackedReader, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_MonotonicBlockPackedReader, size, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MonotonicBlockPackedReader, t_MonotonicBlockPackedReader, ::org::apache::lucene::util::LongValues, MonotonicBlockPackedReader, abstract_init, 0, 0, 0, 0, 0);

          void t_MonotonicBlockPackedReader::install(PyObject *module)
          {
            installType(&PY_TYPE(MonotonicBlockPackedReader), module, "MonotonicBlockPackedReader", 0);
          }

          void t_MonotonicBlockPackedReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MonotonicBlockPackedReader).tp_dict, "class_", make_descriptor(MonotonicBlockPackedReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MonotonicBlockPackedReader).tp_dict, "wrapfn_", make_descriptor(t_MonotonicBlockPackedReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MonotonicBlockPackedReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MonotonicBlockPackedReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MonotonicBlockPackedReader::initializeClass, 1)))
              return NULL;
            return t_MonotonicBlockPackedReader::wrap_Object(MonotonicBlockPackedReader(((t_MonotonicBlockPackedReader *) arg)->object.this$));
          }
          static PyObject *t_MonotonicBlockPackedReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MonotonicBlockPackedReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_MonotonicBlockPackedReader_get(t_MonotonicBlockPackedReader *self, PyObject *args)
          {
            jlong a0;
            jlong result;

            if (!parseArgs(args, "J", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(MonotonicBlockPackedReader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_MonotonicBlockPackedReader_of(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            jint a1;
            jint a2;
            jlong a3;
            jboolean a4;
            MonotonicBlockPackedReader result((jobject) NULL);

            if (!parseArgs(args, "kIIJZ", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::MonotonicBlockPackedReader::of(a0, a1, a2, a3, a4));
              return t_MonotonicBlockPackedReader::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "of", args);
            return NULL;
          }

          static PyObject *t_MonotonicBlockPackedReader_ramBytesUsed(t_MonotonicBlockPackedReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_MonotonicBlockPackedReader_size(t_MonotonicBlockPackedReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ByteBlockPool$DirectAllocator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ByteBlockPool$DirectAllocator::class$ = NULL;
        jmethodID *ByteBlockPool$DirectAllocator::mids$ = NULL;
        bool ByteBlockPool$DirectAllocator::live$ = false;

        jclass ByteBlockPool$DirectAllocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ByteBlockPool$DirectAllocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_recycleByteBlocks_d3ffa89f] = env->getMethodID(cls, "recycleByteBlocks", "([[BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteBlockPool$DirectAllocator::ByteBlockPool$DirectAllocator() : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ByteBlockPool$DirectAllocator::ByteBlockPool$DirectAllocator(jint a0) : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        void ByteBlockPool$DirectAllocator::recycleByteBlocks(const JArray< JArray< jbyte > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleByteBlocks_d3ffa89f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ByteBlockPool$DirectAllocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteBlockPool$DirectAllocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteBlockPool$DirectAllocator_init_(t_ByteBlockPool$DirectAllocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteBlockPool$DirectAllocator_recycleByteBlocks(t_ByteBlockPool$DirectAllocator *self, PyObject *args);

        static PyMethodDef t_ByteBlockPool$DirectAllocator__methods_[] = {
          DECLARE_METHOD(t_ByteBlockPool$DirectAllocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$DirectAllocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$DirectAllocator, recycleByteBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ByteBlockPool$DirectAllocator, t_ByteBlockPool$DirectAllocator, ::org::apache::lucene::util::ByteBlockPool$Allocator, ByteBlockPool$DirectAllocator, t_ByteBlockPool$DirectAllocator_init_, 0, 0, 0, 0, 0);

        void t_ByteBlockPool$DirectAllocator::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteBlockPool$DirectAllocator), module, "ByteBlockPool$DirectAllocator", 0);
        }

        void t_ByteBlockPool$DirectAllocator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$DirectAllocator).tp_dict, "class_", make_descriptor(ByteBlockPool$DirectAllocator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$DirectAllocator).tp_dict, "wrapfn_", make_descriptor(t_ByteBlockPool$DirectAllocator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$DirectAllocator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteBlockPool$DirectAllocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteBlockPool$DirectAllocator::initializeClass, 1)))
            return NULL;
          return t_ByteBlockPool$DirectAllocator::wrap_Object(ByteBlockPool$DirectAllocator(((t_ByteBlockPool$DirectAllocator *) arg)->object.this$));
        }
        static PyObject *t_ByteBlockPool$DirectAllocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteBlockPool$DirectAllocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteBlockPool$DirectAllocator_init_(t_ByteBlockPool$DirectAllocator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ByteBlockPool$DirectAllocator object((jobject) NULL);

              INT_CALL(object = ByteBlockPool$DirectAllocator());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              jint a0;
              ByteBlockPool$DirectAllocator object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = ByteBlockPool$DirectAllocator(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteBlockPool$DirectAllocator_recycleByteBlocks(t_ByteBlockPool$DirectAllocator *self, PyObject *args)
        {
          JArray< JArray< jbyte > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleByteBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ByteBlockPool$DirectAllocator), (PyObject *) self, "recycleByteBlocks", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/function/FunctionSecondPassGroupingCollector.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "org/apache/lucene/search/Sort.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {

            ::java::lang::Class *FunctionSecondPassGroupingCollector::class$ = NULL;
            jmethodID *FunctionSecondPassGroupingCollector::mids$ = NULL;
            bool FunctionSecondPassGroupingCollector::live$ = false;

            jclass FunctionSecondPassGroupingCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/function/FunctionSecondPassGroupingCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_3599aebe] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;Lorg/apache/lucene/search/Sort;Lorg/apache/lucene/search/Sort;IZZZLorg/apache/lucene/queries/function/ValueSource;Ljava/util/Map;)V");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
                mids$[mid_retrieveGroup_e4de8d52] = env->getMethodID(cls, "retrieveGroup", "(I)Lorg/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector$SearchGroupDocs;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FunctionSecondPassGroupingCollector::FunctionSecondPassGroupingCollector(const ::java::util::Collection & a0, const ::org::apache::lucene::search::Sort & a1, const ::org::apache::lucene::search::Sort & a2, jint a3, jboolean a4, jboolean a5, jboolean a6, const ::org::apache::lucene::queries::function::ValueSource & a7, const ::java::util::Map & a8) : ::org::apache::lucene::search::grouping::AbstractSecondPassGroupingCollector(env->newObject(initializeClass, &mids$, mid_init$_3599aebe, a0.this$, a1.this$, a2.this$, a3, a4, a5, a6, a7.this$, a8.this$)) {}

            void FunctionSecondPassGroupingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {
            static PyObject *t_FunctionSecondPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionSecondPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionSecondPassGroupingCollector_of_(t_FunctionSecondPassGroupingCollector *self, PyObject *args);
            static int t_FunctionSecondPassGroupingCollector_init_(t_FunctionSecondPassGroupingCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FunctionSecondPassGroupingCollector_setNextReader(t_FunctionSecondPassGroupingCollector *self, PyObject *args);
            static int t_FunctionSecondPassGroupingCollector_set__nextReader(t_FunctionSecondPassGroupingCollector *self, PyObject *arg, void *data);
            static PyObject *t_FunctionSecondPassGroupingCollector_get__parameters_(t_FunctionSecondPassGroupingCollector *self, void *data);
            static PyGetSetDef t_FunctionSecondPassGroupingCollector__fields_[] = {
              DECLARE_SET_FIELD(t_FunctionSecondPassGroupingCollector, nextReader),
              DECLARE_GET_FIELD(t_FunctionSecondPassGroupingCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FunctionSecondPassGroupingCollector__methods_[] = {
              DECLARE_METHOD(t_FunctionSecondPassGroupingCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionSecondPassGroupingCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionSecondPassGroupingCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_FunctionSecondPassGroupingCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FunctionSecondPassGroupingCollector, t_FunctionSecondPassGroupingCollector, ::org::apache::lucene::search::grouping::AbstractSecondPassGroupingCollector, FunctionSecondPassGroupingCollector, t_FunctionSecondPassGroupingCollector_init_, 0, 0, t_FunctionSecondPassGroupingCollector__fields_, 0, 0);
            PyObject *t_FunctionSecondPassGroupingCollector::wrap_Object(const FunctionSecondPassGroupingCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionSecondPassGroupingCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionSecondPassGroupingCollector *self = (t_FunctionSecondPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FunctionSecondPassGroupingCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionSecondPassGroupingCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionSecondPassGroupingCollector *self = (t_FunctionSecondPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FunctionSecondPassGroupingCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(FunctionSecondPassGroupingCollector), module, "FunctionSecondPassGroupingCollector", 0);
            }

            void t_FunctionSecondPassGroupingCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FunctionSecondPassGroupingCollector).tp_dict, "class_", make_descriptor(FunctionSecondPassGroupingCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FunctionSecondPassGroupingCollector).tp_dict, "wrapfn_", make_descriptor(t_FunctionSecondPassGroupingCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FunctionSecondPassGroupingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FunctionSecondPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FunctionSecondPassGroupingCollector::initializeClass, 1)))
                return NULL;
              return t_FunctionSecondPassGroupingCollector::wrap_Object(FunctionSecondPassGroupingCollector(((t_FunctionSecondPassGroupingCollector *) arg)->object.this$));
            }
            static PyObject *t_FunctionSecondPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FunctionSecondPassGroupingCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FunctionSecondPassGroupingCollector_of_(t_FunctionSecondPassGroupingCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_FunctionSecondPassGroupingCollector_init_(t_FunctionSecondPassGroupingCollector *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::Sort a1((jobject) NULL);
              ::org::apache::lucene::search::Sort a2((jobject) NULL);
              jint a3;
              jboolean a4;
              jboolean a5;
              jboolean a6;
              ::org::apache::lucene::queries::function::ValueSource a7((jobject) NULL);
              ::java::util::Map a8((jobject) NULL);
              PyTypeObject **p8;
              FunctionSecondPassGroupingCollector object((jobject) NULL);

              if (!parseArgs(args, "KkkIZZZkK", ::java::util::Collection::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &p8, ::java::util::t_Map::parameters_))
              {
                INT_CALL(object = FunctionSecondPassGroupingCollector(a0, a1, a2, a3, a4, a5, a6, a7, a8));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::util::mutable$::PY_TYPE(MutableValue);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FunctionSecondPassGroupingCollector_setNextReader(t_FunctionSecondPassGroupingCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionSecondPassGroupingCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_FunctionSecondPassGroupingCollector_get__parameters_(t_FunctionSecondPassGroupingCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static int t_FunctionSecondPassGroupingCollector_set__nextReader(t_FunctionSecondPassGroupingCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/NumericUtils$LongRangeBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *NumericUtils$LongRangeBuilder::class$ = NULL;
        jmethodID *NumericUtils$LongRangeBuilder::mids$ = NULL;
        bool NumericUtils$LongRangeBuilder::live$ = false;

        jclass NumericUtils$LongRangeBuilder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/NumericUtils$LongRangeBuilder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_addRange_594e5ee6] = env->getMethodID(cls, "addRange", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_addRange_42663baa] = env->getMethodID(cls, "addRange", "(JJI)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NumericUtils$LongRangeBuilder::NumericUtils$LongRangeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void NumericUtils$LongRangeBuilder::addRange(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addRange_594e5ee6], a0.this$, a1.this$);
        }

        void NumericUtils$LongRangeBuilder::addRange(jlong a0, jlong a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_addRange_42663baa], a0, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_NumericUtils$LongRangeBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils$LongRangeBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NumericUtils$LongRangeBuilder_init_(t_NumericUtils$LongRangeBuilder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NumericUtils$LongRangeBuilder_addRange(t_NumericUtils$LongRangeBuilder *self, PyObject *args);

        static PyMethodDef t_NumericUtils$LongRangeBuilder__methods_[] = {
          DECLARE_METHOD(t_NumericUtils$LongRangeBuilder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils$LongRangeBuilder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils$LongRangeBuilder, addRange, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericUtils$LongRangeBuilder, t_NumericUtils$LongRangeBuilder, ::java::lang::Object, NumericUtils$LongRangeBuilder, t_NumericUtils$LongRangeBuilder_init_, 0, 0, 0, 0, 0);

        void t_NumericUtils$LongRangeBuilder::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericUtils$LongRangeBuilder), module, "NumericUtils$LongRangeBuilder", 0);
        }

        void t_NumericUtils$LongRangeBuilder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericUtils$LongRangeBuilder).tp_dict, "class_", make_descriptor(NumericUtils$LongRangeBuilder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericUtils$LongRangeBuilder).tp_dict, "wrapfn_", make_descriptor(t_NumericUtils$LongRangeBuilder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericUtils$LongRangeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericUtils$LongRangeBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericUtils$LongRangeBuilder::initializeClass, 1)))
            return NULL;
          return t_NumericUtils$LongRangeBuilder::wrap_Object(NumericUtils$LongRangeBuilder(((t_NumericUtils$LongRangeBuilder *) arg)->object.this$));
        }
        static PyObject *t_NumericUtils$LongRangeBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericUtils$LongRangeBuilder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NumericUtils$LongRangeBuilder_init_(t_NumericUtils$LongRangeBuilder *self, PyObject *args, PyObject *kwds)
        {
          NumericUtils$LongRangeBuilder object((jobject) NULL);

          INT_CALL(object = NumericUtils$LongRangeBuilder());
          self->object = object;

          return 0;
        }

        static PyObject *t_NumericUtils$LongRangeBuilder_addRange(t_NumericUtils$LongRangeBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addRange(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              jlong a0;
              jlong a1;
              jint a2;

              if (!parseArgs(args, "JJI", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.addRange(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addRange", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetSumValueSource.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacetSumValueSource::class$ = NULL;
          jmethodID *TaxonomyFacetSumValueSource::mids$ = NULL;
          bool TaxonomyFacetSumValueSource::live$ = false;

          jclass TaxonomyFacetSumValueSource::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacetSumValueSource");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6182367d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;Lorg/apache/lucene/queries/function/ValueSource;)V");
              mids$[mid_init$_855546e7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/OrdinalsReader;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;Lorg/apache/lucene/queries/function/ValueSource;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyFacetSumValueSource::TaxonomyFacetSumValueSource(const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::FacetsCollector & a2, const ::org::apache::lucene::queries::function::ValueSource & a3) : ::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_6182367d, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          TaxonomyFacetSumValueSource::TaxonomyFacetSumValueSource(const ::org::apache::lucene::facet::taxonomy::OrdinalsReader & a0, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a1, const ::org::apache::lucene::facet::FacetsConfig & a2, const ::org::apache::lucene::facet::FacetsCollector & a3, const ::org::apache::lucene::queries::function::ValueSource & a4) : ::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_855546e7, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetSumValueSource$ScoreValueSource.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacetSumValueSource_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacetSumValueSource_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyFacetSumValueSource_init_(t_TaxonomyFacetSumValueSource *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_TaxonomyFacetSumValueSource__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyFacetSumValueSource, t_TaxonomyFacetSumValueSource, ::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets, TaxonomyFacetSumValueSource, t_TaxonomyFacetSumValueSource_init_, 0, 0, 0, 0, 0);

          void t_TaxonomyFacetSumValueSource::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacetSumValueSource), module, "TaxonomyFacetSumValueSource", 0);
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumValueSource).tp_dict, "ScoreValueSource", make_descriptor(&PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource)));
          }

          void t_TaxonomyFacetSumValueSource::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumValueSource).tp_dict, "class_", make_descriptor(TaxonomyFacetSumValueSource::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumValueSource).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyFacetSumValueSource::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacetSumValueSource_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacetSumValueSource::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacetSumValueSource::wrap_Object(TaxonomyFacetSumValueSource(((t_TaxonomyFacetSumValueSource *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacetSumValueSource_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacetSumValueSource::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyFacetSumValueSource_init_(t_TaxonomyFacetSumValueSource *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a3((jobject) NULL);
                TaxonomyFacetSumValueSource object((jobject) NULL);

                if (!parseArgs(args, "kkkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = TaxonomyFacetSumValueSource(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::facet::taxonomy::OrdinalsReader a0((jobject) NULL);
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a2((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a3((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a4((jobject) NULL);
                TaxonomyFacetSumValueSource object((jobject) NULL);

                if (!parseArgs(args, "kkkkk", ::org::apache::lucene::facet::taxonomy::OrdinalsReader::initializeClass, ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = TaxonomyFacetSumValueSource(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/FlagsAttributeImpl.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/tokenattributes/FlagsAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *FlagsAttributeImpl::class$ = NULL;
          jmethodID *FlagsAttributeImpl::mids$ = NULL;
          bool FlagsAttributeImpl::live$ = false;

          jclass FlagsAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/FlagsAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getFlags_54c6a179] = env->getMethodID(cls, "getFlags", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setFlags_39c7bd3c] = env->getMethodID(cls, "setFlags", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FlagsAttributeImpl::FlagsAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void FlagsAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void FlagsAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jboolean FlagsAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint FlagsAttributeImpl::getFlags() const
          {
            return env->callIntMethod(this$, mids$[mid_getFlags_54c6a179]);
          }

          jint FlagsAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void FlagsAttributeImpl::setFlags(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFlags_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_FlagsAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FlagsAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FlagsAttributeImpl_init_(t_FlagsAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FlagsAttributeImpl_clear(t_FlagsAttributeImpl *self, PyObject *args);
          static PyObject *t_FlagsAttributeImpl_copyTo(t_FlagsAttributeImpl *self, PyObject *args);
          static PyObject *t_FlagsAttributeImpl_equals(t_FlagsAttributeImpl *self, PyObject *args);
          static PyObject *t_FlagsAttributeImpl_getFlags(t_FlagsAttributeImpl *self);
          static PyObject *t_FlagsAttributeImpl_hashCode(t_FlagsAttributeImpl *self, PyObject *args);
          static PyObject *t_FlagsAttributeImpl_setFlags(t_FlagsAttributeImpl *self, PyObject *arg);
          static PyObject *t_FlagsAttributeImpl_get__flags(t_FlagsAttributeImpl *self, void *data);
          static int t_FlagsAttributeImpl_set__flags(t_FlagsAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_FlagsAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_FlagsAttributeImpl, flags),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FlagsAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_FlagsAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FlagsAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FlagsAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_FlagsAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_FlagsAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_FlagsAttributeImpl, getFlags, METH_NOARGS),
            DECLARE_METHOD(t_FlagsAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FlagsAttributeImpl, setFlags, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FlagsAttributeImpl, t_FlagsAttributeImpl, ::org::apache::lucene::util::AttributeImpl, FlagsAttributeImpl, t_FlagsAttributeImpl_init_, 0, 0, t_FlagsAttributeImpl__fields_, 0, 0);

          void t_FlagsAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(FlagsAttributeImpl), module, "FlagsAttributeImpl", 0);
          }

          void t_FlagsAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FlagsAttributeImpl).tp_dict, "class_", make_descriptor(FlagsAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FlagsAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_FlagsAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FlagsAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FlagsAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FlagsAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_FlagsAttributeImpl::wrap_Object(FlagsAttributeImpl(((t_FlagsAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_FlagsAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FlagsAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FlagsAttributeImpl_init_(t_FlagsAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            FlagsAttributeImpl object((jobject) NULL);

            INT_CALL(object = FlagsAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_FlagsAttributeImpl_clear(t_FlagsAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(FlagsAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_FlagsAttributeImpl_copyTo(t_FlagsAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(FlagsAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_FlagsAttributeImpl_equals(t_FlagsAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FlagsAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FlagsAttributeImpl_getFlags(t_FlagsAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getFlags());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FlagsAttributeImpl_hashCode(t_FlagsAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FlagsAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FlagsAttributeImpl_setFlags(t_FlagsAttributeImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setFlags(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFlags", arg);
            return NULL;
          }

          static PyObject *t_FlagsAttributeImpl_get__flags(t_FlagsAttributeImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getFlags());
            return PyInt_FromLong((long) value);
          }
          static int t_FlagsAttributeImpl_set__flags(t_FlagsAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setFlags(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "flags", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/FunctionQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *FunctionQuery::class$ = NULL;
          jmethodID *FunctionQuery::mids$ = NULL;
          bool FunctionQuery::live$ = false;

          jclass FunctionQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/FunctionQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getValueSource_b62b6193] = env->getMethodID(cls, "getValueSource", "()Lorg/apache/lucene/queries/function/ValueSource;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FunctionQuery::FunctionQuery(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

          ::org::apache::lucene::search::Weight FunctionQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          jboolean FunctionQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void FunctionQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          ::org::apache::lucene::queries::function::ValueSource FunctionQuery::getValueSource() const
          {
            return ::org::apache::lucene::queries::function::ValueSource(env->callObjectMethod(this$, mids$[mid_getValueSource_b62b6193]));
          }

          jint FunctionQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query FunctionQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String FunctionQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_FunctionQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FunctionQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FunctionQuery_init_(t_FunctionQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FunctionQuery_createWeight(t_FunctionQuery *self, PyObject *args);
          static PyObject *t_FunctionQuery_equals(t_FunctionQuery *self, PyObject *args);
          static PyObject *t_FunctionQuery_extractTerms(t_FunctionQuery *self, PyObject *args);
          static PyObject *t_FunctionQuery_getValueSource(t_FunctionQuery *self);
          static PyObject *t_FunctionQuery_hashCode(t_FunctionQuery *self, PyObject *args);
          static PyObject *t_FunctionQuery_rewrite(t_FunctionQuery *self, PyObject *args);
          static PyObject *t_FunctionQuery_toString(t_FunctionQuery *self, PyObject *args);
          static PyObject *t_FunctionQuery_get__valueSource(t_FunctionQuery *self, void *data);
          static PyGetSetDef t_FunctionQuery__fields_[] = {
            DECLARE_GET_FIELD(t_FunctionQuery, valueSource),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FunctionQuery__methods_[] = {
            DECLARE_METHOD(t_FunctionQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_FunctionQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_FunctionQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_FunctionQuery, getValueSource, METH_NOARGS),
            DECLARE_METHOD(t_FunctionQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FunctionQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_FunctionQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FunctionQuery, t_FunctionQuery, ::org::apache::lucene::search::Query, FunctionQuery, t_FunctionQuery_init_, 0, 0, t_FunctionQuery__fields_, 0, 0);

          void t_FunctionQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(FunctionQuery), module, "FunctionQuery", 0);
          }

          void t_FunctionQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FunctionQuery).tp_dict, "class_", make_descriptor(FunctionQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FunctionQuery).tp_dict, "wrapfn_", make_descriptor(t_FunctionQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FunctionQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FunctionQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FunctionQuery::initializeClass, 1)))
              return NULL;
            return t_FunctionQuery::wrap_Object(FunctionQuery(((t_FunctionQuery *) arg)->object.this$));
          }
          static PyObject *t_FunctionQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FunctionQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FunctionQuery_init_(t_FunctionQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
            FunctionQuery object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
            {
              INT_CALL(object = FunctionQuery(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FunctionQuery_createWeight(t_FunctionQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FunctionQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_FunctionQuery_equals(t_FunctionQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FunctionQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FunctionQuery_extractTerms(t_FunctionQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(FunctionQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_FunctionQuery_getValueSource(t_FunctionQuery *self)
          {
            ::org::apache::lucene::queries::function::ValueSource result((jobject) NULL);
            OBJ_CALL(result = self->object.getValueSource());
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(result);
          }

          static PyObject *t_FunctionQuery_hashCode(t_FunctionQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FunctionQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FunctionQuery_rewrite(t_FunctionQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FunctionQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_FunctionQuery_toString(t_FunctionQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FunctionQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FunctionQuery_get__valueSource(t_FunctionQuery *self, void *data)
          {
            ::org::apache::lucene::queries::function::ValueSource value((jobject) NULL);
            OBJ_CALL(value = self->object.getValueSource());
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/index/TermContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanMultiTermQueryWrapper::class$ = NULL;
          jmethodID *SpanMultiTermQueryWrapper::mids$ = NULL;
          bool SpanMultiTermQueryWrapper::live$ = false;
          ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod *SpanMultiTermQueryWrapper::SCORING_SPAN_QUERY_REWRITE = NULL;

          jclass SpanMultiTermQueryWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanMultiTermQueryWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_3bf60bd1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/MultiTermQuery;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getRewriteMethod_5bc9fda5] = env->getMethodID(cls, "getRewriteMethod", "()Lorg/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod;");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_getWrappedQuery_97e3851a] = env->getMethodID(cls, "getWrappedQuery", "()Lorg/apache/lucene/search/Query;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setRewriteMethod_89abf2c4] = env->getMethodID(cls, "setRewriteMethod", "(Lorg/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod;)V");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              SCORING_SPAN_QUERY_REWRITE = new ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod(env->getStaticObjectField(cls, "SCORING_SPAN_QUERY_REWRITE", "Lorg/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanMultiTermQueryWrapper::SpanMultiTermQueryWrapper(const ::org::apache::lucene::search::MultiTermQuery & a0) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_3bf60bd1, a0.this$)) {}

          jboolean SpanMultiTermQueryWrapper::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::java::lang::String SpanMultiTermQueryWrapper::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod SpanMultiTermQueryWrapper::getRewriteMethod() const
          {
            return ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod(env->callObjectMethod(this$, mids$[mid_getRewriteMethod_5bc9fda5]));
          }

          ::org::apache::lucene::search::spans::Spans SpanMultiTermQueryWrapper::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::search::Query SpanMultiTermQueryWrapper::getWrappedQuery() const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getWrappedQuery_97e3851a]));
          }

          jint SpanMultiTermQueryWrapper::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query SpanMultiTermQueryWrapper::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          void SpanMultiTermQueryWrapper::setRewriteMethod(const ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setRewriteMethod_89abf2c4], a0.this$);
          }

          ::java::lang::String SpanMultiTermQueryWrapper::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanMultiTermQueryWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper_of_(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static int t_SpanMultiTermQueryWrapper_init_(t_SpanMultiTermQueryWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanMultiTermQueryWrapper_equals(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_getField(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_getRewriteMethod(t_SpanMultiTermQueryWrapper *self);
          static PyObject *t_SpanMultiTermQueryWrapper_getSpans(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_getWrappedQuery(t_SpanMultiTermQueryWrapper *self);
          static PyObject *t_SpanMultiTermQueryWrapper_hashCode(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_rewrite(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_setRewriteMethod(t_SpanMultiTermQueryWrapper *self, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper_toString(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_get__field(t_SpanMultiTermQueryWrapper *self, void *data);
          static PyObject *t_SpanMultiTermQueryWrapper_get__rewriteMethod(t_SpanMultiTermQueryWrapper *self, void *data);
          static int t_SpanMultiTermQueryWrapper_set__rewriteMethod(t_SpanMultiTermQueryWrapper *self, PyObject *arg, void *data);
          static PyObject *t_SpanMultiTermQueryWrapper_get__wrappedQuery(t_SpanMultiTermQueryWrapper *self, void *data);
          static PyObject *t_SpanMultiTermQueryWrapper_get__parameters_(t_SpanMultiTermQueryWrapper *self, void *data);
          static PyGetSetDef t_SpanMultiTermQueryWrapper__fields_[] = {
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper, field),
            DECLARE_GETSET_FIELD(t_SpanMultiTermQueryWrapper, rewriteMethod),
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper, wrappedQuery),
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanMultiTermQueryWrapper__methods_[] = {
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, of_, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, getRewriteMethod, METH_NOARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, getWrappedQuery, METH_NOARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, setRewriteMethod, METH_O),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanMultiTermQueryWrapper, t_SpanMultiTermQueryWrapper, ::org::apache::lucene::search::spans::SpanQuery, SpanMultiTermQueryWrapper, t_SpanMultiTermQueryWrapper_init_, 0, 0, t_SpanMultiTermQueryWrapper__fields_, 0, 0);
          PyObject *t_SpanMultiTermQueryWrapper::wrap_Object(const SpanMultiTermQueryWrapper& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper *self = (t_SpanMultiTermQueryWrapper *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SpanMultiTermQueryWrapper::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper *self = (t_SpanMultiTermQueryWrapper *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SpanMultiTermQueryWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanMultiTermQueryWrapper), module, "SpanMultiTermQueryWrapper", 0);
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper).tp_dict, "TopTermsSpanBooleanQueryRewrite", make_descriptor(&PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite)));
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper).tp_dict, "SpanRewriteMethod", make_descriptor(&PY_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod)));
          }

          void t_SpanMultiTermQueryWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper).tp_dict, "class_", make_descriptor(SpanMultiTermQueryWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper).tp_dict, "wrapfn_", make_descriptor(t_SpanMultiTermQueryWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SpanMultiTermQueryWrapper::initializeClass);
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper).tp_dict, "SCORING_SPAN_QUERY_REWRITE", make_descriptor(::org::apache::lucene::search::spans::t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(*SpanMultiTermQueryWrapper::SCORING_SPAN_QUERY_REWRITE)));
          }

          static PyObject *t_SpanMultiTermQueryWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanMultiTermQueryWrapper::initializeClass, 1)))
              return NULL;
            return t_SpanMultiTermQueryWrapper::wrap_Object(SpanMultiTermQueryWrapper(((t_SpanMultiTermQueryWrapper *) arg)->object.this$));
          }
          static PyObject *t_SpanMultiTermQueryWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanMultiTermQueryWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SpanMultiTermQueryWrapper_of_(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SpanMultiTermQueryWrapper_init_(t_SpanMultiTermQueryWrapper *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::MultiTermQuery a0((jobject) NULL);
            SpanMultiTermQueryWrapper object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0))
            {
              INT_CALL(object = SpanMultiTermQueryWrapper(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanMultiTermQueryWrapper_equals(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_getField(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_getRewriteMethod(t_SpanMultiTermQueryWrapper *self)
          {
            ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod result((jobject) NULL);
            OBJ_CALL(result = self->object.getRewriteMethod());
            return ::org::apache::lucene::search::spans::t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(result);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_getSpans(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_getWrappedQuery(t_SpanMultiTermQueryWrapper *self)
          {
            ::org::apache::lucene::search::Query result((jobject) NULL);
            OBJ_CALL(result = self->object.getWrappedQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_hashCode(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_rewrite(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_setRewriteMethod(t_SpanMultiTermQueryWrapper *self, PyObject *arg)
          {
            ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass, &a0, &p0, ::org::apache::lucene::search::spans::t_SpanMultiTermQueryWrapper$SpanRewriteMethod::parameters_))
            {
              OBJ_CALL(self->object.setRewriteMethod(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setRewriteMethod", arg);
            return NULL;
          }

          static PyObject *t_SpanMultiTermQueryWrapper_toString(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_SpanMultiTermQueryWrapper_get__parameters_(t_SpanMultiTermQueryWrapper *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_SpanMultiTermQueryWrapper_get__field(t_SpanMultiTermQueryWrapper *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_get__rewriteMethod(t_SpanMultiTermQueryWrapper *self, void *data)
          {
            ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod value((jobject) NULL);
            OBJ_CALL(value = self->object.getRewriteMethod());
            return ::org::apache::lucene::search::spans::t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(value);
          }
          static int t_SpanMultiTermQueryWrapper_set__rewriteMethod(t_SpanMultiTermQueryWrapper *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass, &value))
              {
                INT_CALL(self->object.setRewriteMethod(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "rewriteMethod", arg);
            return -1;
          }

          static PyObject *t_SpanMultiTermQueryWrapper_get__wrappedQuery(t_SpanMultiTermQueryWrapper *self, void *data)
          {
            ::org::apache::lucene::search::Query value((jobject) NULL);
            OBJ_CALL(value = self->object.getWrappedQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/DanishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *DanishStemmer::class$ = NULL;
        jmethodID *DanishStemmer::mids$ = NULL;
        bool DanishStemmer::live$ = false;

        jclass DanishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/DanishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DanishStemmer::DanishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean DanishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint DanishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean DanishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_DanishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DanishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DanishStemmer_init_(t_DanishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DanishStemmer_equals(t_DanishStemmer *self, PyObject *args);
        static PyObject *t_DanishStemmer_hashCode(t_DanishStemmer *self, PyObject *args);
        static PyObject *t_DanishStemmer_stem(t_DanishStemmer *self, PyObject *args);

        static PyMethodDef t_DanishStemmer__methods_[] = {
          DECLARE_METHOD(t_DanishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DanishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DanishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_DanishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DanishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DanishStemmer, t_DanishStemmer, ::org::tartarus::snowball::SnowballProgram, DanishStemmer, t_DanishStemmer_init_, 0, 0, 0, 0, 0);

        void t_DanishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(DanishStemmer), module, "DanishStemmer", 0);
        }

        void t_DanishStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DanishStemmer).tp_dict, "class_", make_descriptor(DanishStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DanishStemmer).tp_dict, "wrapfn_", make_descriptor(t_DanishStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DanishStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DanishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DanishStemmer::initializeClass, 1)))
            return NULL;
          return t_DanishStemmer::wrap_Object(DanishStemmer(((t_DanishStemmer *) arg)->object.this$));
        }
        static PyObject *t_DanishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DanishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DanishStemmer_init_(t_DanishStemmer *self, PyObject *args, PyObject *kwds)
        {
          DanishStemmer object((jobject) NULL);

          INT_CALL(object = DanishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_DanishStemmer_equals(t_DanishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DanishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DanishStemmer_hashCode(t_DanishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(DanishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DanishStemmer_stem(t_DanishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DanishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/ComposedQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *ComposedQuery::class$ = NULL;
            jmethodID *ComposedQuery::mids$ = NULL;
            bool ComposedQuery::live$ = false;

            jclass ComposedQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/ComposedQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_4136185e] = env->getMethodID(cls, "<init>", "(Ljava/util/List;ZLjava/lang/String;)V");
                mids$[mid_getNrSubQueries_54c6a179] = env->getMethodID(cls, "getNrSubQueries", "()I");
                mids$[mid_getOperatorName_14c7b5c5] = env->getMethodID(cls, "getOperatorName", "()Ljava/lang/String;");
                mids$[mid_getSubQueriesIterator_40858c90] = env->getMethodID(cls, "getSubQueriesIterator", "()Ljava/util/Iterator;");
                mids$[mid_getSubQuery_4fe040f0] = env->getMethodID(cls, "getSubQuery", "(I)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_isFieldsSubQueryAcceptable_54c6a16a] = env->getMethodID(cls, "isFieldsSubQueryAcceptable", "()Z");
                mids$[mid_isOperatorInfix_54c6a16a] = env->getMethodID(cls, "isOperatorInfix", "()Z");
                mids$[mid_makeLuceneSubQueriesField_82c52c4c] = env->getMethodID(cls, "makeLuceneSubQueriesField", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Ljava/util/List;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_recompose_1fde8fc3] = env->getMethodID(cls, "recompose", "(Ljava/util/List;)V");
                mids$[mid_getPrefixSeparator_14c7b5c5] = env->getMethodID(cls, "getPrefixSeparator", "()Ljava/lang/String;");
                mids$[mid_getBracketOpen_14c7b5c5] = env->getMethodID(cls, "getBracketOpen", "()Ljava/lang/String;");
                mids$[mid_getBracketClose_14c7b5c5] = env->getMethodID(cls, "getBracketClose", "()Ljava/lang/String;");
                mids$[mid_infixToString_9f94ae34] = env->getMethodID(cls, "infixToString", "(Ljava/lang/StringBuilder;)V");
                mids$[mid_prefixToString_9f94ae34] = env->getMethodID(cls, "prefixToString", "(Ljava/lang/StringBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ComposedQuery::ComposedQuery(const ::java::util::List & a0, jboolean a1, const ::java::lang::String & a2) : ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->newObject(initializeClass, &mids$, mid_init$_4136185e, a0.this$, a1, a2.this$)) {}

            jint ComposedQuery::getNrSubQueries() const
            {
              return env->callIntMethod(this$, mids$[mid_getNrSubQueries_54c6a179]);
            }

            ::java::lang::String ComposedQuery::getOperatorName() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getOperatorName_14c7b5c5]));
            }

            ::java::util::Iterator ComposedQuery::getSubQueriesIterator() const
            {
              return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_getSubQueriesIterator_40858c90]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery ComposedQuery::getSubQuery(jint a0) const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_getSubQuery_4fe040f0], a0));
            }

            jboolean ComposedQuery::isFieldsSubQueryAcceptable() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFieldsSubQueryAcceptable_54c6a16a]);
            }

            jboolean ComposedQuery::isOperatorInfix() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isOperatorInfix_54c6a16a]);
            }

            ::java::util::List ComposedQuery::makeLuceneSubQueriesField(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_makeLuceneSubQueriesField_82c52c4c], a0.this$, a1.this$));
            }

            ::java::lang::String ComposedQuery::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_ComposedQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ComposedQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ComposedQuery_init_(t_ComposedQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ComposedQuery_getNrSubQueries(t_ComposedQuery *self);
            static PyObject *t_ComposedQuery_getOperatorName(t_ComposedQuery *self);
            static PyObject *t_ComposedQuery_getSubQueriesIterator(t_ComposedQuery *self);
            static PyObject *t_ComposedQuery_getSubQuery(t_ComposedQuery *self, PyObject *arg);
            static PyObject *t_ComposedQuery_isFieldsSubQueryAcceptable(t_ComposedQuery *self, PyObject *args);
            static PyObject *t_ComposedQuery_isOperatorInfix(t_ComposedQuery *self);
            static PyObject *t_ComposedQuery_makeLuceneSubQueriesField(t_ComposedQuery *self, PyObject *args);
            static PyObject *t_ComposedQuery_toString(t_ComposedQuery *self, PyObject *args);
            static PyObject *t_ComposedQuery_get__fieldsSubQueryAcceptable(t_ComposedQuery *self, void *data);
            static PyObject *t_ComposedQuery_get__nrSubQueries(t_ComposedQuery *self, void *data);
            static PyObject *t_ComposedQuery_get__operatorInfix(t_ComposedQuery *self, void *data);
            static PyObject *t_ComposedQuery_get__operatorName(t_ComposedQuery *self, void *data);
            static PyObject *t_ComposedQuery_get__subQueriesIterator(t_ComposedQuery *self, void *data);
            static PyGetSetDef t_ComposedQuery__fields_[] = {
              DECLARE_GET_FIELD(t_ComposedQuery, fieldsSubQueryAcceptable),
              DECLARE_GET_FIELD(t_ComposedQuery, nrSubQueries),
              DECLARE_GET_FIELD(t_ComposedQuery, operatorInfix),
              DECLARE_GET_FIELD(t_ComposedQuery, operatorName),
              DECLARE_GET_FIELD(t_ComposedQuery, subQueriesIterator),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ComposedQuery__methods_[] = {
              DECLARE_METHOD(t_ComposedQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ComposedQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ComposedQuery, getNrSubQueries, METH_NOARGS),
              DECLARE_METHOD(t_ComposedQuery, getOperatorName, METH_NOARGS),
              DECLARE_METHOD(t_ComposedQuery, getSubQueriesIterator, METH_NOARGS),
              DECLARE_METHOD(t_ComposedQuery, getSubQuery, METH_O),
              DECLARE_METHOD(t_ComposedQuery, isFieldsSubQueryAcceptable, METH_VARARGS),
              DECLARE_METHOD(t_ComposedQuery, isOperatorInfix, METH_NOARGS),
              DECLARE_METHOD(t_ComposedQuery, makeLuceneSubQueriesField, METH_VARARGS),
              DECLARE_METHOD(t_ComposedQuery, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ComposedQuery, t_ComposedQuery, ::org::apache::lucene::queryparser::surround::query::SrndQuery, ComposedQuery, t_ComposedQuery_init_, 0, 0, t_ComposedQuery__fields_, 0, 0);

            void t_ComposedQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(ComposedQuery), module, "ComposedQuery", 0);
            }

            void t_ComposedQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ComposedQuery).tp_dict, "class_", make_descriptor(ComposedQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ComposedQuery).tp_dict, "wrapfn_", make_descriptor(t_ComposedQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ComposedQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ComposedQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ComposedQuery::initializeClass, 1)))
                return NULL;
              return t_ComposedQuery::wrap_Object(ComposedQuery(((t_ComposedQuery *) arg)->object.this$));
            }
            static PyObject *t_ComposedQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ComposedQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ComposedQuery_init_(t_ComposedQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              jboolean a1;
              ::java::lang::String a2((jobject) NULL);
              ComposedQuery object((jobject) NULL);

              if (!parseArgs(args, "KZs", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
              {
                INT_CALL(object = ComposedQuery(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ComposedQuery_getNrSubQueries(t_ComposedQuery *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNrSubQueries());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_ComposedQuery_getOperatorName(t_ComposedQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getOperatorName());
              return j2p(result);
            }

            static PyObject *t_ComposedQuery_getSubQueriesIterator(t_ComposedQuery *self)
            {
              ::java::util::Iterator result((jobject) NULL);
              OBJ_CALL(result = self->object.getSubQueriesIterator());
              return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::queryparser::surround::query::PY_TYPE(SrndQuery));
            }

            static PyObject *t_ComposedQuery_getSubQuery(t_ComposedQuery *self, PyObject *arg)
            {
              jint a0;
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getSubQuery(a0));
                return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getSubQuery", arg);
              return NULL;
            }

            static PyObject *t_ComposedQuery_isFieldsSubQueryAcceptable(t_ComposedQuery *self, PyObject *args)
            {
              jboolean result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.isFieldsSubQueryAcceptable());
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ComposedQuery), (PyObject *) self, "isFieldsSubQueryAcceptable", args, 2);
            }

            static PyObject *t_ComposedQuery_isOperatorInfix(t_ComposedQuery *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isOperatorInfix());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_ComposedQuery_makeLuceneSubQueriesField(t_ComposedQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneSubQueriesField(a0, a1));
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(Query));
              }

              PyErr_SetArgsError((PyObject *) self, "makeLuceneSubQueriesField", args);
              return NULL;
            }

            static PyObject *t_ComposedQuery_toString(t_ComposedQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(ComposedQuery), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_ComposedQuery_get__fieldsSubQueryAcceptable(t_ComposedQuery *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFieldsSubQueryAcceptable());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_ComposedQuery_get__nrSubQueries(t_ComposedQuery *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNrSubQueries());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_ComposedQuery_get__operatorInfix(t_ComposedQuery *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isOperatorInfix());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_ComposedQuery_get__operatorName(t_ComposedQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getOperatorName());
              return j2p(value);
            }

            static PyObject *t_ComposedQuery_get__subQueriesIterator(t_ComposedQuery *self, void *data)
            {
              ::java::util::Iterator value((jobject) NULL);
              OBJ_CALL(value = self->object.getSubQueriesIterator());
              return ::java::util::t_Iterator::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/MultiTermRewriteMethodProcessor.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *MultiTermRewriteMethodProcessor::class$ = NULL;
              jmethodID *MultiTermRewriteMethodProcessor::mids$ = NULL;
              bool MultiTermRewriteMethodProcessor::live$ = false;
              ::java::lang::String *MultiTermRewriteMethodProcessor::TAG_ID = NULL;

              jclass MultiTermRewriteMethodProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/MultiTermRewriteMethodProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  TAG_ID = new ::java::lang::String(env->getStaticObjectField(cls, "TAG_ID", "Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MultiTermRewriteMethodProcessor::MultiTermRewriteMethodProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_MultiTermRewriteMethodProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MultiTermRewriteMethodProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MultiTermRewriteMethodProcessor_init_(t_MultiTermRewriteMethodProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_MultiTermRewriteMethodProcessor__methods_[] = {
                DECLARE_METHOD(t_MultiTermRewriteMethodProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiTermRewriteMethodProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MultiTermRewriteMethodProcessor, t_MultiTermRewriteMethodProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, MultiTermRewriteMethodProcessor, t_MultiTermRewriteMethodProcessor_init_, 0, 0, 0, 0, 0);

              void t_MultiTermRewriteMethodProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(MultiTermRewriteMethodProcessor), module, "MultiTermRewriteMethodProcessor", 0);
              }

              void t_MultiTermRewriteMethodProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MultiTermRewriteMethodProcessor).tp_dict, "class_", make_descriptor(MultiTermRewriteMethodProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MultiTermRewriteMethodProcessor).tp_dict, "wrapfn_", make_descriptor(t_MultiTermRewriteMethodProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MultiTermRewriteMethodProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(MultiTermRewriteMethodProcessor::initializeClass);
                PyDict_SetItemString(PY_TYPE(MultiTermRewriteMethodProcessor).tp_dict, "TAG_ID", make_descriptor(j2p(*MultiTermRewriteMethodProcessor::TAG_ID)));
              }

              static PyObject *t_MultiTermRewriteMethodProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MultiTermRewriteMethodProcessor::initializeClass, 1)))
                  return NULL;
                return t_MultiTermRewriteMethodProcessor::wrap_Object(MultiTermRewriteMethodProcessor(((t_MultiTermRewriteMethodProcessor *) arg)->object.this$));
              }
              static PyObject *t_MultiTermRewriteMethodProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MultiTermRewriteMethodProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MultiTermRewriteMethodProcessor_init_(t_MultiTermRewriteMethodProcessor *self, PyObject *args, PyObject *kwds)
              {
                MultiTermRewriteMethodProcessor object((jobject) NULL);

                INT_CALL(object = MultiTermRewriteMethodProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache.h"
#include "org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *LruTaxonomyWriterCache::class$ = NULL;
            jmethodID *LruTaxonomyWriterCache::mids$ = NULL;
            bool LruTaxonomyWriterCache::live$ = false;

            jclass LruTaxonomyWriterCache::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_init$_83a5d707] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType;)V");
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_get_283f83f5] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_isFull_54c6a16a] = env->getMethodID(cls, "isFull", "()Z");
                mids$[mid_put_7ba580a4] = env->getMethodID(cls, "put", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;I)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LruTaxonomyWriterCache::LruTaxonomyWriterCache(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

            LruTaxonomyWriterCache::LruTaxonomyWriterCache(jint a0, const ::org::apache::lucene::facet::taxonomy::writercache::LruTaxonomyWriterCache$LRUType & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_83a5d707, a0, a1.this$)) {}

            void LruTaxonomyWriterCache::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
            }

            void LruTaxonomyWriterCache::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
            }

            jint LruTaxonomyWriterCache::get(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_get_283f83f5], a0.this$);
            }

            jboolean LruTaxonomyWriterCache::isFull() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFull_54c6a16a]);
            }

            jboolean LruTaxonomyWriterCache::put(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_put_7ba580a4], a0.this$, a1);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_LruTaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LruTaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LruTaxonomyWriterCache_init_(t_LruTaxonomyWriterCache *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LruTaxonomyWriterCache_clear(t_LruTaxonomyWriterCache *self);
            static PyObject *t_LruTaxonomyWriterCache_close(t_LruTaxonomyWriterCache *self);
            static PyObject *t_LruTaxonomyWriterCache_get(t_LruTaxonomyWriterCache *self, PyObject *arg);
            static PyObject *t_LruTaxonomyWriterCache_isFull(t_LruTaxonomyWriterCache *self);
            static PyObject *t_LruTaxonomyWriterCache_put(t_LruTaxonomyWriterCache *self, PyObject *args);
            static PyObject *t_LruTaxonomyWriterCache_get__full(t_LruTaxonomyWriterCache *self, void *data);
            static PyGetSetDef t_LruTaxonomyWriterCache__fields_[] = {
              DECLARE_GET_FIELD(t_LruTaxonomyWriterCache, full),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_LruTaxonomyWriterCache__methods_[] = {
              DECLARE_METHOD(t_LruTaxonomyWriterCache, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, clear, METH_NOARGS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, close, METH_NOARGS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, get, METH_O),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, isFull, METH_NOARGS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, put, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LruTaxonomyWriterCache, t_LruTaxonomyWriterCache, ::java::lang::Object, LruTaxonomyWriterCache, t_LruTaxonomyWriterCache_init_, 0, 0, t_LruTaxonomyWriterCache__fields_, 0, 0);

            void t_LruTaxonomyWriterCache::install(PyObject *module)
            {
              installType(&PY_TYPE(LruTaxonomyWriterCache), module, "LruTaxonomyWriterCache", 0);
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache).tp_dict, "LRUType", make_descriptor(&PY_TYPE(LruTaxonomyWriterCache$LRUType)));
            }

            void t_LruTaxonomyWriterCache::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache).tp_dict, "class_", make_descriptor(LruTaxonomyWriterCache::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache).tp_dict, "wrapfn_", make_descriptor(t_LruTaxonomyWriterCache::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_LruTaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LruTaxonomyWriterCache::initializeClass, 1)))
                return NULL;
              return t_LruTaxonomyWriterCache::wrap_Object(LruTaxonomyWriterCache(((t_LruTaxonomyWriterCache *) arg)->object.this$));
            }
            static PyObject *t_LruTaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LruTaxonomyWriterCache::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LruTaxonomyWriterCache_init_(t_LruTaxonomyWriterCache *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  jint a0;
                  LruTaxonomyWriterCache object((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    INT_CALL(object = LruTaxonomyWriterCache(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  jint a0;
                  ::org::apache::lucene::facet::taxonomy::writercache::LruTaxonomyWriterCache$LRUType a1((jobject) NULL);
                  PyTypeObject **p1;
                  LruTaxonomyWriterCache object((jobject) NULL);

                  if (!parseArgs(args, "IK", ::org::apache::lucene::facet::taxonomy::writercache::LruTaxonomyWriterCache$LRUType::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::facet::taxonomy::writercache::t_LruTaxonomyWriterCache$LRUType::parameters_))
                  {
                    INT_CALL(object = LruTaxonomyWriterCache(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_LruTaxonomyWriterCache_clear(t_LruTaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            static PyObject *t_LruTaxonomyWriterCache_close(t_LruTaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_LruTaxonomyWriterCache_get(t_LruTaxonomyWriterCache *self, PyObject *arg)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_LruTaxonomyWriterCache_isFull(t_LruTaxonomyWriterCache *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isFull());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_LruTaxonomyWriterCache_put(t_LruTaxonomyWriterCache *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;
              jboolean result;

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.put(a0, a1));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_LruTaxonomyWriterCache_get__full(t_LruTaxonomyWriterCache *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFull());
              Py_RETURN_BOOL(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiPhraseQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Set.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiPhraseQuery::class$ = NULL;
        jmethodID *MultiPhraseQuery::mids$ = NULL;
        bool MultiPhraseQuery::live$ = false;

        jclass MultiPhraseQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiPhraseQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_c9f85e01] = env->getMethodID(cls, "add", "([Lorg/apache/lucene/index/Term;)V");
            mids$[mid_add_7eca6a81] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_add_8f4de701] = env->getMethodID(cls, "add", "([Lorg/apache/lucene/index/Term;I)V");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getPositions_dab10e75] = env->getMethodID(cls, "getPositions", "()[I");
            mids$[mid_getSlop_54c6a179] = env->getMethodID(cls, "getSlop", "()I");
            mids$[mid_getTermArrays_87851566] = env->getMethodID(cls, "getTermArrays", "()Ljava/util/List;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setSlop_39c7bd3c] = env->getMethodID(cls, "setSlop", "(I)V");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiPhraseQuery::MultiPhraseQuery() : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void MultiPhraseQuery::add(const JArray< ::org::apache::lucene::index::Term > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_c9f85e01], a0.this$);
        }

        void MultiPhraseQuery::add(const ::org::apache::lucene::index::Term & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_7eca6a81], a0.this$);
        }

        void MultiPhraseQuery::add(const JArray< ::org::apache::lucene::index::Term > & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_8f4de701], a0.this$, a1);
        }

        ::org::apache::lucene::search::Weight MultiPhraseQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean MultiPhraseQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void MultiPhraseQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        JArray< jint > MultiPhraseQuery::getPositions() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getPositions_dab10e75]));
        }

        jint MultiPhraseQuery::getSlop() const
        {
          return env->callIntMethod(this$, mids$[mid_getSlop_54c6a179]);
        }

        ::java::util::List MultiPhraseQuery::getTermArrays() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getTermArrays_87851566]));
        }

        jint MultiPhraseQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query MultiPhraseQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        void MultiPhraseQuery::setSlop(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setSlop_39c7bd3c], a0);
        }

        ::java::lang::String MultiPhraseQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiPhraseQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiPhraseQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiPhraseQuery_init_(t_MultiPhraseQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiPhraseQuery_add(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_createWeight(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_equals(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_extractTerms(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_getPositions(t_MultiPhraseQuery *self);
        static PyObject *t_MultiPhraseQuery_getSlop(t_MultiPhraseQuery *self);
        static PyObject *t_MultiPhraseQuery_getTermArrays(t_MultiPhraseQuery *self);
        static PyObject *t_MultiPhraseQuery_hashCode(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_rewrite(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_setSlop(t_MultiPhraseQuery *self, PyObject *arg);
        static PyObject *t_MultiPhraseQuery_toString(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_get__positions(t_MultiPhraseQuery *self, void *data);
        static PyObject *t_MultiPhraseQuery_get__slop(t_MultiPhraseQuery *self, void *data);
        static int t_MultiPhraseQuery_set__slop(t_MultiPhraseQuery *self, PyObject *arg, void *data);
        static PyObject *t_MultiPhraseQuery_get__termArrays(t_MultiPhraseQuery *self, void *data);
        static PyGetSetDef t_MultiPhraseQuery__fields_[] = {
          DECLARE_GET_FIELD(t_MultiPhraseQuery, positions),
          DECLARE_GETSET_FIELD(t_MultiPhraseQuery, slop),
          DECLARE_GET_FIELD(t_MultiPhraseQuery, termArrays),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiPhraseQuery__methods_[] = {
          DECLARE_METHOD(t_MultiPhraseQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiPhraseQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiPhraseQuery, add, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, getPositions, METH_NOARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, getSlop, METH_NOARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, getTermArrays, METH_NOARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, setSlop, METH_O),
          DECLARE_METHOD(t_MultiPhraseQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiPhraseQuery, t_MultiPhraseQuery, ::org::apache::lucene::search::Query, MultiPhraseQuery, t_MultiPhraseQuery_init_, 0, 0, t_MultiPhraseQuery__fields_, 0, 0);

        void t_MultiPhraseQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiPhraseQuery), module, "MultiPhraseQuery", 0);
        }

        void t_MultiPhraseQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiPhraseQuery).tp_dict, "class_", make_descriptor(MultiPhraseQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiPhraseQuery).tp_dict, "wrapfn_", make_descriptor(t_MultiPhraseQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiPhraseQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiPhraseQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiPhraseQuery::initializeClass, 1)))
            return NULL;
          return t_MultiPhraseQuery::wrap_Object(MultiPhraseQuery(((t_MultiPhraseQuery *) arg)->object.this$));
        }
        static PyObject *t_MultiPhraseQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiPhraseQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiPhraseQuery_init_(t_MultiPhraseQuery *self, PyObject *args, PyObject *kwds)
        {
          MultiPhraseQuery object((jobject) NULL);

          INT_CALL(object = MultiPhraseQuery());
          self->object = object;

          return 0;
        }

        static PyObject *t_MultiPhraseQuery_add(t_MultiPhraseQuery *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::Term > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              JArray< ::org::apache::lucene::index::Term > a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "[kI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_MultiPhraseQuery_createWeight(t_MultiPhraseQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiPhraseQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_equals(t_MultiPhraseQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiPhraseQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_extractTerms(t_MultiPhraseQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MultiPhraseQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_getPositions(t_MultiPhraseQuery *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.getPositions());
          return result.wrap();
        }

        static PyObject *t_MultiPhraseQuery_getSlop(t_MultiPhraseQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getSlop());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MultiPhraseQuery_getTermArrays(t_MultiPhraseQuery *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.getTermArrays());
          return ::java::util::t_List::wrap_Object(result, &::java::lang::PY_TYPE(Object));
        }

        static PyObject *t_MultiPhraseQuery_hashCode(t_MultiPhraseQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiPhraseQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_rewrite(t_MultiPhraseQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiPhraseQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_setSlop(t_MultiPhraseQuery *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setSlop(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setSlop", arg);
          return NULL;
        }

        static PyObject *t_MultiPhraseQuery_toString(t_MultiPhraseQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MultiPhraseQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_get__positions(t_MultiPhraseQuery *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object.getPositions());
          return value.wrap();
        }

        static PyObject *t_MultiPhraseQuery_get__slop(t_MultiPhraseQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getSlop());
          return PyInt_FromLong((long) value);
        }
        static int t_MultiPhraseQuery_set__slop(t_MultiPhraseQuery *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setSlop(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "slop", arg);
          return -1;
        }

        static PyObject *t_MultiPhraseQuery_get__termArrays(t_MultiPhraseQuery *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getTermArrays());
          return ::java::util::t_List::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *DataInput::class$ = NULL;
        jmethodID *DataInput::mids$ = NULL;
        bool DataInput::live$ = false;

        jclass DataInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/DataInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clone_3fcc829c] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/store/DataInput;");
            mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_86f4435f] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_readBytes_717964e8] = env->getMethodID(cls, "readBytes", "([BIIZ)V");
            mids$[mid_readInt_54c6a179] = env->getMethodID(cls, "readInt", "()I");
            mids$[mid_readLong_54c6a17a] = env->getMethodID(cls, "readLong", "()J");
            mids$[mid_readShort_54c6a163] = env->getMethodID(cls, "readShort", "()S");
            mids$[mid_readString_14c7b5c5] = env->getMethodID(cls, "readString", "()Ljava/lang/String;");
            mids$[mid_readStringSet_03e99967] = env->getMethodID(cls, "readStringSet", "()Ljava/util/Set;");
            mids$[mid_readStringStringMap_db60befd] = env->getMethodID(cls, "readStringStringMap", "()Ljava/util/Map;");
            mids$[mid_readVInt_54c6a179] = env->getMethodID(cls, "readVInt", "()I");
            mids$[mid_readVLong_54c6a17a] = env->getMethodID(cls, "readVLong", "()J");
            mids$[mid_skipBytes_0ee6df2f] = env->getMethodID(cls, "skipBytes", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DataInput::DataInput() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        DataInput DataInput::clone() const
        {
          return DataInput(env->callObjectMethod(this$, mids$[mid_clone_3fcc829c]));
        }

        jbyte DataInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
        }

        void DataInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_86f4435f], a0.this$, a1, a2);
        }

        void DataInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2, jboolean a3) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_717964e8], a0.this$, a1, a2, a3);
        }

        jint DataInput::readInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_54c6a179]);
        }

        jlong DataInput::readLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_54c6a17a]);
        }

        jshort DataInput::readShort() const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_54c6a163]);
        }

        ::java::lang::String DataInput::readString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_readString_14c7b5c5]));
        }

        ::java::util::Set DataInput::readStringSet() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_readStringSet_03e99967]));
        }

        ::java::util::Map DataInput::readStringStringMap() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_readStringStringMap_db60befd]));
        }

        jint DataInput::readVInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readVInt_54c6a179]);
        }

        jlong DataInput::readVLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readVLong_54c6a17a]);
        }

        void DataInput::skipBytes(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_skipBytes_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_DataInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DataInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DataInput_init_(t_DataInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DataInput_clone(t_DataInput *self);
        static PyObject *t_DataInput_readByte(t_DataInput *self);
        static PyObject *t_DataInput_readBytes(t_DataInput *self, PyObject *args);
        static PyObject *t_DataInput_readInt(t_DataInput *self);
        static PyObject *t_DataInput_readLong(t_DataInput *self);
        static PyObject *t_DataInput_readShort(t_DataInput *self);
        static PyObject *t_DataInput_readString(t_DataInput *self);
        static PyObject *t_DataInput_readStringSet(t_DataInput *self);
        static PyObject *t_DataInput_readStringStringMap(t_DataInput *self);
        static PyObject *t_DataInput_readVInt(t_DataInput *self);
        static PyObject *t_DataInput_readVLong(t_DataInput *self);
        static PyObject *t_DataInput_skipBytes(t_DataInput *self, PyObject *arg);

        static PyMethodDef t_DataInput__methods_[] = {
          DECLARE_METHOD(t_DataInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DataInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DataInput, clone, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readByte, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_DataInput, readInt, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readLong, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readShort, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readString, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readStringSet, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readStringStringMap, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readVInt, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readVLong, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, skipBytes, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DataInput, t_DataInput, ::java::lang::Object, DataInput, t_DataInput_init_, 0, 0, 0, 0, 0);

        void t_DataInput::install(PyObject *module)
        {
          installType(&PY_TYPE(DataInput), module, "DataInput", 0);
        }

        void t_DataInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DataInput).tp_dict, "class_", make_descriptor(DataInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DataInput).tp_dict, "wrapfn_", make_descriptor(t_DataInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DataInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DataInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DataInput::initializeClass, 1)))
            return NULL;
          return t_DataInput::wrap_Object(DataInput(((t_DataInput *) arg)->object.this$));
        }
        static PyObject *t_DataInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DataInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DataInput_init_(t_DataInput *self, PyObject *args, PyObject *kwds)
        {
          DataInput object((jobject) NULL);

          INT_CALL(object = DataInput());
          self->object = object;

          return 0;
        }

        static PyObject *t_DataInput_clone(t_DataInput *self)
        {
          DataInput result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_DataInput::wrap_Object(result);
        }

        static PyObject *t_DataInput_readByte(t_DataInput *self)
        {
          jbyte result;
          OBJ_CALL(result = self->object.readByte());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DataInput_readBytes(t_DataInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.readBytes(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            break;
           case 4:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              jboolean a3;

              if (!parseArgs(args, "[BIIZ", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(self->object.readBytes(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "readBytes", args);
          return NULL;
        }

        static PyObject *t_DataInput_readInt(t_DataInput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.readInt());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DataInput_readLong(t_DataInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.readLong());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DataInput_readShort(t_DataInput *self)
        {
          jshort result;
          OBJ_CALL(result = self->object.readShort());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DataInput_readString(t_DataInput *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.readString());
          return j2p(result);
        }

        static PyObject *t_DataInput_readStringSet(t_DataInput *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.readStringSet());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_DataInput_readStringStringMap(t_DataInput *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.readStringStringMap());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_DataInput_readVInt(t_DataInput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.readVInt());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DataInput_readVLong(t_DataInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.readVLong());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DataInput_skipBytes(t_DataInput *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.skipBytes(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "skipBytes", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/IntTaxonomyFacets.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *IntTaxonomyFacets::class$ = NULL;
          jmethodID *IntTaxonomyFacets::mids$ = NULL;
          bool IntTaxonomyFacets::live$ = false;

          jclass IntTaxonomyFacets::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/IntTaxonomyFacets");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getSpecificValue_8ecbcac9] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
              mids$[mid_getTopChildren_37e8c044] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");
              mids$[mid_rollup_54c6a166] = env->getMethodID(cls, "rollup", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Number IntTaxonomyFacets::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_8ecbcac9], a0.this$, a1.this$));
          }

          ::org::apache::lucene::facet::FacetResult IntTaxonomyFacets::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
          {
            return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_37e8c044], a0, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_IntTaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntTaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntTaxonomyFacets_getSpecificValue(t_IntTaxonomyFacets *self, PyObject *args);
          static PyObject *t_IntTaxonomyFacets_getTopChildren(t_IntTaxonomyFacets *self, PyObject *args);

          static PyMethodDef t_IntTaxonomyFacets__methods_[] = {
            DECLARE_METHOD(t_IntTaxonomyFacets, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntTaxonomyFacets, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntTaxonomyFacets, getSpecificValue, METH_VARARGS),
            DECLARE_METHOD(t_IntTaxonomyFacets, getTopChildren, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IntTaxonomyFacets, t_IntTaxonomyFacets, ::org::apache::lucene::facet::taxonomy::TaxonomyFacets, IntTaxonomyFacets, abstract_init, 0, 0, 0, 0, 0);

          void t_IntTaxonomyFacets::install(PyObject *module)
          {
            installType(&PY_TYPE(IntTaxonomyFacets), module, "IntTaxonomyFacets", 0);
          }

          void t_IntTaxonomyFacets::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IntTaxonomyFacets).tp_dict, "class_", make_descriptor(IntTaxonomyFacets::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IntTaxonomyFacets).tp_dict, "wrapfn_", make_descriptor(t_IntTaxonomyFacets::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IntTaxonomyFacets).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntTaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntTaxonomyFacets::initializeClass, 1)))
              return NULL;
            return t_IntTaxonomyFacets::wrap_Object(IntTaxonomyFacets(((t_IntTaxonomyFacets *) arg)->object.this$));
          }
          static PyObject *t_IntTaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntTaxonomyFacets::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IntTaxonomyFacets_getSpecificValue(t_IntTaxonomyFacets *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::java::lang::Number result((jobject) NULL);

            if (!parseArgs(args, "s[s", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
              return ::java::lang::t_Number::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntTaxonomyFacets), (PyObject *) self, "getSpecificValue", args, 2);
          }

          static PyObject *t_IntTaxonomyFacets_getTopChildren(t_IntTaxonomyFacets *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

            if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
              return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntTaxonomyFacets), (PyObject *) self, "getTopChildren", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/collation/CollationKeyFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/text/Collator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {

        ::java::lang::Class *CollationKeyFilter::class$ = NULL;
        jmethodID *CollationKeyFilter::mids$ = NULL;
        bool CollationKeyFilter::live$ = false;

        jclass CollationKeyFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/collation/CollationKeyFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9b6c8506] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/text/Collator;)V");
            mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollationKeyFilter::CollationKeyFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::text::Collator & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_9b6c8506, a0.this$, a1.this$)) {}

        jboolean CollationKeyFilter::incrementToken() const
        {
          return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {
        static PyObject *t_CollationKeyFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollationKeyFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CollationKeyFilter_init_(t_CollationKeyFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CollationKeyFilter_incrementToken(t_CollationKeyFilter *self, PyObject *args);

        static PyMethodDef t_CollationKeyFilter__methods_[] = {
          DECLARE_METHOD(t_CollationKeyFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationKeyFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationKeyFilter, incrementToken, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CollationKeyFilter, t_CollationKeyFilter, ::org::apache::lucene::analysis::TokenFilter, CollationKeyFilter, t_CollationKeyFilter_init_, 0, 0, 0, 0, 0);

        void t_CollationKeyFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(CollationKeyFilter), module, "CollationKeyFilter", 0);
        }

        void t_CollationKeyFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CollationKeyFilter).tp_dict, "class_", make_descriptor(CollationKeyFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CollationKeyFilter).tp_dict, "wrapfn_", make_descriptor(t_CollationKeyFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CollationKeyFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollationKeyFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollationKeyFilter::initializeClass, 1)))
            return NULL;
          return t_CollationKeyFilter::wrap_Object(CollationKeyFilter(((t_CollationKeyFilter *) arg)->object.this$));
        }
        static PyObject *t_CollationKeyFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollationKeyFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CollationKeyFilter_init_(t_CollationKeyFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
          ::java::text::Collator a1((jobject) NULL);
          CollationKeyFilter object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::text::Collator::initializeClass, &a0, &a1))
          {
            INT_CALL(object = CollationKeyFilter(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CollationKeyFilter_incrementToken(t_CollationKeyFilter *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.incrementToken());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CollationKeyFilter), (PyObject *) self, "incrementToken", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/AfterEffectL.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *AfterEffectL::class$ = NULL;
          jmethodID *AfterEffectL::mids$ = NULL;
          bool AfterEffectL::live$ = false;

          jclass AfterEffectL::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/AfterEffectL");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_05d4946a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;F)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AfterEffectL::AfterEffectL() : ::org::apache::lucene::search::similarities::AfterEffect(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation AfterEffectL::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_05d4946a], a0.this$, a1));
          }

          jfloat AfterEffectL::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String AfterEffectL::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_AfterEffectL_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AfterEffectL_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AfterEffectL_init_(t_AfterEffectL *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AfterEffectL_explain(t_AfterEffectL *self, PyObject *args);
          static PyObject *t_AfterEffectL_score(t_AfterEffectL *self, PyObject *args);
          static PyObject *t_AfterEffectL_toString(t_AfterEffectL *self, PyObject *args);

          static PyMethodDef t_AfterEffectL__methods_[] = {
            DECLARE_METHOD(t_AfterEffectL, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffectL, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffectL, explain, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffectL, score, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffectL, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AfterEffectL, t_AfterEffectL, ::org::apache::lucene::search::similarities::AfterEffect, AfterEffectL, t_AfterEffectL_init_, 0, 0, 0, 0, 0);

          void t_AfterEffectL::install(PyObject *module)
          {
            installType(&PY_TYPE(AfterEffectL), module, "AfterEffectL", 0);
          }

          void t_AfterEffectL::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AfterEffectL).tp_dict, "class_", make_descriptor(AfterEffectL::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AfterEffectL).tp_dict, "wrapfn_", make_descriptor(t_AfterEffectL::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AfterEffectL).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AfterEffectL_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AfterEffectL::initializeClass, 1)))
              return NULL;
            return t_AfterEffectL::wrap_Object(AfterEffectL(((t_AfterEffectL *) arg)->object.this$));
          }
          static PyObject *t_AfterEffectL_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AfterEffectL::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AfterEffectL_init_(t_AfterEffectL *self, PyObject *args, PyObject *kwds)
          {
            AfterEffectL object((jobject) NULL);

            INT_CALL(object = AfterEffectL());
            self->object = object;

            return 0;
          }

          static PyObject *t_AfterEffectL_explain(t_AfterEffectL *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(AfterEffectL), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_AfterEffectL_score(t_AfterEffectL *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(AfterEffectL), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_AfterEffectL_toString(t_AfterEffectL *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(AfterEffectL), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinFieldComparator$Lowest.h"
#include "java/io/IOException.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Filter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToParentBlockJoinFieldComparator$Lowest::class$ = NULL;
          jmethodID *ToParentBlockJoinFieldComparator$Lowest::mids$ = NULL;
          bool ToParentBlockJoinFieldComparator$Lowest::live$ = false;

          jclass ToParentBlockJoinFieldComparator$Lowest::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToParentBlockJoinFieldComparator$Lowest");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2105569] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/FieldComparator;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Filter;I)V");
              mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
              mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
              mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ToParentBlockJoinFieldComparator$Lowest::ToParentBlockJoinFieldComparator$Lowest(const ::org::apache::lucene::search::FieldComparator & a0, const ::org::apache::lucene::search::Filter & a1, const ::org::apache::lucene::search::Filter & a2, jint a3) : ::org::apache::lucene::search::join::ToParentBlockJoinFieldComparator(env->newObject(initializeClass, &mids$, mid_init$_f2105569, a0.this$, a1.this$, a2.this$, a3)) {}

          jint ToParentBlockJoinFieldComparator$Lowest::compareBottom(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
          }

          jint ToParentBlockJoinFieldComparator$Lowest::compareTop(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
          }

          void ToParentBlockJoinFieldComparator$Lowest::copy(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_of_(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args);
          static int t_ToParentBlockJoinFieldComparator$Lowest_init_(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_compareBottom(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_compareTop(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_copy(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_get__parameters_(t_ToParentBlockJoinFieldComparator$Lowest *self, void *data);
          static PyGetSetDef t_ToParentBlockJoinFieldComparator$Lowest__fields_[] = {
            DECLARE_GET_FIELD(t_ToParentBlockJoinFieldComparator$Lowest, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ToParentBlockJoinFieldComparator$Lowest__methods_[] = {
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Lowest, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Lowest, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Lowest, of_, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Lowest, compareBottom, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Lowest, compareTop, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Lowest, copy, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ToParentBlockJoinFieldComparator$Lowest, t_ToParentBlockJoinFieldComparator$Lowest, ::org::apache::lucene::search::join::ToParentBlockJoinFieldComparator, ToParentBlockJoinFieldComparator$Lowest, t_ToParentBlockJoinFieldComparator$Lowest_init_, 0, 0, t_ToParentBlockJoinFieldComparator$Lowest__fields_, 0, 0);
          PyObject *t_ToParentBlockJoinFieldComparator$Lowest::wrap_Object(const ToParentBlockJoinFieldComparator$Lowest& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ToParentBlockJoinFieldComparator$Lowest::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ToParentBlockJoinFieldComparator$Lowest *self = (t_ToParentBlockJoinFieldComparator$Lowest *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_ToParentBlockJoinFieldComparator$Lowest::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ToParentBlockJoinFieldComparator$Lowest::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ToParentBlockJoinFieldComparator$Lowest *self = (t_ToParentBlockJoinFieldComparator$Lowest *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_ToParentBlockJoinFieldComparator$Lowest::install(PyObject *module)
          {
            installType(&PY_TYPE(ToParentBlockJoinFieldComparator$Lowest), module, "ToParentBlockJoinFieldComparator$Lowest", 0);
          }

          void t_ToParentBlockJoinFieldComparator$Lowest::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator$Lowest).tp_dict, "class_", make_descriptor(ToParentBlockJoinFieldComparator$Lowest::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator$Lowest).tp_dict, "wrapfn_", make_descriptor(t_ToParentBlockJoinFieldComparator$Lowest::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator$Lowest).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToParentBlockJoinFieldComparator$Lowest::initializeClass, 1)))
              return NULL;
            return t_ToParentBlockJoinFieldComparator$Lowest::wrap_Object(ToParentBlockJoinFieldComparator$Lowest(((t_ToParentBlockJoinFieldComparator$Lowest *) arg)->object.this$));
          }
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToParentBlockJoinFieldComparator$Lowest::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_of_(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_ToParentBlockJoinFieldComparator$Lowest_init_(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::FieldComparator a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::search::Filter a1((jobject) NULL);
            ::org::apache::lucene::search::Filter a2((jobject) NULL);
            jint a3;
            ToParentBlockJoinFieldComparator$Lowest object((jobject) NULL);

            if (!parseArgs(args, "KkkI", ::org::apache::lucene::search::FieldComparator::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_FieldComparator::parameters_, &a1, &a2, &a3))
            {
              INT_CALL(object = ToParentBlockJoinFieldComparator$Lowest(a0, a1, a2, a3));
              self->object = object;
              self->parameters[0] = &::java::lang::PY_TYPE(Object);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_compareBottom(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareBottom(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator$Lowest), (PyObject *) self, "compareBottom", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_compareTop(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareTop(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator$Lowest), (PyObject *) self, "compareTop", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_copy(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.copy(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator$Lowest), (PyObject *) self, "copy", args, 2);
          }
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_get__parameters_(t_ToParentBlockJoinFieldComparator$Lowest *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/FilteredQueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *FilteredQueryBuilder::class$ = NULL;
            jmethodID *FilteredQueryBuilder::mids$ = NULL;
            bool FilteredQueryBuilder::live$ = false;

            jclass FilteredQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/FilteredQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_60b0c0b9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/FilterBuilder;Lorg/apache/lucene/queryparser/xml/QueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FilteredQueryBuilder::FilteredQueryBuilder(const ::org::apache::lucene::queryparser::xml::FilterBuilder & a0, const ::org::apache::lucene::queryparser::xml::QueryBuilder & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_60b0c0b9, a0.this$, a1.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_FilteredQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FilteredQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FilteredQueryBuilder_init_(t_FilteredQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_FilteredQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_FilteredQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FilteredQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FilteredQueryBuilder, t_FilteredQueryBuilder, ::java::lang::Object, FilteredQueryBuilder, t_FilteredQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_FilteredQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(FilteredQueryBuilder), module, "FilteredQueryBuilder", 0);
            }

            void t_FilteredQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FilteredQueryBuilder).tp_dict, "class_", make_descriptor(FilteredQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FilteredQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_FilteredQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FilteredQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FilteredQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FilteredQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_FilteredQueryBuilder::wrap_Object(FilteredQueryBuilder(((t_FilteredQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_FilteredQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FilteredQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FilteredQueryBuilder_init_(t_FilteredQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::FilterBuilder a0((jobject) NULL);
              ::org::apache::lucene::queryparser::xml::QueryBuilder a1((jobject) NULL);
              FilteredQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::queryparser::xml::FilterBuilder::initializeClass, ::org::apache::lucene::queryparser::xml::QueryBuilder::initializeClass, &a0, &a1))
              {
                INT_CALL(object = FilteredQueryBuilder(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefArray.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Counter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefArray::class$ = NULL;
        jmethodID *BytesRefArray::mids$ = NULL;
        bool BytesRefArray::live$ = false;

        jclass BytesRefArray::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefArray");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4ae88947] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Counter;)V");
            mids$[mid_append_7bc03ddb] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_get_708d2c55] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/util/BytesRef;I)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_iterator_534dea83] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/util/BytesRefIterator;");
            mids$[mid_iterator_8d21877c] = env->getMethodID(cls, "iterator", "(Ljava/util/Comparator;)Lorg/apache/lucene/util/BytesRefIterator;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BytesRefArray::BytesRefArray(const ::org::apache::lucene::util::Counter & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4ae88947, a0.this$)) {}

        jint BytesRefArray::append(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_append_7bc03ddb], a0.this$);
        }

        void BytesRefArray::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        ::org::apache::lucene::util::BytesRef BytesRefArray::get(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_get_708d2c55], a0.this$, a1));
        }

        ::org::apache::lucene::util::BytesRefIterator BytesRefArray::iterator() const
        {
          return ::org::apache::lucene::util::BytesRefIterator(env->callObjectMethod(this$, mids$[mid_iterator_534dea83]));
        }

        ::org::apache::lucene::util::BytesRefIterator BytesRefArray::iterator(const ::java::util::Comparator & a0) const
        {
          return ::org::apache::lucene::util::BytesRefIterator(env->callObjectMethod(this$, mids$[mid_iterator_8d21877c], a0.this$));
        }

        jint BytesRefArray::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefArray_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefArray_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BytesRefArray_init_(t_BytesRefArray *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BytesRefArray_append(t_BytesRefArray *self, PyObject *arg);
        static PyObject *t_BytesRefArray_clear(t_BytesRefArray *self);
        static PyObject *t_BytesRefArray_get(t_BytesRefArray *self, PyObject *args);
        static PyObject *t_BytesRefArray_iterator(t_BytesRefArray *self, PyObject *args);
        static PyObject *t_BytesRefArray_size(t_BytesRefArray *self);

        static PyMethodDef t_BytesRefArray__methods_[] = {
          DECLARE_METHOD(t_BytesRefArray, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefArray, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefArray, append, METH_O),
          DECLARE_METHOD(t_BytesRefArray, clear, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefArray, get, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefArray, iterator, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefArray, size, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BytesRefArray, t_BytesRefArray, ::java::lang::Object, BytesRefArray, t_BytesRefArray_init_, 0, 0, 0, 0, 0);

        void t_BytesRefArray::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefArray), module, "BytesRefArray", 0);
        }

        void t_BytesRefArray::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BytesRefArray).tp_dict, "class_", make_descriptor(BytesRefArray::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BytesRefArray).tp_dict, "wrapfn_", make_descriptor(t_BytesRefArray::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BytesRefArray).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BytesRefArray_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefArray::initializeClass, 1)))
            return NULL;
          return t_BytesRefArray::wrap_Object(BytesRefArray(((t_BytesRefArray *) arg)->object.this$));
        }
        static PyObject *t_BytesRefArray_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefArray::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BytesRefArray_init_(t_BytesRefArray *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::Counter a0((jobject) NULL);
          BytesRefArray object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::Counter::initializeClass, &a0))
          {
            INT_CALL(object = BytesRefArray(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BytesRefArray_append(t_BytesRefArray *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "append", arg);
          return NULL;
        }

        static PyObject *t_BytesRefArray_clear(t_BytesRefArray *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_BytesRefArray_get(t_BytesRefArray *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.get(a0, a1));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", args);
          return NULL;
        }

        static PyObject *t_BytesRefArray_iterator(t_BytesRefArray *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::org::apache::lucene::util::BytesRefIterator result((jobject) NULL);
              OBJ_CALL(result = self->object.iterator());
              return ::org::apache::lucene::util::t_BytesRefIterator::wrap_Object(result);
            }
            break;
           case 1:
            {
              ::java::util::Comparator a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::util::BytesRefIterator result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(result = self->object.iterator(a0));
                return ::org::apache::lucene::util::t_BytesRefIterator::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "iterator", args);
          return NULL;
        }

        static PyObject *t_BytesRefArray_size(t_BytesRefArray *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/LongFieldSource.h"
#include "org/apache/lucene/search/FieldCache$LongParser.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *LongFieldSource::class$ = NULL;
            jmethodID *LongFieldSource::mids$ = NULL;
            bool LongFieldSource::live$ = false;

            jclass LongFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/LongFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_d7533242] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$LongParser;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_externalToLong_5fdc3f54] = env->getMethodID(cls, "externalToLong", "(Ljava/lang/String;)J");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_longToObject_fe727f5c] = env->getMethodID(cls, "longToObject", "(J)Ljava/lang/Object;");
                mids$[mid_longToString_3e02f30e] = env->getMethodID(cls, "longToString", "(J)Ljava/lang/String;");
                mids$[mid_newMutableValueLong_31ee279b] = env->getMethodID(cls, "newMutableValueLong", "()Lorg/apache/lucene/util/mutable/MutableValueLong;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LongFieldSource::LongFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            LongFieldSource::LongFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$LongParser & a1) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_d7533242, a0.this$, a1.this$)) {}

            ::java::lang::String LongFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean LongFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jlong LongFieldSource::externalToLong(const ::java::lang::String & a0) const
            {
              return env->callLongMethod(this$, mids$[mid_externalToLong_5fdc3f54], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues LongFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint LongFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::Object LongFieldSource::longToObject(jlong a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_longToObject_fe727f5c], a0));
            }

            ::java::lang::String LongFieldSource::longToString(jlong a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_longToString_3e02f30e], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_LongFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LongFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LongFieldSource_init_(t_LongFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LongFieldSource_description(t_LongFieldSource *self, PyObject *args);
            static PyObject *t_LongFieldSource_equals(t_LongFieldSource *self, PyObject *args);
            static PyObject *t_LongFieldSource_externalToLong(t_LongFieldSource *self, PyObject *arg);
            static PyObject *t_LongFieldSource_getValues(t_LongFieldSource *self, PyObject *args);
            static PyObject *t_LongFieldSource_hashCode(t_LongFieldSource *self, PyObject *args);
            static PyObject *t_LongFieldSource_longToObject(t_LongFieldSource *self, PyObject *arg);
            static PyObject *t_LongFieldSource_longToString(t_LongFieldSource *self, PyObject *arg);

            static PyMethodDef t_LongFieldSource__methods_[] = {
              DECLARE_METHOD(t_LongFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LongFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LongFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_LongFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_LongFieldSource, externalToLong, METH_O),
              DECLARE_METHOD(t_LongFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_LongFieldSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_LongFieldSource, longToObject, METH_O),
              DECLARE_METHOD(t_LongFieldSource, longToString, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LongFieldSource, t_LongFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, LongFieldSource, t_LongFieldSource_init_, 0, 0, 0, 0, 0);

            void t_LongFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(LongFieldSource), module, "LongFieldSource", 0);
            }

            void t_LongFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LongFieldSource).tp_dict, "class_", make_descriptor(LongFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LongFieldSource).tp_dict, "wrapfn_", make_descriptor(t_LongFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LongFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_LongFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LongFieldSource::initializeClass, 1)))
                return NULL;
              return t_LongFieldSource::wrap_Object(LongFieldSource(((t_LongFieldSource *) arg)->object.this$));
            }
            static PyObject *t_LongFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LongFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LongFieldSource_init_(t_LongFieldSource *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  LongFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = LongFieldSource(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::FieldCache$LongParser a1((jobject) NULL);
                  LongFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldCache$LongParser::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = LongFieldSource(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_LongFieldSource_description(t_LongFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(LongFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_LongFieldSource_equals(t_LongFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(LongFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_LongFieldSource_externalToLong(t_LongFieldSource *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              jlong result;

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.externalToLong(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              PyErr_SetArgsError((PyObject *) self, "externalToLong", arg);
              return NULL;
            }

            static PyObject *t_LongFieldSource_getValues(t_LongFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(LongFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_LongFieldSource_hashCode(t_LongFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(LongFieldSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_LongFieldSource_longToObject(t_LongFieldSource *self, PyObject *arg)
            {
              jlong a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "J", &a0))
              {
                OBJ_CALL(result = self->object.longToObject(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "longToObject", arg);
              return NULL;
            }

            static PyObject *t_LongFieldSource_longToString(t_LongFieldSource *self, PyObject *arg)
            {
              jlong a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "J", &a0))
              {
                OBJ_CALL(result = self->object.longToString(a0));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "longToString", arg);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TrackingIndexWriter.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TrackingIndexWriter::class$ = NULL;
        jmethodID *TrackingIndexWriter::mids$ = NULL;
        bool TrackingIndexWriter::live$ = false;

        jclass TrackingIndexWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TrackingIndexWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4f2fb7d5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexWriter;)V");
            mids$[mid_addDocument_d1cac219] = env->getMethodID(cls, "addDocument", "(Ljava/lang/Iterable;)J");
            mids$[mid_addDocument_f74a1d49] = env->getMethodID(cls, "addDocument", "(Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)J");
            mids$[mid_addDocuments_d1cac219] = env->getMethodID(cls, "addDocuments", "(Ljava/lang/Iterable;)J");
            mids$[mid_addDocuments_f74a1d49] = env->getMethodID(cls, "addDocuments", "(Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)J");
            mids$[mid_addIndexes_a20f8ef5] = env->getMethodID(cls, "addIndexes", "([Lorg/apache/lucene/index/IndexReader;)J");
            mids$[mid_addIndexes_160e609a] = env->getMethodID(cls, "addIndexes", "([Lorg/apache/lucene/store/Directory;)J");
            mids$[mid_deleteAll_54c6a17a] = env->getMethodID(cls, "deleteAll", "()J");
            mids$[mid_deleteDocuments_7eca6a9d] = env->getMethodID(cls, "deleteDocuments", "(Lorg/apache/lucene/index/Term;)J");
            mids$[mid_deleteDocuments_c9f85e1d] = env->getMethodID(cls, "deleteDocuments", "([Lorg/apache/lucene/index/Term;)J");
            mids$[mid_deleteDocuments_937b34cf] = env->getMethodID(cls, "deleteDocuments", "([Lorg/apache/lucene/search/Query;)J");
            mids$[mid_deleteDocuments_6e30110f] = env->getMethodID(cls, "deleteDocuments", "(Lorg/apache/lucene/search/Query;)J");
            mids$[mid_getAndIncrementGeneration_54c6a17a] = env->getMethodID(cls, "getAndIncrementGeneration", "()J");
            mids$[mid_getGeneration_54c6a17a] = env->getMethodID(cls, "getGeneration", "()J");
            mids$[mid_getIndexWriter_bbe46a60] = env->getMethodID(cls, "getIndexWriter", "()Lorg/apache/lucene/index/IndexWriter;");
            mids$[mid_tryDeleteDocument_1e4306f9] = env->getMethodID(cls, "tryDeleteDocument", "(Lorg/apache/lucene/index/IndexReader;I)J");
            mids$[mid_updateDocument_b5aef5fe] = env->getMethodID(cls, "updateDocument", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;)J");
            mids$[mid_updateDocument_4d995da4] = env->getMethodID(cls, "updateDocument", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)J");
            mids$[mid_updateDocuments_b5aef5fe] = env->getMethodID(cls, "updateDocuments", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;)J");
            mids$[mid_updateDocuments_4d995da4] = env->getMethodID(cls, "updateDocuments", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TrackingIndexWriter::TrackingIndexWriter(const ::org::apache::lucene::index::IndexWriter & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4f2fb7d5, a0.this$)) {}

        jlong TrackingIndexWriter::addDocument(const ::java::lang::Iterable & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_addDocument_d1cac219], a0.this$);
        }

        jlong TrackingIndexWriter::addDocument(const ::java::lang::Iterable & a0, const ::org::apache::lucene::analysis::Analyzer & a1) const
        {
          return env->callLongMethod(this$, mids$[mid_addDocument_f74a1d49], a0.this$, a1.this$);
        }

        jlong TrackingIndexWriter::addDocuments(const ::java::lang::Iterable & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_addDocuments_d1cac219], a0.this$);
        }

        jlong TrackingIndexWriter::addDocuments(const ::java::lang::Iterable & a0, const ::org::apache::lucene::analysis::Analyzer & a1) const
        {
          return env->callLongMethod(this$, mids$[mid_addDocuments_f74a1d49], a0.this$, a1.this$);
        }

        jlong TrackingIndexWriter::addIndexes(const JArray< ::org::apache::lucene::index::IndexReader > & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_addIndexes_a20f8ef5], a0.this$);
        }

        jlong TrackingIndexWriter::addIndexes(const JArray< ::org::apache::lucene::store::Directory > & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_addIndexes_160e609a], a0.this$);
        }

        jlong TrackingIndexWriter::deleteAll() const
        {
          return env->callLongMethod(this$, mids$[mid_deleteAll_54c6a17a]);
        }

        jlong TrackingIndexWriter::deleteDocuments(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_deleteDocuments_7eca6a9d], a0.this$);
        }

        jlong TrackingIndexWriter::deleteDocuments(const JArray< ::org::apache::lucene::index::Term > & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_deleteDocuments_c9f85e1d], a0.this$);
        }

        jlong TrackingIndexWriter::deleteDocuments(const JArray< ::org::apache::lucene::search::Query > & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_deleteDocuments_937b34cf], a0.this$);
        }

        jlong TrackingIndexWriter::deleteDocuments(const ::org::apache::lucene::search::Query & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_deleteDocuments_6e30110f], a0.this$);
        }

        jlong TrackingIndexWriter::getAndIncrementGeneration() const
        {
          return env->callLongMethod(this$, mids$[mid_getAndIncrementGeneration_54c6a17a]);
        }

        jlong TrackingIndexWriter::getGeneration() const
        {
          return env->callLongMethod(this$, mids$[mid_getGeneration_54c6a17a]);
        }

        ::org::apache::lucene::index::IndexWriter TrackingIndexWriter::getIndexWriter() const
        {
          return ::org::apache::lucene::index::IndexWriter(env->callObjectMethod(this$, mids$[mid_getIndexWriter_bbe46a60]));
        }

        jlong TrackingIndexWriter::tryDeleteDocument(const ::org::apache::lucene::index::IndexReader & a0, jint a1) const
        {
          return env->callLongMethod(this$, mids$[mid_tryDeleteDocument_1e4306f9], a0.this$, a1);
        }

        jlong TrackingIndexWriter::updateDocument(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1) const
        {
          return env->callLongMethod(this$, mids$[mid_updateDocument_b5aef5fe], a0.this$, a1.this$);
        }

        jlong TrackingIndexWriter::updateDocument(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1, const ::org::apache::lucene::analysis::Analyzer & a2) const
        {
          return env->callLongMethod(this$, mids$[mid_updateDocument_4d995da4], a0.this$, a1.this$, a2.this$);
        }

        jlong TrackingIndexWriter::updateDocuments(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1) const
        {
          return env->callLongMethod(this$, mids$[mid_updateDocuments_b5aef5fe], a0.this$, a1.this$);
        }

        jlong TrackingIndexWriter::updateDocuments(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1, const ::org::apache::lucene::analysis::Analyzer & a2) const
        {
          return env->callLongMethod(this$, mids$[mid_updateDocuments_4d995da4], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TrackingIndexWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TrackingIndexWriter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TrackingIndexWriter_init_(t_TrackingIndexWriter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TrackingIndexWriter_addDocument(t_TrackingIndexWriter *self, PyObject *args);
        static PyObject *t_TrackingIndexWriter_addDocuments(t_TrackingIndexWriter *self, PyObject *args);
        static PyObject *t_TrackingIndexWriter_addIndexes(t_TrackingIndexWriter *self, PyObject *args);
        static PyObject *t_TrackingIndexWriter_deleteAll(t_TrackingIndexWriter *self);
        static PyObject *t_TrackingIndexWriter_deleteDocuments(t_TrackingIndexWriter *self, PyObject *args);
        static PyObject *t_TrackingIndexWriter_getAndIncrementGeneration(t_TrackingIndexWriter *self);
        static PyObject *t_TrackingIndexWriter_getGeneration(t_TrackingIndexWriter *self);
        static PyObject *t_TrackingIndexWriter_getIndexWriter(t_TrackingIndexWriter *self);
        static PyObject *t_TrackingIndexWriter_tryDeleteDocument(t_TrackingIndexWriter *self, PyObject *args);
        static PyObject *t_TrackingIndexWriter_updateDocument(t_TrackingIndexWriter *self, PyObject *args);
        static PyObject *t_TrackingIndexWriter_updateDocuments(t_TrackingIndexWriter *self, PyObject *args);
        static PyObject *t_TrackingIndexWriter_get__andIncrementGeneration(t_TrackingIndexWriter *self, void *data);
        static PyObject *t_TrackingIndexWriter_get__generation(t_TrackingIndexWriter *self, void *data);
        static PyObject *t_TrackingIndexWriter_get__indexWriter(t_TrackingIndexWriter *self, void *data);
        static PyGetSetDef t_TrackingIndexWriter__fields_[] = {
          DECLARE_GET_FIELD(t_TrackingIndexWriter, andIncrementGeneration),
          DECLARE_GET_FIELD(t_TrackingIndexWriter, generation),
          DECLARE_GET_FIELD(t_TrackingIndexWriter, indexWriter),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TrackingIndexWriter__methods_[] = {
          DECLARE_METHOD(t_TrackingIndexWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TrackingIndexWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TrackingIndexWriter, addDocument, METH_VARARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, addDocuments, METH_VARARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, addIndexes, METH_VARARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, deleteAll, METH_NOARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, deleteDocuments, METH_VARARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, getAndIncrementGeneration, METH_NOARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, getGeneration, METH_NOARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, getIndexWriter, METH_NOARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, tryDeleteDocument, METH_VARARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, updateDocument, METH_VARARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, updateDocuments, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TrackingIndexWriter, t_TrackingIndexWriter, ::java::lang::Object, TrackingIndexWriter, t_TrackingIndexWriter_init_, 0, 0, t_TrackingIndexWriter__fields_, 0, 0);

        void t_TrackingIndexWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(TrackingIndexWriter), module, "TrackingIndexWriter", 0);
        }

        void t_TrackingIndexWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TrackingIndexWriter).tp_dict, "class_", make_descriptor(TrackingIndexWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TrackingIndexWriter).tp_dict, "wrapfn_", make_descriptor(t_TrackingIndexWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TrackingIndexWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TrackingIndexWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TrackingIndexWriter::initializeClass, 1)))
            return NULL;
          return t_TrackingIndexWriter::wrap_Object(TrackingIndexWriter(((t_TrackingIndexWriter *) arg)->object.this$));
        }
        static PyObject *t_TrackingIndexWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TrackingIndexWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TrackingIndexWriter_init_(t_TrackingIndexWriter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
          TrackingIndexWriter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexWriter::initializeClass, &a0))
          {
            INT_CALL(object = TrackingIndexWriter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TrackingIndexWriter_addDocument(t_TrackingIndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              jlong result;

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(result = self->object.addDocument(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            break;
           case 2:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "Kk", ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.addDocument(a0, a1));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addDocument", args);
          return NULL;
        }

        static PyObject *t_TrackingIndexWriter_addDocuments(t_TrackingIndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              jlong result;

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(result = self->object.addDocuments(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            break;
           case 2:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "Kk", ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.addDocuments(a0, a1));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addDocuments", args);
          return NULL;
        }

        static PyObject *t_TrackingIndexWriter_addIndexes(t_TrackingIndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::IndexReader > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.addIndexes(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< ::org::apache::lucene::store::Directory > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.addIndexes(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addIndexes", args);
          return NULL;
        }

        static PyObject *t_TrackingIndexWriter_deleteAll(t_TrackingIndexWriter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.deleteAll());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TrackingIndexWriter_deleteDocuments(t_TrackingIndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.deleteDocuments(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< ::org::apache::lucene::index::Term > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.deleteDocuments(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< ::org::apache::lucene::search::Query > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.deleteDocuments(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.deleteDocuments(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "deleteDocuments", args);
          return NULL;
        }

        static PyObject *t_TrackingIndexWriter_getAndIncrementGeneration(t_TrackingIndexWriter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getAndIncrementGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TrackingIndexWriter_getGeneration(t_TrackingIndexWriter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TrackingIndexWriter_getIndexWriter(t_TrackingIndexWriter *self)
        {
          ::org::apache::lucene::index::IndexWriter result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexWriter());
          return ::org::apache::lucene::index::t_IndexWriter::wrap_Object(result);
        }

        static PyObject *t_TrackingIndexWriter_tryDeleteDocument(t_TrackingIndexWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          jint a1;
          jlong result;

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.tryDeleteDocument(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "tryDeleteDocument", args);
          return NULL;
        }

        static PyObject *t_TrackingIndexWriter_updateDocument(t_TrackingIndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;
              jlong result;

              if (!parseArgs(args, "kK", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(result = self->object.updateDocument(a0, a1));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "kKk", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2))
              {
                OBJ_CALL(result = self->object.updateDocument(a0, a1, a2));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "updateDocument", args);
          return NULL;
        }

        static PyObject *t_TrackingIndexWriter_updateDocuments(t_TrackingIndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;
              jlong result;

              if (!parseArgs(args, "kK", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(result = self->object.updateDocuments(a0, a1));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "kKk", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2))
              {
                OBJ_CALL(result = self->object.updateDocuments(a0, a1, a2));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "updateDocuments", args);
          return NULL;
        }

        static PyObject *t_TrackingIndexWriter_get__andIncrementGeneration(t_TrackingIndexWriter *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getAndIncrementGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_TrackingIndexWriter_get__generation(t_TrackingIndexWriter *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_TrackingIndexWriter_get__indexWriter(t_TrackingIndexWriter *self, void *data)
        {
          ::org::apache::lucene::index::IndexWriter value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexWriter());
          return ::org::apache::lucene::index::t_IndexWriter::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RateLimitedDirectoryWrapper.h"
#include "java/io/IOException.h"
#include "java/lang/Double.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/RateLimiter.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/IOContext$Context.h"
#include "org/apache/lucene/store/IOContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RateLimitedDirectoryWrapper::class$ = NULL;
        jmethodID *RateLimitedDirectoryWrapper::mids$ = NULL;
        bool RateLimitedDirectoryWrapper::live$ = false;

        jclass RateLimitedDirectoryWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RateLimitedDirectoryWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_copy_146bec62] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_getMaxWriteMBPerSec_c79e30dc] = env->getMethodID(cls, "getMaxWriteMBPerSec", "(Lorg/apache/lucene/store/IOContext$Context;)Ljava/lang/Double;");
            mids$[mid_setMaxWriteMBPerSec_947ec9bf] = env->getMethodID(cls, "setMaxWriteMBPerSec", "(Ljava/lang/Double;Lorg/apache/lucene/store/IOContext$Context;)V");
            mids$[mid_setRateLimiter_6afce4a8] = env->getMethodID(cls, "setRateLimiter", "(Lorg/apache/lucene/store/RateLimiter;Lorg/apache/lucene/store/IOContext$Context;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RateLimitedDirectoryWrapper::RateLimitedDirectoryWrapper(const ::org::apache::lucene::store::Directory & a0) : ::org::apache::lucene::store::FilterDirectory(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

        void RateLimitedDirectoryWrapper::copy(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_146bec62], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        ::org::apache::lucene::store::IndexOutput RateLimitedDirectoryWrapper::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        ::java::lang::Double RateLimitedDirectoryWrapper::getMaxWriteMBPerSec(const ::org::apache::lucene::store::IOContext$Context & a0) const
        {
          return ::java::lang::Double(env->callObjectMethod(this$, mids$[mid_getMaxWriteMBPerSec_c79e30dc], a0.this$));
        }

        void RateLimitedDirectoryWrapper::setMaxWriteMBPerSec(const ::java::lang::Double & a0, const ::org::apache::lucene::store::IOContext$Context & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxWriteMBPerSec_947ec9bf], a0.this$, a1.this$);
        }

        void RateLimitedDirectoryWrapper::setRateLimiter(const ::org::apache::lucene::store::RateLimiter & a0, const ::org::apache::lucene::store::IOContext$Context & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setRateLimiter_6afce4a8], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RateLimitedDirectoryWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RateLimitedDirectoryWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RateLimitedDirectoryWrapper_init_(t_RateLimitedDirectoryWrapper *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RateLimitedDirectoryWrapper_copy(t_RateLimitedDirectoryWrapper *self, PyObject *args);
        static PyObject *t_RateLimitedDirectoryWrapper_createOutput(t_RateLimitedDirectoryWrapper *self, PyObject *args);
        static PyObject *t_RateLimitedDirectoryWrapper_getMaxWriteMBPerSec(t_RateLimitedDirectoryWrapper *self, PyObject *arg);
        static PyObject *t_RateLimitedDirectoryWrapper_setMaxWriteMBPerSec(t_RateLimitedDirectoryWrapper *self, PyObject *args);
        static PyObject *t_RateLimitedDirectoryWrapper_setRateLimiter(t_RateLimitedDirectoryWrapper *self, PyObject *args);

        static PyMethodDef t_RateLimitedDirectoryWrapper__methods_[] = {
          DECLARE_METHOD(t_RateLimitedDirectoryWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimitedDirectoryWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimitedDirectoryWrapper, copy, METH_VARARGS),
          DECLARE_METHOD(t_RateLimitedDirectoryWrapper, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_RateLimitedDirectoryWrapper, getMaxWriteMBPerSec, METH_O),
          DECLARE_METHOD(t_RateLimitedDirectoryWrapper, setMaxWriteMBPerSec, METH_VARARGS),
          DECLARE_METHOD(t_RateLimitedDirectoryWrapper, setRateLimiter, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RateLimitedDirectoryWrapper, t_RateLimitedDirectoryWrapper, ::org::apache::lucene::store::FilterDirectory, RateLimitedDirectoryWrapper, t_RateLimitedDirectoryWrapper_init_, 0, 0, 0, 0, 0);

        void t_RateLimitedDirectoryWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(RateLimitedDirectoryWrapper), module, "RateLimitedDirectoryWrapper", 0);
        }

        void t_RateLimitedDirectoryWrapper::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RateLimitedDirectoryWrapper).tp_dict, "class_", make_descriptor(RateLimitedDirectoryWrapper::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RateLimitedDirectoryWrapper).tp_dict, "wrapfn_", make_descriptor(t_RateLimitedDirectoryWrapper::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RateLimitedDirectoryWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RateLimitedDirectoryWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RateLimitedDirectoryWrapper::initializeClass, 1)))
            return NULL;
          return t_RateLimitedDirectoryWrapper::wrap_Object(RateLimitedDirectoryWrapper(((t_RateLimitedDirectoryWrapper *) arg)->object.this$));
        }
        static PyObject *t_RateLimitedDirectoryWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RateLimitedDirectoryWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RateLimitedDirectoryWrapper_init_(t_RateLimitedDirectoryWrapper *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          RateLimitedDirectoryWrapper object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            INT_CALL(object = RateLimitedDirectoryWrapper(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RateLimitedDirectoryWrapper_copy(t_RateLimitedDirectoryWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);

          if (!parseArgs(args, "kssk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.copy(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RateLimitedDirectoryWrapper), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_RateLimitedDirectoryWrapper_createOutput(t_RateLimitedDirectoryWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(RateLimitedDirectoryWrapper), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_RateLimitedDirectoryWrapper_getMaxWriteMBPerSec(t_RateLimitedDirectoryWrapper *self, PyObject *arg)
        {
          ::org::apache::lucene::store::IOContext$Context a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Double result((jobject) NULL);

          if (!parseArg(arg, "K", ::org::apache::lucene::store::IOContext$Context::initializeClass, &a0, &p0, ::org::apache::lucene::store::t_IOContext$Context::parameters_))
          {
            OBJ_CALL(result = self->object.getMaxWriteMBPerSec(a0));
            return ::java::lang::t_Double::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getMaxWriteMBPerSec", arg);
          return NULL;
        }

        static PyObject *t_RateLimitedDirectoryWrapper_setMaxWriteMBPerSec(t_RateLimitedDirectoryWrapper *self, PyObject *args)
        {
          ::java::lang::Double a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext$Context a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "OK", &::java::lang::PY_TYPE(Double), ::org::apache::lucene::store::IOContext$Context::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::store::t_IOContext$Context::parameters_))
          {
            OBJ_CALL(self->object.setMaxWriteMBPerSec(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxWriteMBPerSec", args);
          return NULL;
        }

        static PyObject *t_RateLimitedDirectoryWrapper_setRateLimiter(t_RateLimitedDirectoryWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::store::RateLimiter a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext$Context a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "kK", ::org::apache::lucene::store::RateLimiter::initializeClass, ::org::apache::lucene::store::IOContext$Context::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::store::t_IOContext$Context::parameters_))
          {
            OBJ_CALL(self->object.setRateLimiter(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setRateLimiter", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sinks/TeeSinkTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkTokenStream.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {

          ::java::lang::Class *TeeSinkTokenFilter::class$ = NULL;
          jmethodID *TeeSinkTokenFilter::mids$ = NULL;
          bool TeeSinkTokenFilter::live$ = false;

          jclass TeeSinkTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sinks/TeeSinkTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_addSinkTokenStream_4bcd0017] = env->getMethodID(cls, "addSinkTokenStream", "(Lorg/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkTokenStream;)V");
              mids$[mid_consumeAllTokens_54c6a166] = env->getMethodID(cls, "consumeAllTokens", "()V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_newSinkTokenStream_17f71d86] = env->getMethodID(cls, "newSinkTokenStream", "()Lorg/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkTokenStream;");
              mids$[mid_newSinkTokenStream_714b7637] = env->getMethodID(cls, "newSinkTokenStream", "(Lorg/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkFilter;)Lorg/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkTokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TeeSinkTokenFilter::TeeSinkTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          void TeeSinkTokenFilter::addSinkTokenStream(const ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_addSinkTokenStream_4bcd0017], a0.this$);
          }

          void TeeSinkTokenFilter::consumeAllTokens() const
          {
            env->callVoidMethod(this$, mids$[mid_consumeAllTokens_54c6a166]);
          }

          void TeeSinkTokenFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean TeeSinkTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream TeeSinkTokenFilter::newSinkTokenStream() const
          {
            return ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream(env->callObjectMethod(this$, mids$[mid_newSinkTokenStream_17f71d86]));
          }

          ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream TeeSinkTokenFilter::newSinkTokenStream(const ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter & a0) const
          {
            return ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream(env->callObjectMethod(this$, mids$[mid_newSinkTokenStream_714b7637], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {
          static PyObject *t_TeeSinkTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TeeSinkTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TeeSinkTokenFilter_init_(t_TeeSinkTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TeeSinkTokenFilter_addSinkTokenStream(t_TeeSinkTokenFilter *self, PyObject *arg);
          static PyObject *t_TeeSinkTokenFilter_consumeAllTokens(t_TeeSinkTokenFilter *self);
          static PyObject *t_TeeSinkTokenFilter_end(t_TeeSinkTokenFilter *self, PyObject *args);
          static PyObject *t_TeeSinkTokenFilter_incrementToken(t_TeeSinkTokenFilter *self, PyObject *args);
          static PyObject *t_TeeSinkTokenFilter_newSinkTokenStream(t_TeeSinkTokenFilter *self, PyObject *args);

          static PyMethodDef t_TeeSinkTokenFilter__methods_[] = {
            DECLARE_METHOD(t_TeeSinkTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TeeSinkTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TeeSinkTokenFilter, addSinkTokenStream, METH_O),
            DECLARE_METHOD(t_TeeSinkTokenFilter, consumeAllTokens, METH_NOARGS),
            DECLARE_METHOD(t_TeeSinkTokenFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_TeeSinkTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_TeeSinkTokenFilter, newSinkTokenStream, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TeeSinkTokenFilter, t_TeeSinkTokenFilter, ::org::apache::lucene::analysis::TokenFilter, TeeSinkTokenFilter, t_TeeSinkTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_TeeSinkTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TeeSinkTokenFilter), module, "TeeSinkTokenFilter", 0);
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter).tp_dict, "SinkTokenStream", make_descriptor(&PY_TYPE(TeeSinkTokenFilter$SinkTokenStream)));
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter).tp_dict, "SinkFilter", make_descriptor(&PY_TYPE(TeeSinkTokenFilter$SinkFilter)));
          }

          void t_TeeSinkTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter).tp_dict, "class_", make_descriptor(TeeSinkTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_TeeSinkTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TeeSinkTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TeeSinkTokenFilter::initializeClass, 1)))
              return NULL;
            return t_TeeSinkTokenFilter::wrap_Object(TeeSinkTokenFilter(((t_TeeSinkTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_TeeSinkTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TeeSinkTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TeeSinkTokenFilter_init_(t_TeeSinkTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            TeeSinkTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = TeeSinkTokenFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TeeSinkTokenFilter_addSinkTokenStream(t_TeeSinkTokenFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.addSinkTokenStream(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addSinkTokenStream", arg);
            return NULL;
          }

          static PyObject *t_TeeSinkTokenFilter_consumeAllTokens(t_TeeSinkTokenFilter *self)
          {
            OBJ_CALL(self->object.consumeAllTokens());
            Py_RETURN_NONE;
          }

          static PyObject *t_TeeSinkTokenFilter_end(t_TeeSinkTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(TeeSinkTokenFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_TeeSinkTokenFilter_incrementToken(t_TeeSinkTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TeeSinkTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_TeeSinkTokenFilter_newSinkTokenStream(t_TeeSinkTokenFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream result((jobject) NULL);
                OBJ_CALL(result = self->object.newSinkTokenStream());
                return ::org::apache::lucene::analysis::sinks::t_TeeSinkTokenFilter$SinkTokenStream::wrap_Object(result);
              }
              break;
             case 1:
              {
                ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter a0((jobject) NULL);
                ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.newSinkTokenStream(a0));
                  return ::org::apache::lucene::analysis::sinks::t_TeeSinkTokenFilter$SinkTokenStream::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "newSinkTokenStream", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Error.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Error::class$ = NULL;
    jmethodID *Error::mids$ = NULL;
    bool Error::live$ = false;

    jclass Error::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Error");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Error::Error() : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    Error::Error(const ::java::lang::Throwable & a0) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

    Error::Error(const ::java::lang::String & a0) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    Error::Error(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Error_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Error_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Error_init_(t_Error *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_Error__methods_[] = {
      DECLARE_METHOD(t_Error, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Error, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Error, t_Error, ::java::lang::Throwable, Error, t_Error_init_, 0, 0, 0, 0, 0);

    void t_Error::install(PyObject *module)
    {
      installType(&PY_TYPE(Error), module, "Error", 0);
    }

    void t_Error::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Error).tp_dict, "class_", make_descriptor(Error::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Error).tp_dict, "wrapfn_", make_descriptor(t_Error::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Error).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Error_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Error::initializeClass, 1)))
        return NULL;
      return t_Error::wrap_Object(Error(((t_Error *) arg)->object.this$));
    }
    static PyObject *t_Error_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Error::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Error_init_(t_Error *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          Error object((jobject) NULL);

          INT_CALL(object = Error());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::Throwable a0((jobject) NULL);
          Error object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            INT_CALL(object = Error(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Error object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Error(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Throwable a1((jobject) NULL);
          Error object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Error(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletion$Completion.h"
#include "java/lang/Comparable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *FSTCompletion$Completion::class$ = NULL;
            jmethodID *FSTCompletion$Completion::mids$ = NULL;
            jfieldID *FSTCompletion$Completion::fids$ = NULL;
            bool FSTCompletion$Completion::live$ = false;

            jclass FSTCompletion$Completion::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/FSTCompletion$Completion");

                mids$ = new jmethodID[max_mid];
                mids$[mid_compareTo_2db77dab] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/search/suggest/fst/FSTCompletion$Completion;)I");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                fids$ = new jfieldID[max_fid];
                fids$[fid_bucket] = env->getFieldID(cls, "bucket", "I");
                fids$[fid_utf8] = env->getFieldID(cls, "utf8", "Lorg/apache/lucene/util/BytesRef;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jint FSTCompletion$Completion::compareTo(const FSTCompletion$Completion & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_compareTo_2db77dab], a0.this$);
            }

            ::java::lang::String FSTCompletion$Completion::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }

            jint FSTCompletion$Completion::_get_bucket() const
            {
              return env->getIntField(this$, fids$[fid_bucket]);
            }

            ::org::apache::lucene::util::BytesRef FSTCompletion$Completion::_get_utf8() const
            {
              return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_utf8]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_FSTCompletion$Completion_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTCompletion$Completion_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTCompletion$Completion_compareTo(t_FSTCompletion$Completion *self, PyObject *arg);
            static PyObject *t_FSTCompletion$Completion_toString(t_FSTCompletion$Completion *self, PyObject *args);
            static PyObject *t_FSTCompletion$Completion_get__bucket(t_FSTCompletion$Completion *self, void *data);
            static PyObject *t_FSTCompletion$Completion_get__utf8(t_FSTCompletion$Completion *self, void *data);

            static PyGetSetDef t_FSTCompletion$Completion__fields_[] = {
              DECLARE_GET_FIELD(t_FSTCompletion$Completion, bucket),
              DECLARE_GET_FIELD(t_FSTCompletion$Completion, utf8),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FSTCompletion$Completion__methods_[] = {
              DECLARE_METHOD(t_FSTCompletion$Completion, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletion$Completion, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletion$Completion, compareTo, METH_O),
              DECLARE_METHOD(t_FSTCompletion$Completion, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FSTCompletion$Completion, t_FSTCompletion$Completion, ::java::lang::Object, FSTCompletion$Completion, abstract_init, 0, 0, t_FSTCompletion$Completion__fields_, 0, 0);

            void t_FSTCompletion$Completion::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTCompletion$Completion), module, "FSTCompletion$Completion", 0);
            }

            void t_FSTCompletion$Completion::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FSTCompletion$Completion).tp_dict, "class_", make_descriptor(FSTCompletion$Completion::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FSTCompletion$Completion).tp_dict, "wrapfn_", make_descriptor(t_FSTCompletion$Completion::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FSTCompletion$Completion).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FSTCompletion$Completion_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTCompletion$Completion::initializeClass, 1)))
                return NULL;
              return t_FSTCompletion$Completion::wrap_Object(FSTCompletion$Completion(((t_FSTCompletion$Completion *) arg)->object.this$));
            }
            static PyObject *t_FSTCompletion$Completion_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTCompletion$Completion::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FSTCompletion$Completion_compareTo(t_FSTCompletion$Completion *self, PyObject *arg)
            {
              FSTCompletion$Completion a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", FSTCompletion$Completion::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.compareTo(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
              return NULL;
            }

            static PyObject *t_FSTCompletion$Completion_toString(t_FSTCompletion$Completion *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(FSTCompletion$Completion), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_FSTCompletion$Completion_get__bucket(t_FSTCompletion$Completion *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_bucket());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_FSTCompletion$Completion_get__utf8(t_FSTCompletion$Completion *self, void *data)
            {
              ::org::apache::lucene::util::BytesRef value((jobject) NULL);
              OBJ_CALL(value = self->object._get_utf8());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SlowFuzzyTermsEnum::class$ = NULL;
          jmethodID *SlowFuzzyTermsEnum::mids$ = NULL;
          bool SlowFuzzyTermsEnum::live$ = false;

          jclass SlowFuzzyTermsEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_40b71111] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;Lorg/apache/lucene/index/Term;FI)V");
              mids$[mid_maxEditDistanceChanged_0741f897] = env->getMethodID(cls, "maxEditDistanceChanged", "(Lorg/apache/lucene/util/BytesRef;IZ)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SlowFuzzyTermsEnum::SlowFuzzyTermsEnum(const ::org::apache::lucene::index::Terms & a0, const ::org::apache::lucene::util::AttributeSource & a1, const ::org::apache::lucene::index::Term & a2, jfloat a3, jint a4) : ::org::apache::lucene::search::FuzzyTermsEnum(env->newObject(initializeClass, &mids$, mid_init$_40b71111, a0.this$, a1.this$, a2.this$, a3, a4)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SlowFuzzyTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowFuzzyTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SlowFuzzyTermsEnum_init_(t_SlowFuzzyTermsEnum *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_SlowFuzzyTermsEnum__methods_[] = {
            DECLARE_METHOD(t_SlowFuzzyTermsEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowFuzzyTermsEnum, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SlowFuzzyTermsEnum, t_SlowFuzzyTermsEnum, ::org::apache::lucene::search::FuzzyTermsEnum, SlowFuzzyTermsEnum, t_SlowFuzzyTermsEnum_init_, 0, 0, 0, 0, 0);

          void t_SlowFuzzyTermsEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(SlowFuzzyTermsEnum), module, "SlowFuzzyTermsEnum", 0);
          }

          void t_SlowFuzzyTermsEnum::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SlowFuzzyTermsEnum).tp_dict, "class_", make_descriptor(SlowFuzzyTermsEnum::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SlowFuzzyTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_SlowFuzzyTermsEnum::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SlowFuzzyTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SlowFuzzyTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SlowFuzzyTermsEnum::initializeClass, 1)))
              return NULL;
            return t_SlowFuzzyTermsEnum::wrap_Object(SlowFuzzyTermsEnum(((t_SlowFuzzyTermsEnum *) arg)->object.this$));
          }
          static PyObject *t_SlowFuzzyTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SlowFuzzyTermsEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SlowFuzzyTermsEnum_init_(t_SlowFuzzyTermsEnum *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::Terms a0((jobject) NULL);
            ::org::apache::lucene::util::AttributeSource a1((jobject) NULL);
            ::org::apache::lucene::index::Term a2((jobject) NULL);
            jfloat a3;
            jint a4;
            SlowFuzzyTermsEnum object((jobject) NULL);

            if (!parseArgs(args, "kkkFI", ::org::apache::lucene::index::Terms::initializeClass, ::org::apache::lucene::util::AttributeSource::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = SlowFuzzyTermsEnum(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Builder.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/fst/Builder$FreezeTail.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/fst/Outputs.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/fst/FST$INPUT_TYPE.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Builder::class$ = NULL;
          jmethodID *Builder::mids$ = NULL;
          bool Builder::live$ = false;

          jclass Builder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Builder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_024447c3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;Lorg/apache/lucene/util/fst/Outputs;)V");
              mids$[mid_init$_bbea4f98] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;IIZZILorg/apache/lucene/util/fst/Outputs;Lorg/apache/lucene/util/fst/Builder$FreezeTail;ZFZI)V");
              mids$[mid_add_52197430] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/IntsRef;Ljava/lang/Object;)V");
              mids$[mid_finish_917b3659] = env->getMethodID(cls, "finish", "()Lorg/apache/lucene/util/fst/FST;");
              mids$[mid_fstRamBytesUsed_54c6a17a] = env->getMethodID(cls, "fstRamBytesUsed", "()J");
              mids$[mid_getMappedStateCount_54c6a17a] = env->getMethodID(cls, "getMappedStateCount", "()J");
              mids$[mid_getTermCount_54c6a17a] = env->getMethodID(cls, "getTermCount", "()J");
              mids$[mid_getTotStateCount_54c6a17a] = env->getMethodID(cls, "getTotStateCount", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Builder::Builder(const ::org::apache::lucene::util::fst::FST$INPUT_TYPE & a0, const ::org::apache::lucene::util::fst::Outputs & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_024447c3, a0.this$, a1.this$)) {}

          Builder::Builder(const ::org::apache::lucene::util::fst::FST$INPUT_TYPE & a0, jint a1, jint a2, jboolean a3, jboolean a4, jint a5, const ::org::apache::lucene::util::fst::Outputs & a6, const ::org::apache::lucene::util::fst::Builder$FreezeTail & a7, jboolean a8, jfloat a9, jboolean a10, jint a11) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bbea4f98, a0.this$, a1, a2, a3, a4, a5, a6.this$, a7.this$, a8, a9, a10, a11)) {}

          void Builder::add(const ::org::apache::lucene::util::IntsRef & a0, const ::java::lang::Object & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_add_52197430], a0.this$, a1.this$);
          }

          ::org::apache::lucene::util::fst::FST Builder::finish() const
          {
            return ::org::apache::lucene::util::fst::FST(env->callObjectMethod(this$, mids$[mid_finish_917b3659]));
          }

          jlong Builder::fstRamBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_fstRamBytesUsed_54c6a17a]);
          }

          jlong Builder::getMappedStateCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getMappedStateCount_54c6a17a]);
          }

          jlong Builder::getTermCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getTermCount_54c6a17a]);
          }

          jlong Builder::getTotStateCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getTotStateCount_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/fst/Builder$UnCompiledNode.h"
#include "org/apache/lucene/util/fst/Builder$Arc.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Builder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder_of_(t_Builder *self, PyObject *args);
          static int t_Builder_init_(t_Builder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Builder_add(t_Builder *self, PyObject *args);
          static PyObject *t_Builder_finish(t_Builder *self);
          static PyObject *t_Builder_fstRamBytesUsed(t_Builder *self);
          static PyObject *t_Builder_getMappedStateCount(t_Builder *self);
          static PyObject *t_Builder_getTermCount(t_Builder *self);
          static PyObject *t_Builder_getTotStateCount(t_Builder *self);
          static PyObject *t_Builder_get__mappedStateCount(t_Builder *self, void *data);
          static PyObject *t_Builder_get__termCount(t_Builder *self, void *data);
          static PyObject *t_Builder_get__totStateCount(t_Builder *self, void *data);
          static PyObject *t_Builder_get__parameters_(t_Builder *self, void *data);
          static PyGetSetDef t_Builder__fields_[] = {
            DECLARE_GET_FIELD(t_Builder, mappedStateCount),
            DECLARE_GET_FIELD(t_Builder, termCount),
            DECLARE_GET_FIELD(t_Builder, totStateCount),
            DECLARE_GET_FIELD(t_Builder, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Builder__methods_[] = {
            DECLARE_METHOD(t_Builder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder, of_, METH_VARARGS),
            DECLARE_METHOD(t_Builder, add, METH_VARARGS),
            DECLARE_METHOD(t_Builder, finish, METH_NOARGS),
            DECLARE_METHOD(t_Builder, fstRamBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_Builder, getMappedStateCount, METH_NOARGS),
            DECLARE_METHOD(t_Builder, getTermCount, METH_NOARGS),
            DECLARE_METHOD(t_Builder, getTotStateCount, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Builder, t_Builder, ::java::lang::Object, Builder, t_Builder_init_, 0, 0, t_Builder__fields_, 0, 0);
          PyObject *t_Builder::wrap_Object(const Builder& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder *self = (t_Builder *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Builder::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder *self = (t_Builder *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Builder::install(PyObject *module)
          {
            installType(&PY_TYPE(Builder), module, "Builder", 0);
            PyDict_SetItemString(PY_TYPE(Builder).tp_dict, "UnCompiledNode", make_descriptor(&PY_TYPE(Builder$UnCompiledNode)));
            PyDict_SetItemString(PY_TYPE(Builder).tp_dict, "Arc", make_descriptor(&PY_TYPE(Builder$Arc)));
            PyDict_SetItemString(PY_TYPE(Builder).tp_dict, "FreezeTail", make_descriptor(&PY_TYPE(Builder$FreezeTail)));
          }

          void t_Builder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Builder).tp_dict, "class_", make_descriptor(Builder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Builder).tp_dict, "wrapfn_", make_descriptor(t_Builder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Builder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Builder::initializeClass, 1)))
              return NULL;
            return t_Builder::wrap_Object(Builder(((t_Builder *) arg)->object.this$));
          }
          static PyObject *t_Builder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Builder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Builder_of_(t_Builder *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Builder_init_(t_Builder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::fst::FST$INPUT_TYPE a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::fst::Outputs a1((jobject) NULL);
                PyTypeObject **p1;
                Builder object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::FST$INPUT_TYPE::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$INPUT_TYPE::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_Outputs::parameters_))
                {
                  INT_CALL(object = Builder(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 12:
              {
                ::org::apache::lucene::util::fst::FST$INPUT_TYPE a0((jobject) NULL);
                PyTypeObject **p0;
                jint a1;
                jint a2;
                jboolean a3;
                jboolean a4;
                jint a5;
                ::org::apache::lucene::util::fst::Outputs a6((jobject) NULL);
                PyTypeObject **p6;
                ::org::apache::lucene::util::fst::Builder$FreezeTail a7((jobject) NULL);
                PyTypeObject **p7;
                jboolean a8;
                jfloat a9;
                jboolean a10;
                jint a11;
                Builder object((jobject) NULL);

                if (!parseArgs(args, "KIIZZIKKZFZI", ::org::apache::lucene::util::fst::FST$INPUT_TYPE::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, ::org::apache::lucene::util::fst::Builder$FreezeTail::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$INPUT_TYPE::parameters_, &a1, &a2, &a3, &a4, &a5, &a6, &p6, ::org::apache::lucene::util::fst::t_Outputs::parameters_, &a7, &p7, ::org::apache::lucene::util::fst::t_Builder$FreezeTail::parameters_, &a8, &a9, &a10, &a11))
                {
                  INT_CALL(object = Builder(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Builder_add(t_Builder *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);

            if (!parseArgs(args, "kO", ::org::apache::lucene::util::IntsRef::initializeClass, self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(self->object.add(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_Builder_finish(t_Builder *self)
          {
            ::org::apache::lucene::util::fst::FST result((jobject) NULL);
            OBJ_CALL(result = self->object.finish());
            return ::org::apache::lucene::util::fst::t_FST::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_Builder_fstRamBytesUsed(t_Builder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.fstRamBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Builder_getMappedStateCount(t_Builder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getMappedStateCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Builder_getTermCount(t_Builder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getTermCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Builder_getTotStateCount(t_Builder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getTotStateCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
          static PyObject *t_Builder_get__parameters_(t_Builder *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Builder_get__mappedStateCount(t_Builder *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getMappedStateCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_Builder_get__termCount(t_Builder *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getTermCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_Builder_get__totStateCount(t_Builder *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getTotStateCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/SpanishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *SpanishStemmer::class$ = NULL;
        jmethodID *SpanishStemmer::mids$ = NULL;
        bool SpanishStemmer::live$ = false;

        jclass SpanishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/SpanishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SpanishStemmer::SpanishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean SpanishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint SpanishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean SpanishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_SpanishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SpanishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SpanishStemmer_init_(t_SpanishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SpanishStemmer_equals(t_SpanishStemmer *self, PyObject *args);
        static PyObject *t_SpanishStemmer_hashCode(t_SpanishStemmer *self, PyObject *args);
        static PyObject *t_SpanishStemmer_stem(t_SpanishStemmer *self, PyObject *args);

        static PyMethodDef t_SpanishStemmer__methods_[] = {
          DECLARE_METHOD(t_SpanishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SpanishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SpanishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_SpanishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_SpanishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SpanishStemmer, t_SpanishStemmer, ::org::tartarus::snowball::SnowballProgram, SpanishStemmer, t_SpanishStemmer_init_, 0, 0, 0, 0, 0);

        void t_SpanishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(SpanishStemmer), module, "SpanishStemmer", 0);
        }

        void t_SpanishStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SpanishStemmer).tp_dict, "class_", make_descriptor(SpanishStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SpanishStemmer).tp_dict, "wrapfn_", make_descriptor(t_SpanishStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SpanishStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SpanishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SpanishStemmer::initializeClass, 1)))
            return NULL;
          return t_SpanishStemmer::wrap_Object(SpanishStemmer(((t_SpanishStemmer *) arg)->object.this$));
        }
        static PyObject *t_SpanishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SpanishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SpanishStemmer_init_(t_SpanishStemmer *self, PyObject *args, PyObject *kwds)
        {
          SpanishStemmer object((jobject) NULL);

          INT_CALL(object = SpanishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_SpanishStemmer_equals(t_SpanishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(SpanishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_SpanishStemmer_hashCode(t_SpanishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SpanishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_SpanishStemmer_stem(t_SpanishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(SpanishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace perfield {

          ::java::lang::Class *PerFieldDocValuesFormat::class$ = NULL;
          jmethodID *PerFieldDocValuesFormat::mids$ = NULL;
          bool PerFieldDocValuesFormat::live$ = false;
          ::java::lang::String *PerFieldDocValuesFormat::PER_FIELD_FORMAT_KEY = NULL;
          ::java::lang::String *PerFieldDocValuesFormat::PER_FIELD_NAME = NULL;
          ::java::lang::String *PerFieldDocValuesFormat::PER_FIELD_SUFFIX_KEY = NULL;

          jclass PerFieldDocValuesFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_025deb44] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_fieldsProducer_9b0d4e4a] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");
              mids$[mid_getDocValuesFormatForField_36ef78ba] = env->getMethodID(cls, "getDocValuesFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PER_FIELD_FORMAT_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_FORMAT_KEY", "Ljava/lang/String;"));
              PER_FIELD_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_NAME", "Ljava/lang/String;"));
              PER_FIELD_SUFFIX_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_SUFFIX_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PerFieldDocValuesFormat::PerFieldDocValuesFormat() : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer PerFieldDocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer PerFieldDocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_9b0d4e4a], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesFormat PerFieldDocValuesFormat::getDocValuesFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_getDocValuesFormatForField_36ef78ba], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace perfield {
          static PyObject *t_PerFieldDocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PerFieldDocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PerFieldDocValuesFormat_init_(t_PerFieldDocValuesFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PerFieldDocValuesFormat_fieldsConsumer(t_PerFieldDocValuesFormat *self, PyObject *args);
          static PyObject *t_PerFieldDocValuesFormat_fieldsProducer(t_PerFieldDocValuesFormat *self, PyObject *args);
          static PyObject *t_PerFieldDocValuesFormat_getDocValuesFormatForField(t_PerFieldDocValuesFormat *self, PyObject *arg);

          static PyMethodDef t_PerFieldDocValuesFormat__methods_[] = {
            DECLARE_METHOD(t_PerFieldDocValuesFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldDocValuesFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldDocValuesFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_PerFieldDocValuesFormat, fieldsProducer, METH_VARARGS),
            DECLARE_METHOD(t_PerFieldDocValuesFormat, getDocValuesFormatForField, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PerFieldDocValuesFormat, t_PerFieldDocValuesFormat, ::org::apache::lucene::codecs::DocValuesFormat, PerFieldDocValuesFormat, t_PerFieldDocValuesFormat_init_, 0, 0, 0, 0, 0);

          void t_PerFieldDocValuesFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(PerFieldDocValuesFormat), module, "PerFieldDocValuesFormat", 0);
          }

          void t_PerFieldDocValuesFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PerFieldDocValuesFormat).tp_dict, "class_", make_descriptor(PerFieldDocValuesFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PerFieldDocValuesFormat).tp_dict, "wrapfn_", make_descriptor(t_PerFieldDocValuesFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PerFieldDocValuesFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PerFieldDocValuesFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(PerFieldDocValuesFormat).tp_dict, "PER_FIELD_FORMAT_KEY", make_descriptor(j2p(*PerFieldDocValuesFormat::PER_FIELD_FORMAT_KEY)));
            PyDict_SetItemString(PY_TYPE(PerFieldDocValuesFormat).tp_dict, "PER_FIELD_NAME", make_descriptor(j2p(*PerFieldDocValuesFormat::PER_FIELD_NAME)));
            PyDict_SetItemString(PY_TYPE(PerFieldDocValuesFormat).tp_dict, "PER_FIELD_SUFFIX_KEY", make_descriptor(j2p(*PerFieldDocValuesFormat::PER_FIELD_SUFFIX_KEY)));
          }

          static PyObject *t_PerFieldDocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PerFieldDocValuesFormat::initializeClass, 1)))
              return NULL;
            return t_PerFieldDocValuesFormat::wrap_Object(PerFieldDocValuesFormat(((t_PerFieldDocValuesFormat *) arg)->object.this$));
          }
          static PyObject *t_PerFieldDocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PerFieldDocValuesFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PerFieldDocValuesFormat_init_(t_PerFieldDocValuesFormat *self, PyObject *args, PyObject *kwds)
          {
            PerFieldDocValuesFormat object((jobject) NULL);

            INT_CALL(object = PerFieldDocValuesFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_PerFieldDocValuesFormat_fieldsConsumer(t_PerFieldDocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PerFieldDocValuesFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_PerFieldDocValuesFormat_fieldsProducer(t_PerFieldDocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PerFieldDocValuesFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }

          static PyObject *t_PerFieldDocValuesFormat_getDocValuesFormatForField(t_PerFieldDocValuesFormat *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDocValuesFormatForField(a0));
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDocValuesFormatForField", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/DoubleBarrelLRUCache.h"
#include "org/apache/lucene/util/DoubleBarrelLRUCache$CloneableKey.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *DoubleBarrelLRUCache::class$ = NULL;
        jmethodID *DoubleBarrelLRUCache::mids$ = NULL;
        bool DoubleBarrelLRUCache::live$ = false;

        jclass DoubleBarrelLRUCache::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/DoubleBarrelLRUCache");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_get_08c4f70e] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/util/DoubleBarrelLRUCache$CloneableKey;)Ljava/lang/Object;");
            mids$[mid_put_49de5bfd] = env->getMethodID(cls, "put", "(Lorg/apache/lucene/util/DoubleBarrelLRUCache$CloneableKey;Ljava/lang/Object;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DoubleBarrelLRUCache::DoubleBarrelLRUCache(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        ::java::lang::Object DoubleBarrelLRUCache::get(const ::org::apache::lucene::util::DoubleBarrelLRUCache$CloneableKey & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_08c4f70e], a0.this$));
        }

        void DoubleBarrelLRUCache::put(const ::org::apache::lucene::util::DoubleBarrelLRUCache$CloneableKey & a0, const ::java::lang::Object & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_put_49de5bfd], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_DoubleBarrelLRUCache_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleBarrelLRUCache_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleBarrelLRUCache_of_(t_DoubleBarrelLRUCache *self, PyObject *args);
        static int t_DoubleBarrelLRUCache_init_(t_DoubleBarrelLRUCache *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DoubleBarrelLRUCache_get(t_DoubleBarrelLRUCache *self, PyObject *arg);
        static PyObject *t_DoubleBarrelLRUCache_put(t_DoubleBarrelLRUCache *self, PyObject *args);
        static PyObject *t_DoubleBarrelLRUCache_get__parameters_(t_DoubleBarrelLRUCache *self, void *data);
        static PyGetSetDef t_DoubleBarrelLRUCache__fields_[] = {
          DECLARE_GET_FIELD(t_DoubleBarrelLRUCache, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DoubleBarrelLRUCache__methods_[] = {
          DECLARE_METHOD(t_DoubleBarrelLRUCache, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleBarrelLRUCache, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleBarrelLRUCache, of_, METH_VARARGS),
          DECLARE_METHOD(t_DoubleBarrelLRUCache, get, METH_O),
          DECLARE_METHOD(t_DoubleBarrelLRUCache, put, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DoubleBarrelLRUCache, t_DoubleBarrelLRUCache, ::java::lang::Object, DoubleBarrelLRUCache, t_DoubleBarrelLRUCache_init_, 0, 0, t_DoubleBarrelLRUCache__fields_, 0, 0);
        PyObject *t_DoubleBarrelLRUCache::wrap_Object(const DoubleBarrelLRUCache& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_DoubleBarrelLRUCache::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DoubleBarrelLRUCache *self = (t_DoubleBarrelLRUCache *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        PyObject *t_DoubleBarrelLRUCache::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_DoubleBarrelLRUCache::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DoubleBarrelLRUCache *self = (t_DoubleBarrelLRUCache *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        void t_DoubleBarrelLRUCache::install(PyObject *module)
        {
          installType(&PY_TYPE(DoubleBarrelLRUCache), module, "DoubleBarrelLRUCache", 0);
          PyDict_SetItemString(PY_TYPE(DoubleBarrelLRUCache).tp_dict, "CloneableKey", make_descriptor(&PY_TYPE(DoubleBarrelLRUCache$CloneableKey)));
        }

        void t_DoubleBarrelLRUCache::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DoubleBarrelLRUCache).tp_dict, "class_", make_descriptor(DoubleBarrelLRUCache::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DoubleBarrelLRUCache).tp_dict, "wrapfn_", make_descriptor(t_DoubleBarrelLRUCache::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DoubleBarrelLRUCache).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DoubleBarrelLRUCache_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DoubleBarrelLRUCache::initializeClass, 1)))
            return NULL;
          return t_DoubleBarrelLRUCache::wrap_Object(DoubleBarrelLRUCache(((t_DoubleBarrelLRUCache *) arg)->object.this$));
        }
        static PyObject *t_DoubleBarrelLRUCache_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DoubleBarrelLRUCache::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DoubleBarrelLRUCache_of_(t_DoubleBarrelLRUCache *self, PyObject *args)
        {
          if (!parseArg(args, "T", 2, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_DoubleBarrelLRUCache_init_(t_DoubleBarrelLRUCache *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          DoubleBarrelLRUCache object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = DoubleBarrelLRUCache(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DoubleBarrelLRUCache_get(t_DoubleBarrelLRUCache *self, PyObject *arg)
        {
          ::org::apache::lucene::util::DoubleBarrelLRUCache$CloneableKey a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "K", ::org::apache::lucene::util::DoubleBarrelLRUCache$CloneableKey::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_DoubleBarrelLRUCache$CloneableKey::parameters_))
          {
            OBJ_CALL(result = self->object.get(a0));
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_DoubleBarrelLRUCache_put(t_DoubleBarrelLRUCache *self, PyObject *args)
        {
          ::org::apache::lucene::util::DoubleBarrelLRUCache$CloneableKey a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object a1((jobject) NULL);

          if (!parseArgs(args, "KO", ::org::apache::lucene::util::DoubleBarrelLRUCache$CloneableKey::initializeClass, self->parameters[1], &a0, &p0, ::org::apache::lucene::util::t_DoubleBarrelLRUCache$CloneableKey::parameters_, &a1))
          {
            OBJ_CALL(self->object.put(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "put", args);
          return NULL;
        }
        static PyObject *t_DoubleBarrelLRUCache_get__parameters_(t_DoubleBarrelLRUCache *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/OrQueryNode.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *OrQueryNode::class$ = NULL;
              jmethodID *OrQueryNode::mids$ = NULL;
              bool OrQueryNode::live$ = false;

              jclass OrQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/OrQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              OrQueryNode::OrQueryNode(const ::java::util::List & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

              ::java::lang::CharSequence OrQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String OrQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_OrQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_OrQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_OrQueryNode_init_(t_OrQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_OrQueryNode_toQueryString(t_OrQueryNode *self, PyObject *args);
              static PyObject *t_OrQueryNode_toString(t_OrQueryNode *self, PyObject *args);

              static PyMethodDef t_OrQueryNode__methods_[] = {
                DECLARE_METHOD(t_OrQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_OrQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_OrQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_OrQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(OrQueryNode, t_OrQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode, OrQueryNode, t_OrQueryNode_init_, 0, 0, 0, 0, 0);

              void t_OrQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(OrQueryNode), module, "OrQueryNode", 0);
              }

              void t_OrQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(OrQueryNode).tp_dict, "class_", make_descriptor(OrQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(OrQueryNode).tp_dict, "wrapfn_", make_descriptor(t_OrQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(OrQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_OrQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, OrQueryNode::initializeClass, 1)))
                  return NULL;
                return t_OrQueryNode::wrap_Object(OrQueryNode(((t_OrQueryNode *) arg)->object.this$));
              }
              static PyObject *t_OrQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, OrQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_OrQueryNode_init_(t_OrQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                OrQueryNode object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  INT_CALL(object = OrQueryNode(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_OrQueryNode_toQueryString(t_OrQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(OrQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_OrQueryNode_toString(t_OrQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(OrQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/InputStream.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *InputStream::class$ = NULL;
    jmethodID *InputStream::mids$ = NULL;
    bool InputStream::live$ = false;

    jclass InputStream::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/InputStream");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_available_54c6a179] = env->getMethodID(cls, "available", "()I");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_mark_39c7bd3c] = env->getMethodID(cls, "mark", "(I)V");
        mids$[mid_markSupported_54c6a16a] = env->getMethodID(cls, "markSupported", "()Z");
        mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
        mids$[mid_read_49b4f134] = env->getMethodID(cls, "read", "([B)I");
        mids$[mid_read_86f44340] = env->getMethodID(cls, "read", "([BII)I");
        mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
        mids$[mid_skip_0ee6df33] = env->getMethodID(cls, "skip", "(J)J");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    InputStream::InputStream() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    jint InputStream::available() const
    {
      return env->callIntMethod(this$, mids$[mid_available_54c6a179]);
    }

    void InputStream::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    void InputStream::mark(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_mark_39c7bd3c], a0);
    }

    jboolean InputStream::markSupported() const
    {
      return env->callBooleanMethod(this$, mids$[mid_markSupported_54c6a16a]);
    }

    jint InputStream::read() const
    {
      return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
    }

    jint InputStream::read(const JArray< jbyte > & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_read_49b4f134], a0.this$);
    }

    jint InputStream::read(const JArray< jbyte > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_86f44340], a0.this$, a1, a2);
    }

    void InputStream::reset() const
    {
      env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
    }

    jlong InputStream::skip(jlong a0) const
    {
      return env->callLongMethod(this$, mids$[mid_skip_0ee6df33], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_InputStream_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_InputStream_instance_(PyTypeObject *type, PyObject *arg);
    static int t_InputStream_init_(t_InputStream *self, PyObject *args, PyObject *kwds);
    static PyObject *t_InputStream_available(t_InputStream *self);
    static PyObject *t_InputStream_close(t_InputStream *self);
    static PyObject *t_InputStream_mark(t_InputStream *self, PyObject *arg);
    static PyObject *t_InputStream_markSupported(t_InputStream *self);
    static PyObject *t_InputStream_read(t_InputStream *self, PyObject *args);
    static PyObject *t_InputStream_reset(t_InputStream *self);
    static PyObject *t_InputStream_skip(t_InputStream *self, PyObject *arg);

    static PyMethodDef t_InputStream__methods_[] = {
      DECLARE_METHOD(t_InputStream, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_InputStream, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_InputStream, available, METH_NOARGS),
      DECLARE_METHOD(t_InputStream, close, METH_NOARGS),
      DECLARE_METHOD(t_InputStream, mark, METH_O),
      DECLARE_METHOD(t_InputStream, markSupported, METH_NOARGS),
      DECLARE_METHOD(t_InputStream, read, METH_VARARGS),
      DECLARE_METHOD(t_InputStream, reset, METH_NOARGS),
      DECLARE_METHOD(t_InputStream, skip, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(InputStream, t_InputStream, ::java::lang::Object, InputStream, t_InputStream_init_, 0, 0, 0, 0, 0);

    void t_InputStream::install(PyObject *module)
    {
      installType(&PY_TYPE(InputStream), module, "InputStream", 0);
    }

    void t_InputStream::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(InputStream).tp_dict, "class_", make_descriptor(InputStream::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(InputStream).tp_dict, "wrapfn_", make_descriptor(t_InputStream::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(InputStream).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_InputStream_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, InputStream::initializeClass, 1)))
        return NULL;
      return t_InputStream::wrap_Object(InputStream(((t_InputStream *) arg)->object.this$));
    }
    static PyObject *t_InputStream_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, InputStream::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_InputStream_init_(t_InputStream *self, PyObject *args, PyObject *kwds)
    {
      InputStream object((jobject) NULL);

      INT_CALL(object = InputStream());
      self->object = object;

      return 0;
    }

    static PyObject *t_InputStream_available(t_InputStream *self)
    {
      jint result;
      OBJ_CALL(result = self->object.available());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_InputStream_close(t_InputStream *self)
    {
      OBJ_CALL(self->object.close());
      Py_RETURN_NONE;
    }

    static PyObject *t_InputStream_mark(t_InputStream *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.mark(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "mark", arg);
      return NULL;
    }

    static PyObject *t_InputStream_markSupported(t_InputStream *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.markSupported());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_InputStream_read(t_InputStream *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.read());
          return PyInt_FromLong((long) result);
        }
        break;
       case 1:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(result = self->object.read(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "read", args);
      return NULL;
    }

    static PyObject *t_InputStream_reset(t_InputStream *self)
    {
      OBJ_CALL(self->object.reset());
      Py_RETURN_NONE;
    }

    static PyObject *t_InputStream_skip(t_InputStream *self, PyObject *arg)
    {
      jlong a0;
      jlong result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = self->object.skip(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError((PyObject *) self, "skip", arg);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PagedBytes$PagedBytesDataOutput.h"
#include "org/apache/lucene/util/PagedBytes.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PagedBytes$PagedBytesDataOutput::class$ = NULL;
        jmethodID *PagedBytes$PagedBytesDataOutput::mids$ = NULL;
        bool PagedBytes$PagedBytesDataOutput::live$ = false;

        jclass PagedBytes$PagedBytesDataOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PagedBytes$PagedBytesDataOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2279e4ea] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/PagedBytes;)V");
            mids$[mid_getPosition_54c6a17a] = env->getMethodID(cls, "getPosition", "()J");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PagedBytes$PagedBytesDataOutput::PagedBytes$PagedBytesDataOutput(const ::org::apache::lucene::util::PagedBytes & a0) : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_2279e4ea, a0.this$)) {}

        jlong PagedBytes$PagedBytesDataOutput::getPosition() const
        {
          return env->callLongMethod(this$, mids$[mid_getPosition_54c6a17a]);
        }

        void PagedBytes$PagedBytesDataOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_b2271687], a0);
        }

        void PagedBytes$PagedBytesDataOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PagedBytes$PagedBytesDataOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes$PagedBytesDataOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PagedBytes$PagedBytesDataOutput_init_(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PagedBytes$PagedBytesDataOutput_getPosition(t_PagedBytes$PagedBytesDataOutput *self);
        static PyObject *t_PagedBytes$PagedBytesDataOutput_writeByte(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args);
        static PyObject *t_PagedBytes$PagedBytesDataOutput_writeBytes(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args);
        static PyObject *t_PagedBytes$PagedBytesDataOutput_get__position(t_PagedBytes$PagedBytesDataOutput *self, void *data);
        static PyGetSetDef t_PagedBytes$PagedBytesDataOutput__fields_[] = {
          DECLARE_GET_FIELD(t_PagedBytes$PagedBytesDataOutput, position),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PagedBytes$PagedBytesDataOutput__methods_[] = {
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataOutput, getPosition, METH_NOARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataOutput, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PagedBytes$PagedBytesDataOutput, t_PagedBytes$PagedBytesDataOutput, ::org::apache::lucene::store::DataOutput, PagedBytes$PagedBytesDataOutput, t_PagedBytes$PagedBytesDataOutput_init_, 0, 0, t_PagedBytes$PagedBytesDataOutput__fields_, 0, 0);

        void t_PagedBytes$PagedBytesDataOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(PagedBytes$PagedBytesDataOutput), module, "PagedBytes$PagedBytesDataOutput", 0);
        }

        void t_PagedBytes$PagedBytesDataOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PagedBytes$PagedBytesDataOutput).tp_dict, "class_", make_descriptor(PagedBytes$PagedBytesDataOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PagedBytes$PagedBytesDataOutput).tp_dict, "wrapfn_", make_descriptor(t_PagedBytes$PagedBytesDataOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PagedBytes$PagedBytesDataOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PagedBytes$PagedBytesDataOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PagedBytes$PagedBytesDataOutput::initializeClass, 1)))
            return NULL;
          return t_PagedBytes$PagedBytesDataOutput::wrap_Object(PagedBytes$PagedBytesDataOutput(((t_PagedBytes$PagedBytesDataOutput *) arg)->object.this$));
        }
        static PyObject *t_PagedBytes$PagedBytesDataOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PagedBytes$PagedBytesDataOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PagedBytes$PagedBytesDataOutput_init_(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::PagedBytes a0((jobject) NULL);
          PagedBytes$PagedBytesDataOutput object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::PagedBytes::initializeClass, &a0))
          {
            INT_CALL(object = PagedBytes$PagedBytesDataOutput(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PagedBytes$PagedBytesDataOutput_getPosition(t_PagedBytes$PagedBytesDataOutput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getPosition());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_PagedBytes$PagedBytesDataOutput_writeByte(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PagedBytes$PagedBytesDataOutput), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_PagedBytes$PagedBytesDataOutput_writeBytes(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PagedBytes$PagedBytesDataOutput), (PyObject *) self, "writeBytes", args, 2);
        }

        static PyObject *t_PagedBytes$PagedBytesDataOutput_get__position(t_PagedBytes$PagedBytesDataOutput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getPosition());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$DocValuesStatus.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$DocValuesStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$DocValuesStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$DocValuesStatus::fids$ = NULL;
        bool CheckIndex$Status$DocValuesStatus::live$ = false;

        jclass CheckIndex$Status$DocValuesStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$DocValuesStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_error] = env->getFieldID(cls, "error", "Ljava/lang/Throwable;");
            fids$[fid_totalBinaryFields] = env->getFieldID(cls, "totalBinaryFields", "J");
            fids$[fid_totalNumericFields] = env->getFieldID(cls, "totalNumericFields", "J");
            fids$[fid_totalSortedFields] = env->getFieldID(cls, "totalSortedFields", "J");
            fids$[fid_totalSortedNumericFields] = env->getFieldID(cls, "totalSortedNumericFields", "J");
            fids$[fid_totalSortedSetFields] = env->getFieldID(cls, "totalSortedSetFields", "J");
            fids$[fid_totalValueFields] = env->getFieldID(cls, "totalValueFields", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Throwable CheckIndex$Status$DocValuesStatus::_get_error() const
        {
          return ::java::lang::Throwable(env->getObjectField(this$, fids$[fid_error]));
        }

        void CheckIndex$Status$DocValuesStatus::_set_error(const ::java::lang::Throwable & a0) const
        {
          env->setObjectField(this$, fids$[fid_error], a0.this$);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalBinaryFields() const
        {
          return env->getLongField(this$, fids$[fid_totalBinaryFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalBinaryFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalBinaryFields], a0);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalNumericFields() const
        {
          return env->getLongField(this$, fids$[fid_totalNumericFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalNumericFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalNumericFields], a0);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalSortedFields() const
        {
          return env->getLongField(this$, fids$[fid_totalSortedFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalSortedFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalSortedFields], a0);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalSortedNumericFields() const
        {
          return env->getLongField(this$, fids$[fid_totalSortedNumericFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalSortedNumericFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalSortedNumericFields], a0);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalSortedSetFields() const
        {
          return env->getLongField(this$, fids$[fid_totalSortedSetFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalSortedSetFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalSortedSetFields], a0);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalValueFields() const
        {
          return env->getLongField(this$, fids$[fid_totalValueFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalValueFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalValueFields], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$DocValuesStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__error(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__error(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalBinaryFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalBinaryFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalNumericFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalNumericFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedNumericFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedNumericFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedSetFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedSetFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalValueFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalValueFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$DocValuesStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, error),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalBinaryFields),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalNumericFields),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalSortedFields),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalSortedNumericFields),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalSortedSetFields),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalValueFields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$DocValuesStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$DocValuesStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$DocValuesStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex$Status$DocValuesStatus, t_CheckIndex$Status$DocValuesStatus, ::java::lang::Object, CheckIndex$Status$DocValuesStatus, abstract_init, 0, 0, t_CheckIndex$Status$DocValuesStatus__fields_, 0, 0);

        void t_CheckIndex$Status$DocValuesStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$DocValuesStatus), module, "CheckIndex$Status$DocValuesStatus", 0);
        }

        void t_CheckIndex$Status$DocValuesStatus::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$DocValuesStatus).tp_dict, "class_", make_descriptor(CheckIndex$Status$DocValuesStatus::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$DocValuesStatus).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex$Status$DocValuesStatus::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$DocValuesStatus).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$DocValuesStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$DocValuesStatus::wrap_Object(CheckIndex$Status$DocValuesStatus(((t_CheckIndex$Status$DocValuesStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$DocValuesStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$DocValuesStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__error(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_error());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__error(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &value))
          {
            INT_CALL(self->object._set_error(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "error", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalBinaryFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalBinaryFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalBinaryFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalBinaryFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalBinaryFields", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalNumericFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalNumericFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalNumericFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalNumericFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalNumericFields", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalSortedFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalSortedFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalSortedFields", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedNumericFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalSortedNumericFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedNumericFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalSortedNumericFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalSortedNumericFields", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedSetFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalSortedSetFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedSetFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalSortedSetFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalSortedSetFields", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalValueFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalValueFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalValueFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalValueFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalValueFields", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *NumericDocValues::class$ = NULL;
        jmethodID *NumericDocValues::mids$ = NULL;
        bool NumericDocValues::live$ = false;

        jclass NumericDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/NumericDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_get_39c7bd20] = env->getMethodID(cls, "get", "(I)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong NumericDocValues::get(jint a0) const
        {
          return env->callLongMethod(this$, mids$[mid_get_39c7bd20], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_NumericDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericDocValues_get(t_NumericDocValues *self, PyObject *arg);

        static PyMethodDef t_NumericDocValues__methods_[] = {
          DECLARE_METHOD(t_NumericDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericDocValues, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericDocValues, t_NumericDocValues, ::java::lang::Object, NumericDocValues, abstract_init, 0, 0, 0, 0, 0);

        void t_NumericDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericDocValues), module, "NumericDocValues", 0);
        }

        void t_NumericDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericDocValues).tp_dict, "class_", make_descriptor(NumericDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericDocValues).tp_dict, "wrapfn_", make_descriptor(t_NumericDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericDocValues::initializeClass, 1)))
            return NULL;
          return t_NumericDocValues::wrap_Object(NumericDocValues(((t_NumericDocValues *) arg)->object.this$));
        }
        static PyObject *t_NumericDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NumericDocValues_get(t_NumericDocValues *self, PyObject *arg)
        {
          jint a0;
          jlong result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/System.h"
#include "java/io/PrintStream.h"
#include "java/util/Map.h"
#include "java/lang/SecurityManager.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/util/Properties.h"
#include "java/io/InputStream.h"
#include "java/io/Console.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *System::class$ = NULL;
    jmethodID *System::mids$ = NULL;
    bool System::live$ = false;
    ::java::io::PrintStream *System::err = NULL;
    ::java::io::InputStream *System::in = NULL;
    ::java::io::PrintStream *System::out = NULL;

    jclass System::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/System");

        mids$ = new jmethodID[max_mid];
        mids$[mid_arraycopy_8bcf5170] = env->getStaticMethodID(cls, "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V");
        mids$[mid_clearProperty_97a5258f] = env->getStaticMethodID(cls, "clearProperty", "(Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_console_d6171648] = env->getStaticMethodID(cls, "console", "()Ljava/io/Console;");
        mids$[mid_currentTimeMillis_54c6a17a] = env->getStaticMethodID(cls, "currentTimeMillis", "()J");
        mids$[mid_exit_39c7bd3c] = env->getStaticMethodID(cls, "exit", "(I)V");
        mids$[mid_gc_54c6a166] = env->getStaticMethodID(cls, "gc", "()V");
        mids$[mid_getProperties_7e96414d] = env->getStaticMethodID(cls, "getProperties", "()Ljava/util/Properties;");
        mids$[mid_getProperty_97a5258f] = env->getStaticMethodID(cls, "getProperty", "(Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_getProperty_aacea7e9] = env->getStaticMethodID(cls, "getProperty", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_getSecurityManager_0361f9be] = env->getStaticMethodID(cls, "getSecurityManager", "()Ljava/lang/SecurityManager;");
        mids$[mid_getenv_db60befd] = env->getStaticMethodID(cls, "getenv", "()Ljava/util/Map;");
        mids$[mid_getenv_97a5258f] = env->getStaticMethodID(cls, "getenv", "(Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_identityHashCode_290588f1] = env->getStaticMethodID(cls, "identityHashCode", "(Ljava/lang/Object;)I");
        mids$[mid_lineSeparator_14c7b5c5] = env->getStaticMethodID(cls, "lineSeparator", "()Ljava/lang/String;");
        mids$[mid_load_5fdc3f48] = env->getStaticMethodID(cls, "load", "(Ljava/lang/String;)V");
        mids$[mid_loadLibrary_5fdc3f48] = env->getStaticMethodID(cls, "loadLibrary", "(Ljava/lang/String;)V");
        mids$[mid_mapLibraryName_97a5258f] = env->getStaticMethodID(cls, "mapLibraryName", "(Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_nanoTime_54c6a17a] = env->getStaticMethodID(cls, "nanoTime", "()J");
        mids$[mid_runFinalization_54c6a166] = env->getStaticMethodID(cls, "runFinalization", "()V");
        mids$[mid_runFinalizersOnExit_bb0c767f] = env->getStaticMethodID(cls, "runFinalizersOnExit", "(Z)V");
        mids$[mid_setErr_1b7c898b] = env->getStaticMethodID(cls, "setErr", "(Ljava/io/PrintStream;)V");
        mids$[mid_setIn_be2e4f90] = env->getStaticMethodID(cls, "setIn", "(Ljava/io/InputStream;)V");
        mids$[mid_setOut_1b7c898b] = env->getStaticMethodID(cls, "setOut", "(Ljava/io/PrintStream;)V");
        mids$[mid_setProperties_c4afb15c] = env->getStaticMethodID(cls, "setProperties", "(Ljava/util/Properties;)V");
        mids$[mid_setProperty_aacea7e9] = env->getStaticMethodID(cls, "setProperty", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_setSecurityManager_c35b0b0b] = env->getStaticMethodID(cls, "setSecurityManager", "(Ljava/lang/SecurityManager;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        err = new ::java::io::PrintStream(env->getStaticObjectField(cls, "err", "Ljava/io/PrintStream;"));
        in = new ::java::io::InputStream(env->getStaticObjectField(cls, "in", "Ljava/io/InputStream;"));
        out = new ::java::io::PrintStream(env->getStaticObjectField(cls, "out", "Ljava/io/PrintStream;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    void System::arraycopy(const ::java::lang::Object & a0, jint a1, const ::java::lang::Object & a2, jint a3, jint a4)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_arraycopy_8bcf5170], a0.this$, a1, a2.this$, a3, a4);
    }

    ::java::lang::String System::clearProperty(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_clearProperty_97a5258f], a0.this$));
    }

    ::java::io::Console System::console()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::io::Console(env->callStaticObjectMethod(cls, mids$[mid_console_d6171648]));
    }

    jlong System::currentTimeMillis()
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_currentTimeMillis_54c6a17a]);
    }

    void System::exit(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_exit_39c7bd3c], a0);
    }

    void System::gc()
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_gc_54c6a166]);
    }

    ::java::util::Properties System::getProperties()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Properties(env->callStaticObjectMethod(cls, mids$[mid_getProperties_7e96414d]));
    }

    ::java::lang::String System::getProperty(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getProperty_97a5258f], a0.this$));
    }

    ::java::lang::String System::getProperty(const ::java::lang::String & a0, const ::java::lang::String & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getProperty_aacea7e9], a0.this$, a1.this$));
    }

    ::java::lang::SecurityManager System::getSecurityManager()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::SecurityManager(env->callStaticObjectMethod(cls, mids$[mid_getSecurityManager_0361f9be]));
    }

    ::java::util::Map System::getenv()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_getenv_db60befd]));
    }

    ::java::lang::String System::getenv(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getenv_97a5258f], a0.this$));
    }

    jint System::identityHashCode(const ::java::lang::Object & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_identityHashCode_290588f1], a0.this$);
    }

    ::java::lang::String System::lineSeparator()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_lineSeparator_14c7b5c5]));
    }

    void System::load(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_load_5fdc3f48], a0.this$);
    }

    void System::loadLibrary(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_loadLibrary_5fdc3f48], a0.this$);
    }

    ::java::lang::String System::mapLibraryName(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_mapLibraryName_97a5258f], a0.this$));
    }

    jlong System::nanoTime()
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_nanoTime_54c6a17a]);
    }

    void System::runFinalization()
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_runFinalization_54c6a166]);
    }

    void System::runFinalizersOnExit(jboolean a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_runFinalizersOnExit_bb0c767f], a0);
    }

    void System::setErr(const ::java::io::PrintStream & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setErr_1b7c898b], a0.this$);
    }

    void System::setIn(const ::java::io::InputStream & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setIn_be2e4f90], a0.this$);
    }

    void System::setOut(const ::java::io::PrintStream & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setOut_1b7c898b], a0.this$);
    }

    void System::setProperties(const ::java::util::Properties & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setProperties_c4afb15c], a0.this$);
    }

    ::java::lang::String System::setProperty(const ::java::lang::String & a0, const ::java::lang::String & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_setProperty_aacea7e9], a0.this$, a1.this$));
    }

    void System::setSecurityManager(const ::java::lang::SecurityManager & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setSecurityManager_c35b0b0b], a0.this$);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_System_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_arraycopy(PyTypeObject *type, PyObject *args);
    static PyObject *t_System_clearProperty(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_console(PyTypeObject *type);
    static PyObject *t_System_currentTimeMillis(PyTypeObject *type);
    static PyObject *t_System_exit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_gc(PyTypeObject *type);
    static PyObject *t_System_getProperties(PyTypeObject *type);
    static PyObject *t_System_getProperty(PyTypeObject *type, PyObject *args);
    static PyObject *t_System_getSecurityManager(PyTypeObject *type);
    static PyObject *t_System_getenv(PyTypeObject *type, PyObject *args);
    static PyObject *t_System_identityHashCode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_lineSeparator(PyTypeObject *type);
    static PyObject *t_System_load(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_loadLibrary(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_mapLibraryName(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_nanoTime(PyTypeObject *type);
    static PyObject *t_System_runFinalization(PyTypeObject *type);
    static PyObject *t_System_runFinalizersOnExit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_setErr(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_setIn(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_setOut(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_setProperties(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_setProperty(PyTypeObject *type, PyObject *args);
    static PyObject *t_System_setSecurityManager(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_get__env(t_System *self, void *data);
    static int t_System_set__err(t_System *self, PyObject *arg, void *data);
    static int t_System_set__in(t_System *self, PyObject *arg, void *data);
    static int t_System_set__out(t_System *self, PyObject *arg, void *data);
    static PyObject *t_System_get__properties(t_System *self, void *data);
    static int t_System_set__properties(t_System *self, PyObject *arg, void *data);
    static PyObject *t_System_get__securityManager(t_System *self, void *data);
    static int t_System_set__securityManager(t_System *self, PyObject *arg, void *data);
    static PyGetSetDef t_System__fields_[] = {
      DECLARE_GET_FIELD(t_System, env),
      DECLARE_SET_FIELD(t_System, err),
      DECLARE_SET_FIELD(t_System, in),
      DECLARE_SET_FIELD(t_System, out),
      DECLARE_GETSET_FIELD(t_System, properties),
      DECLARE_GETSET_FIELD(t_System, securityManager),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_System__methods_[] = {
      DECLARE_METHOD(t_System, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, arraycopy, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_System, clearProperty, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, console, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, currentTimeMillis, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, exit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, gc, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, getProperties, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, getProperty, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_System, getSecurityManager, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, getenv, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_System, identityHashCode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, lineSeparator, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, load, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, loadLibrary, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, mapLibraryName, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, nanoTime, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, runFinalization, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, runFinalizersOnExit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, setErr, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, setIn, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, setOut, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, setProperties, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, setProperty, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_System, setSecurityManager, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(System, t_System, ::java::lang::Object, System, abstract_init, 0, 0, t_System__fields_, 0, 0);

    void t_System::install(PyObject *module)
    {
      installType(&PY_TYPE(System), module, "System", 0);
    }

    void t_System::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(System).tp_dict, "class_", make_descriptor(System::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(System).tp_dict, "wrapfn_", make_descriptor(t_System::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(System).tp_dict, "boxfn_", make_descriptor(boxObject));
      env->getClass(System::initializeClass);
      PyDict_SetItemString(PY_TYPE(System).tp_dict, "err", make_descriptor(::java::io::t_PrintStream::wrap_Object(*System::err)));
      PyDict_SetItemString(PY_TYPE(System).tp_dict, "in", make_descriptor(::java::io::t_InputStream::wrap_Object(*System::in)));
      PyDict_SetItemString(PY_TYPE(System).tp_dict, "out", make_descriptor(::java::io::t_PrintStream::wrap_Object(*System::out)));
    }

    static PyObject *t_System_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, System::initializeClass, 1)))
        return NULL;
      return t_System::wrap_Object(System(((t_System *) arg)->object.this$));
    }
    static PyObject *t_System_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, System::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_System_arraycopy(PyTypeObject *type, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jint a1;
      ::java::lang::Object a2((jobject) NULL);
      jint a3;
      jint a4;

      if (!parseArgs(args, "oIoII", &a0, &a1, &a2, &a3, &a4))
      {
        OBJ_CALL(::java::lang::System::arraycopy(a0, a1, a2, a3, a4));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "arraycopy", args);
      return NULL;
    }

    static PyObject *t_System_clearProperty(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::System::clearProperty(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "clearProperty", arg);
      return NULL;
    }

    static PyObject *t_System_console(PyTypeObject *type)
    {
      ::java::io::Console result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::System::console());
      return ::java::io::t_Console::wrap_Object(result);
    }

    static PyObject *t_System_currentTimeMillis(PyTypeObject *type)
    {
      jlong result;
      OBJ_CALL(result = ::java::lang::System::currentTimeMillis());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_System_exit(PyTypeObject *type, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(::java::lang::System::exit(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "exit", arg);
      return NULL;
    }

    static PyObject *t_System_gc(PyTypeObject *type)
    {
      OBJ_CALL(::java::lang::System::gc());
      Py_RETURN_NONE;
    }

    static PyObject *t_System_getProperties(PyTypeObject *type)
    {
      ::java::util::Properties result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::System::getProperties());
      return ::java::util::t_Properties::wrap_Object(result);
    }

    static PyObject *t_System_getProperty(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::System::getProperty(a0));
            return j2p(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::System::getProperty(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getProperty", args);
      return NULL;
    }

    static PyObject *t_System_getSecurityManager(PyTypeObject *type)
    {
      ::java::lang::SecurityManager result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::System::getSecurityManager());
      return ::java::lang::t_SecurityManager::wrap_Object(result);
    }

    static PyObject *t_System_getenv(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = ::java::lang::System::getenv());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }
        break;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::System::getenv(a0));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getenv", args);
      return NULL;
    }

    static PyObject *t_System_identityHashCode(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = ::java::lang::System::identityHashCode(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "identityHashCode", arg);
      return NULL;
    }

    static PyObject *t_System_lineSeparator(PyTypeObject *type)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::System::lineSeparator());
      return j2p(result);
    }

    static PyObject *t_System_load(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(::java::lang::System::load(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "load", arg);
      return NULL;
    }

    static PyObject *t_System_loadLibrary(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(::java::lang::System::loadLibrary(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "loadLibrary", arg);
      return NULL;
    }

    static PyObject *t_System_mapLibraryName(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::System::mapLibraryName(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "mapLibraryName", arg);
      return NULL;
    }

    static PyObject *t_System_nanoTime(PyTypeObject *type)
    {
      jlong result;
      OBJ_CALL(result = ::java::lang::System::nanoTime());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_System_runFinalization(PyTypeObject *type)
    {
      OBJ_CALL(::java::lang::System::runFinalization());
      Py_RETURN_NONE;
    }

    static PyObject *t_System_runFinalizersOnExit(PyTypeObject *type, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(::java::lang::System::runFinalizersOnExit(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "runFinalizersOnExit", arg);
      return NULL;
    }

    static PyObject *t_System_setErr(PyTypeObject *type, PyObject *arg)
    {
      ::java::io::PrintStream a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
      {
        OBJ_CALL(::java::lang::System::setErr(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setErr", arg);
      return NULL;
    }

    static PyObject *t_System_setIn(PyTypeObject *type, PyObject *arg)
    {
      ::java::io::InputStream a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
      {
        OBJ_CALL(::java::lang::System::setIn(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setIn", arg);
      return NULL;
    }

    static PyObject *t_System_setOut(PyTypeObject *type, PyObject *arg)
    {
      ::java::io::PrintStream a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
      {
        OBJ_CALL(::java::lang::System::setOut(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setOut", arg);
      return NULL;
    }

    static PyObject *t_System_setProperties(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Properties a0((jobject) NULL);
      PyTypeObject **p0;

      if (!parseArg(arg, "K", ::java::util::Properties::initializeClass, &a0, &p0, ::java::util::t_Properties::parameters_))
      {
        OBJ_CALL(::java::lang::System::setProperties(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setProperties", arg);
      return NULL;
    }

    static PyObject *t_System_setProperty(PyTypeObject *type, PyObject *args)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::lang::String a1((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "ss", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::System::setProperty(a0, a1));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "setProperty", args);
      return NULL;
    }

    static PyObject *t_System_setSecurityManager(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::SecurityManager a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::lang::SecurityManager::initializeClass, &a0))
      {
        OBJ_CALL(::java::lang::System::setSecurityManager(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setSecurityManager", arg);
      return NULL;
    }

    static PyObject *t_System_get__env(t_System *self, void *data)
    {
      ::java::util::Map value((jobject) NULL);
      OBJ_CALL(value = self->object.getenv());
      return ::java::util::t_Map::wrap_Object(value);
    }

    static int t_System_set__err(t_System *self, PyObject *arg, void *data)
    {
      {
        ::java::io::PrintStream value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
        {
          INT_CALL(self->object.setErr(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "err", arg);
      return -1;
    }

    static int t_System_set__in(t_System *self, PyObject *arg, void *data)
    {
      {
        ::java::io::InputStream value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &value))
        {
          INT_CALL(self->object.setIn(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "in", arg);
      return -1;
    }

    static int t_System_set__out(t_System *self, PyObject *arg, void *data)
    {
      {
        ::java::io::PrintStream value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
        {
          INT_CALL(self->object.setOut(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "out", arg);
      return -1;
    }

    static PyObject *t_System_get__properties(t_System *self, void *data)
    {
      ::java::util::Properties value((jobject) NULL);
      OBJ_CALL(value = self->object.getProperties());
      return ::java::util::t_Properties::wrap_Object(value);
    }
    static int t_System_set__properties(t_System *self, PyObject *arg, void *data)
    {
      {
        ::java::util::Properties value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::Properties::initializeClass, &value))
        {
          INT_CALL(self->object.setProperties(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "properties", arg);
      return -1;
    }

    static PyObject *t_System_get__securityManager(t_System *self, void *data)
    {
      ::java::lang::SecurityManager value((jobject) NULL);
      OBJ_CALL(value = self->object.getSecurityManager());
      return ::java::lang::t_SecurityManager::wrap_Object(value);
    }
    static int t_System_set__securityManager(t_System *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::SecurityManager value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::lang::SecurityManager::initializeClass, &value))
        {
          INT_CALL(self->object.setSecurityManager(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "securityManager", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cn/ChineseFilter.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {

          ::java::lang::Class *ChineseFilter::class$ = NULL;
          jmethodID *ChineseFilter::mids$ = NULL;
          bool ChineseFilter::live$ = false;
          JArray< ::java::lang::String > *ChineseFilter::STOP_WORDS = NULL;

          jclass ChineseFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cn/ChineseFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              STOP_WORDS = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "STOP_WORDS", "[Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ChineseFilter::ChineseFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ChineseFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {
          static PyObject *t_ChineseFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ChineseFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ChineseFilter_init_(t_ChineseFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ChineseFilter_incrementToken(t_ChineseFilter *self, PyObject *args);

          static PyMethodDef t_ChineseFilter__methods_[] = {
            DECLARE_METHOD(t_ChineseFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ChineseFilter, t_ChineseFilter, ::org::apache::lucene::analysis::TokenFilter, ChineseFilter, t_ChineseFilter_init_, 0, 0, 0, 0, 0);

          void t_ChineseFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ChineseFilter), module, "ChineseFilter", 0);
          }

          void t_ChineseFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ChineseFilter).tp_dict, "class_", make_descriptor(ChineseFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ChineseFilter).tp_dict, "wrapfn_", make_descriptor(t_ChineseFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ChineseFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ChineseFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(ChineseFilter).tp_dict, "STOP_WORDS", make_descriptor(JArray<jstring>(ChineseFilter::STOP_WORDS->this$).wrap()));
          }

          static PyObject *t_ChineseFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ChineseFilter::initializeClass, 1)))
              return NULL;
            return t_ChineseFilter::wrap_Object(ChineseFilter(((t_ChineseFilter *) arg)->object.this$));
          }
          static PyObject *t_ChineseFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ChineseFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ChineseFilter_init_(t_ChineseFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ChineseFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ChineseFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ChineseFilter_incrementToken(t_ChineseFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ChineseFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner.h"
#include "org/apache/lucene/search/vectorhighlight/BoundaryScanner.h"
#include "java/lang/Character.h"
#include "java/util/Set.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *SimpleBoundaryScanner::class$ = NULL;
          jmethodID *SimpleBoundaryScanner::mids$ = NULL;
          bool SimpleBoundaryScanner::live$ = false;
          JArray< ::java::lang::Character > *SimpleBoundaryScanner::DEFAULT_BOUNDARY_CHARS = NULL;
          jint SimpleBoundaryScanner::DEFAULT_MAX_SCAN = (jint) 0;

          jclass SimpleBoundaryScanner::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_a03f060b] = env->getMethodID(cls, "<init>", "([Ljava/lang/Character;)V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_init$_4d893084] = env->getMethodID(cls, "<init>", "(ILjava/util/Set;)V");
              mids$[mid_init$_ac2fcfe5] = env->getMethodID(cls, "<init>", "(I[Ljava/lang/Character;)V");
              mids$[mid_findEndOffset_f3d950f1] = env->getMethodID(cls, "findEndOffset", "(Ljava/lang/StringBuilder;I)I");
              mids$[mid_findStartOffset_f3d950f1] = env->getMethodID(cls, "findStartOffset", "(Ljava/lang/StringBuilder;I)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_BOUNDARY_CHARS = new JArray< ::java::lang::Character >(env->getStaticObjectField(cls, "DEFAULT_BOUNDARY_CHARS", "[Ljava/lang/Character;"));
              DEFAULT_MAX_SCAN = env->getStaticIntField(cls, "DEFAULT_MAX_SCAN");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleBoundaryScanner::SimpleBoundaryScanner() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          SimpleBoundaryScanner::SimpleBoundaryScanner(const JArray< ::java::lang::Character > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a03f060b, a0.this$)) {}

          SimpleBoundaryScanner::SimpleBoundaryScanner(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          SimpleBoundaryScanner::SimpleBoundaryScanner(jint a0, const ::java::util::Set & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4d893084, a0, a1.this$)) {}

          SimpleBoundaryScanner::SimpleBoundaryScanner(jint a0, const JArray< ::java::lang::Character > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ac2fcfe5, a0, a1.this$)) {}

          jint SimpleBoundaryScanner::findEndOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findEndOffset_f3d950f1], a0.this$, a1);
          }

          jint SimpleBoundaryScanner::findStartOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findStartOffset_f3d950f1], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_SimpleBoundaryScanner_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleBoundaryScanner_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleBoundaryScanner_init_(t_SimpleBoundaryScanner *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleBoundaryScanner_findEndOffset(t_SimpleBoundaryScanner *self, PyObject *args);
          static PyObject *t_SimpleBoundaryScanner_findStartOffset(t_SimpleBoundaryScanner *self, PyObject *args);

          static PyMethodDef t_SimpleBoundaryScanner__methods_[] = {
            DECLARE_METHOD(t_SimpleBoundaryScanner, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleBoundaryScanner, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleBoundaryScanner, findEndOffset, METH_VARARGS),
            DECLARE_METHOD(t_SimpleBoundaryScanner, findStartOffset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleBoundaryScanner, t_SimpleBoundaryScanner, ::java::lang::Object, SimpleBoundaryScanner, t_SimpleBoundaryScanner_init_, 0, 0, 0, 0, 0);

          void t_SimpleBoundaryScanner::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleBoundaryScanner), module, "SimpleBoundaryScanner", 0);
          }

          void t_SimpleBoundaryScanner::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleBoundaryScanner).tp_dict, "class_", make_descriptor(SimpleBoundaryScanner::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleBoundaryScanner).tp_dict, "wrapfn_", make_descriptor(t_SimpleBoundaryScanner::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleBoundaryScanner).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SimpleBoundaryScanner::initializeClass);
            PyDict_SetItemString(PY_TYPE(SimpleBoundaryScanner).tp_dict, "DEFAULT_BOUNDARY_CHARS", make_descriptor(JArray<jobject>(SimpleBoundaryScanner::DEFAULT_BOUNDARY_CHARS->this$).wrap(::java::lang::t_Character::wrap_jobject)));
            PyDict_SetItemString(PY_TYPE(SimpleBoundaryScanner).tp_dict, "DEFAULT_MAX_SCAN", make_descriptor(SimpleBoundaryScanner::DEFAULT_MAX_SCAN));
          }

          static PyObject *t_SimpleBoundaryScanner_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleBoundaryScanner::initializeClass, 1)))
              return NULL;
            return t_SimpleBoundaryScanner::wrap_Object(SimpleBoundaryScanner(((t_SimpleBoundaryScanner *) arg)->object.this$));
          }
          static PyObject *t_SimpleBoundaryScanner_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleBoundaryScanner::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleBoundaryScanner_init_(t_SimpleBoundaryScanner *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SimpleBoundaryScanner object((jobject) NULL);

                INT_CALL(object = SimpleBoundaryScanner());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                JArray< ::java::lang::Character > a0((jobject) NULL);
                SimpleBoundaryScanner object((jobject) NULL);

                if (!parseArgs(args, "[O", &::java::lang::PY_TYPE(Character), &a0))
                {
                  INT_CALL(object = SimpleBoundaryScanner(a0));
                  self->object = object;
                  break;
                }
              }
              {
                jint a0;
                SimpleBoundaryScanner object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = SimpleBoundaryScanner(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                jint a0;
                ::java::util::Set a1((jobject) NULL);
                PyTypeObject **p1;
                SimpleBoundaryScanner object((jobject) NULL);

                if (!parseArgs(args, "IK", ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = SimpleBoundaryScanner(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                jint a0;
                JArray< ::java::lang::Character > a1((jobject) NULL);
                SimpleBoundaryScanner object((jobject) NULL);

                if (!parseArgs(args, "I[O", &::java::lang::PY_TYPE(Character), &a0, &a1))
                {
                  INT_CALL(object = SimpleBoundaryScanner(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleBoundaryScanner_findEndOffset(t_SimpleBoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findEndOffset(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findEndOffset", args);
            return NULL;
          }

          static PyObject *t_SimpleBoundaryScanner_findStartOffset(t_SimpleBoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findStartOffset(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findStartOffset", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *Iterator::class$ = NULL;
    jmethodID *Iterator::mids$ = NULL;
    bool Iterator::live$ = false;

    jclass Iterator::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/Iterator");

        mids$ = new jmethodID[max_mid];
        mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
        mids$[mid_next_846352c3] = env->getMethodID(cls, "next", "()Ljava/lang/Object;");
        mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jboolean Iterator::hasNext() const
    {
      return env->callBooleanMethod(this$, mids$[mid_hasNext_54c6a16a]);
    }

    ::java::lang::Object Iterator::next() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_next_846352c3]));
    }

    void Iterator::remove() const
    {
      env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_Iterator_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Iterator_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Iterator_of_(t_Iterator *self, PyObject *args);
    static PyObject *t_Iterator_hasNext(t_Iterator *self);
    static PyObject *t_Iterator_next(t_Iterator *self);
    static PyObject *t_Iterator_remove(t_Iterator *self);
    static PyObject *t_Iterator_get__parameters_(t_Iterator *self, void *data);
    static PyGetSetDef t_Iterator__fields_[] = {
      DECLARE_GET_FIELD(t_Iterator, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Iterator__methods_[] = {
      DECLARE_METHOD(t_Iterator, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Iterator, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Iterator, of_, METH_VARARGS),
      DECLARE_METHOD(t_Iterator, hasNext, METH_NOARGS),
      DECLARE_METHOD(t_Iterator, next, METH_NOARGS),
      DECLARE_METHOD(t_Iterator, remove, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Iterator, t_Iterator, ::java::lang::Object, Iterator, abstract_init, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Iterator *)) get_generic_iterator_next< ::java::util::t_Iterator,::java::lang::t_Object >), t_Iterator__fields_, 0, 0);
    PyObject *t_Iterator::wrap_Object(const Iterator& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Iterator::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Iterator *self = (t_Iterator *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_Iterator::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Iterator::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Iterator *self = (t_Iterator *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_Iterator::install(PyObject *module)
    {
      installType(&PY_TYPE(Iterator), module, "Iterator", 0);
    }

    void t_Iterator::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Iterator).tp_dict, "class_", make_descriptor(Iterator::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Iterator).tp_dict, "wrapfn_", make_descriptor(t_Iterator::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Iterator).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Iterator_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Iterator::initializeClass, 1)))
        return NULL;
      return t_Iterator::wrap_Object(Iterator(((t_Iterator *) arg)->object.this$));
    }
    static PyObject *t_Iterator_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Iterator::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Iterator_of_(t_Iterator *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_Iterator_hasNext(t_Iterator *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.hasNext());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Iterator_next(t_Iterator *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.next());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Iterator_remove(t_Iterator *self)
    {
      OBJ_CALL(self->object.remove());
      Py_RETURN_NONE;
    }
    static PyObject *t_Iterator_get__parameters_(t_Iterator *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DateTools.h"
#include "java/util/Date.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DateTools::class$ = NULL;
        jmethodID *DateTools::mids$ = NULL;
        bool DateTools::live$ = false;

        jclass DateTools::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DateTools");

            mids$ = new jmethodID[max_mid];
            mids$[mid_dateToString_ca526ca6] = env->getStaticMethodID(cls, "dateToString", "(Ljava/util/Date;Lorg/apache/lucene/document/DateTools$Resolution;)Ljava/lang/String;");
            mids$[mid_round_d582ee11] = env->getStaticMethodID(cls, "round", "(Ljava/util/Date;Lorg/apache/lucene/document/DateTools$Resolution;)Ljava/util/Date;");
            mids$[mid_round_ebfd1017] = env->getStaticMethodID(cls, "round", "(JLorg/apache/lucene/document/DateTools$Resolution;)J");
            mids$[mid_stringToDate_e1ca31a4] = env->getStaticMethodID(cls, "stringToDate", "(Ljava/lang/String;)Ljava/util/Date;");
            mids$[mid_stringToTime_5fdc3f54] = env->getStaticMethodID(cls, "stringToTime", "(Ljava/lang/String;)J");
            mids$[mid_timeToString_3ccc1506] = env->getStaticMethodID(cls, "timeToString", "(JLorg/apache/lucene/document/DateTools$Resolution;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String DateTools::dateToString(const ::java::util::Date & a0, const ::org::apache::lucene::document::DateTools$Resolution & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_dateToString_ca526ca6], a0.this$, a1.this$));
        }

        ::java::util::Date DateTools::round(const ::java::util::Date & a0, const ::org::apache::lucene::document::DateTools$Resolution & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Date(env->callStaticObjectMethod(cls, mids$[mid_round_d582ee11], a0.this$, a1.this$));
        }

        jlong DateTools::round(jlong a0, const ::org::apache::lucene::document::DateTools$Resolution & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_round_ebfd1017], a0, a1.this$);
        }

        ::java::util::Date DateTools::stringToDate(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Date(env->callStaticObjectMethod(cls, mids$[mid_stringToDate_e1ca31a4], a0.this$));
        }

        jlong DateTools::stringToTime(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_stringToTime_5fdc3f54], a0.this$);
        }

        ::java::lang::String DateTools::timeToString(jlong a0, const ::org::apache::lucene::document::DateTools$Resolution & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_timeToString_3ccc1506], a0, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DateTools_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools_dateToString(PyTypeObject *type, PyObject *args);
        static PyObject *t_DateTools_round(PyTypeObject *type, PyObject *args);
        static PyObject *t_DateTools_stringToDate(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools_stringToTime(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools_timeToString(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_DateTools__methods_[] = {
          DECLARE_METHOD(t_DateTools, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools, dateToString, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DateTools, round, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DateTools, stringToDate, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools, stringToTime, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools, timeToString, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DateTools, t_DateTools, ::java::lang::Object, DateTools, abstract_init, 0, 0, 0, 0, 0);

        void t_DateTools::install(PyObject *module)
        {
          installType(&PY_TYPE(DateTools), module, "DateTools", 0);
          PyDict_SetItemString(PY_TYPE(DateTools).tp_dict, "Resolution", make_descriptor(&PY_TYPE(DateTools$Resolution)));
        }

        void t_DateTools::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DateTools).tp_dict, "class_", make_descriptor(DateTools::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DateTools).tp_dict, "wrapfn_", make_descriptor(t_DateTools::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DateTools).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DateTools_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DateTools::initializeClass, 1)))
            return NULL;
          return t_DateTools::wrap_Object(DateTools(((t_DateTools *) arg)->object.this$));
        }
        static PyObject *t_DateTools_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DateTools::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DateTools_dateToString(PyTypeObject *type, PyObject *args)
        {
          ::java::util::Date a0((jobject) NULL);
          ::org::apache::lucene::document::DateTools$Resolution a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "kK", ::java::util::Date::initializeClass, ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DateTools::dateToString(a0, a1));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "dateToString", args);
          return NULL;
        }

        static PyObject *t_DateTools_round(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::util::Date a0((jobject) NULL);
              ::org::apache::lucene::document::DateTools$Resolution a1((jobject) NULL);
              PyTypeObject **p1;
              ::java::util::Date result((jobject) NULL);

              if (!parseArgs(args, "kK", ::java::util::Date::initializeClass, ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::DateTools::round(a0, a1));
                return ::java::util::t_Date::wrap_Object(result);
              }
            }
            {
              jlong a0;
              ::org::apache::lucene::document::DateTools$Resolution a1((jobject) NULL);
              PyTypeObject **p1;
              jlong result;

              if (!parseArgs(args, "JK", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::DateTools::round(a0, a1));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "round", args);
          return NULL;
        }

        static PyObject *t_DateTools_stringToDate(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::util::Date result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DateTools::stringToDate(a0));
            return ::java::util::t_Date::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "stringToDate", arg);
          return NULL;
        }

        static PyObject *t_DateTools_stringToTime(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DateTools::stringToTime(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "stringToTime", arg);
          return NULL;
        }

        static PyObject *t_DateTools_timeToString(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          ::org::apache::lucene::document::DateTools$Resolution a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "JK", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DateTools::timeToString(a0, a1));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "timeToString", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/Scorer$ChildScorer.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Scorer::class$ = NULL;
        jmethodID *Scorer::mids$ = NULL;
        bool Scorer::live$ = false;

        jclass Scorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Scorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getChildren_2d2d7de4] = env->getMethodID(cls, "getChildren", "()Ljava/util/Collection;");
            mids$[mid_getWeight_add28ea1] = env->getMethodID(cls, "getWeight", "()Lorg/apache/lucene/search/Weight;");
            mids$[mid_score_54c6a176] = env->getMethodID(cls, "score", "()F");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Collection Scorer::getChildren() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildren_2d2d7de4]));
        }

        ::org::apache::lucene::search::Weight Scorer::getWeight() const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_getWeight_add28ea1]));
        }

        jfloat Scorer::score() const
        {
          return env->callFloatMethod(this$, mids$[mid_score_54c6a176]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Scorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Scorer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Scorer_getChildren(t_Scorer *self);
        static PyObject *t_Scorer_getWeight(t_Scorer *self);
        static PyObject *t_Scorer_score(t_Scorer *self);
        static PyObject *t_Scorer_get__children(t_Scorer *self, void *data);
        static PyObject *t_Scorer_get__weight(t_Scorer *self, void *data);
        static PyGetSetDef t_Scorer__fields_[] = {
          DECLARE_GET_FIELD(t_Scorer, children),
          DECLARE_GET_FIELD(t_Scorer, weight),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Scorer__methods_[] = {
          DECLARE_METHOD(t_Scorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Scorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Scorer, getChildren, METH_NOARGS),
          DECLARE_METHOD(t_Scorer, getWeight, METH_NOARGS),
          DECLARE_METHOD(t_Scorer, score, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Scorer, t_Scorer, ::org::apache::lucene::index::DocsEnum, Scorer, abstract_init, 0, 0, t_Scorer__fields_, 0, 0);

        void t_Scorer::install(PyObject *module)
        {
          installType(&PY_TYPE(Scorer), module, "Scorer", 0);
          PyDict_SetItemString(PY_TYPE(Scorer).tp_dict, "ChildScorer", make_descriptor(&PY_TYPE(Scorer$ChildScorer)));
        }

        void t_Scorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Scorer).tp_dict, "class_", make_descriptor(Scorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Scorer).tp_dict, "wrapfn_", make_descriptor(t_Scorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Scorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Scorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Scorer::initializeClass, 1)))
            return NULL;
          return t_Scorer::wrap_Object(Scorer(((t_Scorer *) arg)->object.this$));
        }
        static PyObject *t_Scorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Scorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Scorer_getChildren(t_Scorer *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.getChildren());
          return ::java::util::t_Collection::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(Scorer$ChildScorer));
        }

        static PyObject *t_Scorer_getWeight(t_Scorer *self)
        {
          ::org::apache::lucene::search::Weight result((jobject) NULL);
          OBJ_CALL(result = self->object.getWeight());
          return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
        }

        static PyObject *t_Scorer_score(t_Scorer *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.score());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Scorer_get__children(t_Scorer *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getChildren());
          return ::java::util::t_Collection::wrap_Object(value);
        }

        static PyObject *t_Scorer_get__weight(t_Scorer *self, void *data)
        {
          ::org::apache::lucene::search::Weight value((jobject) NULL);
          OBJ_CALL(value = self->object.getWeight());
          return ::org::apache::lucene::search::t_Weight::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *DuplicateFilter$KeepMode::class$ = NULL;
          jmethodID *DuplicateFilter$KeepMode::mids$ = NULL;
          bool DuplicateFilter$KeepMode::live$ = false;
          DuplicateFilter$KeepMode *DuplicateFilter$KeepMode::KM_USE_FIRST_OCCURRENCE = NULL;
          DuplicateFilter$KeepMode *DuplicateFilter$KeepMode::KM_USE_LAST_OCCURRENCE = NULL;

          jclass DuplicateFilter$KeepMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_06462cf5] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode;");
              mids$[mid_values_3fb3ce7b] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              KM_USE_FIRST_OCCURRENCE = new DuplicateFilter$KeepMode(env->getStaticObjectField(cls, "KM_USE_FIRST_OCCURRENCE", "Lorg/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode;"));
              KM_USE_LAST_OCCURRENCE = new DuplicateFilter$KeepMode(env->getStaticObjectField(cls, "KM_USE_LAST_OCCURRENCE", "Lorg/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DuplicateFilter$KeepMode DuplicateFilter$KeepMode::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return DuplicateFilter$KeepMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_06462cf5], a0.this$));
          }

          JArray< DuplicateFilter$KeepMode > DuplicateFilter$KeepMode::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< DuplicateFilter$KeepMode >(env->callStaticObjectMethod(cls, mids$[mid_values_3fb3ce7b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_DuplicateFilter$KeepMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DuplicateFilter$KeepMode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DuplicateFilter$KeepMode_of_(t_DuplicateFilter$KeepMode *self, PyObject *args);
          static PyObject *t_DuplicateFilter$KeepMode_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_DuplicateFilter$KeepMode_values(PyTypeObject *type);
          static PyObject *t_DuplicateFilter$KeepMode_get__parameters_(t_DuplicateFilter$KeepMode *self, void *data);
          static PyGetSetDef t_DuplicateFilter$KeepMode__fields_[] = {
            DECLARE_GET_FIELD(t_DuplicateFilter$KeepMode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DuplicateFilter$KeepMode__methods_[] = {
            DECLARE_METHOD(t_DuplicateFilter$KeepMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter$KeepMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter$KeepMode, of_, METH_VARARGS),
            DECLARE_METHOD(t_DuplicateFilter$KeepMode, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter$KeepMode, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DuplicateFilter$KeepMode, t_DuplicateFilter$KeepMode, ::java::lang::Enum, DuplicateFilter$KeepMode, abstract_init, 0, 0, t_DuplicateFilter$KeepMode__fields_, 0, 0);
          PyObject *t_DuplicateFilter$KeepMode::wrap_Object(const DuplicateFilter$KeepMode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_DuplicateFilter$KeepMode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DuplicateFilter$KeepMode *self = (t_DuplicateFilter$KeepMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_DuplicateFilter$KeepMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_DuplicateFilter$KeepMode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DuplicateFilter$KeepMode *self = (t_DuplicateFilter$KeepMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_DuplicateFilter$KeepMode::install(PyObject *module)
          {
            installType(&PY_TYPE(DuplicateFilter$KeepMode), module, "DuplicateFilter$KeepMode", 0);
          }

          void t_DuplicateFilter$KeepMode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$KeepMode).tp_dict, "class_", make_descriptor(DuplicateFilter$KeepMode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$KeepMode).tp_dict, "wrapfn_", make_descriptor(t_DuplicateFilter$KeepMode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$KeepMode).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DuplicateFilter$KeepMode::initializeClass);
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$KeepMode).tp_dict, "KM_USE_FIRST_OCCURRENCE", make_descriptor(t_DuplicateFilter$KeepMode::wrap_Object(*DuplicateFilter$KeepMode::KM_USE_FIRST_OCCURRENCE)));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$KeepMode).tp_dict, "KM_USE_LAST_OCCURRENCE", make_descriptor(t_DuplicateFilter$KeepMode::wrap_Object(*DuplicateFilter$KeepMode::KM_USE_LAST_OCCURRENCE)));
          }

          static PyObject *t_DuplicateFilter$KeepMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DuplicateFilter$KeepMode::initializeClass, 1)))
              return NULL;
            return t_DuplicateFilter$KeepMode::wrap_Object(DuplicateFilter$KeepMode(((t_DuplicateFilter$KeepMode *) arg)->object.this$));
          }
          static PyObject *t_DuplicateFilter$KeepMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DuplicateFilter$KeepMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_DuplicateFilter$KeepMode_of_(t_DuplicateFilter$KeepMode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_DuplicateFilter$KeepMode_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            DuplicateFilter$KeepMode result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode::valueOf(a0));
              return t_DuplicateFilter$KeepMode::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_DuplicateFilter$KeepMode_values(PyTypeObject *type)
          {
            JArray< DuplicateFilter$KeepMode > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode::values());
            return JArray<jobject>(result.this$).wrap(t_DuplicateFilter$KeepMode::wrap_jobject);
          }
          static PyObject *t_DuplicateFilter$KeepMode_get__parameters_(t_DuplicateFilter$KeepMode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/config/AbstractQueryConfig.h"
#include "org/apache/lucene/queryparser/flexible/core/config/ConfigurationKey.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {

              ::java::lang::Class *AbstractQueryConfig::class$ = NULL;
              jmethodID *AbstractQueryConfig::mids$ = NULL;
              bool AbstractQueryConfig::live$ = false;

              jclass AbstractQueryConfig::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/config/AbstractQueryConfig");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_get_96b6da60] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;)Ljava/lang/Object;");
                  mids$[mid_has_d605f87f] = env->getMethodID(cls, "has", "(Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;)Z");
                  mids$[mid_set_55cc58cf] = env->getMethodID(cls, "set", "(Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;Ljava/lang/Object;)V");
                  mids$[mid_unset_d605f87f] = env->getMethodID(cls, "unset", "(Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;)Z");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::Object AbstractQueryConfig::get(const ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey & a0) const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_96b6da60], a0.this$));
              }

              jboolean AbstractQueryConfig::has(const ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_has_d605f87f], a0.this$);
              }

              void AbstractQueryConfig::set(const ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey & a0, const ::java::lang::Object & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_set_55cc58cf], a0.this$, a1.this$);
              }

              jboolean AbstractQueryConfig::unset(const ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_unset_d605f87f], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {
              static PyObject *t_AbstractQueryConfig_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AbstractQueryConfig_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AbstractQueryConfig_get(t_AbstractQueryConfig *self, PyObject *arg);
              static PyObject *t_AbstractQueryConfig_has(t_AbstractQueryConfig *self, PyObject *arg);
              static PyObject *t_AbstractQueryConfig_set(t_AbstractQueryConfig *self, PyObject *args);
              static PyObject *t_AbstractQueryConfig_unset(t_AbstractQueryConfig *self, PyObject *arg);

              static PyMethodDef t_AbstractQueryConfig__methods_[] = {
                DECLARE_METHOD(t_AbstractQueryConfig, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AbstractQueryConfig, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AbstractQueryConfig, get, METH_O),
                DECLARE_METHOD(t_AbstractQueryConfig, has, METH_O),
                DECLARE_METHOD(t_AbstractQueryConfig, set, METH_VARARGS),
                DECLARE_METHOD(t_AbstractQueryConfig, unset, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(AbstractQueryConfig, t_AbstractQueryConfig, ::java::lang::Object, AbstractQueryConfig, abstract_init, 0, 0, 0, 0, 0);

              void t_AbstractQueryConfig::install(PyObject *module)
              {
                installType(&PY_TYPE(AbstractQueryConfig), module, "AbstractQueryConfig", 0);
              }

              void t_AbstractQueryConfig::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(AbstractQueryConfig).tp_dict, "class_", make_descriptor(AbstractQueryConfig::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(AbstractQueryConfig).tp_dict, "wrapfn_", make_descriptor(t_AbstractQueryConfig::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(AbstractQueryConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AbstractQueryConfig_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AbstractQueryConfig::initializeClass, 1)))
                  return NULL;
                return t_AbstractQueryConfig::wrap_Object(AbstractQueryConfig(((t_AbstractQueryConfig *) arg)->object.this$));
              }
              static PyObject *t_AbstractQueryConfig_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AbstractQueryConfig::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_AbstractQueryConfig_get(t_AbstractQueryConfig *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::Object result((jobject) NULL);

                if (!parseArg(arg, "K", ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::parameters_))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "get", arg);
                return NULL;
              }

              static PyObject *t_AbstractQueryConfig_has(t_AbstractQueryConfig *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean result;

                if (!parseArg(arg, "K", ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::parameters_))
                {
                  OBJ_CALL(result = self->object.has(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "has", arg);
                return NULL;
              }

              static PyObject *t_AbstractQueryConfig_set(t_AbstractQueryConfig *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::Object a1((jobject) NULL);

                if (!parseArgs(args, "Ko", ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::parameters_, &a1))
                {
                  OBJ_CALL(self->object.set(a0, a1));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "set", args);
                return NULL;
              }

              static PyObject *t_AbstractQueryConfig_unset(t_AbstractQueryConfig *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean result;

                if (!parseArg(arg, "K", ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::parameters_))
                {
                  OBJ_CALL(result = self->object.unset(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "unset", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/FieldType.h"
#include "org/apache/lucene/index/FieldInfo$DocValuesType.h"
#include "org/apache/lucene/index/IndexableFieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/document/FieldType$NumericType.h"
#include "org/apache/lucene/index/FieldInfo$IndexOptions.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *FieldType::class$ = NULL;
        jmethodID *FieldType::mids$ = NULL;
        bool FieldType::live$ = false;

        jclass FieldType::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/FieldType");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_docValueType_db3dc573] = env->getMethodID(cls, "docValueType", "()Lorg/apache/lucene/index/FieldInfo$DocValuesType;");
            mids$[mid_freeze_54c6a166] = env->getMethodID(cls, "freeze", "()V");
            mids$[mid_indexOptions_e1b704de] = env->getMethodID(cls, "indexOptions", "()Lorg/apache/lucene/index/FieldInfo$IndexOptions;");
            mids$[mid_indexed_54c6a16a] = env->getMethodID(cls, "indexed", "()Z");
            mids$[mid_numericPrecisionStep_54c6a179] = env->getMethodID(cls, "numericPrecisionStep", "()I");
            mids$[mid_numericType_81bd17c2] = env->getMethodID(cls, "numericType", "()Lorg/apache/lucene/document/FieldType$NumericType;");
            mids$[mid_omitNorms_54c6a16a] = env->getMethodID(cls, "omitNorms", "()Z");
            mids$[mid_setDocValueType_09b98f7a] = env->getMethodID(cls, "setDocValueType", "(Lorg/apache/lucene/index/FieldInfo$DocValuesType;)V");
            mids$[mid_setIndexOptions_9cd708ff] = env->getMethodID(cls, "setIndexOptions", "(Lorg/apache/lucene/index/FieldInfo$IndexOptions;)V");
            mids$[mid_setIndexed_bb0c767f] = env->getMethodID(cls, "setIndexed", "(Z)V");
            mids$[mid_setNumericPrecisionStep_39c7bd3c] = env->getMethodID(cls, "setNumericPrecisionStep", "(I)V");
            mids$[mid_setNumericType_d9029e47] = env->getMethodID(cls, "setNumericType", "(Lorg/apache/lucene/document/FieldType$NumericType;)V");
            mids$[mid_setOmitNorms_bb0c767f] = env->getMethodID(cls, "setOmitNorms", "(Z)V");
            mids$[mid_setStoreTermVectorOffsets_bb0c767f] = env->getMethodID(cls, "setStoreTermVectorOffsets", "(Z)V");
            mids$[mid_setStoreTermVectorPayloads_bb0c767f] = env->getMethodID(cls, "setStoreTermVectorPayloads", "(Z)V");
            mids$[mid_setStoreTermVectorPositions_bb0c767f] = env->getMethodID(cls, "setStoreTermVectorPositions", "(Z)V");
            mids$[mid_setStoreTermVectors_bb0c767f] = env->getMethodID(cls, "setStoreTermVectors", "(Z)V");
            mids$[mid_setStored_bb0c767f] = env->getMethodID(cls, "setStored", "(Z)V");
            mids$[mid_setTokenized_bb0c767f] = env->getMethodID(cls, "setTokenized", "(Z)V");
            mids$[mid_storeTermVectorOffsets_54c6a16a] = env->getMethodID(cls, "storeTermVectorOffsets", "()Z");
            mids$[mid_storeTermVectorPayloads_54c6a16a] = env->getMethodID(cls, "storeTermVectorPayloads", "()Z");
            mids$[mid_storeTermVectorPositions_54c6a16a] = env->getMethodID(cls, "storeTermVectorPositions", "()Z");
            mids$[mid_storeTermVectors_54c6a16a] = env->getMethodID(cls, "storeTermVectors", "()Z");
            mids$[mid_stored_54c6a16a] = env->getMethodID(cls, "stored", "()Z");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_tokenized_54c6a16a] = env->getMethodID(cls, "tokenized", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldType::FieldType() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::index::FieldInfo$DocValuesType FieldType::docValueType() const
        {
          return ::org::apache::lucene::index::FieldInfo$DocValuesType(env->callObjectMethod(this$, mids$[mid_docValueType_db3dc573]));
        }

        void FieldType::freeze() const
        {
          env->callVoidMethod(this$, mids$[mid_freeze_54c6a166]);
        }

        ::org::apache::lucene::index::FieldInfo$IndexOptions FieldType::indexOptions() const
        {
          return ::org::apache::lucene::index::FieldInfo$IndexOptions(env->callObjectMethod(this$, mids$[mid_indexOptions_e1b704de]));
        }

        jboolean FieldType::indexed() const
        {
          return env->callBooleanMethod(this$, mids$[mid_indexed_54c6a16a]);
        }

        jint FieldType::numericPrecisionStep() const
        {
          return env->callIntMethod(this$, mids$[mid_numericPrecisionStep_54c6a179]);
        }

        ::org::apache::lucene::document::FieldType$NumericType FieldType::numericType() const
        {
          return ::org::apache::lucene::document::FieldType$NumericType(env->callObjectMethod(this$, mids$[mid_numericType_81bd17c2]));
        }

        jboolean FieldType::omitNorms() const
        {
          return env->callBooleanMethod(this$, mids$[mid_omitNorms_54c6a16a]);
        }

        void FieldType::setDocValueType(const ::org::apache::lucene::index::FieldInfo$DocValuesType & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocValueType_09b98f7a], a0.this$);
        }

        void FieldType::setIndexOptions(const ::org::apache::lucene::index::FieldInfo$IndexOptions & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setIndexOptions_9cd708ff], a0.this$);
        }

        void FieldType::setIndexed(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setIndexed_bb0c767f], a0);
        }

        void FieldType::setNumericPrecisionStep(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNumericPrecisionStep_39c7bd3c], a0);
        }

        void FieldType::setNumericType(const ::org::apache::lucene::document::FieldType$NumericType & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNumericType_d9029e47], a0.this$);
        }

        void FieldType::setOmitNorms(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setOmitNorms_bb0c767f], a0);
        }

        void FieldType::setStoreTermVectorOffsets(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStoreTermVectorOffsets_bb0c767f], a0);
        }

        void FieldType::setStoreTermVectorPayloads(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStoreTermVectorPayloads_bb0c767f], a0);
        }

        void FieldType::setStoreTermVectorPositions(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStoreTermVectorPositions_bb0c767f], a0);
        }

        void FieldType::setStoreTermVectors(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStoreTermVectors_bb0c767f], a0);
        }

        void FieldType::setStored(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStored_bb0c767f], a0);
        }

        void FieldType::setTokenized(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTokenized_bb0c767f], a0);
        }

        jboolean FieldType::storeTermVectorOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorOffsets_54c6a16a]);
        }

        jboolean FieldType::storeTermVectorPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorPayloads_54c6a16a]);
        }

        jboolean FieldType::storeTermVectorPositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorPositions_54c6a16a]);
        }

        jboolean FieldType::storeTermVectors() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectors_54c6a16a]);
        }

        jboolean FieldType::stored() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stored_54c6a16a]);
        }

        ::java::lang::String FieldType::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jboolean FieldType::tokenized() const
        {
          return env->callBooleanMethod(this$, mids$[mid_tokenized_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_FieldType_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldType_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldType_init_(t_FieldType *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldType_docValueType(t_FieldType *self);
        static PyObject *t_FieldType_freeze(t_FieldType *self);
        static PyObject *t_FieldType_indexOptions(t_FieldType *self);
        static PyObject *t_FieldType_indexed(t_FieldType *self);
        static PyObject *t_FieldType_numericPrecisionStep(t_FieldType *self);
        static PyObject *t_FieldType_numericType(t_FieldType *self);
        static PyObject *t_FieldType_omitNorms(t_FieldType *self);
        static PyObject *t_FieldType_setDocValueType(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setIndexOptions(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setIndexed(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setNumericPrecisionStep(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setNumericType(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setOmitNorms(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setStoreTermVectorOffsets(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setStoreTermVectorPayloads(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setStoreTermVectorPositions(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setStoreTermVectors(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setStored(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setTokenized(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_storeTermVectorOffsets(t_FieldType *self);
        static PyObject *t_FieldType_storeTermVectorPayloads(t_FieldType *self);
        static PyObject *t_FieldType_storeTermVectorPositions(t_FieldType *self);
        static PyObject *t_FieldType_storeTermVectors(t_FieldType *self);
        static PyObject *t_FieldType_stored(t_FieldType *self);
        static PyObject *t_FieldType_toString(t_FieldType *self, PyObject *args);
        static PyObject *t_FieldType_tokenized(t_FieldType *self);

        static PyMethodDef t_FieldType__methods_[] = {
          DECLARE_METHOD(t_FieldType, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldType, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldType, docValueType, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, freeze, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, indexOptions, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, indexed, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, numericPrecisionStep, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, numericType, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, omitNorms, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, setDocValueType, METH_O),
          DECLARE_METHOD(t_FieldType, setIndexOptions, METH_O),
          DECLARE_METHOD(t_FieldType, setIndexed, METH_O),
          DECLARE_METHOD(t_FieldType, setNumericPrecisionStep, METH_O),
          DECLARE_METHOD(t_FieldType, setNumericType, METH_O),
          DECLARE_METHOD(t_FieldType, setOmitNorms, METH_O),
          DECLARE_METHOD(t_FieldType, setStoreTermVectorOffsets, METH_O),
          DECLARE_METHOD(t_FieldType, setStoreTermVectorPayloads, METH_O),
          DECLARE_METHOD(t_FieldType, setStoreTermVectorPositions, METH_O),
          DECLARE_METHOD(t_FieldType, setStoreTermVectors, METH_O),
          DECLARE_METHOD(t_FieldType, setStored, METH_O),
          DECLARE_METHOD(t_FieldType, setTokenized, METH_O),
          DECLARE_METHOD(t_FieldType, storeTermVectorOffsets, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, storeTermVectorPayloads, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, storeTermVectorPositions, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, storeTermVectors, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, stored, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, toString, METH_VARARGS),
          DECLARE_METHOD(t_FieldType, tokenized, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldType, t_FieldType, ::java::lang::Object, FieldType, t_FieldType_init_, 0, 0, 0, 0, 0);

        void t_FieldType::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldType), module, "FieldType", 0);
          PyDict_SetItemString(PY_TYPE(FieldType).tp_dict, "NumericType", make_descriptor(&PY_TYPE(FieldType$NumericType)));
        }

        void t_FieldType::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldType).tp_dict, "class_", make_descriptor(FieldType::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldType).tp_dict, "wrapfn_", make_descriptor(t_FieldType::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldType).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldType_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldType::initializeClass, 1)))
            return NULL;
          return t_FieldType::wrap_Object(FieldType(((t_FieldType *) arg)->object.this$));
        }
        static PyObject *t_FieldType_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldType::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldType_init_(t_FieldType *self, PyObject *args, PyObject *kwds)
        {
          FieldType object((jobject) NULL);

          INT_CALL(object = FieldType());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldType_docValueType(t_FieldType *self)
        {
          ::org::apache::lucene::index::FieldInfo$DocValuesType result((jobject) NULL);
          OBJ_CALL(result = self->object.docValueType());
          return ::org::apache::lucene::index::t_FieldInfo$DocValuesType::wrap_Object(result);
        }

        static PyObject *t_FieldType_freeze(t_FieldType *self)
        {
          OBJ_CALL(self->object.freeze());
          Py_RETURN_NONE;
        }

        static PyObject *t_FieldType_indexOptions(t_FieldType *self)
        {
          ::org::apache::lucene::index::FieldInfo$IndexOptions result((jobject) NULL);
          OBJ_CALL(result = self->object.indexOptions());
          return ::org::apache::lucene::index::t_FieldInfo$IndexOptions::wrap_Object(result);
        }

        static PyObject *t_FieldType_indexed(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.indexed());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_numericPrecisionStep(t_FieldType *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numericPrecisionStep());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FieldType_numericType(t_FieldType *self)
        {
          ::org::apache::lucene::document::FieldType$NumericType result((jobject) NULL);
          OBJ_CALL(result = self->object.numericType());
          return ::org::apache::lucene::document::t_FieldType$NumericType::wrap_Object(result);
        }

        static PyObject *t_FieldType_omitNorms(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.omitNorms());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_setDocValueType(t_FieldType *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo$DocValuesType a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::index::FieldInfo$DocValuesType::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_FieldInfo$DocValuesType::parameters_))
          {
            OBJ_CALL(self->object.setDocValueType(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDocValueType", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setIndexOptions(t_FieldType *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo$IndexOptions a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::index::FieldInfo$IndexOptions::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_FieldInfo$IndexOptions::parameters_))
          {
            OBJ_CALL(self->object.setIndexOptions(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexOptions", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setIndexed(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setIndexed(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexed", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setNumericPrecisionStep(t_FieldType *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setNumericPrecisionStep(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setNumericPrecisionStep", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setNumericType(t_FieldType *self, PyObject *arg)
        {
          ::org::apache::lucene::document::FieldType$NumericType a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::document::FieldType$NumericType::initializeClass, &a0, &p0, ::org::apache::lucene::document::t_FieldType$NumericType::parameters_))
          {
            OBJ_CALL(self->object.setNumericType(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setNumericType", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setOmitNorms(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setOmitNorms(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setOmitNorms", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setStoreTermVectorOffsets(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setStoreTermVectorOffsets(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStoreTermVectorOffsets", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setStoreTermVectorPayloads(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setStoreTermVectorPayloads(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStoreTermVectorPayloads", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setStoreTermVectorPositions(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setStoreTermVectorPositions(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStoreTermVectorPositions", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setStoreTermVectors(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setStoreTermVectors(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStoreTermVectors", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setStored(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setStored(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStored", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setTokenized(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setTokenized(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setTokenized", arg);
          return NULL;
        }

        static PyObject *t_FieldType_storeTermVectorOffsets(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorOffsets());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_storeTermVectorPayloads(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorPayloads());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_storeTermVectorPositions(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorPositions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_storeTermVectors(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectors());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_stored(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.stored());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_toString(t_FieldType *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldType), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FieldType_tokenized(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.tokenized());
          Py_RETURN_BOOL(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RollingBuffer$Resettable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RollingBuffer$Resettable::class$ = NULL;
        jmethodID *RollingBuffer$Resettable::mids$ = NULL;
        bool RollingBuffer$Resettable::live$ = false;

        jclass RollingBuffer$Resettable::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RollingBuffer$Resettable");

            mids$ = new jmethodID[max_mid];
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void RollingBuffer$Resettable::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RollingBuffer$Resettable_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RollingBuffer$Resettable_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RollingBuffer$Resettable_of_(t_RollingBuffer$Resettable *self, PyObject *args);
        static PyObject *t_RollingBuffer$Resettable_reset(t_RollingBuffer$Resettable *self);
        static PyObject *t_RollingBuffer$Resettable_get__parameters_(t_RollingBuffer$Resettable *self, void *data);
        static PyGetSetDef t_RollingBuffer$Resettable__fields_[] = {
          DECLARE_GET_FIELD(t_RollingBuffer$Resettable, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RollingBuffer$Resettable__methods_[] = {
          DECLARE_METHOD(t_RollingBuffer$Resettable, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RollingBuffer$Resettable, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RollingBuffer$Resettable, of_, METH_VARARGS),
          DECLARE_METHOD(t_RollingBuffer$Resettable, reset, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RollingBuffer$Resettable, t_RollingBuffer$Resettable, ::java::lang::Object, RollingBuffer$Resettable, abstract_init, 0, 0, t_RollingBuffer$Resettable__fields_, 0, 0);
        PyObject *t_RollingBuffer$Resettable::wrap_Object(const RollingBuffer$Resettable& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RollingBuffer$Resettable::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RollingBuffer$Resettable *self = (t_RollingBuffer$Resettable *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_RollingBuffer$Resettable::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RollingBuffer$Resettable::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RollingBuffer$Resettable *self = (t_RollingBuffer$Resettable *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_RollingBuffer$Resettable::install(PyObject *module)
        {
          installType(&PY_TYPE(RollingBuffer$Resettable), module, "RollingBuffer$Resettable", 0);
        }

        void t_RollingBuffer$Resettable::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RollingBuffer$Resettable).tp_dict, "class_", make_descriptor(RollingBuffer$Resettable::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RollingBuffer$Resettable).tp_dict, "wrapfn_", make_descriptor(t_RollingBuffer$Resettable::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RollingBuffer$Resettable).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RollingBuffer$Resettable_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RollingBuffer$Resettable::initializeClass, 1)))
            return NULL;
          return t_RollingBuffer$Resettable::wrap_Object(RollingBuffer$Resettable(((t_RollingBuffer$Resettable *) arg)->object.this$));
        }
        static PyObject *t_RollingBuffer$Resettable_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RollingBuffer$Resettable::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RollingBuffer$Resettable_of_(t_RollingBuffer$Resettable *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_RollingBuffer$Resettable_reset(t_RollingBuffer$Resettable *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }
        static PyObject *t_RollingBuffer$Resettable_get__parameters_(t_RollingBuffer$Resettable *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *PostingsReaderBase::class$ = NULL;
        jmethodID *PostingsReaderBase::mids$ = NULL;
        bool PostingsReaderBase::live$ = false;

        jclass PostingsReaderBase::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/PostingsReaderBase");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_decodeTerm_0d1f34e8] = env->getMethodID(cls, "decodeTerm", "([JLorg/apache/lucene/store/DataInput;Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Z)V");
            mids$[mid_docs_4cca8a9c] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_docsAndPositions_3ae1ca58] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_init_0441f0b2] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/store/IndexInput;)V");
            mids$[mid_newTermState_9f93879c] = env->getMethodID(cls, "newTermState", "()Lorg/apache/lucene/codecs/BlockTermState;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void PostingsReaderBase::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        void PostingsReaderBase::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void PostingsReaderBase::decodeTerm(const JArray< jlong > & a0, const ::org::apache::lucene::store::DataInput & a1, const ::org::apache::lucene::index::FieldInfo & a2, const ::org::apache::lucene::codecs::BlockTermState & a3, jboolean a4) const
        {
          env->callVoidMethod(this$, mids$[mid_decodeTerm_0d1f34e8], a0.this$, a1.this$, a2.this$, a3.this$, a4);
        }

        ::org::apache::lucene::index::DocsEnum PostingsReaderBase::docs(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, const ::org::apache::lucene::util::Bits & a2, const ::org::apache::lucene::index::DocsEnum & a3, jint a4) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_4cca8a9c], a0.this$, a1.this$, a2.this$, a3.this$, a4));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum PostingsReaderBase::docsAndPositions(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, const ::org::apache::lucene::util::Bits & a2, const ::org::apache::lucene::index::DocsAndPositionsEnum & a3, jint a4) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_3ae1ca58], a0.this$, a1.this$, a2.this$, a3.this$, a4));
        }

        void PostingsReaderBase::init(const ::org::apache::lucene::store::IndexInput & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_init_0441f0b2], a0.this$);
        }

        ::org::apache::lucene::codecs::BlockTermState PostingsReaderBase::newTermState() const
        {
          return ::org::apache::lucene::codecs::BlockTermState(env->callObjectMethod(this$, mids$[mid_newTermState_9f93879c]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_PostingsReaderBase_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsReaderBase_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsReaderBase_checkIntegrity(t_PostingsReaderBase *self);
        static PyObject *t_PostingsReaderBase_close(t_PostingsReaderBase *self);
        static PyObject *t_PostingsReaderBase_decodeTerm(t_PostingsReaderBase *self, PyObject *args);
        static PyObject *t_PostingsReaderBase_docs(t_PostingsReaderBase *self, PyObject *args);
        static PyObject *t_PostingsReaderBase_docsAndPositions(t_PostingsReaderBase *self, PyObject *args);
        static PyObject *t_PostingsReaderBase_init(t_PostingsReaderBase *self, PyObject *arg);
        static PyObject *t_PostingsReaderBase_newTermState(t_PostingsReaderBase *self);

        static PyMethodDef t_PostingsReaderBase__methods_[] = {
          DECLARE_METHOD(t_PostingsReaderBase, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsReaderBase, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsReaderBase, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_PostingsReaderBase, close, METH_NOARGS),
          DECLARE_METHOD(t_PostingsReaderBase, decodeTerm, METH_VARARGS),
          DECLARE_METHOD(t_PostingsReaderBase, docs, METH_VARARGS),
          DECLARE_METHOD(t_PostingsReaderBase, docsAndPositions, METH_VARARGS),
          DECLARE_METHOD(t_PostingsReaderBase, init, METH_O),
          DECLARE_METHOD(t_PostingsReaderBase, newTermState, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PostingsReaderBase, t_PostingsReaderBase, ::java::lang::Object, PostingsReaderBase, abstract_init, 0, 0, 0, 0, 0);

        void t_PostingsReaderBase::install(PyObject *module)
        {
          installType(&PY_TYPE(PostingsReaderBase), module, "PostingsReaderBase", 0);
        }

        void t_PostingsReaderBase::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PostingsReaderBase).tp_dict, "class_", make_descriptor(PostingsReaderBase::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PostingsReaderBase).tp_dict, "wrapfn_", make_descriptor(t_PostingsReaderBase::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PostingsReaderBase).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PostingsReaderBase_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PostingsReaderBase::initializeClass, 1)))
            return NULL;
          return t_PostingsReaderBase::wrap_Object(PostingsReaderBase(((t_PostingsReaderBase *) arg)->object.this$));
        }
        static PyObject *t_PostingsReaderBase_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PostingsReaderBase::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PostingsReaderBase_checkIntegrity(t_PostingsReaderBase *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_PostingsReaderBase_close(t_PostingsReaderBase *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_PostingsReaderBase_decodeTerm(t_PostingsReaderBase *self, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          ::org::apache::lucene::store::DataInput a1((jobject) NULL);
          ::org::apache::lucene::index::FieldInfo a2((jobject) NULL);
          ::org::apache::lucene::codecs::BlockTermState a3((jobject) NULL);
          jboolean a4;

          if (!parseArgs(args, "[JkkkZ", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(self->object.decodeTerm(a0, a1, a2, a3, a4));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "decodeTerm", args);
          return NULL;
        }

        static PyObject *t_PostingsReaderBase_docs(t_PostingsReaderBase *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
          ::org::apache::lucene::util::Bits a2((jobject) NULL);
          ::org::apache::lucene::index::DocsEnum a3((jobject) NULL);
          jint a4;
          ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkkkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = self->object.docs(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "docs", args);
          return NULL;
        }

        static PyObject *t_PostingsReaderBase_docsAndPositions(t_PostingsReaderBase *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
          ::org::apache::lucene::util::Bits a2((jobject) NULL);
          ::org::apache::lucene::index::DocsAndPositionsEnum a3((jobject) NULL);
          jint a4;
          ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkkkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "docsAndPositions", args);
          return NULL;
        }

        static PyObject *t_PostingsReaderBase_init(t_PostingsReaderBase *self, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexInput a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
          {
            OBJ_CALL(self->object.init(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "init", arg);
          return NULL;
        }

        static PyObject *t_PostingsReaderBase_newTermState(t_PostingsReaderBase *self)
        {
          ::org::apache::lucene::codecs::BlockTermState result((jobject) NULL);
          OBJ_CALL(result = self->object.newTermState());
          return ::org::apache::lucene::codecs::t_BlockTermState::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/ParseException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/Token.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *ParseException::class$ = NULL;
              jmethodID *ParseException::mids$ = NULL;
              jfieldID *ParseException::fids$ = NULL;
              bool ParseException::live$ = false;

              jclass ParseException::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/ParseException");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_1dde9d59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;)V");
                  mids$[mid_init$_8fff18a5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;[[I[Ljava/lang/String;)V");

                  fids$ = new jfieldID[max_fid];
                  fids$[fid_currentToken] = env->getFieldID(cls, "currentToken", "Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  fids$[fid_expectedTokenSequences] = env->getFieldID(cls, "expectedTokenSequences", "[[I");
                  fids$[fid_tokenImage] = env->getFieldID(cls, "tokenImage", "[Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ParseException::ParseException() : ::org::apache::lucene::queryparser::flexible::core::QueryNodeParseException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ParseException::ParseException(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0) : ::org::apache::lucene::queryparser::flexible::core::QueryNodeParseException(env->newObject(initializeClass, &mids$, mid_init$_1dde9d59, a0.this$)) {}

              ParseException::ParseException(const ::org::apache::lucene::queryparser::flexible::standard::parser::Token & a0, const JArray< JArray< jint > > & a1, const JArray< ::java::lang::String > & a2) : ::org::apache::lucene::queryparser::flexible::core::QueryNodeParseException(env->newObject(initializeClass, &mids$, mid_init$_8fff18a5, a0.this$, a1.this$, a2.this$)) {}

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token ParseException::_get_currentToken() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->getObjectField(this$, fids$[fid_currentToken]));
              }

              void ParseException::_set_currentToken(const ::org::apache::lucene::queryparser::flexible::standard::parser::Token & a0) const
              {
                env->setObjectField(this$, fids$[fid_currentToken], a0.this$);
              }

              JArray< JArray< jint > > ParseException::_get_expectedTokenSequences() const
              {
                return JArray< JArray< jint > >(env->getObjectField(this$, fids$[fid_expectedTokenSequences]));
              }

              void ParseException::_set_expectedTokenSequences(const JArray< JArray< jint > > & a0) const
              {
                env->setObjectField(this$, fids$[fid_expectedTokenSequences], a0.this$);
              }

              JArray< ::java::lang::String > ParseException::_get_tokenImage() const
              {
                return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_tokenImage]));
              }

              void ParseException::_set_tokenImage(const JArray< ::java::lang::String > & a0) const
              {
                env->setObjectField(this$, fids$[fid_tokenImage], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg);
              static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds);
              static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data);
              static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data);
              static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data);
              static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data);
              static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data);
              static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data);

              static PyGetSetDef t_ParseException__fields_[] = {
                DECLARE_GETSET_FIELD(t_ParseException, currentToken),
                DECLARE_GETSET_FIELD(t_ParseException, expectedTokenSequences),
                DECLARE_GETSET_FIELD(t_ParseException, tokenImage),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ParseException__methods_[] = {
                DECLARE_METHOD(t_ParseException, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ParseException, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ParseException, t_ParseException, ::org::apache::lucene::queryparser::flexible::core::QueryNodeParseException, ParseException, t_ParseException_init_, 0, 0, t_ParseException__fields_, 0, 0);

              void t_ParseException::install(PyObject *module)
              {
                installType(&PY_TYPE(ParseException), module, "ParseException", 0);
              }

              void t_ParseException::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "class_", make_descriptor(ParseException::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "wrapfn_", make_descriptor(t_ParseException::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ParseException::initializeClass, 1)))
                  return NULL;
                return t_ParseException::wrap_Object(ParseException(((t_ParseException *) arg)->object.this$));
              }
              static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ParseException::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    ParseException object((jobject) NULL);

                    INT_CALL(object = ParseException());
                    self->object = object;
                    break;
                  }
                  goto err;
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                    ParseException object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &a0))
                    {
                      INT_CALL(object = ParseException(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 3:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::Token a0((jobject) NULL);
                    JArray< JArray< jint > > a1((jobject) NULL);
                    JArray< ::java::lang::String > a2((jobject) NULL);
                    ParseException object((jobject) NULL);

                    if (!parseArgs(args, "k[[I[s", ::org::apache::lucene::queryparser::flexible::standard::parser::Token::initializeClass, &a0, &a1, &a2))
                    {
                      INT_CALL(object = ParseException(a0, a1, a2));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                OBJ_CALL(value = self->object._get_currentToken());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(value);
              }
              static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::Token::initializeClass, &value))
                {
                  INT_CALL(self->object._set_currentToken(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "currentToken", arg);
                return -1;
              }

              static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data)
              {
                JArray< JArray< jint > > value((jobject) NULL);
                OBJ_CALL(value = self->object._get_expectedTokenSequences());
                return JArray<jobject>(value.this$).wrap(NULL);
              }
              static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data)
              {
                JArray< JArray< jint > > value((jobject) NULL);
                if (!parseArg(arg, "[[I", &value))
                {
                  INT_CALL(self->object._set_expectedTokenSequences(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "expectedTokenSequences", arg);
                return -1;
              }

              static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data)
              {
                JArray< ::java::lang::String > value((jobject) NULL);
                OBJ_CALL(value = self->object._get_tokenImage());
                return JArray<jstring>(value.this$).wrap();
              }
              static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data)
              {
                JArray< ::java::lang::String > value((jobject) NULL);
                if (!parseArg(arg, "[s", &value))
                {
                  INT_CALL(self->object._set_tokenImage(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "tokenImage", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/BufferedChecksum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *BufferedChecksum::class$ = NULL;
        jmethodID *BufferedChecksum::mids$ = NULL;
        bool BufferedChecksum::live$ = false;
        jint BufferedChecksum::DEFAULT_BUFFERSIZE = (jint) 0;

        jclass BufferedChecksum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/BufferedChecksum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getValue_54c6a17a] = env->getMethodID(cls, "getValue", "()J");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_update_39c7bd3c] = env->getMethodID(cls, "update", "(I)V");
            mids$[mid_update_86f4435f] = env->getMethodID(cls, "update", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_BUFFERSIZE = env->getStaticIntField(cls, "DEFAULT_BUFFERSIZE");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong BufferedChecksum::getValue() const
        {
          return env->callLongMethod(this$, mids$[mid_getValue_54c6a17a]);
        }

        void BufferedChecksum::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }

        void BufferedChecksum::update(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_update_39c7bd3c], a0);
        }

        void BufferedChecksum::update(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_update_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_BufferedChecksum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedChecksum_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedChecksum_getValue(t_BufferedChecksum *self);
        static PyObject *t_BufferedChecksum_reset(t_BufferedChecksum *self);
        static PyObject *t_BufferedChecksum_update(t_BufferedChecksum *self, PyObject *args);
        static PyObject *t_BufferedChecksum_get__value(t_BufferedChecksum *self, void *data);
        static PyGetSetDef t_BufferedChecksum__fields_[] = {
          DECLARE_GET_FIELD(t_BufferedChecksum, value),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BufferedChecksum__methods_[] = {
          DECLARE_METHOD(t_BufferedChecksum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedChecksum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedChecksum, getValue, METH_NOARGS),
          DECLARE_METHOD(t_BufferedChecksum, reset, METH_NOARGS),
          DECLARE_METHOD(t_BufferedChecksum, update, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BufferedChecksum, t_BufferedChecksum, ::java::lang::Object, BufferedChecksum, abstract_init, 0, 0, t_BufferedChecksum__fields_, 0, 0);

        void t_BufferedChecksum::install(PyObject *module)
        {
          installType(&PY_TYPE(BufferedChecksum), module, "BufferedChecksum", 0);
        }

        void t_BufferedChecksum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BufferedChecksum).tp_dict, "class_", make_descriptor(BufferedChecksum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BufferedChecksum).tp_dict, "wrapfn_", make_descriptor(t_BufferedChecksum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BufferedChecksum).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BufferedChecksum::initializeClass);
          PyDict_SetItemString(PY_TYPE(BufferedChecksum).tp_dict, "DEFAULT_BUFFERSIZE", make_descriptor(BufferedChecksum::DEFAULT_BUFFERSIZE));
        }

        static PyObject *t_BufferedChecksum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BufferedChecksum::initializeClass, 1)))
            return NULL;
          return t_BufferedChecksum::wrap_Object(BufferedChecksum(((t_BufferedChecksum *) arg)->object.this$));
        }
        static PyObject *t_BufferedChecksum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BufferedChecksum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BufferedChecksum_getValue(t_BufferedChecksum *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getValue());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_BufferedChecksum_reset(t_BufferedChecksum *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }

        static PyObject *t_BufferedChecksum_update(t_BufferedChecksum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.update(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.update(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "update", args);
          return NULL;
        }

        static PyObject *t_BufferedChecksum_get__value(t_BufferedChecksum *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getValue());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/SlopQueryNodeBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *SlopQueryNodeBuilder::class$ = NULL;
              jmethodID *SlopQueryNodeBuilder::mids$ = NULL;
              bool SlopQueryNodeBuilder::live$ = false;

              jclass SlopQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/SlopQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_7f6ce179] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              SlopQueryNodeBuilder::SlopQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::Query SlopQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_7f6ce179], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_SlopQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_SlopQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_SlopQueryNodeBuilder_init_(t_SlopQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_SlopQueryNodeBuilder_build(t_SlopQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_SlopQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_SlopQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SlopQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SlopQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(SlopQueryNodeBuilder, t_SlopQueryNodeBuilder, ::java::lang::Object, SlopQueryNodeBuilder, t_SlopQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_SlopQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(SlopQueryNodeBuilder), module, "SlopQueryNodeBuilder", 0);
              }

              void t_SlopQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(SlopQueryNodeBuilder).tp_dict, "class_", make_descriptor(SlopQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(SlopQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_SlopQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(SlopQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_SlopQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, SlopQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_SlopQueryNodeBuilder::wrap_Object(SlopQueryNodeBuilder(((t_SlopQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_SlopQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, SlopQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_SlopQueryNodeBuilder_init_(t_SlopQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                SlopQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = SlopQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_SlopQueryNodeBuilder_build(t_SlopQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LengthFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/miscellaneous/LengthFilter.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LengthFilterFactory::class$ = NULL;
          jmethodID *LengthFilterFactory::mids$ = NULL;
          bool LengthFilterFactory::live$ = false;
          ::java::lang::String *LengthFilterFactory::MAX_KEY = NULL;
          ::java::lang::String *LengthFilterFactory::MIN_KEY = NULL;

          jclass LengthFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LengthFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_c5f48534] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/LengthFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAX_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_KEY", "Ljava/lang/String;"));
              MIN_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MIN_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LengthFilterFactory::LengthFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::LengthFilter LengthFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::LengthFilter(env->callObjectMethod(this$, mids$[mid_create_c5f48534], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LengthFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LengthFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LengthFilterFactory_init_(t_LengthFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LengthFilterFactory_create(t_LengthFilterFactory *self, PyObject *args);

          static PyMethodDef t_LengthFilterFactory__methods_[] = {
            DECLARE_METHOD(t_LengthFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LengthFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LengthFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LengthFilterFactory, t_LengthFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, LengthFilterFactory, t_LengthFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_LengthFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LengthFilterFactory), module, "LengthFilterFactory", 0);
          }

          void t_LengthFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LengthFilterFactory).tp_dict, "class_", make_descriptor(LengthFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LengthFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_LengthFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LengthFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(LengthFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(LengthFilterFactory).tp_dict, "MAX_KEY", make_descriptor(j2p(*LengthFilterFactory::MAX_KEY)));
            PyDict_SetItemString(PY_TYPE(LengthFilterFactory).tp_dict, "MIN_KEY", make_descriptor(j2p(*LengthFilterFactory::MIN_KEY)));
          }

          static PyObject *t_LengthFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LengthFilterFactory::initializeClass, 1)))
              return NULL;
            return t_LengthFilterFactory::wrap_Object(LengthFilterFactory(((t_LengthFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_LengthFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LengthFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LengthFilterFactory_init_(t_LengthFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LengthFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LengthFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LengthFilterFactory_create(t_LengthFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::LengthFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_LengthFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LengthFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/ElisionFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/util/ElisionFilter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *ElisionFilterFactory::class$ = NULL;
          jmethodID *ElisionFilterFactory::mids$ = NULL;
          bool ElisionFilterFactory::live$ = false;

          jclass ElisionFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/ElisionFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_94c1814f] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/util/ElisionFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ElisionFilterFactory::ElisionFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::util::ElisionFilter ElisionFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::util::ElisionFilter(env->callObjectMethod(this$, mids$[mid_create_94c1814f], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory ElisionFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }

          void ElisionFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_ElisionFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ElisionFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ElisionFilterFactory_init_(t_ElisionFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ElisionFilterFactory_create(t_ElisionFilterFactory *self, PyObject *args);
          static PyObject *t_ElisionFilterFactory_getMultiTermComponent(t_ElisionFilterFactory *self);
          static PyObject *t_ElisionFilterFactory_inform(t_ElisionFilterFactory *self, PyObject *arg);
          static PyObject *t_ElisionFilterFactory_get__multiTermComponent(t_ElisionFilterFactory *self, void *data);
          static PyGetSetDef t_ElisionFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_ElisionFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ElisionFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ElisionFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ElisionFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ElisionFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_ElisionFilterFactory, getMultiTermComponent, METH_NOARGS),
            DECLARE_METHOD(t_ElisionFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ElisionFilterFactory, t_ElisionFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ElisionFilterFactory, t_ElisionFilterFactory_init_, 0, 0, t_ElisionFilterFactory__fields_, 0, 0);

          void t_ElisionFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ElisionFilterFactory), module, "ElisionFilterFactory", 0);
          }

          void t_ElisionFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ElisionFilterFactory).tp_dict, "class_", make_descriptor(ElisionFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ElisionFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ElisionFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ElisionFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ElisionFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ElisionFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ElisionFilterFactory::wrap_Object(ElisionFilterFactory(((t_ElisionFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ElisionFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ElisionFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ElisionFilterFactory_init_(t_ElisionFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ElisionFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ElisionFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ElisionFilterFactory_create(t_ElisionFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::util::ElisionFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::util::t_ElisionFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ElisionFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_ElisionFilterFactory_getMultiTermComponent(t_ElisionFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_ElisionFilterFactory_inform(t_ElisionFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_ElisionFilterFactory_get__multiTermComponent(t_ElisionFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/DistributionLL.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *DistributionLL::class$ = NULL;
          jmethodID *DistributionLL::mids$ = NULL;
          bool DistributionLL::live$ = false;

          jclass DistributionLL::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/DistributionLL");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DistributionLL::DistributionLL() : ::org::apache::lucene::search::similarities::Distribution(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat DistributionLL::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String DistributionLL::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_DistributionLL_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DistributionLL_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DistributionLL_init_(t_DistributionLL *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DistributionLL_score(t_DistributionLL *self, PyObject *args);
          static PyObject *t_DistributionLL_toString(t_DistributionLL *self, PyObject *args);

          static PyMethodDef t_DistributionLL__methods_[] = {
            DECLARE_METHOD(t_DistributionLL, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DistributionLL, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DistributionLL, score, METH_VARARGS),
            DECLARE_METHOD(t_DistributionLL, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DistributionLL, t_DistributionLL, ::org::apache::lucene::search::similarities::Distribution, DistributionLL, t_DistributionLL_init_, 0, 0, 0, 0, 0);

          void t_DistributionLL::install(PyObject *module)
          {
            installType(&PY_TYPE(DistributionLL), module, "DistributionLL", 0);
          }

          void t_DistributionLL::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DistributionLL).tp_dict, "class_", make_descriptor(DistributionLL::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DistributionLL).tp_dict, "wrapfn_", make_descriptor(t_DistributionLL::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DistributionLL).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DistributionLL_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DistributionLL::initializeClass, 1)))
              return NULL;
            return t_DistributionLL::wrap_Object(DistributionLL(((t_DistributionLL *) arg)->object.this$));
          }
          static PyObject *t_DistributionLL_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DistributionLL::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DistributionLL_init_(t_DistributionLL *self, PyObject *args, PyObject *kwds)
          {
            DistributionLL object((jobject) NULL);

            INT_CALL(object = DistributionLL());
            self->object = object;

            return 0;
          }

          static PyObject *t_DistributionLL_score(t_DistributionLL *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.score(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DistributionLL), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_DistributionLL_toString(t_DistributionLL *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DistributionLL), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/util/Map.h"
#include "org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector$GroupHead.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/Sort.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {

            ::java::lang::Class *FunctionAllGroupHeadsCollector::class$ = NULL;
            jmethodID *FunctionAllGroupHeadsCollector::mids$ = NULL;
            bool FunctionAllGroupHeadsCollector::live$ = false;

            jclass FunctionAllGroupHeadsCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_0f36bb74] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Ljava/util/Map;Lorg/apache/lucene/search/Sort;)V");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
                mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
                mids$[mid_retrieveGroupHeadAndAddIfNotExist_39c7bd3c] = env->getMethodID(cls, "retrieveGroupHeadAndAddIfNotExist", "(I)V");
                mids$[mid_getCollectedGroupHeads_2d2d7de4] = env->getMethodID(cls, "getCollectedGroupHeads", "()Ljava/util/Collection;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FunctionAllGroupHeadsCollector::FunctionAllGroupHeadsCollector(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::java::util::Map & a1, const ::org::apache::lucene::search::Sort & a2) : ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector(env->newObject(initializeClass, &mids$, mid_init$_0f36bb74, a0.this$, a1.this$, a2.this$)) {}

            void FunctionAllGroupHeadsCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }

            void FunctionAllGroupHeadsCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {
            static PyObject *t_FunctionAllGroupHeadsCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionAllGroupHeadsCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionAllGroupHeadsCollector_of_(t_FunctionAllGroupHeadsCollector *self, PyObject *args);
            static int t_FunctionAllGroupHeadsCollector_init_(t_FunctionAllGroupHeadsCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FunctionAllGroupHeadsCollector_setNextReader(t_FunctionAllGroupHeadsCollector *self, PyObject *args);
            static PyObject *t_FunctionAllGroupHeadsCollector_setScorer(t_FunctionAllGroupHeadsCollector *self, PyObject *args);
            static int t_FunctionAllGroupHeadsCollector_set__nextReader(t_FunctionAllGroupHeadsCollector *self, PyObject *arg, void *data);
            static int t_FunctionAllGroupHeadsCollector_set__scorer(t_FunctionAllGroupHeadsCollector *self, PyObject *arg, void *data);
            static PyObject *t_FunctionAllGroupHeadsCollector_get__parameters_(t_FunctionAllGroupHeadsCollector *self, void *data);
            static PyGetSetDef t_FunctionAllGroupHeadsCollector__fields_[] = {
              DECLARE_SET_FIELD(t_FunctionAllGroupHeadsCollector, nextReader),
              DECLARE_SET_FIELD(t_FunctionAllGroupHeadsCollector, scorer),
              DECLARE_GET_FIELD(t_FunctionAllGroupHeadsCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FunctionAllGroupHeadsCollector__methods_[] = {
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector, setNextReader, METH_VARARGS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector, setScorer, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FunctionAllGroupHeadsCollector, t_FunctionAllGroupHeadsCollector, ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector, FunctionAllGroupHeadsCollector, t_FunctionAllGroupHeadsCollector_init_, 0, 0, t_FunctionAllGroupHeadsCollector__fields_, 0, 0);
            PyObject *t_FunctionAllGroupHeadsCollector::wrap_Object(const FunctionAllGroupHeadsCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionAllGroupHeadsCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionAllGroupHeadsCollector *self = (t_FunctionAllGroupHeadsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FunctionAllGroupHeadsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionAllGroupHeadsCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionAllGroupHeadsCollector *self = (t_FunctionAllGroupHeadsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FunctionAllGroupHeadsCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(FunctionAllGroupHeadsCollector), module, "FunctionAllGroupHeadsCollector", 0);
            }

            void t_FunctionAllGroupHeadsCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupHeadsCollector).tp_dict, "class_", make_descriptor(FunctionAllGroupHeadsCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupHeadsCollector).tp_dict, "wrapfn_", make_descriptor(t_FunctionAllGroupHeadsCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupHeadsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FunctionAllGroupHeadsCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FunctionAllGroupHeadsCollector::initializeClass, 1)))
                return NULL;
              return t_FunctionAllGroupHeadsCollector::wrap_Object(FunctionAllGroupHeadsCollector(((t_FunctionAllGroupHeadsCollector *) arg)->object.this$));
            }
            static PyObject *t_FunctionAllGroupHeadsCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FunctionAllGroupHeadsCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FunctionAllGroupHeadsCollector_of_(t_FunctionAllGroupHeadsCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_FunctionAllGroupHeadsCollector_init_(t_FunctionAllGroupHeadsCollector *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::java::util::Map a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::search::Sort a2((jobject) NULL);
              FunctionAllGroupHeadsCollector object((jobject) NULL);

              if (!parseArgs(args, "kKk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_, &a2))
              {
                INT_CALL(object = FunctionAllGroupHeadsCollector(a0, a1, a2));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::search::grouping::function::PY_TYPE(FunctionAllGroupHeadsCollector$GroupHead);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FunctionAllGroupHeadsCollector_setNextReader(t_FunctionAllGroupHeadsCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionAllGroupHeadsCollector), (PyObject *) self, "setNextReader", args, 2);
            }

            static PyObject *t_FunctionAllGroupHeadsCollector_setScorer(t_FunctionAllGroupHeadsCollector *self, PyObject *args)
            {
              ::org::apache::lucene::search::Scorer a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setScorer(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionAllGroupHeadsCollector), (PyObject *) self, "setScorer", args, 2);
            }
            static PyObject *t_FunctionAllGroupHeadsCollector_get__parameters_(t_FunctionAllGroupHeadsCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static int t_FunctionAllGroupHeadsCollector_set__nextReader(t_FunctionAllGroupHeadsCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }

            static int t_FunctionAllGroupHeadsCollector_set__scorer(t_FunctionAllGroupHeadsCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::search::Scorer value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
                {
                  INT_CALL(self->object.setScorer(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "scorer", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40PostingsFormat::class$ = NULL;
          jmethodID *Lucene40PostingsFormat::mids$ = NULL;
          bool Lucene40PostingsFormat::live$ = false;

          jclass Lucene40PostingsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_a15793c6] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
              mids$[mid_fieldsProducer_c86c62bc] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40PostingsFormat::Lucene40PostingsFormat() : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::FieldsConsumer Lucene40PostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_a15793c6], a0.this$));
          }

          ::org::apache::lucene::codecs::FieldsProducer Lucene40PostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c86c62bc], a0.this$));
          }

          ::java::lang::String Lucene40PostingsFormat::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40PostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40PostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40PostingsFormat_init_(t_Lucene40PostingsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40PostingsFormat_fieldsConsumer(t_Lucene40PostingsFormat *self, PyObject *args);
          static PyObject *t_Lucene40PostingsFormat_fieldsProducer(t_Lucene40PostingsFormat *self, PyObject *args);
          static PyObject *t_Lucene40PostingsFormat_toString(t_Lucene40PostingsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene40PostingsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40PostingsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40PostingsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40PostingsFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsFormat, fieldsProducer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsFormat, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40PostingsFormat, t_Lucene40PostingsFormat, ::org::apache::lucene::codecs::PostingsFormat, Lucene40PostingsFormat, t_Lucene40PostingsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene40PostingsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40PostingsFormat), module, "Lucene40PostingsFormat", 0);
          }

          void t_Lucene40PostingsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsFormat).tp_dict, "class_", make_descriptor(Lucene40PostingsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40PostingsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40PostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40PostingsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40PostingsFormat::wrap_Object(Lucene40PostingsFormat(((t_Lucene40PostingsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40PostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40PostingsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40PostingsFormat_init_(t_Lucene40PostingsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40PostingsFormat object((jobject) NULL);

            INT_CALL(object = Lucene40PostingsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40PostingsFormat_fieldsConsumer(t_Lucene40PostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_Lucene40PostingsFormat_fieldsProducer(t_Lucene40PostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }

          static PyObject *t_Lucene40PostingsFormat_toString(t_Lucene40PostingsFormat *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsFormat), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilteredQuery$FilterStrategy.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/BulkScorer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilteredQuery$FilterStrategy::class$ = NULL;
        jmethodID *FilteredQuery$FilterStrategy::mids$ = NULL;
        bool FilteredQuery$FilterStrategy::live$ = false;

        jclass FilteredQuery$FilterStrategy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilteredQuery$FilterStrategy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_filteredBulkScorer_b5c185de] = env->getMethodID(cls, "filteredBulkScorer", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/search/Weight;ZLorg/apache/lucene/search/DocIdSet;)Lorg/apache/lucene/search/BulkScorer;");
            mids$[mid_filteredScorer_05f41f97] = env->getMethodID(cls, "filteredScorer", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/DocIdSet;)Lorg/apache/lucene/search/Scorer;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilteredQuery$FilterStrategy::FilteredQuery$FilterStrategy() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::BulkScorer FilteredQuery$FilterStrategy::filteredBulkScorer(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::search::Weight & a1, jboolean a2, const ::org::apache::lucene::search::DocIdSet & a3) const
        {
          return ::org::apache::lucene::search::BulkScorer(env->callObjectMethod(this$, mids$[mid_filteredBulkScorer_b5c185de], a0.this$, a1.this$, a2, a3.this$));
        }

        ::org::apache::lucene::search::Scorer FilteredQuery$FilterStrategy::filteredScorer(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::search::Weight & a1, const ::org::apache::lucene::search::DocIdSet & a2) const
        {
          return ::org::apache::lucene::search::Scorer(env->callObjectMethod(this$, mids$[mid_filteredScorer_05f41f97], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilteredQuery$FilterStrategy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilteredQuery$FilterStrategy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilteredQuery$FilterStrategy_init_(t_FilteredQuery$FilterStrategy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilteredQuery$FilterStrategy_filteredBulkScorer(t_FilteredQuery$FilterStrategy *self, PyObject *args);
        static PyObject *t_FilteredQuery$FilterStrategy_filteredScorer(t_FilteredQuery$FilterStrategy *self, PyObject *args);

        static PyMethodDef t_FilteredQuery$FilterStrategy__methods_[] = {
          DECLARE_METHOD(t_FilteredQuery$FilterStrategy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredQuery$FilterStrategy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredQuery$FilterStrategy, filteredBulkScorer, METH_VARARGS),
          DECLARE_METHOD(t_FilteredQuery$FilterStrategy, filteredScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilteredQuery$FilterStrategy, t_FilteredQuery$FilterStrategy, ::java::lang::Object, FilteredQuery$FilterStrategy, t_FilteredQuery$FilterStrategy_init_, 0, 0, 0, 0, 0);

        void t_FilteredQuery$FilterStrategy::install(PyObject *module)
        {
          installType(&PY_TYPE(FilteredQuery$FilterStrategy), module, "FilteredQuery$FilterStrategy", 0);
        }

        void t_FilteredQuery$FilterStrategy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilteredQuery$FilterStrategy).tp_dict, "class_", make_descriptor(FilteredQuery$FilterStrategy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilteredQuery$FilterStrategy).tp_dict, "wrapfn_", make_descriptor(t_FilteredQuery$FilterStrategy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilteredQuery$FilterStrategy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilteredQuery$FilterStrategy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilteredQuery$FilterStrategy::initializeClass, 1)))
            return NULL;
          return t_FilteredQuery$FilterStrategy::wrap_Object(FilteredQuery$FilterStrategy(((t_FilteredQuery$FilterStrategy *) arg)->object.this$));
        }
        static PyObject *t_FilteredQuery$FilterStrategy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilteredQuery$FilterStrategy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilteredQuery$FilterStrategy_init_(t_FilteredQuery$FilterStrategy *self, PyObject *args, PyObject *kwds)
        {
          FilteredQuery$FilterStrategy object((jobject) NULL);

          INT_CALL(object = FilteredQuery$FilterStrategy());
          self->object = object;

          return 0;
        }

        static PyObject *t_FilteredQuery$FilterStrategy_filteredBulkScorer(t_FilteredQuery$FilterStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::Weight a1((jobject) NULL);
          jboolean a2;
          ::org::apache::lucene::search::DocIdSet a3((jobject) NULL);
          ::org::apache::lucene::search::BulkScorer result((jobject) NULL);

          if (!parseArgs(args, "kkZk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::search::Weight::initializeClass, ::org::apache::lucene::search::DocIdSet::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.filteredBulkScorer(a0, a1, a2, a3));
            return ::org::apache::lucene::search::t_BulkScorer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "filteredBulkScorer", args);
          return NULL;
        }

        static PyObject *t_FilteredQuery$FilterStrategy_filteredScorer(t_FilteredQuery$FilterStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::Weight a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet a2((jobject) NULL);
          ::org::apache::lucene::search::Scorer result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::search::Weight::initializeClass, ::org::apache::lucene::search::DocIdSet::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.filteredScorer(a0, a1, a2));
            return ::org::apache::lucene::search::t_Scorer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "filteredScorer", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/lang/Number.h"
#include "org/apache/lucene/facet/LabelAndValue.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetResult::class$ = NULL;
        jmethodID *FacetResult::mids$ = NULL;
        jfieldID *FacetResult::fids$ = NULL;
        bool FacetResult::live$ = false;

        jclass FacetResult::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetResult");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4b7182dd] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/Number;[Lorg/apache/lucene/facet/LabelAndValue;I)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_childCount] = env->getFieldID(cls, "childCount", "I");
            fids$[fid_dim] = env->getFieldID(cls, "dim", "Ljava/lang/String;");
            fids$[fid_labelValues] = env->getFieldID(cls, "labelValues", "[Lorg/apache/lucene/facet/LabelAndValue;");
            fids$[fid_path] = env->getFieldID(cls, "path", "[Ljava/lang/String;");
            fids$[fid_value] = env->getFieldID(cls, "value", "Ljava/lang/Number;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetResult::FacetResult(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1, const ::java::lang::Number & a2, const JArray< ::org::apache::lucene::facet::LabelAndValue > & a3, jint a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4b7182dd, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

        jboolean FacetResult::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint FacetResult::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String FacetResult::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jint FacetResult::_get_childCount() const
        {
          return env->getIntField(this$, fids$[fid_childCount]);
        }

        ::java::lang::String FacetResult::_get_dim() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_dim]));
        }

        JArray< ::org::apache::lucene::facet::LabelAndValue > FacetResult::_get_labelValues() const
        {
          return JArray< ::org::apache::lucene::facet::LabelAndValue >(env->getObjectField(this$, fids$[fid_labelValues]));
        }

        JArray< ::java::lang::String > FacetResult::_get_path() const
        {
          return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_path]));
        }

        ::java::lang::Number FacetResult::_get_value() const
        {
          return ::java::lang::Number(env->getObjectField(this$, fids$[fid_value]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetResult_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetResult_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetResult_init_(t_FacetResult *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetResult_equals(t_FacetResult *self, PyObject *args);
        static PyObject *t_FacetResult_hashCode(t_FacetResult *self, PyObject *args);
        static PyObject *t_FacetResult_toString(t_FacetResult *self, PyObject *args);
        static PyObject *t_FacetResult_get__childCount(t_FacetResult *self, void *data);
        static PyObject *t_FacetResult_get__dim(t_FacetResult *self, void *data);
        static PyObject *t_FacetResult_get__labelValues(t_FacetResult *self, void *data);
        static PyObject *t_FacetResult_get__path(t_FacetResult *self, void *data);
        static PyObject *t_FacetResult_get__value(t_FacetResult *self, void *data);

        static PyGetSetDef t_FacetResult__fields_[] = {
          DECLARE_GET_FIELD(t_FacetResult, childCount),
          DECLARE_GET_FIELD(t_FacetResult, dim),
          DECLARE_GET_FIELD(t_FacetResult, labelValues),
          DECLARE_GET_FIELD(t_FacetResult, path),
          DECLARE_GET_FIELD(t_FacetResult, value),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetResult__methods_[] = {
          DECLARE_METHOD(t_FacetResult, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetResult, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetResult, equals, METH_VARARGS),
          DECLARE_METHOD(t_FacetResult, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FacetResult, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FacetResult, t_FacetResult, ::java::lang::Object, FacetResult, t_FacetResult_init_, 0, 0, t_FacetResult__fields_, 0, 0);

        void t_FacetResult::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetResult), module, "FacetResult", 0);
        }

        void t_FacetResult::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FacetResult).tp_dict, "class_", make_descriptor(FacetResult::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FacetResult).tp_dict, "wrapfn_", make_descriptor(t_FacetResult::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FacetResult).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FacetResult_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetResult::initializeClass, 1)))
            return NULL;
          return t_FacetResult::wrap_Object(FacetResult(((t_FacetResult *) arg)->object.this$));
        }
        static PyObject *t_FacetResult_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetResult::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetResult_init_(t_FacetResult *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::lang::Number a2((jobject) NULL);
          JArray< ::org::apache::lucene::facet::LabelAndValue > a3((jobject) NULL);
          jint a4;
          FacetResult object((jobject) NULL);

          if (!parseArgs(args, "s[sO[kI", &::java::lang::PY_TYPE(Number), ::org::apache::lucene::facet::LabelAndValue::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = FacetResult(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FacetResult_equals(t_FacetResult *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FacetResult), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FacetResult_hashCode(t_FacetResult *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FacetResult), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FacetResult_toString(t_FacetResult *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FacetResult), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FacetResult_get__childCount(t_FacetResult *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_childCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FacetResult_get__dim(t_FacetResult *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_dim());
          return j2p(value);
        }

        static PyObject *t_FacetResult_get__labelValues(t_FacetResult *self, void *data)
        {
          JArray< ::org::apache::lucene::facet::LabelAndValue > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_labelValues());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::facet::t_LabelAndValue::wrap_jobject);
        }

        static PyObject *t_FacetResult_get__path(t_FacetResult *self, void *data)
        {
          JArray< ::java::lang::String > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_path());
          return JArray<jstring>(value.this$).wrap();
        }

        static PyObject *t_FacetResult_get__value(t_FacetResult *self, void *data)
        {
          ::java::lang::Number value((jobject) NULL);
          OBJ_CALL(value = self->object._get_value());
          return ::java::lang::t_Number::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/DistanceSubQuery.h"
#include "org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *DistanceSubQuery::class$ = NULL;
            jmethodID *DistanceSubQuery::mids$ = NULL;
            bool DistanceSubQuery::live$ = false;

            jclass DistanceSubQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/DistanceSubQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_addSpanQueries_0564f431] = env->getMethodID(cls, "addSpanQueries", "(Lorg/apache/lucene/queryparser/surround/query/SpanNearClauseFactory;)V");
                mids$[mid_distanceSubQueryNotAllowed_14c7b5c5] = env->getMethodID(cls, "distanceSubQueryNotAllowed", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void DistanceSubQuery::addSpanQueries(const ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addSpanQueries_0564f431], a0.this$);
            }

            ::java::lang::String DistanceSubQuery::distanceSubQueryNotAllowed() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_distanceSubQueryNotAllowed_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_DistanceSubQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DistanceSubQuery_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DistanceSubQuery_addSpanQueries(t_DistanceSubQuery *self, PyObject *arg);
            static PyObject *t_DistanceSubQuery_distanceSubQueryNotAllowed(t_DistanceSubQuery *self);

            static PyMethodDef t_DistanceSubQuery__methods_[] = {
              DECLARE_METHOD(t_DistanceSubQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DistanceSubQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DistanceSubQuery, addSpanQueries, METH_O),
              DECLARE_METHOD(t_DistanceSubQuery, distanceSubQueryNotAllowed, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DistanceSubQuery, t_DistanceSubQuery, ::java::lang::Object, DistanceSubQuery, abstract_init, 0, 0, 0, 0, 0);

            void t_DistanceSubQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(DistanceSubQuery), module, "DistanceSubQuery", 0);
            }

            void t_DistanceSubQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DistanceSubQuery).tp_dict, "class_", make_descriptor(DistanceSubQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DistanceSubQuery).tp_dict, "wrapfn_", make_descriptor(t_DistanceSubQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DistanceSubQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DistanceSubQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DistanceSubQuery::initializeClass, 1)))
                return NULL;
              return t_DistanceSubQuery::wrap_Object(DistanceSubQuery(((t_DistanceSubQuery *) arg)->object.this$));
            }
            static PyObject *t_DistanceSubQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DistanceSubQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_DistanceSubQuery_addSpanQueries(t_DistanceSubQuery *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addSpanQueries(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addSpanQueries", arg);
              return NULL;
            }

            static PyObject *t_DistanceSubQuery_distanceSubQueryNotAllowed(t_DistanceSubQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.distanceSubQueryNotAllowed());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *TokenMgrError::class$ = NULL;
              jmethodID *TokenMgrError::mids$ = NULL;
              bool TokenMgrError::live$ = false;

              jclass TokenMgrError::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
                  mids$[mid_init$_8aaeec67] = env->getMethodID(cls, "<init>", "(ZIIILjava/lang/String;CI)V");
                  mids$[mid_getMessage_14c7b5c5] = env->getMethodID(cls, "getMessage", "()Ljava/lang/String;");
                  mids$[mid_LexicalError_e888c5f6] = env->getStaticMethodID(cls, "LexicalError", "(ZIIILjava/lang/String;C)Ljava/lang/String;");
                  mids$[mid_addEscapes_97a5258f] = env->getStaticMethodID(cls, "addEscapes", "(Ljava/lang/String;)Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              TokenMgrError::TokenMgrError() : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              TokenMgrError::TokenMgrError(const ::java::lang::String & a0, jint a1) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

              TokenMgrError::TokenMgrError(jboolean a0, jint a1, jint a2, jint a3, const ::java::lang::String & a4, jchar a5, jint a6) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_8aaeec67, a0, a1, a2, a3, a4.this$, a5, a6)) {}

              ::java::lang::String TokenMgrError::getMessage() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMessage_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg);
              static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds);
              static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args);
              static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data);
              static PyGetSetDef t_TokenMgrError__fields_[] = {
                DECLARE_GET_FIELD(t_TokenMgrError, message),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_TokenMgrError__methods_[] = {
                DECLARE_METHOD(t_TokenMgrError, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TokenMgrError, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TokenMgrError, getMessage, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(TokenMgrError, t_TokenMgrError, ::java::lang::Error, TokenMgrError, t_TokenMgrError_init_, 0, 0, t_TokenMgrError__fields_, 0, 0);

              void t_TokenMgrError::install(PyObject *module)
              {
                installType(&PY_TYPE(TokenMgrError), module, "TokenMgrError", 0);
              }

              void t_TokenMgrError::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "class_", make_descriptor(TokenMgrError::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "wrapfn_", make_descriptor(t_TokenMgrError::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TokenMgrError::initializeClass, 1)))
                  return NULL;
                return t_TokenMgrError::wrap_Object(TokenMgrError(((t_TokenMgrError *) arg)->object.this$));
              }
              static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TokenMgrError::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    TokenMgrError object((jobject) NULL);

                    INT_CALL(object = TokenMgrError());
                    self->object = object;
                    break;
                  }
                  goto err;
                 case 2:
                  {
                    ::java::lang::String a0((jobject) NULL);
                    jint a1;
                    TokenMgrError object((jobject) NULL);

                    if (!parseArgs(args, "sI", &a0, &a1))
                    {
                      INT_CALL(object = TokenMgrError(a0, a1));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 7:
                  {
                    jboolean a0;
                    jint a1;
                    jint a2;
                    jint a3;
                    ::java::lang::String a4((jobject) NULL);
                    jchar a5;
                    jint a6;
                    TokenMgrError object((jobject) NULL);

                    if (!parseArgs(args, "ZIIIsCI", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                    {
                      INT_CALL(object = TokenMgrError(a0, a1, a2, a3, a4, a5, a6));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.getMessage());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(TokenMgrError), (PyObject *) self, "getMessage", args, 2);
              }

              static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getMessage());
                return j2p(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SnapshotDeletionPolicy.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SnapshotDeletionPolicy::class$ = NULL;
        jmethodID *SnapshotDeletionPolicy::mids$ = NULL;
        bool SnapshotDeletionPolicy::live$ = false;

        jclass SnapshotDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SnapshotDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9cff6c2e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexDeletionPolicy;)V");
            mids$[mid_getIndexCommit_6e559b4f] = env->getMethodID(cls, "getIndexCommit", "(J)Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_getSnapshotCount_54c6a179] = env->getMethodID(cls, "getSnapshotCount", "()I");
            mids$[mid_getSnapshots_87851566] = env->getMethodID(cls, "getSnapshots", "()Ljava/util/List;");
            mids$[mid_onCommit_1fde8fc3] = env->getMethodID(cls, "onCommit", "(Ljava/util/List;)V");
            mids$[mid_onInit_1fde8fc3] = env->getMethodID(cls, "onInit", "(Ljava/util/List;)V");
            mids$[mid_release_fecc65d3] = env->getMethodID(cls, "release", "(Lorg/apache/lucene/index/IndexCommit;)V");
            mids$[mid_snapshot_09307276] = env->getMethodID(cls, "snapshot", "()Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_incRef_fecc65d3] = env->getMethodID(cls, "incRef", "(Lorg/apache/lucene/index/IndexCommit;)V");
            mids$[mid_releaseGen_0ee6df2f] = env->getMethodID(cls, "releaseGen", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SnapshotDeletionPolicy::SnapshotDeletionPolicy(const ::org::apache::lucene::index::IndexDeletionPolicy & a0) : ::org::apache::lucene::index::IndexDeletionPolicy(env->newObject(initializeClass, &mids$, mid_init$_9cff6c2e, a0.this$)) {}

        ::org::apache::lucene::index::IndexCommit SnapshotDeletionPolicy::getIndexCommit(jlong a0) const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_getIndexCommit_6e559b4f], a0));
        }

        jint SnapshotDeletionPolicy::getSnapshotCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getSnapshotCount_54c6a179]);
        }

        ::java::util::List SnapshotDeletionPolicy::getSnapshots() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getSnapshots_87851566]));
        }

        void SnapshotDeletionPolicy::onCommit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onCommit_1fde8fc3], a0.this$);
        }

        void SnapshotDeletionPolicy::onInit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onInit_1fde8fc3], a0.this$);
        }

        void SnapshotDeletionPolicy::release(const ::org::apache::lucene::index::IndexCommit & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_release_fecc65d3], a0.this$);
        }

        ::org::apache::lucene::index::IndexCommit SnapshotDeletionPolicy::snapshot() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_snapshot_09307276]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SnapshotDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SnapshotDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SnapshotDeletionPolicy_init_(t_SnapshotDeletionPolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SnapshotDeletionPolicy_getIndexCommit(t_SnapshotDeletionPolicy *self, PyObject *arg);
        static PyObject *t_SnapshotDeletionPolicy_getSnapshotCount(t_SnapshotDeletionPolicy *self);
        static PyObject *t_SnapshotDeletionPolicy_getSnapshots(t_SnapshotDeletionPolicy *self);
        static PyObject *t_SnapshotDeletionPolicy_onCommit(t_SnapshotDeletionPolicy *self, PyObject *args);
        static PyObject *t_SnapshotDeletionPolicy_onInit(t_SnapshotDeletionPolicy *self, PyObject *args);
        static PyObject *t_SnapshotDeletionPolicy_release(t_SnapshotDeletionPolicy *self, PyObject *arg);
        static PyObject *t_SnapshotDeletionPolicy_snapshot(t_SnapshotDeletionPolicy *self);
        static PyObject *t_SnapshotDeletionPolicy_get__snapshotCount(t_SnapshotDeletionPolicy *self, void *data);
        static PyObject *t_SnapshotDeletionPolicy_get__snapshots(t_SnapshotDeletionPolicy *self, void *data);
        static PyGetSetDef t_SnapshotDeletionPolicy__fields_[] = {
          DECLARE_GET_FIELD(t_SnapshotDeletionPolicy, snapshotCount),
          DECLARE_GET_FIELD(t_SnapshotDeletionPolicy, snapshots),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SnapshotDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_SnapshotDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, getIndexCommit, METH_O),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, getSnapshotCount, METH_NOARGS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, getSnapshots, METH_NOARGS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, onCommit, METH_VARARGS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, onInit, METH_VARARGS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, release, METH_O),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, snapshot, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SnapshotDeletionPolicy, t_SnapshotDeletionPolicy, ::org::apache::lucene::index::IndexDeletionPolicy, SnapshotDeletionPolicy, t_SnapshotDeletionPolicy_init_, 0, 0, t_SnapshotDeletionPolicy__fields_, 0, 0);

        void t_SnapshotDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(SnapshotDeletionPolicy), module, "SnapshotDeletionPolicy", 0);
        }

        void t_SnapshotDeletionPolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SnapshotDeletionPolicy).tp_dict, "class_", make_descriptor(SnapshotDeletionPolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SnapshotDeletionPolicy).tp_dict, "wrapfn_", make_descriptor(t_SnapshotDeletionPolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SnapshotDeletionPolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SnapshotDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SnapshotDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_SnapshotDeletionPolicy::wrap_Object(SnapshotDeletionPolicy(((t_SnapshotDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_SnapshotDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SnapshotDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SnapshotDeletionPolicy_init_(t_SnapshotDeletionPolicy *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy a0((jobject) NULL);
          SnapshotDeletionPolicy object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexDeletionPolicy::initializeClass, &a0))
          {
            INT_CALL(object = SnapshotDeletionPolicy(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SnapshotDeletionPolicy_getIndexCommit(t_SnapshotDeletionPolicy *self, PyObject *arg)
        {
          jlong a0;
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.getIndexCommit(a0));
            return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getIndexCommit", arg);
          return NULL;
        }

        static PyObject *t_SnapshotDeletionPolicy_getSnapshotCount(t_SnapshotDeletionPolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getSnapshotCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SnapshotDeletionPolicy_getSnapshots(t_SnapshotDeletionPolicy *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.getSnapshots());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(IndexCommit));
        }

        static PyObject *t_SnapshotDeletionPolicy_onCommit(t_SnapshotDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onCommit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SnapshotDeletionPolicy), (PyObject *) self, "onCommit", args, 2);
        }

        static PyObject *t_SnapshotDeletionPolicy_onInit(t_SnapshotDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onInit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SnapshotDeletionPolicy), (PyObject *) self, "onInit", args, 2);
        }

        static PyObject *t_SnapshotDeletionPolicy_release(t_SnapshotDeletionPolicy *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0))
          {
            OBJ_CALL(self->object.release(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "release", arg);
          return NULL;
        }

        static PyObject *t_SnapshotDeletionPolicy_snapshot(t_SnapshotDeletionPolicy *self)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);
          OBJ_CALL(result = self->object.snapshot());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
        }

        static PyObject *t_SnapshotDeletionPolicy_get__snapshotCount(t_SnapshotDeletionPolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getSnapshotCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_SnapshotDeletionPolicy_get__snapshots(t_SnapshotDeletionPolicy *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getSnapshots());
          return ::java::util::t_List::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanQuery::class$ = NULL;
          jmethodID *SpanQuery::mids$ = NULL;
          bool SpanQuery::live$ = false;

          jclass SpanQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanQuery::SpanQuery() : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Weight SpanQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          ::java::lang::String SpanQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::search::spans::Spans SpanQuery::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanQuery_init_(t_SpanQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanQuery_createWeight(t_SpanQuery *self, PyObject *args);
          static PyObject *t_SpanQuery_getField(t_SpanQuery *self);
          static PyObject *t_SpanQuery_getSpans(t_SpanQuery *self, PyObject *args);
          static PyObject *t_SpanQuery_get__field(t_SpanQuery *self, void *data);
          static PyGetSetDef t_SpanQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanQuery, field),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanQuery__methods_[] = {
            DECLARE_METHOD(t_SpanQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_SpanQuery, getField, METH_NOARGS),
            DECLARE_METHOD(t_SpanQuery, getSpans, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanQuery, t_SpanQuery, ::org::apache::lucene::search::Query, SpanQuery, t_SpanQuery_init_, 0, 0, t_SpanQuery__fields_, 0, 0);

          void t_SpanQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanQuery), module, "SpanQuery", 0);
          }

          void t_SpanQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanQuery).tp_dict, "class_", make_descriptor(SpanQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanQuery::initializeClass, 1)))
              return NULL;
            return t_SpanQuery::wrap_Object(SpanQuery(((t_SpanQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanQuery_init_(t_SpanQuery *self, PyObject *args, PyObject *kwds)
          {
            SpanQuery object((jobject) NULL);

            INT_CALL(object = SpanQuery());
            self->object = object;

            return 0;
          }

          static PyObject *t_SpanQuery_createWeight(t_SpanQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_SpanQuery_getField(t_SpanQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getField());
            return j2p(result);
          }

          static PyObject *t_SpanQuery_getSpans(t_SpanQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getSpans", args);
            return NULL;
          }

          static PyObject *t_SpanQuery_get__field(t_SpanQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/UpgradeIndexMergePolicy.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/lang/Boolean.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *UpgradeIndexMergePolicy::class$ = NULL;
        jmethodID *UpgradeIndexMergePolicy::mids$ = NULL;
        bool UpgradeIndexMergePolicy::live$ = false;

        jclass UpgradeIndexMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/UpgradeIndexMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6034dd24] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/MergePolicy;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_findForcedDeletesMerges_581dbc49] = env->getMethodID(cls, "findForcedDeletesMerges", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findForcedMerges_4fe4a5b5] = env->getMethodID(cls, "findForcedMerges", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findMerges_cada0df0] = env->getMethodID(cls, "findMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_useCompoundFile_70dc8488] = env->getMethodID(cls, "useCompoundFile", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)Z");
            mids$[mid_shouldUpgradeSegment_6649cdf8] = env->getMethodID(cls, "shouldUpgradeSegment", "(Lorg/apache/lucene/index/SegmentCommitInfo;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        UpgradeIndexMergePolicy::UpgradeIndexMergePolicy(const ::org::apache::lucene::index::MergePolicy & a0) : ::org::apache::lucene::index::MergePolicy(env->newObject(initializeClass, &mids$, mid_init$_6034dd24, a0.this$)) {}

        void UpgradeIndexMergePolicy::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification UpgradeIndexMergePolicy::findForcedDeletesMerges(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::IndexWriter & a1) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedDeletesMerges_581dbc49], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification UpgradeIndexMergePolicy::findForcedMerges(const ::org::apache::lucene::index::SegmentInfos & a0, jint a1, const ::java::util::Map & a2, const ::org::apache::lucene::index::IndexWriter & a3) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedMerges_4fe4a5b5], a0.this$, a1, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification UpgradeIndexMergePolicy::findMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findMerges_cada0df0], a0.this$, a1.this$, a2.this$));
        }

        ::java::lang::String UpgradeIndexMergePolicy::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jboolean UpgradeIndexMergePolicy::useCompoundFile(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::SegmentCommitInfo & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return env->callBooleanMethod(this$, mids$[mid_useCompoundFile_70dc8488], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_UpgradeIndexMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_UpgradeIndexMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_UpgradeIndexMergePolicy_init_(t_UpgradeIndexMergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_UpgradeIndexMergePolicy_close(t_UpgradeIndexMergePolicy *self, PyObject *args);
        static PyObject *t_UpgradeIndexMergePolicy_findForcedDeletesMerges(t_UpgradeIndexMergePolicy *self, PyObject *args);
        static PyObject *t_UpgradeIndexMergePolicy_findForcedMerges(t_UpgradeIndexMergePolicy *self, PyObject *args);
        static PyObject *t_UpgradeIndexMergePolicy_findMerges(t_UpgradeIndexMergePolicy *self, PyObject *args);
        static PyObject *t_UpgradeIndexMergePolicy_toString(t_UpgradeIndexMergePolicy *self, PyObject *args);
        static PyObject *t_UpgradeIndexMergePolicy_useCompoundFile(t_UpgradeIndexMergePolicy *self, PyObject *args);

        static PyMethodDef t_UpgradeIndexMergePolicy__methods_[] = {
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, close, METH_VARARGS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, findForcedDeletesMerges, METH_VARARGS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, findForcedMerges, METH_VARARGS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, findMerges, METH_VARARGS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, toString, METH_VARARGS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, useCompoundFile, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(UpgradeIndexMergePolicy, t_UpgradeIndexMergePolicy, ::org::apache::lucene::index::MergePolicy, UpgradeIndexMergePolicy, t_UpgradeIndexMergePolicy_init_, 0, 0, 0, 0, 0);

        void t_UpgradeIndexMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(UpgradeIndexMergePolicy), module, "UpgradeIndexMergePolicy", 0);
        }

        void t_UpgradeIndexMergePolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(UpgradeIndexMergePolicy).tp_dict, "class_", make_descriptor(UpgradeIndexMergePolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(UpgradeIndexMergePolicy).tp_dict, "wrapfn_", make_descriptor(t_UpgradeIndexMergePolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(UpgradeIndexMergePolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_UpgradeIndexMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, UpgradeIndexMergePolicy::initializeClass, 1)))
            return NULL;
          return t_UpgradeIndexMergePolicy::wrap_Object(UpgradeIndexMergePolicy(((t_UpgradeIndexMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_UpgradeIndexMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, UpgradeIndexMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_UpgradeIndexMergePolicy_init_(t_UpgradeIndexMergePolicy *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::MergePolicy a0((jobject) NULL);
          UpgradeIndexMergePolicy object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::MergePolicy::initializeClass, &a0))
          {
            INT_CALL(object = UpgradeIndexMergePolicy(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_UpgradeIndexMergePolicy_close(t_UpgradeIndexMergePolicy *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(UpgradeIndexMergePolicy), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_UpgradeIndexMergePolicy_findForcedDeletesMerges(t_UpgradeIndexMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.findForcedDeletesMerges(a0, a1));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(UpgradeIndexMergePolicy), (PyObject *) self, "findForcedDeletesMerges", args, 2);
        }

        static PyObject *t_UpgradeIndexMergePolicy_findForcedMerges(t_UpgradeIndexMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          jint a1;
          ::java::util::Map a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::IndexWriter a3((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kIKk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3))
          {
            OBJ_CALL(result = self->object.findForcedMerges(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(UpgradeIndexMergePolicy), (PyObject *) self, "findForcedMerges", args, 2);
        }

        static PyObject *t_UpgradeIndexMergePolicy_findMerges(t_UpgradeIndexMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(UpgradeIndexMergePolicy), (PyObject *) self, "findMerges", args, 2);
        }

        static PyObject *t_UpgradeIndexMergePolicy_toString(t_UpgradeIndexMergePolicy *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(UpgradeIndexMergePolicy), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_UpgradeIndexMergePolicy_useCompoundFile(t_UpgradeIndexMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentCommitInfo a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "kkk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.useCompoundFile(a0, a1, a2));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(UpgradeIndexMergePolicy), (PyObject *) self, "useCompoundFile", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/Field$Index.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *Field$Index::class$ = NULL;
        jmethodID *Field$Index::mids$ = NULL;
        bool Field$Index::live$ = false;
        Field$Index *Field$Index::ANALYZED = NULL;
        Field$Index *Field$Index::ANALYZED_NO_NORMS = NULL;
        Field$Index *Field$Index::NO = NULL;
        Field$Index *Field$Index::NOT_ANALYZED = NULL;
        Field$Index *Field$Index::NOT_ANALYZED_NO_NORMS = NULL;

        jclass Field$Index::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/Field$Index");

            mids$ = new jmethodID[max_mid];
            mids$[mid_isAnalyzed_54c6a16a] = env->getMethodID(cls, "isAnalyzed", "()Z");
            mids$[mid_isIndexed_54c6a16a] = env->getMethodID(cls, "isIndexed", "()Z");
            mids$[mid_omitNorms_54c6a16a] = env->getMethodID(cls, "omitNorms", "()Z");
            mids$[mid_toIndex_0139857d] = env->getStaticMethodID(cls, "toIndex", "(ZZ)Lorg/apache/lucene/document/Field$Index;");
            mids$[mid_toIndex_fddaa68a] = env->getStaticMethodID(cls, "toIndex", "(ZZZ)Lorg/apache/lucene/document/Field$Index;");
            mids$[mid_valueOf_6b6ff451] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/document/Field$Index;");
            mids$[mid_values_d9660127] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/document/Field$Index;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            ANALYZED = new Field$Index(env->getStaticObjectField(cls, "ANALYZED", "Lorg/apache/lucene/document/Field$Index;"));
            ANALYZED_NO_NORMS = new Field$Index(env->getStaticObjectField(cls, "ANALYZED_NO_NORMS", "Lorg/apache/lucene/document/Field$Index;"));
            NO = new Field$Index(env->getStaticObjectField(cls, "NO", "Lorg/apache/lucene/document/Field$Index;"));
            NOT_ANALYZED = new Field$Index(env->getStaticObjectField(cls, "NOT_ANALYZED", "Lorg/apache/lucene/document/Field$Index;"));
            NOT_ANALYZED_NO_NORMS = new Field$Index(env->getStaticObjectField(cls, "NOT_ANALYZED_NO_NORMS", "Lorg/apache/lucene/document/Field$Index;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean Field$Index::isAnalyzed() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isAnalyzed_54c6a16a]);
        }

        jboolean Field$Index::isIndexed() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isIndexed_54c6a16a]);
        }

        jboolean Field$Index::omitNorms() const
        {
          return env->callBooleanMethod(this$, mids$[mid_omitNorms_54c6a16a]);
        }

        Field$Index Field$Index::toIndex(jboolean a0, jboolean a1)
        {
          jclass cls = env->getClass(initializeClass);
          return Field$Index(env->callStaticObjectMethod(cls, mids$[mid_toIndex_0139857d], a0, a1));
        }

        Field$Index Field$Index::toIndex(jboolean a0, jboolean a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return Field$Index(env->callStaticObjectMethod(cls, mids$[mid_toIndex_fddaa68a], a0, a1, a2));
        }

        Field$Index Field$Index::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Field$Index(env->callStaticObjectMethod(cls, mids$[mid_valueOf_6b6ff451], a0.this$));
        }

        JArray< Field$Index > Field$Index::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< Field$Index >(env->callStaticObjectMethod(cls, mids$[mid_values_d9660127]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_Field$Index_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field$Index_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field$Index_of_(t_Field$Index *self, PyObject *args);
        static PyObject *t_Field$Index_isAnalyzed(t_Field$Index *self);
        static PyObject *t_Field$Index_isIndexed(t_Field$Index *self);
        static PyObject *t_Field$Index_omitNorms(t_Field$Index *self);
        static PyObject *t_Field$Index_toIndex(PyTypeObject *type, PyObject *args);
        static PyObject *t_Field$Index_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_Field$Index_values(PyTypeObject *type);
        static PyObject *t_Field$Index_get__analyzed(t_Field$Index *self, void *data);
        static PyObject *t_Field$Index_get__indexed(t_Field$Index *self, void *data);
        static PyObject *t_Field$Index_get__parameters_(t_Field$Index *self, void *data);
        static PyGetSetDef t_Field$Index__fields_[] = {
          DECLARE_GET_FIELD(t_Field$Index, analyzed),
          DECLARE_GET_FIELD(t_Field$Index, indexed),
          DECLARE_GET_FIELD(t_Field$Index, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Field$Index__methods_[] = {
          DECLARE_METHOD(t_Field$Index, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field$Index, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field$Index, of_, METH_VARARGS),
          DECLARE_METHOD(t_Field$Index, isAnalyzed, METH_NOARGS),
          DECLARE_METHOD(t_Field$Index, isIndexed, METH_NOARGS),
          DECLARE_METHOD(t_Field$Index, omitNorms, METH_NOARGS),
          DECLARE_METHOD(t_Field$Index, toIndex, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Field$Index, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Field$Index, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Field$Index, t_Field$Index, ::java::lang::Enum, Field$Index, abstract_init, 0, 0, t_Field$Index__fields_, 0, 0);
        PyObject *t_Field$Index::wrap_Object(const Field$Index& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Field$Index::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Field$Index *self = (t_Field$Index *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_Field$Index::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Field$Index::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Field$Index *self = (t_Field$Index *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_Field$Index::install(PyObject *module)
        {
          installType(&PY_TYPE(Field$Index), module, "Field$Index", 0);
        }

        void t_Field$Index::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "class_", make_descriptor(Field$Index::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "wrapfn_", make_descriptor(t_Field$Index::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Field$Index::initializeClass);
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "ANALYZED", make_descriptor(t_Field$Index::wrap_Object(*Field$Index::ANALYZED)));
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "ANALYZED_NO_NORMS", make_descriptor(t_Field$Index::wrap_Object(*Field$Index::ANALYZED_NO_NORMS)));
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "NO", make_descriptor(t_Field$Index::wrap_Object(*Field$Index::NO)));
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "NOT_ANALYZED", make_descriptor(t_Field$Index::wrap_Object(*Field$Index::NOT_ANALYZED)));
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "NOT_ANALYZED_NO_NORMS", make_descriptor(t_Field$Index::wrap_Object(*Field$Index::NOT_ANALYZED_NO_NORMS)));
        }

        static PyObject *t_Field$Index_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Field$Index::initializeClass, 1)))
            return NULL;
          return t_Field$Index::wrap_Object(Field$Index(((t_Field$Index *) arg)->object.this$));
        }
        static PyObject *t_Field$Index_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Field$Index::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Field$Index_of_(t_Field$Index *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_Field$Index_isAnalyzed(t_Field$Index *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isAnalyzed());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Field$Index_isIndexed(t_Field$Index *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isIndexed());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Field$Index_omitNorms(t_Field$Index *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.omitNorms());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Field$Index_toIndex(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jboolean a0;
              jboolean a1;
              Field$Index result((jobject) NULL);

              if (!parseArgs(args, "ZZ", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::Field$Index::toIndex(a0, a1));
                return t_Field$Index::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              jboolean a0;
              jboolean a1;
              jboolean a2;
              Field$Index result((jobject) NULL);

              if (!parseArgs(args, "ZZZ", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::Field$Index::toIndex(a0, a1, a2));
                return t_Field$Index::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "toIndex", args);
          return NULL;
        }

        static PyObject *t_Field$Index_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          Field$Index result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::Field$Index::valueOf(a0));
            return t_Field$Index::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_Field$Index_values(PyTypeObject *type)
        {
          JArray< Field$Index > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::document::Field$Index::values());
          return JArray<jobject>(result.this$).wrap(t_Field$Index::wrap_jobject);
        }
        static PyObject *t_Field$Index_get__parameters_(t_Field$Index *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_Field$Index_get__analyzed(t_Field$Index *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isAnalyzed());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_Field$Index_get__indexed(t_Field$Index *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isIndexed());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/TopOrdAndIntQueue$OrdAndValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *TopOrdAndIntQueue$OrdAndValue::class$ = NULL;
        jmethodID *TopOrdAndIntQueue$OrdAndValue::mids$ = NULL;
        jfieldID *TopOrdAndIntQueue$OrdAndValue::fids$ = NULL;
        bool TopOrdAndIntQueue$OrdAndValue::live$ = false;

        jclass TopOrdAndIntQueue$OrdAndValue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/TopOrdAndIntQueue$OrdAndValue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_ord] = env->getFieldID(cls, "ord", "I");
            fids$[fid_value] = env->getFieldID(cls, "value", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopOrdAndIntQueue$OrdAndValue::TopOrdAndIntQueue$OrdAndValue() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint TopOrdAndIntQueue$OrdAndValue::_get_ord() const
        {
          return env->getIntField(this$, fids$[fid_ord]);
        }

        void TopOrdAndIntQueue$OrdAndValue::_set_ord(jint a0) const
        {
          env->setIntField(this$, fids$[fid_ord], a0);
        }

        jint TopOrdAndIntQueue$OrdAndValue::_get_value() const
        {
          return env->getIntField(this$, fids$[fid_value]);
        }

        void TopOrdAndIntQueue$OrdAndValue::_set_value(jint a0) const
        {
          env->setIntField(this$, fids$[fid_value], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_of_(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *args);
        static int t_TopOrdAndIntQueue$OrdAndValue_init_(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__ord(t_TopOrdAndIntQueue$OrdAndValue *self, void *data);
        static int t_TopOrdAndIntQueue$OrdAndValue_set__ord(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *arg, void *data);
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__value(t_TopOrdAndIntQueue$OrdAndValue *self, void *data);
        static int t_TopOrdAndIntQueue$OrdAndValue_set__value(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *arg, void *data);

        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__parameters_(t_TopOrdAndIntQueue$OrdAndValue *self, void *data);
        static PyGetSetDef t_TopOrdAndIntQueue$OrdAndValue__fields_[] = {
          DECLARE_GETSET_FIELD(t_TopOrdAndIntQueue$OrdAndValue, ord),
          DECLARE_GETSET_FIELD(t_TopOrdAndIntQueue$OrdAndValue, value),
          DECLARE_GET_FIELD(t_TopOrdAndIntQueue$OrdAndValue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopOrdAndIntQueue$OrdAndValue__methods_[] = {
          DECLARE_METHOD(t_TopOrdAndIntQueue$OrdAndValue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndIntQueue$OrdAndValue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndIntQueue$OrdAndValue, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopOrdAndIntQueue$OrdAndValue, t_TopOrdAndIntQueue$OrdAndValue, ::java::lang::Object, TopOrdAndIntQueue$OrdAndValue, t_TopOrdAndIntQueue$OrdAndValue_init_, 0, 0, t_TopOrdAndIntQueue$OrdAndValue__fields_, 0, 0);
        PyObject *t_TopOrdAndIntQueue$OrdAndValue::wrap_Object(const TopOrdAndIntQueue$OrdAndValue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndIntQueue$OrdAndValue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndIntQueue$OrdAndValue *self = (t_TopOrdAndIntQueue$OrdAndValue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopOrdAndIntQueue$OrdAndValue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndIntQueue$OrdAndValue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndIntQueue$OrdAndValue *self = (t_TopOrdAndIntQueue$OrdAndValue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopOrdAndIntQueue$OrdAndValue::install(PyObject *module)
        {
          installType(&PY_TYPE(TopOrdAndIntQueue$OrdAndValue), module, "TopOrdAndIntQueue$OrdAndValue", 0);
        }

        void t_TopOrdAndIntQueue$OrdAndValue::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopOrdAndIntQueue$OrdAndValue).tp_dict, "class_", make_descriptor(TopOrdAndIntQueue$OrdAndValue::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopOrdAndIntQueue$OrdAndValue).tp_dict, "wrapfn_", make_descriptor(t_TopOrdAndIntQueue$OrdAndValue::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopOrdAndIntQueue$OrdAndValue).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopOrdAndIntQueue$OrdAndValue::initializeClass, 1)))
            return NULL;
          return t_TopOrdAndIntQueue$OrdAndValue::wrap_Object(TopOrdAndIntQueue$OrdAndValue(((t_TopOrdAndIntQueue$OrdAndValue *) arg)->object.this$));
        }
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopOrdAndIntQueue$OrdAndValue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_of_(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_TopOrdAndIntQueue$OrdAndValue_init_(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *args, PyObject *kwds)
        {
          TopOrdAndIntQueue$OrdAndValue object((jobject) NULL);

          INT_CALL(object = TopOrdAndIntQueue$OrdAndValue());
          self->object = object;
          self->parameters[0] = &::org::apache::lucene::facet::PY_TYPE(TopOrdAndIntQueue$OrdAndValue);

          return 0;
        }
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__parameters_(t_TopOrdAndIntQueue$OrdAndValue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__ord(t_TopOrdAndIntQueue$OrdAndValue *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_ord());
          return PyInt_FromLong((long) value);
        }
        static int t_TopOrdAndIntQueue$OrdAndValue_set__ord(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_ord(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "ord", arg);
          return -1;
        }

        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__value(t_TopOrdAndIntQueue$OrdAndValue *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_value());
          return PyInt_FromLong((long) value);
        }
        static int t_TopOrdAndIntQueue$OrdAndValue_set__value(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_value(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "value", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/Lock$With.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Lock.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *Lock$With::class$ = NULL;
        jmethodID *Lock$With::mids$ = NULL;
        bool Lock$With::live$ = false;

        jclass Lock$With::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/Lock$With");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e48139c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Lock;J)V");
            mids$[mid_run_846352c3] = env->getMethodID(cls, "run", "()Ljava/lang/Object;");
            mids$[mid_doBody_846352c3] = env->getMethodID(cls, "doBody", "()Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Lock$With::Lock$With(const ::org::apache::lucene::store::Lock & a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6e48139c, a0.this$, a1)) {}

        ::java::lang::Object Lock$With::run() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_run_846352c3]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_Lock$With_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Lock$With_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Lock$With_init_(t_Lock$With *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Lock$With_run(t_Lock$With *self);

        static PyMethodDef t_Lock$With__methods_[] = {
          DECLARE_METHOD(t_Lock$With, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Lock$With, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Lock$With, run, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Lock$With, t_Lock$With, ::java::lang::Object, Lock$With, t_Lock$With_init_, 0, 0, 0, 0, 0);

        void t_Lock$With::install(PyObject *module)
        {
          installType(&PY_TYPE(Lock$With), module, "Lock$With", 0);
        }

        void t_Lock$With::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Lock$With).tp_dict, "class_", make_descriptor(Lock$With::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Lock$With).tp_dict, "wrapfn_", make_descriptor(t_Lock$With::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Lock$With).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Lock$With_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Lock$With::initializeClass, 1)))
            return NULL;
          return t_Lock$With::wrap_Object(Lock$With(((t_Lock$With *) arg)->object.this$));
        }
        static PyObject *t_Lock$With_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Lock$With::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Lock$With_init_(t_Lock$With *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Lock a0((jobject) NULL);
          jlong a1;
          Lock$With object((jobject) NULL);

          if (!parseArgs(args, "kJ", ::org::apache::lucene::store::Lock::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Lock$With(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Lock$With_run(t_Lock$With *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.run());
          return ::java::lang::t_Object::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$ConfigurationKeys.h"
#include "java/lang/Boolean.h"
#include "org/apache/lucene/queryparser/flexible/core/config/ConfigurationKey.h"
#include "java/util/Map.h"
#include "java/lang/Integer.h"
#include "java/lang/String.h"
#include "java/util/TimeZone.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Float.h"
#include "java/util/Locale.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/NumericConfig.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/FuzzyConfig.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *StandardQueryConfigHandler$ConfigurationKeys::class$ = NULL;
              jmethodID *StandardQueryConfigHandler$ConfigurationKeys::mids$ = NULL;
              bool StandardQueryConfigHandler$ConfigurationKeys::live$ = false;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::ALLOW_LEADING_WILDCARD = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::ANALYZER = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::BOOST = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::DATE_RESOLUTION = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::DEFAULT_OPERATOR = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::ENABLE_POSITION_INCREMENTS = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::FIELD_BOOST_MAP = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::FIELD_DATE_RESOLUTION_MAP = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::FUZZY_CONFIG = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::LOCALE = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::LOWERCASE_EXPANDED_TERMS = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::MULTI_FIELDS = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::MULTI_TERM_REWRITE_METHOD = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::NUMERIC_CONFIG = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::NUMERIC_CONFIG_MAP = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::PHRASE_SLOP = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::TIMEZONE = NULL;

              jclass StandardQueryConfigHandler$ConfigurationKeys::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$ConfigurationKeys");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  ALLOW_LEADING_WILDCARD = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "ALLOW_LEADING_WILDCARD", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  ANALYZER = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "ANALYZER", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  BOOST = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "BOOST", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  DATE_RESOLUTION = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "DATE_RESOLUTION", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  DEFAULT_OPERATOR = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "DEFAULT_OPERATOR", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  ENABLE_POSITION_INCREMENTS = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "ENABLE_POSITION_INCREMENTS", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  FIELD_BOOST_MAP = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "FIELD_BOOST_MAP", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  FIELD_DATE_RESOLUTION_MAP = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "FIELD_DATE_RESOLUTION_MAP", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  FUZZY_CONFIG = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "FUZZY_CONFIG", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  LOCALE = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "LOCALE", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  LOWERCASE_EXPANDED_TERMS = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "LOWERCASE_EXPANDED_TERMS", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  MULTI_FIELDS = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "MULTI_FIELDS", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  MULTI_TERM_REWRITE_METHOD = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "MULTI_TERM_REWRITE_METHOD", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  NUMERIC_CONFIG = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "NUMERIC_CONFIG", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  NUMERIC_CONFIG_MAP = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "NUMERIC_CONFIG_MAP", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  PHRASE_SLOP = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "PHRASE_SLOP", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  TIMEZONE = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "TIMEZONE", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardQueryConfigHandler$ConfigurationKeys::StandardQueryConfigHandler$ConfigurationKeys() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_StandardQueryConfigHandler$ConfigurationKeys_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryConfigHandler$ConfigurationKeys_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardQueryConfigHandler$ConfigurationKeys_init_(t_StandardQueryConfigHandler$ConfigurationKeys *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_StandardQueryConfigHandler$ConfigurationKeys__methods_[] = {
                DECLARE_METHOD(t_StandardQueryConfigHandler$ConfigurationKeys, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryConfigHandler$ConfigurationKeys, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardQueryConfigHandler$ConfigurationKeys, t_StandardQueryConfigHandler$ConfigurationKeys, ::java::lang::Object, StandardQueryConfigHandler$ConfigurationKeys, t_StandardQueryConfigHandler$ConfigurationKeys_init_, 0, 0, 0, 0, 0);

              void t_StandardQueryConfigHandler$ConfigurationKeys::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys), module, "StandardQueryConfigHandler$ConfigurationKeys", 0);
              }

              void t_StandardQueryConfigHandler$ConfigurationKeys::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "class_", make_descriptor(StandardQueryConfigHandler$ConfigurationKeys::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "wrapfn_", make_descriptor(t_StandardQueryConfigHandler$ConfigurationKeys::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(StandardQueryConfigHandler$ConfigurationKeys::initializeClass);
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "ALLOW_LEADING_WILDCARD", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::ALLOW_LEADING_WILDCARD)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "ANALYZER", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::ANALYZER)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "BOOST", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::BOOST)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "DATE_RESOLUTION", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::DATE_RESOLUTION)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "DEFAULT_OPERATOR", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::DEFAULT_OPERATOR)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "ENABLE_POSITION_INCREMENTS", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::ENABLE_POSITION_INCREMENTS)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "FIELD_BOOST_MAP", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::FIELD_BOOST_MAP)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "FIELD_DATE_RESOLUTION_MAP", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::FIELD_DATE_RESOLUTION_MAP)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "FUZZY_CONFIG", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::FUZZY_CONFIG)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "LOCALE", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::LOCALE)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "LOWERCASE_EXPANDED_TERMS", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::LOWERCASE_EXPANDED_TERMS)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "MULTI_FIELDS", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::MULTI_FIELDS)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "MULTI_TERM_REWRITE_METHOD", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::MULTI_TERM_REWRITE_METHOD)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "NUMERIC_CONFIG", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::NUMERIC_CONFIG)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "NUMERIC_CONFIG_MAP", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::NUMERIC_CONFIG_MAP)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "PHRASE_SLOP", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::PHRASE_SLOP)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "TIMEZONE", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::TIMEZONE)));
              }

              static PyObject *t_StandardQueryConfigHandler$ConfigurationKeys_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryConfigHandler$ConfigurationKeys::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryConfigHandler$ConfigurationKeys::wrap_Object(StandardQueryConfigHandler$ConfigurationKeys(((t_StandardQueryConfigHandler$ConfigurationKeys *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryConfigHandler$ConfigurationKeys_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryConfigHandler$ConfigurationKeys::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardQueryConfigHandler$ConfigurationKeys_init_(t_StandardQueryConfigHandler$ConfigurationKeys *self, PyObject *args, PyObject *kwds)
              {
                StandardQueryConfigHandler$ConfigurationKeys object((jobject) NULL);

                INT_CALL(object = StandardQueryConfigHandler$ConfigurationKeys());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/store/PythonIndexInput.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {

        ::java::lang::Class *PythonIndexInput::class$ = NULL;
        jmethodID *PythonIndexInput::mids$ = NULL;
        bool PythonIndexInput::live$ = false;

        jclass PythonIndexInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/store/PythonIndexInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_501c6f1c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
            mids$[mid_clone_f5aaa2d0] = env->getMethodID(cls, "clone", "()Lorg/apache/pylucene/store/PythonIndexInput;");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_length_54c6a17a] = env->getMethodID(cls, "length", "()J");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_readInternal_e1cb0133] = env->getMethodID(cls, "readInternal", "(IJ)[B");
            mids$[mid_seekInternal_0ee6df2f] = env->getMethodID(cls, "seekInternal", "(J)V");
            mids$[mid_readInternal_86f4435f] = env->getMethodID(cls, "readInternal", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonIndexInput::PythonIndexInput(const ::java::lang::String & a0) : ::org::apache::lucene::store::BufferedIndexInput(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        PythonIndexInput::PythonIndexInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) : ::org::apache::lucene::store::BufferedIndexInput(env->newObject(initializeClass, &mids$, mid_init$_501c6f1c, a0.this$, a1.this$)) {}

        PythonIndexInput::PythonIndexInput(const ::java::lang::String & a0, jint a1) : ::org::apache::lucene::store::BufferedIndexInput(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

        PythonIndexInput PythonIndexInput::clone() const
        {
          return PythonIndexInput(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::store::BufferedIndexInput::class$->this$, ::org::apache::lucene::store::BufferedIndexInput::mids$[::org::apache::lucene::store::BufferedIndexInput::mid_clone_c014db58]));
        }

        void PythonIndexInput::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonIndexInput::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonIndexInput::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {
        static PyObject *t_PythonIndexInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonIndexInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonIndexInput_init_(t_PythonIndexInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonIndexInput_clone(t_PythonIndexInput *self, PyObject *arg);
        static PyObject *t_PythonIndexInput_finalize(t_PythonIndexInput *self);
        static PyObject *t_PythonIndexInput_pythonExtension(t_PythonIndexInput *self, PyObject *args);
        static jobject JNICALL t_PythonIndexInput_clone0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonIndexInput_close1(JNIEnv *jenv, jobject jobj);
        static jlong JNICALL t_PythonIndexInput_length2(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonIndexInput_pythonDecRef3(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonIndexInput_readInternal4(JNIEnv *jenv, jobject jobj, jint a0, jlong a1);
        static void JNICALL t_PythonIndexInput_seekInternal5(JNIEnv *jenv, jobject jobj, jlong a0);
        static PyObject *t_PythonIndexInput_get__self(t_PythonIndexInput *self, void *data);
        static PyGetSetDef t_PythonIndexInput__fields_[] = {
          DECLARE_GET_FIELD(t_PythonIndexInput, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonIndexInput__methods_[] = {
          DECLARE_METHOD(t_PythonIndexInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexInput, clone, METH_O),
          DECLARE_METHOD(t_PythonIndexInput, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonIndexInput, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonIndexInput, t_PythonIndexInput, ::org::apache::lucene::store::BufferedIndexInput, PythonIndexInput, t_PythonIndexInput_init_, 0, 0, t_PythonIndexInput__fields_, 0, 0);

        void t_PythonIndexInput::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonIndexInput), module, "PythonIndexInput", 1);
        }

        void t_PythonIndexInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonIndexInput).tp_dict, "class_", make_descriptor(PythonIndexInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonIndexInput).tp_dict, "wrapfn_", make_descriptor(t_PythonIndexInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonIndexInput).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonIndexInput::initializeClass);
          JNINativeMethod methods[] = {
            { "clone", "()Lorg/apache/pylucene/store/PythonIndexInput;", (void *) t_PythonIndexInput_clone0 },
            { "close", "()V", (void *) t_PythonIndexInput_close1 },
            { "length", "()J", (void *) t_PythonIndexInput_length2 },
            { "pythonDecRef", "()V", (void *) t_PythonIndexInput_pythonDecRef3 },
            { "readInternal", "(IJ)[B", (void *) t_PythonIndexInput_readInternal4 },
            { "seekInternal", "(J)V", (void *) t_PythonIndexInput_seekInternal5 },
          };
          env->registerNatives(cls, methods, 6);
        }

        static PyObject *t_PythonIndexInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonIndexInput::initializeClass, 1)))
            return NULL;
          return t_PythonIndexInput::wrap_Object(PythonIndexInput(((t_PythonIndexInput *) arg)->object.this$));
        }
        static PyObject *t_PythonIndexInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonIndexInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonIndexInput_init_(t_PythonIndexInput *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              PythonIndexInput object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = PythonIndexInput(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::store::IOContext a1((jobject) NULL);
              PythonIndexInput object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
              {
                INT_CALL(object = PythonIndexInput(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              PythonIndexInput object((jobject) NULL);

              if (!parseArgs(args, "sI", &a0, &a1))
              {
                INT_CALL(object = PythonIndexInput(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonIndexInput_clone(t_PythonIndexInput *self, PyObject *arg)
        {
          PythonIndexInput result((jobject) NULL);

          if (arg)
          {
            OBJ_CALL(result = self->object.clone());

            PythonIndexInput object(result.this$);
            if (PyObject_TypeCheck(arg, &PY_TYPE(FinalizerProxy)) &&
                PyObject_TypeCheck(((t_fp *) arg)->object, self->ob_type))
            {
              PyObject *_arg = ((t_fp *) arg)->object;
              ((t_JObject *) _arg)->object = object;
              Py_INCREF(_arg);
              object.pythonExtension((jlong) (Py_intptr_t) (void *) _arg);
              Py_INCREF(arg);
              return arg;
            }
            return PyErr_SetArgsError("clone", arg);
          }

          return callSuper(&PY_TYPE(PythonIndexInput), (PyObject *) self, "clone", arg, 1);
        }

        static PyObject *t_PythonIndexInput_finalize(t_PythonIndexInput *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonIndexInput_pythonExtension(t_PythonIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jobject JNICALL t_PythonIndexInput_clone0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PythonIndexInput value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "clone", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", PythonIndexInput::initializeClass, &value))
          {
            throwTypeError("clone", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonIndexInput_close1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "close", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jlong JNICALL t_PythonIndexInput_length2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jlong value;
          PyObject *result = PyObject_CallMethod(obj, "length", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "J", &value))
          {
            throwTypeError("length", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jlong) 0;
        }

        static void JNICALL t_PythonIndexInput_pythonDecRef3(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonIndexInput_readInternal4(JNIEnv *jenv, jobject jobj, jint a0, jlong a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          JArray< jbyte > value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "readInternal", "iL", (int) a0, (long long) a1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "[B", &value))
          {
            throwTypeError("readInternal", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonIndexInput_seekInternal5(JNIEnv *jenv, jobject jobj, jlong a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "seekInternal", "L", (long long) a0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static PyObject *t_PythonIndexInput_get__self(t_PythonIndexInput *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Gener.h"
#include "org/egothor/stemmer/Row.h"
#include "org/egothor/stemmer/Trie.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Gener::class$ = NULL;
      jmethodID *Gener::mids$ = NULL;
      bool Gener::live$ = false;

      jclass Gener::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Gener");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_eat_9f3e69e2] = env->getMethodID(cls, "eat", "(Lorg/egothor/stemmer/Row;[I)Z");
          mids$[mid_optimize_c26c0475] = env->getMethodID(cls, "optimize", "(Lorg/egothor/stemmer/Trie;)Lorg/egothor/stemmer/Trie;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Gener::Gener() : ::org::egothor::stemmer::Reduce(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      jboolean Gener::eat(const ::org::egothor::stemmer::Row & a0, const JArray< jint > & a1) const
      {
        return env->callBooleanMethod(this$, mids$[mid_eat_9f3e69e2], a0.this$, a1.this$);
      }

      ::org::egothor::stemmer::Trie Gener::optimize(const ::org::egothor::stemmer::Trie & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_optimize_c26c0475], a0.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Gener_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Gener_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Gener_init_(t_Gener *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Gener_eat(t_Gener *self, PyObject *args);
      static PyObject *t_Gener_optimize(t_Gener *self, PyObject *args);

      static PyMethodDef t_Gener__methods_[] = {
        DECLARE_METHOD(t_Gener, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Gener, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Gener, eat, METH_VARARGS),
        DECLARE_METHOD(t_Gener, optimize, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Gener, t_Gener, ::org::egothor::stemmer::Reduce, Gener, t_Gener_init_, 0, 0, 0, 0, 0);

      void t_Gener::install(PyObject *module)
      {
        installType(&PY_TYPE(Gener), module, "Gener", 0);
      }

      void t_Gener::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Gener).tp_dict, "class_", make_descriptor(Gener::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Gener).tp_dict, "wrapfn_", make_descriptor(t_Gener::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Gener).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Gener_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Gener::initializeClass, 1)))
          return NULL;
        return t_Gener::wrap_Object(Gener(((t_Gener *) arg)->object.this$));
      }
      static PyObject *t_Gener_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Gener::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Gener_init_(t_Gener *self, PyObject *args, PyObject *kwds)
      {
        Gener object((jobject) NULL);

        INT_CALL(object = Gener());
        self->object = object;

        return 0;
      }

      static PyObject *t_Gener_eat(t_Gener *self, PyObject *args)
      {
        ::org::egothor::stemmer::Row a0((jobject) NULL);
        JArray< jint > a1((jobject) NULL);
        jboolean result;

        if (!parseArgs(args, "k[I", ::org::egothor::stemmer::Row::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.eat(a0, a1));
          Py_RETURN_BOOL(result);
        }

        PyErr_SetArgsError((PyObject *) self, "eat", args);
        return NULL;
      }

      static PyObject *t_Gener_optimize(t_Gener *self, PyObject *args)
      {
        ::org::egothor::stemmer::Trie a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArgs(args, "k", ::org::egothor::stemmer::Trie::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.optimize(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(Gener), (PyObject *) self, "optimize", args, 2);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntBlockPool$SliceWriter.h"
#include "org/apache/lucene/util/IntBlockPool.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntBlockPool$SliceWriter::class$ = NULL;
        jmethodID *IntBlockPool$SliceWriter::mids$ = NULL;
        bool IntBlockPool$SliceWriter::live$ = false;

        jclass IntBlockPool$SliceWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntBlockPool$SliceWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_67e0ad2c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/IntBlockPool;)V");
            mids$[mid_getCurrentOffset_54c6a179] = env->getMethodID(cls, "getCurrentOffset", "()I");
            mids$[mid_reset_39c7bd3c] = env->getMethodID(cls, "reset", "(I)V");
            mids$[mid_startNewSlice_54c6a179] = env->getMethodID(cls, "startNewSlice", "()I");
            mids$[mid_writeInt_39c7bd3c] = env->getMethodID(cls, "writeInt", "(I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntBlockPool$SliceWriter::IntBlockPool$SliceWriter(const ::org::apache::lucene::util::IntBlockPool & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_67e0ad2c, a0.this$)) {}

        jint IntBlockPool$SliceWriter::getCurrentOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_getCurrentOffset_54c6a179]);
        }

        void IntBlockPool$SliceWriter::reset(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_39c7bd3c], a0);
        }

        jint IntBlockPool$SliceWriter::startNewSlice() const
        {
          return env->callIntMethod(this$, mids$[mid_startNewSlice_54c6a179]);
        }

        void IntBlockPool$SliceWriter::writeInt(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeInt_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntBlockPool$SliceWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntBlockPool$SliceWriter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntBlockPool$SliceWriter_init_(t_IntBlockPool$SliceWriter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntBlockPool$SliceWriter_getCurrentOffset(t_IntBlockPool$SliceWriter *self);
        static PyObject *t_IntBlockPool$SliceWriter_reset(t_IntBlockPool$SliceWriter *self, PyObject *arg);
        static PyObject *t_IntBlockPool$SliceWriter_startNewSlice(t_IntBlockPool$SliceWriter *self);
        static PyObject *t_IntBlockPool$SliceWriter_writeInt(t_IntBlockPool$SliceWriter *self, PyObject *arg);
        static PyObject *t_IntBlockPool$SliceWriter_get__currentOffset(t_IntBlockPool$SliceWriter *self, void *data);
        static PyGetSetDef t_IntBlockPool$SliceWriter__fields_[] = {
          DECLARE_GET_FIELD(t_IntBlockPool$SliceWriter, currentOffset),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IntBlockPool$SliceWriter__methods_[] = {
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, getCurrentOffset, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, reset, METH_O),
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, startNewSlice, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, writeInt, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntBlockPool$SliceWriter, t_IntBlockPool$SliceWriter, ::java::lang::Object, IntBlockPool$SliceWriter, t_IntBlockPool$SliceWriter_init_, 0, 0, t_IntBlockPool$SliceWriter__fields_, 0, 0);

        void t_IntBlockPool$SliceWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(IntBlockPool$SliceWriter), module, "IntBlockPool$SliceWriter", 0);
        }

        void t_IntBlockPool$SliceWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntBlockPool$SliceWriter).tp_dict, "class_", make_descriptor(IntBlockPool$SliceWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$SliceWriter).tp_dict, "wrapfn_", make_descriptor(t_IntBlockPool$SliceWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$SliceWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntBlockPool$SliceWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntBlockPool$SliceWriter::initializeClass, 1)))
            return NULL;
          return t_IntBlockPool$SliceWriter::wrap_Object(IntBlockPool$SliceWriter(((t_IntBlockPool$SliceWriter *) arg)->object.this$));
        }
        static PyObject *t_IntBlockPool$SliceWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntBlockPool$SliceWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntBlockPool$SliceWriter_init_(t_IntBlockPool$SliceWriter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::IntBlockPool a0((jobject) NULL);
          IntBlockPool$SliceWriter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::IntBlockPool::initializeClass, &a0))
          {
            INT_CALL(object = IntBlockPool$SliceWriter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntBlockPool$SliceWriter_getCurrentOffset(t_IntBlockPool$SliceWriter *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getCurrentOffset());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IntBlockPool$SliceWriter_reset(t_IntBlockPool$SliceWriter *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.reset(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reset", arg);
          return NULL;
        }

        static PyObject *t_IntBlockPool$SliceWriter_startNewSlice(t_IntBlockPool$SliceWriter *self)
        {
          jint result;
          OBJ_CALL(result = self->object.startNewSlice());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IntBlockPool$SliceWriter_writeInt(t_IntBlockPool$SliceWriter *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.writeInt(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeInt", arg);
          return NULL;
        }

        static PyObject *t_IntBlockPool$SliceWriter_get__currentOffset(t_IntBlockPool$SliceWriter *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getCurrentOffset());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeepWordFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeepWordFilterFactory::class$ = NULL;
          jmethodID *KeepWordFilterFactory::mids$ = NULL;
          bool KeepWordFilterFactory::live$ = false;

          jclass KeepWordFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeepWordFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getWords_d2d3505c] = env->getMethodID(cls, "getWords", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_isEnablePositionIncrements_54c6a16a] = env->getMethodID(cls, "isEnablePositionIncrements", "()Z");
              mids$[mid_isIgnoreCase_54c6a16a] = env->getMethodID(cls, "isIgnoreCase", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeepWordFilterFactory::KeepWordFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream KeepWordFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet KeepWordFilterFactory::getWords() const
          {
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callObjectMethod(this$, mids$[mid_getWords_d2d3505c]));
          }

          void KeepWordFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }

          jboolean KeepWordFilterFactory::isEnablePositionIncrements() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isEnablePositionIncrements_54c6a16a]);
          }

          jboolean KeepWordFilterFactory::isIgnoreCase() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreCase_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeepWordFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeepWordFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeepWordFilterFactory_init_(t_KeepWordFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeepWordFilterFactory_create(t_KeepWordFilterFactory *self, PyObject *args);
          static PyObject *t_KeepWordFilterFactory_getWords(t_KeepWordFilterFactory *self);
          static PyObject *t_KeepWordFilterFactory_inform(t_KeepWordFilterFactory *self, PyObject *arg);
          static PyObject *t_KeepWordFilterFactory_isEnablePositionIncrements(t_KeepWordFilterFactory *self);
          static PyObject *t_KeepWordFilterFactory_isIgnoreCase(t_KeepWordFilterFactory *self);
          static PyObject *t_KeepWordFilterFactory_get__enablePositionIncrements(t_KeepWordFilterFactory *self, void *data);
          static PyObject *t_KeepWordFilterFactory_get__ignoreCase(t_KeepWordFilterFactory *self, void *data);
          static PyObject *t_KeepWordFilterFactory_get__words(t_KeepWordFilterFactory *self, void *data);
          static PyGetSetDef t_KeepWordFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_KeepWordFilterFactory, enablePositionIncrements),
            DECLARE_GET_FIELD(t_KeepWordFilterFactory, ignoreCase),
            DECLARE_GET_FIELD(t_KeepWordFilterFactory, words),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_KeepWordFilterFactory__methods_[] = {
            DECLARE_METHOD(t_KeepWordFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeepWordFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeepWordFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_KeepWordFilterFactory, getWords, METH_NOARGS),
            DECLARE_METHOD(t_KeepWordFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_KeepWordFilterFactory, isEnablePositionIncrements, METH_NOARGS),
            DECLARE_METHOD(t_KeepWordFilterFactory, isIgnoreCase, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeepWordFilterFactory, t_KeepWordFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, KeepWordFilterFactory, t_KeepWordFilterFactory_init_, 0, 0, t_KeepWordFilterFactory__fields_, 0, 0);

          void t_KeepWordFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(KeepWordFilterFactory), module, "KeepWordFilterFactory", 0);
          }

          void t_KeepWordFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeepWordFilterFactory).tp_dict, "class_", make_descriptor(KeepWordFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeepWordFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_KeepWordFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeepWordFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeepWordFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeepWordFilterFactory::initializeClass, 1)))
              return NULL;
            return t_KeepWordFilterFactory::wrap_Object(KeepWordFilterFactory(((t_KeepWordFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_KeepWordFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeepWordFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeepWordFilterFactory_init_(t_KeepWordFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            KeepWordFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = KeepWordFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeepWordFilterFactory_create(t_KeepWordFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(KeepWordFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_KeepWordFilterFactory_getWords(t_KeepWordFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = self->object.getWords());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_KeepWordFilterFactory_inform(t_KeepWordFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_KeepWordFilterFactory_isEnablePositionIncrements(t_KeepWordFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isEnablePositionIncrements());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_KeepWordFilterFactory_isIgnoreCase(t_KeepWordFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreCase());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_KeepWordFilterFactory_get__enablePositionIncrements(t_KeepWordFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isEnablePositionIncrements());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_KeepWordFilterFactory_get__ignoreCase(t_KeepWordFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreCase());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_KeepWordFilterFactory_get__words(t_KeepWordFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getWords());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LimitTokenPositionFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LimitTokenPositionFilter::class$ = NULL;
          jmethodID *LimitTokenPositionFilter::mids$ = NULL;
          bool LimitTokenPositionFilter::live$ = false;

          jclass LimitTokenPositionFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LimitTokenPositionFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_init$_4f7f61d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;IZ)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LimitTokenPositionFilter::LimitTokenPositionFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          LimitTokenPositionFilter::LimitTokenPositionFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_4f7f61d3, a0.this$, a1, a2)) {}

          jboolean LimitTokenPositionFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void LimitTokenPositionFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LimitTokenPositionFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LimitTokenPositionFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LimitTokenPositionFilter_init_(t_LimitTokenPositionFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LimitTokenPositionFilter_incrementToken(t_LimitTokenPositionFilter *self, PyObject *args);
          static PyObject *t_LimitTokenPositionFilter_reset(t_LimitTokenPositionFilter *self, PyObject *args);

          static PyMethodDef t_LimitTokenPositionFilter__methods_[] = {
            DECLARE_METHOD(t_LimitTokenPositionFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenPositionFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenPositionFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_LimitTokenPositionFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LimitTokenPositionFilter, t_LimitTokenPositionFilter, ::org::apache::lucene::analysis::TokenFilter, LimitTokenPositionFilter, t_LimitTokenPositionFilter_init_, 0, 0, 0, 0, 0);

          void t_LimitTokenPositionFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(LimitTokenPositionFilter), module, "LimitTokenPositionFilter", 0);
          }

          void t_LimitTokenPositionFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilter).tp_dict, "class_", make_descriptor(LimitTokenPositionFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilter).tp_dict, "wrapfn_", make_descriptor(t_LimitTokenPositionFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LimitTokenPositionFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LimitTokenPositionFilter::initializeClass, 1)))
              return NULL;
            return t_LimitTokenPositionFilter::wrap_Object(LimitTokenPositionFilter(((t_LimitTokenPositionFilter *) arg)->object.this$));
          }
          static PyObject *t_LimitTokenPositionFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LimitTokenPositionFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LimitTokenPositionFilter_init_(t_LimitTokenPositionFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                LimitTokenPositionFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LimitTokenPositionFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                jboolean a2;
                LimitTokenPositionFilter object((jobject) NULL);

                if (!parseArgs(args, "kIZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = LimitTokenPositionFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LimitTokenPositionFilter_incrementToken(t_LimitTokenPositionFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(LimitTokenPositionFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_LimitTokenPositionFilter_reset(t_LimitTokenPositionFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(LimitTokenPositionFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/DFRSimilarity.h"
#include "org/apache/lucene/search/similarities/BasicModel.h"
#include "org/apache/lucene/search/similarities/Normalization.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/AfterEffect.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *DFRSimilarity::class$ = NULL;
          jmethodID *DFRSimilarity::mids$ = NULL;
          bool DFRSimilarity::live$ = false;

          jclass DFRSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/DFRSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0c253c94] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/BasicModel;Lorg/apache/lucene/search/similarities/AfterEffect;Lorg/apache/lucene/search/similarities/Normalization;)V");
              mids$[mid_getAfterEffect_b58cd920] = env->getMethodID(cls, "getAfterEffect", "()Lorg/apache/lucene/search/similarities/AfterEffect;");
              mids$[mid_getBasicModel_05e8921f] = env->getMethodID(cls, "getBasicModel", "()Lorg/apache/lucene/search/similarities/BasicModel;");
              mids$[mid_getNormalization_d2e76e28] = env->getMethodID(cls, "getNormalization", "()Lorg/apache/lucene/search/similarities/Normalization;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_explain_347d95f8] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Explanation;Lorg/apache/lucene/search/similarities/BasicStats;IFF)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DFRSimilarity::DFRSimilarity(const ::org::apache::lucene::search::similarities::BasicModel & a0, const ::org::apache::lucene::search::similarities::AfterEffect & a1, const ::org::apache::lucene::search::similarities::Normalization & a2) : ::org::apache::lucene::search::similarities::SimilarityBase(env->newObject(initializeClass, &mids$, mid_init$_0c253c94, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::similarities::AfterEffect DFRSimilarity::getAfterEffect() const
          {
            return ::org::apache::lucene::search::similarities::AfterEffect(env->callObjectMethod(this$, mids$[mid_getAfterEffect_b58cd920]));
          }

          ::org::apache::lucene::search::similarities::BasicModel DFRSimilarity::getBasicModel() const
          {
            return ::org::apache::lucene::search::similarities::BasicModel(env->callObjectMethod(this$, mids$[mid_getBasicModel_05e8921f]));
          }

          ::org::apache::lucene::search::similarities::Normalization DFRSimilarity::getNormalization() const
          {
            return ::org::apache::lucene::search::similarities::Normalization(env->callObjectMethod(this$, mids$[mid_getNormalization_d2e76e28]));
          }

          ::java::lang::String DFRSimilarity::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_DFRSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DFRSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DFRSimilarity_init_(t_DFRSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DFRSimilarity_getAfterEffect(t_DFRSimilarity *self);
          static PyObject *t_DFRSimilarity_getBasicModel(t_DFRSimilarity *self);
          static PyObject *t_DFRSimilarity_getNormalization(t_DFRSimilarity *self);
          static PyObject *t_DFRSimilarity_toString(t_DFRSimilarity *self, PyObject *args);
          static PyObject *t_DFRSimilarity_get__afterEffect(t_DFRSimilarity *self, void *data);
          static PyObject *t_DFRSimilarity_get__basicModel(t_DFRSimilarity *self, void *data);
          static PyObject *t_DFRSimilarity_get__normalization(t_DFRSimilarity *self, void *data);
          static PyGetSetDef t_DFRSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_DFRSimilarity, afterEffect),
            DECLARE_GET_FIELD(t_DFRSimilarity, basicModel),
            DECLARE_GET_FIELD(t_DFRSimilarity, normalization),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DFRSimilarity__methods_[] = {
            DECLARE_METHOD(t_DFRSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DFRSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DFRSimilarity, getAfterEffect, METH_NOARGS),
            DECLARE_METHOD(t_DFRSimilarity, getBasicModel, METH_NOARGS),
            DECLARE_METHOD(t_DFRSimilarity, getNormalization, METH_NOARGS),
            DECLARE_METHOD(t_DFRSimilarity, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DFRSimilarity, t_DFRSimilarity, ::org::apache::lucene::search::similarities::SimilarityBase, DFRSimilarity, t_DFRSimilarity_init_, 0, 0, t_DFRSimilarity__fields_, 0, 0);

          void t_DFRSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(DFRSimilarity), module, "DFRSimilarity", 0);
          }

          void t_DFRSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DFRSimilarity).tp_dict, "class_", make_descriptor(DFRSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DFRSimilarity).tp_dict, "wrapfn_", make_descriptor(t_DFRSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DFRSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DFRSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DFRSimilarity::initializeClass, 1)))
              return NULL;
            return t_DFRSimilarity::wrap_Object(DFRSimilarity(((t_DFRSimilarity *) arg)->object.this$));
          }
          static PyObject *t_DFRSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DFRSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DFRSimilarity_init_(t_DFRSimilarity *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::similarities::BasicModel a0((jobject) NULL);
            ::org::apache::lucene::search::similarities::AfterEffect a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Normalization a2((jobject) NULL);
            DFRSimilarity object((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::search::similarities::BasicModel::initializeClass, ::org::apache::lucene::search::similarities::AfterEffect::initializeClass, ::org::apache::lucene::search::similarities::Normalization::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = DFRSimilarity(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DFRSimilarity_getAfterEffect(t_DFRSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::AfterEffect result((jobject) NULL);
            OBJ_CALL(result = self->object.getAfterEffect());
            return ::org::apache::lucene::search::similarities::t_AfterEffect::wrap_Object(result);
          }

          static PyObject *t_DFRSimilarity_getBasicModel(t_DFRSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::BasicModel result((jobject) NULL);
            OBJ_CALL(result = self->object.getBasicModel());
            return ::org::apache::lucene::search::similarities::t_BasicModel::wrap_Object(result);
          }

          static PyObject *t_DFRSimilarity_getNormalization(t_DFRSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::Normalization result((jobject) NULL);
            OBJ_CALL(result = self->object.getNormalization());
            return ::org::apache::lucene::search::similarities::t_Normalization::wrap_Object(result);
          }

          static PyObject *t_DFRSimilarity_toString(t_DFRSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DFRSimilarity), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_DFRSimilarity_get__afterEffect(t_DFRSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::AfterEffect value((jobject) NULL);
            OBJ_CALL(value = self->object.getAfterEffect());
            return ::org::apache::lucene::search::similarities::t_AfterEffect::wrap_Object(value);
          }

          static PyObject *t_DFRSimilarity_get__basicModel(t_DFRSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::BasicModel value((jobject) NULL);
            OBJ_CALL(value = self->object.getBasicModel());
            return ::org::apache::lucene::search::similarities::t_BasicModel::wrap_Object(value);
          }

          static PyObject *t_DFRSimilarity_get__normalization(t_DFRSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::Normalization value((jobject) NULL);
            OBJ_CALL(value = self->object.getNormalization());
            return ::org::apache::lucene::search::similarities::t_Normalization::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilterFactory.h"
#include "org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ScandinavianNormalizationFilterFactory::class$ = NULL;
          jmethodID *ScandinavianNormalizationFilterFactory::mids$ = NULL;
          bool ScandinavianNormalizationFilterFactory::live$ = false;

          jclass ScandinavianNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_c49b1257] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScandinavianNormalizationFilterFactory::ScandinavianNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::ScandinavianNormalizationFilter ScandinavianNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::ScandinavianNormalizationFilter(env->callObjectMethod(this$, mids$[mid_create_c49b1257], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ScandinavianNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScandinavianNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScandinavianNormalizationFilterFactory_init_(t_ScandinavianNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScandinavianNormalizationFilterFactory_create(t_ScandinavianNormalizationFilterFactory *self, PyObject *args);

          static PyMethodDef t_ScandinavianNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ScandinavianNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianNormalizationFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ScandinavianNormalizationFilterFactory, t_ScandinavianNormalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ScandinavianNormalizationFilterFactory, t_ScandinavianNormalizationFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ScandinavianNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ScandinavianNormalizationFilterFactory), module, "ScandinavianNormalizationFilterFactory", 0);
          }

          void t_ScandinavianNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ScandinavianNormalizationFilterFactory).tp_dict, "class_", make_descriptor(ScandinavianNormalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ScandinavianNormalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ScandinavianNormalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ScandinavianNormalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ScandinavianNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScandinavianNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ScandinavianNormalizationFilterFactory::wrap_Object(ScandinavianNormalizationFilterFactory(((t_ScandinavianNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ScandinavianNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScandinavianNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScandinavianNormalizationFilterFactory_init_(t_ScandinavianNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ScandinavianNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ScandinavianNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ScandinavianNormalizationFilterFactory_create(t_ScandinavianNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::ScandinavianNormalizationFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_ScandinavianNormalizationFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ScandinavianNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/NorwegianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *NorwegianStemmer::class$ = NULL;
        jmethodID *NorwegianStemmer::mids$ = NULL;
        bool NorwegianStemmer::live$ = false;

        jclass NorwegianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/NorwegianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NorwegianStemmer::NorwegianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean NorwegianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint NorwegianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean NorwegianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_NorwegianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NorwegianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NorwegianStemmer_init_(t_NorwegianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NorwegianStemmer_equals(t_NorwegianStemmer *self, PyObject *args);
        static PyObject *t_NorwegianStemmer_hashCode(t_NorwegianStemmer *self, PyObject *args);
        static PyObject *t_NorwegianStemmer_stem(t_NorwegianStemmer *self, PyObject *args);

        static PyMethodDef t_NorwegianStemmer__methods_[] = {
          DECLARE_METHOD(t_NorwegianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NorwegianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NorwegianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_NorwegianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_NorwegianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NorwegianStemmer, t_NorwegianStemmer, ::org::tartarus::snowball::SnowballProgram, NorwegianStemmer, t_NorwegianStemmer_init_, 0, 0, 0, 0, 0);

        void t_NorwegianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(NorwegianStemmer), module, "NorwegianStemmer", 0);
        }

        void t_NorwegianStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NorwegianStemmer).tp_dict, "class_", make_descriptor(NorwegianStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NorwegianStemmer).tp_dict, "wrapfn_", make_descriptor(t_NorwegianStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NorwegianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NorwegianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NorwegianStemmer::initializeClass, 1)))
            return NULL;
          return t_NorwegianStemmer::wrap_Object(NorwegianStemmer(((t_NorwegianStemmer *) arg)->object.this$));
        }
        static PyObject *t_NorwegianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NorwegianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NorwegianStemmer_init_(t_NorwegianStemmer *self, PyObject *args, PyObject *kwds)
        {
          NorwegianStemmer object((jobject) NULL);

          INT_CALL(object = NorwegianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_NorwegianStemmer_equals(t_NorwegianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(NorwegianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_NorwegianStemmer_hashCode(t_NorwegianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(NorwegianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_NorwegianStemmer_stem(t_NorwegianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(NorwegianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::class$ = NULL;
        jmethodID *MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::mids$ = NULL;
        bool MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::live$ = false;

        jclass MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_getMaxSize_54c6a179] = env->getMethodID(cls, "getMaxSize", "()I");
            mids$[mid_addClause_82a56efb] = env->getMethodID(cls, "addClause", "(Lorg/apache/lucene/search/BooleanQuery;Lorg/apache/lucene/index/Term;IFLorg/apache/lucene/index/TermContext;)V");
            mids$[mid_getTopLevelQuery_6f9339e7] = env->getMethodID(cls, "getTopLevelQuery", "()Lorg/apache/lucene/search/BooleanQuery;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite(jint a0) : ::org::apache::lucene::search::TopTermsRewrite(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_of_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, PyObject *args);
        static int t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_init_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_get__parameters_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, void *data);
        static PyGetSetDef t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite__methods_[] = {
          DECLARE_METHOD(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, ::org::apache::lucene::search::TopTermsRewrite, MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_init_, 0, 0, t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite__fields_, 0, 0);
        PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_Object(const MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self = (t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self = (t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite), module, "MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite", 0);
        }

        void t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite).tp_dict, "class_", make_descriptor(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite).tp_dict, "wrapfn_", make_descriptor(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::initializeClass, 1)))
            return NULL;
          return t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_Object(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite(((t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *) arg)->object.this$));
        }
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_of_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_init_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite(a0));
            self->object = object;
            self->parameters[0] = &::org::apache::lucene::search::PY_TYPE(BooleanQuery);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_get__parameters_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/TimSorter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *TimSorter::class$ = NULL;
        jmethodID *TimSorter::mids$ = NULL;
        bool TimSorter::live$ = false;

        jclass TimSorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/TimSorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_sort_d8d154a6] = env->getMethodID(cls, "sort", "(II)V");
            mids$[mid_save_d8d154a6] = env->getMethodID(cls, "save", "(II)V");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_restore_d8d154a6] = env->getMethodID(cls, "restore", "(II)V");
            mids$[mid_compareSaved_d8d154b9] = env->getMethodID(cls, "compareSaved", "(II)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TimSorter::sort(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_sort_d8d154a6], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_TimSorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimSorter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimSorter_sort(t_TimSorter *self, PyObject *args);

        static PyMethodDef t_TimSorter__methods_[] = {
          DECLARE_METHOD(t_TimSorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimSorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimSorter, sort, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TimSorter, t_TimSorter, ::org::apache::lucene::util::Sorter, TimSorter, abstract_init, 0, 0, 0, 0, 0);

        void t_TimSorter::install(PyObject *module)
        {
          installType(&PY_TYPE(TimSorter), module, "TimSorter", 0);
        }

        void t_TimSorter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TimSorter).tp_dict, "class_", make_descriptor(TimSorter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TimSorter).tp_dict, "wrapfn_", make_descriptor(t_TimSorter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TimSorter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TimSorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TimSorter::initializeClass, 1)))
            return NULL;
          return t_TimSorter::wrap_Object(TimSorter(((t_TimSorter *) arg)->object.this$));
        }
        static PyObject *t_TimSorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TimSorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TimSorter_sort(t_TimSorter *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.sort(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TimSorter), (PyObject *) self, "sort", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/DocumentValueSourceDictionary.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *DocumentValueSourceDictionary::class$ = NULL;
          jmethodID *DocumentValueSourceDictionary::mids$ = NULL;
          bool DocumentValueSourceDictionary::live$ = false;

          jclass DocumentValueSourceDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/DocumentValueSourceDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_11b82207] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queries/function/ValueSource;)V");
              mids$[mid_init$_c3072aa9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queries/function/ValueSource;Ljava/lang/String;)V");
              mids$[mid_init$_8f8f3fa3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queries/function/ValueSource;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_getEntryIterator_23dc46b1] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DocumentValueSourceDictionary::DocumentValueSourceDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queries::function::ValueSource & a2) : ::org::apache::lucene::search::suggest::DocumentDictionary(env->newObject(initializeClass, &mids$, mid_init$_11b82207, a0.this$, a1.this$, a2.this$)) {}

          DocumentValueSourceDictionary::DocumentValueSourceDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queries::function::ValueSource & a2, const ::java::lang::String & a3) : ::org::apache::lucene::search::suggest::DocumentDictionary(env->newObject(initializeClass, &mids$, mid_init$_c3072aa9, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          DocumentValueSourceDictionary::DocumentValueSourceDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queries::function::ValueSource & a2, const ::java::lang::String & a3, const ::java::lang::String & a4) : ::org::apache::lucene::search::suggest::DocumentDictionary(env->newObject(initializeClass, &mids$, mid_init$_8f8f3fa3, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

          ::org::apache::lucene::search::suggest::InputIterator DocumentValueSourceDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_23dc46b1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_DocumentValueSourceDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DocumentValueSourceDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DocumentValueSourceDictionary_init_(t_DocumentValueSourceDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DocumentValueSourceDictionary_getEntryIterator(t_DocumentValueSourceDictionary *self, PyObject *args);
          static PyObject *t_DocumentValueSourceDictionary_get__entryIterator(t_DocumentValueSourceDictionary *self, void *data);
          static PyGetSetDef t_DocumentValueSourceDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_DocumentValueSourceDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DocumentValueSourceDictionary__methods_[] = {
            DECLARE_METHOD(t_DocumentValueSourceDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocumentValueSourceDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocumentValueSourceDictionary, getEntryIterator, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DocumentValueSourceDictionary, t_DocumentValueSourceDictionary, ::org::apache::lucene::search::suggest::DocumentDictionary, DocumentValueSourceDictionary, t_DocumentValueSourceDictionary_init_, 0, 0, t_DocumentValueSourceDictionary__fields_, 0, 0);

          void t_DocumentValueSourceDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(DocumentValueSourceDictionary), module, "DocumentValueSourceDictionary", 0);
          }

          void t_DocumentValueSourceDictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DocumentValueSourceDictionary).tp_dict, "class_", make_descriptor(DocumentValueSourceDictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DocumentValueSourceDictionary).tp_dict, "wrapfn_", make_descriptor(t_DocumentValueSourceDictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DocumentValueSourceDictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DocumentValueSourceDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DocumentValueSourceDictionary::initializeClass, 1)))
              return NULL;
            return t_DocumentValueSourceDictionary::wrap_Object(DocumentValueSourceDictionary(((t_DocumentValueSourceDictionary *) arg)->object.this$));
          }
          static PyObject *t_DocumentValueSourceDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DocumentValueSourceDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DocumentValueSourceDictionary_init_(t_DocumentValueSourceDictionary *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a2((jobject) NULL);
                DocumentValueSourceDictionary object((jobject) NULL);

                if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = DocumentValueSourceDictionary(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                DocumentValueSourceDictionary object((jobject) NULL);

                if (!parseArgs(args, "ksks", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = DocumentValueSourceDictionary(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                ::java::lang::String a4((jobject) NULL);
                DocumentValueSourceDictionary object((jobject) NULL);

                if (!parseArgs(args, "kskss", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = DocumentValueSourceDictionary(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DocumentValueSourceDictionary_getEntryIterator(t_DocumentValueSourceDictionary *self, PyObject *args)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getEntryIterator());
              return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DocumentValueSourceDictionary), (PyObject *) self, "getEntryIterator", args, 2);
          }

          static PyObject *t_DocumentValueSourceDictionary_get__entryIterator(t_DocumentValueSourceDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonSet.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/lang/Throwable.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonSet::class$ = NULL;
        jmethodID *PythonSet::mids$ = NULL;
        bool PythonSet::live$ = false;

        jclass PythonSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
            mids$[mid_addAll_9bfb3701] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
            mids$[mid_containsAll_9bfb3701] = env->getMethodID(cls, "containsAll", "(Ljava/util/Collection;)Z");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
            mids$[mid_removeAll_9bfb3701] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");
            mids$[mid_retainAll_9bfb3701] = env->getMethodID(cls, "retainAll", "(Ljava/util/Collection;)Z");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_toArray_94e49c77] = env->getMethodID(cls, "toArray", "()[Ljava/lang/Object;");
            mids$[mid_toArray_ae67dbcf] = env->getMethodID(cls, "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonSet::PythonSet() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean PythonSet::equals(const ::java::lang::Object & a0) const
        {
          return env->callNonvirtualBooleanMethod(this$, (jclass) ::java::lang::Object::class$->this$, ::java::lang::Object::mids$[::java::lang::Object::mid_equals_290588e2], a0.this$);
        }

        void PythonSet::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonSet::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonSet::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }

        JArray< ::java::lang::Object > PythonSet::toArray(const JArray< ::java::lang::Object > & a0) const
        {
          return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_ae67dbcf], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonSet_init_(t_PythonSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonSet_equals(t_PythonSet *self, PyObject *args);
        static PyObject *t_PythonSet_finalize(t_PythonSet *self);
        static PyObject *t_PythonSet_pythonExtension(t_PythonSet *self, PyObject *args);
        static PyObject *t_PythonSet_toArray(t_PythonSet *self, PyObject *arg);
        static jboolean JNICALL t_PythonSet_add0(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_addAll1(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonSet_clear2(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonSet_contains3(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_containsAll4(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_equals5(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_isEmpty6(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonSet_iterator7(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonSet_pythonDecRef8(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonSet_remove9(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_removeAll10(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_retainAll11(JNIEnv *jenv, jobject jobj, jobject a0);
        static jint JNICALL t_PythonSet_size12(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonSet_toArray13(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonSet_get__self(t_PythonSet *self, void *data);
        static PyGetSetDef t_PythonSet__fields_[] = {
          DECLARE_GET_FIELD(t_PythonSet, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonSet__methods_[] = {
          DECLARE_METHOD(t_PythonSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonSet, equals, METH_VARARGS),
          DECLARE_METHOD(t_PythonSet, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonSet, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonSet, toArray, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonSet, t_PythonSet, ::java::lang::Object, PythonSet, t_PythonSet_init_, get_extension_iterator, 0, t_PythonSet__fields_, 0, 0);

        void t_PythonSet::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonSet), module, "PythonSet", 1);
        }

        void t_PythonSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonSet).tp_dict, "class_", make_descriptor(PythonSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonSet).tp_dict, "wrapfn_", make_descriptor(t_PythonSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonSet).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonSet::initializeClass);
          JNINativeMethod methods[] = {
            { "add", "(Ljava/lang/Object;)Z", (void *) t_PythonSet_add0 },
            { "addAll", "(Ljava/util/Collection;)Z", (void *) t_PythonSet_addAll1 },
            { "clear", "()V", (void *) t_PythonSet_clear2 },
            { "contains", "(Ljava/lang/Object;)Z", (void *) t_PythonSet_contains3 },
            { "containsAll", "(Ljava/util/Collection;)Z", (void *) t_PythonSet_containsAll4 },
            { "equals", "(Ljava/lang/Object;)Z", (void *) t_PythonSet_equals5 },
            { "isEmpty", "()Z", (void *) t_PythonSet_isEmpty6 },
            { "iterator", "()Ljava/util/Iterator;", (void *) t_PythonSet_iterator7 },
            { "pythonDecRef", "()V", (void *) t_PythonSet_pythonDecRef8 },
            { "remove", "(Ljava/lang/Object;)Z", (void *) t_PythonSet_remove9 },
            { "removeAll", "(Ljava/util/Collection;)Z", (void *) t_PythonSet_removeAll10 },
            { "retainAll", "(Ljava/util/Collection;)Z", (void *) t_PythonSet_retainAll11 },
            { "size", "()I", (void *) t_PythonSet_size12 },
            { "toArray", "()[Ljava/lang/Object;", (void *) t_PythonSet_toArray13 },
          };
          env->registerNatives(cls, methods, 14);
        }

        static PyObject *t_PythonSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonSet::initializeClass, 1)))
            return NULL;
          return t_PythonSet::wrap_Object(PythonSet(((t_PythonSet *) arg)->object.this$));
        }
        static PyObject *t_PythonSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonSet_init_(t_PythonSet *self, PyObject *args, PyObject *kwds)
        {
          PythonSet object((jobject) NULL);

          INT_CALL(object = PythonSet());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonSet_equals(t_PythonSet *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PythonSet), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PythonSet_finalize(t_PythonSet *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonSet_pythonExtension(t_PythonSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonSet_toArray(t_PythonSet *self, PyObject *arg)
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArg(arg, "[o", &a0))
          {
            OBJ_CALL(result = self->object.toArray(a0));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }

          PyErr_SetArgsError((PyObject *) self, "toArray", arg);
          return NULL;
        }

        static jboolean JNICALL t_PythonSet_add0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "add", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("add", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_addAll1(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "addAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("addAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonSet_clear2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "clear", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonSet_contains3(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "contains", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("contains", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_containsAll4(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "containsAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("containsAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_equals5(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "equals", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("equals", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_isEmpty6(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "isEmpty", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("isEmpty", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jobject JNICALL t_PythonSet_iterator7(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::util::Iterator value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "iterator", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::java::util::Iterator::initializeClass, &value))
          {
            throwTypeError("iterator", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonSet_pythonDecRef8(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jboolean JNICALL t_PythonSet_remove9(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "remove", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("remove", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_removeAll10(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "removeAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("removeAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_retainAll11(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "retainAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("retainAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jint JNICALL t_PythonSet_size12(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "size", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("size", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jobject JNICALL t_PythonSet_toArray13(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          JArray< ::java::lang::Object > value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "toArray", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "[o", &value))
          {
            throwTypeError("toArray", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonSet_get__self(t_PythonSet *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$FloatComparator.h"
#include "java/io/IOException.h"
#include "java/lang/Float.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$FloatComparator::class$ = NULL;
        jmethodID *FieldComparator$FloatComparator::mids$ = NULL;
        bool FieldComparator$FloatComparator::live$ = false;

        jclass FieldComparator$FloatComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$FloatComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d3177756] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Lorg/apache/lucene/search/FieldCache$Parser;Ljava/lang/Float;)V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_6b30eb6a] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Float;)V");
            mids$[mid_value_c4acb5a1] = env->getMethodID(cls, "value", "(I)Ljava/lang/Float;");
            mids$[mid_getFloatValues_e61237ca] = env->getMethodID(cls, "getFloatValues", "(Lorg/apache/lucene/index/AtomicReaderContext;Ljava/lang/String;)Lorg/apache/lucene/search/FieldCache$Floats;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator$FloatComparator::FieldComparator$FloatComparator(jint a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$Parser & a2, const ::java::lang::Float & a3) : ::org::apache::lucene::search::FieldComparator$NumericComparator(env->newObject(initializeClass, &mids$, mid_init$_d3177756, a0, a1.this$, a2.this$, a3.this$)) {}

        jint FieldComparator$FloatComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$FloatComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$FloatComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        void FieldComparator$FloatComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$FloatComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$FloatComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$FloatComparator::setTopValue(const ::java::lang::Float & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_6b30eb6a], a0.this$);
        }

        ::java::lang::Float FieldComparator$FloatComparator::value(jint a0) const
        {
          return ::java::lang::Float(env->callObjectMethod(this$, mids$[mid_value_c4acb5a1], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$FloatComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$FloatComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$FloatComparator_of_(t_FieldComparator$FloatComparator *self, PyObject *args);
        static int t_FieldComparator$FloatComparator_init_(t_FieldComparator$FloatComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator$FloatComparator_compare(t_FieldComparator$FloatComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$FloatComparator_compareBottom(t_FieldComparator$FloatComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$FloatComparator_compareTop(t_FieldComparator$FloatComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$FloatComparator_copy(t_FieldComparator$FloatComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$FloatComparator_setBottom(t_FieldComparator$FloatComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$FloatComparator_setNextReader(t_FieldComparator$FloatComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$FloatComparator_setTopValue(t_FieldComparator$FloatComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$FloatComparator_value(t_FieldComparator$FloatComparator *self, PyObject *args);
        static int t_FieldComparator$FloatComparator_set__bottom(t_FieldComparator$FloatComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$FloatComparator_set__nextReader(t_FieldComparator$FloatComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$FloatComparator_set__topValue(t_FieldComparator$FloatComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$FloatComparator_get__parameters_(t_FieldComparator$FloatComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$FloatComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$FloatComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$FloatComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$FloatComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$FloatComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$FloatComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$FloatComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$FloatComparator, t_FieldComparator$FloatComparator, ::org::apache::lucene::search::FieldComparator$NumericComparator, FieldComparator$FloatComparator, t_FieldComparator$FloatComparator_init_, 0, 0, t_FieldComparator$FloatComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$FloatComparator::wrap_Object(const FieldComparator$FloatComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$FloatComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$FloatComparator *self = (t_FieldComparator$FloatComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$FloatComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$FloatComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$FloatComparator *self = (t_FieldComparator$FloatComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$FloatComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$FloatComparator), module, "FieldComparator$FloatComparator", 0);
        }

        void t_FieldComparator$FloatComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$FloatComparator).tp_dict, "class_", make_descriptor(FieldComparator$FloatComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$FloatComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$FloatComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$FloatComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$FloatComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$FloatComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$FloatComparator::wrap_Object(FieldComparator$FloatComparator(((t_FieldComparator$FloatComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$FloatComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$FloatComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$FloatComparator_of_(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator$FloatComparator_init_(t_FieldComparator$FloatComparator *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::search::FieldCache$Parser a2((jobject) NULL);
          ::java::lang::Float a3((jobject) NULL);
          FieldComparator$FloatComparator object((jobject) NULL);

          if (!parseArgs(args, "IskO", ::org::apache::lucene::search::FieldCache$Parser::initializeClass, &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = FieldComparator$FloatComparator(a0, a1, a2, a3));
            self->object = object;
            self->parameters[0] = &::java::lang::PY_TYPE(Float);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldComparator$FloatComparator_compare(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$FloatComparator_compareBottom(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$FloatComparator_compareTop(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$FloatComparator_copy(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$FloatComparator_setBottom(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$FloatComparator_setNextReader(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Float));
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$FloatComparator_setTopValue(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          ::java::lang::Float a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Float), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$FloatComparator_value(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Float result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Float::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$FloatComparator_get__parameters_(t_FieldComparator$FloatComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$FloatComparator_set__bottom(t_FieldComparator$FloatComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$FloatComparator_set__nextReader(t_FieldComparator$FloatComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$FloatComparator_set__topValue(t_FieldComparator$FloatComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Float value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Float), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/FastCharStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queryparser/surround/parser/CharStream.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *FastCharStream::class$ = NULL;
            jmethodID *FastCharStream::mids$ = NULL;
            bool FastCharStream::live$ = false;

            jclass FastCharStream::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/FastCharStream");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_BeginToken_54c6a173] = env->getMethodID(cls, "BeginToken", "()C");
                mids$[mid_Done_54c6a166] = env->getMethodID(cls, "Done", "()V");
                mids$[mid_GetImage_14c7b5c5] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
                mids$[mid_GetSuffix_b4292e99] = env->getMethodID(cls, "GetSuffix", "(I)[C");
                mids$[mid_backup_39c7bd3c] = env->getMethodID(cls, "backup", "(I)V");
                mids$[mid_getBeginColumn_54c6a179] = env->getMethodID(cls, "getBeginColumn", "()I");
                mids$[mid_getBeginLine_54c6a179] = env->getMethodID(cls, "getBeginLine", "()I");
                mids$[mid_getColumn_54c6a179] = env->getMethodID(cls, "getColumn", "()I");
                mids$[mid_getEndColumn_54c6a179] = env->getMethodID(cls, "getEndColumn", "()I");
                mids$[mid_getEndLine_54c6a179] = env->getMethodID(cls, "getEndLine", "()I");
                mids$[mid_getLine_54c6a179] = env->getMethodID(cls, "getLine", "()I");
                mids$[mid_readChar_54c6a173] = env->getMethodID(cls, "readChar", "()C");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FastCharStream::FastCharStream(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jchar FastCharStream::BeginToken() const
            {
              return env->callCharMethod(this$, mids$[mid_BeginToken_54c6a173]);
            }

            void FastCharStream::Done() const
            {
              env->callVoidMethod(this$, mids$[mid_Done_54c6a166]);
            }

            ::java::lang::String FastCharStream::GetImage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_14c7b5c5]));
            }

            JArray< jchar > FastCharStream::GetSuffix(jint a0) const
            {
              return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_b4292e99], a0));
            }

            void FastCharStream::backup(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_backup_39c7bd3c], a0);
            }

            jint FastCharStream::getBeginColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginColumn_54c6a179]);
            }

            jint FastCharStream::getBeginLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginLine_54c6a179]);
            }

            jint FastCharStream::getColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getColumn_54c6a179]);
            }

            jint FastCharStream::getEndColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getEndColumn_54c6a179]);
            }

            jint FastCharStream::getEndLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getEndLine_54c6a179]);
            }

            jint FastCharStream::getLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getLine_54c6a179]);
            }

            jchar FastCharStream::readChar() const
            {
              return env->callCharMethod(this$, mids$[mid_readChar_54c6a173]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self);
            static PyObject *t_FastCharStream_Done(t_FastCharStream *self);
            static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self);
            static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg);
            static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg);
            static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self);
            static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self);
            static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self);
            static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self);
            static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self);
            static PyObject *t_FastCharStream_getLine(t_FastCharStream *self);
            static PyObject *t_FastCharStream_readChar(t_FastCharStream *self);
            static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data);
            static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data);
            static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data);
            static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data);
            static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data);
            static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data);
            static PyGetSetDef t_FastCharStream__fields_[] = {
              DECLARE_GET_FIELD(t_FastCharStream, beginColumn),
              DECLARE_GET_FIELD(t_FastCharStream, beginLine),
              DECLARE_GET_FIELD(t_FastCharStream, column),
              DECLARE_GET_FIELD(t_FastCharStream, endColumn),
              DECLARE_GET_FIELD(t_FastCharStream, endLine),
              DECLARE_GET_FIELD(t_FastCharStream, line),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FastCharStream__methods_[] = {
              DECLARE_METHOD(t_FastCharStream, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FastCharStream, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FastCharStream, BeginToken, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, Done, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, GetImage, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, GetSuffix, METH_O),
              DECLARE_METHOD(t_FastCharStream, backup, METH_O),
              DECLARE_METHOD(t_FastCharStream, getBeginColumn, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, getBeginLine, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, getColumn, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, getEndColumn, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, getEndLine, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, getLine, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, readChar, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FastCharStream, t_FastCharStream, ::java::lang::Object, FastCharStream, t_FastCharStream_init_, 0, 0, t_FastCharStream__fields_, 0, 0);

            void t_FastCharStream::install(PyObject *module)
            {
              installType(&PY_TYPE(FastCharStream), module, "FastCharStream", 0);
            }

            void t_FastCharStream::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "class_", make_descriptor(FastCharStream::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "wrapfn_", make_descriptor(t_FastCharStream::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FastCharStream::initializeClass, 1)))
                return NULL;
              return t_FastCharStream::wrap_Object(FastCharStream(((t_FastCharStream *) arg)->object.this$));
            }
            static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FastCharStream::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              FastCharStream object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = FastCharStream(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.BeginToken());
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            static PyObject *t_FastCharStream_Done(t_FastCharStream *self)
            {
              OBJ_CALL(self->object.Done());
              Py_RETURN_NONE;
            }

            static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.GetImage());
              return j2p(result);
            }

            static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg)
            {
              jint a0;
              JArray< jchar > result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.GetSuffix(a0));
                return result.wrap();
              }

              PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
              return NULL;
            }

            static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.backup(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "backup", arg);
              return NULL;
            }

            static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginColumn());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginLine());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getColumn());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getEndColumn());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getEndLine());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_getLine(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getLine());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_readChar(t_FastCharStream *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.readChar());
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginColumn());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginLine());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getColumn());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getEndColumn());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getEndLine());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getLine());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/RomanianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *RomanianStemmer::class$ = NULL;
        jmethodID *RomanianStemmer::mids$ = NULL;
        bool RomanianStemmer::live$ = false;

        jclass RomanianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/RomanianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RomanianStemmer::RomanianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean RomanianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint RomanianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean RomanianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_RomanianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RomanianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RomanianStemmer_init_(t_RomanianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RomanianStemmer_equals(t_RomanianStemmer *self, PyObject *args);
        static PyObject *t_RomanianStemmer_hashCode(t_RomanianStemmer *self, PyObject *args);
        static PyObject *t_RomanianStemmer_stem(t_RomanianStemmer *self, PyObject *args);

        static PyMethodDef t_RomanianStemmer__methods_[] = {
          DECLARE_METHOD(t_RomanianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RomanianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RomanianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_RomanianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_RomanianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RomanianStemmer, t_RomanianStemmer, ::org::tartarus::snowball::SnowballProgram, RomanianStemmer, t_RomanianStemmer_init_, 0, 0, 0, 0, 0);

        void t_RomanianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(RomanianStemmer), module, "RomanianStemmer", 0);
        }

        void t_RomanianStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RomanianStemmer).tp_dict, "class_", make_descriptor(RomanianStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RomanianStemmer).tp_dict, "wrapfn_", make_descriptor(t_RomanianStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RomanianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RomanianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RomanianStemmer::initializeClass, 1)))
            return NULL;
          return t_RomanianStemmer::wrap_Object(RomanianStemmer(((t_RomanianStemmer *) arg)->object.this$));
        }
        static PyObject *t_RomanianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RomanianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RomanianStemmer_init_(t_RomanianStemmer *self, PyObject *args, PyObject *kwds)
        {
          RomanianStemmer object((jobject) NULL);

          INT_CALL(object = RomanianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_RomanianStemmer_equals(t_RomanianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(RomanianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_RomanianStemmer_hashCode(t_RomanianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(RomanianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_RomanianStemmer_stem(t_RomanianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(RomanianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianAnalyzer::class$ = NULL;
          jmethodID *NorwegianAnalyzer::mids$ = NULL;
          bool NorwegianAnalyzer::live$ = false;
          ::java::lang::String *NorwegianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass NorwegianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianAnalyzer::NorwegianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          NorwegianAnalyzer::NorwegianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          NorwegianAnalyzer::NorwegianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet NorwegianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianAnalyzer_init_(t_NorwegianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_NorwegianAnalyzer_get__defaultStopSet(t_NorwegianAnalyzer *self, void *data);
          static PyGetSetDef t_NorwegianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_NorwegianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NorwegianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_NorwegianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NorwegianAnalyzer, t_NorwegianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, NorwegianAnalyzer, t_NorwegianAnalyzer_init_, 0, 0, t_NorwegianAnalyzer__fields_, 0, 0);

          void t_NorwegianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianAnalyzer), module, "NorwegianAnalyzer", 0);
          }

          void t_NorwegianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NorwegianAnalyzer).tp_dict, "class_", make_descriptor(NorwegianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NorwegianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_NorwegianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NorwegianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(NorwegianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(NorwegianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*NorwegianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_NorwegianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_NorwegianAnalyzer::wrap_Object(NorwegianAnalyzer(((t_NorwegianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_NorwegianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianAnalyzer_init_(t_NorwegianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                NorwegianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = NorwegianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                NorwegianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = NorwegianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                NorwegianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = NorwegianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::no::NorwegianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_NorwegianAnalyzer_get__defaultStopSet(t_NorwegianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/grouping/TopGroups.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractSecondPassGroupingCollector::class$ = NULL;
          jmethodID *AbstractSecondPassGroupingCollector::mids$ = NULL;
          bool AbstractSecondPassGroupingCollector::live$ = false;

          jclass AbstractSecondPassGroupingCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e70f2194] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;Lorg/apache/lucene/search/Sort;Lorg/apache/lucene/search/Sort;IZZZ)V");
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
              mids$[mid_getTopGroups_f6dd2ce2] = env->getMethodID(cls, "getTopGroups", "(I)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
              mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
              mids$[mid_retrieveGroup_e4de8d52] = env->getMethodID(cls, "retrieveGroup", "(I)Lorg/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector$SearchGroupDocs;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractSecondPassGroupingCollector::AbstractSecondPassGroupingCollector(const ::java::util::Collection & a0, const ::org::apache::lucene::search::Sort & a1, const ::org::apache::lucene::search::Sort & a2, jint a3, jboolean a4, jboolean a5, jboolean a6) : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_e70f2194, a0.this$, a1.this$, a2.this$, a3, a4, a5, a6)) {}

          jboolean AbstractSecondPassGroupingCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          void AbstractSecondPassGroupingCollector::collect(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
          }

          ::org::apache::lucene::search::grouping::TopGroups AbstractSecondPassGroupingCollector::getTopGroups(jint a0) const
          {
            return ::org::apache::lucene::search::grouping::TopGroups(env->callObjectMethod(this$, mids$[mid_getTopGroups_f6dd2ce2], a0));
          }

          void AbstractSecondPassGroupingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
          }

          void AbstractSecondPassGroupingCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractSecondPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractSecondPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractSecondPassGroupingCollector_of_(t_AbstractSecondPassGroupingCollector *self, PyObject *args);
          static int t_AbstractSecondPassGroupingCollector_init_(t_AbstractSecondPassGroupingCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractSecondPassGroupingCollector_acceptsDocsOutOfOrder(t_AbstractSecondPassGroupingCollector *self, PyObject *args);
          static PyObject *t_AbstractSecondPassGroupingCollector_collect(t_AbstractSecondPassGroupingCollector *self, PyObject *args);
          static PyObject *t_AbstractSecondPassGroupingCollector_getTopGroups(t_AbstractSecondPassGroupingCollector *self, PyObject *arg);
          static PyObject *t_AbstractSecondPassGroupingCollector_setNextReader(t_AbstractSecondPassGroupingCollector *self, PyObject *args);
          static PyObject *t_AbstractSecondPassGroupingCollector_setScorer(t_AbstractSecondPassGroupingCollector *self, PyObject *args);
          static int t_AbstractSecondPassGroupingCollector_set__nextReader(t_AbstractSecondPassGroupingCollector *self, PyObject *arg, void *data);
          static int t_AbstractSecondPassGroupingCollector_set__scorer(t_AbstractSecondPassGroupingCollector *self, PyObject *arg, void *data);
          static PyObject *t_AbstractSecondPassGroupingCollector_get__parameters_(t_AbstractSecondPassGroupingCollector *self, void *data);
          static PyGetSetDef t_AbstractSecondPassGroupingCollector__fields_[] = {
            DECLARE_SET_FIELD(t_AbstractSecondPassGroupingCollector, nextReader),
            DECLARE_SET_FIELD(t_AbstractSecondPassGroupingCollector, scorer),
            DECLARE_GET_FIELD(t_AbstractSecondPassGroupingCollector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractSecondPassGroupingCollector__methods_[] = {
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, of_, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, collect, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, getTopGroups, METH_O),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, setNextReader, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractSecondPassGroupingCollector, t_AbstractSecondPassGroupingCollector, ::org::apache::lucene::search::Collector, AbstractSecondPassGroupingCollector, t_AbstractSecondPassGroupingCollector_init_, 0, 0, t_AbstractSecondPassGroupingCollector__fields_, 0, 0);
          PyObject *t_AbstractSecondPassGroupingCollector::wrap_Object(const AbstractSecondPassGroupingCollector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractSecondPassGroupingCollector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractSecondPassGroupingCollector *self = (t_AbstractSecondPassGroupingCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractSecondPassGroupingCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractSecondPassGroupingCollector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractSecondPassGroupingCollector *self = (t_AbstractSecondPassGroupingCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractSecondPassGroupingCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractSecondPassGroupingCollector), module, "AbstractSecondPassGroupingCollector", 0);
          }

          void t_AbstractSecondPassGroupingCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractSecondPassGroupingCollector).tp_dict, "class_", make_descriptor(AbstractSecondPassGroupingCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractSecondPassGroupingCollector).tp_dict, "wrapfn_", make_descriptor(t_AbstractSecondPassGroupingCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractSecondPassGroupingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractSecondPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractSecondPassGroupingCollector::initializeClass, 1)))
              return NULL;
            return t_AbstractSecondPassGroupingCollector::wrap_Object(AbstractSecondPassGroupingCollector(((t_AbstractSecondPassGroupingCollector *) arg)->object.this$));
          }
          static PyObject *t_AbstractSecondPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractSecondPassGroupingCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractSecondPassGroupingCollector_of_(t_AbstractSecondPassGroupingCollector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_AbstractSecondPassGroupingCollector_init_(t_AbstractSecondPassGroupingCollector *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::search::Sort a1((jobject) NULL);
            ::org::apache::lucene::search::Sort a2((jobject) NULL);
            jint a3;
            jboolean a4;
            jboolean a5;
            jboolean a6;
            AbstractSecondPassGroupingCollector object((jobject) NULL);

            if (!parseArgs(args, "KkkIZZZ", ::java::util::Collection::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              INT_CALL(object = AbstractSecondPassGroupingCollector(a0, a1, a2, a3, a4, a5, a6));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AbstractSecondPassGroupingCollector_acceptsDocsOutOfOrder(t_AbstractSecondPassGroupingCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractSecondPassGroupingCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_AbstractSecondPassGroupingCollector_collect(t_AbstractSecondPassGroupingCollector *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractSecondPassGroupingCollector), (PyObject *) self, "collect", args, 2);
          }

          static PyObject *t_AbstractSecondPassGroupingCollector_getTopGroups(t_AbstractSecondPassGroupingCollector *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::search::grouping::TopGroups result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getTopGroups(a0));
              return ::org::apache::lucene::search::grouping::t_TopGroups::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "getTopGroups", arg);
            return NULL;
          }

          static PyObject *t_AbstractSecondPassGroupingCollector_setNextReader(t_AbstractSecondPassGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setNextReader(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractSecondPassGroupingCollector), (PyObject *) self, "setNextReader", args, 2);
          }

          static PyObject *t_AbstractSecondPassGroupingCollector_setScorer(t_AbstractSecondPassGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorer a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractSecondPassGroupingCollector), (PyObject *) self, "setScorer", args, 2);
          }
          static PyObject *t_AbstractSecondPassGroupingCollector_get__parameters_(t_AbstractSecondPassGroupingCollector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_AbstractSecondPassGroupingCollector_set__nextReader(t_AbstractSecondPassGroupingCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_AbstractSecondPassGroupingCollector_set__scorer(t_AbstractSecondPassGroupingCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/FloatDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *FloatDocValuesField::class$ = NULL;
        jmethodID *FloatDocValuesField::mids$ = NULL;
        bool FloatDocValuesField::live$ = false;

        jclass FloatDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/FloatDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f0649ce1] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;F)V");
            mids$[mid_setFloatValue_06298cab] = env->getMethodID(cls, "setFloatValue", "(F)V");
            mids$[mid_setLongValue_0ee6df2f] = env->getMethodID(cls, "setLongValue", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FloatDocValuesField::FloatDocValuesField(const ::java::lang::String & a0, jfloat a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_f0649ce1, a0.this$, a1)) {}

        void FloatDocValuesField::setFloatValue(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFloatValue_06298cab], a0);
        }

        void FloatDocValuesField::setLongValue(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLongValue_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_FloatDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FloatDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FloatDocValuesField_init_(t_FloatDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FloatDocValuesField_setFloatValue(t_FloatDocValuesField *self, PyObject *args);
        static PyObject *t_FloatDocValuesField_setLongValue(t_FloatDocValuesField *self, PyObject *args);
        static int t_FloatDocValuesField_set__floatValue(t_FloatDocValuesField *self, PyObject *arg, void *data);
        static int t_FloatDocValuesField_set__longValue(t_FloatDocValuesField *self, PyObject *arg, void *data);
        static PyGetSetDef t_FloatDocValuesField__fields_[] = {
          DECLARE_SET_FIELD(t_FloatDocValuesField, floatValue),
          DECLARE_SET_FIELD(t_FloatDocValuesField, longValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FloatDocValuesField__methods_[] = {
          DECLARE_METHOD(t_FloatDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FloatDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FloatDocValuesField, setFloatValue, METH_VARARGS),
          DECLARE_METHOD(t_FloatDocValuesField, setLongValue, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FloatDocValuesField, t_FloatDocValuesField, ::org::apache::lucene::document::NumericDocValuesField, FloatDocValuesField, t_FloatDocValuesField_init_, 0, 0, t_FloatDocValuesField__fields_, 0, 0);

        void t_FloatDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(FloatDocValuesField), module, "FloatDocValuesField", 0);
        }

        void t_FloatDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FloatDocValuesField).tp_dict, "class_", make_descriptor(FloatDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FloatDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_FloatDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FloatDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FloatDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FloatDocValuesField::initializeClass, 1)))
            return NULL;
          return t_FloatDocValuesField::wrap_Object(FloatDocValuesField(((t_FloatDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_FloatDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FloatDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FloatDocValuesField_init_(t_FloatDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jfloat a1;
          FloatDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sF", &a0, &a1))
          {
            INT_CALL(object = FloatDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FloatDocValuesField_setFloatValue(t_FloatDocValuesField *self, PyObject *args)
        {
          jfloat a0;

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(self->object.setFloatValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FloatDocValuesField), (PyObject *) self, "setFloatValue", args, 2);
        }

        static PyObject *t_FloatDocValuesField_setLongValue(t_FloatDocValuesField *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.setLongValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FloatDocValuesField), (PyObject *) self, "setLongValue", args, 2);
        }

        static int t_FloatDocValuesField_set__floatValue(t_FloatDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setFloatValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "floatValue", arg);
          return -1;
        }

        static int t_FloatDocValuesField_set__longValue(t_FloatDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setLongValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "longValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/reverse/ReverseStringFilter.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace reverse {

          ::java::lang::Class *ReverseStringFilter::class$ = NULL;
          jmethodID *ReverseStringFilter::mids$ = NULL;
          bool ReverseStringFilter::live$ = false;
          jchar ReverseStringFilter::INFORMATION_SEPARATOR_MARKER = (jchar) 0;
          jchar ReverseStringFilter::PUA_EC00_MARKER = (jchar) 0;
          jchar ReverseStringFilter::RTL_DIRECTION_MARKER = (jchar) 0;
          jchar ReverseStringFilter::START_OF_HEADING_MARKER = (jchar) 0;

          jclass ReverseStringFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/reverse/ReverseStringFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_0e43cbd7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;C)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reverse_4b169143] = env->getStaticMethodID(cls, "reverse", "(Lorg/apache/lucene/util/Version;[C)V");
              mids$[mid_reverse_4fcde068] = env->getStaticMethodID(cls, "reverse", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_reverse_dcd30fdb] = env->getStaticMethodID(cls, "reverse", "(Lorg/apache/lucene/util/Version;[CI)V");
              mids$[mid_reverse_41701017] = env->getStaticMethodID(cls, "reverse", "(Lorg/apache/lucene/util/Version;[CII)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              INFORMATION_SEPARATOR_MARKER = env->getStaticCharField(cls, "INFORMATION_SEPARATOR_MARKER");
              PUA_EC00_MARKER = env->getStaticCharField(cls, "PUA_EC00_MARKER");
              RTL_DIRECTION_MARKER = env->getStaticCharField(cls, "RTL_DIRECTION_MARKER");
              START_OF_HEADING_MARKER = env->getStaticCharField(cls, "START_OF_HEADING_MARKER");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ReverseStringFilter::ReverseStringFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          ReverseStringFilter::ReverseStringFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jchar a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_0e43cbd7, a0.this$, a1.this$, a2)) {}

          jboolean ReverseStringFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void ReverseStringFilter::reverse(const ::org::apache::lucene::util::Version & a0, const JArray< jchar > & a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reverse_4b169143], a0.this$, a1.this$);
          }

          ::java::lang::String ReverseStringFilter::reverse(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_reverse_4fcde068], a0.this$, a1.this$));
          }

          void ReverseStringFilter::reverse(const ::org::apache::lucene::util::Version & a0, const JArray< jchar > & a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reverse_dcd30fdb], a0.this$, a1.this$, a2);
          }

          void ReverseStringFilter::reverse(const ::org::apache::lucene::util::Version & a0, const JArray< jchar > & a1, jint a2, jint a3)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reverse_41701017], a0.this$, a1.this$, a2, a3);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace reverse {
          static PyObject *t_ReverseStringFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ReverseStringFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ReverseStringFilter_init_(t_ReverseStringFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ReverseStringFilter_incrementToken(t_ReverseStringFilter *self, PyObject *args);
          static PyObject *t_ReverseStringFilter_reverse(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_ReverseStringFilter__methods_[] = {
            DECLARE_METHOD(t_ReverseStringFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReverseStringFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReverseStringFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ReverseStringFilter, reverse, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ReverseStringFilter, t_ReverseStringFilter, ::org::apache::lucene::analysis::TokenFilter, ReverseStringFilter, t_ReverseStringFilter_init_, 0, 0, 0, 0, 0);

          void t_ReverseStringFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ReverseStringFilter), module, "ReverseStringFilter", 0);
          }

          void t_ReverseStringFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ReverseStringFilter).tp_dict, "class_", make_descriptor(ReverseStringFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ReverseStringFilter).tp_dict, "wrapfn_", make_descriptor(t_ReverseStringFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ReverseStringFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ReverseStringFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(ReverseStringFilter).tp_dict, "INFORMATION_SEPARATOR_MARKER", make_descriptor(ReverseStringFilter::INFORMATION_SEPARATOR_MARKER));
            PyDict_SetItemString(PY_TYPE(ReverseStringFilter).tp_dict, "PUA_EC00_MARKER", make_descriptor(ReverseStringFilter::PUA_EC00_MARKER));
            PyDict_SetItemString(PY_TYPE(ReverseStringFilter).tp_dict, "RTL_DIRECTION_MARKER", make_descriptor(ReverseStringFilter::RTL_DIRECTION_MARKER));
            PyDict_SetItemString(PY_TYPE(ReverseStringFilter).tp_dict, "START_OF_HEADING_MARKER", make_descriptor(ReverseStringFilter::START_OF_HEADING_MARKER));
          }

          static PyObject *t_ReverseStringFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ReverseStringFilter::initializeClass, 1)))
              return NULL;
            return t_ReverseStringFilter::wrap_Object(ReverseStringFilter(((t_ReverseStringFilter *) arg)->object.this$));
          }
          static PyObject *t_ReverseStringFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ReverseStringFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ReverseStringFilter_init_(t_ReverseStringFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ReverseStringFilter object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = ReverseStringFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jchar a2;
                ReverseStringFilter object((jobject) NULL);

                if (!parseArgs(args, "KkC", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = ReverseStringFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ReverseStringFilter_incrementToken(t_ReverseStringFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ReverseStringFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ReverseStringFilter_reverse(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< jchar > a1((jobject) NULL);

                if (!parseArgs(args, "K[C", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  OBJ_CALL(::org::apache::lucene::analysis::reverse::ReverseStringFilter::reverse(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "Ks", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::reverse::ReverseStringFilter::reverse(a0, a1));
                  return j2p(result);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< jchar > a1((jobject) NULL);
                jint a2;

                if (!parseArgs(args, "K[CI", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  OBJ_CALL(::org::apache::lucene::analysis::reverse::ReverseStringFilter::reverse(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< jchar > a1((jobject) NULL);
                jint a2;
                jint a3;

                if (!parseArgs(args, "K[CII", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  OBJ_CALL(::org::apache::lucene::analysis::reverse::ReverseStringFilter::reverse(a0, a1, a2, a3));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError(type, "reverse", args);
            return NULL;
          }
        }
      }
    }
  }
}
